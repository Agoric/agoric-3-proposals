name: Docker Build Proposal Range

on:
  workflow_dispatch:
    # XXX: Would be great to use a YAML anchor for shared inputs, but they are
    # not supported in Actions.
    inputs:
      range:
        description: '"start/end" proposal ranges'
        required: false
        default: ''
        type: string
      registry:
        description: 'Container registry'
        required: false
        default: 'ghcr.io'
        type: string
      image_name:
        description: 'Container image name'
        required: false
        default: agoric/agoric-3-proposals # XXX: '${{ github.repository }}'
        type: string
  workflow_call:
    # XXX: Would be great to use a YAML anchor for shared inputs, but they are
    # not supported in Actions.
    inputs:
      range:
        description: '"start/end" proposal ranges'
        required: false
        default: ''
        type: string
      registry:
        description: 'Container registry'
        required: false
        default: 'ghcr.io'
        type: string
      image_name:
        description: 'Container image name'
        required: false
        default: agoric/agoric-3-proposals # XXX: '${{ github.repository }}'
        type: string

jobs:
  # see https://docs.docker.com/build/ci/github-actions/test-before-push/
  test:
    permissions:
      # allow issuing OIDC tokens for this workflow run
      id-token: write
      # allow at least reading the repo contents, add other permissions if necessary
      contents: read
      # to push the resulting images
      packages: write
    runs-on: 'depot-ubuntu-22.04-16'

    steps:
      - name: Prepare build flags
        id: flags
        env:
          RANGE: ${{ inputs.range }}
        run: |
          set -ex
          build_flags=
          # Split the range into start and stop proposals.
          if [[ -z "$RANGE" ]]; then
            echo "No range specified, building all."
          # The range is expected to be in the form "start/stop" or "start/" or "/stop".
          elif [[ "$RANGE" =~ ^([^/]*)/([^/]*)$ ]]; then
            start="${BASH_REMATCH[1]}"
            stop="${BASH_REMATCH[2]}"
          else
            echo "Invalid range format: '$RANGE'. Expected 'start/stop' or 'start/' or '/stop'."
            exit 1
          fi

          test -z "$start" || build_flags="$build_flags --start=$start"
          echo "start=$start" >> $GITHUB_OUTPUT

          test -z "$stop" || build_flags="$build_flags --stop=$stop"
          echo "stop=$stop" >> $GITHUB_OUTPUT

          echo "Using build flags:$build_flags"
          echo "build_flags=$build_flags" >> $GITHUB_OUTPUT

      - name: free up disk space
        run: |
          # Workaround to provide additional free space for testing.
          #   https://github.com/actions/runner-images/issues/2840#issuecomment-790492173
          # If this turns out not to be enough, maybe look instead at
          #   https://github.com/actions/runner-images/issues/2840#issuecomment-1540506686
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          echo "=== After cleanup:"
          df -h

      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: depot/setup-action@v1
        with:
          oidc: true # to set DEPOT_TOKEN for later steps

      # make Docker's CLI use depot to build
      - run: depot configure-docker

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        # see https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ inputs.registry }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ inputs.image_name }}

      - name: Install deps
        run: |
          # Enable corepack for packageManager config
          corepack enable || sudo corepack enable
          yarn install

      - name: Prepare Docker config
        env:
          BUILD_FLAGS: ${{ steps.flags.outputs.build_flags }}
        run: |
          set -ex

          yarn build-cli

          # prepare files for bake-action
          yarn synthetic-chain prepare-build$BUILD_FLAGS

      # Verify that all "use" images build across platforms.
      - name: Build proposal "use" images
        uses: depot/bake-action@v1
        with:
          files: |
            ./docker-bake.json
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: use

      # Verify that proposals' tests pass.
      # Note this builds each proposal testing image sequentially. It does that so it can delete the image
      # after it passees, freeing up disk space.
      - name: Build and run proposal tests
        env:
          BUILD_FLAGS: ${{ steps.flags.outputs.build_flags }}
        run: yarn test$BUILD_FLAGS

      # Push the images if the tests pass and this is not a PR
      - name: Push proposal "use" images
        # If we pushed from PRs, each one would overwrite main's (e.g. use-upgrade-8)
        # To push PR "use" images we'll need to qualify the tag (e.g. use-upgrade-8-pr-2).
        if: ${{ github.event_name != 'pull_request' }}
        uses: depot/bake-action@v1
        with:
          files: |
            ./docker-bake.json
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: use
          push: true

      # Just like the "use" image above but has to begin after that ends
      # because the "build" here is merely to retag the latest "use" image.
      # We could do this with imagetools but this lets use keep the tagging logic
      # in Bake instead of mixed into CI. This step should do hardly any building
      # because its FROM image was just built above.
      - name: Push "latest" image
        # Same reason as for "use" images
        if: ${{ github.event_name != 'pull_request' && !steps.flags.outputs.stop }}
        uses: depot/bake-action@v1
        with:
          files: |
            ./docker-bake.json
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: latest
          push: true
