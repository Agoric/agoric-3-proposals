name: Docker Build Proposal Range

on:
  workflow_dispatch:
    # XXX: Would be great to use a YAML anchor for shared inputs, but they are
    # not supported in Actions.
    inputs:
      range:
        description: '"start/end" proposal ranges'
        required: false
        default: ''
        type: string
      registry:
        description: 'Container registry'
        required: false
        default: 'ghcr.io'
        type: string
      image_name:
        description: 'Container image name'
        required: false
        default: Agoric/agoric-3-proposals # XXX: '${{ github.repository }}'
        type: string
  workflow_call:
    # XXX: Would be great to use a YAML anchor for shared inputs, but they are
    # not supported in Actions.
    inputs:
      range:
        description: '"start/end" proposal ranges'
        required: false
        default: ''
        type: string
      registry:
        description: 'Container registry'
        required: false
        default: 'ghcr.io'
        type: string
      image_name:
        description: 'Container image name'
        required: false
        default: Agoric/agoric-3-proposals # XXX: '${{ github.repository }}'
        type: string

jobs:
  # see https://docs.docker.com/build/ci/github-actions/test-before-push/
  build:
    permissions:
      # allow issuing OIDC tokens for this workflow run
      id-token: write
      # allow at least reading the repo contents, add other permissions if necessary
      contents: read
    # This runner isn't doing much besides waiting for the build
    runs-on: 'depot-ubuntu-latest'

    outputs:
      build-id: ${{ steps.build.outputs.build-id }}
      project-id: ${{ steps.build.outputs.project-id }}
      proposals: ${{ steps.prepare.outputs.proposals }}
      images-to-push: ${{ steps.prepare.outputs.images-to-push }}
      build-flags: ${{ steps.flags.outputs.build_flags }}

    steps:
      - name: Prepare build flags
        id: flags
        env:
          RANGE: ${{ inputs.range }}
        run: |
          set -ex
          build_flags=
          # Split the range into start and stop proposals.
          if [[ -z "$RANGE" ]]; then
            echo "No range specified, building all."
          # The range is expected to be in the form "start/stop" or "start/" or "/stop".
          elif [[ "$RANGE" =~ ^([^/]*)/([^/]*)$ ]]; then
            start="${BASH_REMATCH[1]}"
            stop="${BASH_REMATCH[2]}"
          else
            echo "Invalid range format: '$RANGE'. Expected 'start/stop' or 'start/' or '/stop'."
            exit 1
          fi

          test -z "$start" || build_flags="$build_flags --start=$start"
          echo "start=$start" >> $GITHUB_OUTPUT

          test -z "$stop" || build_flags="$build_flags --stop=$stop"
          echo "stop=$stop" >> $GITHUB_OUTPUT

          echo "Using build flags:$build_flags"
          echo "build_flags=$build_flags" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ inputs.image_name }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup node
        uses: ./.github/actions/setup-node
        with:
          # we only care about the root yarn.lock for the cli build
          lock-path: ./yarn.lock

      - name: Install deps
        run: |
          set -ex -o pipefail

          yarn install
          yarn build-cli

      - name: Prepare build config
        id: prepare
        env:
          BUILD_FLAGS: ${{ steps.flags.outputs.build_flags }}
          STOP: ${{ steps.flags.outputs.stop }}
        run: |
          set -ex -o pipefail

          # prepare files for bake-action
          yarn synthetic-chain prepare-build$BUILD_FLAGS

          # extract proposals to test and push
          proposals=$(jq -rc '.variable.PROPOSALS.default' docker-bake.json)
          echo "proposals=$proposals" >> "$GITHUB_OUTPUT"

          images_to_push=$(jq -rc --arg stop "$STOP" '(.variable.PROPOSALS.default | map("use-" + .)) + if $stop == "" then ["latest"] else [] end' docker-bake.json)
          echo "images-to-push=$images_to_push" >> "$GITHUB_OUTPUT"

          if [ -z "$STOP" ]; then
            targets="use,test,latest"
          else
            targets="use,test"
          fi
          echo "targets=$targets" >> "$GITHUB_OUTPUT"

      - uses: depot/setup-action@v1

      # Build "use" and "test" images across platforms.
      - name: Build proposal "use" and "test" images
        id: build
        uses: depot/bake-action@v1
        with:
          files: |
            ./docker-bake.json
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: ${{ steps.prepare.outputs.targets }}
          save: true

  test:
    needs: build
    strategy:
      fail-fast: true
      matrix:
        proposal: ${{ fromJson(needs.build.outputs.proposals) }}
    permissions:
      # allow issuing OIDC tokens for this workflow run
      id-token: write
      # allow at least reading the repo contents, add other permissions if necessary
      contents: read
    # The tests don't require a lot of resources, use a step up from minimum
    runs-on: 'depot-ubuntu-latest-4'
    steps:
      - name: free up disk space
        run: |
          # Workaround to provide additional free space for testing.
          #   https://github.com/actions/runner-images/issues/2840#issuecomment-790492173
          # If this turns out not to be enough, maybe look instead at
          #   https://github.com/actions/runner-images/issues/2840#issuecomment-1540506686
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          echo "=== After cleanup:"
          df -h

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup node
        uses: ./.github/actions/setup-node
        with:
          # we only care about the root yarn.lock for the cli build
          lock-path: ./yarn.lock

      - name: Install deps
        run: |
          set -ex -o pipefail

          yarn install
          yarn build-cli

      - uses: depot/setup-action@v1

      # Pull the test image for the proposal
      - uses: depot/pull-action@v1
        with:
          build-id: ${{ needs.build.outputs.build-id }}
          targets: test-${{ matrix.proposal }}

      # Verify that proposals' tests pass.
      # This does not build the image and relies on the pulled image
      - name: Run proposal tests
        env:
          BUILD_FLAGS: ${{ needs.build.outputs.build-flags }}
        run: yarn test $BUILD_FLAGS --dry -match "${{ matrix.proposal }}" --exact

  # Push the images if the tests pass and this is not a PR
  push:
    needs: [test, build]
    # If we pushed from PRs, each one would overwrite main's (e.g. use-upgrade-8)
    # To push PR "use" images we'll need to qualify the tag (e.g. use-upgrade-8-pr-2).
    if: ${{ github.event_name != 'pull_request' }}
    permissions:
      # allow issuing OIDC tokens for this workflow run
      id-token: write
      # allow at least reading the repo contents, add other permissions if necessary
      contents: read
      # to push the resulting images
      packages: write
    # This runner isn't doing much besides orchestrating the image push
    runs-on: 'depot-ubuntu-latest'
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.build.outputs.images-to-push) }}
    steps:
      - uses: depot/setup-action@v1
        with:
          oidc: true # to set DEPOT_TOKEN for push to registry

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        # see https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ inputs.registry }}

      - name: Push proposal "use" and latest images
        env:
          TARGET: ${{ matrix.target }}
          BUILD_ID: ${{ needs.build.outputs.build-id }}
          PROJECT_ID: ${{ needs.build.outputs.project-id }}
          REGISTRY: ${{ inputs.registry }}
          IMAGE_NAME: ${{ inputs.image_name }}
        # ,, to lowercase because Agoric org is uppercase and Depot requires lowercase
        run: depot push --project $PROJECT_ID --tag "$REGISTRY/${IMAGE_NAME,,}:$TARGET" --target $TARGET $BUILD_ID

      # XXX: depot.dev is configured with a 1-day retention for registry images
      # It'd be nice if we could explicitly remove the build images since we're done with them
