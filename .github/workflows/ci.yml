name: Proposal tests

# NB: This job works differently for PRs and non-PRs. If you make significant changes,
# be sure to manually trigger the non-PR workflow before merging.

# In PRS,
# - build and run 'test' images
# - no pushing of images
#
# In `main` pushes and manual triggers,
# - build and run 'test' images
# - build 'use' images for *all passed proposals* AND push to registry (e.g. use-upgrade-10)

# In both cases it uses a remote builder with depot.dev (see depot.json) to get a persistent
# build cache and automatic multiplatform builds and image management.

# If `main` fails, you'll make a PR to fix it but its CI will only run the PR flow above.
# To test the non-PR way, you need to manually trigger this workflow by going to,
# https://github.com/Agoric/agoric-3-proposals/actions/workflows/ci.yml
# and clicking "Run workflow", specifying this branch.
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - labeled
      - unlabeled
  workflow_dispatch:
    inputs:
      from_proposal:
        description: 'Rebuild proposals from the given name'
        required: false
        default: ''
        type: string
  merge_group:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-package:
    runs-on: 'ubuntu-latest'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup node
        uses: ./.github/actions/setup-node
        with:
          # we only care about the root yarn.lock for the synthetic-chain tool
          lock-path: ./yarn.lock

      - name: Install deps
        run: yarn install

      - name: Lint repo
        run: yarn lint

      - name: Typecheck synthetic-chain
        run: yarn tsc
        working-directory: packages/synthetic-chain

      - name: Test synthetic-chain
        run: yarn test
        working-directory: packages/synthetic-chain

  from-proposal:
    runs-on: ubuntu-latest
    outputs:
      from: ${{ steps.get-forced-from-proposal.outputs.result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Get changed packages
        id: git_diff
        uses: technote-space/get-diff-action@v6.1.2
        with:
          PATTERNS: |
            packages/**/*.json
            packages/**/.hcl
            packages/**/*.js
            packages/**/*.mjs
            packages/**/*.cjs
            packages/**/*.ts
            packages/**/*.mts
            packages/**/*.cts
      # Select a forced proposal from which to rebuild
      - name: Get forced from proposal
        id: get-forced-from-proposal
        env:
          INPUT_FROM_PROPOSAL: ${{ inputs.from_proposal }}
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |-
            let forced = '';
            if (context.payload.pull_request) {
              const { body } = context.payload.pull_request;
              const regex = /^\#force-from-proposal:\s+(\S+)/m;
              const result = regex.exec(body);
              if (result) {
                forced = result[1];
              }
            } else if (process.env.INPUT_FROM_PROPOSAL) {
              forced = process.env.INPUT_FROM_PROPOSAL;
            }
            console.log('Forced from proposal: ' + forced);
            return forced;

  proposals:
    needs: from-proposal
    secrets: inherit
    uses: ./.github/workflows/docker-proposals.yml
    with:
      range: ${{ needs.from-proposal.outputs.from && format('{0}/', needs.from-proposal.outputs.from) || '' }}
      image_name: ${{ github.repository }}

  test-proposals:
    needs: [proposals]
    runs-on: ubuntu-latest
    steps:
      - run: echo success

  notify-on-failure:
    needs: [test-package, test-proposals]
    runs-on: ubuntu-latest
    steps:
      - name: notify on failure
        if: failure() && github.event_name != 'pull_request'
        uses: ./.github/actions/notify-status
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          from: ${{ secrets.NOTIFY_EMAIL_FROM }}
          to: ${{ secrets.NOTIFY_EMAIL_TO }}
          password: ${{ secrets.NOTIFY_EMAIL_PASSWORD }}
