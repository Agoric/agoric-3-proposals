name: Proposal tests

# NB: This job works differently for PRs and non-PRs. If you make significant changes,
# be sure to manually trigger the non-PR workflow before merging.

# In PRS,
# - build and run 'test' images
# - no pushing of images
#
# In `main` pushes and manual triggers,
# - build and run 'test' images
# - build 'use' images for *all passed proposals* AND push to registry (e.g. use-upgrade-10)

# In both cases it uses a remote builder with depot.dev (see depot.json) to get a persistent
# build cache and automatic multiplatform builds and image management.

# If `main` fails, you'll make a PR to fix it but its CI will only run the PR flow above.
# To test the non-PR way, you need to manually trigger this workflow by going to,
# https://github.com/Agoric/agoric-3-proposals/actions/workflows/ci.yml
# and clicking "Run workflow", specifying this branch.
on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
  workflow_dispatch:
    inputs:
      from_scratch:
        description: 'Rebuild all proposals from scratch'
        required: false
        default: false
        type: boolean
  merge_group:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-package:
    runs-on: 'ubuntu-latest'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: |
          set -e
          # Enable corepack for packageManager config
          corepack enable || sudo corepack enable
          yarn install

      - name: Lint repo
        run: yarn lint

      - name: Typecheck synthetic-chain
        run: yarn tsc
        working-directory: packages/synthetic-chain

      - name: Test synthetic-chain
        run: yarn test
        working-directory: packages/synthetic-chain

  from-scratch:
    runs-on: ubuntu-latest
    outputs:
      from-scratch: ${{ steps.from_scratch.outputs.from_scratch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Get changed packages
        id: git_diff
        uses: technote-space/get-diff-action@v6.1.2
        with:
          PATTERNS: |
            packages/**/*.json
            packages/**/.hcl
            packages/**/*.js
            packages/**/*.mjs
            packages/**/*.cjs
            packages/**/*.ts
            packages/**/*.mts
            packages/**/*.cts
      - name: Set user's choice with label
        id: user_from_scratch
        env:
          INPUT: ${{ inputs.from_scratch }}
          FORCE: ${{ contains(github.event.pull_request.labels.*.name, 'force:from-scratch') && 'true' || 'false' }}
          BYPASS: ${{ contains(github.event.pull_request.labels.*.name, 'bypass:from-scratch') && 'true' || 'false' }}
        run: |
          set -ex
          if [[ "$INPUT" == true ]]; then
            echo "choice=true" >> $GITHUB_OUTPUT
          elif [[ "$FORCE" == true ]]; then
            echo "choice=true" >> $GITHUB_OUTPUT
          elif [[ "$BYPASS" == true ]]; then
            echo "choice=false" >> $GITHUB_OUTPUT
          else
            echo "choice=none" >> $GITHUB_OUTPUT
          fi
      - name: Set from_scratch flag
        id: from_scratch
        env:
          USER_CHOICE: ${{ steps.user_from_scratch.outputs.choice }}
          PACKAGES_CHANGED: ${{ steps.git_diff.outputs.diff && 'true' || 'false' }}
        run: |
          set -ex
          if [ "$PACKAGES_CHANGED" == true ] && [ "$USER_CHOICE" == none ]; then
            echo "packages source changed; you must choose between force:from-scratch or bypass:from-scratch"
            exit 1
          elif [ "$USER_CHOICE" == true ]; then
            echo "from_scratch=true" >> $GITHUB_OUTPUT
          else
            echo "from_scratch=false" >> $GITHUB_OUTPUT
          fi

  make-ranges:
    needs: from-scratch
    runs-on: ubuntu-latest
    outputs:
      ranges: ${{ steps.make-ranges.outputs.ranges }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install deps
        run: |
          set -e
          # Enable corepack for packageManager config
          corepack enable || sudo corepack enable
          yarn install
          yarn build-cli

      - name: Decide how to batch the ranges
        id: make-ranges
        env:
          IS_PR: ${{ github.event_name == 'pull_request'}}
          FROM_SCRATCH: ${{ needs.from-scratch.outputs.from-scratch}}
        run: |
          set -ex
          opts=
          if [ "$FROM_SCRATCH" == true ]; then
            opts="$opts --rebuild"
          fi
          if [ "$IS_PR" == true ]; then
            opts="$opts --no-push"
          fi
          echo "ranges=$(yarn synthetic-chain make-ranges$opts)" >> "$GITHUB_OUTPUT"

  test-proposals:
    needs: make-ranges
    strategy:
      fail-fast: true
      # XXX We need to split the proposals and build each range sequentially
      # to avoid overwhelming the Depot builder with too much parallelism.
      max-parallel: 1
      matrix:
        range: ${{ fromJson(needs.make-ranges.outputs.ranges) }}
    uses: ./.github/workflows/docker-proposals.yml
    with:
      range: ${{ matrix.range }}
      image_name: ${{ github.repository }}
    secrets: inherit

  notify-on-failure:
    needs: [test-package, test-proposals]
    runs-on: ubuntu-latest
    steps:
      - name: notify on failure
        if: failure() && github.event_name != 'pull_request'
        uses: ./.github/actions/notify-status
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          from: ${{ secrets.NOTIFY_EMAIL_FROM }}
          to: ${{ secrets.NOTIFY_EMAIL_TO }}
          password: ${{ secrets.NOTIFY_EMAIL_PASSWORD }}
