{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "a63b1a57ccaf4f9b89e7d3e1e79d97406445c687dbf3c58ed45643b9da63b72bef9e3bff78d7ed2daf458f0376c3a4db8961c16204e1e7b7deaa30326553b66f"
}