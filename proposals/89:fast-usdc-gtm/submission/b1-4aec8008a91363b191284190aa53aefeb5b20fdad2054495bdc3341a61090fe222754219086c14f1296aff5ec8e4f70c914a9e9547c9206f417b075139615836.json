{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "4aec8008a91363b191284190aa53aefeb5b20fdad2054495bdc3341a61090fe222754219086c14f1296aff5ec8e4f70c914a9e9547c9206f417b075139615836"
}