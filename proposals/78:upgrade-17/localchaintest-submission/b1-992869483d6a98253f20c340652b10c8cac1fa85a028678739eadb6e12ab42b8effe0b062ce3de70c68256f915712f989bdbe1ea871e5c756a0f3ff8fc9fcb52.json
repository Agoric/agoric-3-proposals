{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "992869483d6a98253f20c340652b10c8cac1fa85a028678739eadb6e12ab42b8effe0b062ce3de70c68256f915712f989bdbe1ea871e5c756a0f3ff8fc9fcb52"
}