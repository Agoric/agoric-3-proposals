{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "81c0224cb5466dfa9b5d14bc94d19ed1b0ca7aa47d22dadd0f538f14a59d70a596aa37850ec89aba796873f912708bd6144a91693e643af7a98602c70fbe052f"
}
