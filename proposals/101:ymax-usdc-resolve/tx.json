{
  "height": "20676912",
  "txhash": "2362947DD7C33A3EC103EB2758CACE2D116B4762C5D8EE137E0099ACA5D20B04",
  "codespace": "",
  "code": 0,
  "data": "12330A2D2F636F736D6F732E676F762E763162657461312E4D73675375626D697450726F706F73616C526573706F6E736512020865",
  "raw_log": "[{\"msg_index\":0,\"events\":[{\"type\":\"message\",\"attributes\":[{\"key\":\"action\",\"value\":\"/cosmos.gov.v1beta1.MsgSubmitProposal\"},{\"key\":\"sender\",\"value\":\"agoric1amhrnyzvmzj7ugd83n0jk8lme64zlwdv6u52gl\"},{\"key\":\"module\",\"value\":\"gov\"}]},{\"type\":\"submit_proposal\",\"attributes\":[{\"key\":\"proposal_id\",\"value\":\"101\"},{\"key\":\"proposal_messages\",\"value\":\",/cosmos.gov.v1.MsgExecLegacyContent\"}]},{\"type\":\"coin_spent\",\"attributes\":[{\"key\":\"spender\",\"value\":\"agoric1amhrnyzvmzj7ugd83n0jk8lme64zlwdv6u52gl\"},{\"key\":\"amount\",\"value\":\"5000000000ubld\"}]},{\"type\":\"coin_received\",\"attributes\":[{\"key\":\"receiver\",\"value\":\"agoric10d07y265gmmuvt4z0w9aw880jnsr700jgl36x9\"},{\"key\":\"amount\",\"value\":\"5000000000ubld\"}]},{\"type\":\"transfer\",\"attributes\":[{\"key\":\"recipient\",\"value\":\"agoric10d07y265gmmuvt4z0w9aw880jnsr700jgl36x9\"},{\"key\":\"sender\",\"value\":\"agoric1amhrnyzvmzj7ugd83n0jk8lme64zlwdv6u52gl\"},{\"key\":\"amount\",\"value\":\"5000000000ubld\"}]},{\"type\":\"message\",\"attributes\":[{\"key\":\"sender\",\"value\":\"agoric1amhrnyzvmzj7ugd83n0jk8lme64zlwdv6u52gl\"}]},{\"type\":\"proposal_deposit\",\"attributes\":[{\"key\":\"amount\",\"value\":\"5000000000ubld\"},{\"key\":\"proposal_id\",\"value\":\"101\"}]},{\"type\":\"submit_proposal\",\"attributes\":[{\"key\":\"voting_period_start\",\"value\":\"101\"}]}]}]",
  "logs": [
    {
      "msg_index": 0,
      "log": "",
      "events": [
        {
          "type": "message",
          "attributes": [
            {
              "key": "action",
              "value": "/cosmos.gov.v1beta1.MsgSubmitProposal"
            },
            {
              "key": "sender",
              "value": "agoric1amhrnyzvmzj7ugd83n0jk8lme64zlwdv6u52gl"
            },
            {
              "key": "module",
              "value": "gov"
            }
          ]
        },
        {
          "type": "submit_proposal",
          "attributes": [
            {
              "key": "proposal_id",
              "value": "101"
            },
            {
              "key": "proposal_messages",
              "value": ",/cosmos.gov.v1.MsgExecLegacyContent"
            }
          ]
        },
        {
          "type": "coin_spent",
          "attributes": [
            {
              "key": "spender",
              "value": "agoric1amhrnyzvmzj7ugd83n0jk8lme64zlwdv6u52gl"
            },
            {
              "key": "amount",
              "value": "5000000000ubld"
            }
          ]
        },
        {
          "type": "coin_received",
          "attributes": [
            {
              "key": "receiver",
              "value": "agoric10d07y265gmmuvt4z0w9aw880jnsr700jgl36x9"
            },
            {
              "key": "amount",
              "value": "5000000000ubld"
            }
          ]
        },
        {
          "type": "transfer",
          "attributes": [
            {
              "key": "recipient",
              "value": "agoric10d07y265gmmuvt4z0w9aw880jnsr700jgl36x9"
            },
            {
              "key": "sender",
              "value": "agoric1amhrnyzvmzj7ugd83n0jk8lme64zlwdv6u52gl"
            },
            {
              "key": "amount",
              "value": "5000000000ubld"
            }
          ]
        },
        {
          "type": "message",
          "attributes": [
            {
              "key": "sender",
              "value": "agoric1amhrnyzvmzj7ugd83n0jk8lme64zlwdv6u52gl"
            }
          ]
        },
        {
          "type": "proposal_deposit",
          "attributes": [
            {
              "key": "amount",
              "value": "5000000000ubld"
            },
            {
              "key": "proposal_id",
              "value": "101"
            }
          ]
        },
        {
          "type": "submit_proposal",
          "attributes": [
            {
              "key": "voting_period_start",
              "value": "101"
            }
          ]
        }
      ]
    }
  ],
  "info": "",
  "gas_wanted": "2147682",
  "gas_used": "1664603",
  "tx": {
    "@type": "/cosmos.tx.v1beta1.Tx",
    "body": {
      "messages": [
        {
          "@type": "/cosmos.gov.v1beta1.MsgSubmitProposal",
          "content": {
            "@type": "/agoric.swingset.CoreEvalProposal",
            "title": "YMax Alpha 1.1: Unblock Proposal 100 Execution",
            "description": "For background and discussion, see: [YMax PoC forum thread](https://community.agoric.com/t/ymax-poc-a-step-toward-seamless-defi-control/864/4)\n\nProposal executes code corresponding to commit 8e37faa. ",
            "evals": [
              {
                "json_permits": "{\n  \"consume\": {\n    \"agoricNames\": true,\n    \"agoricNamesAdmin\": \"makeCoreProposalBehavior\",\n    \"vatAdminSvc\": \"makeCoreProposalBehavior\",\n    \"zoe\": \"makeCoreProposalBehavior\"\n  },\n  \"issuer\": {\n    \"produce\": {\n      \"USDC\": true\n    }\n  },\n  \"brand\": {\n    \"produce\": {\n      \"USDC\": true\n    }\n  },\n  \"evaluateBundleCap\": \"makeCoreProposalBehavior\",\n  \"installation\": {\n    \"produce\": \"makeCoreProposalBehavior\"\n  },\n  \"modules\": {\n    \"utils\": {\n      \"runModuleBehaviors\": \"makeCoreProposalBehavior\"\n    }\n  }\n}",
                "js_code": "// This is generated by writeCoreEval; please edit!\n/* eslint-disable */\n\nconst manifestBundleRef = {bundleID:\"b1-81c0224cb5466dfa9b5d14bc94d19ed1b0ca7aa47d22dadd0f538f14a59d70a596aa37850ec89aba796873f912708bd6144a91693e643af7a98602c70fbe052f\"};\nconst getManifestCall = harden([\n  \"getManifestForResolveUSDC\",\n]);\nconst customManifest = {\n  resolveUSDC: {\n    brand: {\n      produce: {\n        USDC: true,\n      },\n    },\n    consume: {\n      agoricNames: true,\n    },\n    issuer: {\n      produce: {\n        USDC: true,\n      },\n    },\n  },\n};\n\n// Make a behavior function and \"export\" it by way of script completion value.\n// It is constructed by an anonymous invocation to ensure the absence of a global binding\n// for makeCoreProposalBehavior, which may not be necessary but preserves behavior pre-dating\n// https://github.com/Agoric/agoric-sdk/pull/8712 .\nconst behavior = (({\n  manifestBundleRef,\n  getManifestCall: [manifestGetterName, ...manifestGetterArgs],\n  customManifest,\n  E,\n  log = console.info,\n  customRestoreRef,\n}) => {\n  const { entries, fromEntries } = Object;\n\n  /**\n   * Given an object whose properties may be promise-valued, return a promise\n   * for an analogous object in which each such value has been replaced with its\n   * fulfillment.\n   * This is a non-recursive form of endo `deeplyFulfilled`.\n   *\n   * @template T\n   * @param {{[K in keyof T]: (T[K] | Promise<T[K]>)}} obj\n   * @returns {Promise<T>}\n   */\n  const shallowlyFulfilled = async obj => {\n    if (!obj) {\n      return obj;\n    }\n    const awaitedEntries = await Promise.all(\n      entries(obj).map(async ([key, valueP]) => {\n        const value = await valueP;\n        return [key, value];\n      }),\n    );\n    return fromEntries(awaitedEntries);\n  };\n\n  const makeRestoreRef = (vatAdminSvc, zoe) => {\n    /** @type {(ref: import\\('./externalTypes.js').ManifestBundleRef) => Promise<Installation<unknown>>} */\n    const defaultRestoreRef = async bundleRef => {\n      // extract-proposal.js creates these records, and bundleName is\n      // the optional name under which the bundle was installed into\n      // config.bundles\n      const bundleIdP =\n        'bundleName' in bundleRef\n          ? E(vatAdminSvc).getBundleIDByName(bundleRef.bundleName)\n          : bundleRef.bundleID;\n      const bundleID = await bundleIdP;\n      const label = bundleID.slice(0, 8);\n      return E(zoe).installBundleID(bundleID, label);\n    };\n    return defaultRestoreRef;\n  };\n\n  /** @param {ChainBootstrapSpace & BootstrapPowers & { evaluateBundleCap: any }} powers */\n  const coreProposalBehavior = async powers => {\n    // NOTE: `powers` is expected to match or be a superset of the above `permits` export,\n    // which should therefore be kept in sync with this deconstruction code.\n    // HOWEVER, do note that this function is invoked with at least the *union* of powers\n    // required by individual moduleBehaviors declared by the manifest getter, which is\n    // necessary so it can use `runModuleBehaviors` to provide the appropriate subset to\n    // each one (see ./writeCoreEvalParts.js).\n    // Handle `powers` with the requisite care.\n    const {\n      consume: { vatAdminSvc, zoe, agoricNamesAdmin },\n      evaluateBundleCap,\n      installation: { produce: produceInstallations },\n      modules: {\n        utils: { runModuleBehaviors },\n      },\n    } = powers;\n\n    // Get the on-chain installation containing the manifest and behaviors.\n    log('evaluateBundleCap', {\n      manifestBundleRef,\n      manifestGetterName,\n      vatAdminSvc,\n    });\n    let bcapP;\n    if ('bundleName' in manifestBundleRef) {\n      bcapP = E(vatAdminSvc).getNamedBundleCap(manifestBundleRef.bundleName);\n    } else if ('bundleID' in manifestBundleRef) {\n      bcapP = E(vatAdminSvc).getBundleCap(manifestBundleRef.bundleID);\n    } else {\n      const keys = Reflect.ownKeys(manifestBundleRef).map(key =>\n        typeof key === 'string' ? JSON.stringify(key) : String(key),\n      );\n      const keysStr = `[${keys.join(', ')}]`;\n      throw Error(\n        `bundleRef must have own bundleName or bundleID, missing in ${keysStr}`,\n      );\n    }\n    const bundleCap = await bcapP;\n\n    const proposalNS = await evaluateBundleCap(bundleCap);\n\n    // Get the manifest and its metadata.\n    log('execute', {\n      manifestGetterName,\n      bundleExports: Object.keys(proposalNS),\n    });\n    const restoreRef = customRestoreRef || makeRestoreRef(vatAdminSvc, zoe);\n    const {\n      manifest,\n      options: rawOptions,\n      installations: rawInstallations,\n    } = await proposalNS[manifestGetterName](\n      harden({ restoreRef }),\n      ...manifestGetterArgs,\n    );\n\n    // Await promises in the returned options and installations records.\n    const [options, installations] = await Promise.all(\n      [rawOptions, rawInstallations].map(shallowlyFulfilled),\n    );\n\n    // Publish the installations for our dependencies.\n    const installationEntries = entries(installations || {});\n    if (installationEntries.length > 0) {\n      const installAdmin = E(agoricNamesAdmin).lookupAdmin('installation');\n      await Promise.all(\n        installationEntries.map(([key, value]) => {\n          produceInstallations[key].reset();\n          produceInstallations[key].resolve(value);\n          return E(installAdmin).update(key, value);\n        }),\n      );\n    }\n\n    // Evaluate the manifest.\n    return runModuleBehaviors({\n      // Remember that `powers` may be arbitrarily broad.\n      allPowers: powers,\n      behaviors: proposalNS,\n      manifest: customManifest || manifest,\n      makeConfig: (name, _permit) => {\n        log('coreProposal:', name);\n        return { options };\n      },\n    });\n  };\n\n  return coreProposalBehavior;\n})({ manifestBundleRef, getManifestCall, customManifest, E });\nbehavior;\n"
              }
            ]
          },
          "initial_deposit": [
            {
              "denom": "ubld",
              "amount": "5000000000"
            }
          ],
          "proposer": "agoric1amhrnyzvmzj7ugd83n0jk8lme64zlwdv6u52gl"
        }
      ],
      "memo": "",
      "timeout_height": "0",
      "extension_options": [],
      "non_critical_extension_options": []
    },
    "auth_info": {
      "signer_infos": [
        {
          "public_key": {
            "@type": "/cosmos.crypto.secp256k1.PubKey",
            "key": "Av4kNFBlI8pbH5Vr4en74Ma6nvT9kjqnD2FkUQfwNJUV"
          },
          "mode_info": {
            "single": {
              "mode": "SIGN_MODE_DIRECT"
            }
          },
          "sequence": "28"
        }
      ],
      "fee": {
        "amount": [
          {
            "denom": "ubld",
            "amount": "107385"
          }
        ],
        "gas_limit": "2147682",
        "payer": "",
        "granter": ""
      },
      "tip": null
    },
    "signatures": [
      "jKBqKGxPYdpJIbjgFTIO3MryiexmZz1LfwqdYlZ8Pg1I7Lms+P2zvMR7JOBh3VDTqYVswIEG1dDjnonFhtkDCQ=="
    ]
  },
  "timestamp": "2025-07-21T22:57:36Z",
  "events": [
    {
      "type": "coin_spent",
      "attributes": [
        {
          "key": "spender",
          "value": "agoric1amhrnyzvmzj7ugd83n0jk8lme64zlwdv6u52gl",
          "index": true
        },
        {
          "key": "amount",
          "value": "107385ubld",
          "index": true
        }
      ]
    },
    {
      "type": "coin_received",
      "attributes": [
        {
          "key": "receiver",
          "value": "agoric1ae0lmtzlgrcnla9xjkpaarq5d5dfez63h3nucl",
          "index": true
        },
        {
          "key": "amount",
          "value": "107385ubld",
          "index": true
        }
      ]
    },
    {
      "type": "transfer",
      "attributes": [
        {
          "key": "recipient",
          "value": "agoric1ae0lmtzlgrcnla9xjkpaarq5d5dfez63h3nucl",
          "index": true
        },
        {
          "key": "sender",
          "value": "agoric1amhrnyzvmzj7ugd83n0jk8lme64zlwdv6u52gl",
          "index": true
        },
        {
          "key": "amount",
          "value": "107385ubld",
          "index": true
        }
      ]
    },
    {
      "type": "message",
      "attributes": [
        {
          "key": "sender",
          "value": "agoric1amhrnyzvmzj7ugd83n0jk8lme64zlwdv6u52gl",
          "index": true
        }
      ]
    },
    {
      "type": "tx",
      "attributes": [
        {
          "key": "fee",
          "value": "107385ubld",
          "index": true
        },
        {
          "key": "fee_payer",
          "value": "agoric1amhrnyzvmzj7ugd83n0jk8lme64zlwdv6u52gl",
          "index": true
        }
      ]
    },
    {
      "type": "tx",
      "attributes": [
        {
          "key": "acc_seq",
          "value": "agoric1amhrnyzvmzj7ugd83n0jk8lme64zlwdv6u52gl/28",
          "index": true
        }
      ]
    },
    {
      "type": "tx",
      "attributes": [
        {
          "key": "signature",
          "value": "jKBqKGxPYdpJIbjgFTIO3MryiexmZz1LfwqdYlZ8Pg1I7Lms+P2zvMR7JOBh3VDTqYVswIEG1dDjnonFhtkDCQ==",
          "index": true
        }
      ]
    },
    {
      "type": "message",
      "attributes": [
        {
          "key": "action",
          "value": "/cosmos.gov.v1beta1.MsgSubmitProposal",
          "index": true
        },
        {
          "key": "sender",
          "value": "agoric1amhrnyzvmzj7ugd83n0jk8lme64zlwdv6u52gl",
          "index": true
        },
        {
          "key": "module",
          "value": "gov",
          "index": true
        }
      ]
    },
    {
      "type": "submit_proposal",
      "attributes": [
        {
          "key": "proposal_id",
          "value": "101",
          "index": true
        },
        {
          "key": "proposal_messages",
          "value": ",/cosmos.gov.v1.MsgExecLegacyContent",
          "index": true
        }
      ]
    },
    {
      "type": "coin_spent",
      "attributes": [
        {
          "key": "spender",
          "value": "agoric1amhrnyzvmzj7ugd83n0jk8lme64zlwdv6u52gl",
          "index": true
        },
        {
          "key": "amount",
          "value": "5000000000ubld",
          "index": true
        }
      ]
    },
    {
      "type": "coin_received",
      "attributes": [
        {
          "key": "receiver",
          "value": "agoric10d07y265gmmuvt4z0w9aw880jnsr700jgl36x9",
          "index": true
        },
        {
          "key": "amount",
          "value": "5000000000ubld",
          "index": true
        }
      ]
    },
    {
      "type": "transfer",
      "attributes": [
        {
          "key": "recipient",
          "value": "agoric10d07y265gmmuvt4z0w9aw880jnsr700jgl36x9",
          "index": true
        },
        {
          "key": "sender",
          "value": "agoric1amhrnyzvmzj7ugd83n0jk8lme64zlwdv6u52gl",
          "index": true
        },
        {
          "key": "amount",
          "value": "5000000000ubld",
          "index": true
        }
      ]
    },
    {
      "type": "message",
      "attributes": [
        {
          "key": "sender",
          "value": "agoric1amhrnyzvmzj7ugd83n0jk8lme64zlwdv6u52gl",
          "index": true
        }
      ]
    },
    {
      "type": "proposal_deposit",
      "attributes": [
        {
          "key": "amount",
          "value": "5000000000ubld",
          "index": true
        },
        {
          "key": "proposal_id",
          "value": "101",
          "index": true
        }
      ]
    },
    {
      "type": "submit_proposal",
      "attributes": [
        {
          "key": "voting_period_start",
          "value": "101",
          "index": true
        }
      ]
    }
  ]
}
