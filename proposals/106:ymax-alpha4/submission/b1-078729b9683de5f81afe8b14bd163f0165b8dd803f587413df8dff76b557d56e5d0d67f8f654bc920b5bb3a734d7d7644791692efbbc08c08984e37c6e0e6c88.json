{"moduleFormat":"endoZipBase64","endoZipBase64":"UEsDBAoAAAAAAAAAAADEuZ5/tgIAALYCAAAUAAAAY29tcGFydG1lbnQtbWFwLmpzb257CiAgInRhZ3MiOiBbXSwKICAiZW50cnkiOiB7CiAgICAiY29tcGFydG1lbnQiOiAiQGFnbG9jYWwvcG9ydGZvbGlvLWRlcGxveS12MC4xLjAiLAogICAgIm1vZHVsZSI6ICIuL2Rpc3QvcG9ydGZvbGlvLmNvbnRyYWN0LmJ1bmRsZS5qcyIKICB9LAogICJjb21wYXJ0bWVudHMiOiB7CiAgICAiQGFnbG9jYWwvcG9ydGZvbGlvLWRlcGxveS12MC4xLjAiOiB7CiAgICAgICJuYW1lIjogIkBhZ2xvY2FsL3BvcnRmb2xpby1kZXBsb3kiLAogICAgICAibGFiZWwiOiAiQGFnbG9jYWwvcG9ydGZvbGlvLWRlcGxveS12MC4xLjAiLAogICAgICAibG9jYXRpb24iOiAiQGFnbG9jYWwvcG9ydGZvbGlvLWRlcGxveS12MC4xLjAiLAogICAgICAibW9kdWxlcyI6IHsKICAgICAgICAiLi9kaXN0L3BvcnRmb2xpby5jb250cmFjdC5idW5kbGUuanMiOiB7CiAgICAgICAgICAibG9jYXRpb24iOiAiZGlzdC9wb3J0Zm9saW8uY29udHJhY3QuYnVuZGxlLmpzIiwKICAgICAgICAgICJwYXJzZXIiOiAicHJlLW1qcy1qc29uIiwKICAgICAgICAgICJzaGE1MTIiOiAiNjZmODFiNDc0NjBhZWRlYmY3NDQ4Y2M0NWMwOWQ5ODQwZjY0MjA3N2JlNjY5ZDI1NTQzM2ZmNWM4MGEwYTVlYTQ2MTU0OTE0YTI1YjI0NzFhMzhhNGFmYTg1ZGRiZGYxNGY4YjEyYmVmYTMyMThmNTM1MWQ5MmFjMzBhM2FiYjkiCiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9UEsDBAoAAAAAAAAAAACp5wfaRyUPAEclDwBCAAAAQGFnbG9jYWwvcG9ydGZvbGlvLWRlcGxveS12MC4xLjAvZGlzdC9wb3J0Zm9saW8uY29udHJhY3QuYnVuZGxlLmpzeyJpbXBvcnRzIjpbXSwiZXhwb3J0cyI6WyJBeGVsYXJDb25maWdTaGFwZSIsImNvbnRyYWN0IiwibWV0YSIsInN0YXJ0Il0sInJlZXhwb3J0cyI6W10sIl9fc3luY01vZHVsZVByb2dyYW1fXyI6Iih7aW1wb3J0czokaM2PX2ltcG9ydHMsbGl2ZVZhcjokaM2PX2xpdmUsb25jZVZhcjokaM2PX29uY2UsaW1wb3J0OiRozY9faW1wb3J0LGltcG9ydE1ldGE6JGjNj19fX19tZXRhfSk9PihmdW5jdGlvbigpeyd1c2Ugc3RyaWN0JzskaM2PX2ltcG9ydHMoW10pOyRozY9fbGl2ZS5BeGVsYXJDb25maWdTaGFwZSgpOyRozY9fbGl2ZS5tZXRhKCk7JGjNj19saXZlLmNvbnRyYWN0KCk7JGjNj19saXZlLnN0YXJ0KCk7dmFyIF9fY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2dldFByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2VzbSA9IChmbiwgcmVzKSA9PiBmdW5jdGlvbiBfX2luaXQoKSB7XG4gIHJldHVybiBmbiAmJiAocmVzID0gKDAsIGZuW19fZ2V0T3duUHJvcE5hbWVzKGZuKVswXV0pKGZuID0gMCkpLCByZXM7XG59O1xudmFyIF9fY29tbW9uSlMgPSAoY2IsIG1vZCkgPT4gZnVuY3Rpb24gX19yZXF1aXJlMigpIHtcbiAgcmV0dXJuIG1vZCB8fCAoMCwgY2JbX19nZXRPd25Qcm9wTmFtZXMoY2IpWzBdXSkoKG1vZCA9IHsgZXhwb3J0czoge30gfSkuZXhwb3J0cywgbW9kKSwgbW9kLmV4cG9ydHM7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLyogSWYgdGhlIGltcG9ydGVyIGlzIGluIG5vZGUgY29tcGF0aWJpbGl0eSBtb2RlIG9yIHRoaXMgaXMgbm90IGFuIEVTTSovXG4gIC8qIGZpbGUgdGhhdCBoYXMgYmVlbiBjb252ZXJ0ZWQgdG8gYSBDb21tb25KUyBmaWxlIHVzaW5nIGEgQmFiZWwtKi9cbiAgLyogY29tcGF0aWJsZSB0cmFuc2Zvcm0gKGkuZS4gXCJfX2VzTW9kdWxlXCIgaGFzIG5vdCBiZWVuIHNldCksIHRoZW4gc2V0Ki9cbiAgLyogXCJkZWZhdWx0XCIgdG8gdGhlIENvbW1vbkpTIFwibW9kdWxlLmV4cG9ydHNcIiBmb3Igbm9kZSBjb21wYXRpYmlsaXR5LiovXG4gIGlzTm9kZU1vZGUgfHwgIW1vZCB8fCAhbW9kLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AodGFyZ2V0LCBcImRlZmF1bHRcIiwgeyB2YWx1ZTogbW9kLCBlbnVtZXJhYmxlOiB0cnVlIH0pIDogdGFyZ2V0LFxuICBtb2RcbikpO1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvQGNvc21qcy9lbmNvZGluZy9idWlsZC9hc2NpaS5qcyovXG52YXIgcmVxdWlyZV9hc2NpaSA9IF9fY29tbW9uSlMoe1xuICBcIi4uLy4uL25vZGVfbW9kdWxlcy9AY29zbWpzL2VuY29kaW5nL2J1aWxkL2FzY2lpLmpzXCIoZXhwb3J0cykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgICBleHBvcnRzLnRvQXNjaWkgPSB0b0FzY2lpO1xuICAgIGV4cG9ydHMuZnJvbUFzY2lpID0gZnJvbUFzY2lpO1xuICAgIGZ1bmN0aW9uIHRvQXNjaWkoaW5wdXQpIHtcbiAgICAgIGNvbnN0IHRvTnVtcyA9IChzdHIpID0+IHN0ci5zcGxpdChcIlwiKS5tYXAoKHgpID0+IHtcbiAgICAgICAgY29uc3QgY2hhckNvZGUgPSB4LmNoYXJDb2RlQXQoMCk7XG4gICAgICAgIGlmIChjaGFyQ29kZSA8IDMyIHx8IGNoYXJDb2RlID4gMTI2KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZW5jb2RlIGNoYXJhY3RlciB0aGF0IGlzIG91dCBvZiBwcmludGFibGUgQVNDSUkgcmFuZ2U6ICR7Y2hhckNvZGV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoYXJDb2RlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKHRvTnVtcyhpbnB1dCkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmcm9tQXNjaWkoZGF0YSkge1xuICAgICAgY29uc3QgZnJvbU51bXMgPSAobGlzdE9mTnVtYmVycykgPT4gbGlzdE9mTnVtYmVycy5tYXAoKHgpID0+IHtcbiAgICAgICAgaWYgKHggPCAzMiB8fCB4ID4gMTI2KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZGVjb2RlIGNoYXJhY3RlciB0aGF0IGlzIG91dCBvZiBwcmludGFibGUgQVNDSUkgcmFuZ2U6ICR7eH1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh4KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZyb21OdW1zKEFycmF5LmZyb20oZGF0YSkpLmpvaW4oXCJcIik7XG4gICAgfVxuICB9XG59KTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyovXG52YXIgcmVxdWlyZV9iYXNlNjRfanMgPSBfX2NvbW1vbkpTKHtcbiAgXCIuLi8uLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzXCIoZXhwb3J0cykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIGV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGg7XG4gICAgZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5O1xuICAgIGV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXk7XG4gICAgdmFyIGxvb2t1cCA9IFtdO1xuICAgIHZhciByZXZMb29rdXAgPSBbXTtcbiAgICB2YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09IFwidW5kZWZpbmVkXCIgPyBVaW50OEFycmF5IDogQXJyYXk7XG4gICAgdmFyIGNvZGUgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjtcbiAgICBmb3IgKGkzID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkzIDwgbGVuOyArK2kzKSB7XG4gICAgICBsb29rdXBbaTNdID0gY29kZVtpM107XG4gICAgICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkzKV0gPSBpMztcbiAgICB9XG4gICAgdmFyIGkzO1xuICAgIHZhciBsZW47XG4gICAgcmV2TG9va3VwW1wiLVwiLmNoYXJDb2RlQXQoMCldID0gNjI7XG4gICAgcmV2TG9va3VwW1wiX1wiLmNoYXJDb2RlQXQoMCldID0gNjM7XG4gICAgZnVuY3Rpb24gZ2V0TGVucyhiNjQpIHtcbiAgICAgIHZhciBsZW4yID0gYjY0Lmxlbmd0aDtcbiAgICAgIGlmIChsZW4yICUgNCA+IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNFwiKTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKFwiPVwiKTtcbiAgICAgIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuMjtcbiAgICAgIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuMiA/IDAgOiA0IC0gdmFsaWRMZW4gJSA0O1xuICAgICAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYnl0ZUxlbmd0aChiNjQpIHtcbiAgICAgIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpO1xuICAgICAgdmFyIHZhbGlkTGVuID0gbGVuc1swXTtcbiAgICAgIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdO1xuICAgICAgcmV0dXJuICh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCAtIHBsYWNlSG9sZGVyc0xlbjtcbiAgICB9XG4gICAgZnVuY3Rpb24gX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gICAgICByZXR1cm4gKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzTGVuO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0b0J5dGVBcnJheShiNjQpIHtcbiAgICAgIHZhciB0bXA7XG4gICAgICB2YXIgbGVucyA9IGdldExlbnMoYjY0KTtcbiAgICAgIHZhciB2YWxpZExlbiA9IGxlbnNbMF07XG4gICAgICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXTtcbiAgICAgIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpO1xuICAgICAgdmFyIGN1ckJ5dGUgPSAwO1xuICAgICAgdmFyIGxlbjIgPSBwbGFjZUhvbGRlcnNMZW4gPiAwID8gdmFsaWRMZW4gLSA0IDogdmFsaWRMZW47XG4gICAgICB2YXIgaTQ7XG4gICAgICBmb3IgKGk0ID0gMDsgaTQgPCBsZW4yOyBpNCArPSA0KSB7XG4gICAgICAgIHRtcCA9IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpNCldIDw8IDE4IHwgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGk0ICsgMSldIDw8IDEyIHwgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGk0ICsgMildIDw8IDYgfCByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaTQgKyAzKV07XG4gICAgICAgIGFycltjdXJCeXRlKytdID0gdG1wID4+IDE2ICYgMjU1O1xuICAgICAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCA+PiA4ICYgMjU1O1xuICAgICAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDI1NTtcbiAgICAgIH1cbiAgICAgIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICAgICAgdG1wID0gcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGk0KV0gPDwgMiB8IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpNCArIDEpXSA+PiA0O1xuICAgICAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDI1NTtcbiAgICAgIH1cbiAgICAgIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICAgICAgdG1wID0gcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGk0KV0gPDwgMTAgfCByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaTQgKyAxKV0gPDwgNCB8IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpNCArIDIpXSA+PiAyO1xuICAgICAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCA+PiA4ICYgMjU1O1xuICAgICAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDI1NTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NChudW0pIHtcbiAgICAgIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgNjNdICsgbG9va3VwW251bSA+PiAxMiAmIDYzXSArIGxvb2t1cFtudW0gPj4gNiAmIDYzXSArIGxvb2t1cFtudW0gJiA2M107XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVuY29kZUNodW5rKHVpbnQ4LCBzdGFydDIsIGVuZCkge1xuICAgICAgdmFyIHRtcDtcbiAgICAgIHZhciBvdXRwdXQyID0gW107XG4gICAgICBmb3IgKHZhciBpNCA9IHN0YXJ0MjsgaTQgPCBlbmQ7IGk0ICs9IDMpIHtcbiAgICAgICAgdG1wID0gKHVpbnQ4W2k0XSA8PCAxNiAmIDE2NzExNjgwKSArICh1aW50OFtpNCArIDFdIDw8IDggJiA2NTI4MCkgKyAodWludDhbaTQgKyAyXSAmIDI1NSk7XG4gICAgICAgIG91dHB1dDIucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0cHV0Mi5qb2luKFwiXCIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmcm9tQnl0ZUFycmF5KHVpbnQ4KSB7XG4gICAgICB2YXIgdG1wO1xuICAgICAgdmFyIGxlbjIgPSB1aW50OC5sZW5ndGg7XG4gICAgICB2YXIgZXh0cmFCeXRlcyA9IGxlbjIgJSAzO1xuICAgICAgdmFyIHBhcnRzID0gW107XG4gICAgICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MztcbiAgICAgIGZvciAodmFyIGk0ID0gMCwgbGVuMjIgPSBsZW4yIC0gZXh0cmFCeXRlczsgaTQgPCBsZW4yMjsgaTQgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICAgICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaTQsIGk0ICsgbWF4Q2h1bmtMZW5ndGggPiBsZW4yMiA/IGxlbjIyIDogaTQgKyBtYXhDaHVua0xlbmd0aCkpO1xuICAgICAgfVxuICAgICAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICAgICAgdG1wID0gdWludDhbbGVuMiAtIDFdO1xuICAgICAgICBwYXJ0cy5wdXNoKFxuICAgICAgICAgIGxvb2t1cFt0bXAgPj4gMl0gKyBsb29rdXBbdG1wIDw8IDQgJiA2M10gKyBcIj09XCJcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgICAgICB0bXAgPSAodWludDhbbGVuMiAtIDJdIDw8IDgpICsgdWludDhbbGVuMiAtIDFdO1xuICAgICAgICBwYXJ0cy5wdXNoKFxuICAgICAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICsgbG9va3VwW3RtcCA+PiA0ICYgNjNdICsgbG9va3VwW3RtcCA8PCAyICYgNjNdICsgXCI9XCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJ0cy5qb2luKFwiXCIpO1xuICAgIH1cbiAgfVxufSk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AY29zbWpzL2VuY29kaW5nL2J1aWxkL2Jhc2U2NC5qcyovXG52YXIgcmVxdWlyZV9iYXNlNjQgPSBfX2NvbW1vbkpTKHtcbiAgXCIuLi8uLi9ub2RlX21vZHVsZXMvQGNvc21qcy9lbmNvZGluZy9idWlsZC9iYXNlNjQuanNcIihleHBvcnRzKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIF9fY3JlYXRlQmluZGluZyA9IGV4cG9ydHMgJiYgZXhwb3J0cy5fX2NyZWF0ZUJpbmRpbmcgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obzIsIG0yLCBrLCBrMikge1xuICAgICAgaWYgKGsyID09PSB2b2lkIDApIGsyID0gaztcbiAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtMiwgayk7XG4gICAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtMi5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gbTJba107XG4gICAgICAgIH0gfTtcbiAgICAgIH1cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvMiwgazIsIGRlc2MpO1xuICAgIH0pIDogKGZ1bmN0aW9uKG8yLCBtMiwgaywgazIpIHtcbiAgICAgIGlmIChrMiA9PT0gdm9pZCAwKSBrMiA9IGs7XG4gICAgICBvMltrMl0gPSBtMltrXTtcbiAgICB9KSk7XG4gICAgdmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IGV4cG9ydHMgJiYgZXhwb3J0cy5fX3NldE1vZHVsZURlZmF1bHQgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obzIsIHYyKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobzIsIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2MiB9KTtcbiAgICB9KSA6IGZ1bmN0aW9uKG8yLCB2Mikge1xuICAgICAgbzJbXCJkZWZhdWx0XCJdID0gdjI7XG4gICAgfSk7XG4gICAgdmFyIF9faW1wb3J0U3RhciA9IGV4cG9ydHMgJiYgZXhwb3J0cy5fX2ltcG9ydFN0YXIgfHwgLyogQF9fUFVSRV9fICovIChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvd25LZXlzMjMgPSBmdW5jdGlvbihvMikge1xuICAgICAgICBvd25LZXlzMjMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbihvMykge1xuICAgICAgICAgIHZhciBhciA9IFtdO1xuICAgICAgICAgIGZvciAodmFyIGsgaW4gbzMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobzMsIGspKSBhclthci5sZW5ndGhdID0gaztcbiAgICAgICAgICByZXR1cm4gYXI7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBvd25LZXlzMjMobzIpO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihtb2QpIHtcbiAgICAgICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgICBpZiAobW9kICE9IG51bGwpIHtcbiAgICAgICAgICBmb3IgKHZhciBrID0gb3duS2V5czIzKG1vZCksIGkzID0gMDsgaTMgPCBrLmxlbmd0aDsgaTMrKykgaWYgKGtbaTNdICE9PSBcImRlZmF1bHRcIikgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrW2kzXSk7XG4gICAgICAgIH1cbiAgICAgICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSkoKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4gICAgZXhwb3J0cy50b0Jhc2U2NCA9IHRvQmFzZTY0O1xuICAgIGV4cG9ydHMuZnJvbUJhc2U2NCA9IGZyb21CYXNlNjQ7XG4gICAgdmFyIGJhc2U2NGpzID0gX19pbXBvcnRTdGFyKHJlcXVpcmVfYmFzZTY0X2pzKCkpO1xuICAgIGZ1bmN0aW9uIHRvQmFzZTY0KGRhdGEpIHtcbiAgICAgIHJldHVybiBiYXNlNjRqcy5mcm9tQnl0ZUFycmF5KGRhdGEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmcm9tQmFzZTY0KGJhc2U2NFN0cmluZykge1xuICAgICAgaWYgKCFiYXNlNjRTdHJpbmcubWF0Y2goL15bYS16QS1aMC05Ky9dKj17MCwyfSQvKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJhc2U2NCBzdHJpbmcgZm9ybWF0XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2U2NGpzLnRvQnl0ZUFycmF5KGJhc2U2NFN0cmluZyk7XG4gICAgfVxuICB9XG59KTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0Bjb3NtanMvZW5jb2Rpbmcvbm9kZV9tb2R1bGVzL2JlY2gzMi9pbmRleC5qcyovXG52YXIgcmVxdWlyZV9iZWNoMzIgPSBfX2NvbW1vbkpTKHtcbiAgXCIuLi8uLi9ub2RlX21vZHVsZXMvQGNvc21qcy9lbmNvZGluZy9ub2RlX21vZHVsZXMvYmVjaDMyL2luZGV4LmpzXCIoZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIEFMUEhBQkVUMiA9IFwicXB6cnk5eDhnZjJ0dmR3MHMzam41NGtoY2U2bXVhN2xcIjtcbiAgICB2YXIgQUxQSEFCRVRfTUFQID0ge307XG4gICAgZm9yICh6ID0gMDsgeiA8IEFMUEhBQkVUMi5sZW5ndGg7IHorKykge1xuICAgICAgeCA9IEFMUEhBQkVUMi5jaGFyQXQoeik7XG4gICAgICBpZiAoQUxQSEFCRVRfTUFQW3hdICE9PSB2b2lkIDApIHRocm93IG5ldyBUeXBlRXJyb3IoeCArIFwiIGlzIGFtYmlndW91c1wiKTtcbiAgICAgIEFMUEhBQkVUX01BUFt4XSA9IHo7XG4gICAgfVxuICAgIHZhciB4O1xuICAgIHZhciB6O1xuICAgIGZ1bmN0aW9uIHBvbHltb2RTdGVwKHByZSkge1xuICAgICAgdmFyIGIzID0gcHJlID4+IDI1O1xuICAgICAgcmV0dXJuIChwcmUgJiAzMzU1NDQzMSkgPDwgNSBeIC0oYjMgPj4gMCAmIDEpICYgOTk2ODI1MDEwIF4gLShiMyA+PiAxICYgMSkgJiA2NDI4MTM1NDkgXiAtKGIzID4+IDIgJiAxKSAmIDUxMzg3NDQyNiBeIC0oYjMgPj4gMyAmIDEpICYgMTAyNzc0ODgyOSBeIC0oYjMgPj4gNCAmIDEpICYgNzA1OTc5MDU5O1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcmVmaXhDaGsocHJlZml4KSB7XG4gICAgICB2YXIgY2hrID0gMTtcbiAgICAgIGZvciAodmFyIGkzID0gMDsgaTMgPCBwcmVmaXgubGVuZ3RoOyArK2kzKSB7XG4gICAgICAgIHZhciBjMiA9IHByZWZpeC5jaGFyQ29kZUF0KGkzKTtcbiAgICAgICAgaWYgKGMyIDwgMzMgfHwgYzIgPiAxMjYpIHJldHVybiBcIkludmFsaWQgcHJlZml4IChcIiArIHByZWZpeCArIFwiKVwiO1xuICAgICAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4gYzIgPj4gNTtcbiAgICAgIH1cbiAgICAgIGNoayA9IHBvbHltb2RTdGVwKGNoayk7XG4gICAgICBmb3IgKGkzID0gMDsgaTMgPCBwcmVmaXgubGVuZ3RoOyArK2kzKSB7XG4gICAgICAgIHZhciB2MiA9IHByZWZpeC5jaGFyQ29kZUF0KGkzKTtcbiAgICAgICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKSBeIHYyICYgMzE7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2hrO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlbmNvZGUocHJlZml4LCB3b3JkcywgTElNSVQpIHtcbiAgICAgIExJTUlUID0gTElNSVQgfHwgOTA7XG4gICAgICBpZiAocHJlZml4Lmxlbmd0aCArIDcgKyB3b3Jkcy5sZW5ndGggPiBMSU1JVCkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4Y2VlZHMgbGVuZ3RoIGxpbWl0XCIpO1xuICAgICAgcHJlZml4ID0gcHJlZml4LnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgY2hrID0gcHJlZml4Q2hrKHByZWZpeCk7XG4gICAgICBpZiAodHlwZW9mIGNoayA9PT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IEVycm9yKGNoayk7XG4gICAgICB2YXIgcmVzdWx0ID0gcHJlZml4ICsgXCIxXCI7XG4gICAgICBmb3IgKHZhciBpMyA9IDA7IGkzIDwgd29yZHMubGVuZ3RoOyArK2kzKSB7XG4gICAgICAgIHZhciB4MiA9IHdvcmRzW2kzXTtcbiAgICAgICAgaWYgKHgyID4+IDUgIT09IDApIHRocm93IG5ldyBFcnJvcihcIk5vbiA1LWJpdCB3b3JkXCIpO1xuICAgICAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4geDI7XG4gICAgICAgIHJlc3VsdCArPSBBTFBIQUJFVDIuY2hhckF0KHgyKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaTMgPSAwOyBpMyA8IDY7ICsraTMpIHtcbiAgICAgICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKTtcbiAgICAgIH1cbiAgICAgIGNoayBePSAxO1xuICAgICAgZm9yIChpMyA9IDA7IGkzIDwgNjsgKytpMykge1xuICAgICAgICB2YXIgdjIgPSBjaGsgPj4gKDUgLSBpMykgKiA1ICYgMzE7XG4gICAgICAgIHJlc3VsdCArPSBBTFBIQUJFVDIuY2hhckF0KHYyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9fZGVjb2RlKHN0ciwgTElNSVQpIHtcbiAgICAgIExJTUlUID0gTElNSVQgfHwgOTA7XG4gICAgICBpZiAoc3RyLmxlbmd0aCA8IDgpIHJldHVybiBzdHIgKyBcIiB0b28gc2hvcnRcIjtcbiAgICAgIGlmIChzdHIubGVuZ3RoID4gTElNSVQpIHJldHVybiBcIkV4Y2VlZHMgbGVuZ3RoIGxpbWl0XCI7XG4gICAgICB2YXIgbG93ZXJlZCA9IHN0ci50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIHVwcGVyZWQgPSBzdHIudG9VcHBlckNhc2UoKTtcbiAgICAgIGlmIChzdHIgIT09IGxvd2VyZWQgJiYgc3RyICE9PSB1cHBlcmVkKSByZXR1cm4gXCJNaXhlZC1jYXNlIHN0cmluZyBcIiArIHN0cjtcbiAgICAgIHN0ciA9IGxvd2VyZWQ7XG4gICAgICB2YXIgc3BsaXQyID0gc3RyLmxhc3RJbmRleE9mKFwiMVwiKTtcbiAgICAgIGlmIChzcGxpdDIgPT09IC0xKSByZXR1cm4gXCJObyBzZXBhcmF0b3IgY2hhcmFjdGVyIGZvciBcIiArIHN0cjtcbiAgICAgIGlmIChzcGxpdDIgPT09IDApIHJldHVybiBcIk1pc3NpbmcgcHJlZml4IGZvciBcIiArIHN0cjtcbiAgICAgIHZhciBwcmVmaXggPSBzdHIuc2xpY2UoMCwgc3BsaXQyKTtcbiAgICAgIHZhciB3b3JkQ2hhcnMgPSBzdHIuc2xpY2Uoc3BsaXQyICsgMSk7XG4gICAgICBpZiAod29yZENoYXJzLmxlbmd0aCA8IDYpIHJldHVybiBcIkRhdGEgdG9vIHNob3J0XCI7XG4gICAgICB2YXIgY2hrID0gcHJlZml4Q2hrKHByZWZpeCk7XG4gICAgICBpZiAodHlwZW9mIGNoayA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGNoaztcbiAgICAgIHZhciB3b3JkcyA9IFtdO1xuICAgICAgZm9yICh2YXIgaTMgPSAwOyBpMyA8IHdvcmRDaGFycy5sZW5ndGg7ICsraTMpIHtcbiAgICAgICAgdmFyIGMyID0gd29yZENoYXJzLmNoYXJBdChpMyk7XG4gICAgICAgIHZhciB2MiA9IEFMUEhBQkVUX01BUFtjMl07XG4gICAgICAgIGlmICh2MiA9PT0gdm9pZCAwKSByZXR1cm4gXCJVbmtub3duIGNoYXJhY3RlciBcIiArIGMyO1xuICAgICAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4gdjI7XG4gICAgICAgIGlmIChpMyArIDYgPj0gd29yZENoYXJzLmxlbmd0aCkgY29udGludWU7XG4gICAgICAgIHdvcmRzLnB1c2godjIpO1xuICAgICAgfVxuICAgICAgaWYgKGNoayAhPT0gMSkgcmV0dXJuIFwiSW52YWxpZCBjaGVja3N1bSBmb3IgXCIgKyBzdHI7XG4gICAgICByZXR1cm4geyBwcmVmaXgsIHdvcmRzIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlY29kZVVuc2FmZSgpIHtcbiAgICAgIHZhciByZXMgPSBfX2RlY29kZS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHR5cGVvZiByZXMgPT09IFwib2JqZWN0XCIpIHJldHVybiByZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlY29kZShzdHIpIHtcbiAgICAgIHZhciByZXMgPSBfX2RlY29kZS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHR5cGVvZiByZXMgPT09IFwib2JqZWN0XCIpIHJldHVybiByZXM7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocmVzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29udmVydChkYXRhLCBpbkJpdHMsIG91dEJpdHMsIHBhZCkge1xuICAgICAgdmFyIHZhbHVlID0gMDtcbiAgICAgIHZhciBiaXRzID0gMDtcbiAgICAgIHZhciBtYXhWID0gKDEgPDwgb3V0Qml0cykgLSAxO1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgZm9yICh2YXIgaTMgPSAwOyBpMyA8IGRhdGEubGVuZ3RoOyArK2kzKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgPDwgaW5CaXRzIHwgZGF0YVtpM107XG4gICAgICAgIGJpdHMgKz0gaW5CaXRzO1xuICAgICAgICB3aGlsZSAoYml0cyA+PSBvdXRCaXRzKSB7XG4gICAgICAgICAgYml0cyAtPSBvdXRCaXRzO1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlID4+IGJpdHMgJiBtYXhWKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBhZCkge1xuICAgICAgICBpZiAoYml0cyA+IDApIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSA8PCBvdXRCaXRzIC0gYml0cyAmIG1heFYpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYml0cyA+PSBpbkJpdHMpIHJldHVybiBcIkV4Y2VzcyBwYWRkaW5nXCI7XG4gICAgICAgIGlmICh2YWx1ZSA8PCBvdXRCaXRzIC0gYml0cyAmIG1heFYpIHJldHVybiBcIk5vbi16ZXJvIHBhZGRpbmdcIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRvV29yZHNVbnNhZmUoYnl0ZXMyKSB7XG4gICAgICB2YXIgcmVzID0gY29udmVydChieXRlczIsIDgsIDUsIHRydWUpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzKSkgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgZnVuY3Rpb24gdG9Xb3JkcyhieXRlczIpIHtcbiAgICAgIHZhciByZXMgPSBjb252ZXJ0KGJ5dGVzMiwgOCwgNSwgdHJ1ZSk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXMpKSByZXR1cm4gcmVzO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHJlcyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZyb21Xb3Jkc1Vuc2FmZSh3b3Jkcykge1xuICAgICAgdmFyIHJlcyA9IGNvbnZlcnQod29yZHMsIDUsIDgsIGZhbHNlKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlcykpIHJldHVybiByZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZyb21Xb3Jkcyh3b3Jkcykge1xuICAgICAgdmFyIHJlcyA9IGNvbnZlcnQod29yZHMsIDUsIDgsIGZhbHNlKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlcykpIHJldHVybiByZXM7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocmVzKTtcbiAgICB9XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICBkZWNvZGVVbnNhZmUsXG4gICAgICBkZWNvZGUsXG4gICAgICBlbmNvZGUsXG4gICAgICB0b1dvcmRzVW5zYWZlLFxuICAgICAgdG9Xb3JkcyxcbiAgICAgIGZyb21Xb3Jkc1Vuc2FmZSxcbiAgICAgIGZyb21Xb3Jkc1xuICAgIH07XG4gIH1cbn0pO1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvQGNvc21qcy9lbmNvZGluZy9idWlsZC9iZWNoMzIuanMqL1xudmFyIHJlcXVpcmVfYmVjaDMyMiA9IF9fY29tbW9uSlMoe1xuICBcIi4uLy4uL25vZGVfbW9kdWxlcy9AY29zbWpzL2VuY29kaW5nL2J1aWxkL2JlY2gzMi5qc1wiKGV4cG9ydHMpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgX19jcmVhdGVCaW5kaW5nID0gZXhwb3J0cyAmJiBleHBvcnRzLl9fY3JlYXRlQmluZGluZyB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvMiwgbTIsIGssIGsyKSB7XG4gICAgICBpZiAoazIgPT09IHZvaWQgMCkgazIgPSBrO1xuICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0yLCBrKTtcbiAgICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0yLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBtMltrXTtcbiAgICAgICAgfSB9O1xuICAgICAgfVxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8yLCBrMiwgZGVzYyk7XG4gICAgfSkgOiAoZnVuY3Rpb24obzIsIG0yLCBrLCBrMikge1xuICAgICAgaWYgKGsyID09PSB2b2lkIDApIGsyID0gaztcbiAgICAgIG8yW2syXSA9IG0yW2tdO1xuICAgIH0pKTtcbiAgICB2YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gZXhwb3J0cyAmJiBleHBvcnRzLl9fc2V0TW9kdWxlRGVmYXVsdCB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvMiwgdjIpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvMiwgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYyIH0pO1xuICAgIH0pIDogZnVuY3Rpb24obzIsIHYyKSB7XG4gICAgICBvMltcImRlZmF1bHRcIl0gPSB2MjtcbiAgICB9KTtcbiAgICB2YXIgX19pbXBvcnRTdGFyID0gZXhwb3J0cyAmJiBleHBvcnRzLl9faW1wb3J0U3RhciB8fCAvKiBAX19QVVJFX18gKi8gKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG93bktleXMyMyA9IGZ1bmN0aW9uKG8yKSB7XG4gICAgICAgIG93bktleXMyMyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uKG8zKSB7XG4gICAgICAgICAgdmFyIGFyID0gW107XG4gICAgICAgICAgZm9yICh2YXIgayBpbiBvMykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvMywgaykpIGFyW2FyLmxlbmd0aF0gPSBrO1xuICAgICAgICAgIHJldHVybiBhcjtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG93bktleXMyMyhvMik7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG1vZCkge1xuICAgICAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICAgIGlmIChtb2QgIT0gbnVsbCkge1xuICAgICAgICAgIGZvciAodmFyIGsgPSBvd25LZXlzMjMobW9kKSwgaTMgPSAwOyBpMyA8IGsubGVuZ3RoOyBpMysrKSBpZiAoa1tpM10gIT09IFwiZGVmYXVsdFwiKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGtbaTNdKTtcbiAgICAgICAgfVxuICAgICAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KSgpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgICBleHBvcnRzLnRvQmVjaDMyID0gdG9CZWNoMzI7XG4gICAgZXhwb3J0cy5mcm9tQmVjaDMyID0gZnJvbUJlY2gzMjM7XG4gICAgZXhwb3J0cy5ub3JtYWxpemVCZWNoMzIgPSBub3JtYWxpemVCZWNoMzI7XG4gICAgdmFyIGJlY2gzMjIgPSBfX2ltcG9ydFN0YXIocmVxdWlyZV9iZWNoMzIoKSk7XG4gICAgZnVuY3Rpb24gdG9CZWNoMzIocHJlZml4LCBkYXRhLCBsaW1pdDIpIHtcbiAgICAgIGNvbnN0IGFkZHJlc3MgPSBiZWNoMzIyLmVuY29kZShwcmVmaXgsIGJlY2gzMjIudG9Xb3JkcyhkYXRhKSwgbGltaXQyKTtcbiAgICAgIHJldHVybiBhZGRyZXNzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmcm9tQmVjaDMyMyhhZGRyZXNzLCBsaW1pdDIgPSBJbmZpbml0eSkge1xuICAgICAgY29uc3QgZGVjb2RlZEFkZHJlc3MgPSBiZWNoMzIyLmRlY29kZShhZGRyZXNzLCBsaW1pdDIpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJlZml4OiBkZWNvZGVkQWRkcmVzcy5wcmVmaXgsXG4gICAgICAgIGRhdGE6IG5ldyBVaW50OEFycmF5KGJlY2gzMjIuZnJvbVdvcmRzKGRlY29kZWRBZGRyZXNzLndvcmRzKSlcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUJlY2gzMihhZGRyZXNzKSB7XG4gICAgICBjb25zdCB7IHByZWZpeCwgZGF0YSB9ID0gZnJvbUJlY2gzMjMoYWRkcmVzcyk7XG4gICAgICByZXR1cm4gdG9CZWNoMzIocHJlZml4LCBkYXRhKTtcbiAgICB9XG4gIH1cbn0pO1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvQGNvc21qcy9lbmNvZGluZy9idWlsZC9oZXguanMqL1xudmFyIHJlcXVpcmVfaGV4ID0gX19jb21tb25KUyh7XG4gIFwiLi4vLi4vbm9kZV9tb2R1bGVzL0Bjb3NtanMvZW5jb2RpbmcvYnVpbGQvaGV4LmpzXCIoZXhwb3J0cykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgICBleHBvcnRzLnRvSGV4ID0gdG9IZXgyO1xuICAgIGV4cG9ydHMuZnJvbUhleCA9IGZyb21IZXgzO1xuICAgIGZ1bmN0aW9uIHRvSGV4MihkYXRhKSB7XG4gICAgICBsZXQgb3V0ID0gXCJcIjtcbiAgICAgIGZvciAoY29uc3QgYnl0ZSBvZiBkYXRhKSB7XG4gICAgICAgIG91dCArPSAoXCIwXCIgKyBieXRlLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZnJvbUhleDMoaGV4c3RyaW5nKSB7XG4gICAgICBpZiAoaGV4c3RyaW5nLmxlbmd0aCAlIDIgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaGV4IHN0cmluZyBsZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDJcIik7XG4gICAgICB9XG4gICAgICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheShoZXhzdHJpbmcubGVuZ3RoIC8gMik7XG4gICAgICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgb3V0Lmxlbmd0aDsgaTMrKykge1xuICAgICAgICBjb25zdCBqID0gMiAqIGkzO1xuICAgICAgICBjb25zdCBoZXhCeXRlQXNTdHJpbmcgPSBoZXhzdHJpbmcuc2xpY2UoaiwgaiArIDIpO1xuICAgICAgICBpZiAoIWhleEJ5dGVBc1N0cmluZy5tYXRjaCgvWzAtOWEtZl17Mn0vaSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJoZXggc3RyaW5nIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVyc1wiKTtcbiAgICAgICAgfVxuICAgICAgICBvdXRbaTNdID0gcGFyc2VJbnQoaGV4Qnl0ZUFzU3RyaW5nLCAxNik7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgfVxufSk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AY29zbWpzL2VuY29kaW5nL2J1aWxkL3JmYzMzMzkuanMqL1xudmFyIHJlcXVpcmVfcmZjMzMzOSA9IF9fY29tbW9uSlMoe1xuICBcIi4uLy4uL25vZGVfbW9kdWxlcy9AY29zbWpzL2VuY29kaW5nL2J1aWxkL3JmYzMzMzkuanNcIihleHBvcnRzKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuICAgIGV4cG9ydHMuZnJvbVJmYzMzMzkgPSBmcm9tUmZjMzMzOTtcbiAgICBleHBvcnRzLnRvUmZjMzMzOSA9IHRvUmZjMzMzOTtcbiAgICB2YXIgcmZjMzMzOU1hdGNoZXIgPSAvXihcXGR7NH0pLShcXGR7Mn0pLShcXGR7Mn0pW1QgXShcXGR7Mn0pOihcXGR7Mn0pOihcXGR7Mn0pKFxcLlxcZHsxLDl9KT8oKD86WystXVxcZHsyfTpcXGR7Mn0pfFopJC87XG4gICAgZnVuY3Rpb24gcGFkZGVkKGludGVnZXIsIGxlbmd0aCA9IDIpIHtcbiAgICAgIHJldHVybiBpbnRlZ2VyLnRvU3RyaW5nKCkucGFkU3RhcnQobGVuZ3RoLCBcIjBcIik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZyb21SZmMzMzM5KHN0cikge1xuICAgICAgY29uc3QgbWF0Y2hlczIgPSByZmMzMzM5TWF0Y2hlci5leGVjKHN0cik7XG4gICAgICBpZiAoIW1hdGNoZXMyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRhdGUgc3RyaW5nIGlzIG5vdCBpbiBSRkMzMzM5IGZvcm1hdFwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHllYXIgPSArbWF0Y2hlczJbMV07XG4gICAgICBjb25zdCBtb250aCA9ICttYXRjaGVzMlsyXTtcbiAgICAgIGNvbnN0IGRheSA9ICttYXRjaGVzMlszXTtcbiAgICAgIGNvbnN0IGhvdXIgPSArbWF0Y2hlczJbNF07XG4gICAgICBjb25zdCBtaW51dGUgPSArbWF0Y2hlczJbNV07XG4gICAgICBjb25zdCBzZWNvbmQgPSArbWF0Y2hlczJbNl07XG4gICAgICBjb25zdCBtaWxsaVNlY29uZHMgPSBtYXRjaGVzMls3XSA/IE1hdGguZmxvb3IoK21hdGNoZXMyWzddICogMWUzKSA6IDA7XG4gICAgICBsZXQgdHpPZmZzZXRTaWduO1xuICAgICAgbGV0IHR6T2Zmc2V0SG91cnM7XG4gICAgICBsZXQgdHpPZmZzZXRNaW51dGVzO1xuICAgICAgaWYgKG1hdGNoZXMyWzhdID09PSBcIlpcIikge1xuICAgICAgICB0ek9mZnNldFNpZ24gPSAxO1xuICAgICAgICB0ek9mZnNldEhvdXJzID0gMDtcbiAgICAgICAgdHpPZmZzZXRNaW51dGVzID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR6T2Zmc2V0U2lnbiA9IG1hdGNoZXMyWzhdLnN1YnN0cmluZygwLCAxKSA9PT0gXCItXCIgPyAtMSA6IDE7XG4gICAgICAgIHR6T2Zmc2V0SG91cnMgPSArbWF0Y2hlczJbOF0uc3Vic3RyaW5nKDEsIDMpO1xuICAgICAgICB0ek9mZnNldE1pbnV0ZXMgPSArbWF0Y2hlczJbOF0uc3Vic3RyaW5nKDQsIDYpO1xuICAgICAgfVxuICAgICAgY29uc3QgdHpPZmZzZXQgPSB0ek9mZnNldFNpZ24gKiAodHpPZmZzZXRIb3VycyAqIDYwICsgdHpPZmZzZXRNaW51dGVzKSAqIDYwO1xuICAgICAgY29uc3QgZGF0ZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpO1xuICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyLCBtb250aCAtIDEsIGRheSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaVNlY29uZHMpO1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpIC0gdHpPZmZzZXQgKiAxZTMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0b1JmYzMzMzkoZGF0ZSkge1xuICAgICAgY29uc3QgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgIGNvbnN0IG1vbnRoID0gcGFkZGVkKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpO1xuICAgICAgY29uc3QgZGF5ID0gcGFkZGVkKGRhdGUuZ2V0VVRDRGF0ZSgpKTtcbiAgICAgIGNvbnN0IGhvdXIgPSBwYWRkZWQoZGF0ZS5nZXRVVENIb3VycygpKTtcbiAgICAgIGNvbnN0IG1pbnV0ZSA9IHBhZGRlZChkYXRlLmdldFVUQ01pbnV0ZXMoKSk7XG4gICAgICBjb25zdCBzZWNvbmQgPSBwYWRkZWQoZGF0ZS5nZXRVVENTZWNvbmRzKCkpO1xuICAgICAgY29uc3QgbXMgPSBwYWRkZWQoZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKSwgMyk7XG4gICAgICByZXR1cm4gYCR7eWVhcn0tJHttb250aH0tJHtkYXl9VCR7aG91cn06JHttaW51dGV9OiR7c2Vjb25kfS4ke21zfVpgO1xuICAgIH1cbiAgfVxufSk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AY29zbWpzL2VuY29kaW5nL2J1aWxkL3V0ZjguanMqL1xudmFyIHJlcXVpcmVfdXRmOCA9IF9fY29tbW9uSlMoe1xuICBcIi4uLy4uL25vZGVfbW9kdWxlcy9AY29zbWpzL2VuY29kaW5nL2J1aWxkL3V0ZjguanNcIihleHBvcnRzKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuICAgIGV4cG9ydHMudG9VdGY4ID0gdG9VdGY4O1xuICAgIGV4cG9ydHMuZnJvbVV0ZjggPSBmcm9tVXRmODtcbiAgICBmdW5jdGlvbiB0b1V0Zjgoc3RyKSB7XG4gICAgICByZXR1cm4gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0cik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZyb21VdGY4KGRhdGEsIGxvc3N5ID0gZmFsc2UpIHtcbiAgICAgIGNvbnN0IGZhdGFsID0gIWxvc3N5O1xuICAgICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcihcInV0Zi04XCIsIHsgZmF0YWwgfSkuZGVjb2RlKGRhdGEpO1xuICAgIH1cbiAgfVxufSk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AY29zbWpzL2VuY29kaW5nL2J1aWxkL2luZGV4LmpzKi9cbnZhciByZXF1aXJlX2J1aWxkID0gX19jb21tb25KUyh7XG4gIFwiLi4vLi4vbm9kZV9tb2R1bGVzL0Bjb3NtanMvZW5jb2RpbmcvYnVpbGQvaW5kZXguanNcIihleHBvcnRzKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuICAgIGV4cG9ydHMudG9VdGY4ID0gZXhwb3J0cy5mcm9tVXRmOCA9IGV4cG9ydHMudG9SZmMzMzM5ID0gZXhwb3J0cy5mcm9tUmZjMzMzOSA9IGV4cG9ydHMudG9IZXggPSBleHBvcnRzLmZyb21IZXggPSBleHBvcnRzLnRvQmVjaDMyID0gZXhwb3J0cy5ub3JtYWxpemVCZWNoMzIgPSBleHBvcnRzLmZyb21CZWNoMzIgPSBleHBvcnRzLnRvQmFzZTY0ID0gZXhwb3J0cy5mcm9tQmFzZTY0ID0gZXhwb3J0cy50b0FzY2lpID0gZXhwb3J0cy5mcm9tQXNjaWkgPSB2b2lkIDA7XG4gICAgdmFyIGFzY2lpXzEgPSByZXF1aXJlX2FzY2lpKCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZnJvbUFzY2lpXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBhc2NpaV8xLmZyb21Bc2NpaTtcbiAgICB9IH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvQXNjaWlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFzY2lpXzEudG9Bc2NpaTtcbiAgICB9IH0pO1xuICAgIHZhciBiYXNlNjRfMSA9IHJlcXVpcmVfYmFzZTY0KCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZnJvbUJhc2U2NFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYmFzZTY0XzEuZnJvbUJhc2U2NDtcbiAgICB9IH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvQmFzZTY0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBiYXNlNjRfMS50b0Jhc2U2NDtcbiAgICB9IH0pO1xuICAgIHZhciBiZWNoMzJfMSA9IHJlcXVpcmVfYmVjaDMyMigpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZyb21CZWNoMzJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGJlY2gzMl8xLmZyb21CZWNoMzI7XG4gICAgfSB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJub3JtYWxpemVCZWNoMzJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGJlY2gzMl8xLm5vcm1hbGl6ZUJlY2gzMjtcbiAgICB9IH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvQmVjaDMyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBiZWNoMzJfMS50b0JlY2gzMjtcbiAgICB9IH0pO1xuICAgIHZhciBoZXhfMSA9IHJlcXVpcmVfaGV4KCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZnJvbUhleFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaGV4XzEuZnJvbUhleDtcbiAgICB9IH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvSGV4XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBoZXhfMS50b0hleDtcbiAgICB9IH0pO1xuICAgIHZhciByZmMzMzM5XzEgPSByZXF1aXJlX3JmYzMzMzkoKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmcm9tUmZjMzMzOVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmZjMzMzOV8xLmZyb21SZmMzMzM5O1xuICAgIH0gfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidG9SZmMzMzM5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZmMzMzM5XzEudG9SZmMzMzM5O1xuICAgIH0gfSk7XG4gICAgdmFyIHV0ZjhfMSA9IHJlcXVpcmVfdXRmOCgpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZyb21VdGY4XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB1dGY4XzEuZnJvbVV0Zjg7XG4gICAgfSB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b1V0ZjhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHV0ZjhfMS50b1V0Zjg7XG4gICAgfSB9KTtcbiAgfVxufSk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fYXNzZXJ0LmpzKi9cbmZ1bmN0aW9uIG51bWJlcihuMikge1xuICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKG4yKSB8fCBuMiA8IDApXG4gICAgdGhyb3cgbmV3IEVycm9yKGBwb3NpdGl2ZSBpbnRlZ2VyIGV4cGVjdGVkLCBub3QgJHtuMn1gKTtcbn1cbmZ1bmN0aW9uIGlzQnl0ZXMoYTIpIHtcbiAgcmV0dXJuIGEyIGluc3RhbmNlb2YgVWludDhBcnJheSB8fCBhMiAhPSBudWxsICYmIHR5cGVvZiBhMiA9PT0gXCJvYmplY3RcIiAmJiBhMi5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIlVpbnQ4QXJyYXlcIjtcbn1cbmZ1bmN0aW9uIGJ5dGVzKGIzLCAuLi5sZW5ndGhzKSB7XG4gIGlmICghaXNCeXRlcyhiMykpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVWludDhBcnJheSBleHBlY3RlZFwiKTtcbiAgaWYgKGxlbmd0aHMubGVuZ3RoID4gMCAmJiAhbGVuZ3Rocy5pbmNsdWRlcyhiMy5sZW5ndGgpKVxuICAgIHRocm93IG5ldyBFcnJvcihgVWludDhBcnJheSBleHBlY3RlZCBvZiBsZW5ndGggJHtsZW5ndGhzfSwgbm90IG9mIGxlbmd0aD0ke2IzLmxlbmd0aH1gKTtcbn1cbmZ1bmN0aW9uIGV4aXN0cyhpbnN0YW5jZSwgY2hlY2tGaW5pc2hlZCA9IHRydWUpIHtcbiAgaWYgKGluc3RhbmNlLmRlc3Ryb3llZClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJIYXNoIGluc3RhbmNlIGhhcyBiZWVuIGRlc3Ryb3llZFwiKTtcbiAgaWYgKGNoZWNrRmluaXNoZWQgJiYgaW5zdGFuY2UuZmluaXNoZWQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSGFzaCNkaWdlc3QoKSBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZFwiKTtcbn1cbmZ1bmN0aW9uIG91dHB1dChvdXQsIGluc3RhbmNlKSB7XG4gIGJ5dGVzKG91dCk7XG4gIGNvbnN0IG1pbiA9IGluc3RhbmNlLm91dHB1dExlbjtcbiAgaWYgKG91dC5sZW5ndGggPCBtaW4pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYGRpZ2VzdEludG8oKSBleHBlY3RzIG91dHB1dCBidWZmZXIgb2YgbGVuZ3RoIGF0IGxlYXN0ICR7bWlufWApO1xuICB9XG59XG52YXIgaW5pdF9hc3NlcnQgPSBfX2VzbSh7XG4gIFwiLi4vLi4vbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL19hc3NlcnQuanNcIigpIHtcbiAgfVxufSk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS91dGlscy5qcyovXG5mdW5jdGlvbiBieXRlU3dhcDMyKGFycikge1xuICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgYXJyLmxlbmd0aDsgaTMrKykge1xuICAgIGFycltpM10gPSBieXRlU3dhcChhcnJbaTNdKTtcbiAgfVxufVxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMoc3RyKSB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSBcInN0cmluZ1wiKVxuICAgIHRocm93IG5ldyBFcnJvcihgdXRmOFRvQnl0ZXMgZXhwZWN0ZWQgc3RyaW5nLCBnb3QgJHt0eXBlb2Ygc3RyfWApO1xuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0cikpO1xufVxuZnVuY3Rpb24gdG9CeXRlczIoZGF0YSkge1xuICBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpXG4gICAgZGF0YSA9IHV0ZjhUb0J5dGVzKGRhdGEpO1xuICBieXRlcyhkYXRhKTtcbiAgcmV0dXJuIGRhdGE7XG59XG5mdW5jdGlvbiB3cmFwQ29uc3RydWN0b3IoaGFzaENvbnMpIHtcbiAgY29uc3QgaGFzaEMgPSAobXNnKSA9PiBoYXNoQ29ucygpLnVwZGF0ZSh0b0J5dGVzMihtc2cpKS5kaWdlc3QoKTtcbiAgY29uc3QgdG1wID0gaGFzaENvbnMoKTtcbiAgaGFzaEMub3V0cHV0TGVuID0gdG1wLm91dHB1dExlbjtcbiAgaGFzaEMuYmxvY2tMZW4gPSB0bXAuYmxvY2tMZW47XG4gIGhhc2hDLmNyZWF0ZSA9ICgpID0+IGhhc2hDb25zKCk7XG4gIHJldHVybiBoYXNoQztcbn1cbmZ1bmN0aW9uIHdyYXBYT0ZDb25zdHJ1Y3RvcldpdGhPcHRzKGhhc2hDb25zKSB7XG4gIGNvbnN0IGhhc2hDID0gKG1zZywgb3B0cykgPT4gaGFzaENvbnMob3B0cykudXBkYXRlKHRvQnl0ZXMyKG1zZykpLmRpZ2VzdCgpO1xuICBjb25zdCB0bXAgPSBoYXNoQ29ucyh7fSk7XG4gIGhhc2hDLm91dHB1dExlbiA9IHRtcC5vdXRwdXRMZW47XG4gIGhhc2hDLmJsb2NrTGVuID0gdG1wLmJsb2NrTGVuO1xuICBoYXNoQy5jcmVhdGUgPSAob3B0cykgPT4gaGFzaENvbnMob3B0cyk7XG4gIHJldHVybiBoYXNoQztcbn1cbnZhciB1MzIsIGlzTEUsIGJ5dGVTd2FwLCBIYXNoLCB0b1N0cjtcbnZhciBpbml0X3V0aWxzID0gX19lc20oe1xuICBcIi4uLy4uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS91dGlscy5qc1wiKCkge1xuICAgIGluaXRfYXNzZXJ0KCk7XG4gICAgdTMyID0gKGFycikgPT4gbmV3IFVpbnQzMkFycmF5KGFyci5idWZmZXIsIGFyci5ieXRlT2Zmc2V0LCBNYXRoLmZsb29yKGFyci5ieXRlTGVuZ3RoIC8gNCkpO1xuICAgIGlzTEUgPSBuZXcgVWludDhBcnJheShuZXcgVWludDMyQXJyYXkoWzI4NzQ1NDAyMF0pLmJ1ZmZlcilbMF0gPT09IDY4O1xuICAgIGJ5dGVTd2FwID0gKHdvcmQpID0+IHdvcmQgPDwgMjQgJiA0Mjc4MTkwMDgwIHwgd29yZCA8PCA4ICYgMTY3MTE2ODAgfCB3b3JkID4+PiA4ICYgNjUyODAgfCB3b3JkID4+PiAyNCAmIDI1NTtcbiAgICBIYXNoID0gY2xhc3Mge1xuICAgICAgLyogU2FmZSB2ZXJzaW9uIHRoYXQgY2xvbmVzIGludGVybmFsIHN0YXRlKi9cbiAgICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xvbmVJbnRvKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0b1N0ciA9IHt9LnRvU3RyaW5nO1xuICB9XG59KTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL191NjQuanMqL1xuZnVuY3Rpb24gZnJvbUJpZyhuMiwgbGUgPSBmYWxzZSkge1xuICBpZiAobGUpXG4gICAgcmV0dXJuIHsgaDogTnVtYmVyKG4yICYgVTMyX01BU0s2NCksIGw6IE51bWJlcihuMiA+PiBfMzJuICYgVTMyX01BU0s2NCkgfTtcbiAgcmV0dXJuIHsgaDogTnVtYmVyKG4yID4+IF8zMm4gJiBVMzJfTUFTSzY0KSB8IDAsIGw6IE51bWJlcihuMiAmIFUzMl9NQVNLNjQpIHwgMCB9O1xufVxuZnVuY3Rpb24gc3BsaXQobHN0LCBsZSA9IGZhbHNlKSB7XG4gIGxldCBBaCA9IG5ldyBVaW50MzJBcnJheShsc3QubGVuZ3RoKTtcbiAgbGV0IEFsID0gbmV3IFVpbnQzMkFycmF5KGxzdC5sZW5ndGgpO1xuICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgbHN0Lmxlbmd0aDsgaTMrKykge1xuICAgIGNvbnN0IHsgaCwgbDogbDIgfSA9IGZyb21CaWcobHN0W2kzXSwgbGUpO1xuICAgIFtBaFtpM10sIEFsW2kzXV0gPSBbaCwgbDJdO1xuICB9XG4gIHJldHVybiBbQWgsIEFsXTtcbn1cbnZhciBVMzJfTUFTSzY0LCBfMzJuLCByb3RsU0gsIHJvdGxTTCwgcm90bEJILCByb3RsQkw7XG52YXIgaW5pdF91NjQgPSBfX2VzbSh7XG4gIFwiLi4vLi4vbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL191NjQuanNcIigpIHtcbiAgICBVMzJfTUFTSzY0ID0gLyogQF9fUFVSRV9fICovIEJpZ0ludCgyICoqIDMyIC0gMSk7XG4gICAgXzMybiA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMzIpO1xuICAgIHJvdGxTSCA9IChoLCBsMiwgczMpID0+IGggPDwgczMgfCBsMiA+Pj4gMzIgLSBzMztcbiAgICByb3RsU0wgPSAoaCwgbDIsIHMzKSA9PiBsMiA8PCBzMyB8IGggPj4+IDMyIC0gczM7XG4gICAgcm90bEJIID0gKGgsIGwyLCBzMykgPT4gbDIgPDwgczMgLSAzMiB8IGggPj4+IDY0IC0gczM7XG4gICAgcm90bEJMID0gKGgsIGwyLCBzMykgPT4gaCA8PCBzMyAtIDMyIHwgbDIgPj4+IDY0IC0gczM7XG4gIH1cbn0pO1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vc2hhMy5qcyovXG5mdW5jdGlvbiBrZWNjYWtQKHMzLCByb3VuZHMgPSAyNCkge1xuICBjb25zdCBCMiA9IG5ldyBVaW50MzJBcnJheSg1ICogMik7XG4gIGZvciAobGV0IHJvdW5kID0gMjQgLSByb3VuZHM7IHJvdW5kIDwgMjQ7IHJvdW5kKyspIHtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IDEwOyB4KyspXG4gICAgICBCMlt4XSA9IHMzW3hdIF4gczNbeCArIDEwXSBeIHMzW3ggKyAyMF0gXiBzM1t4ICsgMzBdIF4gczNbeCArIDQwXTtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IDEwOyB4ICs9IDIpIHtcbiAgICAgIGNvbnN0IGlkeDEgPSAoeCArIDgpICUgMTA7XG4gICAgICBjb25zdCBpZHgwID0gKHggKyAyKSAlIDEwO1xuICAgICAgY29uc3QgQjAgPSBCMltpZHgwXTtcbiAgICAgIGNvbnN0IEIxID0gQjJbaWR4MCArIDFdO1xuICAgICAgY29uc3QgVGggPSByb3RsSChCMCwgQjEsIDEpIF4gQjJbaWR4MV07XG4gICAgICBjb25zdCBUbCA9IHJvdGxMKEIwLCBCMSwgMSkgXiBCMltpZHgxICsgMV07XG4gICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IDUwOyB5ICs9IDEwKSB7XG4gICAgICAgIHMzW3ggKyB5XSBePSBUaDtcbiAgICAgICAgczNbeCArIHkgKyAxXSBePSBUbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IGN1ckggPSBzM1syXTtcbiAgICBsZXQgY3VyTCA9IHMzWzNdO1xuICAgIGZvciAobGV0IHQ1ID0gMDsgdDUgPCAyNDsgdDUrKykge1xuICAgICAgY29uc3Qgc2hpZnQgPSBTSEEzX1JPVExbdDVdO1xuICAgICAgY29uc3QgVGggPSByb3RsSChjdXJILCBjdXJMLCBzaGlmdCk7XG4gICAgICBjb25zdCBUbCA9IHJvdGxMKGN1ckgsIGN1ckwsIHNoaWZ0KTtcbiAgICAgIGNvbnN0IFBJID0gU0hBM19QSVt0NV07XG4gICAgICBjdXJIID0gczNbUEldO1xuICAgICAgY3VyTCA9IHMzW1BJICsgMV07XG4gICAgICBzM1tQSV0gPSBUaDtcbiAgICAgIHMzW1BJICsgMV0gPSBUbDtcbiAgICB9XG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCA1MDsgeSArPSAxMCkge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCAxMDsgeCsrKVxuICAgICAgICBCMlt4XSA9IHMzW3kgKyB4XTtcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgMTA7IHgrKylcbiAgICAgICAgczNbeSArIHhdIF49IH5CMlsoeCArIDIpICUgMTBdICYgQjJbKHggKyA0KSAlIDEwXTtcbiAgICB9XG4gICAgczNbMF0gXj0gU0hBM19JT1RBX0hbcm91bmRdO1xuICAgIHMzWzFdIF49IFNIQTNfSU9UQV9MW3JvdW5kXTtcbiAgfVxuICBCMi5maWxsKDApO1xufVxudmFyIFNIQTNfUEksIFNIQTNfUk9UTCwgX1NIQTNfSU9UQSwgXzBuLCBfMW4sIF8ybiwgXzduLCBfMjU2biwgXzB4NzFuLCBTSEEzX0lPVEFfSCwgU0hBM19JT1RBX0wsIHJvdGxILCByb3RsTCwgS2VjY2FrLCBnZW4sIHNoYTNfMjI0LCBzaGEzXzI1Niwgc2hhM18zODQsIHNoYTNfNTEyLCBrZWNjYWtfMjI0LCBrZWNjYWtfMjU2LCBrZWNjYWtfMzg0LCBrZWNjYWtfNTEyLCBnZW5TaGFrZSwgc2hha2UxMjgsIHNoYWtlMjU2O1xudmFyIGluaXRfc2hhMyA9IF9fZXNtKHtcbiAgXCIuLi8uLi9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vc2hhMy5qc1wiKCkge1xuICAgIGluaXRfYXNzZXJ0KCk7XG4gICAgaW5pdF91NjQoKTtcbiAgICBpbml0X3V0aWxzKCk7XG4gICAgU0hBM19QSSA9IFtdO1xuICAgIFNIQTNfUk9UTCA9IFtdO1xuICAgIF9TSEEzX0lPVEEgPSBbXTtcbiAgICBfMG4gPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDApO1xuICAgIF8xbiA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMSk7XG4gICAgXzJuID0gLyogQF9fUFVSRV9fICovIEJpZ0ludCgyKTtcbiAgICBfN24gPSAvKiBAX19QVVJFX18gKi8gQmlnSW50KDcpO1xuICAgIF8yNTZuID0gLyogQF9fUFVSRV9fICovIEJpZ0ludCgyNTYpO1xuICAgIF8weDcxbiA9IC8qIEBfX1BVUkVfXyAqLyBCaWdJbnQoMTEzKTtcbiAgICBmb3IgKGxldCByb3VuZCA9IDAsIFIgPSBfMW4sIHggPSAxLCB5ID0gMDsgcm91bmQgPCAyNDsgcm91bmQrKykge1xuICAgICAgW3gsIHldID0gW3ksICgyICogeCArIDMgKiB5KSAlIDVdO1xuICAgICAgU0hBM19QSS5wdXNoKDIgKiAoNSAqIHkgKyB4KSk7XG4gICAgICBTSEEzX1JPVEwucHVzaCgocm91bmQgKyAxKSAqIChyb3VuZCArIDIpIC8gMiAlIDY0KTtcbiAgICAgIGxldCB0NSA9IF8wbjtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgNzsgaisrKSB7XG4gICAgICAgIFIgPSAoUiA8PCBfMW4gXiAoUiA+PiBfN24pICogXzB4NzFuKSAlIF8yNTZuO1xuICAgICAgICBpZiAoUiAmIF8ybilcbiAgICAgICAgICB0NSBePSBfMW4gPDwgKF8xbiA8PCAvKiBAX19QVVJFX18gKi8gQmlnSW50KGopKSAtIF8xbjtcbiAgICAgIH1cbiAgICAgIF9TSEEzX0lPVEEucHVzaCh0NSk7XG4gICAgfVxuICAgIFtTSEEzX0lPVEFfSCwgU0hBM19JT1RBX0xdID0gLyogQF9fUFVSRV9fICovIHNwbGl0KF9TSEEzX0lPVEEsIHRydWUpO1xuICAgIHJvdGxIID0gKGgsIGwyLCBzMykgPT4gczMgPiAzMiA/IHJvdGxCSChoLCBsMiwgczMpIDogcm90bFNIKGgsIGwyLCBzMyk7XG4gICAgcm90bEwgPSAoaCwgbDIsIHMzKSA9PiBzMyA+IDMyID8gcm90bEJMKGgsIGwyLCBzMykgOiByb3RsU0woaCwgbDIsIHMzKTtcbiAgICBLZWNjYWsgPSBjbGFzcyBfS2VjY2FrIGV4dGVuZHMgSGFzaCB7XG4gICAgICAvKiBOT1RFOiB3ZSBhY2NlcHQgYXJndW1lbnRzIGluIGJ5dGVzIGluc3RlYWQgb2YgYml0cyBoZXJlLiovXG4gICAgICBjb25zdHJ1Y3RvcihibG9ja0xlbiwgc3VmZml4LCBvdXRwdXRMZW4sIGVuYWJsZVhPRiA9IGZhbHNlLCByb3VuZHMgPSAyNCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmJsb2NrTGVuID0gYmxvY2tMZW47XG4gICAgICAgIHRoaXMuc3VmZml4ID0gc3VmZml4O1xuICAgICAgICB0aGlzLm91dHB1dExlbiA9IG91dHB1dExlbjtcbiAgICAgICAgdGhpcy5lbmFibGVYT0YgPSBlbmFibGVYT0Y7XG4gICAgICAgIHRoaXMucm91bmRzID0gcm91bmRzO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMucG9zT3V0ID0gMDtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgICBudW1iZXIob3V0cHV0TGVuKTtcbiAgICAgICAgaWYgKDAgPj0gdGhpcy5ibG9ja0xlbiB8fCB0aGlzLmJsb2NrTGVuID49IDIwMClcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaGEzIHN1cHBvcnRzIG9ubHkga2VjY2FrLWYxNjAwIGZ1bmN0aW9uXCIpO1xuICAgICAgICB0aGlzLnN0YXRlID0gbmV3IFVpbnQ4QXJyYXkoMjAwKTtcbiAgICAgICAgdGhpcy5zdGF0ZTMyID0gdTMyKHRoaXMuc3RhdGUpO1xuICAgICAgfVxuICAgICAga2VjY2FrKCkge1xuICAgICAgICBpZiAoIWlzTEUpXG4gICAgICAgICAgYnl0ZVN3YXAzMih0aGlzLnN0YXRlMzIpO1xuICAgICAgICBrZWNjYWtQKHRoaXMuc3RhdGUzMiwgdGhpcy5yb3VuZHMpO1xuICAgICAgICBpZiAoIWlzTEUpXG4gICAgICAgICAgYnl0ZVN3YXAzMih0aGlzLnN0YXRlMzIpO1xuICAgICAgICB0aGlzLnBvc091dCA9IDA7XG4gICAgICAgIHRoaXMucG9zID0gMDtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZShkYXRhKSB7XG4gICAgICAgIGV4aXN0cyh0aGlzKTtcbiAgICAgICAgY29uc3QgeyBibG9ja0xlbiwgc3RhdGUgfSA9IHRoaXM7XG4gICAgICAgIGRhdGEgPSB0b0J5dGVzMihkYXRhKTtcbiAgICAgICAgY29uc3QgbGVuID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IHBvcyA9IDA7IHBvcyA8IGxlbjsgKSB7XG4gICAgICAgICAgY29uc3QgdGFrZSA9IE1hdGgubWluKGJsb2NrTGVuIC0gdGhpcy5wb3MsIGxlbiAtIHBvcyk7XG4gICAgICAgICAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IHRha2U7IGkzKyspXG4gICAgICAgICAgICBzdGF0ZVt0aGlzLnBvcysrXSBePSBkYXRhW3BvcysrXTtcbiAgICAgICAgICBpZiAodGhpcy5wb3MgPT09IGJsb2NrTGVuKVxuICAgICAgICAgICAgdGhpcy5rZWNjYWsoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGZpbmlzaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZmluaXNoZWQpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgeyBzdGF0ZSwgc3VmZml4LCBwb3MsIGJsb2NrTGVuIH0gPSB0aGlzO1xuICAgICAgICBzdGF0ZVtwb3NdIF49IHN1ZmZpeDtcbiAgICAgICAgaWYgKChzdWZmaXggJiAxMjgpICE9PSAwICYmIHBvcyA9PT0gYmxvY2tMZW4gLSAxKVxuICAgICAgICAgIHRoaXMua2VjY2FrKCk7XG4gICAgICAgIHN0YXRlW2Jsb2NrTGVuIC0gMV0gXj0gMTI4O1xuICAgICAgICB0aGlzLmtlY2NhaygpO1xuICAgICAgfVxuICAgICAgd3JpdGVJbnRvKG91dCkge1xuICAgICAgICBleGlzdHModGhpcywgZmFsc2UpO1xuICAgICAgICBieXRlcyhvdXQpO1xuICAgICAgICB0aGlzLmZpbmlzaCgpO1xuICAgICAgICBjb25zdCBidWZmZXJPdXQgPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCB7IGJsb2NrTGVuIH0gPSB0aGlzO1xuICAgICAgICBmb3IgKGxldCBwb3MgPSAwLCBsZW4gPSBvdXQubGVuZ3RoOyBwb3MgPCBsZW47ICkge1xuICAgICAgICAgIGlmICh0aGlzLnBvc091dCA+PSBibG9ja0xlbilcbiAgICAgICAgICAgIHRoaXMua2VjY2FrKCk7XG4gICAgICAgICAgY29uc3QgdGFrZSA9IE1hdGgubWluKGJsb2NrTGVuIC0gdGhpcy5wb3NPdXQsIGxlbiAtIHBvcyk7XG4gICAgICAgICAgb3V0LnNldChidWZmZXJPdXQuc3ViYXJyYXkodGhpcy5wb3NPdXQsIHRoaXMucG9zT3V0ICsgdGFrZSksIHBvcyk7XG4gICAgICAgICAgdGhpcy5wb3NPdXQgKz0gdGFrZTtcbiAgICAgICAgICBwb3MgKz0gdGFrZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgfVxuICAgICAgeG9mSW50byhvdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZVhPRilcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJYT0YgaXMgbm90IHBvc3NpYmxlIGZvciB0aGlzIGluc3RhbmNlXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy53cml0ZUludG8ob3V0KTtcbiAgICAgIH1cbiAgICAgIHhvZihieXRlczIpIHtcbiAgICAgICAgbnVtYmVyKGJ5dGVzMik7XG4gICAgICAgIHJldHVybiB0aGlzLnhvZkludG8obmV3IFVpbnQ4QXJyYXkoYnl0ZXMyKSk7XG4gICAgICB9XG4gICAgICBkaWdlc3RJbnRvKG91dCkge1xuICAgICAgICBvdXRwdXQob3V0LCB0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMuZmluaXNoZWQpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZGlnZXN0KCkgd2FzIGFscmVhZHkgY2FsbGVkXCIpO1xuICAgICAgICB0aGlzLndyaXRlSW50byhvdXQpO1xuICAgICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgIH1cbiAgICAgIGRpZ2VzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlnZXN0SW50byhuZXcgVWludDhBcnJheSh0aGlzLm91dHB1dExlbikpO1xuICAgICAgfVxuICAgICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnN0YXRlLmZpbGwoMCk7XG4gICAgICB9XG4gICAgICBfY2xvbmVJbnRvKHRvKSB7XG4gICAgICAgIGNvbnN0IHsgYmxvY2tMZW4sIHN1ZmZpeCwgb3V0cHV0TGVuLCByb3VuZHMsIGVuYWJsZVhPRiB9ID0gdGhpcztcbiAgICAgICAgdG8gfHwgKHRvID0gbmV3IF9LZWNjYWsoYmxvY2tMZW4sIHN1ZmZpeCwgb3V0cHV0TGVuLCBlbmFibGVYT0YsIHJvdW5kcykpO1xuICAgICAgICB0by5zdGF0ZTMyLnNldCh0aGlzLnN0YXRlMzIpO1xuICAgICAgICB0by5wb3MgPSB0aGlzLnBvcztcbiAgICAgICAgdG8ucG9zT3V0ID0gdGhpcy5wb3NPdXQ7XG4gICAgICAgIHRvLmZpbmlzaGVkID0gdGhpcy5maW5pc2hlZDtcbiAgICAgICAgdG8ucm91bmRzID0gcm91bmRzO1xuICAgICAgICB0by5zdWZmaXggPSBzdWZmaXg7XG4gICAgICAgIHRvLm91dHB1dExlbiA9IG91dHB1dExlbjtcbiAgICAgICAgdG8uZW5hYmxlWE9GID0gZW5hYmxlWE9GO1xuICAgICAgICB0by5kZXN0cm95ZWQgPSB0aGlzLmRlc3Ryb3llZDtcbiAgICAgICAgcmV0dXJuIHRvO1xuICAgICAgfVxuICAgIH07XG4gICAgZ2VuID0gKHN1ZmZpeCwgYmxvY2tMZW4sIG91dHB1dExlbikgPT4gd3JhcENvbnN0cnVjdG9yKCgpID0+IG5ldyBLZWNjYWsoYmxvY2tMZW4sIHN1ZmZpeCwgb3V0cHV0TGVuKSk7XG4gICAgc2hhM18yMjQgPSAvKiBAX19QVVJFX18gKi8gZ2VuKDYsIDE0NCwgMjI0IC8gOCk7XG4gICAgc2hhM18yNTYgPSAvKiBAX19QVVJFX18gKi8gZ2VuKDYsIDEzNiwgMjU2IC8gOCk7XG4gICAgc2hhM18zODQgPSAvKiBAX19QVVJFX18gKi8gZ2VuKDYsIDEwNCwgMzg0IC8gOCk7XG4gICAgc2hhM181MTIgPSAvKiBAX19QVVJFX18gKi8gZ2VuKDYsIDcyLCA1MTIgLyA4KTtcbiAgICBrZWNjYWtfMjI0ID0gLyogQF9fUFVSRV9fICovIGdlbigxLCAxNDQsIDIyNCAvIDgpO1xuICAgIGtlY2Nha18yNTYgPSAvKiBAX19QVVJFX18gKi8gZ2VuKDEsIDEzNiwgMjU2IC8gOCk7XG4gICAga2VjY2FrXzM4NCA9IC8qIEBfX1BVUkVfXyAqLyBnZW4oMSwgMTA0LCAzODQgLyA4KTtcbiAgICBrZWNjYWtfNTEyID0gLyogQF9fUFVSRV9fICovIGdlbigxLCA3MiwgNTEyIC8gOCk7XG4gICAgZ2VuU2hha2UgPSAoc3VmZml4LCBibG9ja0xlbiwgb3V0cHV0TGVuKSA9PiB3cmFwWE9GQ29uc3RydWN0b3JXaXRoT3B0cygob3B0cyA9IHt9KSA9PiBuZXcgS2VjY2FrKGJsb2NrTGVuLCBzdWZmaXgsIG9wdHMuZGtMZW4gPT09IHZvaWQgMCA/IG91dHB1dExlbiA6IG9wdHMuZGtMZW4sIHRydWUpKTtcbiAgICBzaGFrZTEyOCA9IC8qIEBfX1BVUkVfXyAqLyBnZW5TaGFrZSgzMSwgMTY4LCAxMjggLyA4KTtcbiAgICBzaGFrZTI1NiA9IC8qIEBfX1BVUkVfXyAqLyBnZW5TaGFrZSgzMSwgMTM2LCAyNTYgLyA4KTtcbiAgfVxufSk7XG5cbi8qIC4uL29yY2hlc3RyYXRpb24vc3JjL3ZlbmRvci92aWVtL2NodW5rLTRFRjRLMk1ILmpzKi9cbmZ1bmN0aW9uIGV4ZWNUeXBlZChyZWdleCwgc3RyaW5nKSB7XG4gIGNvbnN0IG1hdGNoID0gcmVnZXguZXhlYyhzdHJpbmcpO1xuICByZXR1cm4gbWF0Y2g/Lmdyb3Vwcztcbn1cbmZ1bmN0aW9uIGZvcm1hdEFiaVBhcmFtZXRlcihhYmlQYXJhbWV0ZXIpIHtcbiAgbGV0IHR5cGUgPSBhYmlQYXJhbWV0ZXIudHlwZTtcbiAgaWYgKHR1cGxlUmVnZXgudGVzdChhYmlQYXJhbWV0ZXIudHlwZSkgJiYgXCJjb21wb25lbnRzXCIgaW4gYWJpUGFyYW1ldGVyKSB7XG4gICAgdHlwZSA9IFwiKFwiO1xuICAgIGNvbnN0IGxlbmd0aCA9IGFiaVBhcmFtZXRlci5jb21wb25lbnRzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgbGVuZ3RoOyBpMysrKSB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSBhYmlQYXJhbWV0ZXIuY29tcG9uZW50c1tpM107XG4gICAgICB0eXBlICs9IGZvcm1hdEFiaVBhcmFtZXRlcihjb21wb25lbnQpO1xuICAgICAgaWYgKGkzIDwgbGVuZ3RoIC0gMSlcbiAgICAgICAgdHlwZSArPSBcIiwgXCI7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGV4ZWNUeXBlZCh0dXBsZVJlZ2V4LCBhYmlQYXJhbWV0ZXIudHlwZSk7XG4gICAgdHlwZSArPSBgKSR7cmVzdWx0Py5hcnJheSA/PyBcIlwifWA7XG4gICAgcmV0dXJuIGZvcm1hdEFiaVBhcmFtZXRlcih7XG4gICAgICAuLi5hYmlQYXJhbWV0ZXIsXG4gICAgICB0eXBlXG4gICAgfSk7XG4gIH1cbiAgaWYgKFwiaW5kZXhlZFwiIGluIGFiaVBhcmFtZXRlciAmJiBhYmlQYXJhbWV0ZXIuaW5kZXhlZClcbiAgICB0eXBlID0gYCR7dHlwZX0gaW5kZXhlZGA7XG4gIGlmIChhYmlQYXJhbWV0ZXIubmFtZSlcbiAgICByZXR1cm4gYCR7dHlwZX0gJHthYmlQYXJhbWV0ZXIubmFtZX1gO1xuICByZXR1cm4gdHlwZTtcbn1cbmZ1bmN0aW9uIGZvcm1hdEFiaVBhcmFtZXRlcnMoYWJpUGFyYW1ldGVycykge1xuICBsZXQgcGFyYW1zID0gXCJcIjtcbiAgY29uc3QgbGVuZ3RoID0gYWJpUGFyYW1ldGVycy5sZW5ndGg7XG4gIGZvciAobGV0IGkzID0gMDsgaTMgPCBsZW5ndGg7IGkzKyspIHtcbiAgICBjb25zdCBhYmlQYXJhbWV0ZXIgPSBhYmlQYXJhbWV0ZXJzW2kzXTtcbiAgICBwYXJhbXMgKz0gZm9ybWF0QWJpUGFyYW1ldGVyKGFiaVBhcmFtZXRlcik7XG4gICAgaWYgKGkzICE9PSBsZW5ndGggLSAxKVxuICAgICAgcGFyYW1zICs9IFwiLCBcIjtcbiAgfVxuICByZXR1cm4gcGFyYW1zO1xufVxuZnVuY3Rpb24gZm9ybWF0QWJpSXRlbShhYmlJdGVtKSB7XG4gIGlmIChhYmlJdGVtLnR5cGUgPT09IFwiZnVuY3Rpb25cIilcbiAgICByZXR1cm4gYGZ1bmN0aW9uICR7YWJpSXRlbS5uYW1lfSgke2Zvcm1hdEFiaVBhcmFtZXRlcnMoYWJpSXRlbS5pbnB1dHMpfSkke2FiaUl0ZW0uc3RhdGVNdXRhYmlsaXR5ICYmIGFiaUl0ZW0uc3RhdGVNdXRhYmlsaXR5ICE9PSBcIm5vbnBheWFibGVcIiA/IGAgJHthYmlJdGVtLnN0YXRlTXV0YWJpbGl0eX1gIDogXCJcIn0ke2FiaUl0ZW0ub3V0cHV0cz8ubGVuZ3RoID8gYCByZXR1cm5zICgke2Zvcm1hdEFiaVBhcmFtZXRlcnMoYWJpSXRlbS5vdXRwdXRzKX0pYCA6IFwiXCJ9YDtcbiAgaWYgKGFiaUl0ZW0udHlwZSA9PT0gXCJldmVudFwiKVxuICAgIHJldHVybiBgZXZlbnQgJHthYmlJdGVtLm5hbWV9KCR7Zm9ybWF0QWJpUGFyYW1ldGVycyhhYmlJdGVtLmlucHV0cyl9KWA7XG4gIGlmIChhYmlJdGVtLnR5cGUgPT09IFwiZXJyb3JcIilcbiAgICByZXR1cm4gYGVycm9yICR7YWJpSXRlbS5uYW1lfSgke2Zvcm1hdEFiaVBhcmFtZXRlcnMoYWJpSXRlbS5pbnB1dHMpfSlgO1xuICBpZiAoYWJpSXRlbS50eXBlID09PSBcImNvbnN0cnVjdG9yXCIpXG4gICAgcmV0dXJuIGBjb25zdHJ1Y3Rvcigke2Zvcm1hdEFiaVBhcmFtZXRlcnMoYWJpSXRlbS5pbnB1dHMpfSkke2FiaUl0ZW0uc3RhdGVNdXRhYmlsaXR5ID09PSBcInBheWFibGVcIiA/IFwiIHBheWFibGVcIiA6IFwiXCJ9YDtcbiAgaWYgKGFiaUl0ZW0udHlwZSA9PT0gXCJmYWxsYmFja1wiKVxuICAgIHJldHVybiBgZmFsbGJhY2soKSBleHRlcm5hbCR7YWJpSXRlbS5zdGF0ZU11dGFiaWxpdHkgPT09IFwicGF5YWJsZVwiID8gXCIgcGF5YWJsZVwiIDogXCJcIn1gO1xuICByZXR1cm4gXCJyZWNlaXZlKCkgZXh0ZXJuYWwgcGF5YWJsZVwiO1xufVxuZnVuY3Rpb24gd2FsazIoZXJyLCBmbikge1xuICBpZiAoZm4/LihlcnIpKVxuICAgIHJldHVybiBlcnI7XG4gIGlmIChlcnIgJiYgdHlwZW9mIGVyciA9PT0gXCJvYmplY3RcIiAmJiBcImNhdXNlXCIgaW4gZXJyICYmIGVyci5jYXVzZSAhPT0gdm9pZCAwKVxuICAgIHJldHVybiB3YWxrMihlcnIuY2F1c2UsIGZuKTtcbiAgcmV0dXJuIGZuID8gbnVsbCA6IGVycjtcbn1cbmZ1bmN0aW9uIGZvcm1hdEFiaUl0ZW0yKGFiaUl0ZW0sIHsgaW5jbHVkZU5hbWUgPSBmYWxzZSB9ID0ge30pIHtcbiAgaWYgKGFiaUl0ZW0udHlwZSAhPT0gXCJmdW5jdGlvblwiICYmIGFiaUl0ZW0udHlwZSAhPT0gXCJldmVudFwiICYmIGFiaUl0ZW0udHlwZSAhPT0gXCJlcnJvclwiKVxuICAgIHRocm93IG5ldyBJbnZhbGlkRGVmaW5pdGlvblR5cGVFcnJvcihhYmlJdGVtLnR5cGUpO1xuICByZXR1cm4gYCR7YWJpSXRlbS5uYW1lfSgke2Zvcm1hdEFiaVBhcmFtcyhhYmlJdGVtLmlucHV0cywgeyBpbmNsdWRlTmFtZSB9KX0pYDtcbn1cbmZ1bmN0aW9uIGZvcm1hdEFiaVBhcmFtcyhwYXJhbXMsIHsgaW5jbHVkZU5hbWUgPSBmYWxzZSB9ID0ge30pIHtcbiAgaWYgKCFwYXJhbXMpXG4gICAgcmV0dXJuIFwiXCI7XG4gIHJldHVybiBwYXJhbXMubWFwKChwYXJhbSkgPT4gZm9ybWF0QWJpUGFyYW0ocGFyYW0sIHsgaW5jbHVkZU5hbWUgfSkpLmpvaW4oaW5jbHVkZU5hbWUgPyBcIiwgXCIgOiBcIixcIik7XG59XG5mdW5jdGlvbiBmb3JtYXRBYmlQYXJhbShwYXJhbSwgeyBpbmNsdWRlTmFtZSB9KSB7XG4gIGlmIChwYXJhbS50eXBlLnN0YXJ0c1dpdGgoXCJ0dXBsZVwiKSkge1xuICAgIHJldHVybiBgKCR7Zm9ybWF0QWJpUGFyYW1zKHBhcmFtLmNvbXBvbmVudHMsIHsgaW5jbHVkZU5hbWUgfSl9KSR7cGFyYW0udHlwZS5zbGljZShcInR1cGxlXCIubGVuZ3RoKX1gO1xuICB9XG4gIHJldHVybiBwYXJhbS50eXBlICsgKGluY2x1ZGVOYW1lICYmIHBhcmFtLm5hbWUgPyBgICR7cGFyYW0ubmFtZX1gIDogXCJcIik7XG59XG5mdW5jdGlvbiBpc0hleCh2YWx1ZSwgeyBzdHJpY3QgPSB0cnVlIH0gPSB7fSkge1xuICBpZiAoIXZhbHVlKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIilcbiAgICByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBzdHJpY3QgPyAvXjB4WzAtOWEtZkEtRl0qJC8udGVzdCh2YWx1ZSkgOiB2YWx1ZS5zdGFydHNXaXRoKFwiMHhcIik7XG59XG5mdW5jdGlvbiBzaXplMih2YWx1ZSkge1xuICBpZiAoaXNIZXgodmFsdWUsIHsgc3RyaWN0OiBmYWxzZSB9KSlcbiAgICByZXR1cm4gTWF0aC5jZWlsKCh2YWx1ZS5sZW5ndGggLSAyKSAvIDIpO1xuICByZXR1cm4gdmFsdWUubGVuZ3RoO1xufVxuZnVuY3Rpb24gc2xpY2UodmFsdWUsIHN0YXJ0MiwgZW5kLCB7IHN0cmljdCB9ID0ge30pIHtcbiAgaWYgKGlzSGV4KHZhbHVlLCB7IHN0cmljdDogZmFsc2UgfSkpXG4gICAgcmV0dXJuIHNsaWNlSGV4KHZhbHVlLCBzdGFydDIsIGVuZCwge1xuICAgICAgc3RyaWN0XG4gICAgfSk7XG4gIHJldHVybiBzbGljZUJ5dGVzKHZhbHVlLCBzdGFydDIsIGVuZCwge1xuICAgIHN0cmljdFxuICB9KTtcbn1cbmZ1bmN0aW9uIGFzc2VydFN0YXJ0T2Zmc2V0Mih2YWx1ZSwgc3RhcnQyKSB7XG4gIGlmICh0eXBlb2Ygc3RhcnQyID09PSBcIm51bWJlclwiICYmIHN0YXJ0MiA+IDAgJiYgc3RhcnQyID4gc2l6ZTIodmFsdWUpIC0gMSlcbiAgICB0aHJvdyBuZXcgU2xpY2VPZmZzZXRPdXRPZkJvdW5kc0Vycm9yMih7XG4gICAgICBvZmZzZXQ6IHN0YXJ0MixcbiAgICAgIHBvc2l0aW9uOiBcInN0YXJ0XCIsXG4gICAgICBzaXplOiBzaXplMih2YWx1ZSlcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGFzc2VydEVuZE9mZnNldDIodmFsdWUsIHN0YXJ0MiwgZW5kKSB7XG4gIGlmICh0eXBlb2Ygc3RhcnQyID09PSBcIm51bWJlclwiICYmIHR5cGVvZiBlbmQgPT09IFwibnVtYmVyXCIgJiYgc2l6ZTIodmFsdWUpICE9PSBlbmQgLSBzdGFydDIpIHtcbiAgICB0aHJvdyBuZXcgU2xpY2VPZmZzZXRPdXRPZkJvdW5kc0Vycm9yMih7XG4gICAgICBvZmZzZXQ6IGVuZCxcbiAgICAgIHBvc2l0aW9uOiBcImVuZFwiLFxuICAgICAgc2l6ZTogc2l6ZTIodmFsdWUpXG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHNsaWNlQnl0ZXModmFsdWVfLCBzdGFydDIsIGVuZCwgeyBzdHJpY3QgfSA9IHt9KSB7XG4gIGFzc2VydFN0YXJ0T2Zmc2V0Mih2YWx1ZV8sIHN0YXJ0Mik7XG4gIGNvbnN0IHZhbHVlID0gdmFsdWVfLnNsaWNlKHN0YXJ0MiwgZW5kKTtcbiAgaWYgKHN0cmljdClcbiAgICBhc3NlcnRFbmRPZmZzZXQyKHZhbHVlLCBzdGFydDIsIGVuZCk7XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNsaWNlSGV4KHZhbHVlXywgc3RhcnQyLCBlbmQsIHsgc3RyaWN0IH0gPSB7fSkge1xuICBhc3NlcnRTdGFydE9mZnNldDIodmFsdWVfLCBzdGFydDIpO1xuICBjb25zdCB2YWx1ZSA9IGAweCR7dmFsdWVfLnJlcGxhY2UoXCIweFwiLCBcIlwiKS5zbGljZSgoc3RhcnQyID8/IDApICogMiwgKGVuZCA/PyB2YWx1ZV8ubGVuZ3RoKSAqIDIpfWA7XG4gIGlmIChzdHJpY3QpXG4gICAgYXNzZXJ0RW5kT2Zmc2V0Mih2YWx1ZSwgc3RhcnQyLCBlbmQpO1xuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBwYWQyKGhleE9yQnl0ZXMsIHsgZGlyLCBzaXplOiBzaXplMyA9IDMyIH0gPSB7fSkge1xuICBpZiAodHlwZW9mIGhleE9yQnl0ZXMgPT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIHBhZEhleChoZXhPckJ5dGVzLCB7IGRpciwgc2l6ZTogc2l6ZTMgfSk7XG4gIHJldHVybiBwYWRCeXRlcyhoZXhPckJ5dGVzLCB7IGRpciwgc2l6ZTogc2l6ZTMgfSk7XG59XG5mdW5jdGlvbiBwYWRIZXgoaGV4XywgeyBkaXIsIHNpemU6IHNpemUzID0gMzIgfSA9IHt9KSB7XG4gIGlmIChzaXplMyA9PT0gbnVsbClcbiAgICByZXR1cm4gaGV4XztcbiAgY29uc3QgaGV4ID0gaGV4Xy5yZXBsYWNlKFwiMHhcIiwgXCJcIik7XG4gIGlmIChoZXgubGVuZ3RoID4gc2l6ZTMgKiAyKVxuICAgIHRocm93IG5ldyBTaXplRXhjZWVkc1BhZGRpbmdTaXplRXJyb3IyKHtcbiAgICAgIHNpemU6IE1hdGguY2VpbChoZXgubGVuZ3RoIC8gMiksXG4gICAgICB0YXJnZXRTaXplOiBzaXplMyxcbiAgICAgIHR5cGU6IFwiaGV4XCJcbiAgICB9KTtcbiAgcmV0dXJuIGAweCR7aGV4W2RpciA9PT0gXCJyaWdodFwiID8gXCJwYWRFbmRcIiA6IFwicGFkU3RhcnRcIl0oc2l6ZTMgKiAyLCBcIjBcIil9YDtcbn1cbmZ1bmN0aW9uIHBhZEJ5dGVzKGJ5dGVzMiwgeyBkaXIsIHNpemU6IHNpemUzID0gMzIgfSA9IHt9KSB7XG4gIGlmIChzaXplMyA9PT0gbnVsbClcbiAgICByZXR1cm4gYnl0ZXMyO1xuICBpZiAoYnl0ZXMyLmxlbmd0aCA+IHNpemUzKVxuICAgIHRocm93IG5ldyBTaXplRXhjZWVkc1BhZGRpbmdTaXplRXJyb3IyKHtcbiAgICAgIHNpemU6IGJ5dGVzMi5sZW5ndGgsXG4gICAgICB0YXJnZXRTaXplOiBzaXplMyxcbiAgICAgIHR5cGU6IFwiYnl0ZXNcIlxuICAgIH0pO1xuICBjb25zdCBwYWRkZWRCeXRlcyA9IG5ldyBVaW50OEFycmF5KHNpemUzKTtcbiAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IHNpemUzOyBpMysrKSB7XG4gICAgY29uc3QgcGFkRW5kID0gZGlyID09PSBcInJpZ2h0XCI7XG4gICAgcGFkZGVkQnl0ZXNbcGFkRW5kID8gaTMgOiBzaXplMyAtIGkzIC0gMV0gPSBieXRlczJbcGFkRW5kID8gaTMgOiBieXRlczIubGVuZ3RoIC0gaTMgLSAxXTtcbiAgfVxuICByZXR1cm4gcGFkZGVkQnl0ZXM7XG59XG5mdW5jdGlvbiB0cmltMihoZXhPckJ5dGVzLCB7IGRpciA9IFwibGVmdFwiIH0gPSB7fSkge1xuICBsZXQgZGF0YSA9IHR5cGVvZiBoZXhPckJ5dGVzID09PSBcInN0cmluZ1wiID8gaGV4T3JCeXRlcy5yZXBsYWNlKFwiMHhcIiwgXCJcIikgOiBoZXhPckJ5dGVzO1xuICBsZXQgc2xpY2VMZW5ndGggPSAwO1xuICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgZGF0YS5sZW5ndGggLSAxOyBpMysrKSB7XG4gICAgaWYgKGRhdGFbZGlyID09PSBcImxlZnRcIiA/IGkzIDogZGF0YS5sZW5ndGggLSBpMyAtIDFdLnRvU3RyaW5nKCkgPT09IFwiMFwiKVxuICAgICAgc2xpY2VMZW5ndGgrKztcbiAgICBlbHNlXG4gICAgICBicmVhaztcbiAgfVxuICBkYXRhID0gZGlyID09PSBcImxlZnRcIiA/IGRhdGEuc2xpY2Uoc2xpY2VMZW5ndGgpIDogZGF0YS5zbGljZSgwLCBkYXRhLmxlbmd0aCAtIHNsaWNlTGVuZ3RoKTtcbiAgaWYgKHR5cGVvZiBoZXhPckJ5dGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKGRhdGEubGVuZ3RoID09PSAxICYmIGRpciA9PT0gXCJyaWdodFwiKVxuICAgICAgZGF0YSA9IGAke2RhdGF9MGA7XG4gICAgcmV0dXJuIGAweCR7ZGF0YS5sZW5ndGggJSAyID09PSAxID8gYDAke2RhdGF9YCA6IGRhdGF9YDtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cbmZ1bmN0aW9uIGFzc2VydFNpemUyKGhleE9yQnl0ZXMsIHsgc2l6ZTogc2l6ZTMgfSkge1xuICBpZiAoc2l6ZTIoaGV4T3JCeXRlcykgPiBzaXplMylcbiAgICB0aHJvdyBuZXcgU2l6ZU92ZXJmbG93RXJyb3IyKHtcbiAgICAgIGdpdmVuU2l6ZTogc2l6ZTIoaGV4T3JCeXRlcyksXG4gICAgICBtYXhTaXplOiBzaXplM1xuICAgIH0pO1xufVxuZnVuY3Rpb24gaGV4VG9CaWdJbnQoaGV4LCBvcHRzID0ge30pIHtcbiAgY29uc3QgeyBzaWduZWQgfSA9IG9wdHM7XG4gIGlmIChvcHRzLnNpemUpXG4gICAgYXNzZXJ0U2l6ZTIoaGV4LCB7IHNpemU6IG9wdHMuc2l6ZSB9KTtcbiAgY29uc3QgdmFsdWUgPSBCaWdJbnQoaGV4KTtcbiAgaWYgKCFzaWduZWQpXG4gICAgcmV0dXJuIHZhbHVlO1xuICBjb25zdCBzaXplMyA9IChoZXgubGVuZ3RoIC0gMikgLyAyO1xuICBjb25zdCBtYXggPSAoMW4gPDwgQmlnSW50KHNpemUzKSAqIDhuIC0gMW4pIC0gMW47XG4gIGlmICh2YWx1ZSA8PSBtYXgpXG4gICAgcmV0dXJuIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgLSBCaWdJbnQoYDB4JHtcImZcIi5wYWRTdGFydChzaXplMyAqIDIsIFwiZlwiKX1gKSAtIDFuO1xufVxuZnVuY3Rpb24gaGV4VG9OdW1iZXIoaGV4LCBvcHRzID0ge30pIHtcbiAgcmV0dXJuIE51bWJlcihoZXhUb0JpZ0ludChoZXgsIG9wdHMpKTtcbn1cbmZ1bmN0aW9uIHRvSGV4KHZhbHVlLCBvcHRzID0ge30pIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwiYmlnaW50XCIpXG4gICAgcmV0dXJuIG51bWJlclRvSGV4KHZhbHVlLCBvcHRzKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBzdHJpbmdUb0hleCh2YWx1ZSwgb3B0cyk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIpXG4gICAgcmV0dXJuIGJvb2xUb0hleCh2YWx1ZSwgb3B0cyk7XG4gIHJldHVybiBieXRlc1RvSGV4KHZhbHVlLCBvcHRzKTtcbn1cbmZ1bmN0aW9uIGJvb2xUb0hleCh2YWx1ZSwgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IGhleCA9IGAweCR7TnVtYmVyKHZhbHVlKX1gO1xuICBpZiAodHlwZW9mIG9wdHMuc2l6ZSA9PT0gXCJudW1iZXJcIikge1xuICAgIGFzc2VydFNpemUyKGhleCwgeyBzaXplOiBvcHRzLnNpemUgfSk7XG4gICAgcmV0dXJuIHBhZDIoaGV4LCB7IHNpemU6IG9wdHMuc2l6ZSB9KTtcbiAgfVxuICByZXR1cm4gaGV4O1xufVxuZnVuY3Rpb24gYnl0ZXNUb0hleCh2YWx1ZSwgb3B0cyA9IHt9KSB7XG4gIGxldCBzdHJpbmcgPSBcIlwiO1xuICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgdmFsdWUubGVuZ3RoOyBpMysrKSB7XG4gICAgc3RyaW5nICs9IGhleGVzW3ZhbHVlW2kzXV07XG4gIH1cbiAgY29uc3QgaGV4ID0gYDB4JHtzdHJpbmd9YDtcbiAgaWYgKHR5cGVvZiBvcHRzLnNpemUgPT09IFwibnVtYmVyXCIpIHtcbiAgICBhc3NlcnRTaXplMihoZXgsIHsgc2l6ZTogb3B0cy5zaXplIH0pO1xuICAgIHJldHVybiBwYWQyKGhleCwgeyBkaXI6IFwicmlnaHRcIiwgc2l6ZTogb3B0cy5zaXplIH0pO1xuICB9XG4gIHJldHVybiBoZXg7XG59XG5mdW5jdGlvbiBudW1iZXJUb0hleCh2YWx1ZV8sIG9wdHMgPSB7fSkge1xuICBjb25zdCB7IHNpZ25lZCwgc2l6ZTogc2l6ZTMgfSA9IG9wdHM7XG4gIGNvbnN0IHZhbHVlID0gQmlnSW50KHZhbHVlXyk7XG4gIGxldCBtYXhWYWx1ZTtcbiAgaWYgKHNpemUzKSB7XG4gICAgaWYgKHNpZ25lZClcbiAgICAgIG1heFZhbHVlID0gKDFuIDw8IEJpZ0ludChzaXplMykgKiA4biAtIDFuKSAtIDFuO1xuICAgIGVsc2VcbiAgICAgIG1heFZhbHVlID0gMm4gKiogKEJpZ0ludChzaXplMykgKiA4bikgLSAxbjtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWVfID09PSBcIm51bWJlclwiKSB7XG4gICAgbWF4VmFsdWUgPSBCaWdJbnQoTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpO1xuICB9XG4gIGNvbnN0IG1pblZhbHVlID0gdHlwZW9mIG1heFZhbHVlID09PSBcImJpZ2ludFwiICYmIHNpZ25lZCA/IC1tYXhWYWx1ZSAtIDFuIDogMDtcbiAgaWYgKG1heFZhbHVlICYmIHZhbHVlID4gbWF4VmFsdWUgfHwgdmFsdWUgPCBtaW5WYWx1ZSkge1xuICAgIGNvbnN0IHN1ZmZpeCA9IHR5cGVvZiB2YWx1ZV8gPT09IFwiYmlnaW50XCIgPyBcIm5cIiA6IFwiXCI7XG4gICAgdGhyb3cgbmV3IEludGVnZXJPdXRPZlJhbmdlRXJyb3IyKHtcbiAgICAgIG1heDogbWF4VmFsdWUgPyBgJHttYXhWYWx1ZX0ke3N1ZmZpeH1gIDogdm9pZCAwLFxuICAgICAgbWluOiBgJHttaW5WYWx1ZX0ke3N1ZmZpeH1gLFxuICAgICAgc2lnbmVkLFxuICAgICAgc2l6ZTogc2l6ZTMsXG4gICAgICB2YWx1ZTogYCR7dmFsdWVffSR7c3VmZml4fWBcbiAgICB9KTtcbiAgfVxuICBjb25zdCBoZXggPSBgMHgkeyhzaWduZWQgJiYgdmFsdWUgPCAwID8gKDFuIDw8IEJpZ0ludChzaXplMyAqIDgpKSArIEJpZ0ludCh2YWx1ZSkgOiB2YWx1ZSkudG9TdHJpbmcoMTYpfWA7XG4gIGlmIChzaXplMylcbiAgICByZXR1cm4gcGFkMihoZXgsIHsgc2l6ZTogc2l6ZTMgfSk7XG4gIHJldHVybiBoZXg7XG59XG5mdW5jdGlvbiBzdHJpbmdUb0hleCh2YWx1ZV8sIG9wdHMgPSB7fSkge1xuICBjb25zdCB2YWx1ZSA9IGVuY29kZXIuZW5jb2RlKHZhbHVlXyk7XG4gIHJldHVybiBieXRlc1RvSGV4KHZhbHVlLCBvcHRzKTtcbn1cbmZ1bmN0aW9uIHRvQnl0ZXMzKHZhbHVlLCBvcHRzID0ge30pIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwiYmlnaW50XCIpXG4gICAgcmV0dXJuIG51bWJlclRvQnl0ZXModmFsdWUsIG9wdHMpO1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIilcbiAgICByZXR1cm4gYm9vbFRvQnl0ZXModmFsdWUsIG9wdHMpO1xuICBpZiAoaXNIZXgodmFsdWUpKVxuICAgIHJldHVybiBoZXhUb0J5dGVzKHZhbHVlLCBvcHRzKTtcbiAgcmV0dXJuIHN0cmluZ1RvQnl0ZXModmFsdWUsIG9wdHMpO1xufVxuZnVuY3Rpb24gYm9vbFRvQnl0ZXModmFsdWUsIG9wdHMgPSB7fSkge1xuICBjb25zdCBieXRlczIgPSBuZXcgVWludDhBcnJheSgxKTtcbiAgYnl0ZXMyWzBdID0gTnVtYmVyKHZhbHVlKTtcbiAgaWYgKHR5cGVvZiBvcHRzLnNpemUgPT09IFwibnVtYmVyXCIpIHtcbiAgICBhc3NlcnRTaXplMihieXRlczIsIHsgc2l6ZTogb3B0cy5zaXplIH0pO1xuICAgIHJldHVybiBwYWQyKGJ5dGVzMiwgeyBzaXplOiBvcHRzLnNpemUgfSk7XG4gIH1cbiAgcmV0dXJuIGJ5dGVzMjtcbn1cbmZ1bmN0aW9uIGNoYXJDb2RlVG9CYXNlMTYoY2hhcikge1xuICBpZiAoY2hhciA+PSBjaGFyQ29kZU1hcC56ZXJvICYmIGNoYXIgPD0gY2hhckNvZGVNYXAubmluZSlcbiAgICByZXR1cm4gY2hhciAtIGNoYXJDb2RlTWFwLnplcm87XG4gIGlmIChjaGFyID49IGNoYXJDb2RlTWFwLkEgJiYgY2hhciA8PSBjaGFyQ29kZU1hcC5GKVxuICAgIHJldHVybiBjaGFyIC0gKGNoYXJDb2RlTWFwLkEgLSAxMCk7XG4gIGlmIChjaGFyID49IGNoYXJDb2RlTWFwLmEgJiYgY2hhciA8PSBjaGFyQ29kZU1hcC5mKVxuICAgIHJldHVybiBjaGFyIC0gKGNoYXJDb2RlTWFwLmEgLSAxMCk7XG4gIHJldHVybiB2b2lkIDA7XG59XG5mdW5jdGlvbiBoZXhUb0J5dGVzKGhleF8sIG9wdHMgPSB7fSkge1xuICBsZXQgaGV4ID0gaGV4XztcbiAgaWYgKG9wdHMuc2l6ZSkge1xuICAgIGFzc2VydFNpemUyKGhleCwgeyBzaXplOiBvcHRzLnNpemUgfSk7XG4gICAgaGV4ID0gcGFkMihoZXgsIHsgZGlyOiBcInJpZ2h0XCIsIHNpemU6IG9wdHMuc2l6ZSB9KTtcbiAgfVxuICBsZXQgaGV4U3RyaW5nID0gaGV4LnNsaWNlKDIpO1xuICBpZiAoaGV4U3RyaW5nLmxlbmd0aCAlIDIpXG4gICAgaGV4U3RyaW5nID0gYDAke2hleFN0cmluZ31gO1xuICBjb25zdCBsZW5ndGggPSBoZXhTdHJpbmcubGVuZ3RoIC8gMjtcbiAgY29uc3QgYnl0ZXMyID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgZm9yIChsZXQgaW5kZXggPSAwLCBqID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICBjb25zdCBuaWJibGVMZWZ0ID0gY2hhckNvZGVUb0Jhc2UxNihoZXhTdHJpbmcuY2hhckNvZGVBdChqKyspKTtcbiAgICBjb25zdCBuaWJibGVSaWdodCA9IGNoYXJDb2RlVG9CYXNlMTYoaGV4U3RyaW5nLmNoYXJDb2RlQXQoaisrKSk7XG4gICAgaWYgKG5pYmJsZUxlZnQgPT09IHZvaWQgMCB8fCBuaWJibGVSaWdodCA9PT0gdm9pZCAwKSB7XG4gICAgICB0aHJvdyBuZXcgQmFzZUVycm9yMyhgSW52YWxpZCBieXRlIHNlcXVlbmNlIChcIiR7aGV4U3RyaW5nW2ogLSAyXX0ke2hleFN0cmluZ1tqIC0gMV19XCIgaW4gXCIke2hleFN0cmluZ31cIikuYCk7XG4gICAgfVxuICAgIGJ5dGVzMltpbmRleF0gPSBuaWJibGVMZWZ0ICogMTYgKyBuaWJibGVSaWdodDtcbiAgfVxuICByZXR1cm4gYnl0ZXMyO1xufVxuZnVuY3Rpb24gbnVtYmVyVG9CeXRlcyh2YWx1ZSwgb3B0cykge1xuICBjb25zdCBoZXggPSBudW1iZXJUb0hleCh2YWx1ZSwgb3B0cyk7XG4gIHJldHVybiBoZXhUb0J5dGVzKGhleCk7XG59XG5mdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHZhbHVlLCBvcHRzID0ge30pIHtcbiAgY29uc3QgYnl0ZXMyID0gZW5jb2RlcjIuZW5jb2RlKHZhbHVlKTtcbiAgaWYgKHR5cGVvZiBvcHRzLnNpemUgPT09IFwibnVtYmVyXCIpIHtcbiAgICBhc3NlcnRTaXplMihieXRlczIsIHsgc2l6ZTogb3B0cy5zaXplIH0pO1xuICAgIHJldHVybiBwYWQyKGJ5dGVzMiwgeyBkaXI6IFwicmlnaHRcIiwgc2l6ZTogb3B0cy5zaXplIH0pO1xuICB9XG4gIHJldHVybiBieXRlczI7XG59XG5mdW5jdGlvbiBrZWNjYWsyNTYodmFsdWUsIHRvXykge1xuICBjb25zdCB0byA9IHRvXyB8fCBcImhleFwiO1xuICBjb25zdCBieXRlczIgPSBrZWNjYWtfMjU2KGlzSGV4KHZhbHVlLCB7IHN0cmljdDogZmFsc2UgfSkgPyB0b0J5dGVzMyh2YWx1ZSkgOiB2YWx1ZSk7XG4gIGlmICh0byA9PT0gXCJieXRlc1wiKVxuICAgIHJldHVybiBieXRlczI7XG4gIHJldHVybiB0b0hleChieXRlczIpO1xufVxuZnVuY3Rpb24gaGFzaFNpZ25hdHVyZShzaWcpIHtcbiAgcmV0dXJuIGhhc2goc2lnKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNpZ25hdHVyZShzaWduYXR1cmUpIHtcbiAgbGV0IGFjdGl2ZSA9IHRydWU7XG4gIGxldCBjdXJyZW50ID0gXCJcIjtcbiAgbGV0IGxldmVsID0gMDtcbiAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gIGxldCB2YWxpZCA9IGZhbHNlO1xuICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgc2lnbmF0dXJlLmxlbmd0aDsgaTMrKykge1xuICAgIGNvbnN0IGNoYXIgPSBzaWduYXR1cmVbaTNdO1xuICAgIGlmIChbXCIoXCIsIFwiKVwiLCBcIixcIl0uaW5jbHVkZXMoY2hhcikpXG4gICAgICBhY3RpdmUgPSB0cnVlO1xuICAgIGlmIChjaGFyID09PSBcIihcIilcbiAgICAgIGxldmVsKys7XG4gICAgaWYgKGNoYXIgPT09IFwiKVwiKVxuICAgICAgbGV2ZWwtLTtcbiAgICBpZiAoIWFjdGl2ZSlcbiAgICAgIGNvbnRpbnVlO1xuICAgIGlmIChsZXZlbCA9PT0gMCkge1xuICAgICAgaWYgKGNoYXIgPT09IFwiIFwiICYmIFtcImV2ZW50XCIsIFwiZnVuY3Rpb25cIiwgXCJcIl0uaW5jbHVkZXMocmVzdWx0KSlcbiAgICAgICAgcmVzdWx0ID0gXCJcIjtcbiAgICAgIGVsc2Uge1xuICAgICAgICByZXN1bHQgKz0gY2hhcjtcbiAgICAgICAgaWYgKGNoYXIgPT09IFwiKVwiKSB7XG4gICAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGNoYXIgPT09IFwiIFwiKSB7XG4gICAgICBpZiAoc2lnbmF0dXJlW2kzIC0gMV0gIT09IFwiLFwiICYmIGN1cnJlbnQgIT09IFwiLFwiICYmIGN1cnJlbnQgIT09IFwiLChcIikge1xuICAgICAgICBjdXJyZW50ID0gXCJcIjtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcmVzdWx0ICs9IGNoYXI7XG4gICAgY3VycmVudCArPSBjaGFyO1xuICB9XG4gIGlmICghdmFsaWQpXG4gICAgdGhyb3cgbmV3IEJhc2VFcnJvcjMoXCJVbmFibGUgdG8gbm9ybWFsaXplIHNpZ25hdHVyZS5cIik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiB0b1NpZ25hdHVyZUhhc2goZm4pIHtcbiAgcmV0dXJuIGhhc2hTaWduYXR1cmUodG9TaWduYXR1cmUoZm4pKTtcbn1cbmZ1bmN0aW9uIGlzQWRkcmVzcyhhZGRyZXNzLCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgc3RyaWN0ID0gdHJ1ZSB9ID0gb3B0aW9ucyA/PyB7fTtcbiAgY29uc3QgY2FjaGVLZXkgPSBgJHthZGRyZXNzfS4ke3N0cmljdH1gO1xuICBpZiAoaXNBZGRyZXNzQ2FjaGUuaGFzKGNhY2hlS2V5KSlcbiAgICByZXR1cm4gaXNBZGRyZXNzQ2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgY29uc3QgcmVzdWx0ID0gKCgpID0+IHtcbiAgICBpZiAoIWFkZHJlc3NSZWdleC50ZXN0KGFkZHJlc3MpKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChhZGRyZXNzLnRvTG93ZXJDYXNlKCkgPT09IGFkZHJlc3MpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoc3RyaWN0KVxuICAgICAgcmV0dXJuIGNoZWNrc3VtQWRkcmVzcyhhZGRyZXNzKSA9PT0gYWRkcmVzcztcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSkoKTtcbiAgaXNBZGRyZXNzQ2FjaGUuc2V0KGNhY2hlS2V5LCByZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY2hlY2tzdW1BZGRyZXNzKGFkZHJlc3NfLCBjaGFpbklkKSB7XG4gIGlmIChjaGVja3N1bUFkZHJlc3NDYWNoZS5oYXMoYCR7YWRkcmVzc199LiR7Y2hhaW5JZH1gKSlcbiAgICByZXR1cm4gY2hlY2tzdW1BZGRyZXNzQ2FjaGUuZ2V0KGAke2FkZHJlc3NffS4ke2NoYWluSWR9YCk7XG4gIGNvbnN0IGhleEFkZHJlc3MgPSBjaGFpbklkID8gYCR7Y2hhaW5JZH0ke2FkZHJlc3NfLnRvTG93ZXJDYXNlKCl9YCA6IGFkZHJlc3NfLnN1YnN0cmluZygyKS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBoYXNoMiA9IGtlY2NhazI1NihzdHJpbmdUb0J5dGVzKGhleEFkZHJlc3MpLCBcImJ5dGVzXCIpO1xuICBjb25zdCBhZGRyZXNzID0gKGNoYWluSWQgPyBoZXhBZGRyZXNzLnN1YnN0cmluZyhgJHtjaGFpbklkfTB4YC5sZW5ndGgpIDogaGV4QWRkcmVzcykuc3BsaXQoXCJcIik7XG4gIGZvciAobGV0IGkzID0gMDsgaTMgPCA0MDsgaTMgKz0gMikge1xuICAgIGlmIChoYXNoMltpMyA+PiAxXSA+PiA0ID49IDggJiYgYWRkcmVzc1tpM10pIHtcbiAgICAgIGFkZHJlc3NbaTNdID0gYWRkcmVzc1tpM10udG9VcHBlckNhc2UoKTtcbiAgICB9XG4gICAgaWYgKChoYXNoMltpMyA+PiAxXSAmIDE1KSA+PSA4ICYmIGFkZHJlc3NbaTMgKyAxXSkge1xuICAgICAgYWRkcmVzc1tpMyArIDFdID0gYWRkcmVzc1tpMyArIDFdLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHJlc3VsdCA9IGAweCR7YWRkcmVzcy5qb2luKFwiXCIpfWA7XG4gIGNoZWNrc3VtQWRkcmVzc0NhY2hlLnNldChgJHthZGRyZXNzX30uJHtjaGFpbklkfWAsIHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjcmVhdGVDdXJzb3IoYnl0ZXMyLCB7IHJlY3Vyc2l2ZVJlYWRMaW1pdCA9IDgxOTIgfSA9IHt9KSB7XG4gIGNvbnN0IGN1cnNvciA9IE9iamVjdC5jcmVhdGUoc3RhdGljQ3Vyc29yKTtcbiAgY3Vyc29yLmJ5dGVzID0gYnl0ZXMyO1xuICBjdXJzb3IuZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcoYnl0ZXMyLmJ1ZmZlciwgYnl0ZXMyLmJ5dGVPZmZzZXQsIGJ5dGVzMi5ieXRlTGVuZ3RoKTtcbiAgY3Vyc29yLnBvc2l0aW9uUmVhZENvdW50ID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgY3Vyc29yLnJlY3Vyc2l2ZVJlYWRMaW1pdCA9IHJlY3Vyc2l2ZVJlYWRMaW1pdDtcbiAgcmV0dXJuIGN1cnNvcjtcbn1cbmZ1bmN0aW9uIGJ5dGVzVG9CaWdJbnQoYnl0ZXMyLCBvcHRzID0ge30pIHtcbiAgaWYgKHR5cGVvZiBvcHRzLnNpemUgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgYXNzZXJ0U2l6ZTIoYnl0ZXMyLCB7IHNpemU6IG9wdHMuc2l6ZSB9KTtcbiAgY29uc3QgaGV4ID0gYnl0ZXNUb0hleChieXRlczIsIG9wdHMpO1xuICByZXR1cm4gaGV4VG9CaWdJbnQoaGV4LCBvcHRzKTtcbn1cbmZ1bmN0aW9uIGJ5dGVzVG9Cb29sKGJ5dGVzXywgb3B0cyA9IHt9KSB7XG4gIGxldCBieXRlczIgPSBieXRlc187XG4gIGlmICh0eXBlb2Ygb3B0cy5zaXplICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgYXNzZXJ0U2l6ZTIoYnl0ZXMyLCB7IHNpemU6IG9wdHMuc2l6ZSB9KTtcbiAgICBieXRlczIgPSB0cmltMihieXRlczIpO1xuICB9XG4gIGlmIChieXRlczIubGVuZ3RoID4gMSB8fCBieXRlczJbMF0gPiAxKVxuICAgIHRocm93IG5ldyBJbnZhbGlkQnl0ZXNCb29sZWFuRXJyb3IoYnl0ZXMyKTtcbiAgcmV0dXJuIEJvb2xlYW4oYnl0ZXMyWzBdKTtcbn1cbmZ1bmN0aW9uIGJ5dGVzVG9OdW1iZXIoYnl0ZXMyLCBvcHRzID0ge30pIHtcbiAgaWYgKHR5cGVvZiBvcHRzLnNpemUgIT09IFwidW5kZWZpbmVkXCIpXG4gICAgYXNzZXJ0U2l6ZTIoYnl0ZXMyLCB7IHNpemU6IG9wdHMuc2l6ZSB9KTtcbiAgY29uc3QgaGV4ID0gYnl0ZXNUb0hleChieXRlczIsIG9wdHMpO1xuICByZXR1cm4gaGV4VG9OdW1iZXIoaGV4LCBvcHRzKTtcbn1cbmZ1bmN0aW9uIGJ5dGVzVG9TdHJpbmcoYnl0ZXNfLCBvcHRzID0ge30pIHtcbiAgbGV0IGJ5dGVzMiA9IGJ5dGVzXztcbiAgaWYgKHR5cGVvZiBvcHRzLnNpemUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBhc3NlcnRTaXplMihieXRlczIsIHsgc2l6ZTogb3B0cy5zaXplIH0pO1xuICAgIGJ5dGVzMiA9IHRyaW0yKGJ5dGVzMiwgeyBkaXI6IFwicmlnaHRcIiB9KTtcbiAgfVxuICByZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGJ5dGVzMik7XG59XG5mdW5jdGlvbiBjb25jYXQodmFsdWVzNykge1xuICBpZiAodHlwZW9mIHZhbHVlczdbMF0gPT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIGNvbmNhdEhleCh2YWx1ZXM3KTtcbiAgcmV0dXJuIGNvbmNhdEJ5dGVzKHZhbHVlczcpO1xufVxuZnVuY3Rpb24gY29uY2F0Qnl0ZXModmFsdWVzNykge1xuICBsZXQgbGVuZ3RoID0gMDtcbiAgZm9yIChjb25zdCBhcnIgb2YgdmFsdWVzNykge1xuICAgIGxlbmd0aCArPSBhcnIubGVuZ3RoO1xuICB9XG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gIGxldCBvZmZzZXQgPSAwO1xuICBmb3IgKGNvbnN0IGFyciBvZiB2YWx1ZXM3KSB7XG4gICAgcmVzdWx0LnNldChhcnIsIG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IGFyci5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNvbmNhdEhleCh2YWx1ZXM3KSB7XG4gIHJldHVybiBgMHgke3ZhbHVlczcucmVkdWNlKChhY2MsIHgpID0+IGFjYyArIHgucmVwbGFjZShcIjB4XCIsIFwiXCIpLCBcIlwiKX1gO1xufVxuZnVuY3Rpb24gZW5jb2RlQWJpUGFyYW1ldGVycyhwYXJhbXMsIHZhbHVlczcpIHtcbiAgaWYgKHBhcmFtcy5sZW5ndGggIT09IHZhbHVlczcubGVuZ3RoKVxuICAgIHRocm93IG5ldyBBYmlFbmNvZGluZ0xlbmd0aE1pc21hdGNoRXJyb3Ioe1xuICAgICAgZXhwZWN0ZWRMZW5ndGg6IHBhcmFtcy5sZW5ndGgsXG4gICAgICBnaXZlbkxlbmd0aDogdmFsdWVzNy5sZW5ndGhcbiAgICB9KTtcbiAgY29uc3QgcHJlcGFyZWRQYXJhbXMgPSBwcmVwYXJlUGFyYW1zKHtcbiAgICBwYXJhbXMsXG4gICAgdmFsdWVzOiB2YWx1ZXM3XG4gIH0pO1xuICBjb25zdCBkYXRhID0gZW5jb2RlUGFyYW1zKHByZXBhcmVkUGFyYW1zKTtcbiAgaWYgKGRhdGEubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiBcIjB4XCI7XG4gIHJldHVybiBkYXRhO1xufVxuZnVuY3Rpb24gcHJlcGFyZVBhcmFtcyh7IHBhcmFtcywgdmFsdWVzOiB2YWx1ZXM3IH0pIHtcbiAgY29uc3QgcHJlcGFyZWRQYXJhbXMgPSBbXTtcbiAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IHBhcmFtcy5sZW5ndGg7IGkzKyspIHtcbiAgICBwcmVwYXJlZFBhcmFtcy5wdXNoKHByZXBhcmVQYXJhbSh7IHBhcmFtOiBwYXJhbXNbaTNdLCB2YWx1ZTogdmFsdWVzN1tpM10gfSkpO1xuICB9XG4gIHJldHVybiBwcmVwYXJlZFBhcmFtcztcbn1cbmZ1bmN0aW9uIHByZXBhcmVQYXJhbSh7IHBhcmFtLCB2YWx1ZSB9KSB7XG4gIGNvbnN0IGFycmF5Q29tcG9uZW50cyA9IGdldEFycmF5Q29tcG9uZW50cyhwYXJhbS50eXBlKTtcbiAgaWYgKGFycmF5Q29tcG9uZW50cykge1xuICAgIGNvbnN0IFtsZW5ndGgsIHR5cGVdID0gYXJyYXlDb21wb25lbnRzO1xuICAgIHJldHVybiBlbmNvZGVBcnJheSh2YWx1ZSwgeyBsZW5ndGgsIHBhcmFtOiB7IC4uLnBhcmFtLCB0eXBlIH0gfSk7XG4gIH1cbiAgaWYgKHBhcmFtLnR5cGUgPT09IFwidHVwbGVcIikge1xuICAgIHJldHVybiBlbmNvZGVUdXBsZSh2YWx1ZSwge1xuICAgICAgcGFyYW1cbiAgICB9KTtcbiAgfVxuICBpZiAocGFyYW0udHlwZSA9PT0gXCJhZGRyZXNzXCIpIHtcbiAgICByZXR1cm4gZW5jb2RlQWRkcmVzcyh2YWx1ZSk7XG4gIH1cbiAgaWYgKHBhcmFtLnR5cGUgPT09IFwiYm9vbFwiKSB7XG4gICAgcmV0dXJuIGVuY29kZUJvb2wodmFsdWUpO1xuICB9XG4gIGlmIChwYXJhbS50eXBlLnN0YXJ0c1dpdGgoXCJ1aW50XCIpIHx8IHBhcmFtLnR5cGUuc3RhcnRzV2l0aChcImludFwiKSkge1xuICAgIGNvbnN0IHNpZ25lZCA9IHBhcmFtLnR5cGUuc3RhcnRzV2l0aChcImludFwiKTtcbiAgICBjb25zdCBbLCAsIHNpemUzID0gXCIyNTZcIl0gPSBpbnRlZ2VyUmVnZXgyLmV4ZWMocGFyYW0udHlwZSkgPz8gW107XG4gICAgcmV0dXJuIGVuY29kZU51bWJlcih2YWx1ZSwge1xuICAgICAgc2lnbmVkLFxuICAgICAgc2l6ZTogTnVtYmVyKHNpemUzKVxuICAgIH0pO1xuICB9XG4gIGlmIChwYXJhbS50eXBlLnN0YXJ0c1dpdGgoXCJieXRlc1wiKSkge1xuICAgIHJldHVybiBlbmNvZGVCeXRlcyh2YWx1ZSwgeyBwYXJhbSB9KTtcbiAgfVxuICBpZiAocGFyYW0udHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBlbmNvZGVTdHJpbmcodmFsdWUpO1xuICB9XG4gIHRocm93IG5ldyBJbnZhbGlkQWJpRW5jb2RpbmdUeXBlRXJyb3IocGFyYW0udHlwZSwge1xuICAgIGRvY3NQYXRoOiBcIi9kb2NzL2NvbnRyYWN0L2VuY29kZUFiaVBhcmFtZXRlcnNcIlxuICB9KTtcbn1cbmZ1bmN0aW9uIGVuY29kZVBhcmFtcyhwcmVwYXJlZFBhcmFtcykge1xuICBsZXQgc3RhdGljU2l6ZSA9IDA7XG4gIGZvciAobGV0IGkzID0gMDsgaTMgPCBwcmVwYXJlZFBhcmFtcy5sZW5ndGg7IGkzKyspIHtcbiAgICBjb25zdCB7IGR5bmFtaWMsIGVuY29kZWQgfSA9IHByZXBhcmVkUGFyYW1zW2kzXTtcbiAgICBpZiAoZHluYW1pYylcbiAgICAgIHN0YXRpY1NpemUgKz0gMzI7XG4gICAgZWxzZVxuICAgICAgc3RhdGljU2l6ZSArPSBzaXplMihlbmNvZGVkKTtcbiAgfVxuICBjb25zdCBzdGF0aWNQYXJhbXMgPSBbXTtcbiAgY29uc3QgZHluYW1pY1BhcmFtcyA9IFtdO1xuICBsZXQgZHluYW1pY1NpemUgPSAwO1xuICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgcHJlcGFyZWRQYXJhbXMubGVuZ3RoOyBpMysrKSB7XG4gICAgY29uc3QgeyBkeW5hbWljLCBlbmNvZGVkIH0gPSBwcmVwYXJlZFBhcmFtc1tpM107XG4gICAgaWYgKGR5bmFtaWMpIHtcbiAgICAgIHN0YXRpY1BhcmFtcy5wdXNoKG51bWJlclRvSGV4KHN0YXRpY1NpemUgKyBkeW5hbWljU2l6ZSwgeyBzaXplOiAzMiB9KSk7XG4gICAgICBkeW5hbWljUGFyYW1zLnB1c2goZW5jb2RlZCk7XG4gICAgICBkeW5hbWljU2l6ZSArPSBzaXplMihlbmNvZGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGljUGFyYW1zLnB1c2goZW5jb2RlZCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjb25jYXQoWy4uLnN0YXRpY1BhcmFtcywgLi4uZHluYW1pY1BhcmFtc10pO1xufVxuZnVuY3Rpb24gZW5jb2RlQWRkcmVzcyh2YWx1ZSkge1xuICBpZiAoIWlzQWRkcmVzcyh2YWx1ZSkpXG4gICAgdGhyb3cgbmV3IEludmFsaWRBZGRyZXNzRXJyb3IoeyBhZGRyZXNzOiB2YWx1ZSB9KTtcbiAgcmV0dXJuIHsgZHluYW1pYzogZmFsc2UsIGVuY29kZWQ6IHBhZEhleCh2YWx1ZS50b0xvd2VyQ2FzZSgpKSB9O1xufVxuZnVuY3Rpb24gZW5jb2RlQXJyYXkodmFsdWUsIHsgbGVuZ3RoLCBwYXJhbSB9KSB7XG4gIGNvbnN0IGR5bmFtaWMgPSBsZW5ndGggPT09IG51bGw7XG4gIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpXG4gICAgdGhyb3cgbmV3IEludmFsaWRBcnJheUVycm9yKHZhbHVlKTtcbiAgaWYgKCFkeW5hbWljICYmIHZhbHVlLmxlbmd0aCAhPT0gbGVuZ3RoKVxuICAgIHRocm93IG5ldyBBYmlFbmNvZGluZ0FycmF5TGVuZ3RoTWlzbWF0Y2hFcnJvcih7XG4gICAgICBleHBlY3RlZExlbmd0aDogbGVuZ3RoLFxuICAgICAgZ2l2ZW5MZW5ndGg6IHZhbHVlLmxlbmd0aCxcbiAgICAgIHR5cGU6IGAke3BhcmFtLnR5cGV9WyR7bGVuZ3RofV1gXG4gICAgfSk7XG4gIGxldCBkeW5hbWljQ2hpbGQgPSBmYWxzZTtcbiAgY29uc3QgcHJlcGFyZWRQYXJhbXMgPSBbXTtcbiAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IHZhbHVlLmxlbmd0aDsgaTMrKykge1xuICAgIGNvbnN0IHByZXBhcmVkUGFyYW0gPSBwcmVwYXJlUGFyYW0oeyBwYXJhbSwgdmFsdWU6IHZhbHVlW2kzXSB9KTtcbiAgICBpZiAocHJlcGFyZWRQYXJhbS5keW5hbWljKVxuICAgICAgZHluYW1pY0NoaWxkID0gdHJ1ZTtcbiAgICBwcmVwYXJlZFBhcmFtcy5wdXNoKHByZXBhcmVkUGFyYW0pO1xuICB9XG4gIGlmIChkeW5hbWljIHx8IGR5bmFtaWNDaGlsZCkge1xuICAgIGNvbnN0IGRhdGEgPSBlbmNvZGVQYXJhbXMocHJlcGFyZWRQYXJhbXMpO1xuICAgIGlmIChkeW5hbWljKSB7XG4gICAgICBjb25zdCBsZW5ndGgyID0gbnVtYmVyVG9IZXgocHJlcGFyZWRQYXJhbXMubGVuZ3RoLCB7IHNpemU6IDMyIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZHluYW1pYzogdHJ1ZSxcbiAgICAgICAgZW5jb2RlZDogcHJlcGFyZWRQYXJhbXMubGVuZ3RoID4gMCA/IGNvbmNhdChbbGVuZ3RoMiwgZGF0YV0pIDogbGVuZ3RoMlxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGR5bmFtaWNDaGlsZClcbiAgICAgIHJldHVybiB7IGR5bmFtaWM6IHRydWUsIGVuY29kZWQ6IGRhdGEgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGR5bmFtaWM6IGZhbHNlLFxuICAgIGVuY29kZWQ6IGNvbmNhdChwcmVwYXJlZFBhcmFtcy5tYXAoKHsgZW5jb2RlZCB9KSA9PiBlbmNvZGVkKSlcbiAgfTtcbn1cbmZ1bmN0aW9uIGVuY29kZUJ5dGVzKHZhbHVlLCB7IHBhcmFtIH0pIHtcbiAgY29uc3QgWywgcGFyYW1TaXplXSA9IHBhcmFtLnR5cGUuc3BsaXQoXCJieXRlc1wiKTtcbiAgY29uc3QgYnl0ZXNTaXplID0gc2l6ZTIodmFsdWUpO1xuICBpZiAoIXBhcmFtU2l6ZSkge1xuICAgIGxldCB2YWx1ZV8gPSB2YWx1ZTtcbiAgICBpZiAoYnl0ZXNTaXplICUgMzIgIT09IDApXG4gICAgICB2YWx1ZV8gPSBwYWRIZXgodmFsdWVfLCB7XG4gICAgICAgIGRpcjogXCJyaWdodFwiLFxuICAgICAgICBzaXplOiBNYXRoLmNlaWwoKHZhbHVlLmxlbmd0aCAtIDIpIC8gMiAvIDMyKSAqIDMyXG4gICAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgZHluYW1pYzogdHJ1ZSxcbiAgICAgIGVuY29kZWQ6IGNvbmNhdChbcGFkSGV4KG51bWJlclRvSGV4KGJ5dGVzU2l6ZSwgeyBzaXplOiAzMiB9KSksIHZhbHVlX10pXG4gICAgfTtcbiAgfVxuICBpZiAoYnl0ZXNTaXplICE9PSBOdW1iZXIucGFyc2VJbnQocGFyYW1TaXplKSlcbiAgICB0aHJvdyBuZXcgQWJpRW5jb2RpbmdCeXRlc1NpemVNaXNtYXRjaEVycm9yKHtcbiAgICAgIGV4cGVjdGVkU2l6ZTogTnVtYmVyLnBhcnNlSW50KHBhcmFtU2l6ZSksXG4gICAgICB2YWx1ZVxuICAgIH0pO1xuICByZXR1cm4geyBkeW5hbWljOiBmYWxzZSwgZW5jb2RlZDogcGFkSGV4KHZhbHVlLCB7IGRpcjogXCJyaWdodFwiIH0pIH07XG59XG5mdW5jdGlvbiBlbmNvZGVCb29sKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiYm9vbGVhblwiKVxuICAgIHRocm93IG5ldyBCYXNlRXJyb3IzKGBJbnZhbGlkIGJvb2xlYW4gdmFsdWU6IFwiJHt2YWx1ZX1cIiAodHlwZTogJHt0eXBlb2YgdmFsdWV9KS4gRXhwZWN0ZWQ6IFxcYHRydWVcXGAgb3IgXFxgZmFsc2VcXGAuYCk7XG4gIHJldHVybiB7IGR5bmFtaWM6IGZhbHNlLCBlbmNvZGVkOiBwYWRIZXgoYm9vbFRvSGV4KHZhbHVlKSkgfTtcbn1cbmZ1bmN0aW9uIGVuY29kZU51bWJlcih2YWx1ZSwgeyBzaWduZWQsIHNpemU6IHNpemUzID0gMjU2IH0pIHtcbiAgaWYgKHR5cGVvZiBzaXplMyA9PT0gXCJudW1iZXJcIikge1xuICAgIGNvbnN0IG1heCA9IDJuICoqIChCaWdJbnQoc2l6ZTMpIC0gKHNpZ25lZCA/IDFuIDogMG4pKSAtIDFuO1xuICAgIGNvbnN0IG1pbiA9IHNpZ25lZCA/IC1tYXggLSAxbiA6IDBuO1xuICAgIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbilcbiAgICAgIHRocm93IG5ldyBJbnRlZ2VyT3V0T2ZSYW5nZUVycm9yMih7XG4gICAgICAgIG1heDogbWF4LnRvU3RyaW5nKCksXG4gICAgICAgIG1pbjogbWluLnRvU3RyaW5nKCksXG4gICAgICAgIHNpZ25lZCxcbiAgICAgICAgc2l6ZTogc2l6ZTMgLyA4LFxuICAgICAgICB2YWx1ZTogdmFsdWUudG9TdHJpbmcoKVxuICAgICAgfSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBkeW5hbWljOiBmYWxzZSxcbiAgICBlbmNvZGVkOiBudW1iZXJUb0hleCh2YWx1ZSwge1xuICAgICAgc2l6ZTogMzIsXG4gICAgICBzaWduZWRcbiAgICB9KVxuICB9O1xufVxuZnVuY3Rpb24gZW5jb2RlU3RyaW5nKHZhbHVlKSB7XG4gIGNvbnN0IGhleFZhbHVlID0gc3RyaW5nVG9IZXgodmFsdWUpO1xuICBjb25zdCBwYXJ0c0xlbmd0aCA9IE1hdGguY2VpbChzaXplMihoZXhWYWx1ZSkgLyAzMik7XG4gIGNvbnN0IHBhcnRzID0gW107XG4gIGZvciAobGV0IGkzID0gMDsgaTMgPCBwYXJ0c0xlbmd0aDsgaTMrKykge1xuICAgIHBhcnRzLnB1c2gocGFkSGV4KHNsaWNlKGhleFZhbHVlLCBpMyAqIDMyLCAoaTMgKyAxKSAqIDMyKSwge1xuICAgICAgZGlyOiBcInJpZ2h0XCJcbiAgICB9KSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBkeW5hbWljOiB0cnVlLFxuICAgIGVuY29kZWQ6IGNvbmNhdChbXG4gICAgICBwYWRIZXgobnVtYmVyVG9IZXgoc2l6ZTIoaGV4VmFsdWUpLCB7IHNpemU6IDMyIH0pKSxcbiAgICAgIC4uLnBhcnRzXG4gICAgXSlcbiAgfTtcbn1cbmZ1bmN0aW9uIGVuY29kZVR1cGxlKHZhbHVlLCB7IHBhcmFtIH0pIHtcbiAgbGV0IGR5bmFtaWMgPSBmYWxzZTtcbiAgY29uc3QgcHJlcGFyZWRQYXJhbXMgPSBbXTtcbiAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IHBhcmFtLmNvbXBvbmVudHMubGVuZ3RoOyBpMysrKSB7XG4gICAgY29uc3QgcGFyYW1fID0gcGFyYW0uY29tcG9uZW50c1tpM107XG4gICAgY29uc3QgaW5kZXggPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IGkzIDogcGFyYW1fLm5hbWU7XG4gICAgY29uc3QgcHJlcGFyZWRQYXJhbSA9IHByZXBhcmVQYXJhbSh7XG4gICAgICBwYXJhbTogcGFyYW1fLFxuICAgICAgdmFsdWU6IHZhbHVlW2luZGV4XVxuICAgIH0pO1xuICAgIHByZXBhcmVkUGFyYW1zLnB1c2gocHJlcGFyZWRQYXJhbSk7XG4gICAgaWYgKHByZXBhcmVkUGFyYW0uZHluYW1pYylcbiAgICAgIGR5bmFtaWMgPSB0cnVlO1xuICB9XG4gIHJldHVybiB7XG4gICAgZHluYW1pYyxcbiAgICBlbmNvZGVkOiBkeW5hbWljID8gZW5jb2RlUGFyYW1zKHByZXBhcmVkUGFyYW1zKSA6IGNvbmNhdChwcmVwYXJlZFBhcmFtcy5tYXAoKHsgZW5jb2RlZCB9KSA9PiBlbmNvZGVkKSlcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEFycmF5Q29tcG9uZW50cyh0eXBlKSB7XG4gIGNvbnN0IG1hdGNoZXMyID0gdHlwZS5tYXRjaCgvXiguKilcXFsoXFxkKyk/XFxdJC8pO1xuICByZXR1cm4gbWF0Y2hlczIgPyAoXG4gICAgLyogUmV0dXJuIGBudWxsYCBpZiB0aGUgYXJyYXkgaXMgZHluYW1pYy4qL1xuICAgIFttYXRjaGVzMlsyXSA/IE51bWJlcihtYXRjaGVzMlsyXSkgOiBudWxsLCBtYXRjaGVzMlsxXV1cbiAgKSA6IHZvaWQgMDtcbn1cbmZ1bmN0aW9uIGRlY29kZUFiaVBhcmFtZXRlcnMocGFyYW1zLCBkYXRhKSB7XG4gIGNvbnN0IGJ5dGVzMiA9IHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiID8gaGV4VG9CeXRlcyhkYXRhKSA6IGRhdGE7XG4gIGNvbnN0IGN1cnNvciA9IGNyZWF0ZUN1cnNvcihieXRlczIpO1xuICBpZiAoc2l6ZTIoYnl0ZXMyKSA9PT0gMCAmJiBwYXJhbXMubGVuZ3RoID4gMClcbiAgICB0aHJvdyBuZXcgQWJpRGVjb2RpbmdaZXJvRGF0YUVycm9yKCk7XG4gIGlmIChzaXplMihkYXRhKSAmJiBzaXplMihkYXRhKSA8IDMyKVxuICAgIHRocm93IG5ldyBBYmlEZWNvZGluZ0RhdGFTaXplVG9vU21hbGxFcnJvcih7XG4gICAgICBkYXRhOiB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiA/IGRhdGEgOiBieXRlc1RvSGV4KGRhdGEpLFxuICAgICAgcGFyYW1zLFxuICAgICAgc2l6ZTogc2l6ZTIoZGF0YSlcbiAgICB9KTtcbiAgbGV0IGNvbnN1bWVkID0gMDtcbiAgY29uc3QgdmFsdWVzNyA9IFtdO1xuICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgcGFyYW1zLmxlbmd0aDsgKytpMykge1xuICAgIGNvbnN0IHBhcmFtID0gcGFyYW1zW2kzXTtcbiAgICBjdXJzb3Iuc2V0UG9zaXRpb24oY29uc3VtZWQpO1xuICAgIGNvbnN0IFtkYXRhMiwgY29uc3VtZWRfXSA9IGRlY29kZVBhcmFtZXRlcihjdXJzb3IsIHBhcmFtLCB7XG4gICAgICBzdGF0aWNQb3NpdGlvbjogMFxuICAgIH0pO1xuICAgIGNvbnN1bWVkICs9IGNvbnN1bWVkXztcbiAgICB2YWx1ZXM3LnB1c2goZGF0YTIpO1xuICB9XG4gIHJldHVybiB2YWx1ZXM3O1xufVxuZnVuY3Rpb24gZGVjb2RlUGFyYW1ldGVyKGN1cnNvciwgcGFyYW0sIHsgc3RhdGljUG9zaXRpb24gfSkge1xuICBjb25zdCBhcnJheUNvbXBvbmVudHMgPSBnZXRBcnJheUNvbXBvbmVudHMocGFyYW0udHlwZSk7XG4gIGlmIChhcnJheUNvbXBvbmVudHMpIHtcbiAgICBjb25zdCBbbGVuZ3RoLCB0eXBlXSA9IGFycmF5Q29tcG9uZW50cztcbiAgICByZXR1cm4gZGVjb2RlQXJyYXkoY3Vyc29yLCB7IC4uLnBhcmFtLCB0eXBlIH0sIHsgbGVuZ3RoLCBzdGF0aWNQb3NpdGlvbiB9KTtcbiAgfVxuICBpZiAocGFyYW0udHlwZSA9PT0gXCJ0dXBsZVwiKVxuICAgIHJldHVybiBkZWNvZGVUdXBsZShjdXJzb3IsIHBhcmFtLCB7IHN0YXRpY1Bvc2l0aW9uIH0pO1xuICBpZiAocGFyYW0udHlwZSA9PT0gXCJhZGRyZXNzXCIpXG4gICAgcmV0dXJuIGRlY29kZUFkZHJlc3MoY3Vyc29yKTtcbiAgaWYgKHBhcmFtLnR5cGUgPT09IFwiYm9vbFwiKVxuICAgIHJldHVybiBkZWNvZGVCb29sKGN1cnNvcik7XG4gIGlmIChwYXJhbS50eXBlLnN0YXJ0c1dpdGgoXCJieXRlc1wiKSlcbiAgICByZXR1cm4gZGVjb2RlQnl0ZXMoY3Vyc29yLCBwYXJhbSwgeyBzdGF0aWNQb3NpdGlvbiB9KTtcbiAgaWYgKHBhcmFtLnR5cGUuc3RhcnRzV2l0aChcInVpbnRcIikgfHwgcGFyYW0udHlwZS5zdGFydHNXaXRoKFwiaW50XCIpKVxuICAgIHJldHVybiBkZWNvZGVOdW1iZXIoY3Vyc29yLCBwYXJhbSk7XG4gIGlmIChwYXJhbS50eXBlID09PSBcInN0cmluZ1wiKVxuICAgIHJldHVybiBkZWNvZGVTdHJpbmcoY3Vyc29yLCB7IHN0YXRpY1Bvc2l0aW9uIH0pO1xuICB0aHJvdyBuZXcgSW52YWxpZEFiaURlY29kaW5nVHlwZUVycm9yKHBhcmFtLnR5cGUsIHtcbiAgICBkb2NzUGF0aDogXCIvZG9jcy9jb250cmFjdC9kZWNvZGVBYmlQYXJhbWV0ZXJzXCJcbiAgfSk7XG59XG5mdW5jdGlvbiBkZWNvZGVBZGRyZXNzKGN1cnNvcikge1xuICBjb25zdCB2YWx1ZSA9IGN1cnNvci5yZWFkQnl0ZXMoMzIpO1xuICByZXR1cm4gW2NoZWNrc3VtQWRkcmVzcyhieXRlc1RvSGV4KHNsaWNlQnl0ZXModmFsdWUsIC0yMCkpKSwgMzJdO1xufVxuZnVuY3Rpb24gZGVjb2RlQXJyYXkoY3Vyc29yLCBwYXJhbSwgeyBsZW5ndGgsIHN0YXRpY1Bvc2l0aW9uIH0pIHtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBjb25zdCBvZmZzZXQgPSBieXRlc1RvTnVtYmVyKGN1cnNvci5yZWFkQnl0ZXMoc2l6ZU9mT2Zmc2V0KSk7XG4gICAgY29uc3Qgc3RhcnQyID0gc3RhdGljUG9zaXRpb24gKyBvZmZzZXQ7XG4gICAgY29uc3Qgc3RhcnRPZkRhdGEgPSBzdGFydDIgKyBzaXplT2ZMZW5ndGg7XG4gICAgY3Vyc29yLnNldFBvc2l0aW9uKHN0YXJ0Mik7XG4gICAgY29uc3QgbGVuZ3RoMiA9IGJ5dGVzVG9OdW1iZXIoY3Vyc29yLnJlYWRCeXRlcyhzaXplT2ZMZW5ndGgpKTtcbiAgICBjb25zdCBkeW5hbWljQ2hpbGQgPSBoYXNEeW5hbWljQ2hpbGQocGFyYW0pO1xuICAgIGxldCBjb25zdW1lZDIgPSAwO1xuICAgIGNvbnN0IHZhbHVlMiA9IFtdO1xuICAgIGZvciAobGV0IGkzID0gMDsgaTMgPCBsZW5ndGgyOyArK2kzKSB7XG4gICAgICBjdXJzb3Iuc2V0UG9zaXRpb24oc3RhcnRPZkRhdGEgKyAoZHluYW1pY0NoaWxkID8gaTMgKiAzMiA6IGNvbnN1bWVkMikpO1xuICAgICAgY29uc3QgW2RhdGEsIGNvbnN1bWVkX10gPSBkZWNvZGVQYXJhbWV0ZXIoY3Vyc29yLCBwYXJhbSwge1xuICAgICAgICBzdGF0aWNQb3NpdGlvbjogc3RhcnRPZkRhdGFcbiAgICAgIH0pO1xuICAgICAgY29uc3VtZWQyICs9IGNvbnN1bWVkXztcbiAgICAgIHZhbHVlMi5wdXNoKGRhdGEpO1xuICAgIH1cbiAgICBjdXJzb3Iuc2V0UG9zaXRpb24oc3RhdGljUG9zaXRpb24gKyAzMik7XG4gICAgcmV0dXJuIFt2YWx1ZTIsIDMyXTtcbiAgfVxuICBpZiAoaGFzRHluYW1pY0NoaWxkKHBhcmFtKSkge1xuICAgIGNvbnN0IG9mZnNldCA9IGJ5dGVzVG9OdW1iZXIoY3Vyc29yLnJlYWRCeXRlcyhzaXplT2ZPZmZzZXQpKTtcbiAgICBjb25zdCBzdGFydDIgPSBzdGF0aWNQb3NpdGlvbiArIG9mZnNldDtcbiAgICBjb25zdCB2YWx1ZTIgPSBbXTtcbiAgICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgbGVuZ3RoOyArK2kzKSB7XG4gICAgICBjdXJzb3Iuc2V0UG9zaXRpb24oc3RhcnQyICsgaTMgKiAzMik7XG4gICAgICBjb25zdCBbZGF0YV0gPSBkZWNvZGVQYXJhbWV0ZXIoY3Vyc29yLCBwYXJhbSwge1xuICAgICAgICBzdGF0aWNQb3NpdGlvbjogc3RhcnQyXG4gICAgICB9KTtcbiAgICAgIHZhbHVlMi5wdXNoKGRhdGEpO1xuICAgIH1cbiAgICBjdXJzb3Iuc2V0UG9zaXRpb24oc3RhdGljUG9zaXRpb24gKyAzMik7XG4gICAgcmV0dXJuIFt2YWx1ZTIsIDMyXTtcbiAgfVxuICBsZXQgY29uc3VtZWQgPSAwO1xuICBjb25zdCB2YWx1ZSA9IFtdO1xuICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgbGVuZ3RoOyArK2kzKSB7XG4gICAgY29uc3QgW2RhdGEsIGNvbnN1bWVkX10gPSBkZWNvZGVQYXJhbWV0ZXIoY3Vyc29yLCBwYXJhbSwge1xuICAgICAgc3RhdGljUG9zaXRpb246IHN0YXRpY1Bvc2l0aW9uICsgY29uc3VtZWRcbiAgICB9KTtcbiAgICBjb25zdW1lZCArPSBjb25zdW1lZF87XG4gICAgdmFsdWUucHVzaChkYXRhKTtcbiAgfVxuICByZXR1cm4gW3ZhbHVlLCBjb25zdW1lZF07XG59XG5mdW5jdGlvbiBkZWNvZGVCb29sKGN1cnNvcikge1xuICByZXR1cm4gW2J5dGVzVG9Cb29sKGN1cnNvci5yZWFkQnl0ZXMoMzIpLCB7IHNpemU6IDMyIH0pLCAzMl07XG59XG5mdW5jdGlvbiBkZWNvZGVCeXRlcyhjdXJzb3IsIHBhcmFtLCB7IHN0YXRpY1Bvc2l0aW9uIH0pIHtcbiAgY29uc3QgW18sIHNpemUzXSA9IHBhcmFtLnR5cGUuc3BsaXQoXCJieXRlc1wiKTtcbiAgaWYgKCFzaXplMykge1xuICAgIGNvbnN0IG9mZnNldCA9IGJ5dGVzVG9OdW1iZXIoY3Vyc29yLnJlYWRCeXRlcygzMikpO1xuICAgIGN1cnNvci5zZXRQb3NpdGlvbihzdGF0aWNQb3NpdGlvbiArIG9mZnNldCk7XG4gICAgY29uc3QgbGVuZ3RoID0gYnl0ZXNUb051bWJlcihjdXJzb3IucmVhZEJ5dGVzKDMyKSk7XG4gICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgY3Vyc29yLnNldFBvc2l0aW9uKHN0YXRpY1Bvc2l0aW9uICsgMzIpO1xuICAgICAgcmV0dXJuIFtcIjB4XCIsIDMyXTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGN1cnNvci5yZWFkQnl0ZXMobGVuZ3RoKTtcbiAgICBjdXJzb3Iuc2V0UG9zaXRpb24oc3RhdGljUG9zaXRpb24gKyAzMik7XG4gICAgcmV0dXJuIFtieXRlc1RvSGV4KGRhdGEpLCAzMl07XG4gIH1cbiAgY29uc3QgdmFsdWUgPSBieXRlc1RvSGV4KGN1cnNvci5yZWFkQnl0ZXMoTnVtYmVyLnBhcnNlSW50KHNpemUzKSwgMzIpKTtcbiAgcmV0dXJuIFt2YWx1ZSwgMzJdO1xufVxuZnVuY3Rpb24gZGVjb2RlTnVtYmVyKGN1cnNvciwgcGFyYW0pIHtcbiAgY29uc3Qgc2lnbmVkID0gcGFyYW0udHlwZS5zdGFydHNXaXRoKFwiaW50XCIpO1xuICBjb25zdCBzaXplMyA9IE51bWJlci5wYXJzZUludChwYXJhbS50eXBlLnNwbGl0KFwiaW50XCIpWzFdIHx8IFwiMjU2XCIpO1xuICBjb25zdCB2YWx1ZSA9IGN1cnNvci5yZWFkQnl0ZXMoMzIpO1xuICByZXR1cm4gW1xuICAgIHNpemUzID4gNDggPyBieXRlc1RvQmlnSW50KHZhbHVlLCB7IHNpZ25lZCB9KSA6IGJ5dGVzVG9OdW1iZXIodmFsdWUsIHsgc2lnbmVkIH0pLFxuICAgIDMyXG4gIF07XG59XG5mdW5jdGlvbiBkZWNvZGVUdXBsZShjdXJzb3IsIHBhcmFtLCB7IHN0YXRpY1Bvc2l0aW9uIH0pIHtcbiAgY29uc3QgaGFzVW5uYW1lZENoaWxkID0gcGFyYW0uY29tcG9uZW50cy5sZW5ndGggPT09IDAgfHwgcGFyYW0uY29tcG9uZW50cy5zb21lKCh7IG5hbWUgfSkgPT4gIW5hbWUpO1xuICBjb25zdCB2YWx1ZSA9IGhhc1VubmFtZWRDaGlsZCA/IFtdIDoge307XG4gIGxldCBjb25zdW1lZCA9IDA7XG4gIGlmIChoYXNEeW5hbWljQ2hpbGQocGFyYW0pKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gYnl0ZXNUb051bWJlcihjdXJzb3IucmVhZEJ5dGVzKHNpemVPZk9mZnNldCkpO1xuICAgIGNvbnN0IHN0YXJ0MiA9IHN0YXRpY1Bvc2l0aW9uICsgb2Zmc2V0O1xuICAgIGZvciAobGV0IGkzID0gMDsgaTMgPCBwYXJhbS5jb21wb25lbnRzLmxlbmd0aDsgKytpMykge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gcGFyYW0uY29tcG9uZW50c1tpM107XG4gICAgICBjdXJzb3Iuc2V0UG9zaXRpb24oc3RhcnQyICsgY29uc3VtZWQpO1xuICAgICAgY29uc3QgW2RhdGEsIGNvbnN1bWVkX10gPSBkZWNvZGVQYXJhbWV0ZXIoY3Vyc29yLCBjb21wb25lbnQsIHtcbiAgICAgICAgc3RhdGljUG9zaXRpb246IHN0YXJ0MlxuICAgICAgfSk7XG4gICAgICBjb25zdW1lZCArPSBjb25zdW1lZF87XG4gICAgICB2YWx1ZVtoYXNVbm5hbWVkQ2hpbGQgPyBpMyA6IGNvbXBvbmVudD8ubmFtZV0gPSBkYXRhO1xuICAgIH1cbiAgICBjdXJzb3Iuc2V0UG9zaXRpb24oc3RhdGljUG9zaXRpb24gKyAzMik7XG4gICAgcmV0dXJuIFt2YWx1ZSwgMzJdO1xuICB9XG4gIGZvciAobGV0IGkzID0gMDsgaTMgPCBwYXJhbS5jb21wb25lbnRzLmxlbmd0aDsgKytpMykge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IHBhcmFtLmNvbXBvbmVudHNbaTNdO1xuICAgIGNvbnN0IFtkYXRhLCBjb25zdW1lZF9dID0gZGVjb2RlUGFyYW1ldGVyKGN1cnNvciwgY29tcG9uZW50LCB7XG4gICAgICBzdGF0aWNQb3NpdGlvblxuICAgIH0pO1xuICAgIHZhbHVlW2hhc1VubmFtZWRDaGlsZCA/IGkzIDogY29tcG9uZW50Py5uYW1lXSA9IGRhdGE7XG4gICAgY29uc3VtZWQgKz0gY29uc3VtZWRfO1xuICB9XG4gIHJldHVybiBbdmFsdWUsIGNvbnN1bWVkXTtcbn1cbmZ1bmN0aW9uIGRlY29kZVN0cmluZyhjdXJzb3IsIHsgc3RhdGljUG9zaXRpb24gfSkge1xuICBjb25zdCBvZmZzZXQgPSBieXRlc1RvTnVtYmVyKGN1cnNvci5yZWFkQnl0ZXMoMzIpKTtcbiAgY29uc3Qgc3RhcnQyID0gc3RhdGljUG9zaXRpb24gKyBvZmZzZXQ7XG4gIGN1cnNvci5zZXRQb3NpdGlvbihzdGFydDIpO1xuICBjb25zdCBsZW5ndGggPSBieXRlc1RvTnVtYmVyKGN1cnNvci5yZWFkQnl0ZXMoMzIpKTtcbiAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgIGN1cnNvci5zZXRQb3NpdGlvbihzdGF0aWNQb3NpdGlvbiArIDMyKTtcbiAgICByZXR1cm4gW1wiXCIsIDMyXTtcbiAgfVxuICBjb25zdCBkYXRhID0gY3Vyc29yLnJlYWRCeXRlcyhsZW5ndGgsIDMyKTtcbiAgY29uc3QgdmFsdWUgPSBieXRlc1RvU3RyaW5nKHRyaW0yKGRhdGEpKTtcbiAgY3Vyc29yLnNldFBvc2l0aW9uKHN0YXRpY1Bvc2l0aW9uICsgMzIpO1xuICByZXR1cm4gW3ZhbHVlLCAzMl07XG59XG5mdW5jdGlvbiBoYXNEeW5hbWljQ2hpbGQocGFyYW0pIHtcbiAgY29uc3QgeyB0eXBlIH0gPSBwYXJhbTtcbiAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIHRydWU7XG4gIGlmICh0eXBlID09PSBcImJ5dGVzXCIpXG4gICAgcmV0dXJuIHRydWU7XG4gIGlmICh0eXBlLmVuZHNXaXRoKFwiW11cIikpXG4gICAgcmV0dXJuIHRydWU7XG4gIGlmICh0eXBlID09PSBcInR1cGxlXCIpXG4gICAgcmV0dXJuIHBhcmFtLmNvbXBvbmVudHM/LnNvbWUoaGFzRHluYW1pY0NoaWxkKTtcbiAgY29uc3QgYXJyYXlDb21wb25lbnRzID0gZ2V0QXJyYXlDb21wb25lbnRzKHBhcmFtLnR5cGUpO1xuICBpZiAoYXJyYXlDb21wb25lbnRzICYmIGhhc0R5bmFtaWNDaGlsZCh7IC4uLnBhcmFtLCB0eXBlOiBhcnJheUNvbXBvbmVudHNbMV0gfSkpXG4gICAgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGdldEFiaUl0ZW0ocGFyYW1ldGVycykge1xuICBjb25zdCB7IGFiaSwgYXJncyA9IFtdLCBuYW1lIH0gPSBwYXJhbWV0ZXJzO1xuICBjb25zdCBpc1NlbGVjdG9yID0gaXNIZXgobmFtZSwgeyBzdHJpY3Q6IGZhbHNlIH0pO1xuICBjb25zdCBhYmlJdGVtcyA9IGFiaS5maWx0ZXIoKGFiaUl0ZW0pID0+IHtcbiAgICBpZiAoaXNTZWxlY3Rvcikge1xuICAgICAgaWYgKGFiaUl0ZW0udHlwZSA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICByZXR1cm4gdG9GdW5jdGlvblNlbGVjdG9yKGFiaUl0ZW0pID09PSBuYW1lO1xuICAgICAgaWYgKGFiaUl0ZW0udHlwZSA9PT0gXCJldmVudFwiKVxuICAgICAgICByZXR1cm4gdG9FdmVudFNlbGVjdG9yKGFiaUl0ZW0pID09PSBuYW1lO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gXCJuYW1lXCIgaW4gYWJpSXRlbSAmJiBhYmlJdGVtLm5hbWUgPT09IG5hbWU7XG4gIH0pO1xuICBpZiAoYWJpSXRlbXMubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiB2b2lkIDA7XG4gIGlmIChhYmlJdGVtcy5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuIGFiaUl0ZW1zWzBdO1xuICBsZXQgbWF0Y2hlZEFiaUl0ZW0gPSB2b2lkIDA7XG4gIGZvciAoY29uc3QgYWJpSXRlbSBvZiBhYmlJdGVtcykge1xuICAgIGlmICghKFwiaW5wdXRzXCIgaW4gYWJpSXRlbSkpXG4gICAgICBjb250aW51ZTtcbiAgICBpZiAoIWFyZ3MgfHwgYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgIGlmICghYWJpSXRlbS5pbnB1dHMgfHwgYWJpSXRlbS5pbnB1dHMubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gYWJpSXRlbTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoIWFiaUl0ZW0uaW5wdXRzKVxuICAgICAgY29udGludWU7XG4gICAgaWYgKGFiaUl0ZW0uaW5wdXRzLmxlbmd0aCA9PT0gMClcbiAgICAgIGNvbnRpbnVlO1xuICAgIGlmIChhYmlJdGVtLmlucHV0cy5sZW5ndGggIT09IGFyZ3MubGVuZ3RoKVxuICAgICAgY29udGludWU7XG4gICAgY29uc3QgbWF0Y2hlZCA9IGFyZ3MuZXZlcnkoKGFyZywgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IGFiaVBhcmFtZXRlciA9IFwiaW5wdXRzXCIgaW4gYWJpSXRlbSAmJiBhYmlJdGVtLmlucHV0c1tpbmRleF07XG4gICAgICBpZiAoIWFiaVBhcmFtZXRlcilcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIGlzQXJnT2ZUeXBlKGFyZywgYWJpUGFyYW1ldGVyKTtcbiAgICB9KTtcbiAgICBpZiAobWF0Y2hlZCkge1xuICAgICAgaWYgKG1hdGNoZWRBYmlJdGVtICYmIFwiaW5wdXRzXCIgaW4gbWF0Y2hlZEFiaUl0ZW0gJiYgbWF0Y2hlZEFiaUl0ZW0uaW5wdXRzKSB7XG4gICAgICAgIGNvbnN0IGFtYmlndW91c1R5cGVzID0gZ2V0QW1iaWd1b3VzVHlwZXMoYWJpSXRlbS5pbnB1dHMsIG1hdGNoZWRBYmlJdGVtLmlucHV0cywgYXJncyk7XG4gICAgICAgIGlmIChhbWJpZ3VvdXNUeXBlcylcbiAgICAgICAgICB0aHJvdyBuZXcgQWJpSXRlbUFtYmlndWl0eUVycm9yKHtcbiAgICAgICAgICAgIGFiaUl0ZW0sXG4gICAgICAgICAgICB0eXBlOiBhbWJpZ3VvdXNUeXBlc1swXVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGFiaUl0ZW06IG1hdGNoZWRBYmlJdGVtLFxuICAgICAgICAgICAgdHlwZTogYW1iaWd1b3VzVHlwZXNbMV1cbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIG1hdGNoZWRBYmlJdGVtID0gYWJpSXRlbTtcbiAgICB9XG4gIH1cbiAgaWYgKG1hdGNoZWRBYmlJdGVtKVxuICAgIHJldHVybiBtYXRjaGVkQWJpSXRlbTtcbiAgcmV0dXJuIGFiaUl0ZW1zWzBdO1xufVxuZnVuY3Rpb24gaXNBcmdPZlR5cGUoYXJnLCBhYmlQYXJhbWV0ZXIpIHtcbiAgY29uc3QgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG4gIGNvbnN0IGFiaVBhcmFtZXRlclR5cGUgPSBhYmlQYXJhbWV0ZXIudHlwZTtcbiAgc3dpdGNoIChhYmlQYXJhbWV0ZXJUeXBlKSB7XG4gICAgY2FzZSBcImFkZHJlc3NcIjpcbiAgICAgIHJldHVybiBpc0FkZHJlc3MoYXJnLCB7IHN0cmljdDogZmFsc2UgfSk7XG4gICAgY2FzZSBcImJvb2xcIjpcbiAgICAgIHJldHVybiBhcmdUeXBlID09PSBcImJvb2xlYW5cIjtcbiAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgIHJldHVybiBhcmdUeXBlID09PSBcInN0cmluZ1wiO1xuICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgIHJldHVybiBhcmdUeXBlID09PSBcInN0cmluZ1wiO1xuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGlmIChhYmlQYXJhbWV0ZXJUeXBlID09PSBcInR1cGxlXCIgJiYgXCJjb21wb25lbnRzXCIgaW4gYWJpUGFyYW1ldGVyKVxuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhhYmlQYXJhbWV0ZXIuY29tcG9uZW50cykuZXZlcnkoKGNvbXBvbmVudCwgaW5kZXgpID0+IHtcbiAgICAgICAgICByZXR1cm4gaXNBcmdPZlR5cGUoT2JqZWN0LnZhbHVlcyhhcmcpW2luZGV4XSwgY29tcG9uZW50KTtcbiAgICAgICAgfSk7XG4gICAgICBpZiAoL151P2ludCg4fDE2fDI0fDMyfDQwfDQ4fDU2fDY0fDcyfDgwfDg4fDk2fDEwNHwxMTJ8MTIwfDEyOHwxMzZ8MTQ0fDE1MnwxNjB8MTY4fDE3NnwxODR8MTkyfDIwMHwyMDh8MjE2fDIyNHwyMzJ8MjQwfDI0OHwyNTYpPyQvLnRlc3QoYWJpUGFyYW1ldGVyVHlwZSkpXG4gICAgICAgIHJldHVybiBhcmdUeXBlID09PSBcIm51bWJlclwiIHx8IGFyZ1R5cGUgPT09IFwiYmlnaW50XCI7XG4gICAgICBpZiAoL15ieXRlcyhbMS05XXwxWzAtOV18MlswLTldfDNbMC0yXSk/JC8udGVzdChhYmlQYXJhbWV0ZXJUeXBlKSlcbiAgICAgICAgcmV0dXJuIGFyZ1R5cGUgPT09IFwic3RyaW5nXCIgfHwgYXJnIGluc3RhbmNlb2YgVWludDhBcnJheTtcbiAgICAgIGlmICgvW2Etel0rWzEtOV17MCwzfShcXFtbMC05XXswLH1cXF0pKyQvLnRlc3QoYWJpUGFyYW1ldGVyVHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKSAmJiBhcmcuZXZlcnkoKHgpID0+IGlzQXJnT2ZUeXBlKHgsIHtcbiAgICAgICAgICAuLi5hYmlQYXJhbWV0ZXIsXG4gICAgICAgICAgLyogUG9wIG9mZiBgW11gIG9yIGBbTV1gIGZyb20gZW5kIG9mIHR5cGUqL1xuICAgICAgICAgIHR5cGU6IGFiaVBhcmFtZXRlclR5cGUucmVwbGFjZSgvKFxcW1swLTldezAsfVxcXSkkLywgXCJcIilcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2V0QW1iaWd1b3VzVHlwZXMoc291cmNlUGFyYW1ldGVycywgdGFyZ2V0UGFyYW1ldGVycywgYXJncykge1xuICBmb3IgKGNvbnN0IHBhcmFtZXRlckluZGV4IGluIHNvdXJjZVBhcmFtZXRlcnMpIHtcbiAgICBjb25zdCBzb3VyY2VQYXJhbWV0ZXIgPSBzb3VyY2VQYXJhbWV0ZXJzW3BhcmFtZXRlckluZGV4XTtcbiAgICBjb25zdCB0YXJnZXRQYXJhbWV0ZXIgPSB0YXJnZXRQYXJhbWV0ZXJzW3BhcmFtZXRlckluZGV4XTtcbiAgICBpZiAoc291cmNlUGFyYW1ldGVyLnR5cGUgPT09IFwidHVwbGVcIiAmJiB0YXJnZXRQYXJhbWV0ZXIudHlwZSA9PT0gXCJ0dXBsZVwiICYmIFwiY29tcG9uZW50c1wiIGluIHNvdXJjZVBhcmFtZXRlciAmJiBcImNvbXBvbmVudHNcIiBpbiB0YXJnZXRQYXJhbWV0ZXIpXG4gICAgICByZXR1cm4gZ2V0QW1iaWd1b3VzVHlwZXMoc291cmNlUGFyYW1ldGVyLmNvbXBvbmVudHMsIHRhcmdldFBhcmFtZXRlci5jb21wb25lbnRzLCBhcmdzW3BhcmFtZXRlckluZGV4XSk7XG4gICAgY29uc3QgdHlwZXMgPSBbc291cmNlUGFyYW1ldGVyLnR5cGUsIHRhcmdldFBhcmFtZXRlci50eXBlXTtcbiAgICBjb25zdCBhbWJpZ3VvdXMgPSAoKCkgPT4ge1xuICAgICAgaWYgKHR5cGVzLmluY2x1ZGVzKFwiYWRkcmVzc1wiKSAmJiB0eXBlcy5pbmNsdWRlcyhcImJ5dGVzMjBcIikpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHR5cGVzLmluY2x1ZGVzKFwiYWRkcmVzc1wiKSAmJiB0eXBlcy5pbmNsdWRlcyhcInN0cmluZ1wiKSlcbiAgICAgICAgcmV0dXJuIGlzQWRkcmVzcyhhcmdzW3BhcmFtZXRlckluZGV4XSwgeyBzdHJpY3Q6IGZhbHNlIH0pO1xuICAgICAgaWYgKHR5cGVzLmluY2x1ZGVzKFwiYWRkcmVzc1wiKSAmJiB0eXBlcy5pbmNsdWRlcyhcImJ5dGVzXCIpKVxuICAgICAgICByZXR1cm4gaXNBZGRyZXNzKGFyZ3NbcGFyYW1ldGVySW5kZXhdLCB7IHN0cmljdDogZmFsc2UgfSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSkoKTtcbiAgICBpZiAoYW1iaWd1b3VzKVxuICAgICAgcmV0dXJuIHR5cGVzO1xuICB9XG4gIHJldHVybjtcbn1cbmZ1bmN0aW9uIGZvcm1hdFVuaXRzKHZhbHVlLCBkZWNpbWFscykge1xuICBsZXQgZGlzcGxheSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gIGNvbnN0IG5lZ2F0aXZlID0gZGlzcGxheS5zdGFydHNXaXRoKFwiLVwiKTtcbiAgaWYgKG5lZ2F0aXZlKVxuICAgIGRpc3BsYXkgPSBkaXNwbGF5LnNsaWNlKDEpO1xuICBkaXNwbGF5ID0gZGlzcGxheS5wYWRTdGFydChkZWNpbWFscywgXCIwXCIpO1xuICBsZXQgW2ludGVnZXIsIGZyYWN0aW9uXSA9IFtcbiAgICBkaXNwbGF5LnNsaWNlKDAsIGRpc3BsYXkubGVuZ3RoIC0gZGVjaW1hbHMpLFxuICAgIGRpc3BsYXkuc2xpY2UoZGlzcGxheS5sZW5ndGggLSBkZWNpbWFscylcbiAgXTtcbiAgZnJhY3Rpb24gPSBmcmFjdGlvbi5yZXBsYWNlKC8oMCspJC8sIFwiXCIpO1xuICByZXR1cm4gYCR7bmVnYXRpdmUgPyBcIi1cIiA6IFwiXCJ9JHtpbnRlZ2VyIHx8IFwiMFwifSR7ZnJhY3Rpb24gPyBgLiR7ZnJhY3Rpb259YCA6IFwiXCJ9YDtcbn1cbmZ1bmN0aW9uIGZvcm1hdEd3ZWkod2VpLCB1bml0ID0gXCJ3ZWlcIikge1xuICByZXR1cm4gZm9ybWF0VW5pdHMod2VpLCBnd2VpVW5pdHNbdW5pdF0pO1xufVxuZnVuY3Rpb24gcHJlcGFyZUVuY29kZUZ1bmN0aW9uRGF0YShwYXJhbWV0ZXJzKSB7XG4gIGNvbnN0IHsgYWJpLCBhcmdzLCBmdW5jdGlvbk5hbWUgfSA9IHBhcmFtZXRlcnM7XG4gIGxldCBhYmlJdGVtID0gYWJpWzBdO1xuICBpZiAoZnVuY3Rpb25OYW1lKSB7XG4gICAgY29uc3QgaXRlbSA9IGdldEFiaUl0ZW0oe1xuICAgICAgYWJpLFxuICAgICAgYXJncyxcbiAgICAgIG5hbWU6IGZ1bmN0aW9uTmFtZVxuICAgIH0pO1xuICAgIGlmICghaXRlbSlcbiAgICAgIHRocm93IG5ldyBBYmlGdW5jdGlvbk5vdEZvdW5kRXJyb3IoZnVuY3Rpb25OYW1lLCB7IGRvY3NQYXRoOiBkb2NzUGF0aDMgfSk7XG4gICAgYWJpSXRlbSA9IGl0ZW07XG4gIH1cbiAgaWYgKGFiaUl0ZW0udHlwZSAhPT0gXCJmdW5jdGlvblwiKVxuICAgIHRocm93IG5ldyBBYmlGdW5jdGlvbk5vdEZvdW5kRXJyb3Iodm9pZCAwLCB7IGRvY3NQYXRoOiBkb2NzUGF0aDMgfSk7XG4gIHJldHVybiB7XG4gICAgYWJpOiBbYWJpSXRlbV0sXG4gICAgZnVuY3Rpb25OYW1lOiB0b0Z1bmN0aW9uU2VsZWN0b3IoZm9ybWF0QWJpSXRlbTIoYWJpSXRlbSkpXG4gIH07XG59XG5mdW5jdGlvbiBlbmNvZGVGdW5jdGlvbkRhdGEocGFyYW1ldGVycykge1xuICBjb25zdCB7IGFyZ3MgfSA9IHBhcmFtZXRlcnM7XG4gIGNvbnN0IHsgYWJpLCBmdW5jdGlvbk5hbWUgfSA9ICgoKSA9PiB7XG4gICAgaWYgKHBhcmFtZXRlcnMuYWJpLmxlbmd0aCA9PT0gMSAmJiBwYXJhbWV0ZXJzLmZ1bmN0aW9uTmFtZT8uc3RhcnRzV2l0aChcIjB4XCIpKVxuICAgICAgcmV0dXJuIHBhcmFtZXRlcnM7XG4gICAgcmV0dXJuIHByZXBhcmVFbmNvZGVGdW5jdGlvbkRhdGEocGFyYW1ldGVycyk7XG4gIH0pKCk7XG4gIGNvbnN0IGFiaUl0ZW0gPSBhYmlbMF07XG4gIGNvbnN0IHNpZ25hdHVyZSA9IGZ1bmN0aW9uTmFtZTtcbiAgY29uc3QgZGF0YSA9IFwiaW5wdXRzXCIgaW4gYWJpSXRlbSAmJiBhYmlJdGVtLmlucHV0cyA/IGVuY29kZUFiaVBhcmFtZXRlcnMoYWJpSXRlbS5pbnB1dHMsIGFyZ3MgPz8gW10pIDogdm9pZCAwO1xuICByZXR1cm4gY29uY2F0SGV4KFtzaWduYXR1cmUsIGRhdGEgPz8gXCIweFwiXSk7XG59XG52YXIgdHVwbGVSZWdleCwgdW5pdmVyc2FsUmVzb2x2ZXJFcnJvcnMsIHVuaXZlcnNhbFJlc29sdmVyUmVzb2x2ZUFiaSwgdW5pdmVyc2FsUmVzb2x2ZXJSZXZlcnNlQWJpLCB2ZXJzaW9uMywgZXJyb3JDb25maWcsIEJhc2VFcnJvcjMsIEFiaURlY29kaW5nRGF0YVNpemVUb29TbWFsbEVycm9yLCBBYmlEZWNvZGluZ1plcm9EYXRhRXJyb3IsIEFiaUVuY29kaW5nQXJyYXlMZW5ndGhNaXNtYXRjaEVycm9yLCBBYmlFbmNvZGluZ0J5dGVzU2l6ZU1pc21hdGNoRXJyb3IsIEFiaUVuY29kaW5nTGVuZ3RoTWlzbWF0Y2hFcnJvciwgQWJpRnVuY3Rpb25Ob3RGb3VuZEVycm9yLCBBYmlJdGVtQW1iaWd1aXR5RXJyb3IsIEludmFsaWRBYmlFbmNvZGluZ1R5cGVFcnJvciwgSW52YWxpZEFiaURlY29kaW5nVHlwZUVycm9yLCBJbnZhbGlkQXJyYXlFcnJvciwgSW52YWxpZERlZmluaXRpb25UeXBlRXJyb3IsIFNsaWNlT2Zmc2V0T3V0T2ZCb3VuZHNFcnJvcjIsIFNpemVFeGNlZWRzUGFkZGluZ1NpemVFcnJvcjIsIEludGVnZXJPdXRPZlJhbmdlRXJyb3IyLCBJbnZhbGlkQnl0ZXNCb29sZWFuRXJyb3IsIFNpemVPdmVyZmxvd0Vycm9yMiwgaGV4ZXMsIGVuY29kZXIsIGVuY29kZXIyLCBjaGFyQ29kZU1hcCwgaGFzaCwgdG9TaWduYXR1cmUsIHRvRnVuY3Rpb25TZWxlY3RvciwgSW52YWxpZEFkZHJlc3NFcnJvciwgTHJ1TWFwLCBhZGRyZXNzUmVnZXgsIGlzQWRkcmVzc0NhY2hlLCBjaGVja3N1bUFkZHJlc3NDYWNoZSwgTmVnYXRpdmVPZmZzZXRFcnJvciwgUG9zaXRpb25PdXRPZkJvdW5kc0Vycm9yLCBSZWN1cnNpdmVSZWFkTGltaXRFeGNlZWRlZEVycm9yLCBzdGF0aWNDdXJzb3IsIGludGVnZXJSZWdleDIsIHNpemVPZkxlbmd0aCwgc2l6ZU9mT2Zmc2V0LCB0b0V2ZW50U2VsZWN0b3IsIGd3ZWlVbml0cywgZG9jc1BhdGgzLCBFeGVjdXRpb25SZXZlcnRlZEVycm9yLCBGZWVDYXBUb29IaWdoRXJyb3IsIEZlZUNhcFRvb0xvd0Vycm9yLCBOb25jZVRvb0hpZ2hFcnJvciwgTm9uY2VUb29Mb3dFcnJvciwgTm9uY2VNYXhWYWx1ZUVycm9yLCBJbnN1ZmZpY2llbnRGdW5kc0Vycm9yLCBJbnRyaW5zaWNHYXNUb29IaWdoRXJyb3IsIEludHJpbnNpY0dhc1Rvb0xvd0Vycm9yLCBUcmFuc2FjdGlvblR5cGVOb3RTdXBwb3J0ZWRFcnJvciwgVGlwQWJvdmVGZWVDYXBFcnJvciwgbWF4SW50OCwgbWF4SW50MTYsIG1heEludDI0LCBtYXhJbnQzMiwgbWF4SW50NDAsIG1heEludDQ4LCBtYXhJbnQ1NiwgbWF4SW50NjQsIG1heEludDcyLCBtYXhJbnQ4MCwgbWF4SW50ODgsIG1heEludDk2LCBtYXhJbnQxMDQsIG1heEludDExMiwgbWF4SW50MTIwLCBtYXhJbnQxMjgsIG1heEludDEzNiwgbWF4SW50MTQ0LCBtYXhJbnQxNTIsIG1heEludDE2MCwgbWF4SW50MTY4LCBtYXhJbnQxNzYsIG1heEludDE4NCwgbWF4SW50MTkyLCBtYXhJbnQyMDAsIG1heEludDIwOCwgbWF4SW50MjE2LCBtYXhJbnQyMjQsIG1heEludDIzMiwgbWF4SW50MjQwLCBtYXhJbnQyNDgsIG1heEludDI1NiwgbWluSW50OCwgbWluSW50MTYsIG1pbkludDI0LCBtaW5JbnQzMiwgbWluSW50NDAsIG1pbkludDQ4LCBtaW5JbnQ1NiwgbWluSW50NjQsIG1pbkludDcyLCBtaW5JbnQ4MCwgbWluSW50ODgsIG1pbkludDk2LCBtaW5JbnQxMDQsIG1pbkludDExMiwgbWluSW50MTIwLCBtaW5JbnQxMjgsIG1pbkludDEzNiwgbWluSW50MTQ0LCBtaW5JbnQxNTIsIG1pbkludDE2MCwgbWluSW50MTY4LCBtaW5JbnQxNzYsIG1pbkludDE4NCwgbWluSW50MTkyLCBtaW5JbnQyMDAsIG1pbkludDIwOCwgbWluSW50MjE2LCBtaW5JbnQyMjQsIG1pbkludDIzMiwgbWluSW50MjQwLCBtaW5JbnQyNDgsIG1pbkludDI1NiwgbWF4VWludDgsIG1heFVpbnQxNiwgbWF4VWludDI0LCBtYXhVaW50MzIsIG1heFVpbnQ0MCwgbWF4VWludDQ4LCBtYXhVaW50NTYsIG1heFVpbnQ2NCwgbWF4VWludDcyLCBtYXhVaW50ODAsIG1heFVpbnQ4OCwgbWF4VWludDk2LCBtYXhVaW50MTA0LCBtYXhVaW50MTEyLCBtYXhVaW50MTIwLCBtYXhVaW50MTI4LCBtYXhVaW50MTM2LCBtYXhVaW50MTQ0LCBtYXhVaW50MTUyLCBtYXhVaW50MTYwLCBtYXhVaW50MTY4LCBtYXhVaW50MTc2LCBtYXhVaW50MTg0LCBtYXhVaW50MTkyLCBtYXhVaW50MjAwLCBtYXhVaW50MjA4LCBtYXhVaW50MjE2LCBtYXhVaW50MjI0LCBtYXhVaW50MjMyLCBtYXhVaW50MjQwLCBtYXhVaW50MjQ4LCBtYXhVaW50MjU2O1xudmFyIGluaXRfY2h1bmtfNEVGNEsyTUggPSBfX2VzbSh7XG4gIFwiLi4vb3JjaGVzdHJhdGlvbi9zcmMvdmVuZG9yL3ZpZW0vY2h1bmstNEVGNEsyTUguanNcIigpIHtcbiAgICBpbml0X3NoYTMoKTtcbiAgICB0dXBsZVJlZ2V4ID0gL150dXBsZSg/PGFycmF5PihcXFsoXFxkKilcXF0pKikkLztcbiAgICB1bml2ZXJzYWxSZXNvbHZlckVycm9ycyA9IFtcbiAgICAgIHtcbiAgICAgICAgaW5wdXRzOiBbXSxcbiAgICAgICAgbmFtZTogXCJSZXNvbHZlck5vdEZvdW5kXCIsXG4gICAgICAgIHR5cGU6IFwiZXJyb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5wdXRzOiBbXSxcbiAgICAgICAgbmFtZTogXCJSZXNvbHZlcldpbGRjYXJkTm90U3VwcG9ydGVkXCIsXG4gICAgICAgIHR5cGU6IFwiZXJyb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5wdXRzOiBbXSxcbiAgICAgICAgbmFtZTogXCJSZXNvbHZlck5vdENvbnRyYWN0XCIsXG4gICAgICAgIHR5cGU6IFwiZXJyb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJyZXR1cm5EYXRhXCIsXG4gICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCJcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIG5hbWU6IFwiUmVzb2x2ZXJFcnJvclwiLFxuICAgICAgICB0eXBlOiBcImVycm9yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwic3RhdHVzXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MTZcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJtZXNzYWdlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbmFtZTogXCJlcnJvcnNcIixcbiAgICAgICAgICAgIHR5cGU6IFwidHVwbGVbXVwiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiBcIkh0dHBFcnJvclwiLFxuICAgICAgICB0eXBlOiBcImVycm9yXCJcbiAgICAgIH1cbiAgICBdO1xuICAgIHVuaXZlcnNhbFJlc29sdmVyUmVzb2x2ZUFiaSA9IFtcbiAgICAgIC4uLnVuaXZlcnNhbFJlc29sdmVyRXJyb3JzLFxuICAgICAge1xuICAgICAgICBuYW1lOiBcInJlc29sdmVcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICB7IG5hbWU6IFwibmFtZVwiLCB0eXBlOiBcImJ5dGVzXCIgfSxcbiAgICAgICAgICB7IG5hbWU6IFwiZGF0YVwiLCB0eXBlOiBcImJ5dGVzXCIgfVxuICAgICAgICBdLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgeyBuYW1lOiBcIlwiLCB0eXBlOiBcImJ5dGVzXCIgfSxcbiAgICAgICAgICB7IG5hbWU6IFwiYWRkcmVzc1wiLCB0eXBlOiBcImFkZHJlc3NcIiB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwicmVzb2x2ZVwiLFxuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgIHsgbmFtZTogXCJuYW1lXCIsIHR5cGU6IFwiYnl0ZXNcIiB9LFxuICAgICAgICAgIHsgbmFtZTogXCJkYXRhXCIsIHR5cGU6IFwiYnl0ZXNcIiB9LFxuICAgICAgICAgIHsgbmFtZTogXCJnYXRld2F5c1wiLCB0eXBlOiBcInN0cmluZ1tdXCIgfVxuICAgICAgICBdLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgeyBuYW1lOiBcIlwiLCB0eXBlOiBcImJ5dGVzXCIgfSxcbiAgICAgICAgICB7IG5hbWU6IFwiYWRkcmVzc1wiLCB0eXBlOiBcImFkZHJlc3NcIiB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICBdO1xuICAgIHVuaXZlcnNhbFJlc29sdmVyUmV2ZXJzZUFiaSA9IFtcbiAgICAgIC4uLnVuaXZlcnNhbFJlc29sdmVyRXJyb3JzLFxuICAgICAge1xuICAgICAgICBuYW1lOiBcInJldmVyc2VcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgICAgICBpbnB1dHM6IFt7IHR5cGU6IFwiYnl0ZXNcIiwgbmFtZTogXCJyZXZlcnNlTmFtZVwiIH1dLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgeyB0eXBlOiBcInN0cmluZ1wiLCBuYW1lOiBcInJlc29sdmVkTmFtZVwiIH0sXG4gICAgICAgICAgeyB0eXBlOiBcImFkZHJlc3NcIiwgbmFtZTogXCJyZXNvbHZlZEFkZHJlc3NcIiB9LFxuICAgICAgICAgIHsgdHlwZTogXCJhZGRyZXNzXCIsIG5hbWU6IFwicmV2ZXJzZVJlc29sdmVyXCIgfSxcbiAgICAgICAgICB7IHR5cGU6IFwiYWRkcmVzc1wiLCBuYW1lOiBcInJlc29sdmVyXCIgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcInJldmVyc2VcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICB7IHR5cGU6IFwiYnl0ZXNcIiwgbmFtZTogXCJyZXZlcnNlTmFtZVwiIH0sXG4gICAgICAgICAgeyB0eXBlOiBcInN0cmluZ1tdXCIsIG5hbWU6IFwiZ2F0ZXdheXNcIiB9XG4gICAgICAgIF0sXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICB7IHR5cGU6IFwic3RyaW5nXCIsIG5hbWU6IFwicmVzb2x2ZWROYW1lXCIgfSxcbiAgICAgICAgICB7IHR5cGU6IFwiYWRkcmVzc1wiLCBuYW1lOiBcInJlc29sdmVkQWRkcmVzc1wiIH0sXG4gICAgICAgICAgeyB0eXBlOiBcImFkZHJlc3NcIiwgbmFtZTogXCJyZXZlcnNlUmVzb2x2ZXJcIiB9LFxuICAgICAgICAgIHsgdHlwZTogXCJhZGRyZXNzXCIsIG5hbWU6IFwicmVzb2x2ZXJcIiB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICBdO1xuICAgIHZlcnNpb24zID0gXCIyLjMxLjBcIjtcbiAgICBlcnJvckNvbmZpZyA9IHtcbiAgICAgIGdldERvY3NVcmw6ICh7IGRvY3NCYXNlVXJsLCBkb2NzUGF0aDogZG9jc1BhdGg2ID0gXCJcIiwgZG9jc1NsdWcgfSkgPT4gZG9jc1BhdGg2ID8gYCR7ZG9jc0Jhc2VVcmwgPz8gXCJodHRwczovL3ZpZW0uc2hcIn0ke2RvY3NQYXRoNn0ke2RvY3NTbHVnID8gYCMke2RvY3NTbHVnfWAgOiBcIlwifWAgOiB2b2lkIDAsXG4gICAgICB2ZXJzaW9uOiBgdmllbUAke3ZlcnNpb24zfWBcbiAgICB9O1xuICAgIEJhc2VFcnJvcjMgPSBjbGFzcyBfQmFzZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgICAgY29uc3RydWN0b3Ioc2hvcnRNZXNzYWdlLCBhcmdzID0ge30pIHtcbiAgICAgICAgY29uc3QgZGV0YWlscyA9ICgoKSA9PiB7XG4gICAgICAgICAgaWYgKGFyZ3MuY2F1c2UgaW5zdGFuY2VvZiBfQmFzZUVycm9yKVxuICAgICAgICAgICAgcmV0dXJuIGFyZ3MuY2F1c2UuZGV0YWlscztcbiAgICAgICAgICBpZiAoYXJncy5jYXVzZT8ubWVzc2FnZSlcbiAgICAgICAgICAgIHJldHVybiBhcmdzLmNhdXNlLm1lc3NhZ2U7XG4gICAgICAgICAgcmV0dXJuIGFyZ3MuZGV0YWlscztcbiAgICAgICAgfSkoKTtcbiAgICAgICAgY29uc3QgZG9jc1BhdGg2ID0gKCgpID0+IHtcbiAgICAgICAgICBpZiAoYXJncy5jYXVzZSBpbnN0YW5jZW9mIF9CYXNlRXJyb3IpXG4gICAgICAgICAgICByZXR1cm4gYXJncy5jYXVzZS5kb2NzUGF0aCB8fCBhcmdzLmRvY3NQYXRoO1xuICAgICAgICAgIHJldHVybiBhcmdzLmRvY3NQYXRoO1xuICAgICAgICB9KSgpO1xuICAgICAgICBjb25zdCBkb2NzVXJsID0gZXJyb3JDb25maWcuZ2V0RG9jc1VybD8uKHsgLi4uYXJncywgZG9jc1BhdGg6IGRvY3NQYXRoNiB9KTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IFtcbiAgICAgICAgICBzaG9ydE1lc3NhZ2UgfHwgXCJBbiBlcnJvciBvY2N1cnJlZC5cIixcbiAgICAgICAgICBcIlwiLFxuICAgICAgICAgIC4uLihhcmdzLm1ldGFNZXNzYWdlcz8gWy4uLmFyZ3MubWV0YU1lc3NhZ2VzLCBcIlwiXSA6IFtdKSxcbiAgICAgICAgICAuLi4oZG9jc1VybD8gW2BEb2NzOiAke2RvY3NVcmx9YF0gOiBbXSksXG4gICAgICAgICAgLi4uKGRldGFpbHM/IFtgRGV0YWlsczogJHtkZXRhaWxzfWBdIDogW10pLFxuICAgICAgICAgIC4uLihlcnJvckNvbmZpZy52ZXJzaW9uPyBbYFZlcnNpb246ICR7ZXJyb3JDb25maWcudmVyc2lvbn1gXSA6IFtdKVxuICAgICAgICBdLmpvaW4oXCJcXG5cIik7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIGFyZ3MuY2F1c2UgPyB7IGNhdXNlOiBhcmdzLmNhdXNlIH0gOiB2b2lkIDApO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJkZXRhaWxzXCIsIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJkb2NzUGF0aFwiLCB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibWV0YU1lc3NhZ2VzXCIsIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzaG9ydE1lc3NhZ2VcIiwge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInZlcnNpb25cIiwge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIHZhbHVlOiBcIkJhc2VFcnJvclwiXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRldGFpbHMgPSBkZXRhaWxzO1xuICAgICAgICB0aGlzLmRvY3NQYXRoID0gZG9jc1BhdGg2O1xuICAgICAgICB0aGlzLm1ldGFNZXNzYWdlcyA9IGFyZ3MubWV0YU1lc3NhZ2VzO1xuICAgICAgICB0aGlzLm5hbWUgPSBhcmdzLm5hbWUgPz8gdGhpcy5uYW1lO1xuICAgICAgICB0aGlzLnNob3J0TWVzc2FnZSA9IHNob3J0TWVzc2FnZTtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjM7XG4gICAgICB9XG4gICAgICB3YWxrKGZuKSB7XG4gICAgICAgIHJldHVybiB3YWxrMih0aGlzLCBmbik7XG4gICAgICB9XG4gICAgfTtcbiAgICBBYmlEZWNvZGluZ0RhdGFTaXplVG9vU21hbGxFcnJvciA9IGNsYXNzIGV4dGVuZHMgQmFzZUVycm9yMyB7XG4gICAgICBjb25zdHJ1Y3Rvcih7IGRhdGEsIHBhcmFtcywgc2l6ZTogc2l6ZTMgfSkge1xuICAgICAgICBzdXBlcihbYERhdGEgc2l6ZSBvZiAke3NpemUzfSBieXRlcyBpcyB0b28gc21hbGwgZm9yIGdpdmVuIHBhcmFtZXRlcnMuYF0uam9pbihcIlxcblwiKSwge1xuICAgICAgICAgIG1ldGFNZXNzYWdlczogW1xuICAgICAgICAgICAgYFBhcmFtczogKCR7Zm9ybWF0QWJpUGFyYW1zKHBhcmFtcywgeyBpbmNsdWRlTmFtZTogdHJ1ZSB9KX0pYCxcbiAgICAgICAgICAgIGBEYXRhOiAgICR7ZGF0YX0gKCR7c2l6ZTN9IGJ5dGVzKWBcbiAgICAgICAgICBdLFxuICAgICAgICAgIG5hbWU6IFwiQWJpRGVjb2RpbmdEYXRhU2l6ZVRvb1NtYWxsRXJyb3JcIlxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZGF0YVwiLCB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicGFyYW1zXCIsIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzaXplXCIsIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcbiAgICAgICAgdGhpcy5zaXplID0gc2l6ZTM7XG4gICAgICB9XG4gICAgfTtcbiAgICBBYmlEZWNvZGluZ1plcm9EYXRhRXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdDYW5ub3QgZGVjb2RlIHplcm8gZGF0YSAoXCIweFwiKSB3aXRoIEFCSSBwYXJhbWV0ZXJzLicsIHtcbiAgICAgICAgICBuYW1lOiBcIkFiaURlY29kaW5nWmVyb0RhdGFFcnJvclwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgQWJpRW5jb2RpbmdBcnJheUxlbmd0aE1pc21hdGNoRXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IoeyBleHBlY3RlZExlbmd0aCwgZ2l2ZW5MZW5ndGgsIHR5cGUgfSkge1xuICAgICAgICBzdXBlcihbXG4gICAgICAgICAgYEFCSSBlbmNvZGluZyBhcnJheSBsZW5ndGggbWlzbWF0Y2ggZm9yIHR5cGUgJHt0eXBlfS5gLFxuICAgICAgICAgIGBFeHBlY3RlZCBsZW5ndGg6ICR7ZXhwZWN0ZWRMZW5ndGh9YCxcbiAgICAgICAgICBgR2l2ZW4gbGVuZ3RoOiAke2dpdmVuTGVuZ3RofWBcbiAgICAgICAgXS5qb2luKFwiXFxuXCIpLCB7IG5hbWU6IFwiQWJpRW5jb2RpbmdBcnJheUxlbmd0aE1pc21hdGNoRXJyb3JcIiB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIEFiaUVuY29kaW5nQnl0ZXNTaXplTWlzbWF0Y2hFcnJvciA9IGNsYXNzIGV4dGVuZHMgQmFzZUVycm9yMyB7XG4gICAgICBjb25zdHJ1Y3Rvcih7IGV4cGVjdGVkU2l6ZSwgdmFsdWUgfSkge1xuICAgICAgICBzdXBlcihgU2l6ZSBvZiBieXRlcyBcIiR7dmFsdWV9XCIgKGJ5dGVzJHtzaXplMih2YWx1ZSl9KSBkb2VzIG5vdCBtYXRjaCBleHBlY3RlZCBzaXplIChieXRlcyR7ZXhwZWN0ZWRTaXplfSkuYCwgeyBuYW1lOiBcIkFiaUVuY29kaW5nQnl0ZXNTaXplTWlzbWF0Y2hFcnJvclwiIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgQWJpRW5jb2RpbmdMZW5ndGhNaXNtYXRjaEVycm9yID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKHsgZXhwZWN0ZWRMZW5ndGgsIGdpdmVuTGVuZ3RoIH0pIHtcbiAgICAgICAgc3VwZXIoW1xuICAgICAgICAgIFwiQUJJIGVuY29kaW5nIHBhcmFtcy92YWx1ZXMgbGVuZ3RoIG1pc21hdGNoLlwiLFxuICAgICAgICAgIGBFeHBlY3RlZCBsZW5ndGggKHBhcmFtcyk6ICR7ZXhwZWN0ZWRMZW5ndGh9YCxcbiAgICAgICAgICBgR2l2ZW4gbGVuZ3RoICh2YWx1ZXMpOiAke2dpdmVuTGVuZ3RofWBcbiAgICAgICAgXS5qb2luKFwiXFxuXCIpLCB7IG5hbWU6IFwiQWJpRW5jb2RpbmdMZW5ndGhNaXNtYXRjaEVycm9yXCIgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBBYmlGdW5jdGlvbk5vdEZvdW5kRXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IoZnVuY3Rpb25OYW1lLCB7IGRvY3NQYXRoOiBkb2NzUGF0aDYgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKFtcbiAgICAgICAgICBgRnVuY3Rpb24gJHtmdW5jdGlvbk5hbWUgPyBgXCIke2Z1bmN0aW9uTmFtZX1cIiBgIDogXCJcIn1ub3QgZm91bmQgb24gQUJJLmAsXG4gICAgICAgICAgXCJNYWtlIHN1cmUgeW91IGFyZSB1c2luZyB0aGUgY29ycmVjdCBBQkkgYW5kIHRoYXQgdGhlIGZ1bmN0aW9uIGV4aXN0cyBvbiBpdC5cIlxuICAgICAgICBdLmpvaW4oXCJcXG5cIiksIHtcbiAgICAgICAgICBkb2NzUGF0aDogZG9jc1BhdGg2LFxuICAgICAgICAgIG5hbWU6IFwiQWJpRnVuY3Rpb25Ob3RGb3VuZEVycm9yXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBBYmlJdGVtQW1iaWd1aXR5RXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IoeCwgeSkge1xuICAgICAgICBzdXBlcihcIkZvdW5kIGFtYmlndW91cyB0eXBlcyBpbiBvdmVybG9hZGVkIEFCSSBpdGVtcy5cIiwge1xuICAgICAgICAgIG1ldGFNZXNzYWdlczogW1xuICAgICAgICAgICAgYFxcYCR7eC50eXBlfVxcYCBpbiBcXGAke2Zvcm1hdEFiaUl0ZW0yKHguYWJpSXRlbSl9XFxgLCBhbmRgLFxuICAgICAgICAgICAgYFxcYCR7eS50eXBlfVxcYCBpbiBcXGAke2Zvcm1hdEFiaUl0ZW0yKHkuYWJpSXRlbSl9XFxgYCxcbiAgICAgICAgICAgIFwiXCIsXG4gICAgICAgICAgICBcIlRoZXNlIHR5cGVzIGVuY29kZSBkaWZmZXJlbnRseSBhbmQgY2Fubm90IGJlIGRpc3Rpbmd1aXNoZWQgYXQgcnVudGltZS5cIixcbiAgICAgICAgICAgIFwiUmVtb3ZlIG9uZSBvZiB0aGUgYW1iaWd1b3VzIGl0ZW1zIGluIHRoZSBBQkkuXCJcbiAgICAgICAgICBdLFxuICAgICAgICAgIG5hbWU6IFwiQWJpSXRlbUFtYmlndWl0eUVycm9yXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBJbnZhbGlkQWJpRW5jb2RpbmdUeXBlRXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IodHlwZSwgeyBkb2NzUGF0aDogZG9jc1BhdGg2IH0pIHtcbiAgICAgICAgc3VwZXIoW1xuICAgICAgICAgIGBUeXBlIFwiJHt0eXBlfVwiIGlzIG5vdCBhIHZhbGlkIGVuY29kaW5nIHR5cGUuYCxcbiAgICAgICAgICBcIlBsZWFzZSBwcm92aWRlIGEgdmFsaWQgQUJJIHR5cGUuXCJcbiAgICAgICAgXS5qb2luKFwiXFxuXCIpLCB7IGRvY3NQYXRoOiBkb2NzUGF0aDYsIG5hbWU6IFwiSW52YWxpZEFiaUVuY29kaW5nVHlwZVwiIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgSW52YWxpZEFiaURlY29kaW5nVHlwZUVycm9yID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKHR5cGUsIHsgZG9jc1BhdGg6IGRvY3NQYXRoNiB9KSB7XG4gICAgICAgIHN1cGVyKFtcbiAgICAgICAgICBgVHlwZSBcIiR7dHlwZX1cIiBpcyBub3QgYSB2YWxpZCBkZWNvZGluZyB0eXBlLmAsXG4gICAgICAgICAgXCJQbGVhc2UgcHJvdmlkZSBhIHZhbGlkIEFCSSB0eXBlLlwiXG4gICAgICAgIF0uam9pbihcIlxcblwiKSwgeyBkb2NzUGF0aDogZG9jc1BhdGg2LCBuYW1lOiBcIkludmFsaWRBYmlEZWNvZGluZ1R5cGVcIiB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIEludmFsaWRBcnJheUVycm9yID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgICAgIHN1cGVyKFtgVmFsdWUgXCIke3ZhbHVlfVwiIGlzIG5vdCBhIHZhbGlkIGFycmF5LmBdLmpvaW4oXCJcXG5cIiksIHtcbiAgICAgICAgICBuYW1lOiBcIkludmFsaWRBcnJheUVycm9yXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBJbnZhbGlkRGVmaW5pdGlvblR5cGVFcnJvciA9IGNsYXNzIGV4dGVuZHMgQmFzZUVycm9yMyB7XG4gICAgICBjb25zdHJ1Y3Rvcih0eXBlKSB7XG4gICAgICAgIHN1cGVyKFtcbiAgICAgICAgICBgXCIke3R5cGV9XCIgaXMgbm90IGEgdmFsaWQgZGVmaW5pdGlvbiB0eXBlLmAsXG4gICAgICAgICAgJ1ZhbGlkIHR5cGVzOiBcImZ1bmN0aW9uXCIsIFwiZXZlbnRcIiwgXCJlcnJvclwiJ1xuICAgICAgICBdLmpvaW4oXCJcXG5cIiksIHsgbmFtZTogXCJJbnZhbGlkRGVmaW5pdGlvblR5cGVFcnJvclwiIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgU2xpY2VPZmZzZXRPdXRPZkJvdW5kc0Vycm9yMiA9IGNsYXNzIGV4dGVuZHMgQmFzZUVycm9yMyB7XG4gICAgICBjb25zdHJ1Y3Rvcih7IG9mZnNldCwgcG9zaXRpb24sIHNpemU6IHNpemUzIH0pIHtcbiAgICAgICAgc3VwZXIoYFNsaWNlICR7cG9zaXRpb24gPT09IFwic3RhcnRcIiA/IFwic3RhcnRpbmdcIiA6IFwiZW5kaW5nXCJ9IGF0IG9mZnNldCBcIiR7b2Zmc2V0fVwiIGlzIG91dC1vZi1ib3VuZHMgKHNpemU6ICR7c2l6ZTN9KS5gLCB7IG5hbWU6IFwiU2xpY2VPZmZzZXRPdXRPZkJvdW5kc0Vycm9yXCIgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBTaXplRXhjZWVkc1BhZGRpbmdTaXplRXJyb3IyID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKHsgc2l6ZTogc2l6ZTMsIHRhcmdldFNpemUsIHR5cGUgfSkge1xuICAgICAgICBzdXBlcihgJHt0eXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpfSR7dHlwZS5zbGljZSgxKS50b0xvd2VyQ2FzZSgpfSBzaXplICgke3NpemUzfSkgZXhjZWVkcyBwYWRkaW5nIHNpemUgKCR7dGFyZ2V0U2l6ZX0pLmAsIHsgbmFtZTogXCJTaXplRXhjZWVkc1BhZGRpbmdTaXplRXJyb3JcIiB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIEludGVnZXJPdXRPZlJhbmdlRXJyb3IyID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKHsgbWF4LCBtaW4sIHNpZ25lZCwgc2l6ZTogc2l6ZTMsIHZhbHVlIH0pIHtcbiAgICAgICAgc3VwZXIoYE51bWJlciBcIiR7dmFsdWV9XCIgaXMgbm90IGluIHNhZmUgJHtzaXplMyA/IGAke3NpemUzICogOH0tYml0ICR7c2lnbmVkID8gXCJzaWduZWRcIiA6IFwidW5zaWduZWRcIn0gYCA6IFwiXCJ9aW50ZWdlciByYW5nZSAke21heCA/IGAoJHttaW59IHRvICR7bWF4fSlgIDogYChhYm92ZSAke21pbn0pYH1gLCB7IG5hbWU6IFwiSW50ZWdlck91dE9mUmFuZ2VFcnJvclwiIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgSW52YWxpZEJ5dGVzQm9vbGVhbkVycm9yID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKGJ5dGVzMikge1xuICAgICAgICBzdXBlcihgQnl0ZXMgdmFsdWUgXCIke2J5dGVzMn1cIiBpcyBub3QgYSB2YWxpZCBib29sZWFuLiBUaGUgYnl0ZXMgYXJyYXkgbXVzdCBjb250YWluIGEgc2luZ2xlIGJ5dGUgb2YgZWl0aGVyIGEgMCBvciAxIHZhbHVlLmAsIHtcbiAgICAgICAgICBuYW1lOiBcIkludmFsaWRCeXRlc0Jvb2xlYW5FcnJvclwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgU2l6ZU92ZXJmbG93RXJyb3IyID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKHsgZ2l2ZW5TaXplLCBtYXhTaXplIH0pIHtcbiAgICAgICAgc3VwZXIoYFNpemUgY2Fubm90IGV4Y2VlZCAke21heFNpemV9IGJ5dGVzLiBHaXZlbiBzaXplOiAke2dpdmVuU2l6ZX0gYnl0ZXMuYCwgeyBuYW1lOiBcIlNpemVPdmVyZmxvd0Vycm9yXCIgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBoZXhlcyA9IC8qIEBfX1BVUkVfXyAqLyBBcnJheS5mcm9tKHsgbGVuZ3RoOiAyNTYgfSwgKF92LCBpMykgPT4gaTMudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSk7XG4gICAgZW5jb2RlciA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgVGV4dEVuY29kZXIoKTtcbiAgICBlbmNvZGVyMiA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgVGV4dEVuY29kZXIoKTtcbiAgICBjaGFyQ29kZU1hcCA9IHtcbiAgICAgIHplcm86IDQ4LFxuICAgICAgbmluZTogNTcsXG4gICAgICBBOiA2NSxcbiAgICAgIEY6IDcwLFxuICAgICAgYTogOTcsXG4gICAgICBmOiAxMDJcbiAgICB9O1xuICAgIGhhc2ggPSAodmFsdWUpID0+IGtlY2NhazI1Nih0b0J5dGVzMyh2YWx1ZSkpO1xuICAgIHRvU2lnbmF0dXJlID0gKGRlZikgPT4ge1xuICAgICAgY29uc3QgZGVmXyA9ICgoKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgZGVmID09PSBcInN0cmluZ1wiKVxuICAgICAgICAgIHJldHVybiBkZWY7XG4gICAgICAgIHJldHVybiBmb3JtYXRBYmlJdGVtKGRlZik7XG4gICAgICB9KSgpO1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVNpZ25hdHVyZShkZWZfKTtcbiAgICB9O1xuICAgIHRvRnVuY3Rpb25TZWxlY3RvciA9IChmbikgPT4gc2xpY2UodG9TaWduYXR1cmVIYXNoKGZuKSwgMCwgNCk7XG4gICAgSW52YWxpZEFkZHJlc3NFcnJvciA9IGNsYXNzIGV4dGVuZHMgQmFzZUVycm9yMyB7XG4gICAgICBjb25zdHJ1Y3Rvcih7IGFkZHJlc3MgfSkge1xuICAgICAgICBzdXBlcihgQWRkcmVzcyBcIiR7YWRkcmVzc31cIiBpcyBpbnZhbGlkLmAsIHtcbiAgICAgICAgICBtZXRhTWVzc2FnZXM6IFtcbiAgICAgICAgICAgIFwiLSBBZGRyZXNzIG11c3QgYmUgYSBoZXggdmFsdWUgb2YgMjAgYnl0ZXMgKDQwIGhleCBjaGFyYWN0ZXJzKS5cIixcbiAgICAgICAgICAgIFwiLSBBZGRyZXNzIG11c3QgbWF0Y2ggaXRzIGNoZWNrc3VtIGNvdW50ZXJwYXJ0LlwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBuYW1lOiBcIkludmFsaWRBZGRyZXNzRXJyb3JcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIExydU1hcCA9IGNsYXNzIGV4dGVuZHMgTWFwIHtcbiAgICAgIGNvbnN0cnVjdG9yKHNpemUzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1heFNpemVcIiwge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWF4U2l6ZSA9IHNpemUzO1xuICAgICAgfVxuICAgICAgZ2V0KGtleSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHN1cGVyLmdldChrZXkpO1xuICAgICAgICBpZiAoc3VwZXIuaGFzKGtleSkgJiYgdmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgICAgIHRoaXMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgc3VwZXIuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHN1cGVyLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgaWYgKHRoaXMubWF4U2l6ZSAmJiB0aGlzLnNpemUgPiB0aGlzLm1heFNpemUpIHtcbiAgICAgICAgICBjb25zdCBmaXJzdEtleSA9IHRoaXMua2V5cygpLm5leHQoKS52YWx1ZTtcbiAgICAgICAgICBpZiAoZmlyc3RLZXkpXG4gICAgICAgICAgICB0aGlzLmRlbGV0ZShmaXJzdEtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfTtcbiAgICBhZGRyZXNzUmVnZXggPSAvXjB4W2EtZkEtRjAtOV17NDB9JC87XG4gICAgaXNBZGRyZXNzQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IExydU1hcCg4MTkyKTtcbiAgICBjaGVja3N1bUFkZHJlc3NDYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTHJ1TWFwKDgxOTIpO1xuICAgIE5lZ2F0aXZlT2Zmc2V0RXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IoeyBvZmZzZXQgfSkge1xuICAgICAgICBzdXBlcihgT2Zmc2V0IFxcYCR7b2Zmc2V0fVxcYCBjYW5ub3QgYmUgbmVnYXRpdmUuYCwge1xuICAgICAgICAgIG5hbWU6IFwiTmVnYXRpdmVPZmZzZXRFcnJvclwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgUG9zaXRpb25PdXRPZkJvdW5kc0Vycm9yID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKHsgbGVuZ3RoLCBwb3NpdGlvbiB9KSB7XG4gICAgICAgIHN1cGVyKGBQb3NpdGlvbiBcXGAke3Bvc2l0aW9ufVxcYCBpcyBvdXQgb2YgYm91bmRzIChcXGAwIDwgcG9zaXRpb24gPCAke2xlbmd0aH1cXGApLmAsIHsgbmFtZTogXCJQb3NpdGlvbk91dE9mQm91bmRzRXJyb3JcIiB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIFJlY3Vyc2l2ZVJlYWRMaW1pdEV4Y2VlZGVkRXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IoeyBjb3VudCwgbGltaXQ6IGxpbWl0MiB9KSB7XG4gICAgICAgIHN1cGVyKGBSZWN1cnNpdmUgcmVhZCBsaW1pdCBvZiBcXGAke2xpbWl0Mn1cXGAgZXhjZWVkZWQgKHJlY3Vyc2l2ZSByZWFkIGNvdW50OiBcXGAke2NvdW50fVxcYCkuYCwgeyBuYW1lOiBcIlJlY3Vyc2l2ZVJlYWRMaW1pdEV4Y2VlZGVkRXJyb3JcIiB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHN0YXRpY0N1cnNvciA9IHtcbiAgICAgIGJ5dGVzOiBuZXcgVWludDhBcnJheSgpLFxuICAgICAgZGF0YVZpZXc6IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMCkpLFxuICAgICAgcG9zaXRpb246IDAsXG4gICAgICBwb3NpdGlvblJlYWRDb3VudDogLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSxcbiAgICAgIHJlY3Vyc2l2ZVJlYWRDb3VudDogMCxcbiAgICAgIHJlY3Vyc2l2ZVJlYWRMaW1pdDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgICAgYXNzZXJ0UmVhZExpbWl0KCkge1xuICAgICAgICBpZiAodGhpcy5yZWN1cnNpdmVSZWFkQ291bnQgPj0gdGhpcy5yZWN1cnNpdmVSZWFkTGltaXQpXG4gICAgICAgICAgdGhyb3cgbmV3IFJlY3Vyc2l2ZVJlYWRMaW1pdEV4Y2VlZGVkRXJyb3Ioe1xuICAgICAgICAgICAgY291bnQ6IHRoaXMucmVjdXJzaXZlUmVhZENvdW50ICsgMSxcbiAgICAgICAgICAgIGxpbWl0OiB0aGlzLnJlY3Vyc2l2ZVJlYWRMaW1pdFxuICAgICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGFzc2VydFBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPiB0aGlzLmJ5dGVzLmxlbmd0aCAtIDEpXG4gICAgICAgICAgdGhyb3cgbmV3IFBvc2l0aW9uT3V0T2ZCb3VuZHNFcnJvcih7XG4gICAgICAgICAgICBsZW5ndGg6IHRoaXMuYnl0ZXMubGVuZ3RoLFxuICAgICAgICAgICAgcG9zaXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBkZWNyZW1lbnRQb3NpdGlvbihvZmZzZXQpIHtcbiAgICAgICAgaWYgKG9mZnNldCA8IDApXG4gICAgICAgICAgdGhyb3cgbmV3IE5lZ2F0aXZlT2Zmc2V0RXJyb3IoeyBvZmZzZXQgfSk7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbiAtIG9mZnNldDtcbiAgICAgICAgdGhpcy5hc3NlcnRQb3NpdGlvbihwb3NpdGlvbik7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICAgIH0sXG4gICAgICBnZXRSZWFkQ291bnQocG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb25SZWFkQ291bnQuZ2V0KHBvc2l0aW9uIHx8IHRoaXMucG9zaXRpb24pIHx8IDA7XG4gICAgICB9LFxuICAgICAgaW5jcmVtZW50UG9zaXRpb24ob2Zmc2V0KSB7XG4gICAgICAgIGlmIChvZmZzZXQgPCAwKVxuICAgICAgICAgIHRocm93IG5ldyBOZWdhdGl2ZU9mZnNldEVycm9yKHsgb2Zmc2V0IH0pO1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMucG9zaXRpb24gKyBvZmZzZXQ7XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgICB9LFxuICAgICAgaW5zcGVjdEJ5dGUocG9zaXRpb25fKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25fID8/IHRoaXMucG9zaXRpb247XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgICByZXR1cm4gdGhpcy5ieXRlc1twb3NpdGlvbl07XG4gICAgICB9LFxuICAgICAgaW5zcGVjdEJ5dGVzKGxlbmd0aCwgcG9zaXRpb25fKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25fID8/IHRoaXMucG9zaXRpb247XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24ocG9zaXRpb24gKyBsZW5ndGggLSAxKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnl0ZXMuc3ViYXJyYXkocG9zaXRpb24sIHBvc2l0aW9uICsgbGVuZ3RoKTtcbiAgICAgIH0sXG4gICAgICBpbnNwZWN0VWludDgocG9zaXRpb25fKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25fID8/IHRoaXMucG9zaXRpb247XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgICByZXR1cm4gdGhpcy5ieXRlc1twb3NpdGlvbl07XG4gICAgICB9LFxuICAgICAgaW5zcGVjdFVpbnQxNihwb3NpdGlvbl8pIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvbl8gPz8gdGhpcy5wb3NpdGlvbjtcbiAgICAgICAgdGhpcy5hc3NlcnRQb3NpdGlvbihwb3NpdGlvbiArIDEpO1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhVmlldy5nZXRVaW50MTYocG9zaXRpb24pO1xuICAgICAgfSxcbiAgICAgIGluc3BlY3RVaW50MjQocG9zaXRpb25fKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25fID8/IHRoaXMucG9zaXRpb247XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24ocG9zaXRpb24gKyAyKTtcbiAgICAgICAgcmV0dXJuICh0aGlzLmRhdGFWaWV3LmdldFVpbnQxNihwb3NpdGlvbikgPDwgOCkgKyB0aGlzLmRhdGFWaWV3LmdldFVpbnQ4KHBvc2l0aW9uICsgMik7XG4gICAgICB9LFxuICAgICAgaW5zcGVjdFVpbnQzMihwb3NpdGlvbl8pIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvbl8gPz8gdGhpcy5wb3NpdGlvbjtcbiAgICAgICAgdGhpcy5hc3NlcnRQb3NpdGlvbihwb3NpdGlvbiArIDMpO1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhVmlldy5nZXRVaW50MzIocG9zaXRpb24pO1xuICAgICAgfSxcbiAgICAgIHB1c2hCeXRlKGJ5dGUpIHtcbiAgICAgICAgdGhpcy5hc3NlcnRQb3NpdGlvbih0aGlzLnBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5ieXRlc1t0aGlzLnBvc2l0aW9uXSA9IGJ5dGU7XG4gICAgICAgIHRoaXMucG9zaXRpb24rKztcbiAgICAgIH0sXG4gICAgICBwdXNoQnl0ZXMoYnl0ZXMyKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24odGhpcy5wb3NpdGlvbiArIGJ5dGVzMi5sZW5ndGggLSAxKTtcbiAgICAgICAgdGhpcy5ieXRlcy5zZXQoYnl0ZXMyLCB0aGlzLnBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSBieXRlczIubGVuZ3RoO1xuICAgICAgfSxcbiAgICAgIHB1c2hVaW50OCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmFzc2VydFBvc2l0aW9uKHRoaXMucG9zaXRpb24pO1xuICAgICAgICB0aGlzLmJ5dGVzW3RoaXMucG9zaXRpb25dID0gdmFsdWU7XG4gICAgICAgIHRoaXMucG9zaXRpb24rKztcbiAgICAgIH0sXG4gICAgICBwdXNoVWludDE2KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24odGhpcy5wb3NpdGlvbiArIDEpO1xuICAgICAgICB0aGlzLmRhdGFWaWV3LnNldFVpbnQxNih0aGlzLnBvc2l0aW9uLCB2YWx1ZSk7XG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gMjtcbiAgICAgIH0sXG4gICAgICBwdXNoVWludDI0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24odGhpcy5wb3NpdGlvbiArIDIpO1xuICAgICAgICB0aGlzLmRhdGFWaWV3LnNldFVpbnQxNih0aGlzLnBvc2l0aW9uLCB2YWx1ZSA+PiA4KTtcbiAgICAgICAgdGhpcy5kYXRhVmlldy5zZXRVaW50OCh0aGlzLnBvc2l0aW9uICsgMiwgdmFsdWUgJiB+NDI5NDk2NzA0MCk7XG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gMztcbiAgICAgIH0sXG4gICAgICBwdXNoVWludDMyKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24odGhpcy5wb3NpdGlvbiArIDMpO1xuICAgICAgICB0aGlzLmRhdGFWaWV3LnNldFVpbnQzMih0aGlzLnBvc2l0aW9uLCB2YWx1ZSk7XG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gNDtcbiAgICAgIH0sXG4gICAgICByZWFkQnl0ZSgpIHtcbiAgICAgICAgdGhpcy5hc3NlcnRSZWFkTGltaXQoKTtcbiAgICAgICAgdGhpcy5fdG91Y2goKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmluc3BlY3RCeXRlKCk7XG4gICAgICAgIHRoaXMucG9zaXRpb24rKztcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSxcbiAgICAgIHJlYWRCeXRlcyhsZW5ndGgsIHNpemUzKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0UmVhZExpbWl0KCk7XG4gICAgICAgIHRoaXMuX3RvdWNoKCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pbnNwZWN0Qnl0ZXMobGVuZ3RoKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSBzaXplMyA/PyBsZW5ndGg7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0sXG4gICAgICByZWFkVWludDgoKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0UmVhZExpbWl0KCk7XG4gICAgICAgIHRoaXMuX3RvdWNoKCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pbnNwZWN0VWludDgoKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSAxO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9LFxuICAgICAgcmVhZFVpbnQxNigpIHtcbiAgICAgICAgdGhpcy5hc3NlcnRSZWFkTGltaXQoKTtcbiAgICAgICAgdGhpcy5fdG91Y2goKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmluc3BlY3RVaW50MTYoKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSAyO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9LFxuICAgICAgcmVhZFVpbnQyNCgpIHtcbiAgICAgICAgdGhpcy5hc3NlcnRSZWFkTGltaXQoKTtcbiAgICAgICAgdGhpcy5fdG91Y2goKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmluc3BlY3RVaW50MjQoKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSAzO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9LFxuICAgICAgcmVhZFVpbnQzMigpIHtcbiAgICAgICAgdGhpcy5hc3NlcnRSZWFkTGltaXQoKTtcbiAgICAgICAgdGhpcy5fdG91Y2goKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmluc3BlY3RVaW50MzIoKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSA0O1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9LFxuICAgICAgZ2V0IHJlbWFpbmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnl0ZXMubGVuZ3RoIC0gdGhpcy5wb3NpdGlvbjtcbiAgICAgIH0sXG4gICAgICBzZXRQb3NpdGlvbihwb3NpdGlvbikge1xuICAgICAgICBjb25zdCBvbGRQb3NpdGlvbiA9IHRoaXMucG9zaXRpb247XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgICAgIHJldHVybiAoKSA9PiB0aGlzLnBvc2l0aW9uID0gb2xkUG9zaXRpb247XG4gICAgICB9LFxuICAgICAgX3RvdWNoKCkge1xuICAgICAgICBpZiAodGhpcy5yZWN1cnNpdmVSZWFkTGltaXQgPT09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSlcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5nZXRSZWFkQ291bnQoKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvblJlYWRDb3VudC5zZXQodGhpcy5wb3NpdGlvbiwgY291bnQgKyAxKTtcbiAgICAgICAgaWYgKGNvdW50ID4gMClcbiAgICAgICAgICB0aGlzLnJlY3Vyc2l2ZVJlYWRDb3VudCsrO1xuICAgICAgfVxuICAgIH07XG4gICAgaW50ZWdlclJlZ2V4MiA9IC9eKHU/aW50KSg4fDE2fDI0fDMyfDQwfDQ4fDU2fDY0fDcyfDgwfDg4fDk2fDEwNHwxMTJ8MTIwfDEyOHwxMzZ8MTQ0fDE1MnwxNjB8MTY4fDE3NnwxODR8MTkyfDIwMHwyMDh8MjE2fDIyNHwyMzJ8MjQwfDI0OHwyNTYpPyQvO1xuICAgIHNpemVPZkxlbmd0aCA9IDMyO1xuICAgIHNpemVPZk9mZnNldCA9IDMyO1xuICAgIHRvRXZlbnRTZWxlY3RvciA9IHRvU2lnbmF0dXJlSGFzaDtcbiAgICBnd2VpVW5pdHMgPSB7XG4gICAgICBldGhlcjogLTksXG4gICAgICB3ZWk6IDlcbiAgICB9O1xuICAgIGRvY3NQYXRoMyA9IFwiL2RvY3MvY29udHJhY3QvZW5jb2RlRnVuY3Rpb25EYXRhXCI7XG4gICAgRXhlY3V0aW9uUmV2ZXJ0ZWRFcnJvciA9IGNsYXNzIGV4dGVuZHMgQmFzZUVycm9yMyB7XG4gICAgICBjb25zdHJ1Y3Rvcih7IGNhdXNlLCBtZXNzYWdlIH0gPSB7fSkge1xuICAgICAgICBjb25zdCByZWFzb24gPSBtZXNzYWdlPy5yZXBsYWNlKFwiZXhlY3V0aW9uIHJldmVydGVkOiBcIiwgXCJcIik/LnJlcGxhY2UoXCJleGVjdXRpb24gcmV2ZXJ0ZWRcIiwgXCJcIik7XG4gICAgICAgIHN1cGVyKGBFeGVjdXRpb24gcmV2ZXJ0ZWQgJHtyZWFzb24gPyBgd2l0aCByZWFzb246ICR7cmVhc29ufWAgOiBcImZvciBhbiB1bmtub3duIHJlYXNvblwifS5gLCB7XG4gICAgICAgICAgY2F1c2UsXG4gICAgICAgICAgbmFtZTogXCJFeGVjdXRpb25SZXZlcnRlZEVycm9yXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXhlY3V0aW9uUmV2ZXJ0ZWRFcnJvciwgXCJjb2RlXCIsIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiAzXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV4ZWN1dGlvblJldmVydGVkRXJyb3IsIFwibm9kZU1lc3NhZ2VcIiwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IC9leGVjdXRpb24gcmV2ZXJ0ZWQvXG4gICAgfSk7XG4gICAgRmVlQ2FwVG9vSGlnaEVycm9yID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKHsgY2F1c2UsIG1heEZlZVBlckdhcyB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoYFRoZSBmZWUgY2FwIChcXGBtYXhGZWVQZXJHYXNcXGAke21heEZlZVBlckdhcyA/IGAgPSAke2Zvcm1hdEd3ZWkobWF4RmVlUGVyR2FzKX0gZ3dlaWAgOiBcIlwifSkgY2Fubm90IGJlIGhpZ2hlciB0aGFuIHRoZSBtYXhpbXVtIGFsbG93ZWQgdmFsdWUgKDJeMjU2LTEpLmAsIHtcbiAgICAgICAgICBjYXVzZSxcbiAgICAgICAgICBuYW1lOiBcIkZlZUNhcFRvb0hpZ2hFcnJvclwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZlZUNhcFRvb0hpZ2hFcnJvciwgXCJub2RlTWVzc2FnZVwiLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogL21heCBmZWUgcGVyIGdhcyBoaWdoZXIgdGhhbiAyXFxeMjU2LTF8ZmVlIGNhcCBoaWdoZXIgdGhhbiAyXFxeMjU2LTEvXG4gICAgfSk7XG4gICAgRmVlQ2FwVG9vTG93RXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IoeyBjYXVzZSwgbWF4RmVlUGVyR2FzIH0gPSB7fSkge1xuICAgICAgICBzdXBlcihgVGhlIGZlZSBjYXAgKFxcYG1heEZlZVBlckdhc1xcYCR7bWF4RmVlUGVyR2FzID8gYCA9ICR7Zm9ybWF0R3dlaShtYXhGZWVQZXJHYXMpfWAgOiBcIlwifSBnd2VpKSBjYW5ub3QgYmUgbG93ZXIgdGhhbiB0aGUgYmxvY2sgYmFzZSBmZWUuYCwge1xuICAgICAgICAgIGNhdXNlLFxuICAgICAgICAgIG5hbWU6IFwiRmVlQ2FwVG9vTG93RXJyb3JcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGZWVDYXBUb29Mb3dFcnJvciwgXCJub2RlTWVzc2FnZVwiLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogL21heCBmZWUgcGVyIGdhcyBsZXNzIHRoYW4gYmxvY2sgYmFzZSBmZWV8ZmVlIGNhcCBsZXNzIHRoYW4gYmxvY2sgYmFzZSBmZWV8dHJhbnNhY3Rpb24gaXMgb3V0ZGF0ZWQvXG4gICAgfSk7XG4gICAgTm9uY2VUb29IaWdoRXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IoeyBjYXVzZSwgbm9uY2UgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGBOb25jZSBwcm92aWRlZCBmb3IgdGhlIHRyYW5zYWN0aW9uICR7bm9uY2UgPyBgKCR7bm9uY2V9KSBgIDogXCJcIn1pcyBoaWdoZXIgdGhhbiB0aGUgbmV4dCBvbmUgZXhwZWN0ZWQuYCwgeyBjYXVzZSwgbmFtZTogXCJOb25jZVRvb0hpZ2hFcnJvclwiIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vbmNlVG9vSGlnaEVycm9yLCBcIm5vZGVNZXNzYWdlXCIsIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiAvbm9uY2UgdG9vIGhpZ2gvXG4gICAgfSk7XG4gICAgTm9uY2VUb29Mb3dFcnJvciA9IGNsYXNzIGV4dGVuZHMgQmFzZUVycm9yMyB7XG4gICAgICBjb25zdHJ1Y3Rvcih7IGNhdXNlLCBub25jZSB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoW1xuICAgICAgICAgIGBOb25jZSBwcm92aWRlZCBmb3IgdGhlIHRyYW5zYWN0aW9uICR7bm9uY2UgPyBgKCR7bm9uY2V9KSBgIDogXCJcIn1pcyBsb3dlciB0aGFuIHRoZSBjdXJyZW50IG5vbmNlIG9mIHRoZSBhY2NvdW50LmAsXG4gICAgICAgICAgXCJUcnkgaW5jcmVhc2luZyB0aGUgbm9uY2Ugb3IgZmluZCB0aGUgbGF0ZXN0IG5vbmNlIHdpdGggYGdldFRyYW5zYWN0aW9uQ291bnRgLlwiXG4gICAgICAgIF0uam9pbihcIlxcblwiKSwgeyBjYXVzZSwgbmFtZTogXCJOb25jZVRvb0xvd0Vycm9yXCIgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9uY2VUb29Mb3dFcnJvciwgXCJub2RlTWVzc2FnZVwiLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogL25vbmNlIHRvbyBsb3d8dHJhbnNhY3Rpb24gYWxyZWFkeSBpbXBvcnRlZHxhbHJlYWR5IGtub3duL1xuICAgIH0pO1xuICAgIE5vbmNlTWF4VmFsdWVFcnJvciA9IGNsYXNzIGV4dGVuZHMgQmFzZUVycm9yMyB7XG4gICAgICBjb25zdHJ1Y3Rvcih7IGNhdXNlLCBub25jZSB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoYE5vbmNlIHByb3ZpZGVkIGZvciB0aGUgdHJhbnNhY3Rpb24gJHtub25jZSA/IGAoJHtub25jZX0pIGAgOiBcIlwifWV4Y2VlZHMgdGhlIG1heGltdW0gYWxsb3dlZCBub25jZS5gLCB7IGNhdXNlLCBuYW1lOiBcIk5vbmNlTWF4VmFsdWVFcnJvclwiIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vbmNlTWF4VmFsdWVFcnJvciwgXCJub2RlTWVzc2FnZVwiLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogL25vbmNlIGhhcyBtYXggdmFsdWUvXG4gICAgfSk7XG4gICAgSW5zdWZmaWNpZW50RnVuZHNFcnJvciA9IGNsYXNzIGV4dGVuZHMgQmFzZUVycm9yMyB7XG4gICAgICBjb25zdHJ1Y3Rvcih7IGNhdXNlIH0gPSB7fSkge1xuICAgICAgICBzdXBlcihbXG4gICAgICAgICAgXCJUaGUgdG90YWwgY29zdCAoZ2FzICogZ2FzIGZlZSArIHZhbHVlKSBvZiBleGVjdXRpbmcgdGhpcyB0cmFuc2FjdGlvbiBleGNlZWRzIHRoZSBiYWxhbmNlIG9mIHRoZSBhY2NvdW50LlwiXG4gICAgICAgIF0uam9pbihcIlxcblwiKSwge1xuICAgICAgICAgIGNhdXNlLFxuICAgICAgICAgIG1ldGFNZXNzYWdlczogW1xuICAgICAgICAgICAgXCJUaGlzIGVycm9yIGNvdWxkIGFyaXNlIHdoZW4gdGhlIGFjY291bnQgZG9lcyBub3QgaGF2ZSBlbm91Z2ggZnVuZHMgdG86XCIsXG4gICAgICAgICAgICBcIiAtIHBheSBmb3IgdGhlIHRvdGFsIGdhcyBmZWUsXCIsXG4gICAgICAgICAgICBcIiAtIHBheSBmb3IgdGhlIHZhbHVlIHRvIHNlbmQuXCIsXG4gICAgICAgICAgICBcIiBcIixcbiAgICAgICAgICAgIFwiVGhlIGNvc3Qgb2YgdGhlIHRyYW5zYWN0aW9uIGlzIGNhbGN1bGF0ZWQgYXMgYGdhcyAqIGdhcyBmZWUgKyB2YWx1ZWAsIHdoZXJlOlwiLFxuICAgICAgICAgICAgXCIgLSBgZ2FzYCBpcyB0aGUgYW1vdW50IG9mIGdhcyBuZWVkZWQgZm9yIHRyYW5zYWN0aW9uIHRvIGV4ZWN1dGUsXCIsXG4gICAgICAgICAgICBcIiAtIGBnYXMgZmVlYCBpcyB0aGUgZ2FzIGZlZSxcIixcbiAgICAgICAgICAgIFwiIC0gYHZhbHVlYCBpcyB0aGUgYW1vdW50IG9mIGV0aGVyIHRvIHNlbmQgdG8gdGhlIHJlY2lwaWVudC5cIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgbmFtZTogXCJJbnN1ZmZpY2llbnRGdW5kc0Vycm9yXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSW5zdWZmaWNpZW50RnVuZHNFcnJvciwgXCJub2RlTWVzc2FnZVwiLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogL2luc3VmZmljaWVudCBmdW5kc3xleGNlZWRzIHRyYW5zYWN0aW9uIHNlbmRlciBhY2NvdW50IGJhbGFuY2UvXG4gICAgfSk7XG4gICAgSW50cmluc2ljR2FzVG9vSGlnaEVycm9yID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKHsgY2F1c2UsIGdhcyB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoYFRoZSBhbW91bnQgb2YgZ2FzICR7Z2FzID8gYCgke2dhc30pIGAgOiBcIlwifXByb3ZpZGVkIGZvciB0aGUgdHJhbnNhY3Rpb24gZXhjZWVkcyB0aGUgbGltaXQgYWxsb3dlZCBmb3IgdGhlIGJsb2NrLmAsIHtcbiAgICAgICAgICBjYXVzZSxcbiAgICAgICAgICBuYW1lOiBcIkludHJpbnNpY0dhc1Rvb0hpZ2hFcnJvclwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEludHJpbnNpY0dhc1Rvb0hpZ2hFcnJvciwgXCJub2RlTWVzc2FnZVwiLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogL2ludHJpbnNpYyBnYXMgdG9vIGhpZ2h8Z2FzIGxpbWl0IHJlYWNoZWQvXG4gICAgfSk7XG4gICAgSW50cmluc2ljR2FzVG9vTG93RXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IoeyBjYXVzZSwgZ2FzIH0gPSB7fSkge1xuICAgICAgICBzdXBlcihgVGhlIGFtb3VudCBvZiBnYXMgJHtnYXMgPyBgKCR7Z2FzfSkgYCA6IFwiXCJ9cHJvdmlkZWQgZm9yIHRoZSB0cmFuc2FjdGlvbiBpcyB0b28gbG93LmAsIHtcbiAgICAgICAgICBjYXVzZSxcbiAgICAgICAgICBuYW1lOiBcIkludHJpbnNpY0dhc1Rvb0xvd0Vycm9yXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSW50cmluc2ljR2FzVG9vTG93RXJyb3IsIFwibm9kZU1lc3NhZ2VcIiwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IC9pbnRyaW5zaWMgZ2FzIHRvbyBsb3cvXG4gICAgfSk7XG4gICAgVHJhbnNhY3Rpb25UeXBlTm90U3VwcG9ydGVkRXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IoeyBjYXVzZSB9KSB7XG4gICAgICAgIHN1cGVyKFwiVGhlIHRyYW5zYWN0aW9uIHR5cGUgaXMgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBjaGFpbi5cIiwge1xuICAgICAgICAgIGNhdXNlLFxuICAgICAgICAgIG5hbWU6IFwiVHJhbnNhY3Rpb25UeXBlTm90U3VwcG9ydGVkRXJyb3JcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2FjdGlvblR5cGVOb3RTdXBwb3J0ZWRFcnJvciwgXCJub2RlTWVzc2FnZVwiLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogL3RyYW5zYWN0aW9uIHR5cGUgbm90IHZhbGlkL1xuICAgIH0pO1xuICAgIFRpcEFib3ZlRmVlQ2FwRXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IoeyBjYXVzZSwgbWF4UHJpb3JpdHlGZWVQZXJHYXMsIG1heEZlZVBlckdhcyB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoW1xuICAgICAgICAgIGBUaGUgcHJvdmlkZWQgdGlwIChcXGBtYXhQcmlvcml0eUZlZVBlckdhc1xcYCR7bWF4UHJpb3JpdHlGZWVQZXJHYXMgPyBgID0gJHtmb3JtYXRHd2VpKG1heFByaW9yaXR5RmVlUGVyR2FzKX0gZ3dlaWAgOiBcIlwifSkgY2Fubm90IGJlIGhpZ2hlciB0aGFuIHRoZSBmZWUgY2FwIChcXGBtYXhGZWVQZXJHYXNcXGAke21heEZlZVBlckdhcyA/IGAgPSAke2Zvcm1hdEd3ZWkobWF4RmVlUGVyR2FzKX0gZ3dlaWAgOiBcIlwifSkuYFxuICAgICAgICBdLmpvaW4oXCJcXG5cIiksIHtcbiAgICAgICAgICBjYXVzZSxcbiAgICAgICAgICBuYW1lOiBcIlRpcEFib3ZlRmVlQ2FwRXJyb3JcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUaXBBYm92ZUZlZUNhcEVycm9yLCBcIm5vZGVNZXNzYWdlXCIsIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiAvbWF4IHByaW9yaXR5IGZlZSBwZXIgZ2FzIGhpZ2hlciB0aGFuIG1heCBmZWUgcGVyIGdhc3x0aXAgaGlnaGVyIHRoYW4gZmVlIGNhcC9cbiAgICB9KTtcbiAgICBtYXhJbnQ4ID0gMm4gKiogKDhuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50MTYgPSAybiAqKiAoMTZuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50MjQgPSAybiAqKiAoMjRuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50MzIgPSAybiAqKiAoMzJuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50NDAgPSAybiAqKiAoNDBuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50NDggPSAybiAqKiAoNDhuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50NTYgPSAybiAqKiAoNTZuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50NjQgPSAybiAqKiAoNjRuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50NzIgPSAybiAqKiAoNzJuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50ODAgPSAybiAqKiAoODBuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50ODggPSAybiAqKiAoODhuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50OTYgPSAybiAqKiAoOTZuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50MTA0ID0gMm4gKiogKDEwNG4gLSAxbikgLSAxbjtcbiAgICBtYXhJbnQxMTIgPSAybiAqKiAoMTEybiAtIDFuKSAtIDFuO1xuICAgIG1heEludDEyMCA9IDJuICoqICgxMjBuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50MTI4ID0gMm4gKiogKDEyOG4gLSAxbikgLSAxbjtcbiAgICBtYXhJbnQxMzYgPSAybiAqKiAoMTM2biAtIDFuKSAtIDFuO1xuICAgIG1heEludDE0NCA9IDJuICoqICgxNDRuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50MTUyID0gMm4gKiogKDE1Mm4gLSAxbikgLSAxbjtcbiAgICBtYXhJbnQxNjAgPSAybiAqKiAoMTYwbiAtIDFuKSAtIDFuO1xuICAgIG1heEludDE2OCA9IDJuICoqICgxNjhuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50MTc2ID0gMm4gKiogKDE3Nm4gLSAxbikgLSAxbjtcbiAgICBtYXhJbnQxODQgPSAybiAqKiAoMTg0biAtIDFuKSAtIDFuO1xuICAgIG1heEludDE5MiA9IDJuICoqICgxOTJuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50MjAwID0gMm4gKiogKDIwMG4gLSAxbikgLSAxbjtcbiAgICBtYXhJbnQyMDggPSAybiAqKiAoMjA4biAtIDFuKSAtIDFuO1xuICAgIG1heEludDIxNiA9IDJuICoqICgyMTZuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50MjI0ID0gMm4gKiogKDIyNG4gLSAxbikgLSAxbjtcbiAgICBtYXhJbnQyMzIgPSAybiAqKiAoMjMybiAtIDFuKSAtIDFuO1xuICAgIG1heEludDI0MCA9IDJuICoqICgyNDBuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50MjQ4ID0gMm4gKiogKDI0OG4gLSAxbikgLSAxbjtcbiAgICBtYXhJbnQyNTYgPSAybiAqKiAoMjU2biAtIDFuKSAtIDFuO1xuICAgIG1pbkludDggPSAtKDJuICoqICg4biAtIDFuKSk7XG4gICAgbWluSW50MTYgPSAtKDJuICoqICgxNm4gLSAxbikpO1xuICAgIG1pbkludDI0ID0gLSgybiAqKiAoMjRuIC0gMW4pKTtcbiAgICBtaW5JbnQzMiA9IC0oMm4gKiogKDMybiAtIDFuKSk7XG4gICAgbWluSW50NDAgPSAtKDJuICoqICg0MG4gLSAxbikpO1xuICAgIG1pbkludDQ4ID0gLSgybiAqKiAoNDhuIC0gMW4pKTtcbiAgICBtaW5JbnQ1NiA9IC0oMm4gKiogKDU2biAtIDFuKSk7XG4gICAgbWluSW50NjQgPSAtKDJuICoqICg2NG4gLSAxbikpO1xuICAgIG1pbkludDcyID0gLSgybiAqKiAoNzJuIC0gMW4pKTtcbiAgICBtaW5JbnQ4MCA9IC0oMm4gKiogKDgwbiAtIDFuKSk7XG4gICAgbWluSW50ODggPSAtKDJuICoqICg4OG4gLSAxbikpO1xuICAgIG1pbkludDk2ID0gLSgybiAqKiAoOTZuIC0gMW4pKTtcbiAgICBtaW5JbnQxMDQgPSAtKDJuICoqICgxMDRuIC0gMW4pKTtcbiAgICBtaW5JbnQxMTIgPSAtKDJuICoqICgxMTJuIC0gMW4pKTtcbiAgICBtaW5JbnQxMjAgPSAtKDJuICoqICgxMjBuIC0gMW4pKTtcbiAgICBtaW5JbnQxMjggPSAtKDJuICoqICgxMjhuIC0gMW4pKTtcbiAgICBtaW5JbnQxMzYgPSAtKDJuICoqICgxMzZuIC0gMW4pKTtcbiAgICBtaW5JbnQxNDQgPSAtKDJuICoqICgxNDRuIC0gMW4pKTtcbiAgICBtaW5JbnQxNTIgPSAtKDJuICoqICgxNTJuIC0gMW4pKTtcbiAgICBtaW5JbnQxNjAgPSAtKDJuICoqICgxNjBuIC0gMW4pKTtcbiAgICBtaW5JbnQxNjggPSAtKDJuICoqICgxNjhuIC0gMW4pKTtcbiAgICBtaW5JbnQxNzYgPSAtKDJuICoqICgxNzZuIC0gMW4pKTtcbiAgICBtaW5JbnQxODQgPSAtKDJuICoqICgxODRuIC0gMW4pKTtcbiAgICBtaW5JbnQxOTIgPSAtKDJuICoqICgxOTJuIC0gMW4pKTtcbiAgICBtaW5JbnQyMDAgPSAtKDJuICoqICgyMDBuIC0gMW4pKTtcbiAgICBtaW5JbnQyMDggPSAtKDJuICoqICgyMDhuIC0gMW4pKTtcbiAgICBtaW5JbnQyMTYgPSAtKDJuICoqICgyMTZuIC0gMW4pKTtcbiAgICBtaW5JbnQyMjQgPSAtKDJuICoqICgyMjRuIC0gMW4pKTtcbiAgICBtaW5JbnQyMzIgPSAtKDJuICoqICgyMzJuIC0gMW4pKTtcbiAgICBtaW5JbnQyNDAgPSAtKDJuICoqICgyNDBuIC0gMW4pKTtcbiAgICBtaW5JbnQyNDggPSAtKDJuICoqICgyNDhuIC0gMW4pKTtcbiAgICBtaW5JbnQyNTYgPSAtKDJuICoqICgyNTZuIC0gMW4pKTtcbiAgICBtYXhVaW50OCA9IDJuICoqIDhuIC0gMW47XG4gICAgbWF4VWludDE2ID0gMm4gKiogMTZuIC0gMW47XG4gICAgbWF4VWludDI0ID0gMm4gKiogMjRuIC0gMW47XG4gICAgbWF4VWludDMyID0gMm4gKiogMzJuIC0gMW47XG4gICAgbWF4VWludDQwID0gMm4gKiogNDBuIC0gMW47XG4gICAgbWF4VWludDQ4ID0gMm4gKiogNDhuIC0gMW47XG4gICAgbWF4VWludDU2ID0gMm4gKiogNTZuIC0gMW47XG4gICAgbWF4VWludDY0ID0gMm4gKiogNjRuIC0gMW47XG4gICAgbWF4VWludDcyID0gMm4gKiogNzJuIC0gMW47XG4gICAgbWF4VWludDgwID0gMm4gKiogODBuIC0gMW47XG4gICAgbWF4VWludDg4ID0gMm4gKiogODhuIC0gMW47XG4gICAgbWF4VWludDk2ID0gMm4gKiogOTZuIC0gMW47XG4gICAgbWF4VWludDEwNCA9IDJuICoqIDEwNG4gLSAxbjtcbiAgICBtYXhVaW50MTEyID0gMm4gKiogMTEybiAtIDFuO1xuICAgIG1heFVpbnQxMjAgPSAybiAqKiAxMjBuIC0gMW47XG4gICAgbWF4VWludDEyOCA9IDJuICoqIDEyOG4gLSAxbjtcbiAgICBtYXhVaW50MTM2ID0gMm4gKiogMTM2biAtIDFuO1xuICAgIG1heFVpbnQxNDQgPSAybiAqKiAxNDRuIC0gMW47XG4gICAgbWF4VWludDE1MiA9IDJuICoqIDE1Mm4gLSAxbjtcbiAgICBtYXhVaW50MTYwID0gMm4gKiogMTYwbiAtIDFuO1xuICAgIG1heFVpbnQxNjggPSAybiAqKiAxNjhuIC0gMW47XG4gICAgbWF4VWludDE3NiA9IDJuICoqIDE3Nm4gLSAxbjtcbiAgICBtYXhVaW50MTg0ID0gMm4gKiogMTg0biAtIDFuO1xuICAgIG1heFVpbnQxOTIgPSAybiAqKiAxOTJuIC0gMW47XG4gICAgbWF4VWludDIwMCA9IDJuICoqIDIwMG4gLSAxbjtcbiAgICBtYXhVaW50MjA4ID0gMm4gKiogMjA4biAtIDFuO1xuICAgIG1heFVpbnQyMTYgPSAybiAqKiAyMTZuIC0gMW47XG4gICAgbWF4VWludDIyNCA9IDJuICoqIDIyNG4gLSAxbjtcbiAgICBtYXhVaW50MjMyID0gMm4gKiogMjMybiAtIDFuO1xuICAgIG1heFVpbnQyNDAgPSAybiAqKiAyNDBuIC0gMW47XG4gICAgbWF4VWludDI0OCA9IDJuICoqIDI0OG4gLSAxbjtcbiAgICBtYXhVaW50MjU2ID0gMm4gKiogMjU2biAtIDFuO1xuICB9XG59KTtcblxuLyogLi4vb3JjaGVzdHJhdGlvbi9zcmMvdmVuZG9yL3ZpZW0vY2h1bmstWE40TFVPSUguanMqL1xudmFyIGhhc0hleEJ1aWx0aW47XG52YXIgaW5pdF9jaHVua19YTjRMVU9JSCA9IF9fZXNtKHtcbiAgXCIuLi9vcmNoZXN0cmF0aW9uL3NyYy92ZW5kb3IvdmllbS9jaHVuay1YTjRMVU9JSC5qc1wiKCkge1xuICAgIGhhc0hleEJ1aWx0aW4gPSAvKiBAdHMtaWdub3JlKi9cbiAgICB0eXBlb2YgVWludDhBcnJheS5mcm9tKFtdKS50b0hleCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBVaW50OEFycmF5LmZyb21IZXggPT09IFwiZnVuY3Rpb25cIjtcbiAgfVxufSk7XG5cbi8qIC4uL29yY2hlc3RyYXRpb24vc3JjL3ZlbmRvci92aWVtL2NodW5rLTRWTlM1V1BNLmpzKi9cbnZhciBpbml0X2NodW5rXzRWTlM1V1BNID0gX19lc20oe1xuICBcIi4uL29yY2hlc3RyYXRpb24vc3JjL3ZlbmRvci92aWVtL2NodW5rLTRWTlM1V1BNLmpzXCIoKSB7XG4gIH1cbn0pO1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvYmVjaDMyL2Rpc3QvaW5kZXguanMqL1xudmFyIHJlcXVpcmVfZGlzdCA9IF9fY29tbW9uSlMoe1xuICBcIi4uLy4uL25vZGVfbW9kdWxlcy9iZWNoMzIvZGlzdC9pbmRleC5qc1wiKGV4cG9ydHMpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4gICAgZXhwb3J0cy5iZWNoMzJtID0gZXhwb3J0cy5iZWNoMzIgPSB2b2lkIDA7XG4gICAgdmFyIEFMUEhBQkVUMiA9IFwicXB6cnk5eDhnZjJ0dmR3MHMzam41NGtoY2U2bXVhN2xcIjtcbiAgICB2YXIgQUxQSEFCRVRfTUFQID0ge307XG4gICAgZm9yIChsZXQgeiA9IDA7IHogPCBBTFBIQUJFVDIubGVuZ3RoOyB6KyspIHtcbiAgICAgIGNvbnN0IHggPSBBTFBIQUJFVDIuY2hhckF0KHopO1xuICAgICAgQUxQSEFCRVRfTUFQW3hdID0gejtcbiAgICB9XG4gICAgZnVuY3Rpb24gcG9seW1vZFN0ZXAocHJlKSB7XG4gICAgICBjb25zdCBiMyA9IHByZSA+PiAyNTtcbiAgICAgIHJldHVybiAocHJlICYgMzM1NTQ0MzEpIDw8IDUgXiAtKGIzID4+IDAgJiAxKSAmIDk5NjgyNTAxMCBeIC0oYjMgPj4gMSAmIDEpICYgNjQyODEzNTQ5IF4gLShiMyA+PiAyICYgMSkgJiA1MTM4NzQ0MjYgXiAtKGIzID4+IDMgJiAxKSAmIDEwMjc3NDg4MjkgXiAtKGIzID4+IDQgJiAxKSAmIDcwNTk3OTA1OTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJlZml4Q2hrKHByZWZpeCkge1xuICAgICAgbGV0IGNoayA9IDE7XG4gICAgICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgcHJlZml4Lmxlbmd0aDsgKytpMykge1xuICAgICAgICBjb25zdCBjMiA9IHByZWZpeC5jaGFyQ29kZUF0KGkzKTtcbiAgICAgICAgaWYgKGMyIDwgMzMgfHwgYzIgPiAxMjYpXG4gICAgICAgICAgcmV0dXJuIFwiSW52YWxpZCBwcmVmaXggKFwiICsgcHJlZml4ICsgXCIpXCI7XG4gICAgICAgIGNoayA9IHBvbHltb2RTdGVwKGNoaykgXiBjMiA+PiA1O1xuICAgICAgfVxuICAgICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKTtcbiAgICAgIGZvciAobGV0IGkzID0gMDsgaTMgPCBwcmVmaXgubGVuZ3RoOyArK2kzKSB7XG4gICAgICAgIGNvbnN0IHYyID0gcHJlZml4LmNoYXJDb2RlQXQoaTMpO1xuICAgICAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4gdjIgJiAzMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjaGs7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbnZlcnQoZGF0YSwgaW5CaXRzLCBvdXRCaXRzLCBwYWQpIHtcbiAgICAgIGxldCB2YWx1ZSA9IDA7XG4gICAgICBsZXQgYml0cyA9IDA7XG4gICAgICBjb25zdCBtYXhWID0gKDEgPDwgb3V0Qml0cykgLSAxO1xuICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgZGF0YS5sZW5ndGg7ICsraTMpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSA8PCBpbkJpdHMgfCBkYXRhW2kzXTtcbiAgICAgICAgYml0cyArPSBpbkJpdHM7XG4gICAgICAgIHdoaWxlIChiaXRzID49IG91dEJpdHMpIHtcbiAgICAgICAgICBiaXRzIC09IG91dEJpdHM7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUgPj4gYml0cyAmIG1heFYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFkKSB7XG4gICAgICAgIGlmIChiaXRzID4gMCkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlIDw8IG91dEJpdHMgLSBiaXRzICYgbWF4Vik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChiaXRzID49IGluQml0cylcbiAgICAgICAgICByZXR1cm4gXCJFeGNlc3MgcGFkZGluZ1wiO1xuICAgICAgICBpZiAodmFsdWUgPDwgb3V0Qml0cyAtIGJpdHMgJiBtYXhWKVxuICAgICAgICAgIHJldHVybiBcIk5vbi16ZXJvIHBhZGRpbmdcIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRvV29yZHMoYnl0ZXMyKSB7XG4gICAgICByZXR1cm4gY29udmVydChieXRlczIsIDgsIDUsIHRydWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmcm9tV29yZHNVbnNhZmUod29yZHMpIHtcbiAgICAgIGNvbnN0IHJlcyA9IGNvbnZlcnQod29yZHMsIDUsIDgsIGZhbHNlKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlcykpXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZyb21Xb3Jkcyh3b3Jkcykge1xuICAgICAgY29uc3QgcmVzID0gY29udmVydCh3b3JkcywgNSwgOCwgZmFsc2UpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzKSlcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIHRocm93IG5ldyBFcnJvcihyZXMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRMaWJyYXJ5RnJvbUVuY29kaW5nKGVuY29kaW5nKSB7XG4gICAgICBsZXQgRU5DT0RJTkdfQ09OU1Q7XG4gICAgICBpZiAoZW5jb2RpbmcgPT09IFwiYmVjaDMyXCIpIHtcbiAgICAgICAgRU5DT0RJTkdfQ09OU1QgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgRU5DT0RJTkdfQ09OU1QgPSA3MzQ1Mzk5Mzk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBlbmNvZGUocHJlZml4LCB3b3JkcywgTElNSVQpIHtcbiAgICAgICAgTElNSVQgPSBMSU1JVCB8fCA5MDtcbiAgICAgICAgaWYgKHByZWZpeC5sZW5ndGggKyA3ICsgd29yZHMubGVuZ3RoID4gTElNSVQpXG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4Y2VlZHMgbGVuZ3RoIGxpbWl0XCIpO1xuICAgICAgICBwcmVmaXggPSBwcmVmaXgudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgbGV0IGNoayA9IHByZWZpeENoayhwcmVmaXgpO1xuICAgICAgICBpZiAodHlwZW9mIGNoayA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoY2hrKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHByZWZpeCArIFwiMVwiO1xuICAgICAgICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgd29yZHMubGVuZ3RoOyArK2kzKSB7XG4gICAgICAgICAgY29uc3QgeCA9IHdvcmRzW2kzXTtcbiAgICAgICAgICBpZiAoeCA+PiA1ICE9PSAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm9uIDUtYml0IHdvcmRcIik7XG4gICAgICAgICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKSBeIHg7XG4gICAgICAgICAgcmVzdWx0ICs9IEFMUEhBQkVUMi5jaGFyQXQoeCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IDY7ICsraTMpIHtcbiAgICAgICAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspO1xuICAgICAgICB9XG4gICAgICAgIGNoayBePSBFTkNPRElOR19DT05TVDtcbiAgICAgICAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IDY7ICsraTMpIHtcbiAgICAgICAgICBjb25zdCB2MiA9IGNoayA+PiAoNSAtIGkzKSAqIDUgJiAzMTtcbiAgICAgICAgICByZXN1bHQgKz0gQUxQSEFCRVQyLmNoYXJBdCh2Mik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIF9fZGVjb2RlKHN0ciwgTElNSVQpIHtcbiAgICAgICAgTElNSVQgPSBMSU1JVCB8fCA5MDtcbiAgICAgICAgaWYgKHN0ci5sZW5ndGggPCA4KVxuICAgICAgICAgIHJldHVybiBzdHIgKyBcIiB0b28gc2hvcnRcIjtcbiAgICAgICAgaWYgKHN0ci5sZW5ndGggPiBMSU1JVClcbiAgICAgICAgICByZXR1cm4gXCJFeGNlZWRzIGxlbmd0aCBsaW1pdFwiO1xuICAgICAgICBjb25zdCBsb3dlcmVkID0gc3RyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IHVwcGVyZWQgPSBzdHIudG9VcHBlckNhc2UoKTtcbiAgICAgICAgaWYgKHN0ciAhPT0gbG93ZXJlZCAmJiBzdHIgIT09IHVwcGVyZWQpXG4gICAgICAgICAgcmV0dXJuIFwiTWl4ZWQtY2FzZSBzdHJpbmcgXCIgKyBzdHI7XG4gICAgICAgIHN0ciA9IGxvd2VyZWQ7XG4gICAgICAgIGNvbnN0IHNwbGl0MiA9IHN0ci5sYXN0SW5kZXhPZihcIjFcIik7XG4gICAgICAgIGlmIChzcGxpdDIgPT09IC0xKVxuICAgICAgICAgIHJldHVybiBcIk5vIHNlcGFyYXRvciBjaGFyYWN0ZXIgZm9yIFwiICsgc3RyO1xuICAgICAgICBpZiAoc3BsaXQyID09PSAwKVxuICAgICAgICAgIHJldHVybiBcIk1pc3NpbmcgcHJlZml4IGZvciBcIiArIHN0cjtcbiAgICAgICAgY29uc3QgcHJlZml4ID0gc3RyLnNsaWNlKDAsIHNwbGl0Mik7XG4gICAgICAgIGNvbnN0IHdvcmRDaGFycyA9IHN0ci5zbGljZShzcGxpdDIgKyAxKTtcbiAgICAgICAgaWYgKHdvcmRDaGFycy5sZW5ndGggPCA2KVxuICAgICAgICAgIHJldHVybiBcIkRhdGEgdG9vIHNob3J0XCI7XG4gICAgICAgIGxldCBjaGsgPSBwcmVmaXhDaGsocHJlZml4KTtcbiAgICAgICAgaWYgKHR5cGVvZiBjaGsgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgcmV0dXJuIGNoaztcbiAgICAgICAgY29uc3Qgd29yZHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IHdvcmRDaGFycy5sZW5ndGg7ICsraTMpIHtcbiAgICAgICAgICBjb25zdCBjMiA9IHdvcmRDaGFycy5jaGFyQXQoaTMpO1xuICAgICAgICAgIGNvbnN0IHYyID0gQUxQSEFCRVRfTUFQW2MyXTtcbiAgICAgICAgICBpZiAodjIgPT09IHZvaWQgMClcbiAgICAgICAgICAgIHJldHVybiBcIlVua25vd24gY2hhcmFjdGVyIFwiICsgYzI7XG4gICAgICAgICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKSBeIHYyO1xuICAgICAgICAgIGlmIChpMyArIDYgPj0gd29yZENoYXJzLmxlbmd0aClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIHdvcmRzLnB1c2godjIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGsgIT09IEVOQ09ESU5HX0NPTlNUKVxuICAgICAgICAgIHJldHVybiBcIkludmFsaWQgY2hlY2tzdW0gZm9yIFwiICsgc3RyO1xuICAgICAgICByZXR1cm4geyBwcmVmaXgsIHdvcmRzIH07XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBkZWNvZGVVbnNhZmUoc3RyLCBMSU1JVCkge1xuICAgICAgICBjb25zdCByZXMgPSBfX2RlY29kZShzdHIsIExJTUlUKTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXMgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGRlY29kZShzdHIsIExJTUlUKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IF9fZGVjb2RlKHN0ciwgTElNSVQpO1xuICAgICAgICBpZiAodHlwZW9mIHJlcyA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRlY29kZVVuc2FmZSxcbiAgICAgICAgZGVjb2RlLFxuICAgICAgICBlbmNvZGUsXG4gICAgICAgIHRvV29yZHMsXG4gICAgICAgIGZyb21Xb3Jkc1Vuc2FmZSxcbiAgICAgICAgZnJvbVdvcmRzXG4gICAgICB9O1xuICAgIH1cbiAgICBleHBvcnRzLmJlY2gzMiA9IGdldExpYnJhcnlGcm9tRW5jb2RpbmcoXCJiZWNoMzJcIik7XG4gICAgZXhwb3J0cy5iZWNoMzJtID0gZ2V0TGlicmFyeUZyb21FbmNvZGluZyhcImJlY2gzMm1cIik7XG4gIH1cbn0pO1xuXG4vKiAuLi9pbnRlcm5hbC9zcmMvY29uZmlnLmpzKi9cbnZhciBCcmlkZ2VJZCA9IChcbiAgLyoqIEB0eXBlIHtjb25zdH0gKi9cbiAge1xuICAgIEJBTks6IFwiYmFua1wiLFxuICAgIENPUkU6IFwiY29yZVwiLFxuICAgIERJQkM6IFwiZGliY1wiLFxuICAgIFNUT1JBR0U6IFwic3RvcmFnZVwiLFxuICAgIFBST1ZJU0lPTjogXCJwcm92aXNpb25cIixcbiAgICBQUk9WSVNJT05fU01BUlRfV0FMTEVUOiBcInByb3Zpc2lvbldhbGxldFwiLFxuICAgIFZMT0NBTENIQUlOOiBcInZsb2NhbGNoYWluXCIsXG4gICAgVlRSQU5TRkVSOiBcInZ0cmFuc2ZlclwiLFxuICAgIFdBTExFVDogXCJ3YWxsZXRcIlxuICB9XG4pO1xuaGFyZGVuKEJyaWRnZUlkKTtcbnZhciBDb3Ntb3NJbml0S2V5VG9CcmlkZ2VJZCA9IHtcbiAgdmJhbmtQb3J0OiBcImJhbmtcIixcbiAgdmliY1BvcnQ6IFwiZGliY1wiXG59O1xuaGFyZGVuKENvc21vc0luaXRLZXlUb0JyaWRnZUlkKTtcbnZhciBXYWxsZXROYW1lID0gKFxuICAvKiogQHR5cGUge2NvbnN0fSAqL1xuICB7XG4gICAgZGVwb3NpdEZhY2V0OiBcImRlcG9zaXRGYWNldFwiXG4gIH1cbik7XG5oYXJkZW4oV2FsbGV0TmFtZSk7XG52YXIgVkJhbmtBY2NvdW50ID0gKFxuICAvKiogQHR5cGUge2NvbnN0fSAqL1xuICB7XG4gICAgcmVzZXJ2ZToge1xuICAgICAgbW9kdWxlOiBcInZiYW5rL3Jlc2VydmVcIixcbiAgICAgIGFkZHJlc3M6IFwiYWdvcmljMWFlMGxtdHpsZ3JjbmxhOXhqa3BhYXJxNWQ1ZGZlejYzaDNudWNsXCJcbiAgICB9LFxuICAgIHByb3Zpc2lvbjoge1xuICAgICAgbW9kdWxlOiBcInZiYW5rL3Byb3Zpc2lvblwiLFxuICAgICAgYWRkcmVzczogXCJhZ29yaWMxbWVnenl0ZzY1Y3lyZ3pzNmZ2enhncmNxdnd3bDd1Z3B0NjIzNDZcIlxuICAgIH1cbiAgfVxuKTtcbmhhcmRlbihWQmFua0FjY291bnQpO1xuXG4vKiAuLi9pbnRlcm5hbC9zcmMvZGVidWcuanMqL1xudmFyIGRlYnVnSW5zdGFuY2UgPSAxO1xudmFyIG1ha2VUcmFjZXIgPSAobGFiZWwsIGVuYWJsZSA9IHRydWUpID0+IHtcbiAgY29uc3Qgc3ViID0gKHN1YkxhYmVsLCBzdWJFbmFibGUgPSBlbmFibGUpID0+IG1ha2VUcmFjZXIoYCR7bGFiZWx9LiR7c3ViTGFiZWx9YCwgc3ViRW5hYmxlKTtcbiAgY29uc3Qga2V5ID0gYC0tLS0tICR7bGFiZWx9LCR7ZGVidWdJbnN0YW5jZX0gYDtcbiAgZGVidWdJbnN0YW5jZSArPSAxO1xuICBzd2l0Y2ggKGVuYWJsZSkge1xuICAgIGNhc2UgZmFsc2U6IHtcbiAgICAgIGNvbnN0IGxvZ0Rpc2FibGVkID0gKC4uLl9hcmdzKSA9PiB7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGhhcmRlbihPYmplY3QuYXNzaWduKGxvZ0Rpc2FibGVkLCB7IHN1YiB9KSk7XG4gICAgfVxuICAgIGNhc2UgXCJ2ZXJib3NlXCI6IHtcbiAgICAgIGNvbnN0IGluZm9UaWNrID0gKG9wdExvZywgLi4uYXJncykgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIG9wdExvZz8ubG9nID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjb25zb2xlLmluZm8oa2V5LCAuLi5hcmdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmluZm8oa2V5LCBvcHRMb2csIC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGhhcmRlbihPYmplY3QuYXNzaWduKGluZm9UaWNrLCB7IHN1YiB9KSk7XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGNvbnN0IGRlYnVnVGljayA9IChvcHRMb2csIC4uLmFyZ3MpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRMb2c/LmxvZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgb3B0TG9nLmxvZyhrZXksIC4uLmFyZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUuaW5mbyhrZXksIG9wdExvZywgLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXR1cm4gaGFyZGVuKE9iamVjdC5hc3NpZ24oZGVidWdUaWNrLCB7IHN1YiB9KSk7XG4gICAgfVxuICB9XG59O1xuaGFyZGVuKG1ha2VUcmFjZXIpO1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvQGVuZG8vZXJyb3JzL2luZGV4LmpzKi9cbnZhciBnbG9iYWxBc3NlcnQgPSBnbG9iYWxUaGlzLmFzc2VydDtcbmlmIChnbG9iYWxBc3NlcnQgPT09IHZvaWQgMCkge1xuICB0aHJvdyBFcnJvcihcbiAgICBgQ2Fubm90IGluaXRpYWxpemUgQGVuZG8vZXJyb3JzLCBtaXNzaW5nIGdsb2JhbFRoaXMuYXNzZXJ0LCBpbXBvcnQgJ3NlcycgYmVmb3JlICdAZW5kby9lcnJvcnMnYFxuICApO1xufVxudmFyIG1pc3NpbmcgPSAoXG4gIC8qKiBAdHlwZSB7Y29uc3R9ICovXG4gIFtcbiAgICBcInR5cGVvZlwiLFxuICAgIFwiZXJyb3JcIixcbiAgICBcImZhaWxcIixcbiAgICBcImVxdWFsXCIsXG4gICAgXCJzdHJpbmdcIixcbiAgICBcIm5vdGVcIixcbiAgICBcImRldGFpbHNcIixcbiAgICBcIkZhaWxcIixcbiAgICBcInF1b3RlXCIsXG4gICAgLyogQXMgb2YgMjAyNC0wMiwgdGhlIEFnb3JpYyBjaGFpbidzIGJvb3RzdHJhcCB2YXQgcnVucyB3aXRoIGEgdmVyc2lvbiBvZiBTRVMgdGhhdCovXG4gICAgLyogcHJlZGF0ZXMgYWRkaXRpb24gb2YgdGhlICdiYXJlJyBtZXRob2QsIHNvIHdlIG11c3QgdG9sZXJhdGUgaXRzIGFic2VuY2UgYW5kIGZhbGwqL1xuICAgIC8qIGJhY2sgdG8gcXVvdGUgYmVoYXZpb3IgaW4gdGhhdCBlbnZpcm9ubWVudCAoc2VlIGJlbG93KS4qL1xuICAgIC8qICdiYXJlJywqL1xuICAgIFwibWFrZUFzc2VydFwiXG4gIF0uZmlsdGVyKChuYW1lKSA9PiBnbG9iYWxBc3NlcnRbbmFtZV0gPT09IHZvaWQgMClcbik7XG5pZiAobWlzc2luZy5sZW5ndGggPiAwKSB7XG4gIHRocm93IEVycm9yKFxuICAgIGBDYW5ub3QgaW5pdGlhbGl6ZSBAZW5kby9lcnJvcnMsIG1pc3NpbmcgZ2xvYmFsVGhpcy5hc3NlcnQgbWV0aG9kcyAke21pc3Npbmcuam9pbihcbiAgICAgIFwiLCBcIlxuICAgICl9YFxuICApO1xufVxudmFyIHtcbiAgYmFyZSxcbiAgZGV0YWlsczogcmVkYWN0ZWQsXG4gIGVycm9yOiBtYWtlRXJyb3IsXG4gIEZhaWw6IHRocm93UmVkYWN0ZWQsXG4gIG1ha2VBc3NlcnQ6IF9vbWl0dGVkTWFrZUFzc2VydCxcbiAgbm90ZSxcbiAgcXVvdGUsXG4gIC4uLmFzc2VydGlvbnNcbn0gPSBnbG9iYWxBc3NlcnQ7XG52YXIgYXNzZXJ0MiA9ICh2YWx1ZSwgb3B0RGV0YWlscywgZXJyQ29udHJ1Y3Rvciwgb3B0aW9ucykgPT4gZ2xvYmFsQXNzZXJ0KHZhbHVlLCBvcHREZXRhaWxzLCBlcnJDb250cnVjdG9yLCBvcHRpb25zKTtcbk9iamVjdC5hc3NpZ24oYXNzZXJ0MiwgYXNzZXJ0aW9ucyk7XG52YXIgYmFyZU9yUXVvdGUgPSBiYXJlIHx8IHF1b3RlO1xuXG4vKiAuLi9pbnRlcm5hbC9zcmMvZXJyb3JzLmpzKi9cbnZhciBOb25OdWxsaXNoID0gKHZhbCwgb3B0RGV0YWlscyA9IGB1bmV4cGVjdGVkICR7cXVvdGUodmFsKX1gKSA9PiB7XG4gIGlmICh2YWwgIT0gbnVsbCkge1xuICAgIHJldHVybiB2YWw7XG4gIH1cbiAgYXNzZXJ0LmZhaWwob3B0RGV0YWlscyk7XG59O1xuaGFyZGVuKE5vbk51bGxpc2gpO1xuXG4vKiAuLi9pbnRlcm5hbC9zcmMvanMtdXRpbHMuanMqL1xudmFyIHsgZGVmaW5lUHJvcGVydHkgfSA9IE9iamVjdDtcbnZhciB0eXBlZEVudHJpZXMgPSAoXG4gIC8qKiBAdHlwZSB7VHlwZWRFbnRyaWVzfSAqL1xuICBPYmplY3QuZW50cmllc1xuKTtcbnZhciBmcm9tVHlwZWRFbnRyaWVzID0gKFxuICAvKiogQHR5cGUge0Zyb21UeXBlZEVudHJpZXN9ICovXG4gIE9iamVjdC5mcm9tRW50cmllc1xuKTtcbnZhciB0eXBlZE1hcCA9IChcbiAgLyoqIEB0eXBlIHtUeXBlZE1hcH0gKi9cbiAgRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwuYmluZChBcnJheS5wcm90b3R5cGUubWFwKVxuKTtcbnZhciBsb2dMZXZlbHMgPSAoXG4gIC8qKiBAdHlwZSB7Y29uc3R9ICovXG4gIFtcbiAgICBcImRlYnVnXCIsXG4gICAgXCJsb2dcIixcbiAgICBcImluZm9cIixcbiAgICBcIndhcm5cIixcbiAgICBcImVycm9yXCJcbiAgXVxuKTtcbk9iamVjdC5mcmVlemUobG9nTGV2ZWxzKTtcbnZhciBkZWVwTWFwT2JqZWN0SW50ZXJuYWwgPSAodmFsdWUsIG5hbWUsIGNvbnRhaW5lciwgbWFwcGVyKSA9PiB7XG4gIGlmIChjb250YWluZXIgJiYgdHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICBjb25zdCBtYXBwZWQgPSBtYXBwZXIodmFsdWUsIG5hbWUsIGNvbnRhaW5lcik7XG4gICAgaWYgKG1hcHBlZCAhPT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBtYXBwZWQ7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgIXZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGxldCB3YXNNYXBwZWQgPSBmYWxzZTtcbiAgY29uc3QgdmFsdWVPYmogPSAoXG4gICAgLyoqIEB0eXBlIHtSZWNvcmQ8c3RyaW5nLCB1bmtub3duPn0gKi9cbiAgICB2YWx1ZVxuICApO1xuICBjb25zdCBtYXBFbnRyeSA9IChbaW5uZXJOYW1lLCBpbm5lclZhbHVlXSkgPT4ge1xuICAgIGNvbnN0IG1hcHBlZElubmVyVmFsdWUgPSBkZWVwTWFwT2JqZWN0SW50ZXJuYWwoXG4gICAgICBpbm5lclZhbHVlLFxuICAgICAgaW5uZXJOYW1lLFxuICAgICAgdmFsdWVPYmosXG4gICAgICBtYXBwZXJcbiAgICApO1xuICAgIHdhc01hcHBlZCB8fD0gbWFwcGVkSW5uZXJWYWx1ZSAhPT0gaW5uZXJWYWx1ZTtcbiAgICByZXR1cm4gW1xuICAgICAgaW5uZXJOYW1lLFxuICAgICAgLyoqIEB0eXBlIHthbnl9ICovXG4gICAgICBtYXBwZWRJbm5lclZhbHVlXG4gICAgXTtcbiAgfTtcbiAgY29uc3QgbWFwcGVkRW50cmllcyA9IHR5cGVkRW50cmllcyh2YWx1ZU9iaikubWFwKG1hcEVudHJ5KTtcbiAgaWYgKCF3YXNNYXBwZWQpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgY29uc3QgbWFwcGVkT2JqID0gZnJvbVR5cGVkRW50cmllcyhtYXBwZWRFbnRyaWVzKTtcbiAgcmV0dXJuIChcbiAgICAvKiogQHR5cGUge2FueX0gKi9cbiAgICBtYXBwZWRPYmpcbiAgKTtcbn07XG52YXIgZGVlcE1hcE9iamVjdCA9IChvYmosIG1hcHBlcikgPT4gKFxuICAvKiogQHR5cGUge2FueX0gKi9cbiAgZGVlcE1hcE9iamVjdEludGVybmFsKG9iaiwgdm9pZCAwLCB2b2lkIDAsIG1hcHBlcilcbik7XG52YXIgcHJvdmlkZUxhenlNYXAgPSAobWFwLCBrZXksIG1ha2VWYWx1ZSkgPT4ge1xuICBjb25zdCBmb3VuZCA9IG1hcC5nZXQoa2V5KTtcbiAgaWYgKGZvdW5kICE9PSB2b2lkIDAgfHwgbWFwLmhhcyhrZXkpKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8qKiBAdHlwZSB7Vn0gKi9cbiAgICAgIGZvdW5kXG4gICAgKTtcbiAgfVxuICBjb25zdCB2YWx1ZSA9IG1ha2VWYWx1ZShrZXkpO1xuICBtYXAuc2V0KGtleSwgdmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvQGVuZG8vZW52LW9wdGlvbnMvc3JjL2Vudi1vcHRpb25zLmpzKi9cbnZhciBsb2NhbFRoaXMgPSBnbG9iYWxUaGlzO1xudmFyIHsgT2JqZWN0OiBPYmplY3QyLCBSZWZsZWN0OiBSZWZsZWN0MiwgQXJyYXk6IEFycmF5MiwgU3RyaW5nOiBTdHJpbmcyLCBKU09OOiBKU09OMiwgRXJyb3I6IEVycm9yMiB9ID0gbG9jYWxUaGlzO1xudmFyIHsgZnJlZXplIH0gPSBPYmplY3QyO1xudmFyIHsgYXBwbHkgfSA9IFJlZmxlY3QyO1xudmFyIHVuY3VycnlUaGlzID0gKGZuKSA9PiAocmVjZWl2ZXIsIC4uLmFyZ3MpID0+IGFwcGx5KGZuLCByZWNlaXZlciwgYXJncyk7XG52YXIgYXJyYXlQdXNoID0gdW5jdXJyeVRoaXMoQXJyYXkyLnByb3RvdHlwZS5wdXNoKTtcbnZhciBhcnJheUluY2x1ZGVzID0gdW5jdXJyeVRoaXMoQXJyYXkyLnByb3RvdHlwZS5pbmNsdWRlcyk7XG52YXIgc3RyaW5nU3BsaXQgPSB1bmN1cnJ5VGhpcyhTdHJpbmcyLnByb3RvdHlwZS5zcGxpdCk7XG52YXIgcSA9IEpTT04yLnN0cmluZ2lmeTtcbnZhciBGYWlsID0gKGxpdGVyYWxzLCAuLi5hcmdzKSA9PiB7XG4gIGxldCBtc2cgPSBsaXRlcmFsc1swXTtcbiAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IGFyZ3MubGVuZ3RoOyBpMyArPSAxKSB7XG4gICAgbXNnID0gYCR7bXNnfSR7YXJnc1tpM119JHtsaXRlcmFsc1tpMyArIDFdfWA7XG4gIH1cbiAgdGhyb3cgRXJyb3IyKG1zZyk7XG59O1xudmFyIG1ha2VFbnZpcm9ubWVudENhcHRvciA9IChhR2xvYmFsLCBkcm9wTmFtZXMgPSBmYWxzZSkgPT4ge1xuICBjb25zdCBjYXB0dXJlZEVudmlyb25tZW50T3B0aW9uTmFtZXMgPSBbXTtcbiAgY29uc3QgZ2V0RW52aXJvbm1lbnRPcHRpb24yID0gKG9wdGlvbk5hbWUsIGRlZmF1bHRTZXR0aW5nLCBvcHRPdGhlclZhbHVlcyA9IHZvaWQgMCkgPT4ge1xuICAgIHR5cGVvZiBvcHRpb25OYW1lID09PSBcInN0cmluZ1wiIHx8IEZhaWxgRW52aXJvbm1lbnQgb3B0aW9uIG5hbWUgJHtxKG9wdGlvbk5hbWUpfSBtdXN0IGJlIGEgc3RyaW5nLmA7XG4gICAgdHlwZW9mIGRlZmF1bHRTZXR0aW5nID09PSBcInN0cmluZ1wiIHx8IEZhaWxgRW52aXJvbm1lbnQgb3B0aW9uIGRlZmF1bHQgc2V0dGluZyAke3EoXG4gICAgICBkZWZhdWx0U2V0dGluZ1xuICAgICl9IG11c3QgYmUgYSBzdHJpbmcuYDtcbiAgICBsZXQgc2V0dGluZyA9IGRlZmF1bHRTZXR0aW5nO1xuICAgIGNvbnN0IGdsb2JhbFByb2Nlc3MgPSBhR2xvYmFsLnByb2Nlc3MgfHwgdm9pZCAwO1xuICAgIGNvbnN0IGdsb2JhbEVudiA9IHR5cGVvZiBnbG9iYWxQcm9jZXNzID09PSBcIm9iamVjdFwiICYmIGdsb2JhbFByb2Nlc3MuZW52IHx8IHZvaWQgMDtcbiAgICBpZiAodHlwZW9mIGdsb2JhbEVudiA9PT0gXCJvYmplY3RcIikge1xuICAgICAgaWYgKG9wdGlvbk5hbWUgaW4gZ2xvYmFsRW52KSB7XG4gICAgICAgIGlmICghZHJvcE5hbWVzKSB7XG4gICAgICAgICAgYXJyYXlQdXNoKGNhcHR1cmVkRW52aXJvbm1lbnRPcHRpb25OYW1lcywgb3B0aW9uTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0aW9uVmFsdWUgPSBnbG9iYWxFbnZbb3B0aW9uTmFtZV07XG4gICAgICAgIHR5cGVvZiBvcHRpb25WYWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCBGYWlsYEVudmlyb25tZW50IG9wdGlvbiBuYW1lZCAke3EoXG4gICAgICAgICAgb3B0aW9uTmFtZVxuICAgICAgICApfSwgaWYgcHJlc2VudCwgbXVzdCBoYXZlIGEgY29ycmVzcG9uZGluZyBzdHJpbmcgdmFsdWUsIGdvdCAke3EoXG4gICAgICAgICAgb3B0aW9uVmFsdWVcbiAgICAgICAgKX1gO1xuICAgICAgICBzZXR0aW5nID0gb3B0aW9uVmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIG9wdE90aGVyVmFsdWVzID09PSB2b2lkIDAgfHwgc2V0dGluZyA9PT0gZGVmYXVsdFNldHRpbmcgfHwgYXJyYXlJbmNsdWRlcyhvcHRPdGhlclZhbHVlcywgc2V0dGluZykgfHwgRmFpbGBVbnJlY29nbml6ZWQgJHtxKG9wdGlvbk5hbWUpfSB2YWx1ZSAke3EoXG4gICAgICBzZXR0aW5nXG4gICAgKX0uIEV4cGVjdGVkIG9uZSBvZiAke3EoW2RlZmF1bHRTZXR0aW5nLCAuLi5vcHRPdGhlclZhbHVlc10pfWA7XG4gICAgcmV0dXJuIHNldHRpbmc7XG4gIH07XG4gIGZyZWV6ZShnZXRFbnZpcm9ubWVudE9wdGlvbjIpO1xuICBjb25zdCBnZXRFbnZpcm9ubWVudE9wdGlvbnNMaXN0MiA9IChvcHRpb25OYW1lKSA9PiB7XG4gICAgY29uc3Qgb3B0aW9uID0gZ2V0RW52aXJvbm1lbnRPcHRpb24yKG9wdGlvbk5hbWUsIFwiXCIpO1xuICAgIHJldHVybiBmcmVlemUob3B0aW9uID09PSBcIlwiID8gW10gOiBzdHJpbmdTcGxpdChvcHRpb24sIFwiLFwiKSk7XG4gIH07XG4gIGZyZWV6ZShnZXRFbnZpcm9ubWVudE9wdGlvbnNMaXN0Mik7XG4gIGNvbnN0IGVudmlyb25tZW50T3B0aW9uc0xpc3RIYXMyID0gKG9wdGlvbk5hbWUsIGVsZW1lbnQpID0+IGFycmF5SW5jbHVkZXMoZ2V0RW52aXJvbm1lbnRPcHRpb25zTGlzdDIob3B0aW9uTmFtZSksIGVsZW1lbnQpO1xuICBjb25zdCBnZXRDYXB0dXJlZEVudmlyb25tZW50T3B0aW9uTmFtZXMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGZyZWV6ZShbLi4uY2FwdHVyZWRFbnZpcm9ubWVudE9wdGlvbk5hbWVzXSk7XG4gIH07XG4gIGZyZWV6ZShnZXRDYXB0dXJlZEVudmlyb25tZW50T3B0aW9uTmFtZXMpO1xuICByZXR1cm4gZnJlZXplKHtcbiAgICBnZXRFbnZpcm9ubWVudE9wdGlvbjogZ2V0RW52aXJvbm1lbnRPcHRpb24yLFxuICAgIGdldEVudmlyb25tZW50T3B0aW9uc0xpc3Q6IGdldEVudmlyb25tZW50T3B0aW9uc0xpc3QyLFxuICAgIGVudmlyb25tZW50T3B0aW9uc0xpc3RIYXM6IGVudmlyb25tZW50T3B0aW9uc0xpc3RIYXMyLFxuICAgIGdldENhcHR1cmVkRW52aXJvbm1lbnRPcHRpb25OYW1lc1xuICB9KTtcbn07XG5mcmVlemUobWFrZUVudmlyb25tZW50Q2FwdG9yKTtcbnZhciB7XG4gIGdldEVudmlyb25tZW50T3B0aW9uLFxuICBnZXRFbnZpcm9ubWVudE9wdGlvbnNMaXN0LFxuICBlbnZpcm9ubWVudE9wdGlvbnNMaXN0SGFzXG59ID0gbWFrZUVudmlyb25tZW50Q2FwdG9yKGxvY2FsVGhpcywgdHJ1ZSk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9ldmVudHVhbC1zZW5kL3NyYy90cmFjay10dXJucy5qcyovXG52YXIgaGlkZGVuUHJpb3JFcnJvcjtcbnZhciBoaWRkZW5DdXJyZW50VHVybiA9IDA7XG52YXIgaGlkZGVuQ3VycmVudEV2ZW50ID0gMDtcbnZhciBWRVJCT1NFID0gZW52aXJvbm1lbnRPcHRpb25zTGlzdEhhcyhcIkRFQlVHXCIsIFwidHJhY2stdHVybnNcIik7XG52YXIgRU5BQkxFRCA9IChcbiAgLyoqIEB0eXBlIHsnZGlzYWJsZWQnIHwgJ2VuYWJsZWQnfSAqL1xuICBnZXRFbnZpcm9ubWVudE9wdGlvbihcIlRSQUNLX1RVUk5TXCIsIFwiZGlzYWJsZWRcIiwgW1wiZW5hYmxlZFwiXSkgPT09IFwiZW5hYmxlZFwiXG4pO1xudmFyIGFkZFJlamVjdGlvbk5vdGUgPSAoZGV0YWlsc05vdGUpID0+IChyZWFzb24pID0+IHtcbiAgaWYgKHJlYXNvbiBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgZ2xvYmFsVGhpcy5hc3NlcnQubm90ZShyZWFzb24sIGRldGFpbHNOb3RlKTtcbiAgfVxuICBpZiAoVkVSQk9TRSkge1xuICAgIGNvbnNvbGUubG9nKFwiUkVKRUNURUQgYXQgdG9wIG9mIGV2ZW50IGxvb3BcIiwgcmVhc29uKTtcbiAgfVxufTtcbnZhciB3cmFwRnVuY3Rpb24gPSAoZnVuYywgc2VuZGluZ0Vycm9yLCBYNikgPT4gKC4uLmFyZ3MpID0+IHtcbiAgaGlkZGVuUHJpb3JFcnJvciA9IHNlbmRpbmdFcnJvcjtcbiAgaGlkZGVuQ3VycmVudFR1cm4gKz0gMTtcbiAgaGlkZGVuQ3VycmVudEV2ZW50ID0gMDtcbiAgdHJ5IHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBmdW5jKC4uLmFyZ3MpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGdsb2JhbFRoaXMuYXNzZXJ0Lm5vdGUoXG4gICAgICAgICAgZXJyLFxuICAgICAgICAgIFg2YFRocm93biBmcm9tOiAke2hpZGRlblByaW9yRXJyb3J9OiR7aGlkZGVuQ3VycmVudFR1cm59LiR7aGlkZGVuQ3VycmVudEV2ZW50fWBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChWRVJCT1NFKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVEhST1dOIHRvIHRvcCBvZiBldmVudCBsb29wXCIsIGVycik7XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIGNvbnN0IGRldGFpbHNOb3RlID0gWDZgUmVqZWN0aW9uIGZyb206ICR7aGlkZGVuUHJpb3JFcnJvcn06JHtoaWRkZW5DdXJyZW50VHVybn0uJHtoaWRkZW5DdXJyZW50RXZlbnR9YDtcbiAgICBQcm9taXNlLnJlc29sdmUocmVzdWx0KS5jYXRjaChhZGRSZWplY3Rpb25Ob3RlKGRldGFpbHNOb3RlKSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSBmaW5hbGx5IHtcbiAgICBoaWRkZW5QcmlvckVycm9yID0gdm9pZCAwO1xuICB9XG59O1xudmFyIHRyYWNrVHVybnMgPSAoZnVuY3MpID0+IHtcbiAgaWYgKCFFTkFCTEVEIHx8IHR5cGVvZiBnbG9iYWxUaGlzID09PSBcInVuZGVmaW5lZFwiIHx8ICFnbG9iYWxUaGlzLmFzc2VydCkge1xuICAgIHJldHVybiBmdW5jcztcbiAgfVxuICBjb25zdCB7IGRldGFpbHM6IFg2LCBub3RlOiBhbm5vdGF0ZUVycm9yIH0gPSBnbG9iYWxUaGlzLmFzc2VydDtcbiAgaGlkZGVuQ3VycmVudEV2ZW50ICs9IDE7XG4gIGNvbnN0IHNlbmRpbmdFcnJvciA9IEVycm9yKFxuICAgIGBFdmVudDogJHtoaWRkZW5DdXJyZW50VHVybn0uJHtoaWRkZW5DdXJyZW50RXZlbnR9YFxuICApO1xuICBpZiAoaGlkZGVuUHJpb3JFcnJvciAhPT0gdm9pZCAwKSB7XG4gICAgYW5ub3RhdGVFcnJvcihzZW5kaW5nRXJyb3IsIFg2YENhdXNlZCBieTogJHtoaWRkZW5QcmlvckVycm9yfWApO1xuICB9XG4gIHJldHVybiAoXG4gICAgLyoqIEB0eXBlIHtUfSAqL1xuICAgIGZ1bmNzLm1hcCgoZnVuYykgPT4gZnVuYyAmJiB3cmFwRnVuY3Rpb24oZnVuYywgc2VuZGluZ0Vycm9yLCBYNikpXG4gICk7XG59O1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvQGVuZG8vZXZlbnR1YWwtc2VuZC9zcmMvbWVzc2FnZS1icmVha3BvaW50cy5qcyovXG52YXIgeyBxdW90ZTogcTIsIEZhaWw6IEZhaWwyIH0gPSBhc3NlcnQ7XG52YXIgeyBoYXNPd24sIGZyZWV6ZTogZnJlZXplMiwgZW50cmllcyB9ID0gT2JqZWN0O1xudmFyIGlzSlNPTlJlY29yZCA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwib2JqZWN0XCIgJiYgdmFsICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KHZhbCk7XG52YXIgc2ltcGxpZnlUYWcgPSAodGFnKSA9PiB7XG4gIGZvciAoY29uc3QgcHJlZml4IG9mIFtcIkFsbGVnZWQ6IFwiLCBcIkRlYnVnTmFtZTogXCJdKSB7XG4gICAgaWYgKHRhZy5zdGFydHNXaXRoKHByZWZpeCkpIHtcbiAgICAgIHJldHVybiB0YWcuc2xpY2UocHJlZml4Lmxlbmd0aCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0YWc7XG59O1xudmFyIG1ha2VNZXNzYWdlQnJlYWtwb2ludFRlc3RlciA9IChvcHRpb25OYW1lKSA9PiB7XG4gIGxldCBicmVha3BvaW50cyA9IEpTT04ucGFyc2UoZ2V0RW52aXJvbm1lbnRPcHRpb24ob3B0aW9uTmFtZSwgXCJudWxsXCIpKTtcbiAgaWYgKGJyZWFrcG9pbnRzID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBsZXQgYnJlYWtwb2ludHNUYWJsZTtcbiAgY29uc3QgZ2V0QnJlYWtwb2ludHMgPSAoKSA9PiBicmVha3BvaW50cztcbiAgZnJlZXplMihnZXRCcmVha3BvaW50cyk7XG4gIGNvbnN0IHNldEJyZWFrcG9pbnRzID0gKG5ld0JyZWFrcG9pbnRzID0gYnJlYWtwb2ludHMpID0+IHtcbiAgICBpc0pTT05SZWNvcmQobmV3QnJlYWtwb2ludHMpIHx8IEZhaWwyYEV4cGVjdGVkICR7cTIob3B0aW9uTmFtZSl9IG9wdGlvbiB0byBiZSBhIEpTT04gYnJlYWtwb2ludHMgcmVjb3JkYDtcbiAgICBjb25zdCBuZXdCcmVha3BvaW50c1RhYmxlID0geyBfX3Byb3RvX186IG51bGwgfTtcbiAgICBmb3IgKGNvbnN0IFt0YWcsIG1ldGhvZEJQc10gb2YgZW50cmllcyhuZXdCcmVha3BvaW50cykpIHtcbiAgICAgIHRhZyA9PT0gc2ltcGxpZnlUYWcodGFnKSB8fCBGYWlsMmBKdXN0IHVzZSBzaW1wbGUgdGFnICR7cTIoc2ltcGxpZnlUYWcodGFnKSl9IHJhdGhlciB0aGFuICR7cTIodGFnKX1gO1xuICAgICAgaXNKU09OUmVjb3JkKG1ldGhvZEJQcykgfHwgRmFpbDJgRXhwZWN0ZWQgJHtxMihvcHRpb25OYW1lKX0gb3B0aW9uJ3MgJHtxMihcbiAgICAgICAgdGFnXG4gICAgICApfSB0byBiZSBhIEpTT04gbWV0aG9kcyBicmVha3BvaW50cyByZWNvcmRgO1xuICAgICAgZm9yIChjb25zdCBbbWV0aG9kTmFtZSwgY291bnRdIG9mIGVudHJpZXMobWV0aG9kQlBzKSkge1xuICAgICAgICBjb3VudCA9PT0gXCIqXCIgfHwgdHlwZW9mIGNvdW50ID09PSBcIm51bWJlclwiICYmIE51bWJlci5pc1NhZmVJbnRlZ2VyKGNvdW50KSAmJiBjb3VudCA+PSAwIHx8IEZhaWwyYEV4cGVjdGVkICR7cTIob3B0aW9uTmFtZSl9IG9wdGlvbidzICR7cTIodGFnKX0uJHtxMihcbiAgICAgICAgICBtZXRob2ROYW1lXG4gICAgICAgICl9IHRvIGJlIFwiKlwiIG9yIGEgbm9uLW5lZ2F0aXZlIGludGVnZXJgO1xuICAgICAgICBjb25zdCBjbGFzc0JQcyA9IGhhc093bihuZXdCcmVha3BvaW50c1RhYmxlLCBtZXRob2ROYW1lKSA/IG5ld0JyZWFrcG9pbnRzVGFibGVbbWV0aG9kTmFtZV0gOiBuZXdCcmVha3BvaW50c1RhYmxlW21ldGhvZE5hbWVdID0ge1xuICAgICAgICAgIC8qIEB0cy1leHBlY3QtZXJyb3IgY29uZnVzZWQgYnkgX19wcm90b19fKi9cbiAgICAgICAgICBfX3Byb3RvX186IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgY2xhc3NCUHNbdGFnXSA9IGNvdW50O1xuICAgICAgfVxuICAgIH1cbiAgICBicmVha3BvaW50cyA9IG5ld0JyZWFrcG9pbnRzO1xuICAgIGJyZWFrcG9pbnRzVGFibGUgPSBuZXdCcmVha3BvaW50c1RhYmxlO1xuICB9O1xuICBmcmVlemUyKHNldEJyZWFrcG9pbnRzKTtcbiAgY29uc3Qgc2hvdWxkQnJlYWtwb2ludCA9IChyZWNpcGllbnQsIG1ldGhvZE5hbWUpID0+IHtcbiAgICBpZiAobWV0aG9kTmFtZSA9PT0gdm9pZCAwIHx8IG1ldGhvZE5hbWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgY2xhc3NCUHMgPSBicmVha3BvaW50c1RhYmxlW21ldGhvZE5hbWVdIHx8IGJyZWFrcG9pbnRzVGFibGVbXCIqXCJdO1xuICAgIGlmIChjbGFzc0JQcyA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCB0YWcgPSBzaW1wbGlmeVRhZyhyZWNpcGllbnRbU3ltYm9sLnRvU3RyaW5nVGFnXSk7XG4gICAgbGV0IGNvdW50ID0gY2xhc3NCUHNbdGFnXTtcbiAgICBpZiAoY291bnQgPT09IHZvaWQgMCkge1xuICAgICAgdGFnID0gXCIqXCI7XG4gICAgICBjb3VudCA9IGNsYXNzQlBzW3RhZ107XG4gICAgICBpZiAoY291bnQgPT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjb3VudCA9PT0gXCIqXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBhc3NlcnQodHlwZW9mIGNvdW50ID09PSBcIm51bWJlclwiICYmIGNvdW50ID49IDEpO1xuICAgIGNsYXNzQlBzW3RhZ10gPSBjb3VudCAtIDE7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuICBmcmVlemUyKHNob3VsZEJyZWFrcG9pbnQpO1xuICBjb25zdCBicmVha3BvaW50VGVzdGVyID0gZnJlZXplMih7XG4gICAgZ2V0QnJlYWtwb2ludHMsXG4gICAgc2V0QnJlYWtwb2ludHMsXG4gICAgc2hvdWxkQnJlYWtwb2ludFxuICB9KTtcbiAgYnJlYWtwb2ludFRlc3Rlci5zZXRCcmVha3BvaW50cygpO1xuICByZXR1cm4gYnJlYWtwb2ludFRlc3Rlcjtcbn07XG5mcmVlemUyKG1ha2VNZXNzYWdlQnJlYWtwb2ludFRlc3Rlcik7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9ldmVudHVhbC1zZW5kL3NyYy9FLmpzKi9cbnZhciB7IGRldGFpbHM6IFgsIHF1b3RlOiBxMywgRmFpbDogRmFpbDMsIGVycm9yOiBtYWtlRXJyb3IyIH0gPSBhc3NlcnQ7XG52YXIgeyBhc3NpZ24sIGZyZWV6ZTogZnJlZXplMyB9ID0gT2JqZWN0O1xudmFyIG9uU2VuZCA9IG1ha2VNZXNzYWdlQnJlYWtwb2ludFRlc3RlcihcIkVORE9fU0VORF9CUkVBS1BPSU5UU1wiKTtcbnZhciBiYXNlRnJlZXphYmxlUHJveHlIYW5kbGVyID0ge1xuICBzZXQoX3RhcmdldCwgX3Byb3AsIF92YWx1ZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgaXNFeHRlbnNpYmxlKF90YXJnZXQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIHNldFByb3RvdHlwZU9mKF90YXJnZXQsIF92YWx1ZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgZGVsZXRlUHJvcGVydHkoX3RhcmdldCwgX3Byb3ApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG52YXIgbWFrZUVQcm94eUhhbmRsZXIgPSAocmVjaXBpZW50LCBIYW5kbGVkUHJvbWlzZTIpID0+IGhhcmRlbih7XG4gIC4uLmJhc2VGcmVlemFibGVQcm94eUhhbmRsZXIsXG4gIGdldDogKF90YXJnZXQsIHByb3BlcnR5S2V5LCByZWNlaXZlcikgPT4ge1xuICAgIHJldHVybiBoYXJkZW4oXG4gICAgICB7XG4gICAgICAgIC8qIFRoaXMgZnVuY3Rpb24gcHVycG9zZWx5IGNoZWNrcyB0aGUgYHRoaXNgIHZhbHVlIChzZWUgYWJvdmUpKi9cbiAgICAgICAgLyogSW4gb3JkZXIgdG8gYmUgYHRoaXNgIHNlbnNpdGl2ZSBpdCBpcyBkZWZpbmVkIHVzaW5nIGNvbmNpc2UgbWV0aG9kKi9cbiAgICAgICAgLyogc3ludGF4IHJhdGhlciB0aGFuIGFzIGFuIGFycm93IGZ1bmN0aW9uLiBUbyBlbnN1cmUgdGhlIGZ1bmN0aW9uKi9cbiAgICAgICAgLyogaXMgbm90IGNvbnN0cnVjdGFibGUsIGl0IGFsc28gYXZvaWRzIHRoZSBgZnVuY3Rpb25gIHN5bnRheC4qL1xuICAgICAgICAvKiogQHR5cGUgeyguLi5hcmdzOiBhbnlbXSkgPT4gUHJvbWlzZTx1bmtub3duPn0gKi9cbiAgICAgICAgW3Byb3BlcnR5S2V5XSguLi5hcmdzKSB7XG4gICAgICAgICAgaWYgKHRoaXMgIT09IHJlY2VpdmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gSGFuZGxlZFByb21pc2UyLnJlamVjdChcbiAgICAgICAgICAgICAgbWFrZUVycm9yMihcbiAgICAgICAgICAgICAgICBYYFVuZXhwZWN0ZWQgcmVjZWl2ZXIgZm9yIFwiJHtxMyhwcm9wZXJ0eUtleSl9XCIgbWV0aG9kIG9mIEUoJHtxMyhcbiAgICAgICAgICAgICAgICAgIHJlY2lwaWVudFxuICAgICAgICAgICAgICAgICl9KWBcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9uU2VuZCAmJiBvblNlbmQuc2hvdWxkQnJlYWtwb2ludChyZWNpcGllbnQsIHByb3BlcnR5S2V5KSkge1xuICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBIYW5kbGVkUHJvbWlzZTIuYXBwbHlNZXRob2QocmVjaXBpZW50LCBwcm9wZXJ0eUtleSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgLyogQHRzLWV4cGVjdC1lcnJvciBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzUwMzE5Ki9cbiAgICAgIH1bcHJvcGVydHlLZXldXG4gICAgKTtcbiAgfSxcbiAgYXBwbHk6IChfdGFyZ2V0LCBfdGhpc0FyZywgYXJnQXJyYXkgPSBbXSkgPT4ge1xuICAgIGlmIChvblNlbmQgJiYgb25TZW5kLnNob3VsZEJyZWFrcG9pbnQocmVjaXBpZW50LCB2b2lkIDApKSB7XG4gICAgICBkZWJ1Z2dlcjtcbiAgICB9XG4gICAgcmV0dXJuIEhhbmRsZWRQcm9taXNlMi5hcHBseUZ1bmN0aW9uKHJlY2lwaWVudCwgYXJnQXJyYXkpO1xuICB9LFxuICBoYXM6IChfdGFyZ2V0LCBfcCkgPT4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59KTtcbnZhciBtYWtlRVNlbmRPbmx5UHJveHlIYW5kbGVyID0gKHJlY2lwaWVudCwgSGFuZGxlZFByb21pc2UyKSA9PiBoYXJkZW4oe1xuICAuLi5iYXNlRnJlZXphYmxlUHJveHlIYW5kbGVyLFxuICBnZXQ6IChfdGFyZ2V0LCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpID0+IHtcbiAgICByZXR1cm4gaGFyZGVuKFxuICAgICAge1xuICAgICAgICAvKiBUaGlzIGZ1bmN0aW9uIHB1cnBvc2VseSBjaGVja3MgdGhlIGB0aGlzYCB2YWx1ZSAoc2VlIGFib3ZlKSovXG4gICAgICAgIC8qIEluIG9yZGVyIHRvIGJlIGB0aGlzYCBzZW5zaXRpdmUgaXQgaXMgZGVmaW5lZCB1c2luZyBjb25jaXNlIG1ldGhvZCovXG4gICAgICAgIC8qIHN5bnRheCByYXRoZXIgdGhhbiBhcyBhbiBhcnJvdyBmdW5jdGlvbi4gVG8gZW5zdXJlIHRoZSBmdW5jdGlvbiovXG4gICAgICAgIC8qIGlzIG5vdCBjb25zdHJ1Y3RhYmxlLCBpdCBhbHNvIGF2b2lkcyB0aGUgYGZ1bmN0aW9uYCBzeW50YXguKi9cbiAgICAgICAgLyoqIEB0eXBlIHsoLi4uYXJnczogYW55W10pID0+IHVuZGVmaW5lZH0gKi9cbiAgICAgICAgW3Byb3BlcnR5S2V5XSguLi5hcmdzKSB7XG4gICAgICAgICAgdGhpcyA9PT0gcmVjZWl2ZXIgfHwgRmFpbDNgVW5leHBlY3RlZCByZWNlaXZlciBmb3IgXCIke3EzKFxuICAgICAgICAgICAgcHJvcGVydHlLZXlcbiAgICAgICAgICApfVwiIG1ldGhvZCBvZiBFLnNlbmRPbmx5KCR7cTMocmVjaXBpZW50KX0pYDtcbiAgICAgICAgICBpZiAob25TZW5kICYmIG9uU2VuZC5zaG91bGRCcmVha3BvaW50KHJlY2lwaWVudCwgcHJvcGVydHlLZXkpKSB7XG4gICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgSGFuZGxlZFByb21pc2UyLmFwcGx5TWV0aG9kU2VuZE9ubHkocmVjaXBpZW50LCBwcm9wZXJ0eUtleSwgYXJncyk7XG4gICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgICAvKiBAdHMtZXhwZWN0LWVycm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvNTAzMTkqL1xuICAgICAgfVtwcm9wZXJ0eUtleV1cbiAgICApO1xuICB9LFxuICBhcHBseTogKF90YXJnZXQsIF90aGlzQXJnLCBhcmdzQXJyYXkgPSBbXSkgPT4ge1xuICAgIGlmIChvblNlbmQgJiYgb25TZW5kLnNob3VsZEJyZWFrcG9pbnQocmVjaXBpZW50LCB2b2lkIDApKSB7XG4gICAgICBkZWJ1Z2dlcjtcbiAgICB9XG4gICAgSGFuZGxlZFByb21pc2UyLmFwcGx5RnVuY3Rpb25TZW5kT25seShyZWNpcGllbnQsIGFyZ3NBcnJheSk7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfSxcbiAgaGFzOiAoX3RhcmdldCwgX3ApID0+IHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSk7XG52YXIgbWFrZUVHZXRQcm94eUhhbmRsZXIgPSAoeCwgSGFuZGxlZFByb21pc2UyKSA9PiBoYXJkZW4oe1xuICAuLi5iYXNlRnJlZXphYmxlUHJveHlIYW5kbGVyLFxuICBoYXM6IChfdGFyZ2V0LCBfcHJvcCkgPT4gdHJ1ZSxcbiAgZ2V0OiAoX3RhcmdldCwgcHJvcCkgPT4gSGFuZGxlZFByb21pc2UyLmdldCh4LCBwcm9wKVxufSk7XG52YXIgZnVuY1RhcmdldCA9IGZyZWV6ZTMoKCkgPT4ge1xufSk7XG52YXIgb2JqVGFyZ2V0ID0gZnJlZXplMyh7IF9fcHJvdG9fXzogbnVsbCB9KTtcbnZhciBtYWtlRSA9IChIYW5kbGVkUHJvbWlzZTIpID0+IHtcbiAgcmV0dXJuIGhhcmRlbihcbiAgICBhc3NpZ24oXG4gICAgICAvKipcbiAqIEUoeCkgcmV0dXJucyBhIHByb3h5IG9uIHdoaWNoIHlvdSBjYW4gY2FsbCBhcmJpdHJhcnkgbWV0aG9kcy4gRWFjaCBvZiB0aGVzZVxuICogbWV0aG9kIGNhbGxzIHJldHVybnMgYSBwcm9taXNlLiBUaGUgbWV0aG9kIHdpbGwgYmUgaW52b2tlZCBvbiB3aGF0ZXZlclxuICogJ3gnIGRlc2lnbmF0ZXMgKG9yIHJlc29sdmVzIHRvKSBpbiBhIGZ1dHVyZSB0dXJuLCBub3QgdGhpcyBvbmUuXG4gKlxuICogQW4gZXhhbXBsZSBjYWxsIHdvdWxkIGJlXG4gKlxuICogRSh6b2UpLmluc3RhbGwoYnVuZGxlKVxuICogICAudGhlbihpbnN0YWxsYXRpb25IYW5kbGUgPT4geyAuLi4gfSlcbiAqICAgLmNhdGNoKGVyciA9PiB7IC4uLiB9KTtcbiAqXG4gKiAgU2VlIGh0dHBzOi8vZW5kb2pzLmdpdGh1Yi5pby9lbmRvL2Z1bmN0aW9ucy9fZW5kb19mYXIuRS5odG1sIGZvciBkZXRhaWxzLlxuICpcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1R9IHggdGFyZ2V0IGZvciBtZXRob2QvZnVuY3Rpb24gY2FsbFxuICogQHJldHVybnMge0VDYWxsYWJsZU9yTWV0aG9kczxSZW1vdGVGdW5jdGlvbnM8VD4+fSBtZXRob2QvZnVuY3Rpb24gY2FsbCBwcm94eVxuICovXG4gICAgICAvKiBAdHMtZXhwZWN0LWVycm9yIFhYWCB0eXBlZGVmKi9cbiAgICAgICh4KSA9PiBuZXcgUHJveHkoZnVuY1RhcmdldCwgbWFrZUVQcm94eUhhbmRsZXIoeCwgSGFuZGxlZFByb21pc2UyKSksXG4gICAgICB7XG4gICAgICAgIC8qKlxuICogRS5nZXQoeCkgcmV0dXJucyBhIHByb3h5IG9uIHdoaWNoIHlvdSBjYW4gZ2V0IGFyYml0cmFyeSBwcm9wZXJ0aWVzLlxuICogRWFjaCBvZiB0aGVzZSBwcm9wZXJ0aWVzIHJldHVybnMgYSBwcm9taXNlIGZvciB0aGUgcHJvcGVydHkuICBUaGUgcHJvbWlzZVxuICogdmFsdWUgd2lsbCBiZSB0aGUgcHJvcGVydHkgZmV0Y2hlZCBmcm9tIHdoYXRldmVyICd4JyBkZXNpZ25hdGVzIChvclxuICogcmVzb2x2ZXMgdG8pIGluIGEgZnV0dXJlIHR1cm4sIG5vdCB0aGlzIG9uZS5cbiAqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtUfSB4IHRhcmdldCBmb3IgcHJvcGVydHkgZ2V0XG4gKiBAcmV0dXJucyB7RUdldHRlcnM8TG9jYWxSZWNvcmQ8VD4+fSBwcm9wZXJ0eSBnZXQgcHJveHlcbiAqIEByZWFkb25seVxuICovXG4gICAgICAgIC8qIEB0cy1leHBlY3QtZXJyb3IgWFhYIHR5cGVkZWYqL1xuICAgICAgICBnZXQ6ICh4KSA9PiBuZXcgUHJveHkob2JqVGFyZ2V0LCBtYWtlRUdldFByb3h5SGFuZGxlcih4LCBIYW5kbGVkUHJvbWlzZTIpKSxcbiAgICAgICAgLyoqXG4gKiBFLnJlc29sdmUoeCkgY29udmVydHMgeCB0byBhIGhhbmRsZWQgcHJvbWlzZS4gSXQgaXNcbiAqIHNob3J0aGFuZCBmb3IgSGFuZGxlZFByb21pc2UucmVzb2x2ZSh4KVxuICpcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1R9IHggdmFsdWUgdG8gY29udmVydCB0byBhIGhhbmRsZWQgcHJvbWlzZVxuICogQHJldHVybnMge1Byb21pc2U8QXdhaXRlZDxUPj59IGhhbmRsZWQgcHJvbWlzZSBmb3IgeFxuICogQHJlYWRvbmx5XG4gKi9cbiAgICAgICAgcmVzb2x2ZTogSGFuZGxlZFByb21pc2UyLnJlc29sdmUsXG4gICAgICAgIC8qKlxuICogRS5zZW5kT25seSByZXR1cm5zIGEgcHJveHkgc2ltaWxhciB0byBFLCBidXQgZm9yIHdoaWNoIHRoZSByZXN1bHRzXG4gKiBhcmUgaWdub3JlZCAodW5kZWZpbmVkIGlzIHJldHVybmVkKS5cbiAqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtUfSB4IHRhcmdldCBmb3IgbWV0aG9kL2Z1bmN0aW9uIGNhbGxcbiAqIEByZXR1cm5zIHtFU2VuZE9ubHlDYWxsYWJsZU9yTWV0aG9kczxSZW1vdGVGdW5jdGlvbnM8VD4+fSBtZXRob2QvZnVuY3Rpb24gY2FsbCBwcm94eVxuICogQHJlYWRvbmx5XG4gKi9cbiAgICAgICAgc2VuZE9ubHk6ICh4KSA9PiAoXG4gICAgICAgICAgLyogQHRzLWV4cGVjdC1lcnJvciBYWFggdHlwZWRlZiovXG4gICAgICAgICAgbmV3IFByb3h5KGZ1bmNUYXJnZXQsIG1ha2VFU2VuZE9ubHlQcm94eUhhbmRsZXIoeCwgSGFuZGxlZFByb21pc2UyKSlcbiAgICAgICAgKSxcbiAgICAgICAgLyoqXG4gKiBFLndoZW4oeCwgcmVzLCByZWopIGlzIGVxdWl2YWxlbnQgdG9cbiAqIEhhbmRsZWRQcm9taXNlLnJlc29sdmUoeCkudGhlbihyZXMsIHJlailcbiAqXG4gKiBAdGVtcGxhdGUgVFxuICogQHRlbXBsYXRlIFtVID0gVF1cbiAqIEBwYXJhbSB7VHxQcm9taXNlTGlrZTxUPn0geCB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgaGFuZGxlZCBwcm9taXNlXG4gKiBAcGFyYW0geyh2YWx1ZTogVCkgPT4gRVJlZjxVPn0gW29uZnVsZmlsbGVkXVxuICogQHBhcmFtIHsocmVhc29uOiBhbnkpID0+IEVSZWY8VT59IFtvbnJlamVjdGVkXVxuICogQHJldHVybnMge1Byb21pc2U8VT59XG4gKiBAcmVhZG9ubHlcbiAqL1xuICAgICAgICB3aGVuOiAoeCwgb25mdWxmaWxsZWQsIG9ucmVqZWN0ZWQpID0+IEhhbmRsZWRQcm9taXNlMi5yZXNvbHZlKHgpLnRoZW4oXG4gICAgICAgICAgLi4udHJhY2tUdXJucyhbb25mdWxmaWxsZWQsIG9ucmVqZWN0ZWRdKVxuICAgICAgICApXG4gICAgICB9XG4gICAgKVxuICApO1xufTtcbnZhciBFX2RlZmF1bHQgPSBtYWtlRTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL2V2ZW50dWFsLXNlbmQvc3JjL25vLXNoaW0uanMqL1xudmFyIGhwID0gSGFuZGxlZFByb21pc2U7XG52YXIgRSA9IEVfZGVmYXVsdChocCk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9ldmVudHVhbC1zZW5kL3NyYy9sb2NhbC5qcyovXG52YXIgeyBkZXRhaWxzOiBYMiwgcXVvdGU6IHE0LCBGYWlsOiBGYWlsNCB9ID0gYXNzZXJ0O1xudmFyIHsgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycywgZ2V0UHJvdG90eXBlT2YsIGZyZWV6ZTogZnJlZXplNCB9ID0gT2JqZWN0O1xudmFyIHsgYXBwbHk6IGFwcGx5Miwgb3duS2V5cyB9ID0gUmVmbGVjdDtcbnZhciBvbkRlbGl2ZXJ5ID0gbWFrZU1lc3NhZ2VCcmVha3BvaW50VGVzdGVyKFwiRU5ET19ERUxJVkVSWV9CUkVBS1BPSU5UU1wiKTtcbnZhciBpc1ByaW1pdGl2ZSA9ICh2YWwpID0+ICF2YWwgfHwgdHlwZW9mIHZhbCAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsICE9PSBcImZ1bmN0aW9uXCI7XG52YXIgY29tcGFyZVN0cmluZ2lmaWVkID0gKGEyLCBiMykgPT4ge1xuICBpZiAodHlwZW9mIGEyID09PSB0eXBlb2YgYjMpIHtcbiAgICBjb25zdCBsZWZ0ID0gU3RyaW5nKGEyKTtcbiAgICBjb25zdCByaWdodCA9IFN0cmluZyhiMyk7XG4gICAgcmV0dXJuIGxlZnQgPCByaWdodCA/IC0xIDogbGVmdCA+IHJpZ2h0ID8gMSA6IDA7XG4gIH1cbiAgaWYgKHR5cGVvZiBhMiA9PT0gXCJzeW1ib2xcIikge1xuICAgIGFzc2VydCh0eXBlb2YgYjMgPT09IFwic3RyaW5nXCIpO1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBhc3NlcnQodHlwZW9mIGEyID09PSBcInN0cmluZ1wiKTtcbiAgYXNzZXJ0KHR5cGVvZiBiMyA9PT0gXCJzeW1ib2xcIik7XG4gIHJldHVybiAxO1xufTtcbnZhciBnZXRNZXRob2ROYW1lcyA9ICh2YWwpID0+IHtcbiAgbGV0IGxheWVyID0gdmFsO1xuICBjb25zdCBuYW1lcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIHdoaWxlIChsYXllciAhPT0gbnVsbCAmJiBsYXllciAhPT0gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgIGNvbnN0IGRlc2NzID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhsYXllcik7XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIG93bktleXMoZGVzY3MpKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbFtuYW1lXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIG5hbWVzLmFkZChuYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzUHJpbWl0aXZlKHZhbCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBsYXllciA9IGdldFByb3RvdHlwZU9mKGxheWVyKTtcbiAgfVxuICByZXR1cm4gaGFyZGVuKFsuLi5uYW1lc10uc29ydChjb21wYXJlU3RyaW5naWZpZWQpKTtcbn07XG5mcmVlemU0KGdldE1ldGhvZE5hbWVzKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL3Bhc3Mtc3R5bGUvc3JjL3Bhc3NTdHlsZS1oZWxwZXJzLmpzKi9cbnZhciB7IGlzQXJyYXkgfSA9IEFycmF5O1xudmFyIHsgcHJvdG90eXBlOiBmdW5jdGlvblByb3RvdHlwZSB9ID0gRnVuY3Rpb247XG52YXIge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIGdldFByb3RvdHlwZU9mOiBnZXRQcm90b3R5cGVPZjIsXG4gIGhhc093bjogaGFzT3duMixcbiAgaXNGcm96ZW4sXG4gIHByb3RvdHlwZTogb2JqZWN0UHJvdG90eXBlXG59ID0gT2JqZWN0O1xudmFyIHsgYXBwbHk6IGFwcGx5MyB9ID0gUmVmbGVjdDtcbnZhciB7IHRvU3RyaW5nVGFnOiB0b1N0cmluZ1RhZ1N5bWJvbCB9ID0gU3ltYm9sO1xudmFyIHR5cGVkQXJyYXlQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZjIoVWludDhBcnJheS5wcm90b3R5cGUpO1xudmFyIHR5cGVkQXJyYXlUb1N0cmluZ1RhZ0Rlc2MgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoXG4gIHR5cGVkQXJyYXlQcm90b3R5cGUsXG4gIHRvU3RyaW5nVGFnU3ltYm9sXG4pO1xuYXNzZXJ0KHR5cGVkQXJyYXlUb1N0cmluZ1RhZ0Rlc2MpO1xudmFyIGdldFR5cGVkQXJyYXlUb1N0cmluZ1RhZyA9IHR5cGVkQXJyYXlUb1N0cmluZ1RhZ0Rlc2MuZ2V0O1xuYXNzZXJ0KHR5cGVvZiBnZXRUeXBlZEFycmF5VG9TdHJpbmdUYWcgPT09IFwiZnVuY3Rpb25cIik7XG52YXIgaXNQcmltaXRpdmUyID0gKHZhbCkgPT4gKFxuICAvKiBTYWZlciB3b3VsZCBiZSBgT2JqZWN0KHZhbCkgIT09IHZhbGAgYnV0IGlzIHRvbyBleHBlbnNpdmUgb24gWFMuKi9cbiAgLyogU28gaW5zdGVhZCB3ZSB1c2UgdGhpcyBhZGhvYyBzZXQgb2YgdHlwZSB0ZXN0cy4gQnV0IHRoaXMgaXMgbm90IHNhZmUgaW4qL1xuICAvKiB0aGUgZmFjZSBvZiBwb3NzaWJsZSBldm9sdXRpb24gb2YgdGhlIGxhbmd1YWdlLiBCZXdhcmUhKi9cbiAgIXZhbCB8fCB0eXBlb2YgdmFsICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiB2YWwgIT09IFwiZnVuY3Rpb25cIlxuKTtcbmhhcmRlbihpc1ByaW1pdGl2ZTIpO1xudmFyIGlzT2JqZWN0ID0gKHZhbCkgPT4gKFxuICAvKiBTYWZlciB3b3VsZCBiZSBgT2JqZWN0KHZhbCkgLT09IHZhbGAgYnV0IGlzIHRvbyBleHBlbnNpdmUgb24gWFMuKi9cbiAgLyogU28gaW5zdGVhZCB3ZSB1c2UgdGhpcyBhZGhvYyBzZXQgb2YgdHlwZSB0ZXN0cy4gQnV0IHRoaXMgaXMgbm90IHNhZmUgaW4qL1xuICAvKiB0aGUgZmFjZSBvZiBwb3NzaWJsZSBldm9sdXRpb24gb2YgdGhlIGxhbmd1YWdlLiBCZXdhcmUhKi9cbiAgISF2YWwgJiYgKHR5cGVvZiB2YWwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIHZhbCA9PT0gXCJmdW5jdGlvblwiKVxuKTtcbmhhcmRlbihpc09iamVjdCk7XG52YXIgaXNUeXBlZEFycmF5ID0gKG9iamVjdCkgPT4ge1xuICBjb25zdCB0YWcgPSBhcHBseTMoZ2V0VHlwZWRBcnJheVRvU3RyaW5nVGFnLCBvYmplY3QsIFtdKTtcbiAgcmV0dXJuIHRhZyAhPT0gdm9pZCAwO1xufTtcbmhhcmRlbihpc1R5cGVkQXJyYXkpO1xudmFyIFBBU1NfU1RZTEUgPSBTeW1ib2wuZm9yKFwicGFzc1N0eWxlXCIpO1xudmFyIGFzc2VydENoZWNrZXIgPSAoY29uZCwgZGV0YWlscykgPT4ge1xuICBhc3NlcnQoY29uZCwgZGV0YWlscyk7XG4gIHJldHVybiB0cnVlO1xufTtcbmhhcmRlbihhc3NlcnRDaGVja2VyKTtcbnZhciBDWCA9IChjaGVjaykgPT4ge1xuICBjb25zdCByZWplY3QgPSAoVCwgLi4uc3VicykgPT4gY2hlY2soZmFsc2UsIHJlZGFjdGVkKFQsIC4uLnN1YnMpKTtcbiAgcmV0dXJuIHJlamVjdDtcbn07XG5oYXJkZW4oQ1gpO1xudmFyIGdldE93bkRhdGFEZXNjcmlwdG9yID0gKGNhbmRpZGF0ZSwgcHJvcE5hbWUsIHNob3VsZEJlRW51bWVyYWJsZSwgY2hlY2spID0+IHtcbiAgY29uc3QgZGVzYyA9IChcbiAgICAvKiogQHR5cGUge1Byb3BlcnR5RGVzY3JpcHRvcn0gKi9cbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY2FuZGlkYXRlLCBwcm9wTmFtZSlcbiAgKTtcbiAgcmV0dXJuIChkZXNjICE9PSB2b2lkIDAgfHwgISFjaGVjayAmJiBDWChjaGVjaylgJHtxdW90ZShwcm9wTmFtZSl9IHByb3BlcnR5IGV4cGVjdGVkOiAke2NhbmRpZGF0ZX1gKSAmJiAoaGFzT3duMihkZXNjLCBcInZhbHVlXCIpIHx8ICEhY2hlY2sgJiYgQ1goXG4gICAgY2hlY2tcbiAgKWAke3F1b3RlKHByb3BOYW1lKX0gbXVzdCBub3QgYmUgYW4gYWNjZXNzb3IgcHJvcGVydHk6ICR7Y2FuZGlkYXRlfWApICYmIChzaG91bGRCZUVudW1lcmFibGUgPyBkZXNjLmVudW1lcmFibGUgfHwgISFjaGVjayAmJiBDWChcbiAgICBjaGVja1xuICApYCR7cXVvdGUocHJvcE5hbWUpfSBtdXN0IGJlIGFuIGVudW1lcmFibGUgcHJvcGVydHk6ICR7Y2FuZGlkYXRlfWAgOiAhZGVzYy5lbnVtZXJhYmxlIHx8ICEhY2hlY2sgJiYgQ1goXG4gICAgY2hlY2tcbiAgKWAke3F1b3RlKHByb3BOYW1lKX0gbXVzdCBub3QgYmUgYW4gZW51bWVyYWJsZSBwcm9wZXJ0eTogJHtjYW5kaWRhdGV9YCkgPyBkZXNjIDogKFxuICAgIC8qKiBAdHlwZSB7UHJvcGVydHlEZXNjcmlwdG9yfSAqL1xuICAgIC8qKiBAdHlwZSB7dW5rbm93bn0gKi9cbiAgICB2b2lkIDBcbiAgKTtcbn07XG5oYXJkZW4oZ2V0T3duRGF0YURlc2NyaXB0b3IpO1xudmFyIGdldFRhZyA9ICh0YWdSZWNvcmQpID0+IHRhZ1JlY29yZFtTeW1ib2wudG9TdHJpbmdUYWddO1xuaGFyZGVuKGdldFRhZyk7XG52YXIgY2hlY2tQYXNzU3R5bGUgPSAob2JqLCBwYXNzU3R5bGUsIGV4cGVjdGVkUGFzc1N0eWxlLCBjaGVjaykgPT4ge1xuICByZXR1cm4gcGFzc1N0eWxlID09PSBleHBlY3RlZFBhc3NTdHlsZSB8fCAhIWNoZWNrICYmIENYKGNoZWNrKWBFeHBlY3RlZCAke3F1b3RlKGV4cGVjdGVkUGFzc1N0eWxlKX0sIG5vdCAke3F1b3RlKHBhc3NTdHlsZSl9OiAke29ian1gO1xufTtcbmhhcmRlbihjaGVja1Bhc3NTdHlsZSk7XG52YXIgbWFrZUNoZWNrVGFnUmVjb3JkID0gKGNoZWNrUHJvdG8pID0+IHtcbiAgY29uc3QgY2hlY2tUYWdSZWNvcmQyID0gKHRhZ1JlY29yZCwgZXhwZWN0ZWRQYXNzU3R5bGUsIGNoZWNrKSA9PiB7XG4gICAgcmV0dXJuICghaXNQcmltaXRpdmUyKHRhZ1JlY29yZCkgfHwgISFjaGVjayAmJiBDWChjaGVjaylgQSBub24tb2JqZWN0IGNhbm5vdCBiZSBhIHRhZ1JlY29yZDogJHt0YWdSZWNvcmR9YCkgJiYgKGlzRnJvemVuKHRhZ1JlY29yZCkgfHwgISFjaGVjayAmJiBDWChjaGVjaylgQSB0YWdSZWNvcmQgbXVzdCBiZSBmcm96ZW46ICR7dGFnUmVjb3JkfWApICYmICghaXNBcnJheSh0YWdSZWNvcmQpIHx8ICEhY2hlY2sgJiYgQ1goY2hlY2spYEFuIGFycmF5IGNhbm5vdCBiZSBhIHRhZ1JlY29yZDogJHt0YWdSZWNvcmR9YCkgJiYgY2hlY2tQYXNzU3R5bGUoXG4gICAgICB0YWdSZWNvcmQsXG4gICAgICBnZXRPd25EYXRhRGVzY3JpcHRvcih0YWdSZWNvcmQsIFBBU1NfU1RZTEUsIGZhbHNlLCBjaGVjaykudmFsdWUsXG4gICAgICBleHBlY3RlZFBhc3NTdHlsZSxcbiAgICAgIGNoZWNrXG4gICAgKSAmJiAodHlwZW9mIGdldE93bkRhdGFEZXNjcmlwdG9yKHRhZ1JlY29yZCwgU3ltYm9sLnRvU3RyaW5nVGFnLCBmYWxzZSwgY2hlY2spLnZhbHVlID09PSBcInN0cmluZ1wiIHx8ICEhY2hlY2sgJiYgQ1goXG4gICAgICBjaGVja1xuICAgIClgQSBbU3ltYm9sLnRvU3RyaW5nVGFnXS1uYW1lZCBwcm9wZXJ0eSBtdXN0IGJlIGEgc3RyaW5nOiAke3RhZ1JlY29yZH1gKSAmJiBjaGVja1Byb3RvKHRhZ1JlY29yZCwgZ2V0UHJvdG90eXBlT2YyKHRhZ1JlY29yZCksIGNoZWNrKTtcbiAgfTtcbiAgcmV0dXJuIGhhcmRlbihjaGVja1RhZ1JlY29yZDIpO1xufTtcbnZhciBjaGVja1RhZ1JlY29yZCA9IG1ha2VDaGVja1RhZ1JlY29yZChcbiAgKHZhbCwgcHJvdG8sIGNoZWNrKSA9PiBwcm90byA9PT0gb2JqZWN0UHJvdG90eXBlIHx8ICEhY2hlY2sgJiYgY2hlY2soZmFsc2UsIHJlZGFjdGVkYEEgdGFnUmVjb3JkIG11c3QgaW5oZXJpdCBmcm9tIE9iamVjdC5wcm90b3R5cGU6ICR7dmFsfWApXG4pO1xuaGFyZGVuKGNoZWNrVGFnUmVjb3JkKTtcbnZhciBjaGVja0Z1bmN0aW9uVGFnUmVjb3JkID0gbWFrZUNoZWNrVGFnUmVjb3JkKFxuICAodmFsLCBwcm90bywgY2hlY2spID0+IHByb3RvID09PSBmdW5jdGlvblByb3RvdHlwZSB8fCBwcm90byAhPT0gbnVsbCAmJiBnZXRQcm90b3R5cGVPZjIocHJvdG8pID09PSBmdW5jdGlvblByb3RvdHlwZSB8fCAhIWNoZWNrICYmIGNoZWNrKFxuICAgIGZhbHNlLFxuICAgIHJlZGFjdGVkYEZvciBmdW5jdGlvbnMsIGEgdGFnUmVjb3JkIG11c3QgaW5oZXJpdCBmcm9tIEZ1bmN0aW9uLnByb3RvdHlwZTogJHt2YWx9YFxuICApXG4pO1xuaGFyZGVuKGNoZWNrRnVuY3Rpb25UYWdSZWNvcmQpO1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvQGVuZG8vcGFzcy1zdHlsZS9zcmMvcmVtb3RhYmxlLmpzKi9cbnZhciBjYW5CZU1ldGhvZCA9IChmdW5jKSA9PiB0eXBlb2YgZnVuYyA9PT0gXCJmdW5jdGlvblwiICYmICEoUEFTU19TVFlMRSBpbiBmdW5jKTtcbmhhcmRlbihjYW5CZU1ldGhvZCk7XG52YXIgY2FuQmVNZXRob2ROYW1lID0gKGtleSkgPT4gKFxuICAvKiB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyB8fCB0eXBlb2Yga2V5ID09PSAnc3ltYm9sJzsqL1xuICB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBrZXkgPT09IFwic3ltYm9sXCIgfHwgdHlwZW9mIGtleSA9PT0gXCJudW1iZXJcIlxuKTtcbmhhcmRlbihjYW5CZU1ldGhvZE5hbWUpO1xudmFyIGdldFJlbW90YWJsZU1ldGhvZE5hbWVzID0gKGJlaGF2aW9yTWV0aG9kcykgPT4gZ2V0TWV0aG9kTmFtZXMoYmVoYXZpb3JNZXRob2RzKTtcbmhhcmRlbihnZXRSZW1vdGFibGVNZXRob2ROYW1lcyk7XG52YXIgeyBvd25LZXlzOiBvd25LZXlzMiB9ID0gUmVmbGVjdDtcbnZhciB7IGlzQXJyYXk6IGlzQXJyYXkyIH0gPSBBcnJheTtcbnZhciB7XG4gIGdldFByb3RvdHlwZU9mOiBnZXRQcm90b3R5cGVPZjMsXG4gIGlzRnJvemVuOiBpc0Zyb3plbjIsXG4gIHByb3RvdHlwZTogb2JqZWN0UHJvdG90eXBlMixcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczIsXG4gIGhhc093bjogaGFzT3duM1xufSA9IE9iamVjdDtcbnZhciBjaGVja0lmYWNlID0gKGlmYWNlLCBjaGVjaykgPT4ge1xuICByZXR1cm4gKFxuICAgIC8qIFRPRE8gb3RoZXIgcG9zc2libGUgaWZhY2VzLCBvbmNlIHdlIGhhdmUgdGhpcmQgcGFydHkgdmVyYWNpdHkqL1xuICAgICh0eXBlb2YgaWZhY2UgPT09IFwic3RyaW5nXCIgfHwgISFjaGVjayAmJiBDWChcbiAgICAgIGNoZWNrXG4gICAgKWBGb3Igbm93LCBpbnRlcmZhY2UgJHtpZmFjZX0gbXVzdCBiZSBhIHN0cmluZzsgdW5pbXBsZW1lbnRlZGApICYmIChpZmFjZSA9PT0gXCJSZW1vdGFibGVcIiB8fCBpZmFjZS5zdGFydHNXaXRoKFwiQWxsZWdlZDogXCIpIHx8IGlmYWNlLnN0YXJ0c1dpdGgoXCJEZWJ1Z05hbWU6IFwiKSB8fCAhIWNoZWNrICYmIENYKGNoZWNrKWBGb3Igbm93LCBpZmFjZSAke3F1b3RlKFxuICAgICAgaWZhY2VcbiAgICApfSBtdXN0IGJlIFwiUmVtb3RhYmxlXCIgb3IgYmVnaW4gd2l0aCBcIkFsbGVnZWQ6IFwiIG9yIFwiRGVidWdOYW1lOiBcIjsgdW5pbXBsZW1lbnRlZGApXG4gICk7XG59O1xudmFyIGFzc2VydElmYWNlID0gKGlmYWNlKSA9PiBjaGVja0lmYWNlKGlmYWNlLCBhc3NlcnRDaGVja2VyKTtcbmhhcmRlbihhc3NlcnRJZmFjZSk7XG52YXIgY2hlY2tSZW1vdGFibGVQcm90b09mID0gKG9yaWdpbmFsLCBjaGVjaykgPT4ge1xuICAhaXNQcmltaXRpdmUyKG9yaWdpbmFsKSB8fCB0aHJvd1JlZGFjdGVkYFJlbW90YWJsZXMgbXVzdCBiZSBvYmplY3RzIG9yIGZ1bmN0aW9uczogJHtvcmlnaW5hbH1gO1xuICBjb25zdCBwcm90byA9IGdldFByb3RvdHlwZU9mMyhvcmlnaW5hbCk7XG4gIGlmIChwcm90byA9PT0gb2JqZWN0UHJvdG90eXBlMiB8fCBwcm90byA9PT0gbnVsbCB8fCBwcm90byA9PT0gRnVuY3Rpb24ucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuICEhY2hlY2sgJiYgQ1goY2hlY2spYFJlbW90YWJsZXMgbXVzdCBiZSBleHBsaWNpdGx5IGRlY2xhcmVkOiAke3F1b3RlKG9yaWdpbmFsKX1gO1xuICB9XG4gIGlmICh0eXBlb2Ygb3JpZ2luYWwgPT09IFwib2JqZWN0XCIpIHtcbiAgICBjb25zdCBwcm90b1Byb3RvID0gZ2V0UHJvdG90eXBlT2YzKHByb3RvKTtcbiAgICBpZiAocHJvdG9Qcm90byAhPT0gb2JqZWN0UHJvdG90eXBlMiAmJiBwcm90b1Byb3RvICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gY2hlY2tSZW1vdGFibGUocHJvdG8sIGNoZWNrKTtcbiAgICB9XG4gICAgaWYgKCFjaGVja1RhZ1JlY29yZChwcm90bywgXCJyZW1vdGFibGVcIiwgY2hlY2spKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBvcmlnaW5hbCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgaWYgKCFjaGVja0Z1bmN0aW9uVGFnUmVjb3JkKHByb3RvLCBcInJlbW90YWJsZVwiLCBjaGVjaykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgY29uc3QgcGFzc1N0eWxlS2V5ID0gKFxuICAgIC8qKiBAdHlwZSB7dW5rbm93bn0gKi9cbiAgICBQQVNTX1NUWUxFXG4gICk7XG4gIGNvbnN0IHRhZ0tleSA9IChcbiAgICAvKiogQHR5cGUge3Vua25vd259ICovXG4gICAgU3ltYm9sLnRvU3RyaW5nVGFnXG4gICk7XG4gIGNvbnN0IHtcbiAgICAvKiBjaGVja1RhZ1JlY29yZCBhbHJlYWR5IHZlcmlmaWVkIFBBU1NfU1RZTEUgYW5kIFN5bWJvbC50b1N0cmluZ1RhZyBvd24gZGF0YSBwcm9wZXJ0aWVzLiovXG4gICAgW1xuICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgICBwYXNzU3R5bGVLZXlcbiAgICBdOiBfcGFzc1N0eWxlRGVzYyxcbiAgICBbXG4gICAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICAgIHRhZ0tleVxuICAgIF06IHsgdmFsdWU6IGlmYWNlIH0sXG4gICAgLi4ucmVzdERlc2NzXG4gIH0gPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzMihwcm90byk7XG4gIHJldHVybiAob3duS2V5czIocmVzdERlc2NzKS5sZW5ndGggPT09IDAgfHwgISFjaGVjayAmJiBDWChcbiAgICBjaGVja1xuICApYFVuZXhwZWN0ZWQgcHJvcGVydGllcyBvbiBSZW1vdGFibGUgUHJvdG8gJHtvd25LZXlzMihyZXN0RGVzY3MpfWApICYmIGNoZWNrSWZhY2UoaWZhY2UsIGNoZWNrKTtcbn07XG52YXIgY29uZmlybWVkUmVtb3RhYmxlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha1NldCgpO1xudmFyIGNoZWNrUmVtb3RhYmxlID0gKHZhbCwgY2hlY2spID0+IHtcbiAgaWYgKGNvbmZpcm1lZFJlbW90YWJsZXMuaGFzKHZhbCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoIWlzRnJvemVuMih2YWwpKSB7XG4gICAgcmV0dXJuICEhY2hlY2sgJiYgQ1goY2hlY2spYGNhbm5vdCBzZXJpYWxpemUgbm9uLWZyb3plbiBvYmplY3RzIGxpa2UgJHt2YWx9YDtcbiAgfVxuICBpZiAoIVJlbW90YWJsZUhlbHBlci5jYW5CZVZhbGlkKHZhbCwgY2hlY2spKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHJlc3VsdCA9IGNoZWNrUmVtb3RhYmxlUHJvdG9PZih2YWwsIGNoZWNrKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIGNvbmZpcm1lZFJlbW90YWJsZXMuYWRkKHZhbCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgZ2V0SW50ZXJmYWNlT2YgPSAodmFsKSA9PiB7XG4gIGlmIChpc1ByaW1pdGl2ZTIodmFsKSB8fCB2YWxbUEFTU19TVFlMRV0gIT09IFwicmVtb3RhYmxlXCIgfHwgIWNoZWNrUmVtb3RhYmxlKHZhbCkpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIHJldHVybiBnZXRUYWcodmFsKTtcbn07XG5oYXJkZW4oZ2V0SW50ZXJmYWNlT2YpO1xudmFyIFJlbW90YWJsZUhlbHBlciA9IGhhcmRlbih7XG4gIHN0eWxlTmFtZTogXCJyZW1vdGFibGVcIixcbiAgY2FuQmVWYWxpZDogKGNhbmRpZGF0ZSwgY2hlY2sgPSB2b2lkIDApID0+IHtcbiAgICBjb25zdCB2YWxpZFR5cGUgPSAoIWlzUHJpbWl0aXZlMihjYW5kaWRhdGUpIHx8ICEhY2hlY2sgJiYgQ1goY2hlY2spYGNhbm5vdCBzZXJpYWxpemUgbm9uLW9iamVjdHMgYXMgUmVtb3RhYmxlICR7Y2FuZGlkYXRlfWApICYmICghaXNBcnJheTIoY2FuZGlkYXRlKSB8fCAhIWNoZWNrICYmIENYKGNoZWNrKWBjYW5ub3Qgc2VyaWFsaXplIGFycmF5cyBhcyBSZW1vdGFibGUgJHtjYW5kaWRhdGV9YCk7XG4gICAgaWYgKCF2YWxpZFR5cGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgZGVzY3MgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzMihjYW5kaWRhdGUpO1xuICAgIGlmICh0eXBlb2YgY2FuZGlkYXRlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICByZXR1cm4gb3duS2V5czIoZGVzY3MpLmV2ZXJ5KChrZXkpID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAvKiBUeXBlY2FzdCBuZWVkZWQgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTg2MyovXG4gICAgICAgICAgKGhhc093bjMoZGVzY3NbXG4gICAgICAgICAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICAgICAgICAgIGtleVxuICAgICAgICAgIF0sIFwidmFsdWVcIikgfHwgISFjaGVjayAmJiBDWChjaGVjaylgY2Fubm90IHNlcmlhbGl6ZSBSZW1vdGFibGVzIHdpdGggYWNjZXNzb3JzIGxpa2UgJHtxdW90ZShcbiAgICAgICAgICAgIFN0cmluZyhrZXkpXG4gICAgICAgICAgKX0gaW4gJHtjYW5kaWRhdGV9YCkgJiYgKGtleSA9PT0gU3ltYm9sLnRvU3RyaW5nVGFnICYmIGNoZWNrSWZhY2UoY2FuZGlkYXRlW2tleV0sIGNoZWNrKSB8fCAoY2FuQmVNZXRob2QoY2FuZGlkYXRlW2tleV0pIHx8ICEhY2hlY2sgJiYgQ1goY2hlY2spYGNhbm5vdCBzZXJpYWxpemUgUmVtb3RhYmxlcyB3aXRoIG5vbi1tZXRob2RzIGxpa2UgJHtxdW90ZShcbiAgICAgICAgICAgIFN0cmluZyhrZXkpXG4gICAgICAgICAgKX0gaW4gJHtjYW5kaWRhdGV9YCkgJiYgKGtleSAhPT0gUEFTU19TVFlMRSB8fCAhIWNoZWNrICYmIENYKGNoZWNrKWBBIHBhc3MtYnktcmVtb3RlIGNhbm5vdCBzaGFkb3cgJHtxdW90ZShQQVNTX1NUWUxFKX1gKSlcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNhbmRpZGF0ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG5hbWU6IG5hbWVEZXNjLFxuICAgICAgICBsZW5ndGg6IGxlbmd0aERlc2MsXG4gICAgICAgIC8qIEB0cy1pZ25vcmUgVFMgZG9lc24ndCBsaWtlIHN5bWJvbHMgYXMgY29tcHV0ZWQgaW5kZXhlcz8/Ki9cbiAgICAgICAgW1N5bWJvbC50b1N0cmluZ1RhZ106IHRvU3RyaW5nVGFnRGVzYyxcbiAgICAgICAgLi4ucmVzdERlc2NzXG4gICAgICB9ID0gZGVzY3M7XG4gICAgICBjb25zdCByZXN0S2V5cyA9IG93bktleXMyKHJlc3REZXNjcyk7XG4gICAgICByZXR1cm4gKG5hbWVEZXNjICYmIHR5cGVvZiBuYW1lRGVzYy52YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCAhIWNoZWNrICYmIENYKGNoZWNrKWBGYXIgZnVuY3Rpb24gbmFtZSBtdXN0IGJlIGEgc3RyaW5nLCBpbiAke2NhbmRpZGF0ZX1gKSAmJiAobGVuZ3RoRGVzYyAmJiB0eXBlb2YgbGVuZ3RoRGVzYy52YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCAhIWNoZWNrICYmIENYKFxuICAgICAgICBjaGVja1xuICAgICAgKWBGYXIgZnVuY3Rpb24gbGVuZ3RoIG11c3QgYmUgYSBudW1iZXIsIGluICR7Y2FuZGlkYXRlfWApICYmICh0b1N0cmluZ1RhZ0Rlc2MgPT09IHZvaWQgMCB8fCAodHlwZW9mIHRvU3RyaW5nVGFnRGVzYy52YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCAhIWNoZWNrICYmIENYKFxuICAgICAgICBjaGVja1xuICAgICAgKWBGYXIgZnVuY3Rpb24gQEB0b1N0cmluZ1RhZyBtdXN0IGJlIGEgc3RyaW5nLCBpbiAke2NhbmRpZGF0ZX1gKSAmJiBjaGVja0lmYWNlKHRvU3RyaW5nVGFnRGVzYy52YWx1ZSwgY2hlY2spKSAmJiAocmVzdEtleXMubGVuZ3RoID09PSAwIHx8ICEhY2hlY2sgJiYgQ1goXG4gICAgICAgIGNoZWNrXG4gICAgICApYEZhciBmdW5jdGlvbnMgdW5leHBlY3RlZCBwcm9wZXJ0aWVzIGJlc2lkZXMgLm5hbWUgYW5kIC5sZW5ndGggJHtyZXN0S2V5c31gKTtcbiAgICB9XG4gICAgcmV0dXJuICEhY2hlY2sgJiYgQ1goY2hlY2spYHVucmVjb2duaXplZCB0eXBlb2YgJHtjYW5kaWRhdGV9YDtcbiAgfSxcbiAgYXNzZXJ0UmVzdFZhbGlkOiAoY2FuZGlkYXRlKSA9PiBjaGVja1JlbW90YWJsZShjYW5kaWRhdGUsIGFzc2VydENoZWNrZXIpLFxuICBldmVyeTogKF9wYXNzYWJsZSwgX2ZuKSA9PiB0cnVlXG59KTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL3Bhc3Mtc3R5bGUvc3JjL21ha2UtZmFyLmpzKi9cbnZhciB7IHByb3RvdHlwZTogZnVuY3Rpb25Qcm90b3R5cGUyIH0gPSBGdW5jdGlvbjtcbnZhciB7XG4gIGdldFByb3RvdHlwZU9mOiBnZXRQcm90b3R5cGVPZjQsXG4gIHNldFByb3RvdHlwZU9mLFxuICBjcmVhdGUsXG4gIGlzRnJvemVuOiBpc0Zyb3plbjMsXG4gIHByb3RvdHlwZTogb2JqZWN0UHJvdG90eXBlM1xufSA9IE9iamVjdDtcbnZhciBtYWtlUmVtb3RhYmxlUHJvdG8gPSAocmVtb3RhYmxlLCBpZmFjZSkgPT4ge1xuICBsZXQgb2xkUHJvdG8gPSBnZXRQcm90b3R5cGVPZjQocmVtb3RhYmxlKTtcbiAgaWYgKHR5cGVvZiByZW1vdGFibGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICBpZiAob2xkUHJvdG8gPT09IG51bGwpIHtcbiAgICAgIG9sZFByb3RvID0gb2JqZWN0UHJvdG90eXBlMztcbiAgICB9XG4gICAgb2xkUHJvdG8gPT09IG9iamVjdFByb3RvdHlwZTMgfHwgdGhyb3dSZWRhY3RlZGBGb3Igbm93LCByZW1vdGFibGVzIGNhbm5vdCBpbmhlcml0IGZyb20gYW55dGhpbmcgdW51c3VhbCwgaW4gJHtyZW1vdGFibGV9YDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcmVtb3RhYmxlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBvbGRQcm90byAhPT0gbnVsbCB8fCB0aHJvd1JlZGFjdGVkYE9yaWdpbmFsIGZ1bmN0aW9uIG11c3Qgbm90IGluaGVyaXQgZnJvbSBudWxsOiAke3JlbW90YWJsZX1gO1xuICAgIG9sZFByb3RvID09PSBmdW5jdGlvblByb3RvdHlwZTIgfHwgZ2V0UHJvdG90eXBlT2Y0KG9sZFByb3RvKSA9PT0gZnVuY3Rpb25Qcm90b3R5cGUyIHx8IHRocm93UmVkYWN0ZWRgRmFyIGZ1bmN0aW9ucyBtdXN0IG9yaWdpbmFsbHkgaW5oZXJpdCBmcm9tIEZ1bmN0aW9uLnByb3RvdHlwZSwgaW4gJHtyZW1vdGFibGV9YDtcbiAgfSBlbHNlIHtcbiAgICB0aHJvd1JlZGFjdGVkYHVucmVjb2duaXplZCB0eXBlb2YgJHtyZW1vdGFibGV9YDtcbiAgfVxuICByZXR1cm4gaGFyZGVuKFxuICAgIGNyZWF0ZShvbGRQcm90bywge1xuICAgICAgW1BBU1NfU1RZTEVdOiB7IHZhbHVlOiBcInJlbW90YWJsZVwiIH0sXG4gICAgICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogeyB2YWx1ZTogaWZhY2UgfVxuICAgIH0pXG4gICk7XG59O1xudmFyIGFzc2VydENhbkJlUmVtb3RhYmxlID0gKGNhbmRpZGF0ZSkgPT4gUmVtb3RhYmxlSGVscGVyLmNhbkJlVmFsaWQoY2FuZGlkYXRlLCBhc3NlcnRDaGVja2VyKTtcbnZhciBSZW1vdGFibGUgPSAoaWZhY2UgPSBcIlJlbW90YWJsZVwiLCBwcm9wcyA9IHZvaWQgMCwgcmVtb3RhYmxlID0gKFxuICAvKiogQHR5cGUge1R9ICovXG4gIHt9XG4pKSA9PiB7XG4gIGFzc2VydElmYWNlKGlmYWNlKTtcbiAgYXNzZXJ0KGlmYWNlKTtcbiAgcHJvcHMgPT09IHZvaWQgMCB8fCB0aHJvd1JlZGFjdGVkYFJlbW90YWJsZSBwcm9wcyBub3QgeWV0IGltcGxlbWVudGVkICR7cHJvcHN9YDtcbiAgYXNzZXJ0Q2FuQmVSZW1vdGFibGUocmVtb3RhYmxlKTtcbiAgIShQQVNTX1NUWUxFIGluIHJlbW90YWJsZSkgfHwgdGhyb3dSZWRhY3RlZGBSZW1vdGFibGUgJHtyZW1vdGFibGV9IGlzIGFscmVhZHkgbWFya2VkIGFzIGEgJHtxdW90ZShcbiAgICByZW1vdGFibGVbUEFTU19TVFlMRV1cbiAgKX1gO1xuICBoYXJkZW4uaXNGYWtlIHx8IC8qIEVuc3VyZSB0aGF0IHRoZSByZW1vdGFibGUgaXNuJ3QgYWxyZWFkeSBmcm96ZW4uKi9cbiAgIWlzRnJvemVuMyhyZW1vdGFibGUpIHx8IHRocm93UmVkYWN0ZWRgUmVtb3RhYmxlICR7cmVtb3RhYmxlfSBpcyBhbHJlYWR5IGZyb3plbmA7XG4gIGNvbnN0IHJlbW90YWJsZVByb3RvID0gbWFrZVJlbW90YWJsZVByb3RvKHJlbW90YWJsZSwgaWZhY2UpO1xuICBjb25zdCBtdXRhdGVIYXJkZW5BbmRDaGVjayA9ICh0YXJnZXQpID0+IHtcbiAgICBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHJlbW90YWJsZVByb3RvKTtcbiAgICBoYXJkZW4odGFyZ2V0KTtcbiAgICBhc3NlcnRDYW5CZVJlbW90YWJsZSh0YXJnZXQpO1xuICB9O1xuICBtdXRhdGVIYXJkZW5BbmRDaGVjayh7fSk7XG4gIG11dGF0ZUhhcmRlbkFuZENoZWNrKHJlbW90YWJsZSk7XG4gIGFzc2VydChpZmFjZSAhPT0gdm9pZCAwKTtcbiAgcmV0dXJuIChcbiAgICAvKiogQHR5cGUge2FueX0gKi9cbiAgICByZW1vdGFibGVcbiAgKTtcbn07XG5oYXJkZW4oUmVtb3RhYmxlKTtcbnZhciBHRVRfTUVUSE9EX05BTUVTID0gXCJfX2dldE1ldGhvZE5hbWVzX19cIjtcbnZhciBnZXRNZXRob2ROYW1lc01ldGhvZCA9IGhhcmRlbih7XG4gIFtHRVRfTUVUSE9EX05BTUVTXSgpIHtcbiAgICByZXR1cm4gZ2V0TWV0aG9kTmFtZXModGhpcyk7XG4gIH1cbn0pW0dFVF9NRVRIT0RfTkFNRVNdO1xudmFyIGdldE1ldGhvZE5hbWVzRGVzY3JpcHRvciA9IGhhcmRlbih7XG4gIHZhbHVlOiBnZXRNZXRob2ROYW1lc01ldGhvZCxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gIHdyaXRhYmxlOiBmYWxzZVxufSk7XG52YXIgRmFyID0gKGZhck5hbWUsIHJlbW90YWJsZSA9IHZvaWQgMCkgPT4ge1xuICBjb25zdCByNiA9IHJlbW90YWJsZSA9PT0gdm9pZCAwID8gKFxuICAgIC8qKiBAdHlwZSB7VH0gKi9cbiAgICB7fVxuICApIDogcmVtb3RhYmxlO1xuICBpZiAodHlwZW9mIHI2ID09PSBcIm9iamVjdFwiICYmICEoR0VUX01FVEhPRF9OQU1FUyBpbiByNikpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocjYsIEdFVF9NRVRIT0RfTkFNRVMsIGdldE1ldGhvZE5hbWVzRGVzY3JpcHRvcik7XG4gIH1cbiAgcmV0dXJuIFJlbW90YWJsZShgQWxsZWdlZDogJHtmYXJOYW1lfWAsIHZvaWQgMCwgcjYpO1xufTtcbmhhcmRlbihGYXIpO1xudmFyIFRvRmFyRnVuY3Rpb24gPSAoZmFyTmFtZSwgZnVuYykgPT4ge1xuICBpZiAoZ2V0SW50ZXJmYWNlT2YoZnVuYykgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiBmdW5jO1xuICB9XG4gIHJldHVybiBGYXIoZmFyTmFtZSwgKC4uLmFyZ3MpID0+IGZ1bmMoLi4uYXJncykpO1xufTtcbmhhcmRlbihUb0ZhckZ1bmN0aW9uKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL3Bhc3Mtc3R5bGUvc3JjL2l0ZXItaGVscGVycy5qcyovXG52YXIgbWFwSXRlcmFibGUgPSAoYmFzZUl0ZXJhYmxlLCBmdW5jKSA9PiAoXG4gIC8qKiBAdHlwZSB7SXRlcmFibGU8VT59ICovXG4gIEZhcihcIm1hcHBlZCBpdGVyYWJsZVwiLCB7XG4gICAgW1N5bWJvbC5pdGVyYXRvcl06ICgpID0+IHtcbiAgICAgIGNvbnN0IGJhc2VJdGVyYXRvciA9IGJhc2VJdGVyYWJsZVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICByZXR1cm4gRmFyKFwibWFwcGVkIGl0ZXJhdG9yXCIsIHtcbiAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgdmFsdWU6IGJhc2VWYWx1ZSwgZG9uZSB9ID0gYmFzZUl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGRvbmUgPyBiYXNlVmFsdWUgOiBmdW5jKGJhc2VWYWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbih7IHZhbHVlLCBkb25lIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pXG4pO1xuaGFyZGVuKG1hcEl0ZXJhYmxlKTtcbnZhciBmaWx0ZXJJdGVyYWJsZSA9IChiYXNlSXRlcmFibGUsIHByZWQpID0+IChcbiAgLyoqIEB0eXBlIHtJdGVyYWJsZTxVPn0gKi9cbiAgRmFyKFwiZmlsdGVyZWQgaXRlcmFibGVcIiwge1xuICAgIFtTeW1ib2wuaXRlcmF0b3JdOiAoKSA9PiB7XG4gICAgICBjb25zdCBiYXNlSXRlcmF0b3IgPSBiYXNlSXRlcmFibGVbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgcmV0dXJuIEZhcihcImZpbHRlcmVkIGl0ZXJhdG9yXCIsIHtcbiAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgIGZvciAoOyA7ICkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYmFzZUl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIGNvbnN0IHsgdmFsdWUsIGRvbmUgfSA9IHJlc3VsdDtcbiAgICAgICAgICAgIGlmIChkb25lIHx8IHByZWQodmFsdWUpKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pXG4pO1xuaGFyZGVuKGZpbHRlckl0ZXJhYmxlKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL3Bhc3Mtc3R5bGUvc3JjL2Vycm9yLmpzKi9cbnZhciB7IGdldFByb3RvdHlwZU9mOiBnZXRQcm90b3R5cGVPZjUsIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMzLCBoYXNPd246IGhhc093bjQsIGVudHJpZXM6IGVudHJpZXMyIH0gPSBPYmplY3Q7XG52YXIgZXJyb3JDb25zdHJ1Y3RvcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcChcbiAgLyogQ2FzdCBiZWNhdXNlIG90aGVyd2lzZSBUUyBpcyBjb25mdXNlZCBieSBBZ2dyZWdhdGVFcnJvciovXG4gIC8qIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZW5kb2pzL2VuZG8vcHVsbC8yMDQyI2Rpc2N1c3Npb25fcjE0ODQ5MzMwMjgqL1xuICAvKiogQHR5cGUge0FycmF5PFtzdHJpbmcsIElNUE9SVCgnc2VzJykuR2VuZXJpY0Vycm9yQ29uc3RydWN0b3JdPn0gKi9cbiAgW1xuICAgIFtcIkVycm9yXCIsIEVycm9yXSxcbiAgICBbXCJFdmFsRXJyb3JcIiwgRXZhbEVycm9yXSxcbiAgICBbXCJSYW5nZUVycm9yXCIsIFJhbmdlRXJyb3JdLFxuICAgIFtcIlJlZmVyZW5jZUVycm9yXCIsIFJlZmVyZW5jZUVycm9yXSxcbiAgICBbXCJTeW50YXhFcnJvclwiLCBTeW50YXhFcnJvcl0sXG4gICAgW1wiVHlwZUVycm9yXCIsIFR5cGVFcnJvcl0sXG4gICAgW1wiVVJJRXJyb3JcIiwgVVJJRXJyb3JdXG4gICAgLyogaHR0cHM6Ly9naXRodWIuY29tL2VuZG9qcy9lbmRvL2lzc3Vlcy81NTAqL1xuICAgIC8qIFRvIGFjY29tbW9kYXRlIHBsYXRmb3JtcyBwcmlvciB0byBBZ2dyZWdhdGVFcnJvciwgd2UgY29tbWVudCBvdXQgdGhlKi9cbiAgICAvKiBmb2xsb3dpbmcgbGluZSBhbmQgaW5zdGVhZCBjb25kaXRpb25hbGx5IGFkZCBpdCB0byB0aGUgbWFwIGJlbG93LiovXG4gICAgLyogWydBZ2dyZWdhdGVFcnJvcicsIEFnZ3JlZ2F0ZUVycm9yXSwqL1xuICBdXG4pO1xuaWYgKHR5cGVvZiBBZ2dyZWdhdGVFcnJvciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBlcnJvckNvbnN0cnVjdG9ycy5zZXQoXCJBZ2dyZWdhdGVFcnJvclwiLCBBZ2dyZWdhdGVFcnJvcik7XG59XG52YXIgZ2V0RXJyb3JDb25zdHJ1Y3RvciA9IChuYW1lKSA9PiBlcnJvckNvbnN0cnVjdG9ycy5nZXQobmFtZSk7XG5oYXJkZW4oZ2V0RXJyb3JDb25zdHJ1Y3Rvcik7XG52YXIgY2hlY2tFcnJvckxpa2UgPSAoY2FuZGlkYXRlLCBjaGVjayA9IHZvaWQgMCkgPT4ge1xuICByZXR1cm4gY2FuZGlkYXRlIGluc3RhbmNlb2YgRXJyb3IgfHwgISFjaGVjayAmJiBDWChjaGVjaylgRXJyb3IgZXhwZWN0ZWQ6ICR7Y2FuZGlkYXRlfWA7XG59O1xuaGFyZGVuKGNoZWNrRXJyb3JMaWtlKTtcbnZhciBpc0Vycm9yTGlrZSA9IChjYW5kaWRhdGUpID0+IGNoZWNrRXJyb3JMaWtlKGNhbmRpZGF0ZSk7XG5oYXJkZW4oaXNFcnJvckxpa2UpO1xudmFyIGNoZWNrUmVjdXJzaXZlbHlQYXNzYWJsZUVycm9yUHJvcGVydHlEZXNjID0gKHByb3BOYW1lLCBkZXNjLCBwYXNzU3R5bGVPZlJlY3VyLCBjaGVjayA9IHZvaWQgMCkgPT4ge1xuICBpZiAoZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgcmV0dXJuICEhY2hlY2sgJiYgQ1goY2hlY2spYFBhc3NhYmxlIEVycm9yICR7cXVvdGUoXG4gICAgICBwcm9wTmFtZVxuICAgICl9IG93biBwcm9wZXJ0eSBtdXN0IG5vdCBiZSBlbnVtZXJhYmxlOiAke2Rlc2N9YDtcbiAgfVxuICBpZiAoIWhhc093bjQoZGVzYywgXCJ2YWx1ZVwiKSkge1xuICAgIHJldHVybiAhIWNoZWNrICYmIENYKGNoZWNrKWBQYXNzYWJsZSBFcnJvciAke3F1b3RlKFxuICAgICAgcHJvcE5hbWVcbiAgICApfSBvd24gcHJvcGVydHkgbXVzdCBiZSBhIGRhdGEgcHJvcGVydHk6ICR7ZGVzY31gO1xuICB9XG4gIGNvbnN0IHsgdmFsdWUgfSA9IGRlc2M7XG4gIHN3aXRjaCAocHJvcE5hbWUpIHtcbiAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgIGNhc2UgXCJzdGFja1wiOiB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8ICEhY2hlY2sgJiYgQ1goY2hlY2spYFBhc3NhYmxlIEVycm9yICR7cXVvdGUoXG4gICAgICAgIHByb3BOYW1lXG4gICAgICApfSBvd24gcHJvcGVydHkgbXVzdCBiZSBhIHN0cmluZzogJHt2YWx1ZX1gO1xuICAgIH1cbiAgICBjYXNlIFwiY2F1c2VcIjoge1xuICAgICAgcmV0dXJuIGNoZWNrUmVjdXJzaXZlbHlQYXNzYWJsZUVycm9yKHZhbHVlLCBwYXNzU3R5bGVPZlJlY3VyLCBjaGVjayk7XG4gICAgfVxuICAgIGNhc2UgXCJlcnJvcnNcIjoge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSB8fCBwYXNzU3R5bGVPZlJlY3VyKHZhbHVlKSAhPT0gXCJjb3B5QXJyYXlcIikge1xuICAgICAgICByZXR1cm4gISFjaGVjayAmJiBDWChjaGVjaylgUGFzc2FibGUgRXJyb3IgJHtxdW90ZShcbiAgICAgICAgICBwcm9wTmFtZVxuICAgICAgICApfSBvd24gcHJvcGVydHkgbXVzdCBiZSBhIGNvcHlBcnJheTogJHt2YWx1ZX1gO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlLmV2ZXJ5KFxuICAgICAgICAoZXJyKSA9PiAoXG4gICAgICAgICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lKi9cbiAgICAgICAgICBjaGVja1JlY3Vyc2l2ZWx5UGFzc2FibGVFcnJvcihlcnIsIHBhc3NTdHlsZU9mUmVjdXIsIGNoZWNrKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgICBkZWZhdWx0OiB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICEhY2hlY2sgJiYgQ1goY2hlY2spYFBhc3NhYmxlIEVycm9yIGhhcyBleHRyYSB1bnBhc3NlZCBwcm9wZXJ0eSAke3F1b3RlKHByb3BOYW1lKX1gO1xufTtcbmhhcmRlbihjaGVja1JlY3Vyc2l2ZWx5UGFzc2FibGVFcnJvclByb3BlcnR5RGVzYyk7XG52YXIgY2hlY2tSZWN1cnNpdmVseVBhc3NhYmxlRXJyb3IgPSAoY2FuZGlkYXRlLCBwYXNzU3R5bGVPZlJlY3VyLCBjaGVjayA9IHZvaWQgMCkgPT4ge1xuICBpZiAoIWNoZWNrRXJyb3JMaWtlKGNhbmRpZGF0ZSwgY2hlY2spKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHByb3RvID0gZ2V0UHJvdG90eXBlT2Y1KGNhbmRpZGF0ZSk7XG4gIGNvbnN0IHsgbmFtZSB9ID0gcHJvdG87XG4gIGNvbnN0IGVyckNvbnN0cnVjdG9yID0gZ2V0RXJyb3JDb25zdHJ1Y3RvcihuYW1lKTtcbiAgaWYgKGVyckNvbnN0cnVjdG9yID09PSB2b2lkIDAgfHwgZXJyQ29uc3RydWN0b3IucHJvdG90eXBlICE9PSBwcm90bykge1xuICAgIHJldHVybiAhIWNoZWNrICYmIENYKFxuICAgICAgY2hlY2tcbiAgICApYFBhc3NhYmxlIEVycm9yIG11c3QgaW5oZXJpdCBmcm9tIGFuIGVycm9yIGNsYXNzIC5wcm90b3R5cGU6ICR7Y2FuZGlkYXRlfWA7XG4gIH1cbiAgY29uc3QgZGVzY3MgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzMyhjYW5kaWRhdGUpO1xuICBpZiAoIShcIm1lc3NhZ2VcIiBpbiBkZXNjcykpIHtcbiAgICByZXR1cm4gISFjaGVjayAmJiBDWChcbiAgICAgIGNoZWNrXG4gICAgKWBQYXNzYWJsZSBFcnJvciBtdXN0IGhhdmUgYW4gb3duIFwibWVzc2FnZVwiIHN0cmluZyBwcm9wZXJ0eTogJHtjYW5kaWRhdGV9YDtcbiAgfVxuICByZXR1cm4gZW50cmllczIoZGVzY3MpLmV2ZXJ5KFxuICAgIChbcHJvcE5hbWUsIGRlc2NdKSA9PiBjaGVja1JlY3Vyc2l2ZWx5UGFzc2FibGVFcnJvclByb3BlcnR5RGVzYyhcbiAgICAgIHByb3BOYW1lLFxuICAgICAgZGVzYyxcbiAgICAgIHBhc3NTdHlsZU9mUmVjdXIsXG4gICAgICBjaGVja1xuICAgIClcbiAgKTtcbn07XG5oYXJkZW4oY2hlY2tSZWN1cnNpdmVseVBhc3NhYmxlRXJyb3IpO1xudmFyIEVycm9ySGVscGVyID0gaGFyZGVuKHtcbiAgc3R5bGVOYW1lOiBcImVycm9yXCIsXG4gIGNhbkJlVmFsaWQ6IGNoZWNrRXJyb3JMaWtlLFxuICBhc3NlcnRSZXN0VmFsaWQ6IChjYW5kaWRhdGUsIHBhc3NTdHlsZU9mUmVjdXIpID0+IGNoZWNrUmVjdXJzaXZlbHlQYXNzYWJsZUVycm9yKGNhbmRpZGF0ZSwgcGFzc1N0eWxlT2ZSZWN1ciwgYXNzZXJ0Q2hlY2tlcilcbn0pO1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvQGVuZG8vcGFzcy1zdHlsZS9zcmMvc3ltYm9sLmpzKi9cbnZhciB7IG93bktleXM6IG93bktleXMzIH0gPSBSZWZsZWN0O1xudmFyIHdlbGxLbm93blN5bWJvbE5hbWVzID0gbmV3IE1hcChcbiAgb3duS2V5czMoU3ltYm9sKS5maWx0ZXIoXG4gICAgKG5hbWUpID0+IHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiBTeW1ib2xbbmFtZV0gPT09IFwic3ltYm9sXCJcbiAgKS5maWx0ZXIoKG5hbWUpID0+IHtcbiAgICAhbmFtZS5zdGFydHNXaXRoKFwiQEBcIikgfHwgdGhyb3dSZWRhY3RlZGBEaWQgbm90IGV4cGVjdCBTeW1ib2wgdG8gaGF2ZSBhIHN5bWJvbC12YWx1ZWQgcHJvcGVydHkgbmFtZSBzdGFydGluZyB3aXRoIFwiQEBcIiAke3F1b3RlKFxuICAgICAgbmFtZVxuICAgICl9YDtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSkubWFwKChuYW1lKSA9PiBbU3ltYm9sW25hbWVdLCBgQEAke25hbWV9YF0pXG4pO1xudmFyIGlzUGFzc2FibGVTeW1ib2wgPSAoc3ltKSA9PiB0eXBlb2Ygc3ltID09PSBcInN5bWJvbFwiICYmICh0eXBlb2YgU3ltYm9sLmtleUZvcihzeW0pID09PSBcInN0cmluZ1wiIHx8IHdlbGxLbm93blN5bWJvbE5hbWVzLmhhcyhzeW0pKTtcbmhhcmRlbihpc1Bhc3NhYmxlU3ltYm9sKTtcbnZhciBhc3NlcnRQYXNzYWJsZVN5bWJvbCA9IChzeW0pID0+IGlzUGFzc2FibGVTeW1ib2woc3ltKSB8fCB0aHJvd1JlZGFjdGVkYE9ubHkgcmVnaXN0ZXJlZCBzeW1ib2xzIG9yIHdlbGwta25vd24gc3ltYm9scyBhcmUgcGFzc2FibGU6ICR7cXVvdGUoc3ltKX1gO1xuaGFyZGVuKGFzc2VydFBhc3NhYmxlU3ltYm9sKTtcbnZhciBuYW1lRm9yUGFzc2FibGVTeW1ib2wgPSAoc3ltKSA9PiB7XG4gIGNvbnN0IG5hbWUgPSBTeW1ib2wua2V5Rm9yKHN5bSk7XG4gIGlmIChuYW1lID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gd2VsbEtub3duU3ltYm9sTmFtZXMuZ2V0KHN5bSk7XG4gIH1cbiAgaWYgKG5hbWUuc3RhcnRzV2l0aChcIkBAXCIpKSB7XG4gICAgcmV0dXJuIGBAQCR7bmFtZX1gO1xuICB9XG4gIHJldHVybiBuYW1lO1xufTtcbmhhcmRlbihuYW1lRm9yUGFzc2FibGVTeW1ib2wpO1xudmFyIEF0QXRQcmVmaXhQYXR0ZXJuID0gL15AQCguKikkLztcbmhhcmRlbihBdEF0UHJlZml4UGF0dGVybik7XG52YXIgcGFzc2FibGVTeW1ib2xGb3JOYW1lID0gKG5hbWUpID0+IHtcbiAgdHlwZW9mIG5hbWUgPT09IFwic3RyaW5nXCIgfHwgdGhyb3dSZWRhY3RlZGAke3F1b3RlKG5hbWUpfSBtdXN0IGJlIGEgc3RyaW5nLCBub3QgJHtxdW90ZSh0eXBlb2YgbmFtZSl9YDtcbiAgY29uc3QgbWF0Y2ggPSBBdEF0UHJlZml4UGF0dGVybi5leGVjKG5hbWUpO1xuICBpZiAobWF0Y2gpIHtcbiAgICBjb25zdCBzdWZmaXggPSBtYXRjaFsxXTtcbiAgICBpZiAoc3VmZml4LnN0YXJ0c1dpdGgoXCJAQFwiKSkge1xuICAgICAgcmV0dXJuIFN5bWJvbC5mb3Ioc3VmZml4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc3ltID0gU3ltYm9sW3N1ZmZpeF07XG4gICAgICBpZiAodHlwZW9mIHN5bSA9PT0gXCJzeW1ib2xcIikge1xuICAgICAgICByZXR1cm4gc3ltO1xuICAgICAgfVxuICAgICAgdGhyb3dSZWRhY3RlZGBSZXNlcnZlZCBmb3Igd2VsbCBrbm93biBzeW1ib2wgJHtxdW90ZShzdWZmaXgpfTogJHtxdW90ZShuYW1lKX1gO1xuICAgIH1cbiAgfVxuICByZXR1cm4gU3ltYm9sLmZvcihuYW1lKTtcbn07XG5oYXJkZW4ocGFzc2FibGVTeW1ib2xGb3JOYW1lKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL3Bhc3Mtc3R5bGUvc3JjL3N0cmluZy5qcyovXG52YXIgaGFzV2VsbEZvcm1lZFN0cmluZ01ldGhvZCA9ICEhU3RyaW5nLnByb3RvdHlwZS5pc1dlbGxGb3JtZWQ7XG52YXIgaXNXZWxsRm9ybWVkU3RyaW5nID0gaGFzV2VsbEZvcm1lZFN0cmluZ01ldGhvZCA/IChzdHIpID0+IHR5cGVvZiBzdHIgPT09IFwic3RyaW5nXCIgJiYgc3RyLmlzV2VsbEZvcm1lZCgpIDogKHN0cikgPT4ge1xuICBpZiAodHlwZW9mIHN0ciAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGNvbnN0IGNoIG9mIHN0cikge1xuICAgIGNvbnN0IGNwID0gKFxuICAgICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgICBjaC5jb2RlUG9pbnRBdCgwKVxuICAgICk7XG4gICAgaWYgKGNwID49IDU1Mjk2ICYmIGNwIDw9IDU3MzQzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbmhhcmRlbihpc1dlbGxGb3JtZWRTdHJpbmcpO1xudmFyIGFzc2VydFdlbGxGb3JtZWRTdHJpbmcgPSAoc3RyKSA9PiB7XG4gIGlzV2VsbEZvcm1lZFN0cmluZyhzdHIpIHx8IHRocm93UmVkYWN0ZWRgRXhwZWN0ZWQgd2VsbC1mb3JtZWQgdW5pY29kZSBzdHJpbmc6ICR7c3RyfWA7XG59O1xuaGFyZGVuKGFzc2VydFdlbGxGb3JtZWRTdHJpbmcpO1xudmFyIE9OTFlfV0VMTF9GT1JNRURfU1RSSU5HU19QQVNTQUJMRSA9IGdldEVudmlyb25tZW50T3B0aW9uKFwiT05MWV9XRUxMX0ZPUk1FRF9TVFJJTkdTX1BBU1NBQkxFXCIsIFwiZGlzYWJsZWRcIiwgW1xuICBcImVuYWJsZWRcIlxuXSkgPT09IFwiZW5hYmxlZFwiO1xudmFyIGFzc2VydFBhc3NhYmxlU3RyaW5nID0gKHN0cikgPT4ge1xuICB0eXBlb2Ygc3RyID09PSBcInN0cmluZ1wiIHx8IHRocm93UmVkYWN0ZWRgRXhwZWN0ZWQgc3RyaW5nICR7c3RyfWA7XG4gICFPTkxZX1dFTExfRk9STUVEX1NUUklOR1NfUEFTU0FCTEUgfHwgYXNzZXJ0V2VsbEZvcm1lZFN0cmluZyhzdHIpO1xufTtcbmhhcmRlbihhc3NlcnRQYXNzYWJsZVN0cmluZyk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9wcm9taXNlLWtpdC9zcmMvcHJvbWlzZS1leGVjdXRvci1raXQuanMqL1xudmFyIG1ha2VSZWxlYXNpbmdFeGVjdXRvcktpdCA9ICgpID0+IHtcbiAgbGV0IGludGVybmFsUmVzb2x2ZTtcbiAgbGV0IGludGVybmFsUmVqZWN0O1xuICBjb25zdCByZXNvbHZlMiA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmIChpbnRlcm5hbFJlc29sdmUpIHtcbiAgICAgIGludGVybmFsUmVzb2x2ZSh2YWx1ZSk7XG4gICAgICBpbnRlcm5hbFJlc29sdmUgPSBudWxsO1xuICAgICAgaW50ZXJuYWxSZWplY3QgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQoaW50ZXJuYWxSZXNvbHZlID09PSBudWxsKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHJlamVjdCA9IChyZWFzb24pID0+IHtcbiAgICBpZiAoaW50ZXJuYWxSZWplY3QpIHtcbiAgICAgIGludGVybmFsUmVqZWN0KHJlYXNvbik7XG4gICAgICBpbnRlcm5hbFJlc29sdmUgPSBudWxsO1xuICAgICAgaW50ZXJuYWxSZWplY3QgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQoaW50ZXJuYWxSZWplY3QgPT09IG51bGwpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZXhlY3V0b3IgPSAocmVzLCByZWopID0+IHtcbiAgICBhc3NlcnQoaW50ZXJuYWxSZXNvbHZlID09PSB2b2lkIDAgJiYgaW50ZXJuYWxSZWplY3QgPT09IHZvaWQgMCk7XG4gICAgaW50ZXJuYWxSZXNvbHZlID0gcmVzO1xuICAgIGludGVybmFsUmVqZWN0ID0gcmVqO1xuICB9O1xuICByZXR1cm4gaGFyZGVuKHsgcmVzb2x2ZTogcmVzb2x2ZTIsIHJlamVjdCwgZXhlY3V0b3IgfSk7XG59O1xuaGFyZGVuKG1ha2VSZWxlYXNpbmdFeGVjdXRvcktpdCk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9wcm9taXNlLWtpdC9zcmMvbWVtby1yYWNlLmpzKi9cbnZhciBpc1ByaW1pdGl2ZTMgPSAodmFsKSA9PiAhdmFsIHx8IHR5cGVvZiB2YWwgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbCAhPT0gXCJmdW5jdGlvblwiO1xudmFyIGtub3duUHJvbWlzZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbnZhciBtYXJrU2V0dGxlZCA9IChyZWNvcmQpID0+IHtcbiAgaWYgKCFyZWNvcmQgfHwgcmVjb3JkLnNldHRsZWQpIHtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgfVxuICBjb25zdCB7IGRlZmVycmVkcyB9ID0gcmVjb3JkO1xuICBPYmplY3QuYXNzaWduKHJlY29yZCwge1xuICAgIGRlZmVycmVkczogdm9pZCAwLFxuICAgIHNldHRsZWQ6IHRydWVcbiAgfSk7XG4gIE9iamVjdC5mcmVlemUocmVjb3JkKTtcbiAgcmV0dXJuIGRlZmVycmVkcztcbn07XG52YXIgZ2V0TWVtb1JlY29yZCA9ICh2YWx1ZSkgPT4ge1xuICBpZiAoaXNQcmltaXRpdmUzKHZhbHVlKSkge1xuICAgIHJldHVybiBoYXJkZW4oeyBzZXR0bGVkOiB0cnVlIH0pO1xuICB9XG4gIGxldCByZWNvcmQgPSBrbm93blByb21pc2VzLmdldCh2YWx1ZSk7XG4gIGlmICghcmVjb3JkKSB7XG4gICAgcmVjb3JkID0geyBkZWZlcnJlZHM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCksIHNldHRsZWQ6IGZhbHNlIH07XG4gICAga25vd25Qcm9taXNlcy5zZXQodmFsdWUsIHJlY29yZCk7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKFxuICAgICAgKHZhbCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IHsgcmVzb2x2ZTogcmVzb2x2ZTIgfSBvZiBtYXJrU2V0dGxlZChyZWNvcmQpKSB7XG4gICAgICAgICAgcmVzb2x2ZTIodmFsKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIChlcnIpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCB7IHJlamVjdCB9IG9mIG1hcmtTZXR0bGVkKHJlY29yZCkpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlY29yZDtcbn07XG52YXIgeyByYWNlIH0gPSB7XG4gIC8qKlxuICogQ3JlYXRlcyBhIFByb21pc2UgdGhhdCBpcyByZXNvbHZlZCBvciByZWplY3RlZCB3aGVuIGFueSBvZiB0aGUgcHJvdmlkZWQgUHJvbWlzZXMgYXJlIHJlc29sdmVkXG4gKiBvciByZWplY3RlZC5cbiAqXG4gKiBVbmxpa2UgYFByb21pc2UucmFjZWAgaXQgY2xlYW5zIHVwIGFmdGVyIGl0c2VsZiBzbyBhIG5vbi1yZXNvbHZlZCB2YWx1ZSBkb2Vzbid0IGhvbGQgb250b1xuICogdGhlIHJlc3VsdCBwcm9taXNlLlxuICpcbiAqIEB0ZW1wbGF0ZSB7cmVhZG9ubHkgdW5rbm93bltdIHwgW119IFRcbiAqIEB0ZW1wbGF0ZSB7UHJvbWlzZUNvbnN0cnVjdG9yfSBbUD1Qcm9taXNlQ29uc3RydWN0b3JdXG4gKiBAdGhpcyB7UH1cbiAqIEBwYXJhbSB7VH0gdmFsdWVzIEFuIGl0ZXJhYmxlIG9mIFByb21pc2VzLlxuICogQHJldHVybnMge1Byb21pc2U8QXdhaXRlZDxUW251bWJlcl0+Pn0gQSBuZXcgUHJvbWlzZS5cbiAqL1xuICByYWNlKHZhbHVlczcpIHtcbiAgICBsZXQgZGVmZXJyZWQ7XG4gICAgY29uc3QgY2FjaGVkVmFsdWVzID0gW107XG4gICAgY29uc3QgQyA9IHRoaXM7XG4gICAgY29uc3QgcmVzdWx0ID0gbmV3IEMoKHJlc29sdmUyLCByZWplY3QpID0+IHtcbiAgICAgIGRlZmVycmVkID0geyByZXNvbHZlOiByZXNvbHZlMiwgcmVqZWN0IH07XG4gICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlczcpIHtcbiAgICAgICAgY2FjaGVkVmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICBjb25zdCB7IHNldHRsZWQsIGRlZmVycmVkcyB9ID0gZ2V0TWVtb1JlY29yZCh2YWx1ZSk7XG4gICAgICAgIGlmIChzZXR0bGVkKSB7XG4gICAgICAgICAgQy5yZXNvbHZlKHZhbHVlKS50aGVuKHJlc29sdmUyLCByZWplY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlZmVycmVkcy5hZGQoZGVmZXJyZWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdC5maW5hbGx5KCgpID0+IHtcbiAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgY2FjaGVkVmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IHsgZGVmZXJyZWRzIH0gPSBnZXRNZW1vUmVjb3JkKHZhbHVlKTtcbiAgICAgICAgaWYgKGRlZmVycmVkcykge1xuICAgICAgICAgIGRlZmVycmVkcy5kZWxldGUoZGVmZXJyZWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9wcm9taXNlLWtpdC9zcmMvaXMtcHJvbWlzZS5qcyovXG5mdW5jdGlvbiBpc1Byb21pc2UobWF5YmVQcm9taXNlKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUobWF5YmVQcm9taXNlKSA9PT0gbWF5YmVQcm9taXNlO1xufVxuaGFyZGVuKGlzUHJvbWlzZSk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9wcm9taXNlLWtpdC9pbmRleC5qcyovXG52YXIgQmVzdFBpcGVsaW5hYmxlUHJvbWlzZSA9IGdsb2JhbFRoaXMuSGFuZGxlZFByb21pc2UgfHwgUHJvbWlzZTtcbmZ1bmN0aW9uIG1ha2VQcm9taXNlS2l0KCkge1xuICBjb25zdCB7IHJlc29sdmU6IHJlc29sdmUyLCByZWplY3QsIGV4ZWN1dG9yIH0gPSBtYWtlUmVsZWFzaW5nRXhlY3V0b3JLaXQoKTtcbiAgY29uc3QgcHJvbWlzZSA9IG5ldyBCZXN0UGlwZWxpbmFibGVQcm9taXNlKGV4ZWN1dG9yKTtcbiAgcmV0dXJuIGhhcmRlbih7IHByb21pc2UsIHJlc29sdmU6IHJlc29sdmUyLCByZWplY3QgfSk7XG59XG5oYXJkZW4obWFrZVByb21pc2VLaXQpO1xuZnVuY3Rpb24gcmFjZVByb21pc2VzKHZhbHVlczcpIHtcbiAgcmV0dXJuIGhhcmRlbihyYWNlLmNhbGwoQmVzdFBpcGVsaW5hYmxlUHJvbWlzZSwgdmFsdWVzNykpO1xufVxuaGFyZGVuKHJhY2VQcm9taXNlcyk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9wYXNzLXN0eWxlL3NyYy9jb3B5QXJyYXkuanMqL1xudmFyIHsgZ2V0UHJvdG90eXBlT2Y6IGdldFByb3RvdHlwZU9mNiB9ID0gT2JqZWN0O1xudmFyIHsgb3duS2V5czogb3duS2V5czQgfSA9IFJlZmxlY3Q7XG52YXIgeyBpc0FycmF5OiBpc0FycmF5MywgcHJvdG90eXBlOiBhcnJheVByb3RvdHlwZSB9ID0gQXJyYXk7XG52YXIgQ29weUFycmF5SGVscGVyID0gaGFyZGVuKHtcbiAgc3R5bGVOYW1lOiBcImNvcHlBcnJheVwiLFxuICBjYW5CZVZhbGlkOiAoY2FuZGlkYXRlLCBjaGVjayA9IHZvaWQgMCkgPT4gaXNBcnJheTMoY2FuZGlkYXRlKSB8fCAhIWNoZWNrICYmIGNoZWNrKGZhbHNlLCByZWRhY3RlZGBBcnJheSBleHBlY3RlZDogJHtjYW5kaWRhdGV9YCksXG4gIGFzc2VydFJlc3RWYWxpZDogKGNhbmRpZGF0ZSwgcGFzc1N0eWxlT2ZSZWN1cikgPT4ge1xuICAgIGdldFByb3RvdHlwZU9mNihjYW5kaWRhdGUpID09PSBhcnJheVByb3RvdHlwZSB8fCBhc3NlcnQuZmFpbChyZWRhY3RlZGBNYWxmb3JtZWQgYXJyYXk6ICR7Y2FuZGlkYXRlfWAsIFR5cGVFcnJvcik7XG4gICAgY29uc3QgbGVuID0gKFxuICAgICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgICBnZXRPd25EYXRhRGVzY3JpcHRvcihjYW5kaWRhdGUsIFwibGVuZ3RoXCIsIGZhbHNlLCBhc3NlcnRDaGVja2VyKS52YWx1ZVxuICAgICk7XG4gICAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IGxlbjsgaTMgKz0gMSkge1xuICAgICAgcGFzc1N0eWxlT2ZSZWN1cihcbiAgICAgICAgZ2V0T3duRGF0YURlc2NyaXB0b3IoY2FuZGlkYXRlLCBpMywgdHJ1ZSwgYXNzZXJ0Q2hlY2tlcikudmFsdWVcbiAgICAgICk7XG4gICAgfVxuICAgIG93bktleXM0KGNhbmRpZGF0ZSkubGVuZ3RoID09PSBsZW4gKyAxIHx8IGFzc2VydC5mYWlsKHJlZGFjdGVkYEFycmF5cyBtdXN0IG5vdCBoYXZlIG5vbi1pbmRleGVzOiAke2NhbmRpZGF0ZX1gLCBUeXBlRXJyb3IpO1xuICB9XG59KTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL3Bhc3Mtc3R5bGUvc3JjL2J5dGVBcnJheS5qcyovXG52YXIgeyBnZXRQcm90b3R5cGVPZjogZ2V0UHJvdG90eXBlT2Y3LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGdldE93blByb3BlcnR5RGVzY3JpcHRvcjIgfSA9IE9iamVjdDtcbnZhciB7IG93bktleXM6IG93bktleXM1LCBhcHBseTogYXBwbHk0IH0gPSBSZWZsZWN0O1xudmFyIGFkYXB0SW1tdXRhYmxlQXJyYXlCdWZmZXIgPSAoKSA9PiB7XG4gIGNvbnN0IGFuQXJyYXlCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoMCk7XG4gIGlmIChhbkFycmF5QnVmZmVyLnNsaWNlVG9JbW11dGFibGUgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiB7XG4gICAgICBpbW11dGFibGVBcnJheUJ1ZmZlclByb3RvdHlwZTogbnVsbCxcbiAgICAgIGltbXV0YWJsZUdldHRlcjogKCkgPT4gZmFsc2VcbiAgICB9O1xuICB9XG4gIGNvbnN0IGFuSW1tdXRhYmxlQXJyYXlCdWZmZXIgPSBhbkFycmF5QnVmZmVyLnNsaWNlVG9JbW11dGFibGUoKTtcbiAgY29uc3QgaW1tdXRhYmxlQXJyYXlCdWZmZXJQcm90b3R5cGUyID0gZ2V0UHJvdG90eXBlT2Y3KGFuSW1tdXRhYmxlQXJyYXlCdWZmZXIpO1xuICBjb25zdCBpbW11dGFibGVHZXR0ZXIyID0gKFxuICAgIC8qKiBAdHlwZSB7KHRoaXM6IEFycmF5QnVmZmVyKSA9PiBib29sZWFufSAqL1xuICAgIC8qIEB0cy1leHBlY3QtZXJyb3IgV2Uga25vdyB0aGUgZGVzY2lwdG9yIGlzIHRoZXJlLiovXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yMihpbW11dGFibGVBcnJheUJ1ZmZlclByb3RvdHlwZTIsIFwiaW1tdXRhYmxlXCIpLmdldFxuICApO1xuICByZXR1cm4geyBpbW11dGFibGVBcnJheUJ1ZmZlclByb3RvdHlwZTogaW1tdXRhYmxlQXJyYXlCdWZmZXJQcm90b3R5cGUyLCBpbW11dGFibGVHZXR0ZXI6IGltbXV0YWJsZUdldHRlcjIgfTtcbn07XG52YXIgeyBpbW11dGFibGVBcnJheUJ1ZmZlclByb3RvdHlwZSwgaW1tdXRhYmxlR2V0dGVyIH0gPSBhZGFwdEltbXV0YWJsZUFycmF5QnVmZmVyKCk7XG52YXIgQnl0ZUFycmF5SGVscGVyID0gaGFyZGVuKHtcbiAgc3R5bGVOYW1lOiBcImJ5dGVBcnJheVwiLFxuICBjYW5CZVZhbGlkOiAoY2FuZGlkYXRlLCBjaGVjayA9IHZvaWQgMCkgPT4gY2FuZGlkYXRlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgJiYgLyogQHRzLWV4cGVjdC1lcnJvciBUT0RPIEhvdyBkbyBJIGFkZCBpdCB0byB0aGUgQXJyYXlCdWZmZXIgdHlwZT8qL1xuICBjYW5kaWRhdGUuaW1tdXRhYmxlIHx8ICEhY2hlY2sgJiYgY2hlY2soZmFsc2UsIHJlZGFjdGVkYEltbXV0YWJsZSBBcnJheUJ1ZmZlciBleHBlY3RlZDogJHtjYW5kaWRhdGV9YCksXG4gIGFzc2VydFJlc3RWYWxpZDogKGNhbmRpZGF0ZSwgX3Bhc3NTdHlsZU9mUmVjdXIpID0+IHtcbiAgICBnZXRQcm90b3R5cGVPZjcoY2FuZGlkYXRlKSA9PT0gaW1tdXRhYmxlQXJyYXlCdWZmZXJQcm90b3R5cGUgfHwgYXNzZXJ0LmZhaWwocmVkYWN0ZWRgTWFsZm9ybWVkIEJ5dGVBcnJheSAke2NhbmRpZGF0ZX1gLCBUeXBlRXJyb3IpO1xuICAgIGFwcGx5NChpbW11dGFibGVHZXR0ZXIsIGNhbmRpZGF0ZSwgW10pIHx8IHRocm93UmVkYWN0ZWRgTXVzdCBiZSBhbiBpbW11dGFibGUgQXJyYXlCdWZmZXI6ICR7Y2FuZGlkYXRlfWA7XG4gICAgb3duS2V5czUoY2FuZGlkYXRlKS5sZW5ndGggPT09IDAgfHwgYXNzZXJ0LmZhaWwoXG4gICAgICByZWRhY3RlZGBCeXRlQXJyYXlzIG11c3Qgbm90IGhhdmUgb3duIHByb3BlcnRpZXM6ICR7Y2FuZGlkYXRlfWAsXG4gICAgICBUeXBlRXJyb3JcbiAgICApO1xuICB9XG59KTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL3Bhc3Mtc3R5bGUvc3JjL2NvcHlSZWNvcmQuanMqL1xudmFyIHsgb3duS2V5czogb3duS2V5czYgfSA9IFJlZmxlY3Q7XG52YXIgeyBnZXRQcm90b3R5cGVPZjogZ2V0UHJvdG90eXBlT2Y4LCBwcm90b3R5cGU6IG9iamVjdFByb3RvdHlwZTQgfSA9IE9iamVjdDtcbnZhciBjaGVja09iamVjdFByb3RvdHlwZSA9IChjYW5kaWRhdGUsIGNoZWNrID0gdm9pZCAwKSA9PiB7XG4gIHJldHVybiBnZXRQcm90b3R5cGVPZjgoY2FuZGlkYXRlKSA9PT0gb2JqZWN0UHJvdG90eXBlNCB8fCAhIWNoZWNrICYmIENYKGNoZWNrKWBSZWNvcmRzIG11c3QgaW5oZXJpdCBmcm9tIE9iamVjdC5wcm90b3R5cGU6ICR7Y2FuZGlkYXRlfWA7XG59O1xudmFyIGNoZWNrUHJvcGVydHlDYW5CZVZhbGlkID0gKGNhbmRpZGF0ZSwga2V5LCB2YWx1ZSwgY2hlY2sgPSB2b2lkIDApID0+IHtcbiAgcmV0dXJuICh0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiIHx8ICEhY2hlY2sgJiYgQ1goXG4gICAgY2hlY2tcbiAgKWBSZWNvcmRzIGNhbiBvbmx5IGhhdmUgc3RyaW5nLW5hbWVkIHByb3BlcnRpZXM6ICR7Y2FuZGlkYXRlfWApICYmICghY2FuQmVNZXRob2QodmFsdWUpIHx8ICEhY2hlY2sgJiYgLyogVE9ETzogVXBkYXRlIG1lc3NhZ2Ugbm93IHRoYXQgdGhlcmUgaXMgbm8gc3VjaCB0aGluZyBhcyBcImltcGxpY2l0IFJlbW90YWJsZVwiLiovXG4gIENYKFxuICAgIGNoZWNrXG4gIClgUmVjb3JkcyBjYW5ub3QgY29udGFpbiBub24tZmFyIGZ1bmN0aW9ucyBiZWNhdXNlIHRoZXkgbWF5IGJlIG1ldGhvZHMgb2YgYW4gaW1wbGljaXQgUmVtb3RhYmxlOiAke2NhbmRpZGF0ZX1gKTtcbn07XG52YXIgQ29weVJlY29yZEhlbHBlciA9IGhhcmRlbih7XG4gIHN0eWxlTmFtZTogXCJjb3B5UmVjb3JkXCIsXG4gIGNhbkJlVmFsaWQ6IChjYW5kaWRhdGUsIGNoZWNrID0gdm9pZCAwKSA9PiB7XG4gICAgcmV0dXJuIGNoZWNrT2JqZWN0UHJvdG90eXBlKGNhbmRpZGF0ZSwgY2hlY2spICYmIC8qIFJlamVjdCBhbnkgY2FuZGlkYXRlIHdpdGggYSBzeW1ib2wta2V5ZWQgcHJvcGVydHkgb3IgbWV0aG9kLWxpa2UgcHJvcGVydHkqL1xuICAgIC8qIChzdWNoIGlucHV0IGlzIHBvdGVudGlhbGx5IGEgUmVtb3RhYmxlKS4qL1xuICAgIG93bktleXM2KGNhbmRpZGF0ZSkuZXZlcnkoXG4gICAgICAoa2V5KSA9PiBjaGVja1Byb3BlcnR5Q2FuQmVWYWxpZChjYW5kaWRhdGUsIGtleSwgY2FuZGlkYXRlW2tleV0sIGNoZWNrKVxuICAgICk7XG4gIH0sXG4gIGFzc2VydFJlc3RWYWxpZDogKGNhbmRpZGF0ZSwgcGFzc1N0eWxlT2ZSZWN1cikgPT4ge1xuICAgIGZvciAoY29uc3QgbmFtZSBvZiBvd25LZXlzNihjYW5kaWRhdGUpKSB7XG4gICAgICBjb25zdCB7IHZhbHVlIH0gPSBnZXRPd25EYXRhRGVzY3JpcHRvcihcbiAgICAgICAgY2FuZGlkYXRlLFxuICAgICAgICBuYW1lLFxuICAgICAgICB0cnVlLFxuICAgICAgICBhc3NlcnRDaGVja2VyXG4gICAgICApO1xuICAgICAgcGFzc1N0eWxlT2ZSZWN1cih2YWx1ZSk7XG4gICAgfVxuICB9XG59KTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL3Bhc3Mtc3R5bGUvc3JjL3RhZ2dlZC5qcyovXG52YXIgeyBvd25LZXlzOiBvd25LZXlzNyB9ID0gUmVmbGVjdDtcbnZhciB7IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM0IH0gPSBPYmplY3Q7XG52YXIgVGFnZ2VkSGVscGVyID0gaGFyZGVuKHtcbiAgc3R5bGVOYW1lOiBcInRhZ2dlZFwiLFxuICBjYW5CZVZhbGlkOiAoY2FuZGlkYXRlLCBjaGVjayA9IHZvaWQgMCkgPT4gY2hlY2tQYXNzU3R5bGUoY2FuZGlkYXRlLCBjYW5kaWRhdGVbUEFTU19TVFlMRV0sIFwidGFnZ2VkXCIsIGNoZWNrKSxcbiAgYXNzZXJ0UmVzdFZhbGlkOiAoY2FuZGlkYXRlLCBwYXNzU3R5bGVPZlJlY3VyKSA9PiB7XG4gICAgY2hlY2tUYWdSZWNvcmQoY2FuZGlkYXRlLCBcInRhZ2dlZFwiLCBhc3NlcnRDaGVja2VyKTtcbiAgICBjb25zdCBwYXNzU3R5bGVLZXkgPSAoXG4gICAgICAvKiogQHR5cGUge3Vua25vd259ICovXG4gICAgICBQQVNTX1NUWUxFXG4gICAgKTtcbiAgICBjb25zdCB0YWdLZXkgPSAoXG4gICAgICAvKiogQHR5cGUge3Vua25vd259ICovXG4gICAgICBTeW1ib2wudG9TdHJpbmdUYWdcbiAgICApO1xuICAgIGNvbnN0IHtcbiAgICAgIC8qIGNoZWNrVGFnUmVjb3JkIGFscmVhZHkgdmVyaWZpZWQgUEFTU19TVFlMRSBhbmQgU3ltYm9sLnRvU3RyaW5nVGFnIG93biBkYXRhIHByb3BlcnRpZXMuKi9cbiAgICAgIFtcbiAgICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgICAgIHBhc3NTdHlsZUtleVxuICAgICAgXTogX3Bhc3NTdHlsZURlc2MsXG4gICAgICBbXG4gICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgICAgICB0YWdLZXlcbiAgICAgIF06IF9sYWJlbERlc2MsXG4gICAgICBwYXlsb2FkOiBfcGF5bG9hZERlc2MsXG4gICAgICAvKiB2YWx1ZSBjaGVja2VkIGJ5IHJlY3Vyc2l2ZSB3YWxrIGF0IHRoZSBlbmQqL1xuICAgICAgLi4ucmVzdERlc2NzXG4gICAgfSA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM0KGNhbmRpZGF0ZSk7XG4gICAgb3duS2V5czcocmVzdERlc2NzKS5sZW5ndGggPT09IDAgfHwgdGhyb3dSZWRhY3RlZGBVbmV4cGVjdGVkIHByb3BlcnRpZXMgb24gdGFnZ2VkIHJlY29yZCAke293bktleXM3KHJlc3REZXNjcyl9YDtcbiAgICBwYXNzU3R5bGVPZlJlY3VyKFxuICAgICAgZ2V0T3duRGF0YURlc2NyaXB0b3IoY2FuZGlkYXRlLCBcInBheWxvYWRcIiwgdHJ1ZSwgYXNzZXJ0Q2hlY2tlcikudmFsdWVcbiAgICApO1xuICB9XG59KTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL3Bhc3Mtc3R5bGUvc3JjL3NhZmUtcHJvbWlzZS5qcyovXG52YXIgeyBpc0Zyb3plbjogaXNGcm96ZW40LCBnZXRQcm90b3R5cGVPZjogZ2V0UHJvdG90eXBlT2Y5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGdldE93blByb3BlcnR5RGVzY3JpcHRvcjMsIGhhc093bjogaGFzT3duNSB9ID0gT2JqZWN0O1xudmFyIHsgb3duS2V5czogb3duS2V5czggfSA9IFJlZmxlY3Q7XG52YXIgeyB0b1N0cmluZ1RhZyB9ID0gU3ltYm9sO1xudmFyIGNoZWNrUHJvbWlzZU93bktleXMgPSAocHIsIGNoZWNrKSA9PiB7XG4gIGNvbnN0IGtleXM4ID0gb3duS2V5czgocHIpO1xuICBpZiAoa2V5czgubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgdW5rbm93bktleXMgPSBrZXlzOC5maWx0ZXIoXG4gICAgKGtleSkgPT4gdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiB8fCAhaGFzT3duNShQcm9taXNlLnByb3RvdHlwZSwga2V5KVxuICApO1xuICBpZiAodW5rbm93bktleXMubGVuZ3RoICE9PSAwKSB7XG4gICAgcmV0dXJuIENYKFxuICAgICAgY2hlY2tcbiAgICApYCR7cHJ9IC0gTXVzdCBub3QgaGF2ZSBhbnkgb3duIHByb3BlcnRpZXM6ICR7cXVvdGUodW5rbm93bktleXMpfWA7XG4gIH1cbiAgY29uc3QgY2hlY2tTYWZlT3duS2V5ID0gKGtleSkgPT4ge1xuICAgIGlmIChrZXkgPT09IHRvU3RyaW5nVGFnKSB7XG4gICAgICBjb25zdCB0YWdEZXNjID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yMyhwciwgdG9TdHJpbmdUYWcpO1xuICAgICAgYXNzZXJ0KHRhZ0Rlc2MgIT09IHZvaWQgMCk7XG4gICAgICByZXR1cm4gKGhhc093bjUodGFnRGVzYywgXCJ2YWx1ZVwiKSB8fCBDWChcbiAgICAgICAgY2hlY2tcbiAgICAgIClgT3duIEBAdG9TdHJpbmdUYWcgbXVzdCBiZSBhIGRhdGEgcHJvcGVydHksIG5vdCBhbiBhY2Nlc3NvcjogJHtxdW90ZSh0YWdEZXNjKX1gKSAmJiAodHlwZW9mIHRhZ0Rlc2MudmFsdWUgPT09IFwic3RyaW5nXCIgfHwgQ1goXG4gICAgICAgIGNoZWNrXG4gICAgICApYE93biBAQHRvU3RyaW5nVGFnIHZhbHVlIG11c3QgYmUgYSBzdHJpbmc6ICR7cXVvdGUodGFnRGVzYy52YWx1ZSl9YCkgJiYgKCF0YWdEZXNjLmVudW1lcmFibGUgfHwgQ1goY2hlY2spYE93biBAQHRvU3RyaW5nVGFnIG11c3Qgbm90IGJlIGVudW1lcmFibGU6ICR7cXVvdGUodGFnRGVzYyl9YCk7XG4gICAgfVxuICAgIGNvbnN0IHZhbCA9IHByW2tleV07XG4gICAgaWYgKHZhbCA9PT0gdm9pZCAwIHx8IHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbCA9PT0gXCJvYmplY3RcIiAmJiB2YWwgIT09IG51bGwgJiYgaXNGcm96ZW40KHZhbCkgJiYgZ2V0UHJvdG90eXBlT2Y5KHZhbCkgPT09IE9iamVjdC5wcm90b3R5cGUpIHtcbiAgICAgIGNvbnN0IHN1YktleXMgPSBvd25LZXlzOCh2YWwpO1xuICAgICAgaWYgKHN1YktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHN1YktleXMubGVuZ3RoID09PSAxICYmIHN1YktleXNbMF0gPT09IFwiZGVzdHJveWVkXCIgJiYgdmFsLmRlc3Ryb3llZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBDWChcbiAgICAgIGNoZWNrXG4gICAgKWBVbmV4cGVjdGVkIE5vZGUgYXN5bmNfaG9va3MgYWRkaXRpb25zIHRvIHByb21pc2U6ICR7cHJ9LiR7cXVvdGUoXG4gICAgICBTdHJpbmcoa2V5KVxuICAgICl9IGlzICR7dmFsfWA7XG4gIH07XG4gIHJldHVybiBrZXlzOC5ldmVyeShjaGVja1NhZmVPd25LZXkpO1xufTtcbnZhciBjaGVja1NhZmVQcm9taXNlID0gKHByLCBjaGVjaykgPT4ge1xuICByZXR1cm4gKGlzRnJvemVuNChwcikgfHwgQ1goY2hlY2spYCR7cHJ9IC0gTXVzdCBiZSBmcm96ZW5gKSAmJiAoaXNQcm9taXNlKHByKSB8fCBDWChjaGVjaylgJHtwcn0gLSBNdXN0IGJlIGEgcHJvbWlzZWApICYmIChnZXRQcm90b3R5cGVPZjkocHIpID09PSBQcm9taXNlLnByb3RvdHlwZSB8fCBDWChjaGVjaylgJHtwcn0gLSBNdXN0IGluaGVyaXQgZnJvbSBQcm9taXNlLnByb3RvdHlwZTogJHtxdW90ZShcbiAgICBnZXRQcm90b3R5cGVPZjkocHIpXG4gICl9YCkgJiYgY2hlY2tQcm9taXNlT3duS2V5cyhcbiAgICAvKiogQHR5cGUge1Byb21pc2V9ICovXG4gICAgcHIsXG4gICAgY2hlY2tcbiAgKTtcbn07XG5oYXJkZW4oY2hlY2tTYWZlUHJvbWlzZSk7XG52YXIgaXNTYWZlUHJvbWlzZSA9IChwcikgPT4gY2hlY2tTYWZlUHJvbWlzZShwciwgKHgpID0+IHgpO1xuaGFyZGVuKGlzU2FmZVByb21pc2UpO1xudmFyIGFzc2VydFNhZmVQcm9taXNlID0gKHByKSA9PiBjaGVja1NhZmVQcm9taXNlKHByLCBhc3NlcnRDaGVja2VyKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL3Bhc3Mtc3R5bGUvc3JjL3Bhc3NTdHlsZU9mLmpzKi9cbnZhciB7IG93bktleXM6IG93bktleXM5IH0gPSBSZWZsZWN0O1xudmFyIHsgaXNGcm96ZW46IGlzRnJvemVuNSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczUsIHZhbHVlcyB9ID0gT2JqZWN0O1xudmFyIG1ha2VIZWxwZXJUYWJsZSA9IChwYXNzU3R5bGVIZWxwZXJzKSA9PiB7XG4gIGNvbnN0IEhlbHBlclRhYmxlID0ge1xuICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICBjb3B5QXJyYXk6IHZvaWQgMCxcbiAgICBieXRlQXJyYXk6IHZvaWQgMCxcbiAgICBjb3B5UmVjb3JkOiB2b2lkIDAsXG4gICAgdGFnZ2VkOiB2b2lkIDAsXG4gICAgZXJyb3I6IHZvaWQgMCxcbiAgICByZW1vdGFibGU6IHZvaWQgMFxuICB9O1xuICBmb3IgKGNvbnN0IGhlbHBlciBvZiBwYXNzU3R5bGVIZWxwZXJzKSB7XG4gICAgY29uc3QgeyBzdHlsZU5hbWUgfSA9IGhlbHBlcjtcbiAgICBzdHlsZU5hbWUgaW4gSGVscGVyVGFibGUgfHwgdGhyb3dSZWRhY3RlZGBVbnJlY29nbml6ZWQgaGVscGVyOiAke3F1b3RlKHN0eWxlTmFtZSl9YDtcbiAgICBIZWxwZXJUYWJsZVtzdHlsZU5hbWVdID09PSB2b2lkIDAgfHwgdGhyb3dSZWRhY3RlZGBjb25mbGljdGluZyBoZWxwZXJzIGZvciAke3F1b3RlKHN0eWxlTmFtZSl9YDtcbiAgICBIZWxwZXJUYWJsZVtzdHlsZU5hbWVdID0gaGVscGVyO1xuICB9XG4gIGZvciAoY29uc3Qgc3R5bGVOYW1lIG9mIG93bktleXM5KEhlbHBlclRhYmxlKSkge1xuICAgIEhlbHBlclRhYmxlW3N0eWxlTmFtZV0gIT09IHZvaWQgMCB8fCB0aHJvd1JlZGFjdGVkYG1pc3NpbmcgaGVscGVyIGZvciAke3F1b3RlKHN0eWxlTmFtZSl9YDtcbiAgfVxuICByZXR1cm4gKFxuICAgIC8qKiBAdHlwZSB7SGVscGVyc1JlY29yZH0gKi9cbiAgICAvKiogQHR5cGUge3Vua25vd259ICovXG4gICAgaGFyZGVuKEhlbHBlclRhYmxlKVxuICApO1xufTtcbnZhciBhc3NlcnRWYWxpZCA9IChoZWxwZXIsIGNhbmRpZGF0ZSwgcGFzc1N0eWxlT2ZSZWN1cikgPT4ge1xuICBoZWxwZXIuY2FuQmVWYWxpZChjYW5kaWRhdGUsIGFzc2VydENoZWNrZXIpO1xuICBoZWxwZXIuYXNzZXJ0UmVzdFZhbGlkKGNhbmRpZGF0ZSwgcGFzc1N0eWxlT2ZSZWN1cik7XG59O1xudmFyIG1ha2VQYXNzU3R5bGVPZiA9IChwYXNzU3R5bGVIZWxwZXJzKSA9PiB7XG4gIGNvbnN0IEhlbHBlclRhYmxlID0gbWFrZUhlbHBlclRhYmxlKHBhc3NTdHlsZUhlbHBlcnMpO1xuICBjb25zdCByZW1vdGFibGVIZWxwZXIgPSBIZWxwZXJUYWJsZS5yZW1vdGFibGU7XG4gIGNvbnN0IHBhc3NTdHlsZU1lbW8gPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbiAgY29uc3QgcGFzc1N0eWxlT2YyID0gKHBhc3NhYmxlKSA9PiB7XG4gICAgY29uc3QgaW5Qcm9ncmVzcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgY29uc3QgcGFzc1N0eWxlT2ZSZWN1ciA9IChpbm5lcikgPT4ge1xuICAgICAgY29uc3QgaW5uZXJJc09iamVjdCA9ICFpc1ByaW1pdGl2ZTIoaW5uZXIpO1xuICAgICAgaWYgKGlubmVySXNPYmplY3QpIHtcbiAgICAgICAgY29uc3QgaW5uZXJTdHlsZSA9IHBhc3NTdHlsZU1lbW8uZ2V0KGlubmVyKTtcbiAgICAgICAgaWYgKGlubmVyU3R5bGUpIHtcbiAgICAgICAgICByZXR1cm4gaW5uZXJTdHlsZTtcbiAgICAgICAgfVxuICAgICAgICAhaW5Qcm9ncmVzcy5oYXMoaW5uZXIpIHx8IHRocm93UmVkYWN0ZWRgUGFzcy1ieS1jb3B5IGRhdGEgY2Fubm90IGJlIGN5Y2xpYyAke2lubmVyfWA7XG4gICAgICAgIGluUHJvZ3Jlc3MuYWRkKGlubmVyKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBhc3NTdHlsZSA9IHBhc3NTdHlsZU9mSW50ZXJuYWwoaW5uZXIpO1xuICAgICAgaWYgKGlubmVySXNPYmplY3QpIHtcbiAgICAgICAgcGFzc1N0eWxlTWVtby5zZXQoaW5uZXIsIHBhc3NTdHlsZSk7XG4gICAgICAgIGluUHJvZ3Jlc3MuZGVsZXRlKGlubmVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXNzU3R5bGU7XG4gICAgfTtcbiAgICBjb25zdCBwYXNzU3R5bGVPZkludGVybmFsID0gKGlubmVyKSA9PiB7XG4gICAgICBjb25zdCB0eXBlc3RyID0gdHlwZW9mIGlubmVyO1xuICAgICAgc3dpdGNoICh0eXBlc3RyKSB7XG4gICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICBjYXNlIFwiYmlnaW50XCI6IHtcbiAgICAgICAgICByZXR1cm4gdHlwZXN0cjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwic3RyaW5nXCI6IHtcbiAgICAgICAgICBhc3NlcnRQYXNzYWJsZVN0cmluZyhpbm5lcik7XG4gICAgICAgICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInN5bWJvbFwiOiB7XG4gICAgICAgICAgYXNzZXJ0UGFzc2FibGVTeW1ib2woaW5uZXIpO1xuICAgICAgICAgIHJldHVybiBcInN5bWJvbFwiO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJvYmplY3RcIjoge1xuICAgICAgICAgIGlmIChpbm5lciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIFwibnVsbFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWlzRnJvemVuNShpbm5lcikpIHtcbiAgICAgICAgICAgIGFzc2VydC5mYWlsKFxuICAgICAgICAgICAgICAvKiBUeXBlZEFycmF5cyBnZXQgc3BlY2lhbCB0cmVhdG1lbnQgaW4gaGFyZGVuKCkqL1xuICAgICAgICAgICAgICAvKiBhbmQgYSBjb3JyZXNwb25kaW5nIHNwZWNpYWwgZXJyb3IgbWVzc2FnZSBoZXJlLiovXG4gICAgICAgICAgICAgIGlzVHlwZWRBcnJheShpbm5lcikgPyByZWRhY3RlZGBDYW5ub3QgcGFzcyBtdXRhYmxlIHR5cGVkIGFycmF5cyBsaWtlICR7aW5uZXJ9LmAgOiByZWRhY3RlZGBDYW5ub3QgcGFzcyBub24tZnJvemVuIG9iamVjdHMgbGlrZSAke2lubmVyfS4gVXNlIGhhcmRlbigpYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzUHJvbWlzZShpbm5lcikpIHtcbiAgICAgICAgICAgIGFzc2VydFNhZmVQcm9taXNlKGlubmVyKTtcbiAgICAgICAgICAgIHJldHVybiBcInByb21pc2VcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHlwZW9mIGlubmVyLnRoZW4gIT09IFwiZnVuY3Rpb25cIiB8fCB0aHJvd1JlZGFjdGVkYENhbm5vdCBwYXNzIG5vbi1wcm9taXNlIHRoZW5hYmxlc2A7XG4gICAgICAgICAgY29uc3QgcGFzc1N0eWxlVGFnID0gaW5uZXJbUEFTU19TVFlMRV07XG4gICAgICAgICAgaWYgKHBhc3NTdHlsZVRhZyAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBhc3NlcnQudHlwZW9mKHBhc3NTdHlsZVRhZywgXCJzdHJpbmdcIik7XG4gICAgICAgICAgICBjb25zdCBoZWxwZXIgPSBIZWxwZXJUYWJsZVtwYXNzU3R5bGVUYWddO1xuICAgICAgICAgICAgaGVscGVyICE9PSB2b2lkIDAgfHwgdGhyb3dSZWRhY3RlZGBVbnJlY29nbml6ZWQgUGFzc1N0eWxlOiAke3F1b3RlKHBhc3NTdHlsZVRhZyl9YDtcbiAgICAgICAgICAgIGFzc2VydFZhbGlkKGhlbHBlciwgaW5uZXIsIHBhc3NTdHlsZU9mUmVjdXIpO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgLyoqIEB0eXBlIHtQYXNzU3R5bGV9ICovXG4gICAgICAgICAgICAgIHBhc3NTdHlsZVRhZ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChjb25zdCBoZWxwZXIgb2YgcGFzc1N0eWxlSGVscGVycykge1xuICAgICAgICAgICAgaWYgKGhlbHBlci5jYW5CZVZhbGlkKGlubmVyKSkge1xuICAgICAgICAgICAgICBoZWxwZXIuYXNzZXJ0UmVzdFZhbGlkKGlubmVyLCBwYXNzU3R5bGVPZlJlY3VyKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGhlbHBlci5zdHlsZU5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzc2VydFZhbGlkKHJlbW90YWJsZUhlbHBlciwgaW5uZXIsIHBhc3NTdHlsZU9mUmVjdXIpO1xuICAgICAgICAgIHJldHVybiBcInJlbW90YWJsZVwiO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJmdW5jdGlvblwiOiB7XG4gICAgICAgICAgaXNGcm96ZW41KGlubmVyKSB8fCB0aHJvd1JlZGFjdGVkYENhbm5vdCBwYXNzIG5vbi1mcm96ZW4gb2JqZWN0cyBsaWtlICR7aW5uZXJ9LiBVc2UgaGFyZGVuKClgO1xuICAgICAgICAgIHR5cGVvZiBpbm5lci50aGVuICE9PSBcImZ1bmN0aW9uXCIgfHwgdGhyb3dSZWRhY3RlZGBDYW5ub3QgcGFzcyBub24tcHJvbWlzZSB0aGVuYWJsZXNgO1xuICAgICAgICAgIGFzc2VydFZhbGlkKHJlbW90YWJsZUhlbHBlciwgaW5uZXIsIHBhc3NTdHlsZU9mUmVjdXIpO1xuICAgICAgICAgIHJldHVybiBcInJlbW90YWJsZVwiO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICB0aHJvdyBhc3NlcnQuZmFpbChyZWRhY3RlZGBVbnJlY29nbml6ZWQgdHlwZW9mICR7cXVvdGUodHlwZXN0cil9YCwgVHlwZUVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHBhc3NTdHlsZU9mUmVjdXIocGFzc2FibGUpO1xuICB9O1xuICByZXR1cm4gaGFyZGVuKHBhc3NTdHlsZU9mMik7XG59O1xudmFyIFBhc3NTdHlsZU9mRW5kb3dtZW50U3ltYm9sID0gU3ltYm9sLmZvcihcIkBlbmRvIHBhc3NTdHlsZU9mXCIpO1xudmFyIHBhc3NTdHlsZU9mID0gZ2xvYmFsVGhpcyAmJiBnbG9iYWxUaGlzW1Bhc3NTdHlsZU9mRW5kb3dtZW50U3ltYm9sXSB8fCBtYWtlUGFzc1N0eWxlT2YoW1xuICBDb3B5QXJyYXlIZWxwZXIsXG4gIEJ5dGVBcnJheUhlbHBlcixcbiAgQ29weVJlY29yZEhlbHBlcixcbiAgVGFnZ2VkSGVscGVyLFxuICBFcnJvckhlbHBlcixcbiAgUmVtb3RhYmxlSGVscGVyXG5dKTtcbnZhciBhc3NlcnRQYXNzYWJsZSA9ICh2YWwpID0+IHtcbiAgcGFzc1N0eWxlT2YodmFsKTtcbn07XG5oYXJkZW4oYXNzZXJ0UGFzc2FibGUpO1xudmFyIGlzUGFzc2FibGUgPSAoc3BlY2ltZW4pID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcGFzc1N0eWxlT2Yoc3BlY2ltZW4pICE9PSB2b2lkIDA7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5oYXJkZW4oaXNQYXNzYWJsZSk7XG52YXIgaXNQYXNzYWJsZUVycm9yUHJvcGVydHlEZXNjID0gKG5hbWUsIGRlc2MpID0+IGNoZWNrUmVjdXJzaXZlbHlQYXNzYWJsZUVycm9yUHJvcGVydHlEZXNjKG5hbWUsIGRlc2MsIHBhc3NTdHlsZU9mKTtcbnZhciB0b1Bhc3NhYmxlRXJyb3IgPSAoZXJyKSA9PiB7XG4gIGhhcmRlbihlcnIpO1xuICBpZiAoY2hlY2tSZWN1cnNpdmVseVBhc3NhYmxlRXJyb3IoZXJyLCBwYXNzU3R5bGVPZikpIHtcbiAgICByZXR1cm4gZXJyO1xuICB9XG4gIGNvbnN0IHsgbmFtZSwgbWVzc2FnZSB9ID0gZXJyO1xuICBjb25zdCB7IGNhdXNlOiBjYXVzZURlc2MsIGVycm9yczogZXJyb3JzRGVzYyB9ID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczUoZXJyKTtcbiAgbGV0IGNhdXNlO1xuICBsZXQgZXJyb3JzO1xuICBpZiAoY2F1c2VEZXNjICYmIGlzUGFzc2FibGVFcnJvclByb3BlcnR5RGVzYyhcImNhdXNlXCIsIGNhdXNlRGVzYykpIHtcbiAgICBjYXVzZSA9IGNhdXNlRGVzYy52YWx1ZTtcbiAgfVxuICBpZiAoZXJyb3JzRGVzYyAmJiBpc1Bhc3NhYmxlRXJyb3JQcm9wZXJ0eURlc2MoXCJlcnJvcnNcIiwgZXJyb3JzRGVzYykpIHtcbiAgICBlcnJvcnMgPSBlcnJvcnNEZXNjLnZhbHVlO1xuICB9XG4gIGNvbnN0IGVyckNvbnN0cnVjdG9yID0gZ2V0RXJyb3JDb25zdHJ1Y3RvcihgJHtuYW1lfWApIHx8IEVycm9yO1xuICBjb25zdCBuZXdFcnJvciA9IG1ha2VFcnJvcihgJHttZXNzYWdlfWAsIGVyckNvbnN0cnVjdG9yLCB7XG4gICAgLyogQHRzLWlnbm9yZSBBc3N1bWluZyBjYXVzZSBpcyBFcnJvciB8IHVuZGVmaW5lZCovXG4gICAgY2F1c2UsXG4gICAgZXJyb3JzXG4gIH0pO1xuICBoYXJkZW4obmV3RXJyb3IpO1xuICBub3RlKG5ld0Vycm9yLCByZWRhY3RlZGBjb3BpZWQgZnJvbSBlcnJvciAke2Vycn1gKTtcbiAgcGFzc1N0eWxlT2YobmV3RXJyb3IpID09PSBcImVycm9yXCIgfHwgdGhyb3dSZWRhY3RlZGBFeHBlY3RlZCAke25ld0Vycm9yfSB0byBiZSBhIHBhc3NhYmxlIGVycm9yYDtcbiAgcmV0dXJuIG5ld0Vycm9yO1xufTtcbmhhcmRlbih0b1Bhc3NhYmxlRXJyb3IpO1xudmFyIHRvVGhyb3dhYmxlID0gKHNwZWNpbWVuKSA9PiB7XG4gIGhhcmRlbihzcGVjaW1lbik7XG4gIGlmIChpc0Vycm9yTGlrZShzcGVjaW1lbikpIHtcbiAgICByZXR1cm4gdG9QYXNzYWJsZUVycm9yKFxuICAgICAgLyoqIEB0eXBlIHtFcnJvcn0gKi9cbiAgICAgIHNwZWNpbWVuXG4gICAgKTtcbiAgfVxuICBpZiAoIWlzUHJpbWl0aXZlMihzcGVjaW1lbikpIHtcbiAgICBjb25zdCBwYXNzU3R5bGUgPSAoXG4gICAgICAvKiogQHR5cGUge1Bhc3NTdHlsZX0gKi9cbiAgICAgIHBhc3NTdHlsZU9mKHNwZWNpbWVuKVxuICAgICk7XG4gICAgc3dpdGNoIChwYXNzU3R5bGUpIHtcbiAgICAgIGNhc2UgXCJjb3B5QXJyYXlcIjoge1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IChcbiAgICAgICAgICAvKiogQHR5cGUge0NvcHlBcnJheX0gKi9cbiAgICAgICAgICBzcGVjaW1lblxuICAgICAgICApO1xuICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHtcbiAgICAgICAgICBlbGVtZW50ID09PSB0b1Rocm93YWJsZShlbGVtZW50KSB8fCB0aHJvd1JlZGFjdGVkYG5lc3RlZCB0b1Rocm93YWJsZSBjb2VyY2lvbiBub3QgeWV0IHN1cHBvcnRlZCAke2VsZW1lbnR9YDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5UmVjb3JkXCI6IHtcbiAgICAgICAgY29uc3QgcmVjID0gKFxuICAgICAgICAgIC8qKiBAdHlwZSB7Q29weVJlY29yZH0gKi9cbiAgICAgICAgICBzcGVjaW1lblxuICAgICAgICApO1xuICAgICAgICBmb3IgKGNvbnN0IHZhbCBvZiB2YWx1ZXMocmVjKSkge1xuICAgICAgICAgIHZhbCA9PT0gdG9UaHJvd2FibGUodmFsKSB8fCB0aHJvd1JlZGFjdGVkYG5lc3RlZCB0b1Rocm93YWJsZSBjb2VyY2lvbiBub3QgeWV0IHN1cHBvcnRlZCAke3ZhbH1gO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcInRhZ2dlZFwiOiB7XG4gICAgICAgIGNvbnN0IHRnID0gKFxuICAgICAgICAgIC8qKiBAdHlwZSB7Q29weVRhZ2dlZH0gKi9cbiAgICAgICAgICBzcGVjaW1lblxuICAgICAgICApO1xuICAgICAgICBjb25zdCB7IHBheWxvYWQgfSA9IHRnO1xuICAgICAgICBwYXlsb2FkID09PSB0b1Rocm93YWJsZShwYXlsb2FkKSB8fCB0aHJvd1JlZGFjdGVkYG5lc3RlZCB0b1Rocm93YWJsZSBjb2VyY2lvbiBub3QgeWV0IHN1cHBvcnRlZCAke3BheWxvYWR9YDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiZXJyb3JcIjoge1xuICAgICAgICBjb25zdCBlciA9IChcbiAgICAgICAgICAvKiogQHR5cGUge0Vycm9yfSAqL1xuICAgICAgICAgIHNwZWNpbWVuXG4gICAgICAgICk7XG4gICAgICAgIGVyID09PSB0b1Rocm93YWJsZShlcikgfHwgdGhyb3dSZWRhY3RlZGBuZXN0ZWQgdG9UaHJvd2FibGUgY29lcmNpb24gbm90IHlldCBzdXBwb3J0ZWQgJHtlcn1gO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBBICR7cXVvdGUocGFzc1N0eWxlKX0gaXMgbm90IHRocm93YWJsZTogJHtzcGVjaW1lbn1gO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gKFxuICAgIC8qKiBAdHlwZSB7UGFzc2FibGU8bmV2ZXIsbmV2ZXI+fSAqL1xuICAgIHNwZWNpbWVuXG4gICk7XG59O1xuaGFyZGVuKHRvVGhyb3dhYmxlKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL3Bhc3Mtc3R5bGUvc3JjL21ha2VUYWdnZWQuanMqL1xudmFyIHsgY3JlYXRlOiBjcmVhdGUyLCBwcm90b3R5cGU6IG9iamVjdFByb3RvdHlwZTUgfSA9IE9iamVjdDtcbnZhciBtYWtlVGFnZ2VkID0gKHRhZywgcGF5bG9hZCkgPT4ge1xuICB0eXBlb2YgdGFnID09PSBcInN0cmluZ1wiIHx8IHRocm93UmVkYWN0ZWRgVGhlIHRhZyBvZiBhIHRhZ2dlZCByZWNvcmQgbXVzdCBiZSBhIHN0cmluZzogJHt0YWd9YDtcbiAgYXNzZXJ0UGFzc2FibGUoaGFyZGVuKHBheWxvYWQpKTtcbiAgcmV0dXJuIGhhcmRlbihcbiAgICBjcmVhdGUyKG9iamVjdFByb3RvdHlwZTUsIHtcbiAgICAgIFtQQVNTX1NUWUxFXTogeyB2YWx1ZTogXCJ0YWdnZWRcIiB9LFxuICAgICAgW1N5bWJvbC50b1N0cmluZ1RhZ106IHsgdmFsdWU6IHRhZyB9LFxuICAgICAgcGF5bG9hZDogeyB2YWx1ZTogcGF5bG9hZCwgZW51bWVyYWJsZTogdHJ1ZSB9XG4gICAgfSlcbiAgKTtcbn07XG5oYXJkZW4obWFrZVRhZ2dlZCk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9jb21tb24vaWRlbnQtY2hlY2tlci5qcyovXG52YXIgaWRlbnRDaGVja2VyID0gKGNvbmQsIF9kZXRhaWxzKSA9PiBjb25kO1xuaGFyZGVuKGlkZW50Q2hlY2tlcik7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9wYXNzLXN0eWxlL3NyYy90eXBlR3VhcmRzLmpzKi9cbnZhciBpc0NvcHlBcnJheSA9IChhcnIpID0+IHBhc3NTdHlsZU9mKGFycikgPT09IFwiY29weUFycmF5XCI7XG5oYXJkZW4oaXNDb3B5QXJyYXkpO1xudmFyIGlzQnl0ZUFycmF5ID0gKGFycikgPT4gcGFzc1N0eWxlT2YoYXJyKSA9PT0gXCJieXRlQXJyYXlcIjtcbmhhcmRlbihpc0J5dGVBcnJheSk7XG52YXIgaXNSZWNvcmQgPSAocmVjb3JkKSA9PiBwYXNzU3R5bGVPZihyZWNvcmQpID09PSBcImNvcHlSZWNvcmRcIjtcbmhhcmRlbihpc1JlY29yZCk7XG52YXIgaXNSZW1vdGFibGUgPSAocmVtb3RhYmxlKSA9PiBwYXNzU3R5bGVPZihyZW1vdGFibGUpID09PSBcInJlbW90YWJsZVwiO1xuaGFyZGVuKGlzUmVtb3RhYmxlKTtcbnZhciBhc3NlcnRDb3B5QXJyYXkgPSAoYXJyLCBvcHROYW1lT2ZBcnJheSA9IFwiQWxsZWdlZCBhcnJheVwiKSA9PiB7XG4gIGNvbnN0IHBhc3NTdHlsZSA9IHBhc3NTdHlsZU9mKGFycik7XG4gIHBhc3NTdHlsZSA9PT0gXCJjb3B5QXJyYXlcIiB8fCB0aHJvd1JlZGFjdGVkYCR7cXVvdGUob3B0TmFtZU9mQXJyYXkpfSAke2Fycn0gbXVzdCBiZSBhIHBhc3MtYnktY29weSBhcnJheSwgbm90ICR7cXVvdGUoXG4gICAgcGFzc1N0eWxlXG4gICl9YDtcbn07XG5oYXJkZW4oYXNzZXJ0Q29weUFycmF5KTtcbnZhciBhc3NlcnRCeXRlQXJyYXkgPSAoYXJyLCBvcHROYW1lT2ZBcnJheSA9IFwiQWxsZWdlZCBieXRlQXJyYXlcIikgPT4ge1xuICBjb25zdCBwYXNzU3R5bGUgPSBwYXNzU3R5bGVPZihhcnIpO1xuICBwYXNzU3R5bGUgPT09IFwiYnl0ZUFycmF5XCIgfHwgdGhyb3dSZWRhY3RlZGAke3F1b3RlKFxuICAgIG9wdE5hbWVPZkFycmF5XG4gICl9ICR7YXJyfSBtdXN0IGJlIGEgcGFzcy1ieS1jb3B5IGJpbmFyeSBkYXRhLCBub3QgJHtxdW90ZShwYXNzU3R5bGUpfWA7XG59O1xuaGFyZGVuKGFzc2VydEJ5dGVBcnJheSk7XG52YXIgYXNzZXJ0UmVjb3JkID0gKHJlY29yZCwgb3B0TmFtZU9mUmVjb3JkID0gXCJBbGxlZ2VkIHJlY29yZFwiKSA9PiB7XG4gIGNvbnN0IHBhc3NTdHlsZSA9IHBhc3NTdHlsZU9mKHJlY29yZCk7XG4gIHBhc3NTdHlsZSA9PT0gXCJjb3B5UmVjb3JkXCIgfHwgdGhyb3dSZWRhY3RlZGAke3F1b3RlKG9wdE5hbWVPZlJlY29yZCl9ICR7cmVjb3JkfSBtdXN0IGJlIGEgcGFzcy1ieS1jb3B5IHJlY29yZCwgbm90ICR7cXVvdGUoXG4gICAgcGFzc1N0eWxlXG4gICl9YDtcbn07XG5oYXJkZW4oYXNzZXJ0UmVjb3JkKTtcbnZhciBhc3NlcnRSZW1vdGFibGUgPSAocmVtb3RhYmxlLCBvcHROYW1lT2ZSZW1vdGFibGUgPSBcIkFsbGVnZWQgcmVtb3RhYmxlXCIpID0+IHtcbiAgY29uc3QgcGFzc1N0eWxlID0gcGFzc1N0eWxlT2YocmVtb3RhYmxlKTtcbiAgcGFzc1N0eWxlID09PSBcInJlbW90YWJsZVwiIHx8IHRocm93UmVkYWN0ZWRgJHtxdW90ZShvcHROYW1lT2ZSZW1vdGFibGUpfSAke3JlbW90YWJsZX0gbXVzdCBiZSBhIHJlbW90YWJsZSwgbm90ICR7cXVvdGUoXG4gICAgcGFzc1N0eWxlXG4gICl9YDtcbn07XG5oYXJkZW4oYXNzZXJ0UmVtb3RhYmxlKTtcbnZhciBjaGVja0F0b20gPSAodmFsLCBjaGVjaykgPT4ge1xuICBsZXQgcGFzc1N0eWxlO1xuICB0cnkge1xuICAgIHBhc3NTdHlsZSA9IHBhc3NTdHlsZU9mKHZhbCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBjaGVjayAhPT0gaWRlbnRDaGVja2VyICYmIGNoZWNrKGZhbHNlLCByZWRhY3RlZGBOb3QgZXZlbiBQYXNzYWJsZTogJHtxdW90ZShlcnIpfTogJHt2YWx9YCk7XG4gIH1cbiAgc3dpdGNoIChwYXNzU3R5bGUpIHtcbiAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgY2FzZSBcIm51bGxcIjpcbiAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICBjYXNlIFwiYmlnaW50XCI6XG4gICAgY2FzZSBcInN0cmluZ1wiOlxuICAgIGNhc2UgXCJieXRlQXJyYXlcIjpcbiAgICBjYXNlIFwic3ltYm9sXCI6IHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBkZWZhdWx0OiB7XG4gICAgICByZXR1cm4gY2hlY2sgIT09IGlkZW50Q2hlY2tlciAmJiBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgQSAke3F1b3RlKHBhc3NTdHlsZSl9IGNhbm5vdCBiZSBhbiBhdG9tOiAke3ZhbH1gKTtcbiAgICB9XG4gIH1cbn07XG52YXIgaXNBdG9tID0gKHZhbCkgPT4gY2hlY2tBdG9tKHZhbCwgaWRlbnRDaGVja2VyKTtcbmhhcmRlbihpc0F0b20pO1xudmFyIGFzc2VydEF0b20gPSAodmFsKSA9PiB7XG4gIGNoZWNrQXRvbSh2YWwsIGFzc2VydENoZWNrZXIpO1xufTtcbmhhcmRlbihhc3NlcnRBdG9tKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL3Bhc3Mtc3R5bGUvc3JjL2RlZXBseUZ1bGZpbGxlZC5qcyovXG52YXIgeyBvd25LZXlzOiBvd25LZXlzMTAgfSA9IFJlZmxlY3Q7XG52YXIgeyBmcm9tRW50cmllcyB9ID0gT2JqZWN0O1xudmFyIGRlZXBseUZ1bGZpbGxlZCA9IGFzeW5jICh2YWwpID0+IHtcbiAgaWYgKGlzQXRvbSh2YWwpKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8qKiBAdHlwZSB7RGVlcGx5QXdhaXRlZDxUPn0gKi9cbiAgICAgIHZhbFxuICAgICk7XG4gIH1cbiAgaWYgKGlzUHJvbWlzZSh2YWwpKSB7XG4gICAgcmV0dXJuIEUud2hlbih2YWwsIChub25wKSA9PiBkZWVwbHlGdWxmaWxsZWQobm9ucCkpO1xuICB9XG4gIGNvbnN0IHBhc3NTdHlsZSA9IHBhc3NTdHlsZU9mKHZhbCk7XG4gIHN3aXRjaCAocGFzc1N0eWxlKSB7XG4gICAgY2FzZSBcImNvcHlSZWNvcmRcIjoge1xuICAgICAgY29uc3QgcmVjID0gKFxuICAgICAgICAvKiogQHR5cGUge0NvcHlSZWNvcmR9ICovXG4gICAgICAgIHZhbFxuICAgICAgKTtcbiAgICAgIGNvbnN0IG5hbWVzID0gKFxuICAgICAgICAvKiogQHR5cGUge3N0cmluZ1tdfSAqL1xuICAgICAgICBvd25LZXlzMTAocmVjKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHZhbFBzID0gbmFtZXMubWFwKChuYW1lKSA9PiBkZWVwbHlGdWxmaWxsZWQocmVjW25hbWVdKSk7XG4gICAgICByZXR1cm4gRS53aGVuKFxuICAgICAgICBQcm9taXNlLmFsbCh2YWxQcyksXG4gICAgICAgICh2YWxzKSA9PiBoYXJkZW4oZnJvbUVudHJpZXModmFscy5tYXAoKGMyLCBpMykgPT4gW25hbWVzW2kzXSwgYzJdKSkpXG4gICAgICApO1xuICAgIH1cbiAgICBjYXNlIFwiY29weUFycmF5XCI6IHtcbiAgICAgIGNvbnN0IGFyciA9IChcbiAgICAgICAgLyoqIEB0eXBlIHtDb3B5QXJyYXl9ICovXG4gICAgICAgIHZhbFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHZhbFBzID0gYXJyLm1hcCgocDMpID0+IGRlZXBseUZ1bGZpbGxlZChwMykpO1xuICAgICAgcmV0dXJuIEUud2hlbihQcm9taXNlLmFsbCh2YWxQcyksICh2YWxzKSA9PiBoYXJkZW4odmFscykpO1xuICAgIH1cbiAgICBjYXNlIFwiYnl0ZUFycmF5XCI6IHtcbiAgICAgIGNvbnN0IGJ5dGVBcnJheSA9IChcbiAgICAgICAgLyoqIEB0eXBlIHtCeXRlQXJyYXl9ICovXG4gICAgICAgIC8qKiBAdHlwZSB7dW5rbm93bn0gKi9cbiAgICAgICAgdmFsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGJ5dGVBcnJheTtcbiAgICB9XG4gICAgY2FzZSBcInRhZ2dlZFwiOiB7XG4gICAgICBjb25zdCB0Z2QgPSAoXG4gICAgICAgIC8qKiBAdHlwZSB7Q29weVRhZ2dlZH0gKi9cbiAgICAgICAgdmFsXG4gICAgICApO1xuICAgICAgY29uc3QgdGFnID0gZ2V0VGFnKHRnZCk7XG4gICAgICByZXR1cm4gRS53aGVuKFxuICAgICAgICBkZWVwbHlGdWxmaWxsZWQodGdkLnBheWxvYWQpLFxuICAgICAgICAocGF5bG9hZCkgPT4gbWFrZVRhZ2dlZCh0YWcsIHBheWxvYWQpXG4gICAgICApO1xuICAgIH1cbiAgICBjYXNlIFwicmVtb3RhYmxlXCI6IHtcbiAgICAgIGNvbnN0IHJlbSA9IChcbiAgICAgICAgLyoqIEB0eXBlIHtSZW1vdGFibGVPYmplY3R9ICovXG4gICAgICAgIHZhbFxuICAgICAgKTtcbiAgICAgIHJldHVybiByZW07XG4gICAgfVxuICAgIGNhc2UgXCJlcnJvclwiOiB7XG4gICAgICBjb25zdCBlcnIgPSAoXG4gICAgICAgIC8qKiBAdHlwZSB7RXJyb3J9ICovXG4gICAgICAgIHZhbFxuICAgICAgKTtcbiAgICAgIHJldHVybiBlcnI7XG4gICAgfVxuICAgIGNhc2UgXCJwcm9taXNlXCI6IHtcbiAgICAgIGNvbnN0IHByb20gPSAoXG4gICAgICAgIC8qKiBAdHlwZSB7UHJvbWlzZX0gKi9cbiAgICAgICAgLyoqIEB0eXBlIHt1bmtub3dufSAqL1xuICAgICAgICB2YWxcbiAgICAgICk7XG4gICAgICByZXR1cm4gRS53aGVuKHByb20sIChub25wKSA9PiBkZWVwbHlGdWxmaWxsZWQobm9ucCkpO1xuICAgIH1cbiAgICBkZWZhdWx0OiB7XG4gICAgICB0aHJvdyBhc3NlcnQuZmFpbChyZWRhY3RlZGBVbmV4cGVjdGVkIHBhc3NTdHlsZSAke3F1b3RlKHBhc3NTdHlsZSl9YCwgVHlwZUVycm9yKTtcbiAgICB9XG4gIH1cbn07XG5oYXJkZW4oZGVlcGx5RnVsZmlsbGVkKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL21hcnNoYWwvc3JjL2VuY29kZVRvQ2FwRGF0YS5qcyovXG52YXIgeyBvd25LZXlzOiBvd25LZXlzMTEgfSA9IFJlZmxlY3Q7XG52YXIgeyBpc0FycmF5OiBpc0FycmF5NCB9ID0gQXJyYXk7XG52YXIge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzNixcbiAgZGVmaW5lUHJvcGVydGllcyxcbiAgaXMsXG4gIGVudHJpZXM6IGVudHJpZXMzLFxuICBmcm9tRW50cmllczogZnJvbUVudHJpZXMyLFxuICBmcmVlemU6IGZyZWV6ZTUsXG4gIGhhc093bjogaGFzT3duNlxufSA9IE9iamVjdDtcbnZhciBRQ0xBU1MgPSBcIkBxY2xhc3NcIjtcbnZhciBoYXNRQ2xhc3MgPSAoZW5jb2RlZCkgPT4gaGFzT3duNihlbmNvZGVkLCBRQ0xBU1MpO1xudmFyIHFjbGFzc01hdGNoZXMgPSAoZW5jb2RlZCwgcWNsYXNzKSA9PiAhaXNQcmltaXRpdmUyKGVuY29kZWQpICYmICFpc0FycmF5NChlbmNvZGVkKSAmJiBoYXNRQ2xhc3MoZW5jb2RlZCkgJiYgZW5jb2RlZFtRQ0xBU1NdID09PSBxY2xhc3M7XG52YXIgZG9udEVuY29kZVJlbW90YWJsZVRvQ2FwRGF0YSA9IChyZW0pID0+IHRocm93UmVkYWN0ZWRgcmVtb3RhYmxlIHVuZXhwZWN0ZWQ6ICR7cmVtfWA7XG52YXIgZG9udEVuY29kZVByb21pc2VUb0NhcERhdGEgPSAocHJvbSkgPT4gdGhyb3dSZWRhY3RlZGBwcm9taXNlIHVuZXhwZWN0ZWQ6ICR7cHJvbX1gO1xudmFyIGRvbnRFbmNvZGVFcnJvclRvQ2FwRGF0YSA9IChlcnIpID0+IHRocm93UmVkYWN0ZWRgZXJyb3Igb2JqZWN0IHVuZXhwZWN0ZWQ6ICR7ZXJyfWA7XG52YXIgbWFrZUVuY29kZVRvQ2FwRGF0YSA9IChlbmNvZGVPcHRpb25zID0ge30pID0+IHtcbiAgY29uc3Qge1xuICAgIGVuY29kZVJlbW90YWJsZVRvQ2FwRGF0YSA9IGRvbnRFbmNvZGVSZW1vdGFibGVUb0NhcERhdGEsXG4gICAgZW5jb2RlUHJvbWlzZVRvQ2FwRGF0YSA9IGRvbnRFbmNvZGVQcm9taXNlVG9DYXBEYXRhLFxuICAgIGVuY29kZUVycm9yVG9DYXBEYXRhID0gZG9udEVuY29kZUVycm9yVG9DYXBEYXRhXG4gIH0gPSBlbmNvZGVPcHRpb25zO1xuICBjb25zdCBlbmNvZGVUb0NhcERhdGFSZWN1ciA9IChwYXNzYWJsZSkgPT4ge1xuICAgIGNvbnN0IHBhc3NTdHlsZSA9IHBhc3NTdHlsZU9mKHBhc3NhYmxlKTtcbiAgICBzd2l0Y2ggKHBhc3NTdHlsZSkge1xuICAgICAgY2FzZSBcIm51bGxcIjpcbiAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICBjYXNlIFwic3RyaW5nXCI6IHtcbiAgICAgICAgcmV0dXJuIHBhc3NhYmxlO1xuICAgICAgfVxuICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOiB7XG4gICAgICAgIHJldHVybiB7IFtRQ0xBU1NdOiBcInVuZGVmaW5lZFwiIH07XG4gICAgICB9XG4gICAgICBjYXNlIFwibnVtYmVyXCI6IHtcbiAgICAgICAgaWYgKE51bWJlci5pc05hTihwYXNzYWJsZSkpIHtcbiAgICAgICAgICByZXR1cm4geyBbUUNMQVNTXTogXCJOYU5cIiB9O1xuICAgICAgICB9IGVsc2UgaWYgKHBhc3NhYmxlID09PSBJbmZpbml0eSkge1xuICAgICAgICAgIHJldHVybiB7IFtRQ0xBU1NdOiBcIkluZmluaXR5XCIgfTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXNzYWJsZSA9PT0gLUluZmluaXR5KSB7XG4gICAgICAgICAgcmV0dXJuIHsgW1FDTEFTU106IFwiLUluZmluaXR5XCIgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXMocGFzc2FibGUsIC0wKSA/IDAgOiBwYXNzYWJsZTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJiaWdpbnRcIjoge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIFtRQ0xBU1NdOiBcImJpZ2ludFwiLFxuICAgICAgICAgIGRpZ2l0czogU3RyaW5nKHBhc3NhYmxlKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgY2FzZSBcInN5bWJvbFwiOiB7XG4gICAgICAgIGFzc2VydFBhc3NhYmxlU3ltYm9sKHBhc3NhYmxlKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IChcbiAgICAgICAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICAgICAgICBuYW1lRm9yUGFzc2FibGVTeW1ib2wocGFzc2FibGUpXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgW1FDTEFTU106IFwic3ltYm9sXCIsXG4gICAgICAgICAgbmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgY2FzZSBcImNvcHlSZWNvcmRcIjoge1xuICAgICAgICBpZiAoaGFzT3duNihwYXNzYWJsZSwgUUNMQVNTKSkge1xuICAgICAgICAgIGNvbnN0IHsgW1FDTEFTU106IHFjbGFzc1ZhbHVlLCAuLi5yZXN0IH0gPSBwYXNzYWJsZTtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgICAgICBbUUNMQVNTXTogXCJoaWxiZXJ0XCIsXG4gICAgICAgICAgICBvcmlnaW5hbDogZW5jb2RlVG9DYXBEYXRhUmVjdXIocWNsYXNzVmFsdWUpXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAob3duS2V5czExKHJlc3QpLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgICAgICByZXN1bHQucmVzdCA9IGVuY29kZVRvQ2FwRGF0YVJlY3VyKGZyZWV6ZTUocmVzdCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5hbWVzID0gb3duS2V5czExKHBhc3NhYmxlKS5zb3J0KCk7XG4gICAgICAgIHJldHVybiBmcm9tRW50cmllczIoXG4gICAgICAgICAgbmFtZXMubWFwKChuYW1lKSA9PiBbbmFtZSwgZW5jb2RlVG9DYXBEYXRhUmVjdXIocGFzc2FibGVbbmFtZV0pXSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5QXJyYXlcIjoge1xuICAgICAgICByZXR1cm4gcGFzc2FibGUubWFwKGVuY29kZVRvQ2FwRGF0YVJlY3VyKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJieXRlQXJyYXlcIjoge1xuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYG1hcnNhbCBvZiBieXRlQXJyYXkgbm90IHlldCBpbXBsZW1lbnRlZDogJHtwYXNzYWJsZX1gO1xuICAgICAgfVxuICAgICAgY2FzZSBcInRhZ2dlZFwiOiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgW1FDTEFTU106IFwidGFnZ2VkXCIsXG4gICAgICAgICAgdGFnOiBnZXRUYWcocGFzc2FibGUpLFxuICAgICAgICAgIHBheWxvYWQ6IGVuY29kZVRvQ2FwRGF0YVJlY3VyKHBhc3NhYmxlLnBheWxvYWQpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBjYXNlIFwicmVtb3RhYmxlXCI6IHtcbiAgICAgICAgY29uc3QgZW5jb2RlZCA9IGVuY29kZVJlbW90YWJsZVRvQ2FwRGF0YShcbiAgICAgICAgICBwYXNzYWJsZSxcbiAgICAgICAgICBlbmNvZGVUb0NhcERhdGFSZWN1clxuICAgICAgICApO1xuICAgICAgICBpZiAocWNsYXNzTWF0Y2hlcyhlbmNvZGVkLCBcInNsb3RcIikpIHtcbiAgICAgICAgICByZXR1cm4gZW5jb2RlZDtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYGludGVybmFsOiBSZW1vdGFibGUgZW5jb2RpbmcgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCAke3F1b3RlKFxuICAgICAgICAgIFFDTEFTU1xuICAgICAgICApfSAke3F1b3RlKFwic2xvdFwiKX06ICR7ZW5jb2RlZH1gO1xuICAgICAgfVxuICAgICAgY2FzZSBcInByb21pc2VcIjoge1xuICAgICAgICBjb25zdCBlbmNvZGVkID0gZW5jb2RlUHJvbWlzZVRvQ2FwRGF0YShwYXNzYWJsZSwgZW5jb2RlVG9DYXBEYXRhUmVjdXIpO1xuICAgICAgICBpZiAocWNsYXNzTWF0Y2hlcyhlbmNvZGVkLCBcInNsb3RcIikpIHtcbiAgICAgICAgICByZXR1cm4gZW5jb2RlZDtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYGludGVybmFsOiBQcm9taXNlIGVuY29kaW5nIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggJHtxdW90ZShcbiAgICAgICAgICBRQ0xBU1MsXG4gICAgICAgICAgXCJzbG90XCJcbiAgICAgICAgKX06ICR7ZW5jb2RlZH1gO1xuICAgICAgfVxuICAgICAgY2FzZSBcImVycm9yXCI6IHtcbiAgICAgICAgY29uc3QgZW5jb2RlZCA9IGVuY29kZUVycm9yVG9DYXBEYXRhKHBhc3NhYmxlLCBlbmNvZGVUb0NhcERhdGFSZWN1cik7XG4gICAgICAgIGlmIChxY2xhc3NNYXRjaGVzKGVuY29kZWQsIFwiZXJyb3JcIikpIHtcbiAgICAgICAgICByZXR1cm4gZW5jb2RlZDtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYGludGVybmFsOiBFcnJvciBlbmNvZGluZyBtdXN0IGJlIGFuIG9iamVjdCB3aXRoICR7cXVvdGUoXG4gICAgICAgICAgUUNMQVNTLFxuICAgICAgICAgIFwiZXJyb3JcIlxuICAgICAgICApfTogJHtlbmNvZGVkfWA7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHRocm93IGFzc2VydC5mYWlsKFxuICAgICAgICAgIHJlZGFjdGVkYGludGVybmFsOiBVbnJlY29nbml6ZWQgcGFzc1N0eWxlICR7cXVvdGUocGFzc1N0eWxlKX1gLFxuICAgICAgICAgIFR5cGVFcnJvclxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgZW5jb2RlVG9DYXBEYXRhID0gKHBhc3NhYmxlKSA9PiB7XG4gICAgaWYgKGlzRXJyb3JMaWtlKHBhc3NhYmxlKSkge1xuICAgICAgcmV0dXJuIGhhcmRlbihlbmNvZGVFcnJvclRvQ2FwRGF0YShwYXNzYWJsZSwgZW5jb2RlVG9DYXBEYXRhUmVjdXIpKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhcmRlbihlbmNvZGVUb0NhcERhdGFSZWN1cihwYXNzYWJsZSkpO1xuICB9O1xuICByZXR1cm4gaGFyZGVuKGVuY29kZVRvQ2FwRGF0YSk7XG59O1xuaGFyZGVuKG1ha2VFbmNvZGVUb0NhcERhdGEpO1xudmFyIGRvbnREZWNvZGVSZW1vdGFibGVPclByb21pc2VGcm9tQ2FwRGF0YSA9IChzbG90RW5jb2RpbmcpID0+IHRocm93UmVkYWN0ZWRgcmVtb3RhYmxlIG9yIHByb21pc2UgdW5leHBlY3RlZDogJHtzbG90RW5jb2Rpbmd9YDtcbnZhciBkb250RGVjb2RlRXJyb3JGcm9tQ2FwRGF0YSA9IChlcnJvckVuY29kaW5nKSA9PiB0aHJvd1JlZGFjdGVkYGVycm9yIHVuZXhwZWN0ZWQ6ICR7ZXJyb3JFbmNvZGluZ31gO1xudmFyIG1ha2VEZWNvZGVGcm9tQ2FwRGF0YSA9IChkZWNvZGVPcHRpb25zID0ge30pID0+IHtcbiAgY29uc3Qge1xuICAgIGRlY29kZVJlbW90YWJsZUZyb21DYXBEYXRhID0gZG9udERlY29kZVJlbW90YWJsZU9yUHJvbWlzZUZyb21DYXBEYXRhLFxuICAgIGRlY29kZVByb21pc2VGcm9tQ2FwRGF0YSA9IGRvbnREZWNvZGVSZW1vdGFibGVPclByb21pc2VGcm9tQ2FwRGF0YSxcbiAgICBkZWNvZGVFcnJvckZyb21DYXBEYXRhID0gZG9udERlY29kZUVycm9yRnJvbUNhcERhdGFcbiAgfSA9IGRlY29kZU9wdGlvbnM7XG4gIGRlY29kZVJlbW90YWJsZUZyb21DYXBEYXRhID09PSBkZWNvZGVQcm9taXNlRnJvbUNhcERhdGEgfHwgdGhyb3dSZWRhY3RlZGBBbiBpbXBsZW1lbnRhdGlvbiByZXN0cmljdGlvbiBmb3Igbm93OiBJZiBlaXRoZXIgZGVjb2RlUmVtb3RhYmxlRnJvbUNhcERhdGEgb3IgZGVjb2RlUHJvbWlzZUZyb21DYXBEYXRhIGlzIHByb3ZpZGVkLCBib3RoIG11c3QgYmUgcHJvdmlkZWQgYW5kIHRoZXkgbXVzdCBiZSB0aGUgc2FtZTogJHtxdW90ZShcbiAgICBkZWNvZGVSZW1vdGFibGVGcm9tQ2FwRGF0YVxuICApfSB2cyAke3F1b3RlKGRlY29kZVByb21pc2VGcm9tQ2FwRGF0YSl9YDtcbiAgY29uc3QgZGVjb2RlRnJvbUNhcERhdGEgPSAoanNvbkVuY29kZWQpID0+IHtcbiAgICBpZiAoaXNQcmltaXRpdmUyKGpzb25FbmNvZGVkKSkge1xuICAgICAgcmV0dXJuIGpzb25FbmNvZGVkO1xuICAgIH1cbiAgICBpZiAoaXNBcnJheTQoanNvbkVuY29kZWQpKSB7XG4gICAgICByZXR1cm4ganNvbkVuY29kZWQubWFwKChlbmNvZGVkVmFsKSA9PiBkZWNvZGVGcm9tQ2FwRGF0YShlbmNvZGVkVmFsKSk7XG4gICAgfSBlbHNlIGlmIChoYXNRQ2xhc3MoanNvbkVuY29kZWQpKSB7XG4gICAgICBjb25zdCBxY2xhc3MgPSBqc29uRW5jb2RlZFtRQ0xBU1NdO1xuICAgICAgdHlwZW9mIHFjbGFzcyA9PT0gXCJzdHJpbmdcIiB8fCB0aHJvd1JlZGFjdGVkYGludmFsaWQgJHtxdW90ZShRQ0xBU1MpfSB0eXBlb2YgJHtxdW90ZSh0eXBlb2YgcWNsYXNzKX1gO1xuICAgICAgc3dpdGNoIChxY2xhc3MpIHtcbiAgICAgICAgLyogRW5jb2Rpbmcgb2YgcHJpbWl0aXZlcyBub3QgaGFuZGxlZCBieSBKU09OKi9cbiAgICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOiB7XG4gICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiTmFOXCI6IHtcbiAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJJbmZpbml0eVwiOiB7XG4gICAgICAgICAgcmV0dXJuIEluZmluaXR5O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCItSW5maW5pdHlcIjoge1xuICAgICAgICAgIHJldHVybiAtSW5maW5pdHk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImJpZ2ludFwiOiB7XG4gICAgICAgICAgY29uc3QgeyBkaWdpdHMgfSA9IGpzb25FbmNvZGVkO1xuICAgICAgICAgIHR5cGVvZiBkaWdpdHMgPT09IFwic3RyaW5nXCIgfHwgdGhyb3dSZWRhY3RlZGBpbnZhbGlkIGRpZ2l0cyB0eXBlb2YgJHtxdW90ZSh0eXBlb2YgZGlnaXRzKX1gO1xuICAgICAgICAgIHJldHVybiBCaWdJbnQoZGlnaXRzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiQEBhc3luY0l0ZXJhdG9yXCI6IHtcbiAgICAgICAgICByZXR1cm4gU3ltYm9sLmFzeW5jSXRlcmF0b3I7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInN5bWJvbFwiOiB7XG4gICAgICAgICAgY29uc3QgeyBuYW1lIH0gPSBqc29uRW5jb2RlZDtcbiAgICAgICAgICByZXR1cm4gcGFzc2FibGVTeW1ib2xGb3JOYW1lKG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJ0YWdnZWRcIjoge1xuICAgICAgICAgIGNvbnN0IHsgdGFnLCBwYXlsb2FkIH0gPSBqc29uRW5jb2RlZDtcbiAgICAgICAgICByZXR1cm4gbWFrZVRhZ2dlZCh0YWcsIGRlY29kZUZyb21DYXBEYXRhKHBheWxvYWQpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwic2xvdFwiOiB7XG4gICAgICAgICAgY29uc3QgZGVjb2RlZCA9IGRlY29kZVJlbW90YWJsZUZyb21DYXBEYXRhKFxuICAgICAgICAgICAganNvbkVuY29kZWQsXG4gICAgICAgICAgICBkZWNvZGVGcm9tQ2FwRGF0YVxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIGRlY29kZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImVycm9yXCI6IHtcbiAgICAgICAgICBjb25zdCBkZWNvZGVkID0gZGVjb2RlRXJyb3JGcm9tQ2FwRGF0YShcbiAgICAgICAgICAgIGpzb25FbmNvZGVkLFxuICAgICAgICAgICAgZGVjb2RlRnJvbUNhcERhdGFcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChwYXNzU3R5bGVPZihkZWNvZGVkKSA9PT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVjb2RlZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbDogZGVjb2RlRXJyb3JGcm9tQ2FwRGF0YSBvcHRpb24gbXVzdCByZXR1cm4gYW4gZXJyb3I6ICR7ZGVjb2RlZH1gO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJoaWxiZXJ0XCI6IHtcbiAgICAgICAgICBjb25zdCB7IG9yaWdpbmFsLCByZXN0IH0gPSBqc29uRW5jb2RlZDtcbiAgICAgICAgICBoYXNPd242KGpzb25FbmNvZGVkLCBcIm9yaWdpbmFsXCIpIHx8IHRocm93UmVkYWN0ZWRgSW52YWxpZCBIaWxiZXJ0IEhvdGVsIGVuY29kaW5nICR7anNvbkVuY29kZWR9YDtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSB7IFtRQ0xBU1NdOiBkZWNvZGVGcm9tQ2FwRGF0YShvcmlnaW5hbCkgfTtcbiAgICAgICAgICBpZiAoaGFzT3duNihqc29uRW5jb2RlZCwgXCJyZXN0XCIpKSB7XG4gICAgICAgICAgICBjb25zdCBpc05vbkVtcHR5T2JqZWN0ID0gdHlwZW9mIHJlc3QgPT09IFwib2JqZWN0XCIgJiYgcmVzdCAhPT0gbnVsbCAmJiBvd25LZXlzMTEocmVzdCkubGVuZ3RoID49IDE7XG4gICAgICAgICAgICBpZiAoIWlzTm9uRW1wdHlPYmplY3QpIHtcbiAgICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBSZXN0IGVuY29kaW5nIG11c3QgYmUgYSBub24tZW1wdHkgb2JqZWN0OiAke3Jlc3R9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc3RPYmogPSBkZWNvZGVGcm9tQ2FwRGF0YShyZXN0KTtcbiAgICAgICAgICAgICFoYXNPd242KHJlc3RPYmosIFFDTEFTUykgfHwgdGhyb3dSZWRhY3RlZGBSZXN0IG11c3Qgbm90IGNvbnRhaW4gaXRzIG93biBkZWZpbml0aW9uIG9mICR7cXVvdGUoUUNMQVNTKX1gO1xuICAgICAgICAgICAgZGVmaW5lUHJvcGVydGllcyhyZXN1bHQsIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM2KHJlc3RPYmopKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvKiBAdHMtZXhwZWN0LWVycm9yIFRoaXMgaXMgdGhlIGVycm9yIGNhc2Ugd2UncmUgdGVzdGluZyBmb3IqL1xuICAgICAgICBjYXNlIFwiaWJpZFwiOiB7XG4gICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBUaGUgY2FwRGF0YSBwcm90b2NvbCBubyBsb25nZXIgc3VwcG9ydHMgJHtxdW90ZShRQ0xBU1MpfSAke3F1b3RlKFxuICAgICAgICAgICAgcWNsYXNzXG4gICAgICAgICAgKX1gO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICB0aHJvdyBhc3NlcnQuZmFpbChcbiAgICAgICAgICAgIHJlZGFjdGVkYHVucmVjb2duaXplZCAke3F1b3RlKFFDTEFTUyl9ICR7cXVvdGUocWNsYXNzKX1gLFxuICAgICAgICAgICAgVHlwZUVycm9yXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQodHlwZW9mIGpzb25FbmNvZGVkID09PSBcIm9iamVjdFwiICYmIGpzb25FbmNvZGVkICE9PSBudWxsKTtcbiAgICAgIGNvbnN0IGRlY29kZUVudHJ5ID0gKFtuYW1lLCBlbmNvZGVkVmFsXSkgPT4ge1xuICAgICAgICB0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIiB8fCB0aHJvd1JlZGFjdGVkYFByb3BlcnR5ICR7cXVvdGUobmFtZSl9IG9mICR7anNvbkVuY29kZWR9IG11c3QgYmUgYSBzdHJpbmdgO1xuICAgICAgICByZXR1cm4gW25hbWUsIGRlY29kZUZyb21DYXBEYXRhKGVuY29kZWRWYWwpXTtcbiAgICAgIH07XG4gICAgICBjb25zdCBkZWNvZGVkRW50cmllcyA9IGVudHJpZXMzKGpzb25FbmNvZGVkKS5tYXAoZGVjb2RlRW50cnkpO1xuICAgICAgcmV0dXJuIGZyb21FbnRyaWVzMihkZWNvZGVkRW50cmllcyk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGFyZGVuKGRlY29kZUZyb21DYXBEYXRhKTtcbn07XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9uYXQvc3JjL2luZGV4LmpzKi9cbmZ1bmN0aW9uIGlzTmF0KGFsbGVnZWROdW0pIHtcbiAgaWYgKHR5cGVvZiBhbGxlZ2VkTnVtID09PSBcImJpZ2ludFwiKSB7XG4gICAgcmV0dXJuIGFsbGVnZWROdW0gPj0gMDtcbiAgfVxuICBpZiAodHlwZW9mIGFsbGVnZWROdW0gIT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIE51bWJlci5pc1NhZmVJbnRlZ2VyKGFsbGVnZWROdW0pICYmIGFsbGVnZWROdW0gPj0gMDtcbn1cbmZ1bmN0aW9uIE5hdChhbGxlZ2VkTnVtKSB7XG4gIGlmICh0eXBlb2YgYWxsZWdlZE51bSA9PT0gXCJiaWdpbnRcIikge1xuICAgIGlmIChhbGxlZ2VkTnVtIDwgMG4pIHtcbiAgICAgIHRocm93IFJhbmdlRXJyb3IoYCR7YWxsZWdlZE51bX0gaXMgbmVnYXRpdmVgKTtcbiAgICB9XG4gICAgcmV0dXJuIGFsbGVnZWROdW07XG4gIH1cbiAgaWYgKHR5cGVvZiBhbGxlZ2VkTnVtID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihhbGxlZ2VkTnVtKSkge1xuICAgICAgdGhyb3cgUmFuZ2VFcnJvcihgJHthbGxlZ2VkTnVtfSBpcyBub3QgYSBzYWZlIGludGVnZXJgKTtcbiAgICB9XG4gICAgaWYgKGFsbGVnZWROdW0gPCAwKSB7XG4gICAgICB0aHJvdyBSYW5nZUVycm9yKGAke2FsbGVnZWROdW19IGlzIG5lZ2F0aXZlYCk7XG4gICAgfVxuICAgIHJldHVybiBCaWdJbnQoYWxsZWdlZE51bSk7XG4gIH1cbiAgdGhyb3cgVHlwZUVycm9yKFxuICAgIGAke2FsbGVnZWROdW19IGlzIGEgJHt0eXBlb2YgYWxsZWdlZE51bX0gYnV0IG11c3QgYmUgYSBiaWdpbnQgb3IgYSBudW1iZXJgXG4gICk7XG59XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9jb21tb24vb2JqZWN0LW1hcC5qcyovXG52YXIgeyBlbnRyaWVzOiBlbnRyaWVzNCwgZnJvbUVudHJpZXM6IGZyb21FbnRyaWVzMyB9ID0gT2JqZWN0O1xudmFyIG9iamVjdE1hcCA9IChvcmlnaW5hbCwgbWFwRm4pID0+IHtcbiAgY29uc3QgZW50cyA9IGVudHJpZXM0KG9yaWdpbmFsKTtcbiAgY29uc3QgbWFwRW50cyA9IGVudHMubWFwKFxuICAgIChbaywgdjJdKSA9PiAoXG4gICAgICAvKiogQHR5cGUge1trZXlvZiBPLCBSXX0gKi9cbiAgICAgIFtrLCBtYXBGbih2MiwgayldXG4gICAgKVxuICApO1xuICByZXR1cm4gKFxuICAgIC8qKiBAdHlwZSB7UmVjb3JkPGtleW9mIE8sIFI+fSAqL1xuICAgIGhhcmRlbihmcm9tRW50cmllczMobWFwRW50cykpXG4gICk7XG59O1xuaGFyZGVuKG9iamVjdE1hcCk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9tYXJzaGFsL3NyYy9lbmNvZGVUb1NtYWxsY2Fwcy5qcyovXG52YXIgeyBvd25LZXlzOiBvd25LZXlzMTIgfSA9IFJlZmxlY3Q7XG52YXIgeyBpc0FycmF5OiBpc0FycmF5NSB9ID0gQXJyYXk7XG52YXIgeyBpczogaXMyLCBlbnRyaWVzOiBlbnRyaWVzNSwgZnJvbUVudHJpZXM6IGZyb21FbnRyaWVzNCwgaGFzT3duOiBoYXNPd243IH0gPSBPYmplY3Q7XG52YXIgQkFORyA9IFwiIVwiLmNoYXJDb2RlQXQoMCk7XG52YXIgREFTSCA9IFwiLVwiLmNoYXJDb2RlQXQoMCk7XG52YXIgc3RhcnRzU3BlY2lhbCA9IChlbmNvZGVkU3RyKSA9PiB7XG4gIGlmIChlbmNvZGVkU3RyID09PSBcIlwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGNvZGUgPSBlbmNvZGVkU3RyLmNoYXJDb2RlQXQoMCk7XG4gIHJldHVybiBCQU5HIDw9IGNvZGUgJiYgY29kZSA8PSBEQVNIO1xufTtcbnZhciBkb250RW5jb2RlUmVtb3RhYmxlVG9TbWFsbGNhcHMgPSAocmVtKSA9PiB0aHJvd1JlZGFjdGVkYHJlbW90YWJsZSB1bmV4cGVjdGVkOiAke3JlbX1gO1xudmFyIGRvbnRFbmNvZGVQcm9taXNlVG9TbWFsbGNhcHMgPSAocHJvbSkgPT4gdGhyb3dSZWRhY3RlZGBwcm9taXNlIHVuZXhwZWN0ZWQ6ICR7cHJvbX1gO1xudmFyIGRvbnRFbmNvZGVFcnJvclRvU21hbGxjYXBzID0gKGVycikgPT4gdGhyb3dSZWRhY3RlZGBlcnJvciBvYmplY3QgdW5leHBlY3RlZDogJHtxdW90ZShlcnIpfWA7XG52YXIgbWFrZUVuY29kZVRvU21hbGxjYXBzID0gKGVuY29kZU9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCB7XG4gICAgZW5jb2RlUmVtb3RhYmxlVG9TbWFsbGNhcHMgPSBkb250RW5jb2RlUmVtb3RhYmxlVG9TbWFsbGNhcHMsXG4gICAgZW5jb2RlUHJvbWlzZVRvU21hbGxjYXBzID0gZG9udEVuY29kZVByb21pc2VUb1NtYWxsY2FwcyxcbiAgICBlbmNvZGVFcnJvclRvU21hbGxjYXBzID0gZG9udEVuY29kZUVycm9yVG9TbWFsbGNhcHNcbiAgfSA9IGVuY29kZU9wdGlvbnM7XG4gIGNvbnN0IGFzc2VydEVuY29kZWRFcnJvciA9IChlbmNvZGluZykgPT4ge1xuICAgIHR5cGVvZiBlbmNvZGluZyA9PT0gXCJvYmplY3RcIiAmJiBoYXNPd243KGVuY29kaW5nLCBcIiNlcnJvclwiKSB8fCB0aHJvd1JlZGFjdGVkYGludGVybmFsOiBFcnJvciBlbmNvZGluZyBtdXN0IGhhdmUgXCIjZXJyb3JcIiBwcm9wZXJ0eTogJHtxdW90ZShcbiAgICAgIGVuY29kaW5nXG4gICAgKX1gO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBlbmNvZGluZ1tcIiNlcnJvclwiXTtcbiAgICB0eXBlb2YgbWVzc2FnZSA9PT0gXCJzdHJpbmdcIiAmJiAoIXN0YXJ0c1NwZWNpYWwobWVzc2FnZSkgfHwgbWVzc2FnZS5jaGFyQXQoMCkgPT09IFwiIVwiKSB8fCB0aHJvd1JlZGFjdGVkYGludGVybmFsOiBFcnJvciBlbmNvZGluZyBtdXN0IGhhdmUgc3RyaW5nIG1lc3NhZ2U6ICR7cXVvdGUobWVzc2FnZSl9YDtcbiAgfTtcbiAgY29uc3QgZW5jb2RlVG9TbWFsbGNhcHNSZWN1ciA9IChwYXNzYWJsZSkgPT4ge1xuICAgIGNvbnN0IHBhc3NTdHlsZSA9IHBhc3NTdHlsZU9mKHBhc3NhYmxlKTtcbiAgICBzd2l0Y2ggKHBhc3NTdHlsZSkge1xuICAgICAgY2FzZSBcIm51bGxcIjpcbiAgICAgIGNhc2UgXCJib29sZWFuXCI6IHtcbiAgICAgICAgcmV0dXJuIHBhc3NhYmxlO1xuICAgICAgfVxuICAgICAgY2FzZSBcInN0cmluZ1wiOiB7XG4gICAgICAgIGlmIChzdGFydHNTcGVjaWFsKHBhc3NhYmxlKSkge1xuICAgICAgICAgIHJldHVybiBgISR7cGFzc2FibGV9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFzc2FibGU7XG4gICAgICB9XG4gICAgICBjYXNlIFwidW5kZWZpbmVkXCI6IHtcbiAgICAgICAgcmV0dXJuIFwiI3VuZGVmaW5lZFwiO1xuICAgICAgfVxuICAgICAgY2FzZSBcIm51bWJlclwiOiB7XG4gICAgICAgIGlmIChOdW1iZXIuaXNOYU4ocGFzc2FibGUpKSB7XG4gICAgICAgICAgcmV0dXJuIFwiI05hTlwiO1xuICAgICAgICB9IGVsc2UgaWYgKHBhc3NhYmxlID09PSBJbmZpbml0eSkge1xuICAgICAgICAgIHJldHVybiBcIiNJbmZpbml0eVwiO1xuICAgICAgICB9IGVsc2UgaWYgKHBhc3NhYmxlID09PSAtSW5maW5pdHkpIHtcbiAgICAgICAgICByZXR1cm4gXCIjLUluZmluaXR5XCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzMihwYXNzYWJsZSwgLTApID8gMCA6IHBhc3NhYmxlO1xuICAgICAgfVxuICAgICAgY2FzZSBcImJpZ2ludFwiOiB7XG4gICAgICAgIGNvbnN0IHN0ciA9IFN0cmluZyhwYXNzYWJsZSk7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgLyoqIEB0eXBlIHtiaWdpbnR9ICovXG4gICAgICAgICAgcGFzc2FibGUgPCAwbiA/IHN0ciA6IGArJHtzdHJ9YFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY2FzZSBcInN5bWJvbFwiOiB7XG4gICAgICAgIGFzc2VydFBhc3NhYmxlU3ltYm9sKHBhc3NhYmxlKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IChcbiAgICAgICAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICAgICAgICBuYW1lRm9yUGFzc2FibGVTeW1ib2wocGFzc2FibGUpXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBgJSR7bmFtZX1gO1xuICAgICAgfVxuICAgICAgY2FzZSBcImNvcHlSZWNvcmRcIjoge1xuICAgICAgICBjb25zdCBuYW1lcyA9IG93bktleXMxMihwYXNzYWJsZSkuc29ydCgpO1xuICAgICAgICByZXR1cm4gZnJvbUVudHJpZXM0KFxuICAgICAgICAgIG5hbWVzLm1hcCgobmFtZSkgPT4gW1xuICAgICAgICAgICAgZW5jb2RlVG9TbWFsbGNhcHNSZWN1cihuYW1lKSxcbiAgICAgICAgICAgIGVuY29kZVRvU21hbGxjYXBzUmVjdXIocGFzc2FibGVbbmFtZV0pXG4gICAgICAgICAgXSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5QXJyYXlcIjoge1xuICAgICAgICByZXR1cm4gcGFzc2FibGUubWFwKGVuY29kZVRvU21hbGxjYXBzUmVjdXIpO1xuICAgICAgfVxuICAgICAgY2FzZSBcImJ5dGVBcnJheVwiOiB7XG4gICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgbWFyc2FsIG9mIGJ5dGVBcnJheSBub3QgeWV0IGltcGxlbWVudGVkOiAke3Bhc3NhYmxlfWA7XG4gICAgICB9XG4gICAgICBjYXNlIFwidGFnZ2VkXCI6IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBcIiN0YWdcIjogZW5jb2RlVG9TbWFsbGNhcHNSZWN1cihnZXRUYWcocGFzc2FibGUpKSxcbiAgICAgICAgICBwYXlsb2FkOiBlbmNvZGVUb1NtYWxsY2Fwc1JlY3VyKHBhc3NhYmxlLnBheWxvYWQpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBjYXNlIFwicmVtb3RhYmxlXCI6IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZW5jb2RlUmVtb3RhYmxlVG9TbWFsbGNhcHMoXG4gICAgICAgICAgcGFzc2FibGUsXG4gICAgICAgICAgZW5jb2RlVG9TbWFsbGNhcHNSZWN1clxuICAgICAgICApO1xuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXCJzdHJpbmdcIiAmJiByZXN1bHQuY2hhckF0KDApID09PSBcIiRcIikge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbDogUmVtb3RhYmxlIGVuY29kaW5nIG11c3Qgc3RhcnQgd2l0aCBcIiRcIjogJHtyZXN1bHR9YDtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJwcm9taXNlXCI6IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZW5jb2RlUHJvbWlzZVRvU21hbGxjYXBzKFxuICAgICAgICAgIHBhc3NhYmxlLFxuICAgICAgICAgIGVuY29kZVRvU21hbGxjYXBzUmVjdXJcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09IFwic3RyaW5nXCIgJiYgcmVzdWx0LmNoYXJBdCgwKSA9PT0gXCImXCIpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgaW50ZXJuYWw6IFByb21pc2UgZW5jb2RpbmcgbXVzdCBzdGFydCB3aXRoIFwiJlwiOiAke3Jlc3VsdH1gO1xuICAgICAgfVxuICAgICAgY2FzZSBcImVycm9yXCI6IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZW5jb2RlRXJyb3JUb1NtYWxsY2FwcyhwYXNzYWJsZSwgZW5jb2RlVG9TbWFsbGNhcHNSZWN1cik7XG4gICAgICAgIGFzc2VydEVuY29kZWRFcnJvcihyZXN1bHQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aHJvdyBhc3NlcnQuZmFpbChcbiAgICAgICAgICByZWRhY3RlZGBpbnRlcm5hbDogVW5yZWNvZ25pemVkIHBhc3NTdHlsZSAke3F1b3RlKHBhc3NTdHlsZSl9YCxcbiAgICAgICAgICBUeXBlRXJyb3JcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IGVuY29kZVRvU21hbGxjYXBzID0gKHBhc3NhYmxlKSA9PiB7XG4gICAgaWYgKGlzRXJyb3JMaWtlKHBhc3NhYmxlKSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gaGFyZGVuKFxuICAgICAgICBlbmNvZGVFcnJvclRvU21hbGxjYXBzKHBhc3NhYmxlLCBlbmNvZGVUb1NtYWxsY2Fwc1JlY3VyKVxuICAgICAgKTtcbiAgICAgIGFzc2VydEVuY29kZWRFcnJvcihyZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIGhhcmRlbihlbmNvZGVUb1NtYWxsY2Fwc1JlY3VyKHBhc3NhYmxlKSk7XG4gIH07XG4gIHJldHVybiBoYXJkZW4oZW5jb2RlVG9TbWFsbGNhcHMpO1xufTtcbmhhcmRlbihtYWtlRW5jb2RlVG9TbWFsbGNhcHMpO1xudmFyIGRvbnREZWNvZGVSZW1vdGFibGVGcm9tU21hbGxjYXBzID0gKGVuY29kaW5nKSA9PiB0aHJvd1JlZGFjdGVkYHJlbW90YWJsZSB1bmV4cGVjdGVkOiAke2VuY29kaW5nfWA7XG52YXIgZG9udERlY29kZVByb21pc2VGcm9tU21hbGxjYXBzID0gKGVuY29kaW5nKSA9PiB0aHJvd1JlZGFjdGVkYHByb21pc2UgdW5leHBlY3RlZDogJHtlbmNvZGluZ31gO1xudmFyIGRvbnREZWNvZGVFcnJvckZyb21TbWFsbGNhcHMgPSAoZW5jb2RpbmcpID0+IHRocm93UmVkYWN0ZWRgZXJyb3IgdW5leHBlY3RlZDogJHtxdW90ZShlbmNvZGluZyl9YDtcbnZhciBtYWtlRGVjb2RlRnJvbVNtYWxsY2FwcyA9IChkZWNvZGVPcHRpb25zID0ge30pID0+IHtcbiAgY29uc3Qge1xuICAgIGRlY29kZVJlbW90YWJsZUZyb21TbWFsbGNhcHMgPSBkb250RGVjb2RlUmVtb3RhYmxlRnJvbVNtYWxsY2FwcyxcbiAgICBkZWNvZGVQcm9taXNlRnJvbVNtYWxsY2FwcyA9IGRvbnREZWNvZGVQcm9taXNlRnJvbVNtYWxsY2FwcyxcbiAgICBkZWNvZGVFcnJvckZyb21TbWFsbGNhcHMgPSBkb250RGVjb2RlRXJyb3JGcm9tU21hbGxjYXBzXG4gIH0gPSBkZWNvZGVPcHRpb25zO1xuICBjb25zdCBkZWNvZGVGcm9tU21hbGxjYXBzID0gKGVuY29kaW5nKSA9PiB7XG4gICAgc3dpdGNoICh0eXBlb2YgZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICBjYXNlIFwibnVtYmVyXCI6IHtcbiAgICAgICAgcmV0dXJuIGVuY29kaW5nO1xuICAgICAgfVxuICAgICAgY2FzZSBcInN0cmluZ1wiOiB7XG4gICAgICAgIGlmICghc3RhcnRzU3BlY2lhbChlbmNvZGluZykpIHtcbiAgICAgICAgICByZXR1cm4gZW5jb2Rpbmc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYzIgPSBlbmNvZGluZy5jaGFyQXQoMCk7XG4gICAgICAgIHN3aXRjaCAoYzIpIHtcbiAgICAgICAgICBjYXNlIFwiIVwiOiB7XG4gICAgICAgICAgICByZXR1cm4gZW5jb2Rpbmcuc2xpY2UoMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCIlXCI6IHtcbiAgICAgICAgICAgIHJldHVybiBwYXNzYWJsZVN5bWJvbEZvck5hbWUoZW5jb2Rpbmcuc2xpY2UoMSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwiI1wiOiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCIjdW5kZWZpbmVkXCI6IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgXCIjTmFOXCI6IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgXCIjSW5maW5pdHlcIjoge1xuICAgICAgICAgICAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXNlIFwiIy1JbmZpbml0eVwiOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC1JbmZpbml0eTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgYXNzZXJ0LmZhaWwoXG4gICAgICAgICAgICAgICAgICByZWRhY3RlZGB1bmtub3duIGNvbnN0YW50IFwiJHtxdW90ZShlbmNvZGluZyl9XCJgLFxuICAgICAgICAgICAgICAgICAgVHlwZUVycm9yXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwiK1wiOlxuICAgICAgICAgIGNhc2UgXCItXCI6IHtcbiAgICAgICAgICAgIHJldHVybiBCaWdJbnQoZW5jb2RpbmcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwiJFwiOiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBkZWNvZGVSZW1vdGFibGVGcm9tU21hbGxjYXBzKFxuICAgICAgICAgICAgICBlbmNvZGluZyxcbiAgICAgICAgICAgICAgZGVjb2RlRnJvbVNtYWxsY2Fwc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChwYXNzU3R5bGVPZihyZXN1bHQpICE9PSBcInJlbW90YWJsZVwiKSB7XG4gICAgICAgICAgICAgIHRocm93UmVkYWN0ZWRgaW50ZXJuYWw6IGRlY29kZVJlbW90YWJsZUZyb21TbWFsbGNhcHMgb3B0aW9uIG11c3QgcmV0dXJuIGEgcmVtb3RhYmxlOiAke3Jlc3VsdH1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcIiZcIjoge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gZGVjb2RlUHJvbWlzZUZyb21TbWFsbGNhcHMoXG4gICAgICAgICAgICAgIGVuY29kaW5nLFxuICAgICAgICAgICAgICBkZWNvZGVGcm9tU21hbGxjYXBzXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKHBhc3NTdHlsZU9mKHJlc3VsdCkgIT09IFwicHJvbWlzZVwiKSB7XG4gICAgICAgICAgICAgIHRocm93UmVkYWN0ZWRgaW50ZXJuYWw6IGRlY29kZVByb21pc2VGcm9tU21hbGxjYXBzIG9wdGlvbiBtdXN0IHJldHVybiBhIHByb21pc2U6ICR7cmVzdWx0fWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFNwZWNpYWwgY2hhciAke3F1b3RlKFxuICAgICAgICAgICAgICBjMlxuICAgICAgICAgICAgKX0gcmVzZXJ2ZWQgZm9yIGZ1dHVyZSB1c2U6ICR7ZW5jb2Rpbmd9YDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNhc2UgXCJvYmplY3RcIjoge1xuICAgICAgICBpZiAoZW5jb2RpbmcgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZW5jb2Rpbmc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXk1KGVuY29kaW5nKSkge1xuICAgICAgICAgIHJldHVybiBlbmNvZGluZy5tYXAoKHZhbCkgPT4gZGVjb2RlRnJvbVNtYWxsY2Fwcyh2YWwpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzT3duNyhlbmNvZGluZywgXCIjdGFnXCIpKSB7XG4gICAgICAgICAgY29uc3QgeyBcIiN0YWdcIjogdGFnLCBwYXlsb2FkLCAuLi5yZXN0IH0gPSBlbmNvZGluZztcbiAgICAgICAgICB0eXBlb2YgdGFnID09PSBcInN0cmluZ1wiIHx8IHRocm93UmVkYWN0ZWRgVmFsdWUgb2YgXCIjdGFnXCIsIHRoZSB0YWcsIG11c3QgYmUgYSBzdHJpbmc6ICR7ZW5jb2Rpbmd9YDtcbiAgICAgICAgICBvd25LZXlzMTIocmVzdCkubGVuZ3RoID09PSAwIHx8IHRocm93UmVkYWN0ZWRgI3RhZyByZWNvcmQgdW5leHBlY3RlZCBwcm9wZXJ0aWVzOiAke3F1b3RlKG93bktleXMxMihyZXN0KSl9YDtcbiAgICAgICAgICByZXR1cm4gbWFrZVRhZ2dlZChcbiAgICAgICAgICAgIGRlY29kZUZyb21TbWFsbGNhcHModGFnKSxcbiAgICAgICAgICAgIGRlY29kZUZyb21TbWFsbGNhcHMocGF5bG9hZClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNPd243KGVuY29kaW5nLCBcIiNlcnJvclwiKSkge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGRlY29kZUVycm9yRnJvbVNtYWxsY2FwcyhcbiAgICAgICAgICAgIGVuY29kaW5nLFxuICAgICAgICAgICAgZGVjb2RlRnJvbVNtYWxsY2Fwc1xuICAgICAgICAgICk7XG4gICAgICAgICAgcGFzc1N0eWxlT2YocmVzdWx0KSA9PT0gXCJlcnJvclwiIHx8IHRocm93UmVkYWN0ZWRgaW50ZXJuYWw6IGRlY29kZUVycm9yRnJvbVNtYWxsY2FwcyBvcHRpb24gbXVzdCByZXR1cm4gYW4gZXJyb3I6ICR7cmVzdWx0fWA7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZWNvZGVFbnRyeSA9IChbZW5jb2RlZE5hbWUsIGVuY29kZWRWYWxdKSA9PiB7XG4gICAgICAgICAgdHlwZW9mIGVuY29kZWROYW1lID09PSBcInN0cmluZ1wiIHx8IHRocm93UmVkYWN0ZWRgUHJvcGVydHkgbmFtZSAke3F1b3RlKFxuICAgICAgICAgICAgZW5jb2RlZE5hbWVcbiAgICAgICAgICApfSBvZiAke2VuY29kaW5nfSBtdXN0IGJlIGEgc3RyaW5nYDtcbiAgICAgICAgICBlbmNvZGVkTmFtZS5jaGFyQXQoMCkgIT09IFwiI1wiIHx8IHRocm93UmVkYWN0ZWRgVW5yZWNvZ25pemVkIHJlY29yZCB0eXBlICR7cXVvdGUoZW5jb2RlZE5hbWUpfTogJHtlbmNvZGluZ31gO1xuICAgICAgICAgIGNvbnN0IG5hbWUgPSBkZWNvZGVGcm9tU21hbGxjYXBzKGVuY29kZWROYW1lKTtcbiAgICAgICAgICB0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIiB8fCB0aHJvd1JlZGFjdGVkYERlY29kZWQgcHJvcGVydHkgbmFtZSAke25hbWV9IGZyb20gJHtlbmNvZGluZ30gbXVzdCBiZSBhIHN0cmluZ2A7XG4gICAgICAgICAgcmV0dXJuIFtuYW1lLCBkZWNvZGVGcm9tU21hbGxjYXBzKGVuY29kZWRWYWwpXTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZGVjb2RlZEVudHJpZXMgPSBlbnRyaWVzNShlbmNvZGluZykubWFwKGRlY29kZUVudHJ5KTtcbiAgICAgICAgcmV0dXJuIGZyb21FbnRyaWVzNChkZWNvZGVkRW50cmllcyk7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHRocm93IGFzc2VydC5mYWlsKFxuICAgICAgICAgIHJlZGFjdGVkYGludGVybmFsOiB1bnJlY29nbml6ZWQgSlNPTiB0eXBlb2YgJHtxdW90ZShcbiAgICAgICAgICAgIHR5cGVvZiBlbmNvZGluZ1xuICAgICAgICAgICl9OiAke2VuY29kaW5nfWAsXG4gICAgICAgICAgVHlwZUVycm9yXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGFyZGVuKGRlY29kZUZyb21TbWFsbGNhcHMpO1xufTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL21hcnNoYWwvc3JjL21hcnNoYWwuanMqL1xudmFyIHsgZGVmaW5lUHJvcGVydGllczogZGVmaW5lUHJvcGVydGllczIsIGhhc093bjogaGFzT3duOCB9ID0gT2JqZWN0O1xudmFyIHsgaXNBcnJheTogaXNBcnJheTYgfSA9IEFycmF5O1xudmFyIHsgb3duS2V5czogb3duS2V5czEzIH0gPSBSZWZsZWN0O1xudmFyIGRlZmF1bHRWYWxUb1Nsb3RGbiA9ICh4KSA9PiB4O1xudmFyIGRlZmF1bHRTbG90VG9WYWxGbiA9ICh4LCBfKSA9PiB4O1xudmFyIG1ha2VNYXJzaGFsID0gKGNvbnZlcnRWYWxUb1Nsb3QgPSBkZWZhdWx0VmFsVG9TbG90Rm4sIGNvbnZlcnRTbG90VG9WYWwgPSBkZWZhdWx0U2xvdFRvVmFsRm4sIHtcbiAgZXJyb3JUYWdnaW5nID0gXCJvblwiLFxuICBtYXJzaGFsTmFtZSA9IFwiYW5vbi1tYXJzaGFsXCIsXG4gIC8qIFRPRE8gVGVtcG9yYXJ5IGhhY2suKi9cbiAgLyogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9BZ29yaWMvYWdvcmljLXNkay9pc3N1ZXMvMjc4MCovXG4gIGVycm9ySWROdW0gPSAxZTQsXG4gIC8qIFdlIHByZWZlciB0aGF0IHRoZSBjYWxsZXIgaW5zdGVhZCBsb2cgdG8gc29tZXdoZXJlIGhpZGRlbiovXG4gIC8qIHRvIGJlIHJldmVhbGVkIHdoZW4gY29ycmVsYXRpbmcgd2l0aCB0aGUgcmVjZWl2ZWQgZXJyb3IuKi9cbiAgbWFyc2hhbFNhdmVFcnJvciA9IChlcnIpID0+IGNvbnNvbGUubG9nKFwiVGVtcG9yYXJ5IGxvZ2dpbmcgb2Ygc2VudCBlcnJvclwiLCBlcnIpLFxuICAvKiBEZWZhdWx0IHRvICdjYXBkYXRhJyBiZWNhdXNlIGl0IHdhcyBpbXBsZW1lbnRlZCBmaXJzdC4qL1xuICAvKiBTb21ldGltZXMsIG9udG9nZW55IGRvZXMgcmVjYXBpdHVsYXRlIHBoeWxvZ2VueSA7KSovXG4gIHNlcmlhbGl6ZUJvZHlGb3JtYXQgPSBcImNhcGRhdGFcIlxufSA9IHt9KSA9PiB7XG4gIGFzc2VydC50eXBlb2YobWFyc2hhbE5hbWUsIFwic3RyaW5nXCIpO1xuICBlcnJvclRhZ2dpbmcgPT09IFwib25cIiB8fCBlcnJvclRhZ2dpbmcgPT09IFwib2ZmXCIgfHwgdGhyb3dSZWRhY3RlZGBUaGUgZXJyb3JUYWdnaW5nIG9wdGlvbiBjYW4gb25seSBiZSBcIm9uXCIgb3IgXCJvZmZcIiAke2Vycm9yVGFnZ2luZ31gO1xuICBjb25zdCBuZXh0RXJyb3JJZCA9ICgpID0+IHtcbiAgICBlcnJvcklkTnVtICs9IDE7XG4gICAgcmV0dXJuIGBlcnJvcjoke21hcnNoYWxOYW1lfSMke2Vycm9ySWROdW19YDtcbiAgfTtcbiAgY29uc3QgdG9DYXBEYXRhMiA9IChyb290KSA9PiB7XG4gICAgY29uc3Qgc2xvdHMgPSBbXTtcbiAgICBjb25zdCBzbG90TWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICBjb25zdCBlbmNvZGVTbG90Q29tbW9uID0gKHBhc3NhYmxlKSA9PiB7XG4gICAgICBsZXQgaW5kZXggPSBzbG90TWFwLmdldChwYXNzYWJsZSk7XG4gICAgICBpZiAoaW5kZXggIT09IHZvaWQgMCkge1xuICAgICAgICBhc3NlcnQudHlwZW9mKGluZGV4LCBcIm51bWJlclwiKTtcbiAgICAgICAgcmV0dXJuIGhhcmRlbih7IGluZGV4LCByZXBlYXQ6IHRydWUgfSk7XG4gICAgICB9XG4gICAgICBpbmRleCA9IHNsb3RzLmxlbmd0aDtcbiAgICAgIGNvbnN0IHNsb3QgPSBjb252ZXJ0VmFsVG9TbG90KHBhc3NhYmxlKTtcbiAgICAgIHNsb3RzLnB1c2goc2xvdCk7XG4gICAgICBzbG90TWFwLnNldChwYXNzYWJsZSwgaW5kZXgpO1xuICAgICAgcmV0dXJuIGhhcmRlbih7IGluZGV4LCByZXBlYXQ6IGZhbHNlIH0pO1xuICAgIH07XG4gICAgY29uc3QgZW5jb2RlRXJyb3JDb21tb24gPSAoZXJyLCBlbmNvZGVSZWN1cikgPT4ge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGVuY29kZVJlY3VyKGAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgYXNzZXJ0LnR5cGVvZihtZXNzYWdlLCBcInN0cmluZ1wiKTtcbiAgICAgIGNvbnN0IG5hbWUgPSBlbmNvZGVSZWN1cihgJHtlcnIubmFtZX1gKTtcbiAgICAgIGFzc2VydC50eXBlb2YobmFtZSwgXCJzdHJpbmdcIik7XG4gICAgICBpZiAoZXJyb3JUYWdnaW5nID09PSBcIm9uXCIpIHtcbiAgICAgICAgY29uc3QgZXJyb3JJZCA9IGVuY29kZVJlY3VyKG5leHRFcnJvcklkKCkpO1xuICAgICAgICBhc3NlcnQudHlwZW9mKGVycm9ySWQsIFwic3RyaW5nXCIpO1xuICAgICAgICBub3RlKGVyciwgcmVkYWN0ZWRgU2VudCBhcyAke2Vycm9ySWR9YCk7XG4gICAgICAgIG1hcnNoYWxTYXZlRXJyb3IoZXJyKTtcbiAgICAgICAgcmV0dXJuIGhhcmRlbih7IGVycm9ySWQsIG1lc3NhZ2UsIG5hbWUgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaGFyZGVuKHsgbWVzc2FnZSwgbmFtZSB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChzZXJpYWxpemVCb2R5Rm9ybWF0ID09PSBcImNhcGRhdGFcIikge1xuICAgICAgY29uc3QgZW5jb2RlU2xvdFRvQ2FwRGF0YSA9IChwYXNzYWJsZSwgaWZhY2UgPSB2b2lkIDApID0+IHtcbiAgICAgICAgY29uc3QgeyBpbmRleCwgcmVwZWF0IH0gPSBlbmNvZGVTbG90Q29tbW9uKHBhc3NhYmxlKTtcbiAgICAgICAgaWYgKHJlcGVhdCA9PT0gdHJ1ZSB8fCBpZmFjZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbih7IFtRQ0xBU1NdOiBcInNsb3RcIiwgaW5kZXggfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbih7IFtRQ0xBU1NdOiBcInNsb3RcIiwgaWZhY2UsIGluZGV4IH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3QgZW5jb2RlUmVtb3RhYmxlVG9DYXBEYXRhID0gKHZhbCwgX2VuY29kZVJlY3VyKSA9PiBlbmNvZGVTbG90VG9DYXBEYXRhKHZhbCwgZ2V0SW50ZXJmYWNlT2YodmFsKSk7XG4gICAgICBjb25zdCBlbmNvZGVQcm9taXNlVG9DYXBEYXRhID0gKHByb21pc2UsIF9lbmNvZGVSZWN1cikgPT4gZW5jb2RlU2xvdFRvQ2FwRGF0YShwcm9taXNlKTtcbiAgICAgIGNvbnN0IGVuY29kZUVycm9yVG9DYXBEYXRhID0gKGVyciwgZW5jb2RlUmVjdXIpID0+IHtcbiAgICAgICAgY29uc3QgZXJyRGF0YSA9IGVuY29kZUVycm9yQ29tbW9uKGVyciwgZW5jb2RlUmVjdXIpO1xuICAgICAgICByZXR1cm4gaGFyZGVuKHsgW1FDTEFTU106IFwiZXJyb3JcIiwgLi4uZXJyRGF0YSB9KTtcbiAgICAgIH07XG4gICAgICBjb25zdCBlbmNvZGVUb0NhcERhdGEgPSBtYWtlRW5jb2RlVG9DYXBEYXRhKHtcbiAgICAgICAgZW5jb2RlUmVtb3RhYmxlVG9DYXBEYXRhLFxuICAgICAgICBlbmNvZGVQcm9taXNlVG9DYXBEYXRhLFxuICAgICAgICBlbmNvZGVFcnJvclRvQ2FwRGF0YVxuICAgICAgfSk7XG4gICAgICBjb25zdCBlbmNvZGVkID0gZW5jb2RlVG9DYXBEYXRhKHJvb3QpO1xuICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGVuY29kZWQpO1xuICAgICAgcmV0dXJuIGhhcmRlbih7XG4gICAgICAgIGJvZHksXG4gICAgICAgIHNsb3RzXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHNlcmlhbGl6ZUJvZHlGb3JtYXQgPT09IFwic21hbGxjYXBzXCIpIHtcbiAgICAgIGNvbnN0IGVuY29kZVNsb3RUb1NtYWxsY2FwcyA9IChwcmVmaXgsIHBhc3NhYmxlLCBpZmFjZSA9IHZvaWQgMCkgPT4ge1xuICAgICAgICBjb25zdCB7IGluZGV4LCByZXBlYXQgfSA9IGVuY29kZVNsb3RDb21tb24ocGFzc2FibGUpO1xuICAgICAgICBpZiAocmVwZWF0ID09PSB0cnVlIHx8IGlmYWNlID09PSB2b2lkIDApIHtcbiAgICAgICAgICByZXR1cm4gYCR7cHJlZml4fSR7aW5kZXh9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7cHJlZml4fSR7aW5kZXh9LiR7aWZhY2V9YDtcbiAgICAgIH07XG4gICAgICBjb25zdCBlbmNvZGVSZW1vdGFibGVUb1NtYWxsY2FwcyA9IChyZW1vdGFibGUsIF9lbmNvZGVSZWN1cikgPT4gZW5jb2RlU2xvdFRvU21hbGxjYXBzKFwiJFwiLCByZW1vdGFibGUsIGdldEludGVyZmFjZU9mKHJlbW90YWJsZSkpO1xuICAgICAgY29uc3QgZW5jb2RlUHJvbWlzZVRvU21hbGxjYXBzID0gKHByb21pc2UsIF9lbmNvZGVSZWN1cikgPT4gZW5jb2RlU2xvdFRvU21hbGxjYXBzKFwiJlwiLCBwcm9taXNlKTtcbiAgICAgIGNvbnN0IGVuY29kZUVycm9yVG9TbWFsbGNhcHMgPSAoZXJyLCBlbmNvZGVSZWN1cikgPT4ge1xuICAgICAgICBjb25zdCBlcnJEYXRhID0gZW5jb2RlRXJyb3JDb21tb24oZXJyLCBlbmNvZGVSZWN1cik7XG4gICAgICAgIGNvbnN0IHsgbWVzc2FnZSwgLi4ucmVzdCB9ID0gZXJyRGF0YTtcbiAgICAgICAgcmV0dXJuIGhhcmRlbih7IFwiI2Vycm9yXCI6IG1lc3NhZ2UsIC4uLnJlc3QgfSk7XG4gICAgICB9O1xuICAgICAgY29uc3QgZW5jb2RlVG9TbWFsbGNhcHMgPSBtYWtlRW5jb2RlVG9TbWFsbGNhcHMoe1xuICAgICAgICBlbmNvZGVSZW1vdGFibGVUb1NtYWxsY2FwcyxcbiAgICAgICAgZW5jb2RlUHJvbWlzZVRvU21hbGxjYXBzLFxuICAgICAgICBlbmNvZGVFcnJvclRvU21hbGxjYXBzXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGVuY29kZWQgPSBlbmNvZGVUb1NtYWxsY2Fwcyhyb290KTtcbiAgICAgIGNvbnN0IHNtYWxsY2Fwc0JvZHkgPSBKU09OLnN0cmluZ2lmeShlbmNvZGVkKTtcbiAgICAgIHJldHVybiBoYXJkZW4oe1xuICAgICAgICAvKiBWYWxpZCBKU09OIGNhbm5vdCBiZWdpbiB3aXRoIGEgJyMnLCBzbyB0aGlzIGlzIGEgdmFsaWQgc2lnbmFsKi9cbiAgICAgICAgLyogaW5kaWNhdGluZyBzbWFsbGNhcHMgZm9ybWF0LiovXG4gICAgICAgIGJvZHk6IGAjJHtzbWFsbGNhcHNCb2R5fWAsXG4gICAgICAgIHNsb3RzXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBVbnJlY29nbml6ZWQgc2VyaWFsaXplQm9keUZvcm1hdDogJHtxdW90ZShzZXJpYWxpemVCb2R5Rm9ybWF0KX1gO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgbWFrZUZ1bGxSZXZpdmUgPSAoc2xvdHMpID0+IHtcbiAgICBjb25zdCB2YWxNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGRlY29kZVNsb3RDb21tb24gPSAoc2xvdERhdGEpID0+IHtcbiAgICAgIGNvbnN0IHsgaWZhY2UgPSB2b2lkIDAsIGluZGV4LCAuLi5yZXN0IH0gPSBzbG90RGF0YTtcbiAgICAgIG93bktleXMxMyhyZXN0KS5sZW5ndGggPT09IDAgfHwgdGhyb3dSZWRhY3RlZGB1bmV4cGVjdGVkIGVuY29kZWQgc2xvdCBwcm9wZXJ0aWVzICR7cXVvdGUob3duS2V5czEzKHJlc3QpKX1gO1xuICAgICAgY29uc3QgZXh0YW50ID0gdmFsTWFwLmdldChpbmRleCk7XG4gICAgICBpZiAoZXh0YW50KSB7XG4gICAgICAgIHJldHVybiBleHRhbnQ7XG4gICAgICB9XG4gICAgICBjb25zdCBzbG90ID0gc2xvdHNbTnVtYmVyKE5hdChpbmRleCkpXTtcbiAgICAgIGNvbnN0IHZhbCA9IGNvbnZlcnRTbG90VG9WYWwoc2xvdCwgaWZhY2UpO1xuICAgICAgdmFsTWFwLnNldChpbmRleCwgdmFsKTtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfTtcbiAgICBjb25zdCBkZWNvZGVFcnJvckNvbW1vbiA9IChlcnJEYXRhLCBkZWNvZGVSZWN1cikgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBlcnJvcklkID0gdm9pZCAwLFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICBuYW1lLFxuICAgICAgICBjYXVzZSA9IHZvaWQgMCxcbiAgICAgICAgZXJyb3JzID0gdm9pZCAwLFxuICAgICAgICAuLi5yZXN0XG4gICAgICB9ID0gZXJyRGF0YTtcbiAgICAgIGNvbnN0IGROYW1lID0gZGVjb2RlUmVjdXIobmFtZSk7XG4gICAgICBjb25zdCBkTWVzc2FnZSA9IGRlY29kZVJlY3VyKG1lc3NhZ2UpO1xuICAgICAgY29uc3QgZEVycm9ySWQgPSAoXG4gICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgICAgICBlcnJvcklkICYmIGRlY29kZVJlY3VyKGVycm9ySWQpXG4gICAgICApO1xuICAgICAgaWYgKHR5cGVvZiBkTmFtZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYGludmFsaWQgZXJyb3IgbmFtZSB0eXBlb2YgJHtxdW90ZSh0eXBlb2YgZE5hbWUpfWA7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGRNZXNzYWdlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgaW52YWxpZCBlcnJvciBtZXNzYWdlIHR5cGVvZiAke3F1b3RlKHR5cGVvZiBkTWVzc2FnZSl9YDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVyckNvbnN0cnVjdG9yID0gZ2V0RXJyb3JDb25zdHJ1Y3RvcihkTmFtZSkgfHwgRXJyb3I7XG4gICAgICBjb25zdCBlcnJvck5hbWUgPSBkRXJyb3JJZCA9PT0gdm9pZCAwID8gYFJlbW90ZSR7ZXJyQ29uc3RydWN0b3IubmFtZX1gIDogYFJlbW90ZSR7ZXJyQ29uc3RydWN0b3IubmFtZX0oJHtkRXJyb3JJZH0pYDtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGVycm9yTmFtZSxcbiAgICAgICAgc2FuaXRpemU6IGZhbHNlXG4gICAgICB9O1xuICAgICAgaWYgKGNhdXNlKSB7XG4gICAgICAgIG9wdGlvbnMuY2F1c2UgPSBkZWNvZGVSZWN1cihjYXVzZSk7XG4gICAgICB9XG4gICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgIG9wdGlvbnMuZXJyb3JzID0gZGVjb2RlUmVjdXIoZXJyb3JzKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJhd0Vycm9yID0gbWFrZUVycm9yKGRNZXNzYWdlLCBlcnJDb25zdHJ1Y3Rvciwgb3B0aW9ucyk7XG4gICAgICBjb25zdCBkZXNjcyA9IG9iamVjdE1hcChyZXN0LCAoZGF0YSkgPT4gKHtcbiAgICAgICAgdmFsdWU6IGRlY29kZVJlY3VyKGRhdGEpLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlXG4gICAgICB9KSk7XG4gICAgICBkZWZpbmVQcm9wZXJ0aWVzMihyYXdFcnJvciwgZGVzY3MpO1xuICAgICAgaGFyZGVuKHJhd0Vycm9yKTtcbiAgICAgIHJldHVybiB0b1Bhc3NhYmxlRXJyb3IocmF3RXJyb3IpO1xuICAgIH07XG4gICAgY29uc3QgZGVjb2RlUmVtb3RhYmxlT3JQcm9taXNlRnJvbUNhcERhdGEgPSAocmF3VHJlZSwgX2RlY29kZVJlY3VyKSA9PiB7XG4gICAgICBjb25zdCB7IFtRQ0xBU1NdOiBfLCAuLi5zbG90RGF0YSB9ID0gcmF3VHJlZTtcbiAgICAgIHJldHVybiBkZWNvZGVTbG90Q29tbW9uKHNsb3REYXRhKTtcbiAgICB9O1xuICAgIGNvbnN0IGRlY29kZUVycm9yRnJvbUNhcERhdGEgPSAocmF3VHJlZSwgZGVjb2RlUmVjdXIpID0+IHtcbiAgICAgIGNvbnN0IHsgW1FDTEFTU106IF8sIC4uLmVyckRhdGEgfSA9IHJhd1RyZWU7XG4gICAgICByZXR1cm4gZGVjb2RlRXJyb3JDb21tb24oZXJyRGF0YSwgZGVjb2RlUmVjdXIpO1xuICAgIH07XG4gICAgY29uc3QgcmV2aXZlRnJvbUNhcERhdGEgPSBtYWtlRGVjb2RlRnJvbUNhcERhdGEoe1xuICAgICAgZGVjb2RlUmVtb3RhYmxlRnJvbUNhcERhdGE6IGRlY29kZVJlbW90YWJsZU9yUHJvbWlzZUZyb21DYXBEYXRhLFxuICAgICAgZGVjb2RlUHJvbWlzZUZyb21DYXBEYXRhOiBkZWNvZGVSZW1vdGFibGVPclByb21pc2VGcm9tQ2FwRGF0YSxcbiAgICAgIGRlY29kZUVycm9yRnJvbUNhcERhdGFcbiAgICB9KTtcbiAgICBjb25zdCBtYWtlRGVjb2RlU2xvdEZyb21TbWFsbGNhcHMgPSAocHJlZml4KSA9PiB7XG4gICAgICByZXR1cm4gKHN0cmluZ0VuY29kaW5nLCBfZGVjb2RlUmVjdXIpID0+IHtcbiAgICAgICAgYXNzZXJ0KHN0cmluZ0VuY29kaW5nLmNoYXJBdCgwKSA9PT0gcHJlZml4KTtcbiAgICAgICAgY29uc3QgaTMgPSBzdHJpbmdFbmNvZGluZy5pbmRleE9mKFwiLlwiKTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBOdW1iZXIoc3RyaW5nRW5jb2Rpbmcuc2xpY2UoMSwgaTMgPCAwID8gdm9pZCAwIDogaTMpKTtcbiAgICAgICAgY29uc3QgaWZhY2UgPSBpMyA8IDAgPyB2b2lkIDAgOiBzdHJpbmdFbmNvZGluZy5zbGljZShpMyArIDEpO1xuICAgICAgICByZXR1cm4gZGVjb2RlU2xvdENvbW1vbih7IGlmYWNlLCBpbmRleCB9KTtcbiAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCBkZWNvZGVSZW1vdGFibGVGcm9tU21hbGxjYXBzID0gbWFrZURlY29kZVNsb3RGcm9tU21hbGxjYXBzKFwiJFwiKTtcbiAgICBjb25zdCBkZWNvZGVQcm9taXNlRnJvbVNtYWxsY2FwcyA9IG1ha2VEZWNvZGVTbG90RnJvbVNtYWxsY2FwcyhcIiZcIik7XG4gICAgY29uc3QgZGVjb2RlRXJyb3JGcm9tU21hbGxjYXBzID0gKGVuY29kaW5nLCBkZWNvZGVSZWN1cikgPT4ge1xuICAgICAgY29uc3QgeyBcIiNlcnJvclwiOiBtZXNzYWdlLCAuLi5yZXN0RXJyRGF0YSB9ID0gZW5jb2Rpbmc7XG4gICAgICAhaGFzT3duOChyZXN0RXJyRGF0YSwgXCJtZXNzYWdlXCIpIHx8IHRocm93UmVkYWN0ZWRgdW5leHBlY3RlZCBlbmNvZGVkIGVycm9yIHByb3BlcnR5ICR7cXVvdGUoXCJtZXNzYWdlXCIpfWA7XG4gICAgICByZXR1cm4gZGVjb2RlRXJyb3JDb21tb24oeyBtZXNzYWdlLCAuLi5yZXN0RXJyRGF0YSB9LCBkZWNvZGVSZWN1cik7XG4gICAgfTtcbiAgICBjb25zdCByZXZpdmVGcm9tU21hbGxjYXBzID0gbWFrZURlY29kZUZyb21TbWFsbGNhcHMoe1xuICAgICAgLyogQHRzLWlnbm9yZSBYWFggU21hbGxDYXBzRW5jb2RpbmcqL1xuICAgICAgZGVjb2RlUmVtb3RhYmxlRnJvbVNtYWxsY2FwcyxcbiAgICAgIC8qIEB0cy1pZ25vcmUgWFhYIFNtYWxsQ2Fwc0VuY29kaW5nKi9cbiAgICAgIGRlY29kZVByb21pc2VGcm9tU21hbGxjYXBzLFxuICAgICAgZGVjb2RlRXJyb3JGcm9tU21hbGxjYXBzXG4gICAgfSk7XG4gICAgcmV0dXJuIGhhcmRlbih7IHJldml2ZUZyb21DYXBEYXRhLCByZXZpdmVGcm9tU21hbGxjYXBzIH0pO1xuICB9O1xuICBjb25zdCBmcm9tQ2FwRGF0YSA9IChkYXRhKSA9PiB7XG4gICAgY29uc3QgeyBib2R5LCBzbG90cyB9ID0gZGF0YTtcbiAgICB0eXBlb2YgYm9keSA9PT0gXCJzdHJpbmdcIiB8fCB0aHJvd1JlZGFjdGVkYHVuc2VyaWFsaXplKCkgZ2l2ZW4gbm9uLWNhcGRhdGEgKC5ib2R5IGlzICR7Ym9keX0sIG5vdCBzdHJpbmcpYDtcbiAgICBpc0FycmF5NihkYXRhLnNsb3RzKSB8fCB0aHJvd1JlZGFjdGVkYHVuc2VyaWFsaXplKCkgZ2l2ZW4gbm9uLWNhcGRhdGEgKC5zbG90cyBhcmUgbm90IEFycmF5KWA7XG4gICAgY29uc3QgeyByZXZpdmVGcm9tQ2FwRGF0YSwgcmV2aXZlRnJvbVNtYWxsY2FwcyB9ID0gbWFrZUZ1bGxSZXZpdmUoc2xvdHMpO1xuICAgIGxldCByZXN1bHQ7XG4gICAgaWYgKGJvZHkuY2hhckF0KDApID09PSBcIiNcIikge1xuICAgICAgY29uc3Qgc21hbGxjYXBzQm9keSA9IGJvZHkuc2xpY2UoMSk7XG4gICAgICBjb25zdCBlbmNvZGluZyA9IGhhcmRlbihKU09OLnBhcnNlKHNtYWxsY2Fwc0JvZHkpKTtcbiAgICAgIHJlc3VsdCA9IGhhcmRlbihyZXZpdmVGcm9tU21hbGxjYXBzKGVuY29kaW5nKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJhd1RyZWUgPSBoYXJkZW4oSlNPTi5wYXJzZShib2R5KSk7XG4gICAgICByZXN1bHQgPSBoYXJkZW4ocmV2aXZlRnJvbUNhcERhdGEocmF3VHJlZSkpO1xuICAgIH1cbiAgICBhc3NlcnRQYXNzYWJsZShyZXN1bHQpO1xuICAgIHJldHVybiAoXG4gICAgICAvKiogQHR5cGUge1Bhc3NhYmxlQ2FwfSAqL1xuICAgICAgcmVzdWx0XG4gICAgKTtcbiAgfTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgdG9DYXBEYXRhOiB0b0NhcERhdGEyLFxuICAgIGZyb21DYXBEYXRhLFxuICAgIC8qIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSovXG4gICAgLyoqIEBkZXByZWNhdGVkIHVzZSB0b0NhcERhdGEgKi9cbiAgICBzZXJpYWxpemU6IHRvQ2FwRGF0YTIsXG4gICAgLyoqIEBkZXByZWNhdGVkIHVzZSBmcm9tQ2FwRGF0YSAqL1xuICAgIHVuc2VyaWFsaXplOiBmcm9tQ2FwRGF0YVxuICB9KTtcbn07XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9tYXJzaGFsL3NyYy9tYXJzaGFsLXN0cmluZ2lmeS5qcyovXG52YXIgeyBmcmVlemU6IGZyZWV6ZTYgfSA9IE9iamVjdDtcbnZhciBkb05vdENvbnZlcnRWYWxUb1Nsb3QgPSAodmFsKSA9PiB0aHJvd1JlZGFjdGVkYE1hcnNoYWwncyBzdHJpbmdpZnkgcmVqZWN0cyBwcmVzZW5jZXMgYW5kIHByb21pc2VzICR7dmFsfWA7XG52YXIgZG9Ob3RDb252ZXJ0U2xvdFRvVmFsID0gKHNsb3QsIF9pZmFjZSkgPT4gdGhyb3dSZWRhY3RlZGBNYXJzaGFsJ3MgcGFyc2UgbXVzdCBub3QgZW5jb2RlIGFueSBzbG90cyAke3Nsb3R9YDtcbnZhciBiYWRBcnJheUhhbmRsZXIgPSBoYXJkZW4oe1xuICBnZXQ6IChfdGFyZ2V0LCBuYW1lLCBfcmVjZWl2ZXIpID0+IHtcbiAgICBpZiAobmFtZSA9PT0gXCJsZW5ndGhcIikge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHRocm93IHRocm93UmVkYWN0ZWRgTWFyc2hhbCdzIHBhcnNlIG11c3Qgbm90IGVuY29kZSBhbnkgc2xvdCBwb3NpdGlvbnMgJHtuYW1lfWA7XG4gIH1cbn0pO1xudmFyIGFycmF5VGFyZ2V0ID0gZnJlZXplNihcbiAgLyoqIEB0eXBlIHthbnlbXX0gKi9cbiAgW11cbik7XG52YXIgYmFkQXJyYXkgPSBuZXcgUHJveHkoYXJyYXlUYXJnZXQsIGJhZEFycmF5SGFuZGxlcik7XG52YXIgeyBzZXJpYWxpemUsIHVuc2VyaWFsaXplIH0gPSBtYWtlTWFyc2hhbChcbiAgZG9Ob3RDb252ZXJ0VmFsVG9TbG90LFxuICBkb05vdENvbnZlcnRTbG90VG9WYWwsXG4gIHtcbiAgICBlcnJvclRhZ2dpbmc6IFwib2ZmXCIsXG4gICAgLyogVE9ETyBmaXggdGVzdHMgdG8gd29ya3Mgd2l0aCBzbWFsbGNhcHMuKi9cbiAgICBzZXJpYWxpemVCb2R5Rm9ybWF0OiBcImNhcGRhdGFcIlxuICB9XG4pO1xudmFyIHN0cmluZ2lmeSA9ICh2YWwpID0+IHNlcmlhbGl6ZSh2YWwpLmJvZHk7XG5oYXJkZW4oc3RyaW5naWZ5KTtcbnZhciBwYXJzZSA9IChzdHIpID0+IHVuc2VyaWFsaXplKFxuICAvKiBgZnJlZXplYCBidXQgbm90IGBoYXJkZW5gIHNpbmNlIHRoZSBgYmFkQXJyYXlgIHByb3h5IGFuZCBpdHMgdGFyZ2V0Ki9cbiAgLyogbXVzdCByZW1haW4gdHJhcHBpbmcuKi9cbiAgLyogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lbmRvanMvZW5kby9ibG9iL21hc3Rlci9wYWNrYWdlcy9zZXMvZG9jcy9wcmVwYXJpbmctZm9yLXN0YWJpbGl6ZS5tZCovXG4gIGZyZWV6ZTYoe1xuICAgIGJvZHk6IHN0cixcbiAgICBzbG90czogYmFkQXJyYXlcbiAgfSlcbik7XG5oYXJkZW4ocGFyc2UpO1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvQGVuZG8vbWFyc2hhbC9zcmMvbWFyc2hhbC1qdXN0aW4uanMqL1xudmFyIHsgb3duS2V5czogb3duS2V5czE0IH0gPSBSZWZsZWN0O1xudmFyIHsgaXNBcnJheTogaXNBcnJheTcgfSA9IEFycmF5O1xudmFyIHsgc3RyaW5naWZ5OiBxdW90ZTIgfSA9IEpTT047XG52YXIgbWFrZVllc0luZGVudGVyID0gKCkgPT4ge1xuICBjb25zdCBzdHJpbmdzID0gW107XG4gIGxldCBsZXZlbCA9IDA7XG4gIGxldCBuZWVkU3BhY2UgPSBmYWxzZTtcbiAgY29uc3QgbGluZSA9ICgpID0+IHtcbiAgICBuZWVkU3BhY2UgPSBmYWxzZTtcbiAgICByZXR1cm4gc3RyaW5ncy5wdXNoKFwiXFxuXCIsIFwiICBcIi5yZXBlYXQobGV2ZWwpKTtcbiAgfTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgb3BlbjogKG9wZW5CcmFja2V0KSA9PiB7XG4gICAgICBsZXZlbCArPSAxO1xuICAgICAgaWYgKG5lZWRTcGFjZSkge1xuICAgICAgICBzdHJpbmdzLnB1c2goXCIgXCIpO1xuICAgICAgfVxuICAgICAgbmVlZFNwYWNlID0gZmFsc2U7XG4gICAgICByZXR1cm4gc3RyaW5ncy5wdXNoKG9wZW5CcmFja2V0KTtcbiAgICB9LFxuICAgIGxpbmUsXG4gICAgbmV4dDogKHRva2VuKSA9PiB7XG4gICAgICBpZiAobmVlZFNwYWNlICYmIHRva2VuICE9PSBcIixcIiAmJiB0b2tlbiAhPT0gXCIpXCIpIHtcbiAgICAgICAgc3RyaW5ncy5wdXNoKFwiIFwiKTtcbiAgICAgIH1cbiAgICAgIG5lZWRTcGFjZSA9IHRydWU7XG4gICAgICByZXR1cm4gc3RyaW5ncy5wdXNoKHRva2VuKTtcbiAgICB9LFxuICAgIGNsb3NlOiAoY2xvc2VCcmFja2V0KSA9PiB7XG4gICAgICBhc3NlcnQobGV2ZWwgPj0gMSk7XG4gICAgICBsZXZlbCAtPSAxO1xuICAgICAgbGluZSgpO1xuICAgICAgcmV0dXJuIHN0cmluZ3MucHVzaChjbG9zZUJyYWNrZXQpO1xuICAgIH0sXG4gICAgZG9uZTogKCkgPT4ge1xuICAgICAgYXNzZXJ0LmVxdWFsKGxldmVsLCAwKTtcbiAgICAgIHJldHVybiBzdHJpbmdzLmpvaW4oXCJcIik7XG4gICAgfVxuICB9KTtcbn07XG52YXIgYmFkUGFpclBhdHRlcm4gPSAvXig/Olxcd1xcd3w8PHw+PnxcXCtcXCt8LS18PCF8LT4pJC87XG52YXIgbWFrZU5vSW5kZW50ZXIgPSAoKSA9PiB7XG4gIGNvbnN0IHN0cmluZ3MgPSBbXTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgb3BlbjogKG9wZW5CcmFja2V0KSA9PiBzdHJpbmdzLnB1c2gob3BlbkJyYWNrZXQpLFxuICAgIGxpbmU6ICgpID0+IHN0cmluZ3MubGVuZ3RoLFxuICAgIG5leHQ6ICh0b2tlbikgPT4ge1xuICAgICAgaWYgKHN0cmluZ3MubGVuZ3RoID49IDEpIHtcbiAgICAgICAgY29uc3QgbGFzdCA9IHN0cmluZ3Nbc3RyaW5ncy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGxhc3QubGVuZ3RoID49IDEgJiYgdG9rZW4ubGVuZ3RoID49IDEpIHtcbiAgICAgICAgICBjb25zdCBwYWlyID0gYCR7bGFzdFtsYXN0Lmxlbmd0aCAtIDFdfSR7dG9rZW5bMF19YDtcbiAgICAgICAgICBpZiAoYmFkUGFpclBhdHRlcm4udGVzdChwYWlyKSkge1xuICAgICAgICAgICAgc3RyaW5ncy5wdXNoKFwiIFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmdzLnB1c2godG9rZW4pO1xuICAgIH0sXG4gICAgY2xvc2U6IChjbG9zZUJyYWNrZXQpID0+IHtcbiAgICAgIGlmIChzdHJpbmdzLmxlbmd0aCA+PSAxICYmIHN0cmluZ3Nbc3RyaW5ncy5sZW5ndGggLSAxXSA9PT0gXCIsXCIpIHtcbiAgICAgICAgc3RyaW5ncy5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmdzLnB1c2goY2xvc2VCcmFja2V0KTtcbiAgICB9LFxuICAgIGRvbmU6ICgpID0+IHN0cmluZ3Muam9pbihcIlwiKVxuICB9KTtcbn07XG52YXIgaWRlbnRQYXR0ZXJuID0gL15bYS16QS1aXVxcdyokLztcbmhhcmRlbihpZGVudFBhdHRlcm4pO1xudmFyIEF0QXRQcmVmaXhQYXR0ZXJuMiA9IC9eQEAoLiopJC87XG5oYXJkZW4oQXRBdFByZWZpeFBhdHRlcm4yKTtcbnZhciBkZWNvZGVUb0p1c3RpbiA9IChlbmNvZGluZywgc2hvdWxkSW5kZW50ID0gZmFsc2UsIHNsb3RzID0gW10pID0+IHtcbiAgY29uc3QgcHJlcGFyZSA9IChyYXdUcmVlKSA9PiB7XG4gICAgaWYgKGlzUHJpbWl0aXZlMihyYXdUcmVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhc3NlcnQudHlwZW9mKHJhd1RyZWUsIFwib2JqZWN0XCIpO1xuICAgIGFzc2VydChyYXdUcmVlICE9PSBudWxsKTtcbiAgICBpZiAoUUNMQVNTIGluIHJhd1RyZWUpIHtcbiAgICAgIGNvbnN0IHFjbGFzcyA9IHJhd1RyZWVbUUNMQVNTXTtcbiAgICAgIHR5cGVvZiBxY2xhc3MgPT09IFwic3RyaW5nXCIgfHwgdGhyb3dSZWRhY3RlZGBpbnZhbGlkIHFjbGFzcyB0eXBlb2YgJHtxdW90ZSh0eXBlb2YgcWNsYXNzKX1gO1xuICAgICAgYXNzZXJ0KCFpc0FycmF5NyhyYXdUcmVlKSk7XG4gICAgICBzd2l0Y2ggKHJhd1RyZWVbXCJAcWNsYXNzXCJdKSB7XG4gICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgICAgY2FzZSBcIk5hTlwiOlxuICAgICAgICBjYXNlIFwiSW5maW5pdHlcIjpcbiAgICAgICAgY2FzZSBcIi1JbmZpbml0eVwiOiB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJiaWdpbnRcIjoge1xuICAgICAgICAgIGNvbnN0IHsgZGlnaXRzIH0gPSByYXdUcmVlO1xuICAgICAgICAgIHR5cGVvZiBkaWdpdHMgPT09IFwic3RyaW5nXCIgfHwgdGhyb3dSZWRhY3RlZGBpbnZhbGlkIGRpZ2l0cyB0eXBlb2YgJHtxdW90ZSh0eXBlb2YgZGlnaXRzKX1gO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiQEBhc3luY0l0ZXJhdG9yXCI6IHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInN5bWJvbFwiOiB7XG4gICAgICAgICAgY29uc3QgeyBuYW1lIH0gPSByYXdUcmVlO1xuICAgICAgICAgIGFzc2VydC50eXBlb2YobmFtZSwgXCJzdHJpbmdcIik7XG4gICAgICAgICAgY29uc3Qgc3ltID0gcGFzc2FibGVTeW1ib2xGb3JOYW1lKG5hbWUpO1xuICAgICAgICAgIGFzc2VydC50eXBlb2Yoc3ltLCBcInN5bWJvbFwiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInRhZ2dlZFwiOiB7XG4gICAgICAgICAgY29uc3QgeyB0YWcsIHBheWxvYWQgfSA9IHJhd1RyZWU7XG4gICAgICAgICAgYXNzZXJ0LnR5cGVvZih0YWcsIFwic3RyaW5nXCIpO1xuICAgICAgICAgIHByZXBhcmUocGF5bG9hZCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJzbG90XCI6IHtcbiAgICAgICAgICBjb25zdCB7IGluZGV4LCBpZmFjZSB9ID0gcmF3VHJlZTtcbiAgICAgICAgICBhc3NlcnQudHlwZW9mKGluZGV4LCBcIm51bWJlclwiKTtcbiAgICAgICAgICBOYXQoaW5kZXgpO1xuICAgICAgICAgIGlmIChpZmFjZSAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBhc3NlcnQudHlwZW9mKGlmYWNlLCBcInN0cmluZ1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJoaWxiZXJ0XCI6IHtcbiAgICAgICAgICBjb25zdCB7IG9yaWdpbmFsLCByZXN0IH0gPSByYXdUcmVlO1xuICAgICAgICAgIFwib3JpZ2luYWxcIiBpbiByYXdUcmVlIHx8IHRocm93UmVkYWN0ZWRgSW52YWxpZCBIaWxiZXJ0IEhvdGVsIGVuY29kaW5nICR7cmF3VHJlZX1gO1xuICAgICAgICAgIHByZXBhcmUob3JpZ2luYWwpO1xuICAgICAgICAgIGlmIChcInJlc3RcIiBpbiByYXdUcmVlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlc3QgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBSZXN0ICR7cmVzdH0gZW5jb2RpbmcgbXVzdCBiZSBhbiBvYmplY3RgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3QgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBSZXN0ICR7cmVzdH0gZW5jb2RpbmcgbXVzdCBub3QgYmUgbnVsbGA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNBcnJheTcocmVzdCkpIHtcbiAgICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBSZXN0ICR7cmVzdH0gZW5jb2RpbmcgbXVzdCBub3QgYmUgYW4gYXJyYXlgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFFDTEFTUyBpbiByZXN0KSB7XG4gICAgICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgUmVzdCBlbmNvZGluZyAke3Jlc3R9IG11c3Qgbm90IGNvbnRhaW4gJHtxdW90ZShRQ0xBU1MpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuYW1lcyA9IG93bktleXMxNChyZXN0KTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBuYW1lcykge1xuICAgICAgICAgICAgICB0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIiB8fCB0aHJvd1JlZGFjdGVkYFByb3BlcnR5IG5hbWUgJHtuYW1lfSBvZiAke3Jhd1RyZWV9IG11c3QgYmUgYSBzdHJpbmdgO1xuICAgICAgICAgICAgICBwcmVwYXJlKHJlc3RbbmFtZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImVycm9yXCI6IHtcbiAgICAgICAgICBjb25zdCB7IG5hbWUsIG1lc3NhZ2UgfSA9IHJhd1RyZWU7XG4gICAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYGludmFsaWQgZXJyb3IgbmFtZSB0eXBlb2YgJHtxdW90ZSh0eXBlb2YgbmFtZSl9YDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZ2V0RXJyb3JDb25zdHJ1Y3RvcihuYW1lKSAhPT0gdm9pZCAwIHx8IHRocm93UmVkYWN0ZWRgTXVzdCBiZSB0aGUgbmFtZSBvZiBhbiBFcnJvciBjb25zdHJ1Y3RvciAke25hbWV9YDtcbiAgICAgICAgICB0eXBlb2YgbWVzc2FnZSA9PT0gXCJzdHJpbmdcIiB8fCB0aHJvd1JlZGFjdGVkYGludmFsaWQgZXJyb3IgbWVzc2FnZSB0eXBlb2YgJHtxdW90ZSh0eXBlb2YgbWVzc2FnZSl9YDtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIGFzc2VydC5mYWlsKHJlZGFjdGVkYHVucmVjb2duaXplZCAke3F1b3RlKFFDTEFTUyl9ICR7cXVvdGUocWNsYXNzKX1gLCBUeXBlRXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0FycmF5NyhyYXdUcmVlKSkge1xuICAgICAgY29uc3QgeyBsZW5ndGggfSA9IHJhd1RyZWU7XG4gICAgICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgbGVuZ3RoOyBpMyArPSAxKSB7XG4gICAgICAgIHByZXBhcmUocmF3VHJlZVtpM10pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBuYW1lcyA9IG93bktleXMxNChyYXdUcmVlKTtcbiAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBuYW1lcykge1xuICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFByb3BlcnR5IG5hbWUgJHtuYW1lfSBvZiAke3Jhd1RyZWV9IG11c3QgYmUgYSBzdHJpbmdgO1xuICAgICAgICB9XG4gICAgICAgIHByZXBhcmUocmF3VHJlZVtuYW1lXSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBtYWtlSW5kZW50ZXIgPSBzaG91bGRJbmRlbnQgPyBtYWtlWWVzSW5kZW50ZXIgOiBtYWtlTm9JbmRlbnRlcjtcbiAgbGV0IG91dCA9IG1ha2VJbmRlbnRlcigpO1xuICBjb25zdCBkZWNvZGUgPSAocmF3VHJlZSkgPT4ge1xuICAgIHJldHVybiByZWN1cihyYXdUcmVlKTtcbiAgfTtcbiAgY29uc3QgZGVjb2RlUHJvcGVydHkgPSAobmFtZSwgdmFsdWUpID0+IHtcbiAgICBvdXQubGluZSgpO1xuICAgIGlmIChuYW1lID09PSBcIl9fcHJvdG9fX1wiKSB7XG4gICAgICBvdXQubmV4dChgW1wiX19wcm90b19fXCJdOmApO1xuICAgIH0gZWxzZSBpZiAoaWRlbnRQYXR0ZXJuLnRlc3QobmFtZSkpIHtcbiAgICAgIG91dC5uZXh0KGAke25hbWV9OmApO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubmV4dChgJHtxdW90ZTIobmFtZSl9OmApO1xuICAgIH1cbiAgICBkZWNvZGUodmFsdWUpO1xuICAgIG91dC5uZXh0KFwiLFwiKTtcbiAgfTtcbiAgY29uc3QgcmVjdXIgPSAocmF3VHJlZSkgPT4ge1xuICAgIGlmIChpc1ByaW1pdGl2ZTIocmF3VHJlZSkpIHtcbiAgICAgIHJldHVybiBvdXQubmV4dChxdW90ZTIocmF3VHJlZSkpO1xuICAgIH1cbiAgICBhc3NlcnQudHlwZW9mKHJhd1RyZWUsIFwib2JqZWN0XCIpO1xuICAgIGFzc2VydChyYXdUcmVlICE9PSBudWxsKTtcbiAgICBpZiAoUUNMQVNTIGluIHJhd1RyZWUpIHtcbiAgICAgIGNvbnN0IHFjbGFzcyA9IHJhd1RyZWVbUUNMQVNTXTtcbiAgICAgIGFzc2VydC50eXBlb2YocWNsYXNzLCBcInN0cmluZ1wiKTtcbiAgICAgIGFzc2VydCghaXNBcnJheTcocmF3VHJlZSkpO1xuICAgICAgc3dpdGNoIChyYXdUcmVlW1wiQHFjbGFzc1wiXSkge1xuICAgICAgICAvKiBFbmNvZGluZyBvZiBwcmltaXRpdmVzIG5vdCBoYW5kbGVkIGJ5IEpTT04qL1xuICAgICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICAgIGNhc2UgXCJOYU5cIjpcbiAgICAgICAgY2FzZSBcIkluZmluaXR5XCI6XG4gICAgICAgIGNhc2UgXCItSW5maW5pdHlcIjoge1xuICAgICAgICAgIHJldHVybiBvdXQubmV4dChxY2xhc3MpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJiaWdpbnRcIjoge1xuICAgICAgICAgIGNvbnN0IHsgZGlnaXRzIH0gPSByYXdUcmVlO1xuICAgICAgICAgIGFzc2VydC50eXBlb2YoZGlnaXRzLCBcInN0cmluZ1wiKTtcbiAgICAgICAgICByZXR1cm4gb3V0Lm5leHQoYCR7QmlnSW50KGRpZ2l0cyl9bmApO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJAQGFzeW5jSXRlcmF0b3JcIjoge1xuICAgICAgICAgIHJldHVybiBvdXQubmV4dChcIlN5bWJvbC5hc3luY0l0ZXJhdG9yXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJzeW1ib2xcIjoge1xuICAgICAgICAgIGNvbnN0IHsgbmFtZSB9ID0gcmF3VHJlZTtcbiAgICAgICAgICBhc3NlcnQudHlwZW9mKG5hbWUsIFwic3RyaW5nXCIpO1xuICAgICAgICAgIGNvbnN0IHN5bSA9IHBhc3NhYmxlU3ltYm9sRm9yTmFtZShuYW1lKTtcbiAgICAgICAgICBhc3NlcnQudHlwZW9mKHN5bSwgXCJzeW1ib2xcIik7XG4gICAgICAgICAgY29uc3QgcmVnaXN0ZXJlZE5hbWUgPSBuYW1lRm9yUGFzc2FibGVTeW1ib2woc3ltKTtcbiAgICAgICAgICBpZiAocmVnaXN0ZXJlZE5hbWUgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBBdEF0UHJlZml4UGF0dGVybjIuZXhlYyhuYW1lKTtcbiAgICAgICAgICAgIGFzc2VydChtYXRjaCAhPT0gbnVsbCk7XG4gICAgICAgICAgICBjb25zdCBzdWZmaXggPSBtYXRjaFsxXTtcbiAgICAgICAgICAgIGFzc2VydChTeW1ib2xbc3VmZml4XSA9PT0gc3ltKTtcbiAgICAgICAgICAgIGFzc2VydChpZGVudFBhdHRlcm4udGVzdChzdWZmaXgpKTtcbiAgICAgICAgICAgIHJldHVybiBvdXQubmV4dChgU3ltYm9sLiR7c3VmZml4fWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gb3V0Lm5leHQoYHBhc3NhYmxlU3ltYm9sRm9yTmFtZSgke3F1b3RlMihyZWdpc3RlcmVkTmFtZSl9KWApO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJ0YWdnZWRcIjoge1xuICAgICAgICAgIGNvbnN0IHsgdGFnLCBwYXlsb2FkIH0gPSByYXdUcmVlO1xuICAgICAgICAgIG91dC5uZXh0KGBtYWtlVGFnZ2VkKCR7cXVvdGUyKHRhZyl9YCk7XG4gICAgICAgICAgb3V0Lm5leHQoXCIsXCIpO1xuICAgICAgICAgIGRlY29kZShwYXlsb2FkKTtcbiAgICAgICAgICByZXR1cm4gb3V0Lm5leHQoXCIpXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJzbG90XCI6IHtcbiAgICAgICAgICBjb25zdCB7IGlmYWNlIH0gPSByYXdUcmVlO1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gTnVtYmVyKE5hdChyYXdUcmVlLmluZGV4KSk7XG4gICAgICAgICAgY29uc3QgbmVzdGVkUmVuZGVyID0gKGFyZykgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb2xkT3V0ID0gb3V0O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgb3V0ID0gbWFrZU5vSW5kZW50ZXIoKTtcbiAgICAgICAgICAgICAgZGVjb2RlKGFyZyk7XG4gICAgICAgICAgICAgIHJldHVybiBvdXQuZG9uZSgpO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgb3V0ID0gb2xkT3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKGluZGV4IDwgc2xvdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCByZW5kZXJlZFNsb3QgPSBuZXN0ZWRSZW5kZXIoc2xvdHNbaW5kZXhdKTtcbiAgICAgICAgICAgIHJldHVybiBpZmFjZSA9PT0gdm9pZCAwID8gb3V0Lm5leHQoYHNsb3RUb1ZhbCgke3JlbmRlcmVkU2xvdH0pYCkgOiBvdXQubmV4dChgc2xvdFRvVmFsKCR7cmVuZGVyZWRTbG90fSwke25lc3RlZFJlbmRlcihpZmFjZSl9KWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaWZhY2UgPT09IHZvaWQgMCA/IG91dC5uZXh0KGBzbG90KCR7aW5kZXh9KWApIDogb3V0Lm5leHQoYHNsb3QoJHtpbmRleH0sJHtuZXN0ZWRSZW5kZXIoaWZhY2UpfSlgKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiaGlsYmVydFwiOiB7XG4gICAgICAgICAgY29uc3QgeyBvcmlnaW5hbCwgcmVzdCB9ID0gcmF3VHJlZTtcbiAgICAgICAgICBvdXQub3BlbihcIntcIik7XG4gICAgICAgICAgZGVjb2RlUHJvcGVydHkoUUNMQVNTLCBvcmlnaW5hbCk7XG4gICAgICAgICAgaWYgKFwicmVzdFwiIGluIHJhd1RyZWUpIHtcbiAgICAgICAgICAgIGFzc2VydC50eXBlb2YocmVzdCwgXCJvYmplY3RcIik7XG4gICAgICAgICAgICBhc3NlcnQocmVzdCAhPT0gbnVsbCk7XG4gICAgICAgICAgICBjb25zdCBuYW1lcyA9IG93bktleXMxNChyZXN0KTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBuYW1lcykge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFByb3BlcnR5IG5hbWUgJHtxdW90ZShcbiAgICAgICAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgICAgICApfSBvZiAke3Jlc3R9IG11c3QgYmUgYSBzdHJpbmdgO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGRlY29kZVByb3BlcnR5KG5hbWUsIHJlc3RbbmFtZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gb3V0LmNsb3NlKFwifVwiKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiZXJyb3JcIjoge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgY2F1c2UgPSB2b2lkIDAsXG4gICAgICAgICAgICBlcnJvcnMgPSB2b2lkIDBcbiAgICAgICAgICB9ID0gcmF3VHJlZTtcbiAgICAgICAgICBjYXVzZSA9PT0gdm9pZCAwIHx8IHRocm93UmVkYWN0ZWRgZXJyb3IgY2F1c2Ugbm90IHlldCBpbXBsZW1lbnRlZCBpbiBtYXJzaGFsLWp1c3RpbmA7XG4gICAgICAgICAgbmFtZSAhPT0gYEFnZ3JlZ2F0ZUVycm9yYCB8fCB0aHJvd1JlZGFjdGVkYEFnZ3JlZ2F0ZUVycm9yIG5vdCB5ZXQgaW1wbGVtZW50ZWQgaW4gbWFyc2hhbC1qdXN0aW5gO1xuICAgICAgICAgIGVycm9ycyA9PT0gdm9pZCAwIHx8IHRocm93UmVkYWN0ZWRgZXJyb3IgZXJyb3JzIG5vdCB5ZXQgaW1wbGVtZW50ZWQgaW4gbWFyc2hhbC1qdXN0aW5gO1xuICAgICAgICAgIHJldHVybiBvdXQubmV4dChgJHtuYW1lfSgke3F1b3RlMihtZXNzYWdlKX0pYCk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIHRocm93IGFzc2VydC5mYWlsKFxuICAgICAgICAgICAgcmVkYWN0ZWRgdW5yZWNvZ25pemVkICR7cXVvdGUoUUNMQVNTKX0gJHtxdW90ZShxY2xhc3MpfWAsXG4gICAgICAgICAgICBUeXBlRXJyb3JcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0FycmF5NyhyYXdUcmVlKSkge1xuICAgICAgY29uc3QgeyBsZW5ndGggfSA9IHJhd1RyZWU7XG4gICAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBvdXQubmV4dChcIltdXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0Lm9wZW4oXCJbXCIpO1xuICAgICAgICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgbGVuZ3RoOyBpMyArPSAxKSB7XG4gICAgICAgICAgb3V0LmxpbmUoKTtcbiAgICAgICAgICBkZWNvZGUocmF3VHJlZVtpM10pO1xuICAgICAgICAgIG91dC5uZXh0KFwiLFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0LmNsb3NlKFwiXVwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbmFtZXMgPSAoXG4gICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nW119ICovXG4gICAgICAgIG93bktleXMxNChyYXdUcmVlKVxuICAgICAgKTtcbiAgICAgIGlmIChuYW1lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG91dC5uZXh0KFwie31cIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQub3BlbihcIntcIik7XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBuYW1lcykge1xuICAgICAgICAgIGRlY29kZVByb3BlcnR5KG5hbWUsIHJhd1RyZWVbbmFtZV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQuY2xvc2UoXCJ9XCIpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcHJlcGFyZShlbmNvZGluZyk7XG4gIGRlY29kZShlbmNvZGluZyk7XG4gIHJldHVybiBvdXQuZG9uZSgpO1xufTtcbmhhcmRlbihkZWNvZGVUb0p1c3Rpbik7XG52YXIgcGFzc2FibGVBc0p1c3RpbiA9IChwYXNzYWJsZSwgc2hvdWxkSW5kZW50ID0gdHJ1ZSkgPT4ge1xuICBsZXQgc2xvdENvdW50ID0gMDtcbiAgY29uc3QgY29udmVydFZhbFRvU2xvdCA9ICh2YWwpID0+IGBzJHtzbG90Q291bnQrK31gO1xuICBjb25zdCB7IHRvQ2FwRGF0YTogdG9DYXBEYXRhMiB9ID0gbWFrZU1hcnNoYWwoY29udmVydFZhbFRvU2xvdCk7XG4gIGNvbnN0IHsgYm9keSwgc2xvdHMgfSA9IHRvQ2FwRGF0YTIocGFzc2FibGUpO1xuICBjb25zdCBlbmNvZGVkID0gSlNPTi5wYXJzZShib2R5KTtcbiAgcmV0dXJuIGRlY29kZVRvSnVzdGluKGVuY29kZWQsIHNob3VsZEluZGVudCwgc2xvdHMpO1xufTtcbmhhcmRlbihwYXNzYWJsZUFzSnVzdGluKTtcbnZhciBxcCA9IChwYXlsb2FkKSA9PiBgXFxgJHtwYXNzYWJsZUFzSnVzdGluKGhhcmRlbihwYXlsb2FkKSwgdHJ1ZSl9XFxgYDtcbmhhcmRlbihxcCk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9tYXJzaGFsL3NyYy9lbmNvZGVQYXNzYWJsZS5qcyovXG52YXIgeyBpc0FycmF5OiBpc0FycmF5OCB9ID0gQXJyYXk7XG52YXIgeyBmcm9tRW50cmllczogZnJvbUVudHJpZXM1LCBpczogaXMzIH0gPSBPYmplY3Q7XG52YXIgeyBvd25LZXlzOiBvd25LZXlzMTUgfSA9IFJlZmxlY3Q7XG52YXIgckMwID0gL1tcXHgwMC1cXHgxRl0vO1xudmFyIGdldFN1ZmZpeCA9IChzdHIsIGluZGV4KSA9PiBpbmRleCA9PT0gMCA/IHN0ciA6IHN0ci5zdWJzdHJpbmcoaW5kZXgpO1xudmFyIHJlY29yZE5hbWVzID0gKHJlY29yZCkgPT4gKFxuICAvKiBodHRwczovL2dpdGh1Yi5jb20vZW5kb2pzL2VuZG8vcHVsbC8xMjYwI2Rpc2N1c3Npb25fcjEwMDM2NTcyNDQqL1xuICAvKiBjb21wYXJlcyB0d28gd2F5cyBvZiByZXZlcnNlIHNvcnRpbmcsIGFuZCBzaG93cyB0aGF0IGAuc29ydCgpLnJldmVyc2UoKWAqL1xuICAvKiBpcyBjdXJyZW50bHkgZmFzdGVyIG9uIE1vZGRhYmxlIFhTLCB3aGlsZSB0aGUgb3RoZXIgd2F5LCovXG4gIC8qIGAuc29ydChyZXZlcnNlQ29tcGFyYXRvcilgLCBpcyBmYXN0ZXIgb24gdjguIFdlIGN1cnJlbnRseSBjYXJlIG1vcmUgYWJvdXQqL1xuICAvKiBYUyBwZXJmb3JtYW5jZSwgc28gd2UgcmV2ZXJzZSBzb3J0IHVzaW5nIGAuc29ydCgpLnJldmVyc2UoKWAuKi9cbiAgaGFyZGVuKFxuICAgIC8qKiBAdHlwZSB7c3RyaW5nW119ICovXG4gICAgb3duS2V5czE1KHJlY29yZCkuc29ydCgpLnJldmVyc2UoKVxuICApXG4pO1xuaGFyZGVuKHJlY29yZE5hbWVzKTtcbnZhciByZWNvcmRWYWx1ZXMgPSAocmVjb3JkLCBuYW1lcykgPT4gaGFyZGVuKG5hbWVzLm1hcCgobmFtZSkgPT4gcmVjb3JkW25hbWVdKSk7XG5oYXJkZW4ocmVjb3JkVmFsdWVzKTtcbnZhciB6ZXJvZXMgPSBBcnJheSgxNikuZmlsbCh2b2lkIDApLm1hcCgoXywgaTMpID0+IFwiMFwiLnJlcGVhdChpMykpO1xudmFyIHplcm9QYWQgPSAobjIsIHNpemUpID0+IHtcbiAgY29uc3QgblN0ciA9IGAke24yfWA7XG4gIGNvbnN0IGZpbGxMZW4gPSBzaXplIC0gblN0ci5sZW5ndGg7XG4gIGlmIChmaWxsTGVuID09PSAwKSByZXR1cm4gblN0cjtcbiAgYXNzZXJ0KGZpbGxMZW4gPiAwICYmIGZpbGxMZW4gPCB6ZXJvZXMubGVuZ3RoKTtcbiAgcmV0dXJuIGAke3plcm9lc1tmaWxsTGVuXX0ke25TdHJ9YDtcbn07XG5oYXJkZW4oemVyb1BhZCk7XG52YXIgYXNOdW1iZXIgPSBuZXcgRmxvYXQ2NEFycmF5KDEpO1xudmFyIGFzQml0cyA9IG5ldyBCaWdVaW50NjRBcnJheShhc051bWJlci5idWZmZXIpO1xudmFyIENhbm9uaWNhbE5hTkJpdHMgPSBcImZmZjgwMDAwMDAwMDAwMDBcIjtcbnZhciBlbmNvZGVCaW5hcnk2NCA9IChuMikgPT4ge1xuICBpZiAoaXMzKG4yLCAtMCkpIHtcbiAgICBuMiA9IDA7XG4gIH0gZWxzZSBpZiAoaXMzKG4yLCBOYU4pKSB7XG4gICAgcmV0dXJuIGBmJHtDYW5vbmljYWxOYU5CaXRzfWA7XG4gIH1cbiAgYXNOdW1iZXJbMF0gPSBuMjtcbiAgbGV0IGJpdHMgPSBhc0JpdHNbMF07XG4gIGlmIChuMiA8IDApIHtcbiAgICBiaXRzIF49IDB4ZmZmZmZmZmZmZmZmZmZmZm47XG4gIH0gZWxzZSB7XG4gICAgYml0cyBePSAweDgwMDAwMDAwMDAwMDAwMDBuO1xuICB9XG4gIHJldHVybiBgZiR7emVyb1BhZChiaXRzLnRvU3RyaW5nKDE2KSwgMTYpfWA7XG59O1xudmFyIGRlY29kZUJpbmFyeTY0ID0gKGVuY29kZWQsIHNraXAgPSAwKSA9PiB7XG4gIGVuY29kZWQuY2hhckF0KHNraXApID09PSBcImZcIiB8fCB0aHJvd1JlZGFjdGVkYEVuY29kZWQgbnVtYmVyIGV4cGVjdGVkOiAke2VuY29kZWR9YDtcbiAgbGV0IGJpdHMgPSBCaWdJbnQoYDB4JHtnZXRTdWZmaXgoZW5jb2RlZCwgc2tpcCArIDEpfWApO1xuICBpZiAoZW5jb2RlZC5jaGFyQXQoc2tpcCArIDEpIDwgXCI4XCIpIHtcbiAgICBiaXRzIF49IDB4ZmZmZmZmZmZmZmZmZmZmZm47XG4gIH0gZWxzZSB7XG4gICAgYml0cyBePSAweDgwMDAwMDAwMDAwMDAwMDBuO1xuICB9XG4gIGFzQml0c1swXSA9IGJpdHM7XG4gIGNvbnN0IHJlc3VsdCA9IGFzTnVtYmVyWzBdO1xuICAhaXMzKHJlc3VsdCwgLTApIHx8IHRocm93UmVkYWN0ZWRgVW5leHBlY3RlZCBuZWdhdGl2ZSB6ZXJvOiAke2dldFN1ZmZpeChlbmNvZGVkLCBza2lwKX1gO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBlbmNvZGVCaWdJbnQgPSAobjIpID0+IHtcbiAgY29uc3QgYWJzID0gbjIgPCAwbiA/IC1uMiA6IG4yO1xuICBjb25zdCBuRGlnaXRzID0gYWJzLnRvU3RyaW5nKCkubGVuZ3RoO1xuICBjb25zdCBsRGlnaXRzID0gbkRpZ2l0cy50b1N0cmluZygpLmxlbmd0aDtcbiAgaWYgKG4yIDwgMG4pIHtcbiAgICByZXR1cm4gYG4key8qIEEgXCIjXCIgZm9yIGVhY2ggZGlnaXQgYmV5b25kIHRoZSBmaXJzdCovXG4gICAgLyogaW4gdGhlIGRlY2ltYWwgKmNvdW50KiBvZiBkZWNpbWFsIGRpZ2l0cy4qL1xuICAgIFwiI1wiLnJlcGVhdChsRGlnaXRzIC0gMSl9JHsvKiBUaGUgdGVuJ3MgY29tcGxlbWVudCBvZiB0aGUgY291bnQgb2YgZGlnaXRzLiovXG4gICAgKDEwICoqIGxEaWdpdHMgLSBuRGlnaXRzKS50b1N0cmluZygpLnBhZFN0YXJ0KGxEaWdpdHMsIFwiMFwiKX06JHsvKiBUaGUgdGVuJ3MgY29tcGxlbWVudCBvZiB0aGUgZGlnaXRzLiovXG4gICAgKDEwbiAqKiBCaWdJbnQobkRpZ2l0cykgKyBuMikudG9TdHJpbmcoKS5wYWRTdGFydChuRGlnaXRzLCBcIjBcIil9YDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYHAkey8qIEEgXCJ+XCIgZm9yIGVhY2ggZGlnaXQgYmV5b25kIHRoZSBmaXJzdCovXG4gICAgLyogaW4gdGhlIGRlY2ltYWwgKmNvdW50KiBvZiBkZWNpbWFsIGRpZ2l0cy4qL1xuICAgIFwiflwiLnJlcGVhdChsRGlnaXRzIC0gMSl9JHsvKiBUaGUgY291bnQgb2YgZGlnaXRzLiovXG4gICAgbkRpZ2l0c306JHsvKiBUaGUgZGlnaXRzLiovXG4gICAgbjJ9YDtcbiAgfVxufTtcbnZhciByQmlnSW50UGF5bG9hZCA9IC8oWzAtOV0rKSg6KFswLTldKyR8KXwpL3M7XG52YXIgZGVjb2RlQmlnSW50ID0gKGVuY29kZWQpID0+IHtcbiAgY29uc3QgdHlwZVByZWZpeCA9IGVuY29kZWQuY2hhckF0KDApO1xuICB0eXBlUHJlZml4ID09PSBcInBcIiB8fCB0eXBlUHJlZml4ID09PSBcIm5cIiB8fCB0aHJvd1JlZGFjdGVkYEVuY29kZWQgYmlnaW50IGV4cGVjdGVkOiAke2VuY29kZWR9YDtcbiAgY29uc3Qge1xuICAgIGluZGV4OiBsRGlnaXRzLFxuICAgIDE6IHNuRGlnaXRzLFxuICAgIDI6IHRhaWwsXG4gICAgMzogZGlnaXRzXG4gIH0gPSBlbmNvZGVkLm1hdGNoKHJCaWdJbnRQYXlsb2FkKSB8fCB0aHJvd1JlZGFjdGVkYERpZ2l0IGNvdW50IGV4cGVjdGVkOiAke2VuY29kZWR9YDtcbiAgc25EaWdpdHMubGVuZ3RoID09PSBsRGlnaXRzIHx8IHRocm93UmVkYWN0ZWRgVW5hcnktcHJlZml4ZWQgZGVjaW1hbCBkaWdpdCBjb3VudCBleHBlY3RlZDogJHtlbmNvZGVkfWA7XG4gIGxldCBuRGlnaXRzID0gcGFyc2VJbnQoc25EaWdpdHMsIDEwKTtcbiAgaWYgKHR5cGVQcmVmaXggPT09IFwiblwiKSB7XG4gICAgbkRpZ2l0cyA9IDEwICoqIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgIGxEaWdpdHMgLSBuRGlnaXRzO1xuICB9XG4gIHRhaWwuY2hhckF0KDApID09PSBcIjpcIiB8fCB0aHJvd1JlZGFjdGVkYFNlcGFyYXRvciBleHBlY3RlZDogJHtlbmNvZGVkfWA7XG4gIGRpZ2l0cy5sZW5ndGggPT09IG5EaWdpdHMgfHwgdGhyb3dSZWRhY3RlZGBGaXhlZC1sZW5ndGggZGlnaXQgc2VxdWVuY2UgZXhwZWN0ZWQ6ICR7ZW5jb2RlZH1gO1xuICBsZXQgbjIgPSBCaWdJbnQoZGlnaXRzKTtcbiAgaWYgKHR5cGVQcmVmaXggPT09IFwiblwiKSB7XG4gICAgbjIgPSAtKDEwbiAqKiBCaWdJbnQobkRpZ2l0cykgLSBuMik7XG4gIH1cbiAgcmV0dXJuIG4yO1xufTtcbnZhciBzdHJpbmdFc2NhcGVzID0gQXJyYXkoMzQpLmZpbGwodm9pZCAwKS5tYXAoKF8sIGNwKSA9PiB7XG4gIHN3aXRjaCAoU3RyaW5nLmZyb21DaGFyQ29kZShjcCkpIHtcbiAgICBjYXNlIFwiIFwiOlxuICAgICAgcmV0dXJuIFwiIV9cIjtcbiAgICBjYXNlIFwiIVwiOlxuICAgICAgcmV0dXJuIFwiIXxcIjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGAhJHtTdHJpbmcuZnJvbUNoYXJDb2RlKGNwICsgMzMpfWA7XG4gIH1cbn0pO1xuc3RyaW5nRXNjYXBlc1tcIl5cIi5jaGFyQ29kZUF0KDApXSA9IFwiX0BcIjtcbnN0cmluZ0VzY2FwZXNbXCJfXCIuY2hhckNvZGVBdCgwKV0gPSBcIl9fXCI7XG52YXIgZW5jb2RlQ29tcGFjdFN0cmluZ1N1ZmZpeCA9IChzdHIpID0+IHN0ci5yZXBsYWNlKC9bXFwwLSFeX10vZywgKGNoKSA9PiBzdHJpbmdFc2NhcGVzW2NoLmNoYXJDb2RlQXQoMCldKTtcbnZhciBkZWNvZGVDb21wYWN0U3RyaW5nU3VmZml4ID0gKGVuY29kZWQpID0+IHtcbiAgcmV0dXJuIGVuY29kZWQucmVwbGFjZSgvKFtcXDAtIV9dKSgufFxcbik/L2csIChlc2MsIHByZWZpeCwgc3VmZml4KSA9PiB7XG4gICAgc3dpdGNoIChlc2MpIHtcbiAgICAgIGNhc2UgXCIhX1wiOlxuICAgICAgICByZXR1cm4gXCIgXCI7XG4gICAgICBjYXNlIFwiIXxcIjpcbiAgICAgICAgcmV0dXJuIFwiIVwiO1xuICAgICAgY2FzZSBcIl9AXCI6XG4gICAgICAgIHJldHVybiBcIl5cIjtcbiAgICAgIGNhc2UgXCJfX1wiOlxuICAgICAgICByZXR1cm4gXCJfXCI7XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGNvbnN0IGNoID0gKFxuICAgICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgICAgICAgIHN1ZmZpeFxuICAgICAgICApO1xuICAgICAgICBwcmVmaXggPT09IFwiIVwiICYmIHN1ZmZpeCAhPT0gdm9pZCAwICYmIGNoID49IFwiIVwiICYmIGNoIDw9IFwiQFwiIHx8IHRocm93UmVkYWN0ZWRgaW52YWxpZCBzdHJpbmcgZXNjYXBlOiAke3F1b3RlKGVzYyl9YDtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY2guY2hhckNvZGVBdCgwKSAtIDMzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcbnZhciBlbmNvZGVMZWdhY3lTdHJpbmdTdWZmaXggPSAoc3RyKSA9PiBzdHI7XG52YXIgZGVjb2RlTGVnYWN5U3RyaW5nU3VmZml4ID0gKGVuY29kZWQpID0+IGVuY29kZWQ7XG52YXIgZW5jb2RlQ29tcGFjdEFycmF5ID0gKGFycmF5LCBlbmNvZGVQYXNzYWJsZSkgPT4ge1xuICBjb25zdCBjaGFycyA9IFtcIl5cIl07XG4gIGZvciAoY29uc3QgZWxlbWVudCBvZiBhcnJheSkge1xuICAgIGNvbnN0IGVuYyA9IGVuY29kZVBhc3NhYmxlKGVsZW1lbnQpO1xuICAgIGNoYXJzLnB1c2goZW5jLCBcIiBcIik7XG4gIH1cbiAgcmV0dXJuIGNoYXJzLmpvaW4oXCJcIik7XG59O1xudmFyIGRlY29kZUNvbXBhY3RBcnJheSA9IChlbmNvZGVkLCBkZWNvZGVQYXNzYWJsZSwgc2tpcCA9IDApID0+IHtcbiAgY29uc3QgZWxlbWVudHMgPSBbXTtcbiAgbGV0IGRlcHRoID0gMDtcbiAgbGV0IG5leHRJbmRleCA9IHNraXAgKyAxO1xuICBsZXQgY3VycmVudEVsZW1lbnRTdGFydCA9IHNraXAgKyAxO1xuICBmb3IgKGNvbnN0IHsgMDogY2gsIGluZGV4OiBpMyB9IG9mIGVuY29kZWQubWF0Y2hBbGwoL1tcXF4gXS9nKSkge1xuICAgIGNvbnN0IGluZGV4ID0gKFxuICAgICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgICBpM1xuICAgICk7XG4gICAgaWYgKGluZGV4IDw9IHNraXApIHtcbiAgICAgIGlmIChpbmRleCA9PT0gc2tpcCkge1xuICAgICAgICBjaCA9PT0gXCJeXCIgfHwgdGhyb3dSZWRhY3RlZGBFbmNvZGVkIGFycmF5IGV4cGVjdGVkOiAke2dldFN1ZmZpeChlbmNvZGVkLCBza2lwKX1gO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2ggPT09IFwiXlwiKSB7XG4gICAgICBkZXB0aCArPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaW5kZXggPT09IG5leHRJbmRleCkge1xuICAgICAgICBkZXB0aCAtPSAxO1xuICAgICAgICBkZXB0aCA+PSAwIHx8IC8qIHByZXR0aWVyLWlnbm9yZSovXG4gICAgICAgIHRocm93UmVkYWN0ZWRgdW5leHBlY3RlZCBhcnJheSBlbGVtZW50IHRlcm1pbmF0b3I6ICR7ZW5jb2RlZC5zbGljZShza2lwLCBpbmRleCArIDIpfWA7XG4gICAgICB9XG4gICAgICBpZiAoZGVwdGggPT09IDApIHtcbiAgICAgICAgZWxlbWVudHMucHVzaChcbiAgICAgICAgICBkZWNvZGVQYXNzYWJsZShlbmNvZGVkLnNsaWNlKGN1cnJlbnRFbGVtZW50U3RhcnQsIGluZGV4KSlcbiAgICAgICAgKTtcbiAgICAgICAgY3VycmVudEVsZW1lbnRTdGFydCA9IGluZGV4ICsgMTtcbiAgICAgIH1cbiAgICB9XG4gICAgbmV4dEluZGV4ID0gaW5kZXggKyAxO1xuICB9XG4gIGRlcHRoID09PSAwIHx8IHRocm93UmVkYWN0ZWRgdW50ZXJtaW5hdGVkIGFycmF5OiAke2dldFN1ZmZpeChlbmNvZGVkLCBza2lwKX1gO1xuICBuZXh0SW5kZXggPT09IGVuY29kZWQubGVuZ3RoIHx8IHRocm93UmVkYWN0ZWRgdW50ZXJtaW5hdGVkIGFycmF5IGVsZW1lbnQ6ICR7Z2V0U3VmZml4KFxuICAgIGVuY29kZWQsXG4gICAgY3VycmVudEVsZW1lbnRTdGFydFxuICApfWA7XG4gIHJldHVybiBoYXJkZW4oZWxlbWVudHMpO1xufTtcbnZhciBlbmNvZGVMZWdhY3lBcnJheSA9IChhcnJheSwgZW5jb2RlUGFzc2FibGUpID0+IHtcbiAgY29uc3QgY2hhcnMgPSBbXCJbXCJdO1xuICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgYXJyYXkpIHtcbiAgICBjb25zdCBlbmMgPSBlbmNvZGVQYXNzYWJsZShlbGVtZW50KTtcbiAgICBmb3IgKGNvbnN0IGMyIG9mIGVuYykge1xuICAgICAgaWYgKGMyID09PSBcIlxcMFwiIHx8IGMyID09PSBcIlx1MDAwMVwiKSB7XG4gICAgICAgIGNoYXJzLnB1c2goXCJcdTAwMDFcIik7XG4gICAgICB9XG4gICAgICBjaGFycy5wdXNoKGMyKTtcbiAgICB9XG4gICAgY2hhcnMucHVzaChcIlxcMFwiKTtcbiAgfVxuICByZXR1cm4gY2hhcnMuam9pbihcIlwiKTtcbn07XG52YXIgZGVjb2RlTGVnYWN5QXJyYXkgPSAoZW5jb2RlZCwgZGVjb2RlUGFzc2FibGUsIHNraXAgPSAwKSA9PiB7XG4gIGNvbnN0IGVsZW1lbnRzID0gW107XG4gIGNvbnN0IGVsZW1DaGFycyA9IFtdO1xuICBsZXQgc3RpbGxUb1NraXAgPSBza2lwICsgMTtcbiAgbGV0IGluRXNjYXBlID0gZmFsc2U7XG4gIGZvciAoY29uc3QgYzIgb2YgZW5jb2RlZCkge1xuICAgIGlmIChzdGlsbFRvU2tpcCA+IDApIHtcbiAgICAgIHN0aWxsVG9Ta2lwIC09IDE7XG4gICAgICBpZiAoc3RpbGxUb1NraXAgPT09IDApIHtcbiAgICAgICAgYzIgPT09IFwiW1wiIHx8IHRocm93UmVkYWN0ZWRgRW5jb2RlZCBhcnJheSBleHBlY3RlZDogJHtnZXRTdWZmaXgoZW5jb2RlZCwgc2tpcCl9YDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGluRXNjYXBlKSB7XG4gICAgICBjMiA9PT0gXCJcXDBcIiB8fCBjMiA9PT0gXCJcdTAwMDFcIiB8fCB0aHJvd1JlZGFjdGVkYFVuZXhwZWN0ZWQgY2hhcmFjdGVyIGFmdGVyIHUwMDAxIGVzY2FwZTogJHtjMn1gO1xuICAgICAgZWxlbUNoYXJzLnB1c2goYzIpO1xuICAgIH0gZWxzZSBpZiAoYzIgPT09IFwiXFwwXCIpIHtcbiAgICAgIGNvbnN0IGVuY29kZWRFbGVtZW50ID0gZWxlbUNoYXJzLmpvaW4oXCJcIik7XG4gICAgICBlbGVtQ2hhcnMubGVuZ3RoID0gMDtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBkZWNvZGVQYXNzYWJsZShlbmNvZGVkRWxlbWVudCk7XG4gICAgICBlbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgIH0gZWxzZSBpZiAoYzIgPT09IFwiXHUwMDAxXCIpIHtcbiAgICAgIGluRXNjYXBlID0gdHJ1ZTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtQ2hhcnMucHVzaChjMik7XG4gICAgfVxuICAgIGluRXNjYXBlID0gZmFsc2U7XG4gIH1cbiAgIWluRXNjYXBlIHx8IHRocm93UmVkYWN0ZWRgdW5leHBlY3RlZCBlbmQgb2YgZW5jb2RpbmcgJHtnZXRTdWZmaXgoZW5jb2RlZCwgc2tpcCl9YDtcbiAgZWxlbUNoYXJzLmxlbmd0aCA9PT0gMCB8fCB0aHJvd1JlZGFjdGVkYGVuY29kaW5nIHRlcm1pbmF0ZWQgZWFybHk6ICR7Z2V0U3VmZml4KGVuY29kZWQsIHNraXApfWA7XG4gIHJldHVybiBoYXJkZW4oZWxlbWVudHMpO1xufTtcbnZhciBlbmNvZGVCeXRlQXJyYXkgPSAoYnl0ZUFycmF5LCBfZW5jb2RlUGFzc2FibGUpID0+IHtcbiAgdGhyb3dSZWRhY3RlZGBlbmNvZGVQYXNzYWJsZShieXRlQXJyYXkpIG5vdCB5ZXQgaW1wbGVtZW50ZWQ6ICR7Ynl0ZUFycmF5fWA7XG4gIHJldHVybiBcIlwiO1xufTtcbnZhciBlbmNvZGVSZWNvcmQgPSAocmVjb3JkLCBlbmNvZGVBcnJheTIsIGVuY29kZVBhc3NhYmxlKSA9PiB7XG4gIGNvbnN0IG5hbWVzID0gcmVjb3JkTmFtZXMocmVjb3JkKTtcbiAgY29uc3QgdmFsdWVzNyA9IHJlY29yZFZhbHVlcyhyZWNvcmQsIG5hbWVzKTtcbiAgcmV0dXJuIGAoJHtlbmNvZGVBcnJheTIoaGFyZGVuKFtuYW1lcywgdmFsdWVzN10pLCBlbmNvZGVQYXNzYWJsZSl9YDtcbn07XG52YXIgZGVjb2RlUmVjb3JkID0gKGVuY29kZWQsIGRlY29kZUFycmF5MiwgZGVjb2RlUGFzc2FibGUsIHNraXAgPSAwKSA9PiB7XG4gIGFzc2VydChlbmNvZGVkLmNoYXJBdChza2lwKSA9PT0gXCIoXCIpO1xuICBjb25zdCB1bnppcHBlZEVudHJpZXMgPSBkZWNvZGVBcnJheTIoZW5jb2RlZCwgZGVjb2RlUGFzc2FibGUsIHNraXAgKyAxKTtcbiAgdW56aXBwZWRFbnRyaWVzLmxlbmd0aCA9PT0gMiB8fCB0aHJvd1JlZGFjdGVkYGV4cGVjdGVkIGtleXMsdmFsdWVzIHBhaXI6ICR7Z2V0U3VmZml4KGVuY29kZWQsIHNraXApfWA7XG4gIGNvbnN0IFtrZXlzOCwgdmFsc10gPSB1bnppcHBlZEVudHJpZXM7XG4gIHBhc3NTdHlsZU9mKGtleXM4KSA9PT0gXCJjb3B5QXJyYXlcIiAmJiBwYXNzU3R5bGVPZih2YWxzKSA9PT0gXCJjb3B5QXJyYXlcIiAmJiBrZXlzOC5sZW5ndGggPT09IHZhbHMubGVuZ3RoICYmIGtleXM4LmV2ZXJ5KChrZXkpID0+IHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIpIHx8IHRocm93UmVkYWN0ZWRgbm90IGEgdmFsaWQgcmVjb3JkIGVuY29kaW5nOiAke2dldFN1ZmZpeChlbmNvZGVkLCBza2lwKX1gO1xuICBjb25zdCBtYXBFbnRyaWVzID0ga2V5czgubWFwKChrZXksIGkzKSA9PiBba2V5LCB2YWxzW2kzXV0pO1xuICBjb25zdCByZWNvcmQgPSBoYXJkZW4oZnJvbUVudHJpZXM1KG1hcEVudHJpZXMpKTtcbiAgYXNzZXJ0UmVjb3JkKHJlY29yZCwgXCJkZWNvZGVkIHJlY29yZFwiKTtcbiAgcmV0dXJuIHJlY29yZDtcbn07XG52YXIgZW5jb2RlVGFnZ2VkID0gKHRhZ2dlZCwgZW5jb2RlQXJyYXkyLCBlbmNvZGVQYXNzYWJsZSkgPT4gYDoke2VuY29kZUFycmF5MihoYXJkZW4oW2dldFRhZyh0YWdnZWQpLCB0YWdnZWQucGF5bG9hZF0pLCBlbmNvZGVQYXNzYWJsZSl9YDtcbnZhciBkZWNvZGVUYWdnZWQgPSAoZW5jb2RlZCwgZGVjb2RlQXJyYXkyLCBkZWNvZGVQYXNzYWJsZSwgc2tpcCA9IDApID0+IHtcbiAgYXNzZXJ0KGVuY29kZWQuY2hhckF0KHNraXApID09PSBcIjpcIik7XG4gIGNvbnN0IHRhZ2dlZFBheWxvYWQgPSBkZWNvZGVBcnJheTIoZW5jb2RlZCwgZGVjb2RlUGFzc2FibGUsIHNraXAgKyAxKTtcbiAgdGFnZ2VkUGF5bG9hZC5sZW5ndGggPT09IDIgfHwgdGhyb3dSZWRhY3RlZGBleHBlY3RlZCB0YWcscGF5bG9hZCBwYWlyOiAke2dldFN1ZmZpeChlbmNvZGVkLCBza2lwKX1gO1xuICBjb25zdCBbdGFnLCBwYXlsb2FkXSA9IHRhZ2dlZFBheWxvYWQ7XG4gIHBhc3NTdHlsZU9mKHRhZykgPT09IFwic3RyaW5nXCIgfHwgdGhyb3dSZWRhY3RlZGBub3QgYSB2YWxpZCB0YWdnZWQgZW5jb2Rpbmc6ICR7Z2V0U3VmZml4KGVuY29kZWQsIHNraXApfWA7XG4gIHJldHVybiBtYWtlVGFnZ2VkKHRhZywgcGF5bG9hZCk7XG59O1xudmFyIG1ha2VFbmNvZGVSZW1vdGFibGUgPSAodW5zYWZlRW5jb2RlUmVtb3RhYmxlLCB2ZXJpZnlFbmNvZGluZykgPT4ge1xuICBjb25zdCBlbmNvZGVSZW1vdGFibGUgPSAocjYsIGlubmVyRW5jb2RlKSA9PiB7XG4gICAgY29uc3QgZW5jb2RpbmcgPSB1bnNhZmVFbmNvZGVSZW1vdGFibGUocjYsIGlubmVyRW5jb2RlKTtcbiAgICB0eXBlb2YgZW5jb2RpbmcgPT09IFwic3RyaW5nXCIgJiYgZW5jb2RpbmcuY2hhckF0KDApID09PSBcInJcIiB8fCB0aHJvd1JlZGFjdGVkYFJlbW90YWJsZSBlbmNvZGluZyBtdXN0IHN0YXJ0IHdpdGggXCJyXCI6ICR7ZW5jb2Rpbmd9YDtcbiAgICB2ZXJpZnlFbmNvZGluZyhlbmNvZGluZywgXCJSZW1vdGFibGVcIik7XG4gICAgcmV0dXJuIGVuY29kaW5nO1xuICB9O1xuICByZXR1cm4gZW5jb2RlUmVtb3RhYmxlO1xufTtcbnZhciBtYWtlRW5jb2RlUHJvbWlzZSA9ICh1bnNhZmVFbmNvZGVQcm9taXNlLCB2ZXJpZnlFbmNvZGluZykgPT4ge1xuICBjb25zdCBlbmNvZGVQcm9taXNlID0gKHAzLCBpbm5lckVuY29kZSkgPT4ge1xuICAgIGNvbnN0IGVuY29kaW5nID0gdW5zYWZlRW5jb2RlUHJvbWlzZShwMywgaW5uZXJFbmNvZGUpO1xuICAgIHR5cGVvZiBlbmNvZGluZyA9PT0gXCJzdHJpbmdcIiAmJiBlbmNvZGluZy5jaGFyQXQoMCkgPT09IFwiP1wiIHx8IHRocm93UmVkYWN0ZWRgUHJvbWlzZSBlbmNvZGluZyBtdXN0IHN0YXJ0IHdpdGggXCI/XCI6ICR7ZW5jb2Rpbmd9YDtcbiAgICB2ZXJpZnlFbmNvZGluZyhlbmNvZGluZywgXCJQcm9taXNlXCIpO1xuICAgIHJldHVybiBlbmNvZGluZztcbiAgfTtcbiAgcmV0dXJuIGVuY29kZVByb21pc2U7XG59O1xudmFyIG1ha2VFbmNvZGVFcnJvciA9ICh1bnNhZmVFbmNvZGVFcnJvciwgdmVyaWZ5RW5jb2RpbmcpID0+IHtcbiAgY29uc3QgZW5jb2RlRXJyb3IgPSAoZXJyLCBpbm5lckVuY29kZSkgPT4ge1xuICAgIGNvbnN0IGVuY29kaW5nID0gdW5zYWZlRW5jb2RlRXJyb3IoZXJyLCBpbm5lckVuY29kZSk7XG4gICAgdHlwZW9mIGVuY29kaW5nID09PSBcInN0cmluZ1wiICYmIGVuY29kaW5nLmNoYXJBdCgwKSA9PT0gXCIhXCIgfHwgdGhyb3dSZWRhY3RlZGBFcnJvciBlbmNvZGluZyBtdXN0IHN0YXJ0IHdpdGggXCIhXCI6ICR7ZW5jb2Rpbmd9YDtcbiAgICB2ZXJpZnlFbmNvZGluZyhlbmNvZGluZywgXCJFcnJvclwiKTtcbiAgICByZXR1cm4gZW5jb2Rpbmc7XG4gIH07XG4gIHJldHVybiBlbmNvZGVFcnJvcjtcbn07XG52YXIgbWFrZUlubmVyRW5jb2RlID0gKGVuY29kZVN0cmluZ1N1ZmZpeCwgZW5jb2RlQXJyYXkyLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBlbmNvZGVSZW1vdGFibGU6IHVuc2FmZUVuY29kZVJlbW90YWJsZSxcbiAgICBlbmNvZGVQcm9taXNlOiB1bnNhZmVFbmNvZGVQcm9taXNlLFxuICAgIGVuY29kZUVycm9yOiB1bnNhZmVFbmNvZGVFcnJvcixcbiAgICB2ZXJpZnlFbmNvZGluZyA9ICgpID0+IHtcbiAgICB9XG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBlbmNvZGVSZW1vdGFibGUgPSBtYWtlRW5jb2RlUmVtb3RhYmxlKFxuICAgIHVuc2FmZUVuY29kZVJlbW90YWJsZSxcbiAgICB2ZXJpZnlFbmNvZGluZ1xuICApO1xuICBjb25zdCBlbmNvZGVQcm9taXNlID0gbWFrZUVuY29kZVByb21pc2UodW5zYWZlRW5jb2RlUHJvbWlzZSwgdmVyaWZ5RW5jb2RpbmcpO1xuICBjb25zdCBlbmNvZGVFcnJvciA9IG1ha2VFbmNvZGVFcnJvcih1bnNhZmVFbmNvZGVFcnJvciwgdmVyaWZ5RW5jb2RpbmcpO1xuICBjb25zdCBpbm5lckVuY29kZSA9IChwYXNzYWJsZSkgPT4ge1xuICAgIGlmIChpc0Vycm9yTGlrZShwYXNzYWJsZSkpIHtcbiAgICAgIHJldHVybiBlbmNvZGVFcnJvcihwYXNzYWJsZSwgaW5uZXJFbmNvZGUpO1xuICAgIH1cbiAgICBjb25zdCBwYXNzU3R5bGUgPSBwYXNzU3R5bGVPZihwYXNzYWJsZSk7XG4gICAgc3dpdGNoIChwYXNzU3R5bGUpIHtcbiAgICAgIGNhc2UgXCJudWxsXCI6IHtcbiAgICAgICAgcmV0dXJuIFwidlwiO1xuICAgICAgfVxuICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOiB7XG4gICAgICAgIHJldHVybiBcInpcIjtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJudW1iZXJcIjoge1xuICAgICAgICByZXR1cm4gZW5jb2RlQmluYXJ5NjQocGFzc2FibGUpO1xuICAgICAgfVxuICAgICAgY2FzZSBcInN0cmluZ1wiOiB7XG4gICAgICAgIHJldHVybiBgcyR7ZW5jb2RlU3RyaW5nU3VmZml4KHBhc3NhYmxlKX1gO1xuICAgICAgfVxuICAgICAgY2FzZSBcImJvb2xlYW5cIjoge1xuICAgICAgICByZXR1cm4gYGIke3Bhc3NhYmxlfWA7XG4gICAgICB9XG4gICAgICBjYXNlIFwiYmlnaW50XCI6IHtcbiAgICAgICAgcmV0dXJuIGVuY29kZUJpZ0ludChwYXNzYWJsZSk7XG4gICAgICB9XG4gICAgICBjYXNlIFwicmVtb3RhYmxlXCI6IHtcbiAgICAgICAgcmV0dXJuIGVuY29kZVJlbW90YWJsZShwYXNzYWJsZSwgaW5uZXJFbmNvZGUpO1xuICAgICAgfVxuICAgICAgY2FzZSBcImVycm9yXCI6IHtcbiAgICAgICAgcmV0dXJuIGVuY29kZUVycm9yKHBhc3NhYmxlLCBpbm5lckVuY29kZSk7XG4gICAgICB9XG4gICAgICBjYXNlIFwicHJvbWlzZVwiOiB7XG4gICAgICAgIHJldHVybiBlbmNvZGVQcm9taXNlKHBhc3NhYmxlLCBpbm5lckVuY29kZSk7XG4gICAgICB9XG4gICAgICBjYXNlIFwic3ltYm9sXCI6IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IG5hbWVGb3JQYXNzYWJsZVN5bWJvbChwYXNzYWJsZSk7XG4gICAgICAgIGFzc2VydC50eXBlb2YobmFtZSwgXCJzdHJpbmdcIik7XG4gICAgICAgIHJldHVybiBgeSR7ZW5jb2RlU3RyaW5nU3VmZml4KG5hbWUpfWA7XG4gICAgICB9XG4gICAgICBjYXNlIFwiY29weUFycmF5XCI6IHtcbiAgICAgICAgcmV0dXJuIGVuY29kZUFycmF5MihwYXNzYWJsZSwgaW5uZXJFbmNvZGUpO1xuICAgICAgfVxuICAgICAgY2FzZSBcImJ5dGVBcnJheVwiOiB7XG4gICAgICAgIHJldHVybiBlbmNvZGVCeXRlQXJyYXkocGFzc2FibGUsIGlubmVyRW5jb2RlKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5UmVjb3JkXCI6IHtcbiAgICAgICAgcmV0dXJuIGVuY29kZVJlY29yZChwYXNzYWJsZSwgZW5jb2RlQXJyYXkyLCBpbm5lckVuY29kZSk7XG4gICAgICB9XG4gICAgICBjYXNlIFwidGFnZ2VkXCI6IHtcbiAgICAgICAgcmV0dXJuIGVuY29kZVRhZ2dlZChwYXNzYWJsZSwgZW5jb2RlQXJyYXkyLCBpbm5lckVuY29kZSk7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgYSAke3F1b3RlKHBhc3NTdHlsZSl9IGNhbm5vdCBiZSB1c2VkIGFzIGEgY29sbGVjdGlvbiBwYXNzYWJsZWA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gaW5uZXJFbmNvZGU7XG59O1xudmFyIGxpYmVyYWxEZWNvZGVycyA9IChcbiAgLyoqIEB0eXBlIHtSZXF1aXJlZDxEZWNvZGVPcHRpb25zPn0gKi9cbiAgLyoqIEB0eXBlIHt1bmtub3dufSAqL1xuICB7XG4gICAgZGVjb2RlUmVtb3RhYmxlOiAoX2VuY29kaW5nLCBfaW5uZXJEZWNvZGUpID0+IHZvaWQgMCxcbiAgICBkZWNvZGVQcm9taXNlOiAoX2VuY29kaW5nLCBfaW5uZXJEZWNvZGUpID0+IHZvaWQgMCxcbiAgICBkZWNvZGVFcnJvcjogKF9lbmNvZGluZywgX2lubmVyRGVjb2RlKSA9PiB2b2lkIDBcbiAgfVxuKTtcbnZhciBtYWtlSW5uZXJEZWNvZGUgPSAoZGVjb2RlU3RyaW5nU3VmZml4LCBkZWNvZGVBcnJheTIsIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgeyBkZWNvZGVSZW1vdGFibGUsIGRlY29kZVByb21pc2UsIGRlY29kZUVycm9yIH0gPSBvcHRpb25zO1xuICBjb25zdCBpbm5lckRlY29kZSA9IChlbmNvZGVkLCBza2lwID0gMCkgPT4ge1xuICAgIHN3aXRjaCAoZW5jb2RlZC5jaGFyQXQoc2tpcCkpIHtcbiAgICAgIGNhc2UgXCJ2XCI6IHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBjYXNlIFwielwiOiB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgICBjYXNlIFwiZlwiOiB7XG4gICAgICAgIHJldHVybiBkZWNvZGVCaW5hcnk2NChlbmNvZGVkLCBza2lwKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJzXCI6IHtcbiAgICAgICAgcmV0dXJuIGRlY29kZVN0cmluZ1N1ZmZpeChnZXRTdWZmaXgoZW5jb2RlZCwgc2tpcCArIDEpKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJiXCI6IHtcbiAgICAgICAgY29uc3Qgc3Vic3RyaW5nID0gZ2V0U3VmZml4KGVuY29kZWQsIHNraXAgKyAxKTtcbiAgICAgICAgaWYgKHN1YnN0cmluZyA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChzdWJzdHJpbmcgPT09IFwiZmFsc2VcIikge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYGV4cGVjdGVkIGVuY29kZWQgYm9vbGVhbiB0byBiZSBcImJ0cnVlXCIgb3IgXCJiZmFsc2VcIjogJHtzdWJzdHJpbmd9YDtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJuXCI6XG4gICAgICBjYXNlIFwicFwiOiB7XG4gICAgICAgIHJldHVybiBkZWNvZGVCaWdJbnQoZ2V0U3VmZml4KGVuY29kZWQsIHNraXApKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJyXCI6IHtcbiAgICAgICAgcmV0dXJuIGRlY29kZVJlbW90YWJsZShnZXRTdWZmaXgoZW5jb2RlZCwgc2tpcCksIGlubmVyRGVjb2RlKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCI/XCI6IHtcbiAgICAgICAgcmV0dXJuIGRlY29kZVByb21pc2UoZ2V0U3VmZml4KGVuY29kZWQsIHNraXApLCBpbm5lckRlY29kZSk7XG4gICAgICB9XG4gICAgICBjYXNlIFwiIVwiOiB7XG4gICAgICAgIHJldHVybiBkZWNvZGVFcnJvcihnZXRTdWZmaXgoZW5jb2RlZCwgc2tpcCksIGlubmVyRGVjb2RlKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJ5XCI6IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGRlY29kZVN0cmluZ1N1ZmZpeChnZXRTdWZmaXgoZW5jb2RlZCwgc2tpcCArIDEpKTtcbiAgICAgICAgcmV0dXJuIHBhc3NhYmxlU3ltYm9sRm9yTmFtZShuYW1lKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJbXCI6XG4gICAgICBjYXNlIFwiXlwiOiB7XG4gICAgICAgIHJldHVybiBkZWNvZGVBcnJheTIoZW5jb2RlZCwgaW5uZXJEZWNvZGUsIHNraXApO1xuICAgICAgfVxuICAgICAgY2FzZSBcIihcIjoge1xuICAgICAgICByZXR1cm4gZGVjb2RlUmVjb3JkKGVuY29kZWQsIGRlY29kZUFycmF5MiwgaW5uZXJEZWNvZGUsIHNraXApO1xuICAgICAgfVxuICAgICAgY2FzZSBcIjpcIjoge1xuICAgICAgICByZXR1cm4gZGVjb2RlVGFnZ2VkKGVuY29kZWQsIGRlY29kZUFycmF5MiwgaW5uZXJEZWNvZGUsIHNraXApO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYGludmFsaWQgZGF0YWJhc2Uga2V5OiAke2dldFN1ZmZpeChlbmNvZGVkLCBza2lwKX1gO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGlubmVyRGVjb2RlO1xufTtcbnZhciBtYWtlUGFzc2FibGVLaXQgPSAob3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IHtcbiAgICBlbmNvZGVSZW1vdGFibGUgPSAocjYsIF8pID0+IHRocm93UmVkYWN0ZWRgcmVtb3RhYmxlIHVuZXhwZWN0ZWQ6ICR7cjZ9YCxcbiAgICBlbmNvZGVQcm9taXNlID0gKHAzLCBfKSA9PiB0aHJvd1JlZGFjdGVkYHByb21pc2UgdW5leHBlY3RlZDogJHtwM31gLFxuICAgIGVuY29kZUVycm9yID0gKGVyciwgXykgPT4gdGhyb3dSZWRhY3RlZGBlcnJvciB1bmV4cGVjdGVkOiAke2Vycn1gLFxuICAgIGZvcm1hdCA9IFwibGVnYWN5T3JkZXJlZFwiLFxuICAgIGRlY29kZVJlbW90YWJsZSA9IChlbmNvZGluZywgXykgPT4gdGhyb3dSZWRhY3RlZGByZW1vdGFibGUgdW5leHBlY3RlZDogJHtlbmNvZGluZ31gLFxuICAgIGRlY29kZVByb21pc2UgPSAoZW5jb2RpbmcsIF8pID0+IHRocm93UmVkYWN0ZWRgcHJvbWlzZSB1bmV4cGVjdGVkOiAke2VuY29kaW5nfWAsXG4gICAgZGVjb2RlRXJyb3IgPSAoZW5jb2RpbmcsIF8pID0+IHRocm93UmVkYWN0ZWRgZXJyb3IgdW5leHBlY3RlZDogJHtlbmNvZGluZ31gXG4gIH0gPSBvcHRpb25zO1xuICBsZXQgZW5jb2RlUGFzc2FibGU7XG4gIGNvbnN0IGVuY29kZU9wdGlvbnMgPSB7IGVuY29kZVJlbW90YWJsZSwgZW5jb2RlUHJvbWlzZSwgZW5jb2RlRXJyb3IsIGZvcm1hdCB9O1xuICBpZiAoZm9ybWF0ID09PSBcImNvbXBhY3RPcmRlcmVkXCIpIHtcbiAgICBjb25zdCBsaWJlcmFsRGVjb2RlID0gbWFrZUlubmVyRGVjb2RlKFxuICAgICAgZGVjb2RlQ29tcGFjdFN0cmluZ1N1ZmZpeCxcbiAgICAgIGRlY29kZUNvbXBhY3RBcnJheSxcbiAgICAgIGxpYmVyYWxEZWNvZGVyc1xuICAgICk7XG4gICAgY29uc3QgdmVyaWZ5RW5jb2RpbmcgPSAoZW5jb2RpbmcsIGxhYmVsKSA9PiB7XG4gICAgICAhZW5jb2RpbmcubWF0Y2gockMwKSB8fCB0aHJvd1JlZGFjdGVkYCR7YmFyZU9yUXVvdGUoXG4gICAgICAgIGxhYmVsXG4gICAgICApfSBlbmNvZGluZyBtdXN0IG5vdCBjb250YWluIGEgQzAgY29udHJvbCBjaGFyYWN0ZXI6ICR7ZW5jb2Rpbmd9YDtcbiAgICAgIGNvbnN0IGRlY29kZWQgPSBkZWNvZGVDb21wYWN0QXJyYXkoYF52ICR7ZW5jb2Rpbmd9IHYgYCwgbGliZXJhbERlY29kZSk7XG4gICAgICBpc0FycmF5OChkZWNvZGVkKSAmJiBkZWNvZGVkLmxlbmd0aCA9PT0gMyAmJiBkZWNvZGVkWzBdID09PSBudWxsICYmIGRlY29kZWRbMl0gPT09IG51bGwgfHwgdGhyb3dSZWRhY3RlZGAke2JhcmVPclF1b3RlKGxhYmVsKX0gZW5jb2RpbmcgbXVzdCBiZSBlbWJlZGRhYmxlOiAke2VuY29kaW5nfWA7XG4gICAgfTtcbiAgICBjb25zdCBlbmNvZGVDb21wYWN0ID0gbWFrZUlubmVyRW5jb2RlKFxuICAgICAgZW5jb2RlQ29tcGFjdFN0cmluZ1N1ZmZpeCxcbiAgICAgIGVuY29kZUNvbXBhY3RBcnJheSxcbiAgICAgIHsgLi4uZW5jb2RlT3B0aW9ucywgdmVyaWZ5RW5jb2RpbmcgfVxuICAgICk7XG4gICAgZW5jb2RlUGFzc2FibGUgPSAocGFzc2FibGUpID0+IGB+JHtlbmNvZGVDb21wYWN0KHBhc3NhYmxlKX1gO1xuICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gXCJsZWdhY3lPcmRlcmVkXCIpIHtcbiAgICBlbmNvZGVQYXNzYWJsZSA9IG1ha2VJbm5lckVuY29kZShcbiAgICAgIGVuY29kZUxlZ2FjeVN0cmluZ1N1ZmZpeCxcbiAgICAgIGVuY29kZUxlZ2FjeUFycmF5LFxuICAgICAgZW5jb2RlT3B0aW9uc1xuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBVbnJlY29nbml6ZWQgZm9ybWF0OiAke3F1b3RlKGZvcm1hdCl9YDtcbiAgfVxuICBjb25zdCBkZWNvZGVPcHRpb25zID0geyBkZWNvZGVSZW1vdGFibGUsIGRlY29kZVByb21pc2UsIGRlY29kZUVycm9yIH07XG4gIGNvbnN0IGRlY29kZUNvbXBhY3QgPSBtYWtlSW5uZXJEZWNvZGUoXG4gICAgZGVjb2RlQ29tcGFjdFN0cmluZ1N1ZmZpeCxcbiAgICBkZWNvZGVDb21wYWN0QXJyYXksXG4gICAgZGVjb2RlT3B0aW9uc1xuICApO1xuICBjb25zdCBkZWNvZGVMZWdhY3kgPSBtYWtlSW5uZXJEZWNvZGUoXG4gICAgZGVjb2RlTGVnYWN5U3RyaW5nU3VmZml4LFxuICAgIGRlY29kZUxlZ2FjeUFycmF5LFxuICAgIGRlY29kZU9wdGlvbnNcbiAgKTtcbiAgY29uc3QgZGVjb2RlUGFzc2FibGUgPSAoZW5jb2RlZCkgPT4ge1xuICAgIGlmIChlbmNvZGVkLmNoYXJBdCgwKSA9PT0gXCJ+XCIpIHtcbiAgICAgIHJldHVybiBkZWNvZGVDb21wYWN0KGVuY29kZWQsIDEpO1xuICAgIH1cbiAgICByZXR1cm4gZGVjb2RlTGVnYWN5KGVuY29kZWQpO1xuICB9O1xuICByZXR1cm4gaGFyZGVuKHsgZW5jb2RlUGFzc2FibGUsIGRlY29kZVBhc3NhYmxlIH0pO1xufTtcbmhhcmRlbihtYWtlUGFzc2FibGVLaXQpO1xudmFyIG1ha2VFbmNvZGVQYXNzYWJsZSA9IChlbmNvZGVPcHRpb25zKSA9PiB7XG4gIGNvbnN0IHsgZW5jb2RlUGFzc2FibGUgfSA9IG1ha2VQYXNzYWJsZUtpdChlbmNvZGVPcHRpb25zKTtcbiAgcmV0dXJuIGVuY29kZVBhc3NhYmxlO1xufTtcbmhhcmRlbihtYWtlRW5jb2RlUGFzc2FibGUpO1xudmFyIG1ha2VEZWNvZGVQYXNzYWJsZSA9IChkZWNvZGVPcHRpb25zKSA9PiB7XG4gIGNvbnN0IHsgZGVjb2RlUGFzc2FibGUgfSA9IG1ha2VQYXNzYWJsZUtpdChkZWNvZGVPcHRpb25zKTtcbiAgcmV0dXJuIGRlY29kZVBhc3NhYmxlO1xufTtcbmhhcmRlbihtYWtlRGVjb2RlUGFzc2FibGUpO1xudmFyIGlzRW5jb2RlZFJlbW90YWJsZSA9IChlbmNvZGVkKSA9PiBlbmNvZGVkLmNoYXJBdCgwKSA9PT0gXCJyXCI7XG5oYXJkZW4oaXNFbmNvZGVkUmVtb3RhYmxlKTtcbnZhciBwYXNzU3R5bGVQcmVmaXhlcyA9IHtcbiAgZXJyb3I6IFwiIVwiLFxuICBjb3B5UmVjb3JkOiBcIihcIixcbiAgdGFnZ2VkOiBcIjpcIixcbiAgcHJvbWlzZTogXCI/XCIsXG4gIGNvcHlBcnJheTogXCJbXlwiLFxuICBieXRlQXJyYXk6IFwiYVwiLFxuICBib29sZWFuOiBcImJcIixcbiAgbnVtYmVyOiBcImZcIixcbiAgYmlnaW50OiBcIm5wXCIsXG4gIHJlbW90YWJsZTogXCJyXCIsXG4gIHN0cmluZzogXCJzXCIsXG4gIG51bGw6IFwidlwiLFxuICBzeW1ib2w6IFwieVwiLFxuICAvKiBCZWNhdXNlIEFycmF5LnByb3RvdHlwZS5zb3J0IHB1dHMgdW5kZWZpbmVkIHZhbHVlcyBhdCB0aGUgZW5kIHdpdGhvdXQqL1xuICAvKiBwYXNzaW5nIHRoZW0gdG8gYSBjb21wYXJpc29uIGZ1bmN0aW9uLCB1bmRlZmluZWQgTVVTVCBiZSB0aGUgbGFzdCovXG4gIC8qIGNhdGVnb3J5LiovXG4gIHVuZGVmaW5lZDogXCJ6XCJcbn07XG5PYmplY3Quc2V0UHJvdG90eXBlT2YocGFzc1N0eWxlUHJlZml4ZXMsIG51bGwpO1xuaGFyZGVuKHBhc3NTdHlsZVByZWZpeGVzKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL21hcnNoYWwvc3JjL3JhbmtPcmRlci5qcyovXG52YXIgeyBpc05hTjogTnVtYmVySXNOYU4gfSA9IE51bWJlcjtcbnZhciB7IGVudHJpZXM6IGVudHJpZXM2LCBmcm9tRW50cmllczogZnJvbUVudHJpZXM2LCBzZXRQcm90b3R5cGVPZjogc2V0UHJvdG90eXBlT2YyLCBpczogaXM0IH0gPSBPYmplY3Q7XG52YXIgRU5ET19SQU5LX1NUUklOR1MgPSBnZXRFbnZpcm9ubWVudE9wdGlvbihcIkVORE9fUkFOS19TVFJJTkdTXCIsIFwidXRmMTYtY29kZS11bml0LW9yZGVyXCIsIFtcbiAgXCJ1bmljb2RlLWNvZGUtcG9pbnQtb3JkZXJcIixcbiAgXCJlcnJvci1pZi1vcmRlci1jaG9pY2UtbWF0dGVyc1wiXG5dKTtcbnZhciBzYW1lVmFsdWVaZXJvID0gKHgsIHkpID0+IHggPT09IHkgfHwgaXM0KHgsIHkpO1xudmFyIHRyaXZpYWxDb21wYXJhdG9yID0gKGxlZnQsIHJpZ2h0KSA9PiAoXG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeSwgQGVuZG8vcmVzdHJpY3QtY29tcGFyaXNvbi1vcGVyYW5kcyovXG4gIGxlZnQgPCByaWdodCA/IC0xIDogbGVmdCA9PT0gcmlnaHQgPyAwIDogMVxuKTtcbmhhcmRlbih0cml2aWFsQ29tcGFyYXRvcik7XG52YXIgY29tcGFyZUJ5Q29kZVBvaW50cyA9IChsZWZ0LCByaWdodCkgPT4ge1xuICBjb25zdCBsZWZ0SXRlciA9IGxlZnRbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICBjb25zdCByaWdodEl0ZXIgPSByaWdodFtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIGZvciAoOyA7ICkge1xuICAgIGNvbnN0IHsgdmFsdWU6IGxlZnRDaGFyIH0gPSBsZWZ0SXRlci5uZXh0KCk7XG4gICAgY29uc3QgeyB2YWx1ZTogcmlnaHRDaGFyIH0gPSByaWdodEl0ZXIubmV4dCgpO1xuICAgIGlmIChsZWZ0Q2hhciA9PT0gdm9pZCAwICYmIHJpZ2h0Q2hhciA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2UgaWYgKGxlZnRDaGFyID09PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9IGVsc2UgaWYgKHJpZ2h0Q2hhciA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgY29uc3QgbGVmdENvZGVwb2ludCA9IChcbiAgICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgICAgbGVmdENoYXIuY29kZVBvaW50QXQoMClcbiAgICApO1xuICAgIGNvbnN0IHJpZ2h0Q29kZXBvaW50ID0gKFxuICAgICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgICByaWdodENoYXIuY29kZVBvaW50QXQoMClcbiAgICApO1xuICAgIGlmIChsZWZ0Q29kZXBvaW50IDwgcmlnaHRDb2RlcG9pbnQpIHJldHVybiAtMTtcbiAgICBpZiAobGVmdENvZGVwb2ludCA+IHJpZ2h0Q29kZXBvaW50KSByZXR1cm4gMTtcbiAgfVxufTtcbmhhcmRlbihjb21wYXJlQnlDb2RlUG9pbnRzKTtcbnZhciBjb21wYXJlTnVtZXJpY3MgPSAobGVmdCwgcmlnaHQpID0+IHtcbiAgaWYgKGxlZnQgPCByaWdodCkgcmV0dXJuIC0xO1xuICBpZiAobGVmdCA+IHJpZ2h0KSByZXR1cm4gMTtcbiAgaWYgKE51bWJlcklzTmFOKGxlZnQpID09PSBOdW1iZXJJc05hTihyaWdodCkpIHJldHVybiAwO1xuICBpZiAoTnVtYmVySXNOYU4ocmlnaHQpKSByZXR1cm4gLTE7XG4gIGFzc2VydChOdW1iZXJJc05hTihsZWZ0KSk7XG4gIHJldHVybiAxO1xufTtcbnZhciBwYXNzU3R5bGVSYW5rcyA9IChcbiAgLyoqIEB0eXBlIHtQYXNzU3R5bGVSYW5rc1JlY29yZH0gKi9cbiAgZnJvbUVudHJpZXM2KFxuICAgIGVudHJpZXM2KHBhc3NTdHlsZVByZWZpeGVzKS5zb3J0KChbX2xlZnRTdHlsZSwgbGVmdFByZWZpeGVzXSwgW19yaWdodFN0eWxlLCByaWdodFByZWZpeGVzXSkgPT4ge1xuICAgICAgcmV0dXJuIHRyaXZpYWxDb21wYXJhdG9yKGxlZnRQcmVmaXhlcywgcmlnaHRQcmVmaXhlcyk7XG4gICAgfSkubWFwKChbcGFzc1N0eWxlLCBwcmVmaXhlc10sIGluZGV4KSA9PiB7XG4gICAgICBwcmVmaXhlcyA9PT0gcHJlZml4ZXMuc3BsaXQoXCJcIikuc29ydCgpLmpvaW4oXCJcIikgfHwgdGhyb3dSZWRhY3RlZGB1bnNvcnRlZCBwcmVmaXhlcyBmb3IgcGFzc1N0eWxlICR7cXVvdGUocGFzc1N0eWxlKX06ICR7cXVvdGUocHJlZml4ZXMpfWA7XG4gICAgICBjb25zdCBjb3ZlciA9IFtcbiAgICAgICAgcHJlZml4ZXMuY2hhckF0KDApLFxuICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKHByZWZpeGVzLmNoYXJDb2RlQXQocHJlZml4ZXMubGVuZ3RoIC0gMSkgKyAxKVxuICAgICAgXTtcbiAgICAgIHJldHVybiBbcGFzc1N0eWxlLCB7IGluZGV4LCBjb3ZlciB9XTtcbiAgICB9KVxuICApXG4pO1xuc2V0UHJvdG90eXBlT2YyKHBhc3NTdHlsZVJhbmtzLCBudWxsKTtcbmhhcmRlbihwYXNzU3R5bGVSYW5rcyk7XG52YXIgZ2V0UGFzc1N0eWxlQ292ZXIgPSAocGFzc1N0eWxlKSA9PiBwYXNzU3R5bGVSYW5rc1twYXNzU3R5bGVdLmNvdmVyO1xuaGFyZGVuKGdldFBhc3NTdHlsZUNvdmVyKTtcbnZhciBtZW1vT2ZTb3J0ZWQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbnZhciBjb21wYXJhdG9yTWlycm9ySW1hZ2VzID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG52YXIgbWFrZUNvbXBhcmF0b3JLaXQgPSAoY29tcGFyZVJlbW90YWJsZXMgPSAoX3gsIF95KSA9PiBOYU4pID0+IHtcbiAgY29uc3QgY29tcGFyYXRvciA9IChsZWZ0LCByaWdodCkgPT4ge1xuICAgIGlmIChzYW1lVmFsdWVaZXJvKGxlZnQsIHJpZ2h0KSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGNvbnN0IGxlZnRTdHlsZSA9IHBhc3NTdHlsZU9mKGxlZnQpO1xuICAgIGNvbnN0IHJpZ2h0U3R5bGUgPSBwYXNzU3R5bGVPZihyaWdodCk7XG4gICAgaWYgKGxlZnRTdHlsZSAhPT0gcmlnaHRTdHlsZSkge1xuICAgICAgcmV0dXJuIGNvbXBhcmVOdW1lcmljcyhcbiAgICAgICAgcGFzc1N0eWxlUmFua3NbbGVmdFN0eWxlXS5pbmRleCxcbiAgICAgICAgcGFzc1N0eWxlUmFua3NbcmlnaHRTdHlsZV0uaW5kZXhcbiAgICAgICk7XG4gICAgfVxuICAgIHN3aXRjaCAobGVmdFN0eWxlKSB7XG4gICAgICBjYXNlIFwicmVtb3RhYmxlXCI6IHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVSZW1vdGFibGVzKGxlZnQsIHJpZ2h0KTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgIGNhc2UgXCJudWxsXCI6XG4gICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgIGNhc2UgXCJwcm9taXNlXCI6IHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgY2FzZSBcImJpZ2ludFwiOiB7XG4gICAgICAgIHJldHVybiB0cml2aWFsQ29tcGFyYXRvcihsZWZ0LCByaWdodCk7XG4gICAgICB9XG4gICAgICBjYXNlIFwic3RyaW5nXCI6IHtcbiAgICAgICAgc3dpdGNoIChFTkRPX1JBTktfU1RSSU5HUykge1xuICAgICAgICAgIGNhc2UgXCJ1dGYxNi1jb2RlLXVuaXQtb3JkZXJcIjoge1xuICAgICAgICAgICAgcmV0dXJuIHRyaXZpYWxDb21wYXJhdG9yKGxlZnQsIHJpZ2h0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcInVuaWNvZGUtY29kZS1wb2ludC1vcmRlclwiOiB7XG4gICAgICAgICAgICByZXR1cm4gY29tcGFyZUJ5Q29kZVBvaW50cyhsZWZ0LCByaWdodCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJlcnJvci1pZi1vcmRlci1jaG9pY2UtbWF0dGVyc1wiOiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQxID0gdHJpdmlhbENvbXBhcmF0b3IobGVmdCwgcmlnaHQpO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0MiA9IGNvbXBhcmVCeUNvZGVQb2ludHMobGVmdCwgcmlnaHQpO1xuICAgICAgICAgICAgcmVzdWx0MSA9PT0gcmVzdWx0MiB8fCB0aHJvd1JlZGFjdGVkYENvbXBhcmlzb25zIGRpZmZlcmVkOiAke2xlZnR9IHZzICR7cmlnaHR9LCAke3F1b3RlKHJlc3VsdDEpfSB2cyAke3F1b3RlKHJlc3VsdDIpfWA7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0MTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBVbmV4cGVjdGVkIEVORE9fUkFOS19TVFJJTkdTICR7cXVvdGUoRU5ET19SQU5LX1NUUklOR1MpfWA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjYXNlIFwic3ltYm9sXCI6IHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmF0b3IoXG4gICAgICAgICAgbmFtZUZvclBhc3NhYmxlU3ltYm9sKGxlZnQpLFxuICAgICAgICAgIG5hbWVGb3JQYXNzYWJsZVN5bWJvbChyaWdodClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJudW1iZXJcIjoge1xuICAgICAgICByZXR1cm4gY29tcGFyZU51bWVyaWNzKGxlZnQsIHJpZ2h0KTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5UmVjb3JkXCI6IHtcbiAgICAgICAgY29uc3QgbGVmdE5hbWVzID0gcmVjb3JkTmFtZXMobGVmdCk7XG4gICAgICAgIGNvbnN0IHJpZ2h0TmFtZXMgPSByZWNvcmROYW1lcyhyaWdodCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbXBhcmF0b3IobGVmdE5hbWVzLCByaWdodE5hbWVzKTtcbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gMCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGVmdFZhbHVlcyA9IHJlY29yZFZhbHVlcyhsZWZ0LCBsZWZ0TmFtZXMpO1xuICAgICAgICBjb25zdCByaWdodFZhbHVlcyA9IHJlY29yZFZhbHVlcyhyaWdodCwgcmlnaHROYW1lcyk7XG4gICAgICAgIHJldHVybiBjb21wYXJhdG9yKGxlZnRWYWx1ZXMsIHJpZ2h0VmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5QXJyYXlcIjoge1xuICAgICAgICBjb25zdCBsZW4gPSBNYXRoLm1pbihsZWZ0Lmxlbmd0aCwgcmlnaHQubGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IGxlbjsgaTMgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbXBhcmF0b3IobGVmdFtpM10sIHJpZ2h0W2kzXSk7XG4gICAgICAgICAgaWYgKHJlc3VsdCAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbXBhcmF0b3IobGVmdC5sZW5ndGgsIHJpZ2h0Lmxlbmd0aCk7XG4gICAgICB9XG4gICAgICBjYXNlIFwiYnl0ZUFycmF5XCI6IHtcbiAgICAgICAgY29uc3QgeyBieXRlTGVuZ3RoOiBsZWZ0TGVuIH0gPSBsZWZ0O1xuICAgICAgICBjb25zdCB7IGJ5dGVMZW5ndGg6IHJpZ2h0TGVuIH0gPSByaWdodDtcbiAgICAgICAgaWYgKGxlZnRMZW4gPCByaWdodExlbikge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVmdExlbiA+IHJpZ2h0TGVuKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGVmdEFycmF5ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGxlZnQpID09PSBBcnJheUJ1ZmZlci5wcm90b3R5cGUgPyBuZXcgVWludDhBcnJheShsZWZ0KSA6IG5ldyBVaW50OEFycmF5KGxlZnQuc2xpY2UoMCkpO1xuICAgICAgICBjb25zdCByaWdodEFycmF5ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHJpZ2h0KSA9PT0gQXJyYXlCdWZmZXIucHJvdG90eXBlID8gbmV3IFVpbnQ4QXJyYXkocmlnaHQpIDogbmV3IFVpbnQ4QXJyYXkocmlnaHQuc2xpY2UoMCkpO1xuICAgICAgICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgbGVmdExlbjsgaTMgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IGxlZnRCeXRlID0gbGVmdEFycmF5W2kzXTtcbiAgICAgICAgICBjb25zdCByaWdodEJ5dGUgPSByaWdodEFycmF5W2kzXTtcbiAgICAgICAgICBpZiAobGVmdEJ5dGUgPCByaWdodEJ5dGUpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGxlZnRCeXRlID4gcmlnaHRCeXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBjYXNlIFwidGFnZ2VkXCI6IHtcbiAgICAgICAgY29uc3QgbGFiZWxDb21wID0gY29tcGFyYXRvcihnZXRUYWcobGVmdCksIGdldFRhZyhyaWdodCkpO1xuICAgICAgICBpZiAobGFiZWxDb21wICE9PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGxhYmVsQ29tcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tcGFyYXRvcihsZWZ0LnBheWxvYWQsIHJpZ2h0LnBheWxvYWQpO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFVucmVjb2duaXplZCBwYXNzU3R5bGU6ICR7cXVvdGUobGVmdFN0eWxlKX1gO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3Qgb3V0ZXJDb21wYXJhdG9yID0gKHgsIHkpID0+IChcbiAgICAvKiBXaGVuIHRoZSBpbm5lciBjb21wYXJhdG9yIHJldHVybnMgTmFOIHRvIGluZGljYXRlIGluY29tcGFyYWJpbGl0eSwqL1xuICAgIC8qIHJlcGxhY2UgdGhhdCB3aXRoIDAgdG8gaW5kaWNhdGUgYSB0aWUuKi9cbiAgICAvKiogQHR5cGUge0V4Y2x1ZGU8UGFydGlhbENvbXBhcmlzb24sIE5hTj59ICovXG4gICAgY29tcGFyYXRvcih4LCB5KSB8fCAwXG4gICk7XG4gIGNvbnN0IGFudGlDb21wYXJhdG9yID0gKHgsIHkpID0+IG91dGVyQ29tcGFyYXRvcih5LCB4KTtcbiAgbWVtb09mU29ydGVkLnNldChvdXRlckNvbXBhcmF0b3IsIC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha1NldCgpKTtcbiAgbWVtb09mU29ydGVkLnNldChhbnRpQ29tcGFyYXRvciwgLyogQF9fUFVSRV9fICovIG5ldyBXZWFrU2V0KCkpO1xuICBjb21wYXJhdG9yTWlycm9ySW1hZ2VzLnNldChvdXRlckNvbXBhcmF0b3IsIGFudGlDb21wYXJhdG9yKTtcbiAgY29tcGFyYXRvck1pcnJvckltYWdlcy5zZXQoYW50aUNvbXBhcmF0b3IsIG91dGVyQ29tcGFyYXRvcik7XG4gIHJldHVybiBoYXJkZW4oeyBjb21wYXJhdG9yOiBvdXRlckNvbXBhcmF0b3IsIGFudGlDb21wYXJhdG9yIH0pO1xufTtcbnZhciBpc1JhbmtTb3J0ZWQgPSAocGFzc2FibGVzLCBjb21wYXJlKSA9PiB7XG4gIGNvbnN0IHN1Yk1lbW9PZlNvcnRlZCA9IG1lbW9PZlNvcnRlZC5nZXQoY29tcGFyZSk7XG4gIGFzc2VydChzdWJNZW1vT2ZTb3J0ZWQgIT09IHZvaWQgMCk7XG4gIGlmIChzdWJNZW1vT2ZTb3J0ZWQuaGFzKHBhc3NhYmxlcykpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBhc3NlcnQocGFzc1N0eWxlT2YocGFzc2FibGVzKSA9PT0gXCJjb3B5QXJyYXlcIik7XG4gIGZvciAobGV0IGkzID0gMTsgaTMgPCBwYXNzYWJsZXMubGVuZ3RoOyBpMyArPSAxKSB7XG4gICAgaWYgKGNvbXBhcmUocGFzc2FibGVzW2kzIC0gMV0sIHBhc3NhYmxlc1tpM10pID49IDEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgc3ViTWVtb09mU29ydGVkLmFkZChwYXNzYWJsZXMpO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5oYXJkZW4oaXNSYW5rU29ydGVkKTtcbnZhciBhc3NlcnRSYW5rU29ydGVkID0gKHNvcnRlZCwgY29tcGFyZSkgPT4gaXNSYW5rU29ydGVkKHNvcnRlZCwgY29tcGFyZSkgfHwgLyogVE9ETyBhc3NlcnQgb24gYnVnIGNvdWxkIGxlYWQgdG8gaW5maW5pdGUgcmVjdXJzaW9uLiBGaXguKi9cbi8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZSovXG50aHJvd1JlZGFjdGVkYE11c3QgYmUgcmFuayBzb3J0ZWQ6ICR7c29ydGVkfSB2cyAke3NvcnRCeVJhbmsoc29ydGVkLCBjb21wYXJlKX1gO1xuaGFyZGVuKGFzc2VydFJhbmtTb3J0ZWQpO1xudmFyIHNvcnRCeVJhbmsgPSAocGFzc2FibGVzLCBjb21wYXJlKSA9PiB7XG4gIGxldCB1bnNvcnRlZDtcbiAgaWYgKEFycmF5LmlzQXJyYXkocGFzc2FibGVzKSkge1xuICAgIGhhcmRlbihwYXNzYWJsZXMpO1xuICAgIGlmIChpc1JhbmtTb3J0ZWQocGFzc2FibGVzLCBjb21wYXJlKSkge1xuICAgICAgcmV0dXJuIHBhc3NhYmxlcztcbiAgICB9XG4gICAgdW5zb3J0ZWQgPSBbLi4ucGFzc2FibGVzXTtcbiAgfSBlbHNlIHtcbiAgICB1bnNvcnRlZCA9IEFycmF5LmZyb20ocGFzc2FibGVzLCBoYXJkZW4pO1xuICB9XG4gIGNvbnN0IHNvcnRlZCA9IHVuc29ydGVkLnNvcnQoY29tcGFyZSk7XG4gIGlmIChjb21wYXJlKHRydWUsIHZvaWQgMCkgPiAwKSB7XG4gICAgbGV0IGkzID0gc29ydGVkLmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKGkzID49IDAgJiYgc29ydGVkW2kzXSA9PT0gdm9pZCAwKSBpMyAtPSAxO1xuICAgIGNvbnN0IG4yID0gc29ydGVkLmxlbmd0aCAtIGkzIC0gMTtcbiAgICBpZiAobjIgPiAwICYmIG4yIDwgc29ydGVkLmxlbmd0aCkge1xuICAgICAgc29ydGVkLmNvcHlXaXRoaW4objIsIDApO1xuICAgICAgc29ydGVkLmZpbGwoXG4gICAgICAgIC8qKiBAdHlwZSB7VH0gKi9cbiAgICAgICAgdm9pZCAwLFxuICAgICAgICAwLFxuICAgICAgICBuMlxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaGFyZGVuKHNvcnRlZCk7XG4gIGNvbnN0IHN1Yk1lbW9PZlNvcnRlZCA9IG1lbW9PZlNvcnRlZC5nZXQoY29tcGFyZSk7XG4gIGFzc2VydChzdWJNZW1vT2ZTb3J0ZWQgIT09IHZvaWQgMCk7XG4gIHN1Yk1lbW9PZlNvcnRlZC5hZGQoc29ydGVkKTtcbiAgcmV0dXJuIHNvcnRlZDtcbn07XG5oYXJkZW4oc29ydEJ5UmFuayk7XG52YXIgcmFua1NlYXJjaCA9IChzb3J0ZWQsIGNvbXBhcmUsIGtleSwgYmlhcyA9IFwibGVmdE1vc3RcIikgPT4ge1xuICBhc3NlcnRSYW5rU29ydGVkKHNvcnRlZCwgY29tcGFyZSk7XG4gIGxldCBsZWZ0ID0gMDtcbiAgbGV0IHJpZ2h0ID0gc29ydGVkLmxlbmd0aDtcbiAgd2hpbGUgKGxlZnQgPCByaWdodCkge1xuICAgIGNvbnN0IG0yID0gTWF0aC5mbG9vcigobGVmdCArIHJpZ2h0KSAvIDIpO1xuICAgIGNvbnN0IGNvbXAgPSBjb21wYXJlKHNvcnRlZFttMl0sIGtleSk7XG4gICAgaWYgKGNvbXAgPD0gLTEgfHwgY29tcCA9PT0gMCAmJiBiaWFzID09PSBcInJpZ2h0TW9zdFwiKSB7XG4gICAgICBsZWZ0ID0gbTIgKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQoY29tcCA+PSAxIHx8IGNvbXAgPT09IDAgJiYgYmlhcyA9PT0gXCJsZWZ0TW9zdFwiKTtcbiAgICAgIHJpZ2h0ID0gbTI7XG4gICAgfVxuICB9XG4gIHJldHVybiBiaWFzID09PSBcImxlZnRNb3N0XCIgPyBsZWZ0IDogcmlnaHQgLSAxO1xufTtcbnZhciBnZXRJbmRleENvdmVyID0gKHNvcnRlZCwgY29tcGFyZSwgW2xlZnRLZXksIHJpZ2h0S2V5XSkgPT4ge1xuICBhc3NlcnRSYW5rU29ydGVkKHNvcnRlZCwgY29tcGFyZSk7XG4gIGNvbnN0IGxlZnRJbmRleCA9IHJhbmtTZWFyY2goc29ydGVkLCBjb21wYXJlLCBsZWZ0S2V5LCBcImxlZnRNb3N0XCIpO1xuICBjb25zdCByaWdodEluZGV4ID0gcmFua1NlYXJjaChzb3J0ZWQsIGNvbXBhcmUsIHJpZ2h0S2V5LCBcInJpZ2h0TW9zdFwiKTtcbiAgcmV0dXJuIFtsZWZ0SW5kZXgsIHJpZ2h0SW5kZXhdO1xufTtcbmhhcmRlbihnZXRJbmRleENvdmVyKTtcbnZhciBGdWxsUmFua0NvdmVyID0gaGFyZGVuKFtcIlwiLCBcIntcIl0pO1xudmFyIGNvdmVyZWRFbnRyaWVzID0gKHNvcnRlZCwgW2xlZnRJbmRleCwgcmlnaHRJbmRleF0pID0+IHtcbiAgY29uc3QgaXRlcmFibGUgPSBoYXJkZW4oe1xuICAgIFtTeW1ib2wuaXRlcmF0b3JdOiAoKSA9PiB7XG4gICAgICBsZXQgaTMgPSBsZWZ0SW5kZXg7XG4gICAgICByZXR1cm4gaGFyZGVuKHtcbiAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgIGlmIChpMyA8PSByaWdodEluZGV4KSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gc29ydGVkW2kzXTtcbiAgICAgICAgICAgIGkzICs9IDE7XG4gICAgICAgICAgICByZXR1cm4gaGFyZGVuKHsgdmFsdWU6IFtpMywgZWxlbWVudF0sIGRvbmU6IGZhbHNlIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaGFyZGVuKHsgdmFsdWU6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBpdGVyYWJsZTtcbn07XG5oYXJkZW4oY292ZXJlZEVudHJpZXMpO1xudmFyIG1heFJhbmsgPSAoY29tcGFyZSwgYTIsIGIzKSA9PiBjb21wYXJlKGEyLCBiMykgPj0gMCA/IGEyIDogYjM7XG52YXIgbWluUmFuayA9IChjb21wYXJlLCBhMiwgYjMpID0+IGNvbXBhcmUoYTIsIGIzKSA8PSAwID8gYTIgOiBiMztcbnZhciB1bmlvblJhbmtDb3ZlcnMgPSAoY29tcGFyZSwgY292ZXJzKSA9PiB7XG4gIGNvbnN0IHVuaW9uUmFua0NvdmVyUGFpciA9IChbbGVmdEEsIHJpZ2h0QV0sIFtsZWZ0QiwgcmlnaHRCXSkgPT4gW1xuICAgIG1pblJhbmsoY29tcGFyZSwgbGVmdEEsIGxlZnRCKSxcbiAgICBtYXhSYW5rKGNvbXBhcmUsIHJpZ2h0QSwgcmlnaHRCKVxuICBdO1xuICByZXR1cm4gY292ZXJzLnJlZHVjZSh1bmlvblJhbmtDb3ZlclBhaXIsIFtcIntcIiwgXCJcIl0pO1xufTtcbmhhcmRlbih1bmlvblJhbmtDb3ZlcnMpO1xudmFyIGludGVyc2VjdFJhbmtDb3ZlcnMgPSAoY29tcGFyZSwgY292ZXJzKSA9PiB7XG4gIGNvbnN0IGludGVyc2VjdFJhbmtDb3ZlclBhaXIgPSAoW2xlZnRBLCByaWdodEFdLCBbbGVmdEIsIHJpZ2h0Ql0pID0+IFtcbiAgICBtYXhSYW5rKGNvbXBhcmUsIGxlZnRBLCBsZWZ0QiksXG4gICAgbWluUmFuayhjb21wYXJlLCByaWdodEEsIHJpZ2h0QilcbiAgXTtcbiAgcmV0dXJuIGNvdmVycy5yZWR1Y2UoaW50ZXJzZWN0UmFua0NvdmVyUGFpciwgW1wiXCIsIFwie1wiXSk7XG59O1xudmFyIHsgY29tcGFyYXRvcjogY29tcGFyZVJhbmssIGFudGlDb21wYXJhdG9yOiBjb21wYXJlQW50aVJhbmsgfSA9IG1ha2VDb21wYXJhdG9yS2l0KCk7XG52YXIgbWFrZUZ1bGxPcmRlckNvbXBhcmF0b3JLaXQgPSAobG9uZ0xpdmVkID0gZmFsc2UpID0+IHtcbiAgbGV0IG51bVNlZW4gPSAwO1xuICBjb25zdCBNYXBDb25zdHJ1Y3RvciA9IGxvbmdMaXZlZCA/IFdlYWtNYXAgOiBNYXA7XG4gIGNvbnN0IHNlZW4gPSBuZXcgTWFwQ29uc3RydWN0b3IoKTtcbiAgY29uc3QgdGFnID0gKHI2KSA9PiB7XG4gICAgaWYgKHNlZW4uaGFzKHI2KSkge1xuICAgICAgcmV0dXJuIHNlZW4uZ2V0KHI2KTtcbiAgICB9XG4gICAgbnVtU2VlbiArPSAxO1xuICAgIHNlZW4uc2V0KHI2LCBudW1TZWVuKTtcbiAgICByZXR1cm4gbnVtU2VlbjtcbiAgfTtcbiAgY29uc3QgY29tcGFyZVJlbW90YWJsZXMgPSAoeCwgeSkgPT4gY29tcGFyZVJhbmsodGFnKHgpLCB0YWcoeSkpO1xuICByZXR1cm4gbWFrZUNvbXBhcmF0b3JLaXQoY29tcGFyZVJlbW90YWJsZXMpO1xufTtcbmhhcmRlbihtYWtlRnVsbE9yZGVyQ29tcGFyYXRvcktpdCk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9wYXR0ZXJucy9zcmMva2V5cy9jb3B5U2V0LmpzKi9cbnZhciBjaGVja05vRHVwbGljYXRlcyA9IChlbGVtZW50cywgZnVsbENvbXBhcmUsIGNoZWNrKSA9PiB7XG4gIGZ1bGxDb21wYXJlID0gZnVsbENvbXBhcmUgfHwgbWFrZUZ1bGxPcmRlckNvbXBhcmF0b3JLaXQoKS5hbnRpQ29tcGFyYXRvcjtcbiAgZWxlbWVudHMgPSBzb3J0QnlSYW5rKGVsZW1lbnRzLCBmdWxsQ29tcGFyZSk7XG4gIGNvbnN0IHsgbGVuZ3RoIH0gPSBlbGVtZW50cztcbiAgZm9yIChsZXQgaTMgPSAxOyBpMyA8IGxlbmd0aDsgaTMgKz0gMSkge1xuICAgIGNvbnN0IGswID0gZWxlbWVudHNbaTMgLSAxXTtcbiAgICBjb25zdCBrMSA9IGVsZW1lbnRzW2kzXTtcbiAgICBpZiAoZnVsbENvbXBhcmUoazAsIGsxKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGNoZWNrKGZhbHNlLCByZWRhY3RlZGB2YWx1ZSBoYXMgZHVwbGljYXRlIGtleXM6ICR7azB9YCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBhc3NlcnROb0R1cGxpY2F0ZXMgPSAoZWxlbWVudHMsIGZ1bGxDb21wYXJlID0gdm9pZCAwKSA9PiB7XG4gIGNoZWNrTm9EdXBsaWNhdGVzKGVsZW1lbnRzLCBmdWxsQ29tcGFyZSwgYXNzZXJ0Q2hlY2tlcik7XG59O1xudmFyIGNoZWNrRWxlbWVudHMgPSAoZWxlbWVudHMsIGNoZWNrKSA9PiB7XG4gIGlmIChwYXNzU3R5bGVPZihlbGVtZW50cykgIT09IFwiY29weUFycmF5XCIpIHtcbiAgICByZXR1cm4gY2hlY2soXG4gICAgICBmYWxzZSxcbiAgICAgIHJlZGFjdGVkYFRoZSBrZXlzIG9mIGEgY29weVNldCBvciBjb3B5TWFwIG11c3QgYmUgYSBjb3B5QXJyYXk6ICR7ZWxlbWVudHN9YFxuICAgICk7XG4gIH1cbiAgaWYgKCFpc1JhbmtTb3J0ZWQoZWxlbWVudHMsIGNvbXBhcmVBbnRpUmFuaykpIHtcbiAgICByZXR1cm4gY2hlY2soXG4gICAgICBmYWxzZSxcbiAgICAgIHJlZGFjdGVkYFRoZSBrZXlzIG9mIGEgY29weVNldCBvciBjb3B5TWFwIG11c3QgYmUgc29ydGVkIGluIHJldmVyc2UgcmFuayBvcmRlcjogJHtlbGVtZW50c31gXG4gICAgKTtcbiAgfVxuICByZXR1cm4gY2hlY2tOb0R1cGxpY2F0ZXMoZWxlbWVudHMsIHZvaWQgMCwgY2hlY2spO1xufTtcbmhhcmRlbihjaGVja0VsZW1lbnRzKTtcbnZhciBhc3NlcnRFbGVtZW50cyA9IChlbGVtZW50cykgPT4ge1xuICBjaGVja0VsZW1lbnRzKGVsZW1lbnRzLCBhc3NlcnRDaGVja2VyKTtcbn07XG5oYXJkZW4oYXNzZXJ0RWxlbWVudHMpO1xudmFyIGNvZXJjZVRvRWxlbWVudHMgPSAoZWxlbWVudHNMaXN0KSA9PiB7XG4gIGNvbnN0IGVsZW1lbnRzID0gc29ydEJ5UmFuayhlbGVtZW50c0xpc3QsIGNvbXBhcmVBbnRpUmFuayk7XG4gIGFzc2VydEVsZW1lbnRzKGVsZW1lbnRzKTtcbiAgcmV0dXJuIGVsZW1lbnRzO1xufTtcbmhhcmRlbihjb2VyY2VUb0VsZW1lbnRzKTtcbnZhciBtYWtlU2V0T2ZFbGVtZW50cyA9IChlbGVtZW50SXRlcikgPT4gbWFrZVRhZ2dlZChcImNvcHlTZXRcIiwgY29lcmNlVG9FbGVtZW50cyhlbGVtZW50SXRlcikpO1xuaGFyZGVuKG1ha2VTZXRPZkVsZW1lbnRzKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL3BhdHRlcm5zL3NyYy9rZXlzL2NvcHlCYWcuanMqL1xudmFyIGNoZWNrTm9EdXBsaWNhdGVLZXlzID0gKGJhZ0VudHJpZXMsIGZ1bGxDb21wYXJlLCBjaGVjaykgPT4ge1xuICBmdWxsQ29tcGFyZSA9IGZ1bGxDb21wYXJlIHx8IG1ha2VGdWxsT3JkZXJDb21wYXJhdG9yS2l0KCkuYW50aUNvbXBhcmF0b3I7XG4gIGJhZ0VudHJpZXMgPSBzb3J0QnlSYW5rKGJhZ0VudHJpZXMsIGZ1bGxDb21wYXJlKTtcbiAgY29uc3QgeyBsZW5ndGggfSA9IGJhZ0VudHJpZXM7XG4gIGZvciAobGV0IGkzID0gMTsgaTMgPCBsZW5ndGg7IGkzICs9IDEpIHtcbiAgICBjb25zdCBrMCA9IGJhZ0VudHJpZXNbaTMgLSAxXVswXTtcbiAgICBjb25zdCBrMSA9IGJhZ0VudHJpZXNbaTNdWzBdO1xuICAgIGlmIChmdWxsQ29tcGFyZShrMCwgazEpID09PSAwKSB7XG4gICAgICByZXR1cm4gY2hlY2soZmFsc2UsIHJlZGFjdGVkYHZhbHVlIGhhcyBkdXBsaWNhdGUga2V5czogJHtrMH1gKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIGFzc2VydE5vRHVwbGljYXRlS2V5cyA9IChiYWdFbnRyaWVzLCBmdWxsQ29tcGFyZSA9IHZvaWQgMCkgPT4ge1xuICBjaGVja05vRHVwbGljYXRlS2V5cyhiYWdFbnRyaWVzLCBmdWxsQ29tcGFyZSwgYXNzZXJ0Q2hlY2tlcik7XG59O1xudmFyIGNoZWNrQmFnRW50cmllcyA9IChiYWdFbnRyaWVzLCBjaGVjaykgPT4ge1xuICBpZiAocGFzc1N0eWxlT2YoYmFnRW50cmllcykgIT09IFwiY29weUFycmF5XCIpIHtcbiAgICByZXR1cm4gY2hlY2soXG4gICAgICBmYWxzZSxcbiAgICAgIHJlZGFjdGVkYFRoZSBlbnRyaWVzIG9mIGEgY29weUJhZyBtdXN0IGJlIGEgY29weUFycmF5OiAke2JhZ0VudHJpZXN9YFxuICAgICk7XG4gIH1cbiAgaWYgKCFpc1JhbmtTb3J0ZWQoYmFnRW50cmllcywgY29tcGFyZUFudGlSYW5rKSkge1xuICAgIHJldHVybiBjaGVjayhcbiAgICAgIGZhbHNlLFxuICAgICAgcmVkYWN0ZWRgVGhlIGVudHJpZXMgb2YgYSBjb3B5QmFnIG11c3QgYmUgc29ydGVkIGluIHJldmVyc2UgcmFuayBvcmRlcjogJHtiYWdFbnRyaWVzfWBcbiAgICApO1xuICB9XG4gIGZvciAoY29uc3QgZW50cnkgb2YgYmFnRW50cmllcykge1xuICAgIGlmIChwYXNzU3R5bGVPZihlbnRyeSkgIT09IFwiY29weUFycmF5XCIgfHwgZW50cnkubGVuZ3RoICE9PSAyIHx8IHR5cGVvZiBlbnRyeVsxXSAhPT0gXCJiaWdpbnRcIikge1xuICAgICAgcmV0dXJuIGNoZWNrKFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgcmVkYWN0ZWRgRWFjaCBlbnRyeSBvZiBhIGNvcHlCYWcgbXVzdCBiZSBwYWlyIG9mIGEga2V5IGFuZCBhIGJpZ2ludCByZXByZXNlbnRpbmcgYSBjb3VudDogJHtlbnRyeX1gXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZW50cnlbMV0gPCAxKSB7XG4gICAgICByZXR1cm4gY2hlY2soXG4gICAgICAgIGZhbHNlLFxuICAgICAgICByZWRhY3RlZGBFYWNoIGVudHJ5IG9mIGEgY29weUJhZyBtdXN0IGhhdmUgYSBwb3NpdGl2ZSBjb3VudDogJHtlbnRyeX1gXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2hlY2tOb0R1cGxpY2F0ZUtleXMoYmFnRW50cmllcywgdm9pZCAwLCBjaGVjayk7XG59O1xuaGFyZGVuKGNoZWNrQmFnRW50cmllcyk7XG52YXIgYXNzZXJ0QmFnRW50cmllcyA9IChiYWdFbnRyaWVzKSA9PiB7XG4gIGNoZWNrQmFnRW50cmllcyhiYWdFbnRyaWVzLCBhc3NlcnRDaGVja2VyKTtcbn07XG5oYXJkZW4oYXNzZXJ0QmFnRW50cmllcyk7XG52YXIgY29lcmNlVG9CYWdFbnRyaWVzID0gKGJhZ0VudHJpZXNMaXN0KSA9PiB7XG4gIGNvbnN0IGJhZ0VudHJpZXMgPSBzb3J0QnlSYW5rKGJhZ0VudHJpZXNMaXN0LCBjb21wYXJlQW50aVJhbmspO1xuICBhc3NlcnRCYWdFbnRyaWVzKGJhZ0VudHJpZXMpO1xuICByZXR1cm4gYmFnRW50cmllcztcbn07XG5oYXJkZW4oY29lcmNlVG9CYWdFbnRyaWVzKTtcbnZhciBtYWtlQmFnT2ZFbnRyaWVzID0gKGJhZ0VudHJ5SXRlcikgPT4gbWFrZVRhZ2dlZChcImNvcHlCYWdcIiwgY29lcmNlVG9CYWdFbnRyaWVzKGJhZ0VudHJ5SXRlcikpO1xuaGFyZGVuKG1ha2VCYWdPZkVudHJpZXMpO1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvQGVuZG8vcGF0dGVybnMvc3JjL2tleXMvY2hlY2tLZXkuanMqL1xudmFyIHsgb3duS2V5czogb3duS2V5czE2IH0gPSBSZWZsZWN0O1xudmFyIGNoZWNrU2NhbGFyS2V5ID0gKHZhbCwgY2hlY2spID0+IHtcbiAgaWYgKGlzQXRvbSh2YWwpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgcGFzc1N0eWxlID0gcGFzc1N0eWxlT2YodmFsKTtcbiAgaWYgKHBhc3NTdHlsZSA9PT0gXCJyZW1vdGFibGVcIikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgQSAke3F1b3RlKHBhc3NTdHlsZSl9IGNhbm5vdCBiZSBhIHNjYWxhciBrZXk6ICR7dmFsfWApO1xufTtcbnZhciBpc1NjYWxhcktleSA9ICh2YWwpID0+IGNoZWNrU2NhbGFyS2V5KHZhbCwgaWRlbnRDaGVja2VyKTtcbmhhcmRlbihpc1NjYWxhcktleSk7XG52YXIgYXNzZXJ0U2NhbGFyS2V5ID0gKHZhbCkgPT4ge1xuICBjaGVja1NjYWxhcktleSh2YWwsIGFzc2VydENoZWNrZXIpO1xufTtcbmhhcmRlbihhc3NlcnRTY2FsYXJLZXkpO1xudmFyIGtleU1lbW8gPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKTtcbnZhciBjaGVja0tleSA9ICh2YWwsIGNoZWNrKSA9PiB7XG4gIGlmIChpc0F0b20odmFsKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChrZXlNZW1vLmhhcyh2YWwpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0gY2hlY2tLZXlJbnRlcm5hbCh2YWwsIGNoZWNrKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIGtleU1lbW8uYWRkKHZhbCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5oYXJkZW4oY2hlY2tLZXkpO1xudmFyIGlzS2V5ID0gKHZhbCkgPT4gY2hlY2tLZXkodmFsLCBpZGVudENoZWNrZXIpO1xuaGFyZGVuKGlzS2V5KTtcbnZhciBhc3NlcnRLZXkgPSAodmFsKSA9PiB7XG4gIGNoZWNrS2V5KHZhbCwgYXNzZXJ0Q2hlY2tlcik7XG59O1xuaGFyZGVuKGFzc2VydEtleSk7XG52YXIgY29weVNldE1lbW8gPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKTtcbnZhciBjaGVja0NvcHlTZXQgPSAoczMsIGNoZWNrKSA9PiB7XG4gIGlmIChjb3B5U2V0TWVtby5oYXMoczMpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0gKHBhc3NTdHlsZU9mKHMzKSA9PT0gXCJ0YWdnZWRcIiAmJiBnZXRUYWcoczMpID09PSBcImNvcHlTZXRcIiB8fCBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgTm90IGEgY29weVNldDogJHtzM31gKSkgJiYgY2hlY2tFbGVtZW50cyhzMy5wYXlsb2FkLCBjaGVjaykgJiYgY2hlY2tLZXkoczMucGF5bG9hZCwgY2hlY2spO1xuICBpZiAocmVzdWx0KSB7XG4gICAgY29weVNldE1lbW8uYWRkKHMzKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbmhhcmRlbihjaGVja0NvcHlTZXQpO1xudmFyIGlzQ29weVNldCA9IChzMykgPT4gY2hlY2tDb3B5U2V0KHMzLCBpZGVudENoZWNrZXIpO1xuaGFyZGVuKGlzQ29weVNldCk7XG52YXIgYXNzZXJ0Q29weVNldCA9IChzMykgPT4ge1xuICBjaGVja0NvcHlTZXQoczMsIGFzc2VydENoZWNrZXIpO1xufTtcbmhhcmRlbihhc3NlcnRDb3B5U2V0KTtcbnZhciBnZXRDb3B5U2V0S2V5cyA9IChzMykgPT4ge1xuICBhc3NlcnRDb3B5U2V0KHMzKTtcbiAgcmV0dXJuIHMzLnBheWxvYWQ7XG59O1xuaGFyZGVuKGdldENvcHlTZXRLZXlzKTtcbnZhciBldmVyeUNvcHlTZXRLZXkgPSAoczMsIGZuKSA9PiBnZXRDb3B5U2V0S2V5cyhzMykuZXZlcnkoKGtleSwgaW5kZXgpID0+IGZuKGtleSwgaW5kZXgpKTtcbmhhcmRlbihldmVyeUNvcHlTZXRLZXkpO1xudmFyIG1ha2VDb3B5U2V0ID0gKGVsZW1lbnRJdGVyKSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IG1ha2VTZXRPZkVsZW1lbnRzKGVsZW1lbnRJdGVyKTtcbiAgYXNzZXJ0Q29weVNldChyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbmhhcmRlbihtYWtlQ29weVNldCk7XG52YXIgY29weUJhZ01lbW8gPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKTtcbnZhciBjaGVja0NvcHlCYWcgPSAoYjMsIGNoZWNrKSA9PiB7XG4gIGlmIChjb3B5QmFnTWVtby5oYXMoYjMpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0gKHBhc3NTdHlsZU9mKGIzKSA9PT0gXCJ0YWdnZWRcIiAmJiBnZXRUYWcoYjMpID09PSBcImNvcHlCYWdcIiB8fCBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgTm90IGEgY29weUJhZzogJHtiM31gKSkgJiYgY2hlY2tCYWdFbnRyaWVzKGIzLnBheWxvYWQsIGNoZWNrKSAmJiBjaGVja0tleShiMy5wYXlsb2FkLCBjaGVjayk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICBjb3B5QmFnTWVtby5hZGQoYjMpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuaGFyZGVuKGNoZWNrQ29weUJhZyk7XG52YXIgaXNDb3B5QmFnID0gKGIzKSA9PiBjaGVja0NvcHlCYWcoYjMsIGlkZW50Q2hlY2tlcik7XG5oYXJkZW4oaXNDb3B5QmFnKTtcbnZhciBhc3NlcnRDb3B5QmFnID0gKGIzKSA9PiB7XG4gIGNoZWNrQ29weUJhZyhiMywgYXNzZXJ0Q2hlY2tlcik7XG59O1xuaGFyZGVuKGFzc2VydENvcHlCYWcpO1xudmFyIGdldENvcHlCYWdFbnRyaWVzID0gKGIzKSA9PiB7XG4gIGFzc2VydENvcHlCYWcoYjMpO1xuICByZXR1cm4gYjMucGF5bG9hZDtcbn07XG5oYXJkZW4oZ2V0Q29weUJhZ0VudHJpZXMpO1xudmFyIGV2ZXJ5Q29weUJhZ0VudHJ5ID0gKGIzLCBmbikgPT4gZ2V0Q29weUJhZ0VudHJpZXMoYjMpLmV2ZXJ5KChlbnRyeSwgaW5kZXgpID0+IGZuKGVudHJ5LCBpbmRleCkpO1xuaGFyZGVuKGV2ZXJ5Q29weUJhZ0VudHJ5KTtcbnZhciBtYWtlQ29weUJhZyA9IChiYWdFbnRyeUl0ZXIpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gbWFrZUJhZ09mRW50cmllcyhiYWdFbnRyeUl0ZXIpO1xuICBhc3NlcnRDb3B5QmFnKHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuaGFyZGVuKG1ha2VDb3B5QmFnKTtcbnZhciBtYWtlQ29weUJhZ0Zyb21FbGVtZW50cyA9IChlbGVtZW50SXRlcikgPT4ge1xuICBjb25zdCBmdWxsQ29tcGFyZSA9IG1ha2VGdWxsT3JkZXJDb21wYXJhdG9yS2l0KCkuYW50aUNvbXBhcmF0b3I7XG4gIGNvbnN0IHNvcnRlZCA9IHNvcnRCeVJhbmsoZWxlbWVudEl0ZXIsIGZ1bGxDb21wYXJlKTtcbiAgY29uc3QgZW50cmllczExID0gW107XG4gIGZvciAobGV0IGkzID0gMDsgaTMgPCBzb3J0ZWQubGVuZ3RoOyApIHtcbiAgICBjb25zdCBrID0gc29ydGVkW2kzXTtcbiAgICBsZXQgaiA9IGkzICsgMTtcbiAgICB3aGlsZSAoaiA8IHNvcnRlZC5sZW5ndGggJiYgZnVsbENvbXBhcmUoaywgc29ydGVkW2pdKSA9PT0gMCkge1xuICAgICAgaiArPSAxO1xuICAgIH1cbiAgICBlbnRyaWVzMTEucHVzaChbaywgQmlnSW50KGogLSBpMyldKTtcbiAgICBpMyA9IGo7XG4gIH1cbiAgcmV0dXJuIG1ha2VDb3B5QmFnKGVudHJpZXMxMSk7XG59O1xuaGFyZGVuKG1ha2VDb3B5QmFnRnJvbUVsZW1lbnRzKTtcbnZhciBjb3B5TWFwTWVtbyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha1NldCgpO1xudmFyIGNoZWNrQ29weU1hcCA9IChtMiwgY2hlY2spID0+IHtcbiAgaWYgKGNvcHlNYXBNZW1vLmhhcyhtMikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoIShwYXNzU3R5bGVPZihtMikgPT09IFwidGFnZ2VkXCIgJiYgZ2V0VGFnKG0yKSA9PT0gXCJjb3B5TWFwXCIpKSB7XG4gICAgcmV0dXJuIGNoZWNrKGZhbHNlLCByZWRhY3RlZGBOb3QgYSBjb3B5TWFwOiAke20yfWApO1xuICB9XG4gIGNvbnN0IHsgcGF5bG9hZCB9ID0gbTI7XG4gIGlmIChwYXNzU3R5bGVPZihwYXlsb2FkKSAhPT0gXCJjb3B5UmVjb3JkXCIpIHtcbiAgICByZXR1cm4gY2hlY2soZmFsc2UsIHJlZGFjdGVkYEEgY29weU1hcCdzIHBheWxvYWQgbXVzdCBiZSBhIHJlY29yZDogJHttMn1gKTtcbiAgfVxuICBjb25zdCB7IGtleXM6IGtleXM4LCB2YWx1ZXM6IHZhbHVlczcsIC4uLnJlc3QgfSA9IHBheWxvYWQ7XG4gIGNvbnN0IHJlc3VsdCA9IChvd25LZXlzMTYocmVzdCkubGVuZ3RoID09PSAwIHx8IGNoZWNrKFxuICAgIGZhbHNlLFxuICAgIHJlZGFjdGVkYEEgY29weU1hcCdzIHBheWxvYWQgbXVzdCBvbmx5IGhhdmUgLmtleXMgYW5kIC52YWx1ZXM6ICR7bTJ9YFxuICApKSAmJiBjaGVja0VsZW1lbnRzKGtleXM4LCBjaGVjaykgJiYgY2hlY2tLZXkoa2V5czgsIGNoZWNrKSAmJiAocGFzc1N0eWxlT2YodmFsdWVzNykgPT09IFwiY29weUFycmF5XCIgfHwgY2hlY2soZmFsc2UsIHJlZGFjdGVkYEEgY29weU1hcCdzIC52YWx1ZXMgbXVzdCBiZSBhIGNvcHlBcnJheTogJHttMn1gKSkgJiYgKGtleXM4Lmxlbmd0aCA9PT0gdmFsdWVzNy5sZW5ndGggfHwgY2hlY2soXG4gICAgZmFsc2UsXG4gICAgcmVkYWN0ZWRgQSBjb3B5TWFwIG11c3QgaGF2ZSB0aGUgc2FtZSBudW1iZXIgb2Yga2V5cyBhbmQgdmFsdWVzOiAke20yfWBcbiAgKSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICBjb3B5TWFwTWVtby5hZGQobTIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuaGFyZGVuKGNoZWNrQ29weU1hcCk7XG52YXIgaXNDb3B5TWFwID0gKG0yKSA9PiBjaGVja0NvcHlNYXAobTIsIGlkZW50Q2hlY2tlcik7XG5oYXJkZW4oaXNDb3B5TWFwKTtcbnZhciBhc3NlcnRDb3B5TWFwID0gKG0yKSA9PiB7XG4gIGNoZWNrQ29weU1hcChtMiwgYXNzZXJ0Q2hlY2tlcik7XG59O1xuaGFyZGVuKGFzc2VydENvcHlNYXApO1xudmFyIGdldENvcHlNYXBLZXlzID0gKG0yKSA9PiB7XG4gIGFzc2VydENvcHlNYXAobTIpO1xuICByZXR1cm4gbTIucGF5bG9hZC5rZXlzO1xufTtcbmhhcmRlbihnZXRDb3B5TWFwS2V5cyk7XG52YXIgZ2V0Q29weU1hcFZhbHVlcyA9IChtMikgPT4ge1xuICBhc3NlcnRDb3B5TWFwKG0yKTtcbiAgcmV0dXJuIG0yLnBheWxvYWQudmFsdWVzO1xufTtcbmhhcmRlbihnZXRDb3B5TWFwVmFsdWVzKTtcbnZhciBnZXRDb3B5TWFwRW50cnlBcnJheSA9IChtMikgPT4ge1xuICBhc3NlcnRDb3B5TWFwKG0yKTtcbiAgY29uc3Qge1xuICAgIHBheWxvYWQ6IHsga2V5czoga2V5czgsIHZhbHVlczogdmFsdWVzNyB9XG4gIH0gPSBtMjtcbiAgcmV0dXJuIGhhcmRlbihrZXlzOC5tYXAoKGtleSwgaTMpID0+IFtrZXksIHZhbHVlczdbaTNdXSkpO1xufTtcbmhhcmRlbihnZXRDb3B5TWFwRW50cnlBcnJheSk7XG52YXIgZ2V0Q29weU1hcEVudHJpZXMgPSAobTIpID0+IHtcbiAgYXNzZXJ0Q29weU1hcChtMik7XG4gIGNvbnN0IHtcbiAgICBwYXlsb2FkOiB7IGtleXM6IGtleXM4LCB2YWx1ZXM6IHZhbHVlczcgfVxuICB9ID0gbTI7XG4gIGNvbnN0IHsgbGVuZ3RoIH0gPSAoXG4gICAgLyoqIEB0eXBlIHtBcnJheX0gKi9cbiAgICBrZXlzOFxuICApO1xuICByZXR1cm4gRmFyKFwiQ29weU1hcCBlbnRyaWVzIGl0ZXJhYmxlXCIsIHtcbiAgICBbU3ltYm9sLml0ZXJhdG9yXTogKCkgPT4ge1xuICAgICAgbGV0IGkzID0gMDtcbiAgICAgIHJldHVybiBGYXIoXCJDb3B5TWFwIGVudHJpZXMgaXRlcmF0b3JcIiwge1xuICAgICAgICBuZXh0OiAoKSA9PiB7XG4gICAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgICBpZiAoaTMgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhcmRlbih7IGRvbmU6IGZhbHNlLCB2YWx1ZTogW2tleXM4W2kzXSwgdmFsdWVzN1tpM11dIH0pO1xuICAgICAgICAgICAgaTMgKz0gMTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhcmRlbih7IGRvbmU6IHRydWUsIHZhbHVlOiB2b2lkIDAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuaGFyZGVuKGdldENvcHlNYXBFbnRyaWVzKTtcbnZhciBldmVyeUNvcHlNYXBLZXkgPSAobTIsIGZuKSA9PiBnZXRDb3B5TWFwS2V5cyhtMikuZXZlcnkoKGtleSwgaW5kZXgpID0+IGZuKGtleSwgaW5kZXgpKTtcbmhhcmRlbihldmVyeUNvcHlNYXBLZXkpO1xudmFyIGV2ZXJ5Q29weU1hcFZhbHVlID0gKG0yLCBmbikgPT4gZ2V0Q29weU1hcFZhbHVlcyhtMikuZXZlcnkoKHZhbHVlLCBpbmRleCkgPT4gZm4odmFsdWUsIGluZGV4KSk7XG5oYXJkZW4oZXZlcnlDb3B5TWFwVmFsdWUpO1xudmFyIGNvcHlNYXBLZXlTZXQgPSAobTIpID0+IChcbiAgLyogQSBjb3B5TWFwJ3Mga2V5cyBhcmUgYWxyZWFkeSBpbiB0aGUgaW50ZXJuYWwgZm9ybSB1c2VkIGJ5IGNvcHlTZXRzLiovXG4gIG1ha2VUYWdnZWQoXCJjb3B5U2V0XCIsIG0yLnBheWxvYWQua2V5cylcbik7XG5oYXJkZW4oY29weU1hcEtleVNldCk7XG52YXIgbWFrZUNvcHlNYXAgPSAoZW50cmllczExKSA9PiB7XG4gIGNvbnN0IHNvcnRlZEVudHJpZXMgPSBzb3J0QnlSYW5rKGVudHJpZXMxMSwgY29tcGFyZUFudGlSYW5rKTtcbiAgY29uc3Qga2V5czggPSBzb3J0ZWRFbnRyaWVzLm1hcCgoW2ssIF92XSkgPT4gayk7XG4gIGNvbnN0IHZhbHVlczcgPSBzb3J0ZWRFbnRyaWVzLm1hcCgoW19rLCB2Ml0pID0+IHYyKTtcbiAgY29uc3QgcmVzdWx0ID0gbWFrZVRhZ2dlZChcImNvcHlNYXBcIiwgeyBrZXlzOiBrZXlzOCwgdmFsdWVzOiB2YWx1ZXM3IH0pO1xuICBhc3NlcnRDb3B5TWFwKHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuaGFyZGVuKG1ha2VDb3B5TWFwKTtcbnZhciBjaGVja0tleUludGVybmFsID0gKHZhbCwgY2hlY2spID0+IHtcbiAgY29uc3QgY2hlY2tJdCA9IChjaGlsZCkgPT4gY2hlY2tLZXkoY2hpbGQsIGNoZWNrKTtcbiAgY29uc3QgcGFzc1N0eWxlID0gcGFzc1N0eWxlT2YodmFsKTtcbiAgc3dpdGNoIChwYXNzU3R5bGUpIHtcbiAgICBjYXNlIFwicmVtb3RhYmxlXCI6IHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXNlIFwiY29weVJlY29yZFwiOiB7XG4gICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh2YWwpLmV2ZXJ5KGNoZWNrSXQpO1xuICAgIH1cbiAgICBjYXNlIFwiY29weUFycmF5XCI6IHtcbiAgICAgIHJldHVybiB2YWwuZXZlcnkoY2hlY2tJdCk7XG4gICAgfVxuICAgIGNhc2UgXCJ0YWdnZWRcIjoge1xuICAgICAgY29uc3QgdGFnID0gZ2V0VGFnKHZhbCk7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIFwiY29weVNldFwiOiB7XG4gICAgICAgICAgcmV0dXJuIGNoZWNrQ29weVNldCh2YWwsIGNoZWNrKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiY29weUJhZ1wiOiB7XG4gICAgICAgICAgcmV0dXJuIGNoZWNrQ29weUJhZyh2YWwsIGNoZWNrKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiY29weU1hcFwiOiB7XG4gICAgICAgICAgcmV0dXJuIGNoZWNrQ29weU1hcCh2YWwsIGNoZWNrKSAmJiAvKiBGb3IgYSBjb3B5TWFwIHRvIGJlIGEga2V5LCBhbGwgaXRzIGtleXMgYW5kIHZhbHVlcyBtdXN0Ki9cbiAgICAgICAgICAvKiBiZSBrZXlzLiBLZXlzIGFscmVhZHkgY2hlY2tlZCBieSBgY2hlY2tDb3B5TWFwYCBzaW5jZSovXG4gICAgICAgICAgLyogdGhhdCdzIGEgY29weU1hcCByZXF1aXJlbWVudCBpbiBnZW5lcmFsLiovXG4gICAgICAgICAgZXZlcnlDb3B5TWFwVmFsdWUodmFsLCBjaGVja0l0KTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgcmV0dXJuIGNoZWNrICE9PSBpZGVudENoZWNrZXIgJiYgY2hlY2soZmFsc2UsIHJlZGFjdGVkYEEgcGFzc2FibGUgdGFnZ2VkICR7cXVvdGUodGFnKX0gaXMgbm90IGEga2V5OiAke3ZhbH1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICBjYXNlIFwicHJvbWlzZVwiOiB7XG4gICAgICByZXR1cm4gY2hlY2soZmFsc2UsIHJlZGFjdGVkYEEgJHtxdW90ZShwYXNzU3R5bGUpfSBjYW5ub3QgYmUgYSBrZXlgKTtcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGB1bmV4cGVjdGVkIHBhc3NTdHlsZSAke3F1b3RlKHBhc3NTdHlsZSl9OiAke3ZhbH1gO1xuICAgIH1cbiAgfVxufTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL2NvbW1vbi9tYWtlLWl0ZXJhdG9yLmpzKi9cbnZhciBtYWtlSXRlcmF0b3IgPSAobmV4dCkgPT4ge1xuICBjb25zdCBpdGVyID0gaGFyZGVuKHtcbiAgICBbU3ltYm9sLml0ZXJhdG9yXTogKCkgPT4gaXRlcixcbiAgICBuZXh0XG4gIH0pO1xuICByZXR1cm4gaXRlcjtcbn07XG5oYXJkZW4obWFrZUl0ZXJhdG9yKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL2NvbW1vbi9tYWtlLWFycmF5LWl0ZXJhdG9yLmpzKi9cbnZhciBtYWtlQXJyYXlJdGVyYXRvciA9IChhcnIpID0+IHtcbiAgY29uc3QgeyBsZW5ndGggfSA9IGFycjtcbiAgbGV0IGkzID0gMDtcbiAgcmV0dXJuIG1ha2VJdGVyYXRvcigoKSA9PiB7XG4gICAgbGV0IHZhbHVlO1xuICAgIGlmIChpMyA8IGxlbmd0aCkge1xuICAgICAgdmFsdWUgPSBhcnJbaTNdO1xuICAgICAgaTMgKz0gMTtcbiAgICAgIHJldHVybiBoYXJkZW4oeyBkb25lOiBmYWxzZSwgdmFsdWUgfSk7XG4gICAgfVxuICAgIHJldHVybiBoYXJkZW4oeyBkb25lOiB0cnVlLCB2YWx1ZSB9KTtcbiAgfSk7XG59O1xuaGFyZGVuKG1ha2VBcnJheUl0ZXJhdG9yKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL3BhdHRlcm5zL3NyYy9rZXlzL2tleWNvbGxlY3Rpb24tb3BlcmF0b3JzLmpzKi9cbnZhciBnZW5lcmF0ZUZ1bGxTb3J0ZWRFbnRyaWVzID0gKGVudHJpZXMxMSwgcmFua0NvbXBhcmUsIGZ1bGxDb21wYXJlKSA9PiB7XG4gIGFzc2VydFJhbmtTb3J0ZWQoZW50cmllczExLCByYW5rQ29tcGFyZSk7XG4gIGNvbnN0IHsgbGVuZ3RoIH0gPSBlbnRyaWVzMTE7XG4gIGxldCBpMyA9IDA7XG4gIGxldCBzYW1lUmFua0l0ZXJhdG9yO1xuICByZXR1cm4gbWFrZUl0ZXJhdG9yKCgpID0+IHtcbiAgICBpZiAoc2FtZVJhbmtJdGVyYXRvcikge1xuICAgICAgY29uc3QgcmVzdWx0ID0gc2FtZVJhbmtJdGVyYXRvci5uZXh0KCk7XG4gICAgICBpZiAoIXJlc3VsdC5kb25lKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBzYW1lUmFua0l0ZXJhdG9yID0gdm9pZCAwO1xuICAgIH1cbiAgICBpZiAoaTMgPCBsZW5ndGgpIHtcbiAgICAgIGNvbnN0IGVudHJ5ID0gZW50cmllczExW2kzXTtcbiAgICAgIGxldCBqID0gaTMgKyAxO1xuICAgICAgd2hpbGUgKGogPCBsZW5ndGggJiYgcmFua0NvbXBhcmUoZW50cnlbMF0sIGVudHJpZXMxMVtqXVswXSkgPT09IDApIHtcbiAgICAgICAgaiArPSAxO1xuICAgICAgfVxuICAgICAgaWYgKGogPT09IGkzICsgMSkge1xuICAgICAgICBpMyA9IGo7XG4gICAgICAgIHJldHVybiBoYXJkZW4oeyBkb25lOiBmYWxzZSwgdmFsdWU6IGVudHJ5IH0pO1xuICAgICAgfVxuICAgICAgY29uc3QgdGllcyA9IGVudHJpZXMxMS5zbGljZShpMywgaik7XG4gICAgICBpMyA9IGo7XG4gICAgICBjb25zdCBzb3J0ZWRUaWVzID0gc29ydEJ5UmFuayh0aWVzLCBmdWxsQ29tcGFyZSk7XG4gICAgICBmb3IgKGxldCBrID0gMTsgayA8IHNvcnRlZFRpZXMubGVuZ3RoOyBrICs9IDEpIHtcbiAgICAgICAgY29uc3QgW2tleTBdID0gc29ydGVkVGllc1trIC0gMV07XG4gICAgICAgIGNvbnN0IFtrZXkxXSA9IHNvcnRlZFRpZXNba107XG4gICAgICAgIE1hdGguc2lnbihmdWxsQ29tcGFyZShrZXkwLCBrZXkxKSkgfHwgdGhyb3dSZWRhY3RlZGBEdXBsaWNhdGUgZW50cnkga2V5OiAke2tleTB9YDtcbiAgICAgIH1cbiAgICAgIHNhbWVSYW5rSXRlcmF0b3IgPSBtYWtlQXJyYXlJdGVyYXRvcihzb3J0ZWRUaWVzKTtcbiAgICAgIHJldHVybiBzYW1lUmFua0l0ZXJhdG9yLm5leHQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhcmRlbih7IGRvbmU6IHRydWUsIHZhbHVlOiB2b2lkIDAgfSk7XG4gIH0pO1xufTtcbmhhcmRlbihnZW5lcmF0ZUZ1bGxTb3J0ZWRFbnRyaWVzKTtcbnZhciBnZW5lcmF0ZUNvbGxlY3Rpb25QYWlyRW50cmllcyA9IChjMSwgYzIsIGdldEVudHJpZXMsIGFic2VudFZhbHVlKSA9PiB7XG4gIGNvbnN0IGUxID0gZ2V0RW50cmllcyhjMSk7XG4gIGNvbnN0IGUyID0gZ2V0RW50cmllcyhjMik7XG4gIGNvbnN0IGZ1bGxDb21wYXJlID0gbWFrZUZ1bGxPcmRlckNvbXBhcmF0b3JLaXQoKS5hbnRpQ29tcGFyYXRvcjtcbiAgY29uc3QgeCA9IGdlbmVyYXRlRnVsbFNvcnRlZEVudHJpZXMoZTEsIGNvbXBhcmVBbnRpUmFuaywgZnVsbENvbXBhcmUpO1xuICBjb25zdCB5ID0gZ2VuZXJhdGVGdWxsU29ydGVkRW50cmllcyhlMiwgY29tcGFyZUFudGlSYW5rLCBmdWxsQ29tcGFyZSk7XG4gIGxldCB4RG9uZTtcbiAgbGV0IHhLZXk7XG4gIGxldCB4VmFsdWU7XG4gIGxldCB5RG9uZTtcbiAgbGV0IHlLZXk7XG4gIGxldCB5VmFsdWU7XG4gIGNvbnN0IG5vbkVudHJ5ID0gW3ZvaWQgMCwgdm9pZCAwXTtcbiAgY29uc3QgbmV4dFggPSAoKSA9PiB7XG4gICAgIXhEb25lIHx8IHRocm93UmVkYWN0ZWRgSW50ZXJuYWw6IG5leHRYIG11c3Qgbm90IGJlIGNhbGxlZCBvbmNlIGRvbmVgO1xuICAgIGNvbnN0IHJlc3VsdCA9IHhWYWx1ZTtcbiAgICAoeyBkb25lOiB4RG9uZSwgdmFsdWU6IFt4S2V5LCB4VmFsdWVdID0gbm9uRW50cnkgfSA9IHgubmV4dCgpKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBuZXh0WCgpO1xuICBjb25zdCBuZXh0WSA9ICgpID0+IHtcbiAgICAheURvbmUgfHwgdGhyb3dSZWRhY3RlZGBJbnRlcm5hbDogbmV4dFkgbXVzdCBub3QgYmUgY2FsbGVkIG9uY2UgZG9uZWA7XG4gICAgY29uc3QgcmVzdWx0ID0geVZhbHVlO1xuICAgICh7IGRvbmU6IHlEb25lLCB2YWx1ZTogW3lLZXksIHlWYWx1ZV0gPSBub25FbnRyeSB9ID0geS5uZXh0KCkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG5leHRZKCk7XG4gIHJldHVybiBtYWtlSXRlcmF0b3IoKCkgPT4ge1xuICAgIGxldCBkb25lID0gZmFsc2U7XG4gICAgbGV0IHZhbHVlO1xuICAgIGlmICh4RG9uZSAmJiB5RG9uZSkge1xuICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB2YWx1ZSA9IFt2b2lkIDAsIGFic2VudFZhbHVlLCBhYnNlbnRWYWx1ZV07XG4gICAgfSBlbHNlIGlmICh4RG9uZSkge1xuICAgICAgdmFsdWUgPSBbeUtleSwgYWJzZW50VmFsdWUsIG5leHRZKCldO1xuICAgIH0gZWxzZSBpZiAoeURvbmUpIHtcbiAgICAgIHZhbHVlID0gW3hLZXksIG5leHRYKCksIGFic2VudFZhbHVlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY29tcCA9IGZ1bGxDb21wYXJlKHhLZXksIHlLZXkpO1xuICAgICAgaWYgKGNvbXAgPT09IDApIHtcbiAgICAgICAgdmFsdWUgPSBbeEtleSwgbmV4dFgoKSwgbmV4dFkoKV07XG4gICAgICB9IGVsc2UgaWYgKGNvbXAgPCAwKSB7XG4gICAgICAgIHZhbHVlID0gW3hLZXksIG5leHRYKCksIGFic2VudFZhbHVlXTtcbiAgICAgIH0gZWxzZSBpZiAoY29tcCA+IDApIHtcbiAgICAgICAgdmFsdWUgPSBbeUtleSwgYWJzZW50VmFsdWUsIG5leHRZKCldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBVbmV4cGVjdGVkIGtleSBjb21wYXJpc29uICR7cXVvdGUoY29tcCl9IGZvciAke3hLZXl9IHZzICR7eUtleX1gO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaGFyZGVuKHsgZG9uZSwgdmFsdWUgfSk7XG4gIH0pO1xufTtcbmhhcmRlbihnZW5lcmF0ZUNvbGxlY3Rpb25QYWlyRW50cmllcyk7XG52YXIgbWFrZUNvbXBhcmVDb2xsZWN0aW9uID0gKGdldEVudHJpZXMsIGFic2VudFZhbHVlLCBjb21wYXJlVmFsdWVzMikgPT4gaGFyZGVuKChsZWZ0LCByaWdodCkgPT4ge1xuICBjb25zdCBtZXJnZWQgPSBnZW5lcmF0ZUNvbGxlY3Rpb25QYWlyRW50cmllcyhcbiAgICBsZWZ0LFxuICAgIHJpZ2h0LFxuICAgIGdldEVudHJpZXMsXG4gICAgYWJzZW50VmFsdWVcbiAgKTtcbiAgbGV0IGxlZnRJc0JpZ2dlciA9IGZhbHNlO1xuICBsZXQgcmlnaHRJc0JpZ2dlciA9IGZhbHNlO1xuICBmb3IgKGNvbnN0IFtfa2V5LCBsZWZ0VmFsdWUsIHJpZ2h0VmFsdWVdIG9mIG1lcmdlZCkge1xuICAgIGNvbnN0IGNvbXAgPSBjb21wYXJlVmFsdWVzMihsZWZ0VmFsdWUsIHJpZ2h0VmFsdWUpO1xuICAgIGlmIChjb21wID09PSAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9IGVsc2UgaWYgKGNvbXAgPCAwKSB7XG4gICAgICByaWdodElzQmlnZ2VyID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGNvbXAgPiAwKSB7XG4gICAgICBsZWZ0SXNCaWdnZXIgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBOdW1iZXIuaXNOYU4oY29tcCkgfHwgLyogcHJldHRpZXItaWdub3JlKi9cbiAgICAgIHRocm93UmVkYWN0ZWRgVW5leHBlY3RlZCB2YWx1ZSBjb21wYXJpc29uICR7cXVvdGUoY29tcCl9IGZvciAke2xlZnRWYWx1ZX0gdnMgJHtyaWdodFZhbHVlfWA7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICBpZiAobGVmdElzQmlnZ2VyICYmIHJpZ2h0SXNCaWdnZXIpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICB9XG4gIHJldHVybiBsZWZ0SXNCaWdnZXIgPyAxIDogcmlnaHRJc0JpZ2dlciA/IC0xIDogMDtcbn0pO1xuaGFyZGVuKG1ha2VDb21wYXJlQ29sbGVjdGlvbik7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9wYXR0ZXJucy9zcmMva2V5cy9jb21wYXJlS2V5cy5qcyovXG52YXIgc2V0Q29tcGFyZSA9IG1ha2VDb21wYXJlQ29sbGVjdGlvbihcbiAgLyoqIEB0eXBlIHs8SyBleHRlbmRzIEtleT4oczogQ29weVNldDxLPikgPT4gQXJyYXk8W0ssIDFdPn0gKi9cbiAgKChzMykgPT4gaGFyZGVuKGdldENvcHlTZXRLZXlzKHMzKS5tYXAoKGtleSkgPT4gW2tleSwgMV0pKSksXG4gIDAsXG4gIGNvbXBhcmVOdW1lcmljc1xuKTtcbmhhcmRlbihzZXRDb21wYXJlKTtcbnZhciBiYWdDb21wYXJlID0gbWFrZUNvbXBhcmVDb2xsZWN0aW9uKFxuICBnZXRDb3B5QmFnRW50cmllcyxcbiAgMG4sXG4gIGNvbXBhcmVOdW1lcmljc1xuKTtcbmhhcmRlbihiYWdDb21wYXJlKTtcbnZhciBBQlNFTlQgPSBTeW1ib2woXCJhYnNlbnRcIik7XG52YXIgX21hcENvbXBhcmUgPSBtYWtlQ29tcGFyZUNvbGxlY3Rpb24oXG4gIGdldENvcHlNYXBFbnRyeUFycmF5LFxuICBBQlNFTlQsXG4gIChsZWZ0VmFsdWUsIHJpZ2h0VmFsdWUpID0+IHtcbiAgICBpZiAobGVmdFZhbHVlID09PSBBQlNFTlQgJiYgcmlnaHRWYWx1ZSA9PT0gQUJTRU5UKSB7XG4gICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYEludGVybmFsOiBVbmV4cGVjdGVkIGFic2VudCBlbnRyeSBwYWlyYDtcbiAgICB9IGVsc2UgaWYgKGxlZnRWYWx1ZSA9PT0gQUJTRU5UKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfSBlbHNlIGlmIChyaWdodFZhbHVlID09PSBBQlNFTlQpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY29tcGFyZUtleXMobGVmdFZhbHVlLCByaWdodFZhbHVlKTtcbiAgICB9XG4gIH1cbik7XG5oYXJkZW4oX21hcENvbXBhcmUpO1xudmFyIGNvbXBhcmVLZXlzID0gKGxlZnQsIHJpZ2h0KSA9PiB7XG4gIGFzc2VydEtleShsZWZ0KTtcbiAgYXNzZXJ0S2V5KHJpZ2h0KTtcbiAgY29uc3QgbGVmdFN0eWxlID0gcGFzc1N0eWxlT2YobGVmdCk7XG4gIGNvbnN0IHJpZ2h0U3R5bGUgPSBwYXNzU3R5bGVPZihyaWdodCk7XG4gIGlmIChsZWZ0U3R5bGUgIT09IHJpZ2h0U3R5bGUpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG4gIHN3aXRjaCAobGVmdFN0eWxlKSB7XG4gICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgIGNhc2UgXCJudWxsXCI6XG4gICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICBjYXNlIFwiYmlnaW50XCI6XG4gICAgY2FzZSBcInN0cmluZ1wiOlxuICAgIGNhc2UgXCJieXRlQXJyYXlcIjpcbiAgICBjYXNlIFwic3ltYm9sXCI6IHtcbiAgICAgIHJldHVybiBjb21wYXJlUmFuayhsZWZ0LCByaWdodCk7XG4gICAgfVxuICAgIGNhc2UgXCJudW1iZXJcIjoge1xuICAgICAgY29uc3QgcmFua0NvbXAgPSBjb21wYXJlUmFuayhsZWZ0LCByaWdodCk7XG4gICAgICBpZiAocmFua0NvbXAgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBpZiAoTnVtYmVyLmlzTmFOKGxlZnQpIHx8IE51bWJlci5pc05hTihyaWdodCkpIHtcbiAgICAgICAgYXNzZXJ0KCFOdW1iZXIuaXNOYU4obGVmdCkgfHwgIU51bWJlci5pc05hTihyaWdodCkpO1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJhbmtDb21wO1xuICAgIH1cbiAgICBjYXNlIFwicmVtb3RhYmxlXCI6IHtcbiAgICAgIGlmIChsZWZ0ID09PSByaWdodCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIGNhc2UgXCJjb3B5QXJyYXlcIjoge1xuICAgICAgY29uc3QgbGVuID0gTWF0aC5taW4obGVmdC5sZW5ndGgsIHJpZ2h0Lmxlbmd0aCk7XG4gICAgICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgbGVuOyBpMyArPSAxKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbXBhcmVLZXlzKGxlZnRbaTNdLCByaWdodFtpM10pO1xuICAgICAgICBpZiAocmVzdWx0ICE9PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbXBhcmVSYW5rKGxlZnQubGVuZ3RoLCByaWdodC5sZW5ndGgpO1xuICAgIH1cbiAgICBjYXNlIFwiY29weVJlY29yZFwiOiB7XG4gICAgICBjb25zdCBsZWZ0TmFtZXMgPSByZWNvcmROYW1lcyhsZWZ0KTtcbiAgICAgIGNvbnN0IHJpZ2h0TmFtZXMgPSByZWNvcmROYW1lcyhyaWdodCk7XG4gICAgICBpZiAoIWtleUVRKGxlZnROYW1lcywgcmlnaHROYW1lcykpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxlZnRWYWx1ZXMgPSByZWNvcmRWYWx1ZXMobGVmdCwgbGVmdE5hbWVzKTtcbiAgICAgIGNvbnN0IHJpZ2h0VmFsdWVzID0gcmVjb3JkVmFsdWVzKHJpZ2h0LCByaWdodE5hbWVzKTtcbiAgICAgIGxldCByZXN1bHQgPSAwO1xuICAgICAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IGxlZnRWYWx1ZXMubGVuZ3RoOyBpMyArPSAxKSB7XG4gICAgICAgIGNvbnN0IGNvbXAgPSBjb21wYXJlS2V5cyhsZWZ0VmFsdWVzW2kzXSwgcmlnaHRWYWx1ZXNbaTNdKTtcbiAgICAgICAgaWYgKE51bWJlci5pc05hTihjb21wKSkge1xuICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gY29tcCAmJiBjb21wICE9PSAwKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gMCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gY29tcDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXNzZXJ0KFxuICAgICAgICAgICAgICByZXN1bHQgPT09IC0xICYmIGNvbXAgPT09IDEgfHwgcmVzdWx0ID09PSAxICYmIGNvbXAgPT09IC0xXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNhc2UgXCJ0YWdnZWRcIjoge1xuICAgICAgY29uc3QgbGVmdFRhZyA9IGdldFRhZyhsZWZ0KTtcbiAgICAgIGNvbnN0IHJpZ2h0VGFnID0gZ2V0VGFnKHJpZ2h0KTtcbiAgICAgIGlmIChsZWZ0VGFnICE9PSByaWdodFRhZykge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChsZWZ0VGFnKSB7XG4gICAgICAgIGNhc2UgXCJjb3B5U2V0XCI6IHtcbiAgICAgICAgICByZXR1cm4gc2V0Q29tcGFyZShsZWZ0LCByaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImNvcHlCYWdcIjoge1xuICAgICAgICAgIHJldHVybiBiYWdDb21wYXJlKGxlZnQsIHJpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiY29weU1hcFwiOiB7XG4gICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBNYXAgY29tcGFyaXNvbiBub3QgeWV0IGltcGxlbWVudGVkOiAke2xlZnR9IHZzICR7cmlnaHR9YDtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGB1bmV4cGVjdGVkIHRhZyAke3F1b3RlKGxlZnRUYWcpfTogJHtsZWZ0fWA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGB1bmV4cGVjdGVkIHBhc3NTdHlsZSAke3F1b3RlKGxlZnRTdHlsZSl9OiAke2xlZnR9YDtcbiAgICB9XG4gIH1cbn07XG5oYXJkZW4oY29tcGFyZUtleXMpO1xudmFyIGtleUxUID0gKGxlZnQsIHJpZ2h0KSA9PiBjb21wYXJlS2V5cyhsZWZ0LCByaWdodCkgPCAwO1xuaGFyZGVuKGtleUxUKTtcbnZhciBrZXlMVEUgPSAobGVmdCwgcmlnaHQpID0+IGNvbXBhcmVLZXlzKGxlZnQsIHJpZ2h0KSA8PSAwO1xuaGFyZGVuKGtleUxURSk7XG52YXIga2V5RVEgPSAobGVmdCwgcmlnaHQpID0+IGNvbXBhcmVLZXlzKGxlZnQsIHJpZ2h0KSA9PT0gMDtcbmhhcmRlbihrZXlFUSk7XG52YXIga2V5R1RFID0gKGxlZnQsIHJpZ2h0KSA9PiBjb21wYXJlS2V5cyhsZWZ0LCByaWdodCkgPj0gMDtcbmhhcmRlbihrZXlHVEUpO1xudmFyIGtleUdUID0gKGxlZnQsIHJpZ2h0KSA9PiBjb21wYXJlS2V5cyhsZWZ0LCByaWdodCkgPiAwO1xuaGFyZGVuKGtleUdUKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL3BhdHRlcm5zL3NyYy9rZXlzL21lcmdlLXNldC1vcGVyYXRvcnMuanMqL1xudmFyIHdpbmRvd1Jlc29ydCA9IChlbGVtZW50cywgcmFua0NvbXBhcmUsIGZ1bGxDb21wYXJlKSA9PiB7XG4gIGFzc2VydFJhbmtTb3J0ZWQoZWxlbWVudHMsIHJhbmtDb21wYXJlKTtcbiAgY29uc3QgeyBsZW5ndGggfSA9IGVsZW1lbnRzO1xuICBsZXQgaTMgPSAwO1xuICBsZXQgb3B0SW5uZXJJdGVyYXRvcjtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgW1N5bWJvbC5pdGVyYXRvcl06ICgpID0+IGhhcmRlbih7XG4gICAgICBuZXh0OiAoKSA9PiB7XG4gICAgICAgIGlmIChvcHRJbm5lckl0ZXJhdG9yKSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gb3B0SW5uZXJJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICBvcHRJbm5lckl0ZXJhdG9yID0gdm9pZCAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaTMgPCBsZW5ndGgpIHtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGVsZW1lbnRzW2kzXTtcbiAgICAgICAgICBsZXQgaiA9IGkzICsgMTtcbiAgICAgICAgICB3aGlsZSAoaiA8IGxlbmd0aCAmJiByYW5rQ29tcGFyZSh2YWx1ZSwgZWxlbWVudHNbal0pID09PSAwKSB7XG4gICAgICAgICAgICBqICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChqID09PSBpMyArIDEpIHtcbiAgICAgICAgICAgIGkzID0gajtcbiAgICAgICAgICAgIHJldHVybiBoYXJkZW4oeyBkb25lOiBmYWxzZSwgdmFsdWUgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHNpbWlsYXJSdW4gPSBlbGVtZW50cy5zbGljZShpMywgaik7XG4gICAgICAgICAgaTMgPSBqO1xuICAgICAgICAgIGNvbnN0IHJlc29ydGVkID0gc29ydEJ5UmFuayhzaW1pbGFyUnVuLCBmdWxsQ29tcGFyZSk7XG4gICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGVzKHJlc29ydGVkLCBmdWxsQ29tcGFyZSk7XG4gICAgICAgICAgb3B0SW5uZXJJdGVyYXRvciA9IHJlc29ydGVkW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICAgICAgICByZXR1cm4gb3B0SW5uZXJJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbih7IGRvbmU6IHRydWUsIHZhbHVlOiBudWxsIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfSk7XG59O1xudmFyIG1lcmdlID0gKHhlbGVtZW50cywgeWVsZW1lbnRzKSA9PiB7XG4gIGNvbnN0IGZ1bGxDb21wYXJlID0gbWFrZUZ1bGxPcmRlckNvbXBhcmF0b3JLaXQoKS5hbnRpQ29tcGFyYXRvcjtcbiAgY29uc3QgeHMgPSB3aW5kb3dSZXNvcnQoeGVsZW1lbnRzLCBjb21wYXJlQW50aVJhbmssIGZ1bGxDb21wYXJlKTtcbiAgY29uc3QgeXMgPSB3aW5kb3dSZXNvcnQoeWVsZW1lbnRzLCBjb21wYXJlQW50aVJhbmssIGZ1bGxDb21wYXJlKTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgW1N5bWJvbC5pdGVyYXRvcl06ICgpID0+IHtcbiAgICAgIGxldCB4O1xuICAgICAgbGV0IHhEb25lO1xuICAgICAgbGV0IHk7XG4gICAgICBsZXQgeURvbmU7XG4gICAgICBjb25zdCB4aSA9IHhzW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICAgIGNvbnN0IG5leHRYID0gKCkgPT4ge1xuICAgICAgICAheERvbmUgfHwgdGhyb3dSZWRhY3RlZGBJbnRlcm5hbDogbmV4dFggc2hvdWxkIG5vdCBiZSBjYWxsZWQgb25jZSBkb25lYDtcbiAgICAgICAgKHsgZG9uZTogeERvbmUsIHZhbHVlOiB4IH0gPSB4aS5uZXh0KCkpO1xuICAgICAgfTtcbiAgICAgIG5leHRYKCk7XG4gICAgICBjb25zdCB5aSA9IHlzW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICAgIGNvbnN0IG5leHRZID0gKCkgPT4ge1xuICAgICAgICAheURvbmUgfHwgdGhyb3dSZWRhY3RlZGBJbnRlcm5hbDogbmV4dFkgc2hvdWxkIG5vdCBiZSBjYWxsZWQgb25jZSBkb25lYDtcbiAgICAgICAgKHsgZG9uZTogeURvbmUsIHZhbHVlOiB5IH0gPSB5aS5uZXh0KCkpO1xuICAgICAgfTtcbiAgICAgIG5leHRZKCk7XG4gICAgICByZXR1cm4gaGFyZGVuKHtcbiAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgIGxldCBkb25lID0gZmFsc2U7XG4gICAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICAgIGlmICh4RG9uZSAmJiB5RG9uZSkge1xuICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICB2YWx1ZSA9IFtudWxsLCAwbiwgMG5dO1xuICAgICAgICAgIH0gZWxzZSBpZiAoeERvbmUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gW3ksIDBuLCAxbl07XG4gICAgICAgICAgICBuZXh0WSgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoeURvbmUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gW3gsIDFuLCAwbl07XG4gICAgICAgICAgICBuZXh0WCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjb21wID0gZnVsbENvbXBhcmUoeCwgeSk7XG4gICAgICAgICAgICBpZiAoY29tcCA9PT0gMCkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IFt4LCAxbiwgMW5dO1xuICAgICAgICAgICAgICBuZXh0WCgpO1xuICAgICAgICAgICAgICBuZXh0WSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb21wIDwgMCkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IFt4LCAxbiwgMG5dO1xuICAgICAgICAgICAgICBuZXh0WCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29tcCA+IDAgfHwgdGhyb3dSZWRhY3RlZGBJbnRlcm5hbDogVW5leHBlY3RlZCBjb21wICR7cXVvdGUoY29tcCl9YDtcbiAgICAgICAgICAgICAgdmFsdWUgPSBbeSwgMG4sIDFuXTtcbiAgICAgICAgICAgICAgbmV4dFkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbih7IGRvbmUsIHZhbHVlIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufTtcbmhhcmRlbihtZXJnZSk7XG52YXIgaXRlcklzU3VwZXJzZXQgPSAoeHlpKSA9PiB7XG4gIGZvciAoY29uc3QgW19tLCB4YywgX3ljXSBvZiB4eWkpIHtcbiAgICBpZiAoeGMgPT09IDBuKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBpdGVySXNEaXNqb2ludCA9ICh4eWkpID0+IHtcbiAgZm9yIChjb25zdCBbX20sIHhjLCB5Y10gb2YgeHlpKSB7XG4gICAgaWYgKHhjID49IDFuICYmIHljID49IDFuKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBpdGVyQ29tcGFyZSA9ICh4eWkpID0+IHtcbiAgbGV0IGxvbmVZID0gZmFsc2U7XG4gIGxldCBsb25lWCA9IGZhbHNlO1xuICBmb3IgKGNvbnN0IFtfbSwgeGMsIHljXSBvZiB4eWkpIHtcbiAgICBpZiAoeGMgPT09IDBuKSB7XG4gICAgICBsb25lWSA9IHRydWU7XG4gICAgfVxuICAgIGlmICh5YyA9PT0gMG4pIHtcbiAgICAgIGxvbmVYID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGxvbmVYICYmIGxvbmVZKSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgfVxuICBpZiAobG9uZVgpIHtcbiAgICByZXR1cm4gMTtcbiAgfSBlbHNlIGlmIChsb25lWSkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIHtcbiAgICAhbG9uZVggJiYgIWxvbmVZIHx8IHRocm93UmVkYWN0ZWRgSW50ZXJuYWw6IFVuZXhwZWN0ZWQgbG9uZSBwYWlyICR7cXVvdGUoW2xvbmVYLCBsb25lWV0pfWA7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn07XG52YXIgaXRlclVuaW9uID0gKHh5aSkgPT4ge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgZm9yIChjb25zdCBbbTIsIHhjLCB5Y10gb2YgeHlpKSB7XG4gICAgaWYgKHhjID49IDBuKSB7XG4gICAgICByZXN1bHQucHVzaChtMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHljID49IDBuIHx8IHRocm93UmVkYWN0ZWRgSW50ZXJuYWw6IFVuZXhwZWN0ZWQgY291bnQgJHtxdW90ZSh5Yyl9YDtcbiAgICAgIHJlc3VsdC5wdXNoKG0yKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgaXRlckRpc2pvaW50VW5pb24gPSAoeHlpKSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBmb3IgKGNvbnN0IFttMiwgeGMsIHljXSBvZiB4eWkpIHtcbiAgICB4YyA9PT0gMG4gfHwgeWMgPT09IDBuIHx8IHRocm93UmVkYWN0ZWRgU2V0cyBtdXN0IG5vdCBoYXZlIGNvbW1vbiBlbGVtZW50czogJHttMn1gO1xuICAgIGlmICh4YyA+PSAxbikge1xuICAgICAgcmVzdWx0LnB1c2gobTIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB5YyA+PSAxbiB8fCB0aHJvd1JlZGFjdGVkYEludGVybmFsOiBVbmV4cGVjdGVkIGNvdW50ICR7cXVvdGUoeWMpfWA7XG4gICAgICByZXN1bHQucHVzaChtMik7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xudmFyIGl0ZXJJbnRlcnNlY3Rpb24gPSAoeHlpKSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBmb3IgKGNvbnN0IFttMiwgeGMsIHljXSBvZiB4eWkpIHtcbiAgICBpZiAoeGMgPj0gMW4gJiYgeWMgPj0gMW4pIHtcbiAgICAgIHJlc3VsdC5wdXNoKG0yKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgaXRlckRpc2pvaW50U3VidHJhY3QgPSAoeHlpKSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBmb3IgKGNvbnN0IFttMiwgeGMsIHljXSBvZiB4eWkpIHtcbiAgICB4YyA+PSAxbiB8fCB0aHJvd1JlZGFjdGVkYHJpZ2h0IGVsZW1lbnQgJHttMn0gd2FzIG5vdCBpbiBsZWZ0YDtcbiAgICBpZiAoeWMgPT09IDBuKSB7XG4gICAgICByZXN1bHQucHVzaChtMik7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xudmFyIG1lcmdlaWZ5ID0gKGl0ZXJPcCkgPT4gKHhlbGVtZW50cywgeWVsZW1lbnRzKSA9PiBpdGVyT3AobWVyZ2UoeGVsZW1lbnRzLCB5ZWxlbWVudHMpKTtcbnZhciBlbGVtZW50c0lzU3VwZXJzZXQgPSBtZXJnZWlmeShpdGVySXNTdXBlcnNldCk7XG52YXIgZWxlbWVudHNJc0Rpc2pvaW50ID0gbWVyZ2VpZnkoaXRlcklzRGlzam9pbnQpO1xudmFyIGVsZW1lbnRzQ29tcGFyZSA9IG1lcmdlaWZ5KGl0ZXJDb21wYXJlKTtcbnZhciBlbGVtZW50c1VuaW9uID0gbWVyZ2VpZnkoaXRlclVuaW9uKTtcbnZhciBlbGVtZW50c0Rpc2pvaW50VW5pb24gPSBtZXJnZWlmeShpdGVyRGlzam9pbnRVbmlvbik7XG52YXIgZWxlbWVudHNJbnRlcnNlY3Rpb24gPSBtZXJnZWlmeShpdGVySW50ZXJzZWN0aW9uKTtcbnZhciBlbGVtZW50c0Rpc2pvaW50U3VidHJhY3QgPSBtZXJnZWlmeShpdGVyRGlzam9pbnRTdWJ0cmFjdCk7XG52YXIgcmF3U2V0aWZ5ID0gKGVsZW1lbnRzT3ApID0+ICh4c2V0LCB5c2V0KSA9PiBlbGVtZW50c09wKHhzZXQucGF5bG9hZCwgeXNldC5wYXlsb2FkKTtcbnZhciBzZXRpZnkgPSAoZWxlbWVudHNPcCkgPT4gKHhzZXQsIHlzZXQpID0+IG1ha2VTZXRPZkVsZW1lbnRzKGVsZW1lbnRzT3AoeHNldC5wYXlsb2FkLCB5c2V0LnBheWxvYWQpKTtcbnZhciBzZXRJc1N1cGVyc2V0ID0gcmF3U2V0aWZ5KGVsZW1lbnRzSXNTdXBlcnNldCk7XG52YXIgc2V0SXNEaXNqb2ludCA9IHJhd1NldGlmeShlbGVtZW50c0lzRGlzam9pbnQpO1xudmFyIHNldFVuaW9uID0gc2V0aWZ5KGVsZW1lbnRzVW5pb24pO1xudmFyIHNldERpc2pvaW50VW5pb24gPSBzZXRpZnkoZWxlbWVudHNEaXNqb2ludFVuaW9uKTtcbnZhciBzZXRJbnRlcnNlY3Rpb24gPSBzZXRpZnkoZWxlbWVudHNJbnRlcnNlY3Rpb24pO1xudmFyIHNldERpc2pvaW50U3VidHJhY3QgPSBzZXRpZnkoZWxlbWVudHNEaXNqb2ludFN1YnRyYWN0KTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL3BhdHRlcm5zL3NyYy9rZXlzL21lcmdlLWJhZy1vcGVyYXRvcnMuanMqL1xudmFyIGJhZ1dpbmRvd1Jlc29ydCA9IChiYWdFbnRyaWVzLCByYW5rQ29tcGFyZSwgZnVsbENvbXBhcmUpID0+IHtcbiAgYXNzZXJ0UmFua1NvcnRlZChiYWdFbnRyaWVzLCByYW5rQ29tcGFyZSk7XG4gIGNvbnN0IHsgbGVuZ3RoIH0gPSBiYWdFbnRyaWVzO1xuICBsZXQgaTMgPSAwO1xuICBsZXQgb3B0SW5uZXJJdGVyYXRvcjtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgW1N5bWJvbC5pdGVyYXRvcl06ICgpID0+IGhhcmRlbih7XG4gICAgICBuZXh0OiAoKSA9PiB7XG4gICAgICAgIGlmIChvcHRJbm5lckl0ZXJhdG9yKSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gb3B0SW5uZXJJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICBvcHRJbm5lckl0ZXJhdG9yID0gdm9pZCAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaTMgPCBsZW5ndGgpIHtcbiAgICAgICAgICBjb25zdCBlbnRyeSA9IGJhZ0VudHJpZXNbaTNdO1xuICAgICAgICAgIGxldCBqID0gaTMgKyAxO1xuICAgICAgICAgIHdoaWxlIChqIDwgbGVuZ3RoICYmIHJhbmtDb21wYXJlKGVudHJ5WzBdLCBiYWdFbnRyaWVzW2pdWzBdKSA9PT0gMCkge1xuICAgICAgICAgICAgaiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaiA9PT0gaTMgKyAxKSB7XG4gICAgICAgICAgICBpMyA9IGo7XG4gICAgICAgICAgICByZXR1cm4gaGFyZGVuKHsgZG9uZTogZmFsc2UsIHZhbHVlOiBlbnRyeSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgc2ltaWxhclJ1biA9IGJhZ0VudHJpZXMuc2xpY2UoaTMsIGopO1xuICAgICAgICAgIGkzID0gajtcbiAgICAgICAgICBjb25zdCByZXNvcnRlZCA9IHNvcnRCeVJhbmsoc2ltaWxhclJ1biwgZnVsbENvbXBhcmUpO1xuICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlS2V5cyhyZXNvcnRlZCwgZnVsbENvbXBhcmUpO1xuICAgICAgICAgIG9wdElubmVySXRlcmF0b3IgPSByZXNvcnRlZFtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICAgICAgcmV0dXJuIG9wdElubmVySXRlcmF0b3IubmV4dCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBoYXJkZW4oeyBkb25lOiB0cnVlLCB2YWx1ZTogW251bGwsIDBuXSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH0pO1xufTtcbnZhciBtZXJnZTIgPSAoeGJhZ0VudHJpZXMsIHliYWdFbnRyaWVzKSA9PiB7XG4gIGNvbnN0IGZ1bGxDb21wYXJlID0gbWFrZUZ1bGxPcmRlckNvbXBhcmF0b3JLaXQoKS5hbnRpQ29tcGFyYXRvcjtcbiAgY29uc3QgeHMgPSBiYWdXaW5kb3dSZXNvcnQoeGJhZ0VudHJpZXMsIGNvbXBhcmVBbnRpUmFuaywgZnVsbENvbXBhcmUpO1xuICBjb25zdCB5cyA9IGJhZ1dpbmRvd1Jlc29ydCh5YmFnRW50cmllcywgY29tcGFyZUFudGlSYW5rLCBmdWxsQ29tcGFyZSk7XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIFtTeW1ib2wuaXRlcmF0b3JdOiAoKSA9PiB7XG4gICAgICBsZXQgeDtcbiAgICAgIGxldCB4YztcbiAgICAgIGxldCB4RG9uZTtcbiAgICAgIGxldCB5O1xuICAgICAgbGV0IHljO1xuICAgICAgbGV0IHlEb25lO1xuICAgICAgY29uc3QgeGkgPSB4c1tTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICBjb25zdCBuZXh0WCA9ICgpID0+IHtcbiAgICAgICAgIXhEb25lIHx8IHRocm93UmVkYWN0ZWRgSW50ZXJuYWw6IG5leHRYIHNob3VsZCBub3QgYmUgY2FsbGVkIG9uY2UgZG9uZWA7XG4gICAgICAgICh7XG4gICAgICAgICAgZG9uZTogeERvbmUsXG4gICAgICAgICAgdmFsdWU6IFt4LCB4Y11cbiAgICAgICAgfSA9IHhpLm5leHQoKSk7XG4gICAgICB9O1xuICAgICAgbmV4dFgoKTtcbiAgICAgIGNvbnN0IHlpID0geXNbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgY29uc3QgbmV4dFkgPSAoKSA9PiB7XG4gICAgICAgICF5RG9uZSB8fCB0aHJvd1JlZGFjdGVkYEludGVybmFsOiBuZXh0WSBzaG91bGQgbm90IGJlIGNhbGxlZCBvbmNlIGRvbmVgO1xuICAgICAgICAoe1xuICAgICAgICAgIGRvbmU6IHlEb25lLFxuICAgICAgICAgIHZhbHVlOiBbeSwgeWNdXG4gICAgICAgIH0gPSB5aS5uZXh0KCkpO1xuICAgICAgfTtcbiAgICAgIG5leHRZKCk7XG4gICAgICByZXR1cm4gaGFyZGVuKHtcbiAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgIGxldCBkb25lID0gZmFsc2U7XG4gICAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICAgIGlmICh4RG9uZSAmJiB5RG9uZSkge1xuICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICB2YWx1ZSA9IFtudWxsLCAwbiwgMG5dO1xuICAgICAgICAgIH0gZWxzZSBpZiAoeERvbmUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gW3ksIDBuLCB5Y107XG4gICAgICAgICAgICBuZXh0WSgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoeURvbmUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gW3gsIHhjLCAwbl07XG4gICAgICAgICAgICBuZXh0WCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjb21wID0gZnVsbENvbXBhcmUoeCwgeSk7XG4gICAgICAgICAgICBpZiAoY29tcCA9PT0gMCkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IFt4LCB4YywgeWNdO1xuICAgICAgICAgICAgICBuZXh0WCgpO1xuICAgICAgICAgICAgICBuZXh0WSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb21wIDwgMCkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IFt4LCB4YywgMG5dO1xuICAgICAgICAgICAgICBuZXh0WCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29tcCA+IDAgfHwgdGhyb3dSZWRhY3RlZGBJbnRlcm5hbDogVW5leHBlY3RlZCBjb21wICR7cXVvdGUoY29tcCl9YDtcbiAgICAgICAgICAgICAgdmFsdWUgPSBbeSwgMG4sIHljXTtcbiAgICAgICAgICAgICAgbmV4dFkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbih7IGRvbmUsIHZhbHVlIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufTtcbmhhcmRlbihtZXJnZTIpO1xudmFyIGJhZ0l0ZXJJc1N1cGVyYmFnID0gKHh5aSkgPT4ge1xuICBmb3IgKGNvbnN0IFtfbSwgeGMsIHljXSBvZiB4eWkpIHtcbiAgICBpZiAoeGMgPCB5Yykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgYmFnSXRlcklzRGlzam9pbnQgPSAoeHlpKSA9PiB7XG4gIGZvciAoY29uc3QgW19tLCB4YywgeWNdIG9mIHh5aSkge1xuICAgIGlmICh4YyA+PSAxbiAmJiB5YyA+PSAxbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgYmFnSXRlclVuaW9uID0gKHh5aSkgPT4ge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgZm9yIChjb25zdCBbbTIsIHhjLCB5Y10gb2YgeHlpKSB7XG4gICAgcmVzdWx0LnB1c2goW20yLCB4YyArIHljXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgYmFnSXRlckludGVyc2VjdGlvbiA9ICh4eWkpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAoY29uc3QgW20yLCB4YywgeWNdIG9mIHh5aSkge1xuICAgIGNvbnN0IG1jID0geGMgPD0geWMgPyB4YyA6IHljO1xuICAgIHJlc3VsdC5wdXNoKFttMiwgbWNdKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBiYWdJdGVyRGlzam9pbnRTdWJ0cmFjdCA9ICh4eWkpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAoY29uc3QgW20yLCB4YywgeWNdIG9mIHh5aSkge1xuICAgIGNvbnN0IG1jID0geGMgLSB5YztcbiAgICBtYyA+PSAwbiB8fCB0aHJvd1JlZGFjdGVkYHJpZ2h0IGVsZW1lbnQgJHttMn0gd2FzIG5vdCBpbiBsZWZ0YDtcbiAgICBpZiAobWMgPj0gMW4pIHtcbiAgICAgIHJlc3VsdC5wdXNoKFttMiwgbWNdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgbWVyZ2VpZnkyID0gKGJhZ0l0ZXJPcCkgPT4gKHhiYWdFbnRyaWVzLCB5YmFnRW50cmllcykgPT4gYmFnSXRlck9wKG1lcmdlMih4YmFnRW50cmllcywgeWJhZ0VudHJpZXMpKTtcbnZhciBiYWdFbnRyaWVzSXNTdXBlcmJhZyA9IG1lcmdlaWZ5MihiYWdJdGVySXNTdXBlcmJhZyk7XG52YXIgYmFnRW50cmllc0lzRGlzam9pbnQgPSBtZXJnZWlmeTIoYmFnSXRlcklzRGlzam9pbnQpO1xudmFyIGJhZ0VudHJpZXNVbmlvbiA9IG1lcmdlaWZ5MihiYWdJdGVyVW5pb24pO1xudmFyIGJhZ0VudHJpZXNJbnRlcnNlY3Rpb24gPSBtZXJnZWlmeTIoYmFnSXRlckludGVyc2VjdGlvbik7XG52YXIgYmFnRW50cmllc0Rpc2pvaW50U3VidHJhY3QgPSBtZXJnZWlmeTIoYmFnSXRlckRpc2pvaW50U3VidHJhY3QpO1xudmFyIHJhd0JhZ2lmeSA9IChiYWdFbnRyaWVzT3ApID0+ICh4YmFnLCB5YmFnKSA9PiBiYWdFbnRyaWVzT3AoeGJhZy5wYXlsb2FkLCB5YmFnLnBheWxvYWQpO1xudmFyIGJhZ2lmeSA9IChiYWdFbnRyaWVzT3ApID0+ICh4YmFnLCB5YmFnKSA9PiBtYWtlQmFnT2ZFbnRyaWVzKGJhZ0VudHJpZXNPcCh4YmFnLnBheWxvYWQsIHliYWcucGF5bG9hZCkpO1xudmFyIGJhZ0lzU3VwZXJiYWcgPSByYXdCYWdpZnkoYmFnRW50cmllc0lzU3VwZXJiYWcpO1xudmFyIGJhZ0lzRGlzam9pbnQgPSByYXdCYWdpZnkoYmFnRW50cmllc0lzRGlzam9pbnQpO1xudmFyIGJhZ1VuaW9uID0gYmFnaWZ5KGJhZ0VudHJpZXNVbmlvbik7XG52YXIgYmFnSW50ZXJzZWN0aW9uID0gYmFnaWZ5KGJhZ0VudHJpZXNJbnRlcnNlY3Rpb24pO1xudmFyIGJhZ0Rpc2pvaW50U3VidHJhY3QgPSBiYWdpZnkoYmFnRW50cmllc0Rpc2pvaW50U3VidHJhY3QpO1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvQGVuZG8vY29tbW9uL3Rocm93LWxhYmVsZWQuanMqL1xudmFyIHRocm93TGFiZWxlZCA9IChpbm5lckVyciwgbGFiZWwsIGVyckNvbnN0cnVjdG9yID0gdm9pZCAwLCBvcHRpb25zID0gdm9pZCAwKSA9PiB7XG4gIGlmICh0eXBlb2YgbGFiZWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICBsYWJlbCA9IGBbJHtsYWJlbH1dYDtcbiAgfVxuICBjb25zdCBvdXRlckVyciA9IG1ha2VFcnJvcihcbiAgICBgJHtsYWJlbH06ICR7aW5uZXJFcnIubWVzc2FnZX1gLFxuICAgIGVyckNvbnN0cnVjdG9yLFxuICAgIG9wdGlvbnNcbiAgKTtcbiAgbm90ZShvdXRlckVyciwgcmVkYWN0ZWRgQ2F1c2VkIGJ5ICR7aW5uZXJFcnJ9YCk7XG4gIHRocm93IG91dGVyRXJyO1xufTtcbmhhcmRlbih0aHJvd0xhYmVsZWQpO1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvQGVuZG8vY29tbW9uL2FwcGx5LWxhYmVsaW5nLWVycm9yLmpzKi9cbnZhciBhcHBseUxhYmVsaW5nRXJyb3IgPSAoZnVuYywgYXJncywgbGFiZWwgPSB2b2lkIDApID0+IHtcbiAgaWYgKGxhYmVsID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gZnVuYyguLi5hcmdzKTtcbiAgfVxuICBsZXQgcmVzdWx0O1xuICB0cnkge1xuICAgIHJlc3VsdCA9IGZ1bmMoLi4uYXJncyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93TGFiZWxlZChlcnIsIGxhYmVsKTtcbiAgfVxuICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICByZXR1cm4gRS53aGVuKHJlc3VsdCwgdm9pZCAwLCAocmVhc29uKSA9PiB0aHJvd0xhYmVsZWQocmVhc29uLCBsYWJlbCkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5oYXJkZW4oYXBwbHlMYWJlbGluZ0Vycm9yKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL2NvbW1vbi9mcm9tLXVuaXF1ZS1lbnRyaWVzLmpzKi9cbnZhciB7IGZyb21FbnRyaWVzOiBmcm9tRW50cmllczcgfSA9IE9iamVjdDtcbnZhciB7IG93bktleXM6IG93bktleXMxNyB9ID0gUmVmbGVjdDtcbnZhciBmcm9tVW5pcXVlRW50cmllcyA9IChhbGxFbnRyaWVzKSA9PiB7XG4gIGNvbnN0IGVudHJpZXNBcnJheSA9IFsuLi5hbGxFbnRyaWVzXTtcbiAgY29uc3QgcmVzdWx0ID0gaGFyZGVuKGZyb21FbnRyaWVzNyhlbnRyaWVzQXJyYXkpKTtcbiAgaWYgKG93bktleXMxNyhyZXN1bHQpLmxlbmd0aCA9PT0gZW50cmllc0FycmF5Lmxlbmd0aCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgY29uc3QgbmFtZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICBmb3IgKGNvbnN0IFtuYW1lLCBfXSBvZiBlbnRyaWVzQXJyYXkpIHtcbiAgICBpZiAobmFtZXMuaGFzKG5hbWUpKSB7XG4gICAgICB0aHJvd1JlZGFjdGVkYGNvbGxpc2lvbiBvbiBwcm9wZXJ0eSBuYW1lICR7cXVvdGUobmFtZSl9OiAke2VudHJpZXNBcnJheX1gO1xuICAgIH1cbiAgICBuYW1lcy5hZGQobmFtZSk7XG4gIH1cbiAgdGhyb3cgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbDogZmFpbGVkIHRvIGNyZWF0ZSBvYmplY3QgZnJvbSB1bmlxdWUgZW50cmllc2A7XG59O1xuaGFyZGVuKGZyb21VbmlxdWVFbnRyaWVzKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL2NvbW1vbi9saXN0LWRpZmZlcmVuY2UuanMqL1xudmFyIGxpc3REaWZmZXJlbmNlID0gKGxlZnRMaXN0LCByaWdodExpc3QpID0+IHtcbiAgY29uc3QgcmlnaHRTZXQgPSBuZXcgU2V0KHJpZ2h0TGlzdCk7XG4gIHJldHVybiBsZWZ0TGlzdC5maWx0ZXIoKGVsZW1lbnQpID0+ICFyaWdodFNldC5oYXMoZWxlbWVudCkpO1xufTtcbmhhcmRlbihsaXN0RGlmZmVyZW5jZSk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9wYXR0ZXJucy9zcmMvcGF0dGVybnMvcGF0dGVybk1hdGNoZXJzLmpzKi9cbnZhciB7IGVudHJpZXM6IGVudHJpZXM3LCB2YWx1ZXM6IHZhbHVlczIsIGhhc093bjogaGFzT3duOSB9ID0gT2JqZWN0O1xudmFyIHsgb3duS2V5czogb3duS2V5czE4IH0gPSBSZWZsZWN0O1xudmFyIHBhdHRlcm5NZW1vID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrU2V0KCk7XG52YXIgTU07XG52YXIgZGVmYXVsdExpbWl0cyA9IGhhcmRlbih7XG4gIGRlY2ltYWxEaWdpdHNMaW1pdDogMTAwLFxuICBzdHJpbmdMZW5ndGhMaW1pdDogMWU1LFxuICBzeW1ib2xOYW1lTGVuZ3RoTGltaXQ6IDEwMCxcbiAgbnVtUHJvcGVydGllc0xpbWl0OiA4MCxcbiAgcHJvcGVydHlOYW1lTGVuZ3RoTGltaXQ6IDEwMCxcbiAgYXJyYXlMZW5ndGhMaW1pdDogMWU0LFxuICBieXRlTGVuZ3RoTGltaXQ6IDFlNSxcbiAgbnVtU2V0RWxlbWVudHNMaW1pdDogMWU0LFxuICBudW1VbmlxdWVCYWdFbGVtZW50c0xpbWl0OiAxZTQsXG4gIG51bU1hcEVudHJpZXNMaW1pdDogNWUzXG59KTtcbnZhciBsaW1pdCA9IChsaW1pdHMgPSB7fSkgPT4gKFxuICAvKiogQHR5cGUge0FsbExpbWl0c30gKi9cbiAgaGFyZGVuKHsgX19wcm90b19fOiBkZWZhdWx0TGltaXRzLCAuLi5saW1pdHMgfSlcbik7XG52YXIgY2hlY2tJc1dlbGxGb3JtZWRXaXRoTGltaXQgPSAocGF5bG9hZCwgbWFpblBheWxvYWRTaGFwZSwgY2hlY2ssIGxhYmVsKSA9PiB7XG4gIGFzc2VydChBcnJheS5pc0FycmF5KG1haW5QYXlsb2FkU2hhcGUpKTtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHBheWxvYWQpKSB7XG4gICAgcmV0dXJuIGNoZWNrKGZhbHNlLCByZWRhY3RlZGAke3F1b3RlKGxhYmVsKX0gcGF5bG9hZCBtdXN0IGJlIGFuIGFycmF5OiAke3BheWxvYWR9YCk7XG4gIH1cbiAgY29uc3QgbWFpbkxlbmd0aCA9IG1haW5QYXlsb2FkU2hhcGUubGVuZ3RoO1xuICBpZiAoIShwYXlsb2FkLmxlbmd0aCA9PT0gbWFpbkxlbmd0aCB8fCBwYXlsb2FkLmxlbmd0aCA9PT0gbWFpbkxlbmd0aCArIDEpKSB7XG4gICAgcmV0dXJuIGNoZWNrKGZhbHNlLCByZWRhY3RlZGAke3F1b3RlKGxhYmVsKX0gcGF5bG9hZCB1bmV4cGVjdGVkIHNpemU6ICR7cGF5bG9hZH1gKTtcbiAgfVxuICBjb25zdCBsaW1pdHMgPSBwYXlsb2FkW21haW5MZW5ndGhdO1xuICBwYXlsb2FkID0gaGFyZGVuKHBheWxvYWQuc2xpY2UoMCwgbWFpbkxlbmd0aCkpO1xuICBpZiAoIWNoZWNrTWF0Y2hlcyhwYXlsb2FkLCBtYWluUGF5bG9hZFNoYXBlLCBjaGVjaywgbGFiZWwpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChsaW1pdHMgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiAocGFzc1N0eWxlT2YobGltaXRzKSA9PT0gXCJjb3B5UmVjb3JkXCIgfHwgY2hlY2soZmFsc2UsIHJlZGFjdGVkYExpbWl0cyBtdXN0IGJlIGEgcmVjb3JkOiAke3F1b3RlKGxpbWl0cyl9YCkpICYmIGVudHJpZXM3KGxpbWl0cykuZXZlcnkoXG4gICAgKFtrZXksIHZhbHVlXSkgPT4gcGFzc1N0eWxlT2YodmFsdWUpID09PSBcIm51bWJlclwiIHx8IGNoZWNrKGZhbHNlLCByZWRhY3RlZGBWYWx1ZSBvZiBsaW1pdCAke3F1b3RlKGtleSl9IGJ1dCBiZSBhIG51bWJlcjogJHtxdW90ZSh2YWx1ZSl9YClcbiAgKTtcbn07XG52YXIgY2hlY2tEZWNpbWFsRGlnaXRzTGltaXQgPSAoc3BlY2ltZW4sIGRlY2ltYWxEaWdpdHNMaW1pdCwgY2hlY2spID0+IHtcbiAgaWYgKE1hdGguZmxvb3IoTWF0aC5sb2cxMChNYXRoLmFicyhOdW1iZXIoc3BlY2ltZW4pKSkpICsgMSA8PSBkZWNpbWFsRGlnaXRzTGltaXQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gY2hlY2soXG4gICAgZmFsc2UsXG4gICAgcmVkYWN0ZWRgYmlnaW50ICR7c3BlY2ltZW59IG11c3Qgbm90IGhhdmUgbW9yZSB0aGFuICR7ZGVjaW1hbERpZ2l0c0xpbWl0fSBkaWdpdHNgXG4gICk7XG59O1xudmFyIG1ha2VQYXR0ZXJuS2l0ID0gKCkgPT4ge1xuICBjb25zdCBtYXliZU1hdGNoSGVscGVyID0gKHRhZykgPT4gKFxuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZSovXG4gICAgSGVscGVyc0J5TWF0Y2hUYWdbdGFnXVxuICApO1xuICBjb25zdCBtYXliZVBheWxvYWRTaGFwZSA9ICh0YWcpID0+IChcbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmUqL1xuICAgIEd1YXJkUGF5bG9hZFNoYXBlc1t0YWddXG4gICk7XG4gIGNvbnN0IHNpbmdsZXRvbktpbmRzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoW1xuICAgIFtcIm51bGxcIiwgbnVsbF0sXG4gICAgW1widW5kZWZpbmVkXCIsIHZvaWQgMF1cbiAgXSk7XG4gIGNvbnN0IHRhZ01lbW8gPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbiAgY29uc3QgY2hlY2tUYWdnZWQgPSAodGFnZ2VkLCB0YWcsIGNoZWNrKSA9PiB7XG4gICAgY29uc3QgbWF0Y2hIZWxwZXIgPSBtYXliZU1hdGNoSGVscGVyKHRhZyk7XG4gICAgaWYgKG1hdGNoSGVscGVyKSB7XG4gICAgICByZXR1cm4gbWF0Y2hIZWxwZXIuY2hlY2tJc1dlbGxGb3JtZWQodGFnZ2VkLnBheWxvYWQsIGNoZWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcGF5bG9hZFNoYXBlID0gbWF5YmVQYXlsb2FkU2hhcGUodGFnKTtcbiAgICAgIGlmIChwYXlsb2FkU2hhcGUgIT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gY2hlY2tNYXRjaGVzMih0YWdnZWQucGF5bG9hZCwgcGF5bG9hZFNoYXBlLCBjaGVjaywgdGFnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3dpdGNoICh0YWcpIHtcbiAgICAgIGNhc2UgXCJjb3B5U2V0XCI6IHtcbiAgICAgICAgcmV0dXJuIGNoZWNrQ29weVNldCh0YWdnZWQsIGNoZWNrKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5QmFnXCI6IHtcbiAgICAgICAgcmV0dXJuIGNoZWNrQ29weUJhZyh0YWdnZWQsIGNoZWNrKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5TWFwXCI6IHtcbiAgICAgICAgcmV0dXJuIGNoZWNrQ29weU1hcCh0YWdnZWQsIGNoZWNrKTtcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgcmV0dXJuIGNoZWNrKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIHJlZGFjdGVkYGNhbm5vdCBjaGVjayB1bnJlY29nbml6ZWQgdGFnICR7cXVvdGUodGFnKX06ICR7dGFnZ2VkfWBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IGtpbmRPZjIgPSAoc3BlY2ltZW4sIGNoZWNrID0gaWRlbnRDaGVja2VyKSA9PiB7XG4gICAgY29uc3QgcGFzc1N0eWxlID0gcGFzc1N0eWxlT2Yoc3BlY2ltZW4pO1xuICAgIGlmIChwYXNzU3R5bGUgIT09IFwidGFnZ2VkXCIpIHtcbiAgICAgIHJldHVybiBwYXNzU3R5bGU7XG4gICAgfVxuICAgIGlmICh0YWdNZW1vLmhhcyhzcGVjaW1lbikpIHtcbiAgICAgIHJldHVybiB0YWdNZW1vLmdldChzcGVjaW1lbik7XG4gICAgfVxuICAgIGNvbnN0IHRhZyA9IGdldFRhZyhzcGVjaW1lbik7XG4gICAgaWYgKGNoZWNrVGFnZ2VkKHNwZWNpbWVuLCB0YWcsIGNoZWNrKSkge1xuICAgICAgdGFnTWVtby5zZXQoc3BlY2ltZW4sIHRhZyk7XG4gICAgICByZXR1cm4gdGFnO1xuICAgIH1cbiAgICBpZiAoY2hlY2sgIT09IGlkZW50Q2hlY2tlcikge1xuICAgICAgY2hlY2soZmFsc2UsIHJlZGFjdGVkYGNhbm5vdCBjaGVjayB1bnJlY29nbml6ZWQgdGFnICR7cXVvdGUodGFnKX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfTtcbiAgaGFyZGVuKGtpbmRPZjIpO1xuICBjb25zdCBjaGVja0tpbmQgPSAoc3BlY2ltZW4sIGtpbmQyLCBjaGVjaykgPT4ge1xuICAgIGlmIChzaW5nbGV0b25LaW5kcy5oYXMoa2luZDIpKSB7XG4gICAgICByZXR1cm4gY2hlY2tBc0tleVBhdHQoc3BlY2ltZW4sIHNpbmdsZXRvbktpbmRzLmdldChraW5kMiksIGNoZWNrKTtcbiAgICB9XG4gICAgY29uc3QgcmVhbEtpbmQgPSBraW5kT2YyKHNwZWNpbWVuLCBjaGVjayk7XG4gICAgaWYgKGtpbmQyID09PSByZWFsS2luZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChjaGVjayAhPT0gaWRlbnRDaGVja2VyKSB7XG4gICAgICBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgJHtiYXJlT3JRdW90ZShyZWFsS2luZCl9ICR7c3BlY2ltZW59IC0gTXVzdCBiZSBhICR7YmFyZU9yUXVvdGUoa2luZDIpfWApO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG4gIGNvbnN0IGlzS2luZCA9IChzcGVjaW1lbiwga2luZDIpID0+IGNoZWNrS2luZChzcGVjaW1lbiwga2luZDIsIGlkZW50Q2hlY2tlcik7XG4gIGNvbnN0IGlzVW5kZWZpbmVkUGF0dCA9IChwYXR0KSA9PiBwYXR0ID09PSB2b2lkIDAgfHwgaXNLaW5kKHBhdHQsIFwibWF0Y2g6a2luZFwiKSAmJiBwYXR0LnBheWxvYWQgPT09IFwidW5kZWZpbmVkXCI7XG4gIGNvbnN0IGNoZWNrQXNLZXlQYXR0ID0gKHNwZWNpbWVuLCBrZXlBc1BhdHRlcm4sIGNoZWNrKSA9PiB7XG4gICAgaWYgKGlzS2V5KHNwZWNpbWVuKSAmJiBrZXlFUShzcGVjaW1lbiwga2V5QXNQYXR0ZXJuKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBjaGVjayAhPT0gaWRlbnRDaGVja2VyICYmIC8qIFdoZW4gdGhlIG1pc21hdGNoIG9jY3VycyBhZ2FpbnN0IGEga2V5IHVzZWQgYXMgYSBwYXR0ZXJuLCovXG4gICAgLyogdGhlIHBhdHRlcm4gc2hvdWxkIHN0aWxsIGJlIHJlZGFjdGVkLiovXG4gICAgY2hlY2soZmFsc2UsIHJlZGFjdGVkYCR7c3BlY2ltZW59IC0gTXVzdCBiZTogJHtrZXlBc1BhdHRlcm59YCk7XG4gIH07XG4gIGNvbnN0IGNoZWNrUGF0dGVybiA9IChwYXR0LCBjaGVjaykgPT4ge1xuICAgIGlmIChpc0tleShwYXR0KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChwYXR0ZXJuTWVtby5oYXMocGF0dCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBjaGVja1BhdHRlcm5JbnRlcm5hbChwYXR0LCBjaGVjayk7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgcGF0dGVybk1lbW8uYWRkKHBhdHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBjb25zdCBjaGVja1BhdHRlcm5JbnRlcm5hbCA9IChwYXR0LCBjaGVjaykgPT4ge1xuICAgIGNvbnN0IGNoZWNrSXQgPSAoY2hpbGQpID0+IGNoZWNrUGF0dGVybihjaGlsZCwgY2hlY2spO1xuICAgIGNvbnN0IGtpbmQyID0ga2luZE9mMihwYXR0LCBjaGVjayk7XG4gICAgc3dpdGNoIChraW5kMikge1xuICAgICAgY2FzZSB2b2lkIDA6IHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY2FzZSBcImNvcHlSZWNvcmRcIjoge1xuICAgICAgICByZXR1cm4gdmFsdWVzMihwYXR0KS5ldmVyeShjaGVja0l0KTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5QXJyYXlcIjoge1xuICAgICAgICByZXR1cm4gcGF0dC5ldmVyeShjaGVja0l0KTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5TWFwXCI6IHtcbiAgICAgICAgcmV0dXJuIGNoZWNrUGF0dGVybihwYXR0LnZhbHVlcywgY2hlY2spO1xuICAgICAgfVxuICAgICAgY2FzZSBcImVycm9yXCI6XG4gICAgICBjYXNlIFwicHJvbWlzZVwiOiB7XG4gICAgICAgIHJldHVybiBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgQSAke3F1b3RlKGtpbmQyKX0gY2Fubm90IGJlIGEgcGF0dGVybmApO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBpZiAobWF5YmVNYXRjaEhlbHBlcihraW5kMikgIT09IHZvaWQgMCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGVjayhcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICByZWRhY3RlZGBBIHBhc3NhYmxlIG9mIGtpbmQgJHtxdW90ZShraW5kMil9IGlzIG5vdCBhIHBhdHRlcm46ICR7cGF0dH1gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBpc1BhdHRlcm4yID0gKHBhdHQpID0+IGNoZWNrUGF0dGVybihwYXR0LCBpZGVudENoZWNrZXIpO1xuICBjb25zdCBhc3NlcnRQYXR0ZXJuMiA9IChwYXR0KSA9PiB7XG4gICAgY2hlY2tQYXR0ZXJuKHBhdHQsIGFzc2VydENoZWNrZXIpO1xuICB9O1xuICBjb25zdCBjaGVja01hdGNoZXMyID0gKHNwZWNpbWVuLCBwYXR0ZXJuLCBjaGVjaywgbGFiZWwgPSB2b2lkIDApID0+IChcbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmUqL1xuICAgIGFwcGx5TGFiZWxpbmdFcnJvcihjaGVja01hdGNoZXNJbnRlcm5hbCwgW3NwZWNpbWVuLCBwYXR0ZXJuLCBjaGVja10sIGxhYmVsKVxuICApO1xuICBjb25zdCBjaGVja01hdGNoZXNJbnRlcm5hbCA9IChzcGVjaW1lbiwgcGF0dCwgY2hlY2spID0+IHtcbiAgICBjb25zdCBwYXR0ZXJuS2luZCA9IGtpbmRPZjIocGF0dCwgY2hlY2spO1xuICAgIGNvbnN0IHNwZWNpbWVuS2luZCA9IGtpbmRPZjIoc3BlY2ltZW4pO1xuICAgIHN3aXRjaCAocGF0dGVybktpbmQpIHtcbiAgICAgIGNhc2Ugdm9pZCAwOiB7XG4gICAgICAgIHJldHVybiB0aHJvd1JlZGFjdGVkYHBhdHRlcm4gZXhwZWN0ZWQ6ICR7cGF0dH1gO1xuICAgICAgfVxuICAgICAgY2FzZSBcInByb21pc2VcIjoge1xuICAgICAgICByZXR1cm4gdGhyb3dSZWRhY3RlZGBwcm9taXNlcyBjYW5ub3QgYmUgcGF0dGVybnM6ICR7cGF0dH1gO1xuICAgICAgfVxuICAgICAgY2FzZSBcImVycm9yXCI6IHtcbiAgICAgICAgcmV0dXJuIHRocm93UmVkYWN0ZWRgZXJyb3JzIGNhbm5vdCBiZSBwYXR0ZXJuczogJHtwYXR0fWA7XG4gICAgICB9XG4gICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICBjYXNlIFwibnVsbFwiOlxuICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgIGNhc2UgXCJieXRlQXJyYXlcIjpcbiAgICAgIGNhc2UgXCJjb3B5U2V0XCI6XG4gICAgICBjYXNlIFwiY29weUJhZ1wiOlxuICAgICAgY2FzZSBcInJlbW90YWJsZVwiOiB7XG4gICAgICAgIHJldHVybiBjaGVja0FzS2V5UGF0dChzcGVjaW1lbiwgcGF0dCwgY2hlY2spO1xuICAgICAgfVxuICAgICAgY2FzZSBcImNvcHlBcnJheVwiOiB7XG4gICAgICAgIGlmIChpc0tleShwYXR0KSkge1xuICAgICAgICAgIHJldHVybiBjaGVja0FzS2V5UGF0dChzcGVjaW1lbiwgcGF0dCwgY2hlY2spO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzcGVjaW1lbktpbmQgIT09IFwiY29weUFycmF5XCIpIHtcbiAgICAgICAgICByZXR1cm4gY2hlY2soXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHJlZGFjdGVkYCR7c3BlY2ltZW59IC0gTXVzdCBiZSBhIGNvcHlBcnJheSB0byBtYXRjaCBhIGNvcHlBcnJheSBwYXR0ZXJuOiAke3FwKFxuICAgICAgICAgICAgICBwYXR0XG4gICAgICAgICAgICApfWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBwYXR0O1xuICAgICAgICBpZiAoc3BlY2ltZW4ubGVuZ3RoICE9PSBsZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gY2hlY2soXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHJlZGFjdGVkYEFycmF5ICR7c3BlY2ltZW59IC0gTXVzdCBiZSBhcyBsb25nIGFzIGNvcHlBcnJheSBwYXR0ZXJuOiAke3FwKFxuICAgICAgICAgICAgICBwYXR0XG4gICAgICAgICAgICApfWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXR0LmV2ZXJ5KChwMywgaTMpID0+IGNoZWNrTWF0Y2hlczIoc3BlY2ltZW5baTNdLCBwMywgY2hlY2ssIGkzKSk7XG4gICAgICB9XG4gICAgICBjYXNlIFwiY29weVJlY29yZFwiOiB7XG4gICAgICAgIGlmIChpc0tleShwYXR0KSkge1xuICAgICAgICAgIHJldHVybiBjaGVja0FzS2V5UGF0dChzcGVjaW1lbiwgcGF0dCwgY2hlY2spO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzcGVjaW1lbktpbmQgIT09IFwiY29weVJlY29yZFwiKSB7XG4gICAgICAgICAgcmV0dXJuIGNoZWNrKFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICByZWRhY3RlZGAke3NwZWNpbWVufSAtIE11c3QgYmUgYSBjb3B5UmVjb3JkIHRvIG1hdGNoIGEgY29weVJlY29yZCBwYXR0ZXJuOiAke3FwKFxuICAgICAgICAgICAgICBwYXR0XG4gICAgICAgICAgICApfWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNwZWNpbWVuTmFtZXMgPSByZWNvcmROYW1lcyhzcGVjaW1lbik7XG4gICAgICAgIGNvbnN0IHBhdHROYW1lcyA9IHJlY29yZE5hbWVzKHBhdHQpO1xuICAgICAgICBjb25zdCBtaXNzaW5nMiA9IGxpc3REaWZmZXJlbmNlKHBhdHROYW1lcywgc3BlY2ltZW5OYW1lcyk7XG4gICAgICAgIGlmIChtaXNzaW5nMi5sZW5ndGggPj0gMSkge1xuICAgICAgICAgIHJldHVybiBjaGVjayhcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgcmVkYWN0ZWRgJHtzcGVjaW1lbn0gLSBNdXN0IGhhdmUgbWlzc2luZyBwcm9wZXJ0aWVzICR7cXVvdGUobWlzc2luZzIpfWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVuZXhwZWN0ZWQgPSBsaXN0RGlmZmVyZW5jZShzcGVjaW1lbk5hbWVzLCBwYXR0TmFtZXMpO1xuICAgICAgICBpZiAodW5leHBlY3RlZC5sZW5ndGggPj0gMSkge1xuICAgICAgICAgIHJldHVybiBjaGVjayhcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgcmVkYWN0ZWRgJHtzcGVjaW1lbn0gLSBNdXN0IG5vdCBoYXZlIHVuZXhwZWN0ZWQgcHJvcGVydGllczogJHtxdW90ZShcbiAgICAgICAgICAgICAgdW5leHBlY3RlZFxuICAgICAgICAgICAgKX1gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzcGVjaW1lblZhbHVlcyA9IHJlY29yZFZhbHVlcyhzcGVjaW1lbiwgc3BlY2ltZW5OYW1lcyk7XG4gICAgICAgIGNvbnN0IHBhdHRWYWx1ZXMgPSByZWNvcmRWYWx1ZXMocGF0dCwgcGF0dE5hbWVzKTtcbiAgICAgICAgcmV0dXJuIHBhdHROYW1lcy5ldmVyeShcbiAgICAgICAgICAobGFiZWwsIGkzKSA9PiBjaGVja01hdGNoZXMyKHNwZWNpbWVuVmFsdWVzW2kzXSwgcGF0dFZhbHVlc1tpM10sIGNoZWNrLCBsYWJlbClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5TWFwXCI6IHtcbiAgICAgICAgaWYgKGlzS2V5KHBhdHQpKSB7XG4gICAgICAgICAgcmV0dXJuIGNoZWNrQXNLZXlQYXR0KHNwZWNpbWVuLCBwYXR0LCBjaGVjayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNwZWNpbWVuS2luZCAhPT0gXCJjb3B5TWFwXCIpIHtcbiAgICAgICAgICByZXR1cm4gY2hlY2soXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHJlZGFjdGVkYCR7c3BlY2ltZW59IC0gTXVzdCBiZSBhIGNvcHlNYXAgdG8gbWF0Y2ggYSBjb3B5TWFwIHBhdHRlcm46ICR7cXAoXG4gICAgICAgICAgICAgIHBhdHRcbiAgICAgICAgICAgICl9YFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF0dEtleVNldCA9IGNvcHlNYXBLZXlTZXQocGF0dCk7XG4gICAgICAgIGNvbnN0IHNwZWNpbWVuS2V5U2V0ID0gY29weU1hcEtleVNldChzcGVjaW1lbik7XG4gICAgICAgIGlmICghY2hlY2tNYXRjaGVzMihzcGVjaW1lbktleVNldCwgcGF0dEtleVNldCwgY2hlY2spKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhdHRWYWx1ZXMgPSBbXTtcbiAgICAgICAgY29uc3Qgc3BlY2ltZW5WYWx1ZXMgPSBbXTtcbiAgICAgICAgY29uc3QgZW50cnlQYWlycyA9IGdlbmVyYXRlQ29sbGVjdGlvblBhaXJFbnRyaWVzKFxuICAgICAgICAgIHBhdHQsXG4gICAgICAgICAgc3BlY2ltZW4sXG4gICAgICAgICAgZ2V0Q29weU1hcEVudHJ5QXJyYXksXG4gICAgICAgICAgdm9pZCAwXG4gICAgICAgICk7XG4gICAgICAgIGZvciAoY29uc3QgW19rZXksIHBhdHRWYWx1ZSwgc3BlY2ltZW5WYWx1ZV0gb2YgZW50cnlQYWlycykge1xuICAgICAgICAgIHBhdHRWYWx1ZXMucHVzaChwYXR0VmFsdWUpO1xuICAgICAgICAgIHNwZWNpbWVuVmFsdWVzLnB1c2goc3BlY2ltZW5WYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoZWNrTWF0Y2hlczIoaGFyZGVuKHNwZWNpbWVuVmFsdWVzKSwgaGFyZGVuKHBhdHRWYWx1ZXMpLCBjaGVjayk7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGNvbnN0IG1hdGNoSGVscGVyID0gbWF5YmVNYXRjaEhlbHBlcihwYXR0ZXJuS2luZCk7XG4gICAgICAgIGlmIChtYXRjaEhlbHBlcikge1xuICAgICAgICAgIHJldHVybiBtYXRjaEhlbHBlci5jaGVja01hdGNoZXMoc3BlY2ltZW4sIHBhdHQucGF5bG9hZCwgY2hlY2spO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgaW50ZXJuYWw6IHNob3VsZCBoYXZlIHJlY29nbml6ZWQgJHtxdW90ZShwYXR0ZXJuS2luZCl9IGA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBtYXRjaGVzMiA9IChzcGVjaW1lbiwgcGF0dCkgPT4gY2hlY2tNYXRjaGVzMihzcGVjaW1lbiwgcGF0dCwgaWRlbnRDaGVja2VyKTtcbiAgY29uc3QgbXVzdE1hdGNoNCA9IChzcGVjaW1lbiwgcGF0dCwgbGFiZWwgPSB2b2lkIDApID0+IHtcbiAgICBsZXQgaW5uZXJFcnJvcjtcbiAgICB0cnkge1xuICAgICAgaWYgKGNoZWNrTWF0Y2hlczIoc3BlY2ltZW4sIHBhdHQsIGlkZW50Q2hlY2tlciwgdm9pZCAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXIpIHtcbiAgICAgIGlubmVyRXJyb3IgPSBlcjtcbiAgICB9XG4gICAgY2hlY2tNYXRjaGVzMihzcGVjaW1lbiwgcGF0dCwgYXNzZXJ0Q2hlY2tlciwgbGFiZWwpO1xuICAgIGNvbnN0IG91dGVyRXJyb3IgPSBtYWtlRXJyb3IoXG4gICAgICByZWRhY3RlZGBpbnRlcm5hbDogJHtsYWJlbH06IGluY29uc2lzdGVudCBwYXR0ZXJuIG1hdGNoOiAke3FwKHBhdHQpfWBcbiAgICApO1xuICAgIGlmIChpbm5lckVycm9yICE9PSB2b2lkIDApIHtcbiAgICAgIG5vdGUob3V0ZXJFcnJvciwgcmVkYWN0ZWRgY2F1c2VkIGJ5ICR7aW5uZXJFcnJvcn1gKTtcbiAgICB9XG4gICAgdGhyb3cgb3V0ZXJFcnJvcjtcbiAgfTtcbiAgY29uc3QgZ2V0UmFua0NvdmVyMiA9IChwYXR0LCBlbmNvZGVQYXNzYWJsZSkgPT4ge1xuICAgIGlmIChpc0tleShwYXR0KSkge1xuICAgICAgY29uc3QgZW5jb2RlZCA9IGVuY29kZVBhc3NhYmxlKHBhdHQpO1xuICAgICAgaWYgKGVuY29kZWQgIT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gW2VuY29kZWQsIGAke2VuY29kZWR9fmBdO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwYXNzU3R5bGUgPSBwYXNzU3R5bGVPZihwYXR0KTtcbiAgICBzd2l0Y2ggKHBhc3NTdHlsZSkge1xuICAgICAgY2FzZSBcImNvcHlBcnJheVwiOiB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcImNvcHlSZWNvcmRcIjoge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJ0YWdnZWRcIjoge1xuICAgICAgICBjb25zdCB0YWcgPSBnZXRUYWcocGF0dCk7XG4gICAgICAgIGNvbnN0IG1hdGNoSGVscGVyID0gbWF5YmVNYXRjaEhlbHBlcih0YWcpO1xuICAgICAgICBpZiAobWF0Y2hIZWxwZXIpIHtcbiAgICAgICAgICByZXR1cm4gbWF0Y2hIZWxwZXIuZ2V0UmFua0NvdmVyKHBhdHQucGF5bG9hZCwgZW5jb2RlUGFzc2FibGUpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgICAgY2FzZSBcImNvcHlTZXRcIjoge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJjb3B5TWFwXCI6IHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZ2V0UGFzc1N0eWxlQ292ZXIocGFzc1N0eWxlKTtcbiAgfTtcbiAgY29uc3QgYXJyYXlFdmVyeU1hdGNoUGF0dGVybiA9IChhcnJheSwgcGF0dCwgY2hlY2ssIGxhYmVsUHJlZml4ID0gXCJcIikgPT4ge1xuICAgIGlmIChpc0tpbmQocGF0dCwgXCJtYXRjaDphbnlcIikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXkuZXZlcnkoXG4gICAgICAoZWwsIGkzKSA9PiBjaGVja01hdGNoZXMyKGVsLCBwYXR0LCBjaGVjaywgYCR7bGFiZWxQcmVmaXh9WyR7aTN9XWApXG4gICAgKTtcbiAgfTtcbiAgY29uc3QgbWF0Y2hBbnlIZWxwZXIgPSBGYXIoXCJtYXRjaDphbnkgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChfc3BlY2ltZW4sIF9tYXRjaGVyUGF5bG9hZCwgX2NoZWNrKSA9PiB0cnVlLFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAobWF0Y2hlclBheWxvYWQsIGNoZWNrKSA9PiBtYXRjaGVyUGF5bG9hZCA9PT0gdm9pZCAwIHx8IGNoZWNrKGZhbHNlLCByZWRhY3RlZGBtYXRjaDphbnkgcGF5bG9hZDogJHttYXRjaGVyUGF5bG9hZH0gLSBNdXN0IGJlIHVuZGVmaW5lZGApLFxuICAgIGdldFJhbmtDb3ZlcjogKF9tYXRjaFBheWxvYWQsIF9lbmNvZGVQYXNzYWJsZSkgPT4gW1wiXCIsIFwie1wiXVxuICB9KTtcbiAgY29uc3QgbWF0Y2hBbmRIZWxwZXIgPSBGYXIoXCJtYXRjaDphbmQgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChzcGVjaW1lbiwgcGF0dHMsIGNoZWNrKSA9PiB7XG4gICAgICByZXR1cm4gcGF0dHMuZXZlcnkoKHBhdHQpID0+IGNoZWNrTWF0Y2hlczIoc3BlY2ltZW4sIHBhdHQsIGNoZWNrKSk7XG4gICAgfSxcbiAgICBjaGVja0lzV2VsbEZvcm1lZDogKGFsbGVnZWRQYXR0cywgY2hlY2spID0+IHtcbiAgICAgIGNvbnN0IGNoZWNrSXQgPSAocGF0dCkgPT4gY2hlY2tQYXR0ZXJuKHBhdHQsIGNoZWNrKTtcbiAgICAgIHJldHVybiAocGFzc1N0eWxlT2YoYWxsZWdlZFBhdHRzKSA9PT0gXCJjb3B5QXJyYXlcIiB8fCBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgTmVlZHMgYXJyYXkgb2Ygc3ViLXBhdHRlcm5zOiAke3FwKGFsbGVnZWRQYXR0cyl9YCkpICYmIGFsbGVnZWRQYXR0cy5ldmVyeShjaGVja0l0KTtcbiAgICB9LFxuICAgIGdldFJhbmtDb3ZlcjogKHBhdHRzLCBlbmNvZGVQYXNzYWJsZSkgPT4gaW50ZXJzZWN0UmFua0NvdmVycyhcbiAgICAgIGNvbXBhcmVSYW5rLFxuICAgICAgcGF0dHMubWFwKChwMykgPT4gZ2V0UmFua0NvdmVyMihwMywgZW5jb2RlUGFzc2FibGUpKVxuICAgIClcbiAgfSk7XG4gIGNvbnN0IG1hdGNoT3JIZWxwZXIgPSBGYXIoXCJtYXRjaDpvciBoZWxwZXJcIiwge1xuICAgIGNoZWNrTWF0Y2hlczogKHNwZWNpbWVuLCBwYXR0cywgY2hlY2spID0+IHtcbiAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBwYXR0cztcbiAgICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGNoZWNrKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIHJlZGFjdGVkYCR7c3BlY2ltZW59IC0gbm8gcGF0dGVybiBkaXNqdW5jdHMgdG8gbWF0Y2g6ICR7cXAocGF0dHMpfWBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGJpbmFyeVVuZGVmUGF0dElkeCA9IHBhdHRzLmxlbmd0aCA9PT0gMiA/IHBhdHRzLmZpbmRJbmRleCgocGF0dCkgPT4gaXNVbmRlZmluZWRQYXR0KHBhdHQpKSA6IC0xO1xuICAgICAgaWYgKGJpbmFyeVVuZGVmUGF0dElkeCAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHNwZWNpbWVuID09PSB2b2lkIDAgfHwgY2hlY2tNYXRjaGVzMihzcGVjaW1lbiwgcGF0dHNbMSAtIGJpbmFyeVVuZGVmUGF0dElkeF0sIGNoZWNrKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXR0cy5zb21lKChwYXR0KSA9PiBtYXRjaGVzMihzcGVjaW1lbiwgcGF0dCkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoZWNrKGZhbHNlLCByZWRhY3RlZGAke3NwZWNpbWVufSAtIE11c3QgbWF0Y2ggb25lIG9mICR7cXAocGF0dHMpfWApO1xuICAgIH0sXG4gICAgY2hlY2tJc1dlbGxGb3JtZWQ6IG1hdGNoQW5kSGVscGVyLmNoZWNrSXNXZWxsRm9ybWVkLFxuICAgIGdldFJhbmtDb3ZlcjogKHBhdHRzLCBlbmNvZGVQYXNzYWJsZSkgPT4gdW5pb25SYW5rQ292ZXJzKFxuICAgICAgY29tcGFyZVJhbmssXG4gICAgICBwYXR0cy5tYXAoKHAzKSA9PiBnZXRSYW5rQ292ZXIyKHAzLCBlbmNvZGVQYXNzYWJsZSkpXG4gICAgKVxuICB9KTtcbiAgY29uc3QgbWF0Y2hOb3RIZWxwZXIgPSBGYXIoXCJtYXRjaDpub3QgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChzcGVjaW1lbiwgcGF0dCwgY2hlY2spID0+IHtcbiAgICAgIGlmIChtYXRjaGVzMihzcGVjaW1lbiwgcGF0dCkpIHtcbiAgICAgICAgcmV0dXJuIGNoZWNrKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIHJlZGFjdGVkYCR7c3BlY2ltZW59IC0gTXVzdCBmYWlsIG5lZ2F0ZWQgcGF0dGVybjogJHtxcChwYXR0KX1gXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiBjaGVja1BhdHRlcm4sXG4gICAgZ2V0UmFua0NvdmVyOiAoX3BhdHQsIF9lbmNvZGVQYXNzYWJsZSkgPT4gW1wiXCIsIFwie1wiXVxuICB9KTtcbiAgY29uc3QgbWF0Y2hTY2FsYXJIZWxwZXIgPSBGYXIoXCJtYXRjaDpzY2FsYXIgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChzcGVjaW1lbiwgX21hdGNoZXJQYXlsb2FkLCBjaGVjaykgPT4gY2hlY2tTY2FsYXJLZXkoc3BlY2ltZW4sIGNoZWNrKSxcbiAgICBjaGVja0lzV2VsbEZvcm1lZDogbWF0Y2hBbnlIZWxwZXIuY2hlY2tJc1dlbGxGb3JtZWQsXG4gICAgZ2V0UmFua0NvdmVyOiAoX21hdGNoUGF5bG9hZCwgX2VuY29kZVBhc3NhYmxlKSA9PiBbXCJhXCIsIFwien5cIl1cbiAgfSk7XG4gIGNvbnN0IG1hdGNoS2V5SGVscGVyID0gRmFyKFwibWF0Y2g6a2V5IGhlbHBlclwiLCB7XG4gICAgY2hlY2tNYXRjaGVzOiAoc3BlY2ltZW4sIF9tYXRjaGVyUGF5bG9hZCwgY2hlY2spID0+IGNoZWNrS2V5KHNwZWNpbWVuLCBjaGVjayksXG4gICAgY2hlY2tJc1dlbGxGb3JtZWQ6IG1hdGNoQW55SGVscGVyLmNoZWNrSXNXZWxsRm9ybWVkLFxuICAgIGdldFJhbmtDb3ZlcjogKF9tYXRjaFBheWxvYWQsIF9lbmNvZGVQYXNzYWJsZSkgPT4gW1wiYVwiLCBcInp+XCJdXG4gIH0pO1xuICBjb25zdCBtYXRjaFBhdHRlcm5IZWxwZXIgPSBGYXIoXCJtYXRjaDpwYXR0ZXJuIGhlbHBlclwiLCB7XG4gICAgY2hlY2tNYXRjaGVzOiAoc3BlY2ltZW4sIF9tYXRjaGVyUGF5bG9hZCwgY2hlY2spID0+IGNoZWNrUGF0dGVybihzcGVjaW1lbiwgY2hlY2spLFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiBtYXRjaEFueUhlbHBlci5jaGVja0lzV2VsbEZvcm1lZCxcbiAgICBnZXRSYW5rQ292ZXI6IChfbWF0Y2hQYXlsb2FkLCBfZW5jb2RlUGFzc2FibGUpID0+IFtcImFcIiwgXCJ6flwiXVxuICB9KTtcbiAgY29uc3QgbWF0Y2hLaW5kSGVscGVyID0gRmFyKFwibWF0Y2g6a2luZCBoZWxwZXJcIiwge1xuICAgIGNoZWNrTWF0Y2hlczogY2hlY2tLaW5kLFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAoYWxsZWdlZEtleUtpbmQsIGNoZWNrKSA9PiB0eXBlb2YgYWxsZWdlZEtleUtpbmQgPT09IFwic3RyaW5nXCIgfHwgY2hlY2soXG4gICAgICBmYWxzZSxcbiAgICAgIHJlZGFjdGVkYG1hdGNoOmtpbmQ6IHBheWxvYWQ6ICR7YWxsZWdlZEtleUtpbmR9IC0gQSBraW5kIG5hbWUgbXVzdCBiZSBhIHN0cmluZ2BcbiAgICApLFxuICAgIGdldFJhbmtDb3ZlcjogKGtpbmQyLCBfZW5jb2RlUGFzc2FibGUpID0+IHtcbiAgICAgIGxldCBzdHlsZTtcbiAgICAgIHN3aXRjaCAoa2luZDIpIHtcbiAgICAgICAgY2FzZSBcImNvcHlTZXRcIjpcbiAgICAgICAgY2FzZSBcImNvcHlNYXBcIjoge1xuICAgICAgICAgIHN0eWxlID0gXCJ0YWdnZWRcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgc3R5bGUgPSBraW5kMjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGdldFBhc3NTdHlsZUNvdmVyKHN0eWxlKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBtYXRjaFRhZ2dlZEhlbHBlciA9IEZhcihcIm1hdGNoOnRhZ2dlZCBoZWxwZXJcIiwge1xuICAgIGNoZWNrTWF0Y2hlczogKHNwZWNpbWVuLCBbdGFnUGF0dCwgcGF5bG9hZFBhdHRdLCBjaGVjaykgPT4ge1xuICAgICAgaWYgKHBhc3NTdHlsZU9mKHNwZWNpbWVuKSAhPT0gXCJ0YWdnZWRcIikge1xuICAgICAgICByZXR1cm4gY2hlY2soXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgcmVkYWN0ZWRgRXhwZWN0ZWQgdGFnZ2VkIG9iamVjdCwgbm90ICR7cXVvdGUoXG4gICAgICAgICAgICBwYXNzU3R5bGVPZihzcGVjaW1lbilcbiAgICAgICAgICApfTogJHtzcGVjaW1lbn1gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2hlY2tNYXRjaGVzMihnZXRUYWcoc3BlY2ltZW4pLCB0YWdQYXR0LCBjaGVjaywgXCJ0YWdcIikgJiYgY2hlY2tNYXRjaGVzMihzcGVjaW1lbi5wYXlsb2FkLCBwYXlsb2FkUGF0dCwgY2hlY2ssIFwicGF5bG9hZFwiKTtcbiAgICB9LFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAocGF5bG9hZCwgY2hlY2spID0+IGNoZWNrTWF0Y2hlczIoXG4gICAgICBwYXlsb2FkLFxuICAgICAgaGFyZGVuKFtNTS5wYXR0ZXJuKCksIE1NLnBhdHRlcm4oKV0pLFxuICAgICAgY2hlY2ssXG4gICAgICBcIm1hdGNoOnRhZ2dlZCBwYXlsb2FkXCJcbiAgICApLFxuICAgIGdldFJhbmtDb3ZlcjogKF9raW5kLCBfZW5jb2RlUGFzc2FibGUpID0+IGdldFBhc3NTdHlsZUNvdmVyKFwidGFnZ2VkXCIpXG4gIH0pO1xuICBjb25zdCBtYXRjaEJpZ2ludEhlbHBlciA9IEZhcihcIm1hdGNoOmJpZ2ludCBoZWxwZXJcIiwge1xuICAgIGNoZWNrTWF0Y2hlczogKHNwZWNpbWVuLCBbbGltaXRzID0gdm9pZCAwXSwgY2hlY2spID0+IHtcbiAgICAgIGNvbnN0IHsgZGVjaW1hbERpZ2l0c0xpbWl0IH0gPSBsaW1pdChsaW1pdHMpO1xuICAgICAgcmV0dXJuIGNoZWNrS2luZChzcGVjaW1lbiwgXCJiaWdpbnRcIiwgY2hlY2spICYmIGNoZWNrRGVjaW1hbERpZ2l0c0xpbWl0KHNwZWNpbWVuLCBkZWNpbWFsRGlnaXRzTGltaXQsIGNoZWNrKTtcbiAgICB9LFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAocGF5bG9hZCwgY2hlY2spID0+IGNoZWNrSXNXZWxsRm9ybWVkV2l0aExpbWl0KFxuICAgICAgcGF5bG9hZCxcbiAgICAgIGhhcmRlbihbXSksXG4gICAgICBjaGVjayxcbiAgICAgIFwibWF0Y2g6YmlnaW50IHBheWxvYWRcIlxuICAgICksXG4gICAgZ2V0UmFua0NvdmVyOiAoX21hdGNoUGF5bG9hZCwgX2VuY29kZVBhc3NhYmxlKSA9PiBnZXRQYXNzU3R5bGVDb3ZlcihcImJpZ2ludFwiKVxuICB9KTtcbiAgY29uc3QgbWF0Y2hOYXRIZWxwZXIgPSBGYXIoXCJtYXRjaDpuYXQgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChzcGVjaW1lbiwgW2xpbWl0cyA9IHZvaWQgMF0sIGNoZWNrKSA9PiB7XG4gICAgICBjb25zdCB7IGRlY2ltYWxEaWdpdHNMaW1pdCB9ID0gbGltaXQobGltaXRzKTtcbiAgICAgIHJldHVybiBjaGVja0tpbmQoc3BlY2ltZW4sIFwiYmlnaW50XCIsIGNoZWNrKSAmJiBjaGVjayhcbiAgICAgICAgLyoqIEB0eXBlIHtiaWdpbnR9ICovXG4gICAgICAgIHNwZWNpbWVuID49IDBuLFxuICAgICAgICByZWRhY3RlZGAke3NwZWNpbWVufSAtIE11c3QgYmUgbm9uLW5lZ2F0aXZlYFxuICAgICAgKSAmJiBjaGVja0RlY2ltYWxEaWdpdHNMaW1pdChzcGVjaW1lbiwgZGVjaW1hbERpZ2l0c0xpbWl0LCBjaGVjayk7XG4gICAgfSxcbiAgICBjaGVja0lzV2VsbEZvcm1lZDogKHBheWxvYWQsIGNoZWNrKSA9PiBjaGVja0lzV2VsbEZvcm1lZFdpdGhMaW1pdChcbiAgICAgIHBheWxvYWQsXG4gICAgICBoYXJkZW4oW10pLFxuICAgICAgY2hlY2ssXG4gICAgICBcIm1hdGNoOm5hdCBwYXlsb2FkXCJcbiAgICApLFxuICAgIGdldFJhbmtDb3ZlcjogKF9tYXRjaFBheWxvYWQsIF9lbmNvZGVQYXNzYWJsZSkgPT4gKFxuICAgICAgLyogVE9ETyBDb3VsZCBiZSBtb3JlIHByZWNpc2UqL1xuICAgICAgZ2V0UGFzc1N0eWxlQ292ZXIoXCJiaWdpbnRcIilcbiAgICApXG4gIH0pO1xuICBjb25zdCBtYXRjaFN0cmluZ0hlbHBlciA9IEZhcihcIm1hdGNoOnN0cmluZyBoZWxwZXJcIiwge1xuICAgIGNoZWNrTWF0Y2hlczogKHNwZWNpbWVuLCBbbGltaXRzID0gdm9pZCAwXSwgY2hlY2spID0+IHtcbiAgICAgIGNvbnN0IHsgc3RyaW5nTGVuZ3RoTGltaXQgfSA9IGxpbWl0KGxpbWl0cyk7XG4gICAgICByZXR1cm4gY2hlY2tLaW5kKHNwZWNpbWVuLCBcInN0cmluZ1wiLCBjaGVjaykgJiYgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBlbmRvL3Jlc3RyaWN0LWNvbXBhcmlzb24tb3BlcmFuZHMqL1xuICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgICAoc3BlY2ltZW4ubGVuZ3RoIDw9IHN0cmluZ0xlbmd0aExpbWl0IHx8IGNoZWNrKFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgcmVkYWN0ZWRgc3RyaW5nICR7c3BlY2ltZW59IG11c3Qgbm90IGJlIGJpZ2dlciB0aGFuICR7c3RyaW5nTGVuZ3RoTGltaXR9YFxuICAgICAgKSk7XG4gICAgfSxcbiAgICBjaGVja0lzV2VsbEZvcm1lZDogKHBheWxvYWQsIGNoZWNrKSA9PiBjaGVja0lzV2VsbEZvcm1lZFdpdGhMaW1pdChcbiAgICAgIHBheWxvYWQsXG4gICAgICBoYXJkZW4oW10pLFxuICAgICAgY2hlY2ssXG4gICAgICBcIm1hdGNoOnN0cmluZyBwYXlsb2FkXCJcbiAgICApLFxuICAgIGdldFJhbmtDb3ZlcjogKF9tYXRjaFBheWxvYWQsIF9lbmNvZGVQYXNzYWJsZSkgPT4gZ2V0UGFzc1N0eWxlQ292ZXIoXCJzdHJpbmdcIilcbiAgfSk7XG4gIGNvbnN0IG1hdGNoU3ltYm9sSGVscGVyID0gRmFyKFwibWF0Y2g6c3ltYm9sIGhlbHBlclwiLCB7XG4gICAgY2hlY2tNYXRjaGVzOiAoc3BlY2ltZW4sIFtsaW1pdHMgPSB2b2lkIDBdLCBjaGVjaykgPT4ge1xuICAgICAgY29uc3QgeyBzeW1ib2xOYW1lTGVuZ3RoTGltaXQgfSA9IGxpbWl0KGxpbWl0cyk7XG4gICAgICBpZiAoIWNoZWNrS2luZChzcGVjaW1lbiwgXCJzeW1ib2xcIiwgY2hlY2spKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN5bWJvbE5hbWUgPSBuYW1lRm9yUGFzc2FibGVTeW1ib2woc3BlY2ltZW4pO1xuICAgICAgaWYgKHR5cGVvZiBzeW1ib2xOYW1lICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgaW50ZXJuYWw6IFBhc3NhYmxlIHN5bWJvbCAke3NwZWNpbWVufSBtdXN0IGhhdmUgYSBwYXNzYWJsZSBuYW1lYDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjaGVjayhcbiAgICAgICAgc3ltYm9sTmFtZS5sZW5ndGggPD0gc3ltYm9sTmFtZUxlbmd0aExpbWl0LFxuICAgICAgICByZWRhY3RlZGBTeW1ib2wgbmFtZSAke3F1b3RlKFxuICAgICAgICAgIHN5bWJvbE5hbWVcbiAgICAgICAgKX0gbXVzdCBub3QgYmUgYmlnZ2VyIHRoYW4gJHtzeW1ib2xOYW1lTGVuZ3RoTGltaXR9YFxuICAgICAgKTtcbiAgICB9LFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAocGF5bG9hZCwgY2hlY2spID0+IGNoZWNrSXNXZWxsRm9ybWVkV2l0aExpbWl0KFxuICAgICAgcGF5bG9hZCxcbiAgICAgIGhhcmRlbihbXSksXG4gICAgICBjaGVjayxcbiAgICAgIFwibWF0Y2g6c3ltYm9sIHBheWxvYWRcIlxuICAgICksXG4gICAgZ2V0UmFua0NvdmVyOiAoX21hdGNoUGF5bG9hZCwgX2VuY29kZVBhc3NhYmxlKSA9PiBnZXRQYXNzU3R5bGVDb3ZlcihcInN5bWJvbFwiKVxuICB9KTtcbiAgY29uc3QgbWF0Y2hSZW1vdGFibGVIZWxwZXIgPSBGYXIoXCJtYXRjaDpyZW1vdGFibGUgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChzcGVjaW1lbiwgcmVtb3RhYmxlRGVzYywgY2hlY2spID0+IHtcbiAgICAgIGlmIChpc0tpbmQoc3BlY2ltZW4sIFwicmVtb3RhYmxlXCIpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGNoZWNrID09PSBpZGVudENoZWNrZXIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBsYWJlbCB9ID0gcmVtb3RhYmxlRGVzYztcbiAgICAgIGNvbnN0IHBhc3NTdHlsZSA9IHBhc3NTdHlsZU9mKHNwZWNpbWVuKTtcbiAgICAgIGNvbnN0IGtpbmREZXRhaWxzID0gcGFzc1N0eWxlICE9PSBcInRhZ2dlZFwiID8gKFxuICAgICAgICAvKiBQYXNzIHN0eWxlIGNhbiBiZSBlbWJlZGRlZCBpbiBkZXRhaWxzIHdpdGhvdXQgcXVvdGVzLiovXG4gICAgICAgIGJhcmVPclF1b3RlKHBhc3NTdHlsZSlcbiAgICAgICkgOiAoXG4gICAgICAgIC8qIFRhZyBtdXN0IGJlIHF1b3RlZCBiZWNhdXNlIGl0IGlzIHBvdGVudGlhbGx5IGF0dGFja2VyLWNvbnRyb2xsZWQqL1xuICAgICAgICAvKiAodW5saWtlIGBraW5kT2ZgLCB0aGlzIGRvZXMgbm90IHJlamVjdCB1bnJlY29nbml6ZWQgdGFncykuKi9cbiAgICAgICAgcXVvdGUoZ2V0VGFnKHNwZWNpbWVuKSlcbiAgICAgICk7XG4gICAgICByZXR1cm4gY2hlY2soXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAvKiBgbGFiZWxgIGNhbiBiZSBlbWJlZGRlZCB3aXRob3V0IHF1b3RlcyBiZWNhdXNlIGl0IGlzIHByb3ZpZGVkIGJ5Ki9cbiAgICAgICAgLyogbG9jYWwgY29kZSBsaWtlIGBNLnJlbW90YWJsZShcIi4uLlwiKWAuKi9cbiAgICAgICAgcmVkYWN0ZWRgJHtzcGVjaW1lbn0gLSBNdXN0IGJlIGEgcmVtb3RhYmxlICR7YmFyZU9yUXVvdGUobGFiZWwpfSwgbm90ICR7a2luZERldGFpbHN9YFxuICAgICAgKTtcbiAgICB9LFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAoYWxsZWdlZFJlbW90YWJsZURlc2MsIGNoZWNrKSA9PiBjaGVja01hdGNoZXMyKFxuICAgICAgYWxsZWdlZFJlbW90YWJsZURlc2MsXG4gICAgICBoYXJkZW4oeyBsYWJlbDogTU0uc3RyaW5nKCkgfSksXG4gICAgICBjaGVjayxcbiAgICAgIFwibWF0Y2g6cmVtb3RhYmxlIHBheWxvYWRcIlxuICAgICksXG4gICAgZ2V0UmFua0NvdmVyOiAoX3JlbW90YWJsZURlc2MsIF9lbmNvZGVQYXNzYWJsZSkgPT4gZ2V0UGFzc1N0eWxlQ292ZXIoXCJyZW1vdGFibGVcIilcbiAgfSk7XG4gIGNvbnN0IG1hdGNoTFRFSGVscGVyID0gRmFyKFwibWF0Y2g6bHRlIGhlbHBlclwiLCB7XG4gICAgY2hlY2tNYXRjaGVzOiAoc3BlY2ltZW4sIHJpZ2h0T3BlcmFuZCwgY2hlY2spID0+IGtleUxURShzcGVjaW1lbiwgcmlnaHRPcGVyYW5kKSB8fCBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgJHtzcGVjaW1lbn0gLSBNdXN0IGJlIDw9ICR7cmlnaHRPcGVyYW5kfWApLFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiBjaGVja0tleSxcbiAgICBnZXRSYW5rQ292ZXI6IChyaWdodE9wZXJhbmQsIGVuY29kZVBhc3NhYmxlKSA9PiB7XG4gICAgICBjb25zdCBwYXNzU3R5bGUgPSBwYXNzU3R5bGVPZihyaWdodE9wZXJhbmQpO1xuICAgICAgbGV0IFtsZWZ0Qm91bmQsIHJpZ2h0Qm91bmRdID0gZ2V0UGFzc1N0eWxlQ292ZXIocGFzc1N0eWxlKTtcbiAgICAgIGNvbnN0IG5ld1JpZ2h0Qm91bmQgPSBgJHtlbmNvZGVQYXNzYWJsZShyaWdodE9wZXJhbmQpfX5gO1xuICAgICAgaWYgKG5ld1JpZ2h0Qm91bmQgIT09IHZvaWQgMCkge1xuICAgICAgICByaWdodEJvdW5kID0gbmV3UmlnaHRCb3VuZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbbGVmdEJvdW5kLCByaWdodEJvdW5kXTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBtYXRjaExUSGVscGVyID0gRmFyKFwibWF0Y2g6bHQgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChzcGVjaW1lbiwgcmlnaHRPcGVyYW5kLCBjaGVjaykgPT4ga2V5TFQoc3BlY2ltZW4sIHJpZ2h0T3BlcmFuZCkgfHwgY2hlY2soZmFsc2UsIHJlZGFjdGVkYCR7c3BlY2ltZW59IC0gTXVzdCBiZSA8ICR7cmlnaHRPcGVyYW5kfWApLFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiBjaGVja0tleSxcbiAgICBnZXRSYW5rQ292ZXI6IG1hdGNoTFRFSGVscGVyLmdldFJhbmtDb3ZlclxuICB9KTtcbiAgY29uc3QgbWF0Y2hHVEVIZWxwZXIgPSBGYXIoXCJtYXRjaDpndGUgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChzcGVjaW1lbiwgcmlnaHRPcGVyYW5kLCBjaGVjaykgPT4ga2V5R1RFKHNwZWNpbWVuLCByaWdodE9wZXJhbmQpIHx8IGNoZWNrKGZhbHNlLCByZWRhY3RlZGAke3NwZWNpbWVufSAtIE11c3QgYmUgPj0gJHtyaWdodE9wZXJhbmR9YCksXG4gICAgY2hlY2tJc1dlbGxGb3JtZWQ6IGNoZWNrS2V5LFxuICAgIGdldFJhbmtDb3ZlcjogKHJpZ2h0T3BlcmFuZCwgZW5jb2RlUGFzc2FibGUpID0+IHtcbiAgICAgIGNvbnN0IHBhc3NTdHlsZSA9IHBhc3NTdHlsZU9mKHJpZ2h0T3BlcmFuZCk7XG4gICAgICBsZXQgW2xlZnRCb3VuZCwgcmlnaHRCb3VuZF0gPSBnZXRQYXNzU3R5bGVDb3ZlcihwYXNzU3R5bGUpO1xuICAgICAgY29uc3QgbmV3TGVmdEJvdW5kID0gZW5jb2RlUGFzc2FibGUocmlnaHRPcGVyYW5kKTtcbiAgICAgIGlmIChuZXdMZWZ0Qm91bmQgIT09IHZvaWQgMCkge1xuICAgICAgICBsZWZ0Qm91bmQgPSBuZXdMZWZ0Qm91bmQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gW2xlZnRCb3VuZCwgcmlnaHRCb3VuZF07XG4gICAgfVxuICB9KTtcbiAgY29uc3QgbWF0Y2hHVEhlbHBlciA9IEZhcihcIm1hdGNoOmd0IGhlbHBlclwiLCB7XG4gICAgY2hlY2tNYXRjaGVzOiAoc3BlY2ltZW4sIHJpZ2h0T3BlcmFuZCwgY2hlY2spID0+IGtleUdUKHNwZWNpbWVuLCByaWdodE9wZXJhbmQpIHx8IGNoZWNrKGZhbHNlLCByZWRhY3RlZGAke3NwZWNpbWVufSAtIE11c3QgYmUgPiAke3JpZ2h0T3BlcmFuZH1gKSxcbiAgICBjaGVja0lzV2VsbEZvcm1lZDogY2hlY2tLZXksXG4gICAgZ2V0UmFua0NvdmVyOiBtYXRjaEdURUhlbHBlci5nZXRSYW5rQ292ZXJcbiAgfSk7XG4gIGNvbnN0IG1hdGNoUmVjb3JkT2ZIZWxwZXIgPSBGYXIoXCJtYXRjaDpyZWNvcmRPZiBoZWxwZXJcIiwge1xuICAgIGNoZWNrTWF0Y2hlczogKHNwZWNpbWVuLCBba2V5UGF0dCwgdmFsdWVQYXR0LCBsaW1pdHMgPSB2b2lkIDBdLCBjaGVjaykgPT4ge1xuICAgICAgY29uc3QgeyBudW1Qcm9wZXJ0aWVzTGltaXQsIHByb3BlcnR5TmFtZUxlbmd0aExpbWl0IH0gPSBsaW1pdChsaW1pdHMpO1xuICAgICAgcmV0dXJuIGNoZWNrS2luZChzcGVjaW1lbiwgXCJjb3B5UmVjb3JkXCIsIGNoZWNrKSAmJiBjaGVjayhcbiAgICAgICAgb3duS2V5czE4KHNwZWNpbWVuKS5sZW5ndGggPD0gbnVtUHJvcGVydGllc0xpbWl0LFxuICAgICAgICByZWRhY3RlZGBNdXN0IG5vdCBoYXZlIG1vcmUgdGhhbiAke3F1b3RlKFxuICAgICAgICAgIG51bVByb3BlcnRpZXNMaW1pdFxuICAgICAgICApfSBwcm9wZXJ0aWVzOiAke3NwZWNpbWVufWBcbiAgICAgICkgJiYgZW50cmllczcoc3BlY2ltZW4pLmV2ZXJ5KFxuICAgICAgICAoW2tleSwgdmFsdWVdKSA9PiBhcHBseUxhYmVsaW5nRXJyb3IoXG4gICAgICAgICAgY2hlY2ssXG4gICAgICAgICAgW1xuICAgICAgICAgICAga2V5Lmxlbmd0aCA8PSBwcm9wZXJ0eU5hbWVMZW5ndGhMaW1pdCxcbiAgICAgICAgICAgIHJlZGFjdGVkYFByb3BlcnR5IG5hbWUgbXVzdCBub3QgYmUgbG9uZ2VyIHRoYW4gJHtxdW90ZShcbiAgICAgICAgICAgICAgcHJvcGVydHlOYW1lTGVuZ3RoTGltaXRcbiAgICAgICAgICAgICl9YFxuICAgICAgICAgIF0sXG4gICAgICAgICAga2V5XG4gICAgICAgICkgJiYgY2hlY2tNYXRjaGVzMihcbiAgICAgICAgICBoYXJkZW4oW2tleSwgdmFsdWVdKSxcbiAgICAgICAgICBoYXJkZW4oW2tleVBhdHQsIHZhbHVlUGF0dF0pLFxuICAgICAgICAgIGNoZWNrLFxuICAgICAgICAgIGtleVxuICAgICAgICApXG4gICAgICApO1xuICAgIH0sXG4gICAgY2hlY2tJc1dlbGxGb3JtZWQ6IChwYXlsb2FkLCBjaGVjaykgPT4gY2hlY2tJc1dlbGxGb3JtZWRXaXRoTGltaXQoXG4gICAgICBwYXlsb2FkLFxuICAgICAgaGFyZGVuKFtNTS5wYXR0ZXJuKCksIE1NLnBhdHRlcm4oKV0pLFxuICAgICAgY2hlY2ssXG4gICAgICBcIm1hdGNoOnJlY29yZE9mIHBheWxvYWRcIlxuICAgICksXG4gICAgZ2V0UmFua0NvdmVyOiAoX2VudHJ5UGF0dCkgPT4gZ2V0UGFzc1N0eWxlQ292ZXIoXCJjb3B5UmVjb3JkXCIpXG4gIH0pO1xuICBjb25zdCBtYXRjaEFycmF5T2ZIZWxwZXIgPSBGYXIoXCJtYXRjaDphcnJheU9mIGhlbHBlclwiLCB7XG4gICAgY2hlY2tNYXRjaGVzOiAoc3BlY2ltZW4sIFtzdWJQYXR0LCBsaW1pdHMgPSB2b2lkIDBdLCBjaGVjaykgPT4ge1xuICAgICAgY29uc3QgeyBhcnJheUxlbmd0aExpbWl0IH0gPSBsaW1pdChsaW1pdHMpO1xuICAgICAgcmV0dXJuIGNoZWNrS2luZChzcGVjaW1lbiwgXCJjb3B5QXJyYXlcIiwgY2hlY2spICYmIC8qKiBAdHlwZSB7QXJyYXl9ICovXG4gICAgICAoc3BlY2ltZW4ubGVuZ3RoIDw9IGFycmF5TGVuZ3RoTGltaXQgfHwgY2hlY2soXG4gICAgICAgIGZhbHNlLFxuICAgICAgICByZWRhY3RlZGBBcnJheSBsZW5ndGggJHtzcGVjaW1lbi5sZW5ndGh9IG11c3QgYmUgPD0gbGltaXQgJHthcnJheUxlbmd0aExpbWl0fWBcbiAgICAgICkpICYmIGFycmF5RXZlcnlNYXRjaFBhdHRlcm4oc3BlY2ltZW4sIHN1YlBhdHQsIGNoZWNrKTtcbiAgICB9LFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAocGF5bG9hZCwgY2hlY2spID0+IGNoZWNrSXNXZWxsRm9ybWVkV2l0aExpbWl0KFxuICAgICAgcGF5bG9hZCxcbiAgICAgIGhhcmRlbihbTU0ucGF0dGVybigpXSksXG4gICAgICBjaGVjayxcbiAgICAgIFwibWF0Y2g6YXJyYXlPZiBwYXlsb2FkXCJcbiAgICApLFxuICAgIGdldFJhbmtDb3ZlcjogKCkgPT4gZ2V0UGFzc1N0eWxlQ292ZXIoXCJjb3B5QXJyYXlcIilcbiAgfSk7XG4gIGNvbnN0IG1hdGNoQnl0ZUFycmF5SGVscGVyID0gRmFyKFwibWF0Y2g6Ynl0ZUFycmF5IGhlbHBlclwiLCB7XG4gICAgY2hlY2tNYXRjaGVzOiAoc3BlY2ltZW4sIFtsaW1pdHMgPSB2b2lkIDBdLCBjaGVjaykgPT4ge1xuICAgICAgY29uc3QgeyBieXRlTGVuZ3RoTGltaXQgfSA9IGxpbWl0KGxpbWl0cyk7XG4gICAgICByZXR1cm4gY2hlY2tLaW5kKHNwZWNpbWVuLCBcImJ5dGVBcnJheVwiLCBjaGVjaykgJiYgLyoqIEB0eXBlIHtBcnJheUJ1ZmZlcn0gKi9cbiAgICAgIChzcGVjaW1lbi5ieXRlTGVuZ3RoIDw9IGJ5dGVMZW5ndGhMaW1pdCB8fCBjaGVjayhcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIHJlZGFjdGVkYGJ5dGVBcnJheSAke3NwZWNpbWVufSBtdXN0IG5vdCBiZSBiaWdnZXIgdGhhbiAke2J5dGVMZW5ndGhMaW1pdH1gXG4gICAgICApKTtcbiAgICB9LFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAocGF5bG9hZCwgY2hlY2spID0+IGNoZWNrSXNXZWxsRm9ybWVkV2l0aExpbWl0KFxuICAgICAgcGF5bG9hZCxcbiAgICAgIGhhcmRlbihbXSksXG4gICAgICBjaGVjayxcbiAgICAgIFwibWF0Y2g6Ynl0ZUFycmF5IHBheWxvYWRcIlxuICAgICksXG4gICAgZ2V0UmFua0NvdmVyOiAoX21hdGNoUGF5bG9hZCwgX2VuY29kZVBhc3NhYmxlKSA9PiBnZXRQYXNzU3R5bGVDb3ZlcihcImJ5dGVBcnJheVwiKVxuICB9KTtcbiAgY29uc3QgbWF0Y2hTZXRPZkhlbHBlciA9IEZhcihcIm1hdGNoOnNldE9mIGhlbHBlclwiLCB7XG4gICAgY2hlY2tNYXRjaGVzOiAoc3BlY2ltZW4sIFtrZXlQYXR0LCBsaW1pdHMgPSB2b2lkIDBdLCBjaGVjaykgPT4ge1xuICAgICAgY29uc3QgeyBudW1TZXRFbGVtZW50c0xpbWl0IH0gPSBsaW1pdChsaW1pdHMpO1xuICAgICAgcmV0dXJuIGNoZWNrS2luZChzcGVjaW1lbiwgXCJjb3B5U2V0XCIsIGNoZWNrKSAmJiBjaGVjayhcbiAgICAgICAgLyoqIEB0eXBlIHtBcnJheX0gKi9cbiAgICAgICAgc3BlY2ltZW4ucGF5bG9hZC5sZW5ndGggPCBudW1TZXRFbGVtZW50c0xpbWl0LFxuICAgICAgICByZWRhY3RlZGBTZXQgbXVzdCBub3QgaGF2ZSBtb3JlIHRoYW4gJHtxdW90ZShudW1TZXRFbGVtZW50c0xpbWl0KX0gZWxlbWVudHM6ICR7c3BlY2ltZW4ucGF5bG9hZC5sZW5ndGh9YFxuICAgICAgKSAmJiBhcnJheUV2ZXJ5TWF0Y2hQYXR0ZXJuKHNwZWNpbWVuLnBheWxvYWQsIGtleVBhdHQsIGNoZWNrLCBcInNldCBlbGVtZW50c1wiKTtcbiAgICB9LFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAocGF5bG9hZCwgY2hlY2spID0+IGNoZWNrSXNXZWxsRm9ybWVkV2l0aExpbWl0KFxuICAgICAgcGF5bG9hZCxcbiAgICAgIGhhcmRlbihbTU0ucGF0dGVybigpXSksXG4gICAgICBjaGVjayxcbiAgICAgIFwibWF0Y2g6c2V0T2YgcGF5bG9hZFwiXG4gICAgKSxcbiAgICBnZXRSYW5rQ292ZXI6ICgpID0+IGdldFBhc3NTdHlsZUNvdmVyKFwidGFnZ2VkXCIpXG4gIH0pO1xuICBjb25zdCBtYXRjaEJhZ09mSGVscGVyID0gRmFyKFwibWF0Y2g6YmFnT2YgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChzcGVjaW1lbiwgW2tleVBhdHQsIGNvdW50UGF0dCwgbGltaXRzID0gdm9pZCAwXSwgY2hlY2spID0+IHtcbiAgICAgIGNvbnN0IHsgbnVtVW5pcXVlQmFnRWxlbWVudHNMaW1pdCwgZGVjaW1hbERpZ2l0c0xpbWl0IH0gPSBsaW1pdChsaW1pdHMpO1xuICAgICAgcmV0dXJuIGNoZWNrS2luZChzcGVjaW1lbiwgXCJjb3B5QmFnXCIsIGNoZWNrKSAmJiBjaGVjayhcbiAgICAgICAgLyoqIEB0eXBlIHtBcnJheX0gKi9cbiAgICAgICAgc3BlY2ltZW4ucGF5bG9hZC5sZW5ndGggPD0gbnVtVW5pcXVlQmFnRWxlbWVudHNMaW1pdCxcbiAgICAgICAgcmVkYWN0ZWRgQmFnIG11c3Qgbm90IGhhdmUgbW9yZSB0aGFuICR7cXVvdGUoXG4gICAgICAgICAgbnVtVW5pcXVlQmFnRWxlbWVudHNMaW1pdFxuICAgICAgICApfSB1bmlxdWUgZWxlbWVudHM6ICR7c3BlY2ltZW59YFxuICAgICAgKSAmJiBzcGVjaW1lbi5wYXlsb2FkLmV2ZXJ5KFxuICAgICAgICAoW2tleSwgY291bnRdLCBpMykgPT4gY2hlY2tNYXRjaGVzMihrZXksIGtleVBhdHQsIGNoZWNrLCBgYmFnIGtleXNbJHtpM31dYCkgJiYgYXBwbHlMYWJlbGluZ0Vycm9yKFxuICAgICAgICAgIGNoZWNrRGVjaW1hbERpZ2l0c0xpbWl0LFxuICAgICAgICAgIFtjb3VudCwgZGVjaW1hbERpZ2l0c0xpbWl0LCBjaGVja10sXG4gICAgICAgICAgYGJhZyBjb3VudHNbJHtpM31dYFxuICAgICAgICApICYmIGNoZWNrTWF0Y2hlczIoY291bnQsIGNvdW50UGF0dCwgY2hlY2ssIGBiYWcgY291bnRzWyR7aTN9XWApXG4gICAgICApO1xuICAgIH0sXG4gICAgY2hlY2tJc1dlbGxGb3JtZWQ6IChwYXlsb2FkLCBjaGVjaykgPT4gY2hlY2tJc1dlbGxGb3JtZWRXaXRoTGltaXQoXG4gICAgICBwYXlsb2FkLFxuICAgICAgaGFyZGVuKFtNTS5wYXR0ZXJuKCksIE1NLnBhdHRlcm4oKV0pLFxuICAgICAgY2hlY2ssXG4gICAgICBcIm1hdGNoOmJhZ09mIHBheWxvYWRcIlxuICAgICksXG4gICAgZ2V0UmFua0NvdmVyOiAoKSA9PiBnZXRQYXNzU3R5bGVDb3ZlcihcInRhZ2dlZFwiKVxuICB9KTtcbiAgY29uc3QgZWxlbWVudHNIYXNTcGxpdCA9IChlbGVtZW50cywgZWxlbWVudFBhdHQsIGJvdW5kLCBpblJlc3VsdHMgPSB2b2lkIDAsIG91dFJlc3VsdHMgPSB2b2lkIDAsIGNoZWNrID0gaWRlbnRDaGVja2VyKSA9PiB7XG4gICAgbGV0IGNvdW50ID0gMG47XG4gICAgZm9yIChsZXQgaTMgPSBlbGVtZW50cy5sZW5ndGggLSAxOyBpMyA+PSAwOyBpMyAtPSAxKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNbaTNdO1xuICAgICAgaWYgKGNvdW50IDwgYm91bmQpIHtcbiAgICAgICAgaWYgKG1hdGNoZXMyKGVsZW1lbnQsIGVsZW1lbnRQYXR0KSkge1xuICAgICAgICAgIGNvdW50ICs9IDFuO1xuICAgICAgICAgIGlmIChpblJlc3VsdHMpIGluUmVzdWx0cy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKG91dFJlc3VsdHMpIHtcbiAgICAgICAgICBvdXRSZXN1bHRzLnB1c2goZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAob3V0UmVzdWx0cyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0UmVzdWx0cy5wdXNoKGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hlY2soXG4gICAgICBjb3VudCA+PSBib3VuZCxcbiAgICAgIHJlZGFjdGVkYEhhcyBvbmx5ICR7cXVvdGUoY291bnQpfSBtYXRjaGVzLCBidXQgbmVlZHMgJHtxdW90ZShib3VuZCl9YFxuICAgICk7XG4gIH07XG4gIGNvbnN0IHBhaXJzSGFzU3BsaXQgPSAocGFpcnMsIGVsZW1lbnRQYXR0LCBib3VuZCwgaW5SZXN1bHRzID0gdm9pZCAwLCBvdXRSZXN1bHRzID0gdm9pZCAwLCBjaGVjayA9IGlkZW50Q2hlY2tlcikgPT4ge1xuICAgIGxldCBjb3VudCA9IDBuO1xuICAgIGZvciAobGV0IGkzID0gcGFpcnMubGVuZ3RoIC0gMTsgaTMgPj0gMDsgaTMgLT0gMSkge1xuICAgICAgY29uc3QgW2VsZW1lbnQsIG51bV0gPSBwYWlyc1tpM107XG4gICAgICBjb25zdCBudW1SZXN0ID0gYm91bmQgLSBjb3VudDtcbiAgICAgIGlmIChudW1SZXN0ID49IDFuKSB7XG4gICAgICAgIGlmIChtYXRjaGVzMihlbGVtZW50LCBlbGVtZW50UGF0dCkpIHtcbiAgICAgICAgICBpZiAobnVtIDw9IG51bVJlc3QpIHtcbiAgICAgICAgICAgIGNvdW50ICs9IG51bTtcbiAgICAgICAgICAgIGlmIChpblJlc3VsdHMpIGluUmVzdWx0cy5wdXNoKFtlbGVtZW50LCBudW1dKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbnVtSW4gPSBudW1SZXN0O1xuICAgICAgICAgICAgY291bnQgKz0gbnVtSW47XG4gICAgICAgICAgICBpZiAoaW5SZXN1bHRzKSBpblJlc3VsdHMucHVzaChbZWxlbWVudCwgbnVtUmVzdF0pO1xuICAgICAgICAgICAgaWYgKG91dFJlc3VsdHMpIG91dFJlc3VsdHMucHVzaChbZWxlbWVudCwgbnVtIC0gbnVtUmVzdF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChvdXRSZXN1bHRzKSB7XG4gICAgICAgICAgb3V0UmVzdWx0cy5wdXNoKFtlbGVtZW50LCBudW1dKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChvdXRSZXN1bHRzID09PSB2b2lkIDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRSZXN1bHRzLnB1c2goW2VsZW1lbnQsIG51bV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hlY2soXG4gICAgICBjb3VudCA+PSBib3VuZCxcbiAgICAgIHJlZGFjdGVkYEhhcyBvbmx5ICR7cXVvdGUoY291bnQpfSBtYXRjaGVzLCBidXQgbmVlZHMgJHtxdW90ZShib3VuZCl9YFxuICAgICk7XG4gIH07XG4gIGNvbnN0IGNvbnRhaW5lckhhc1NwbGl0MiA9IChzcGVjaW1lbiwgZWxlbWVudFBhdHQsIGJvdW5kLCBuZWVkSW5SZXN1bHRzID0gZmFsc2UsIG5lZWRPdXRSZXN1bHRzID0gZmFsc2UsIGNoZWNrID0gaWRlbnRDaGVja2VyKSA9PiB7XG4gICAgY29uc3QgaW5SZXN1bHRzID0gbmVlZEluUmVzdWx0cyA/IFtdIDogdm9pZCAwO1xuICAgIGNvbnN0IG91dFJlc3VsdHMgPSBuZWVkT3V0UmVzdWx0cyA/IFtdIDogdm9pZCAwO1xuICAgIGNvbnN0IGtpbmQyID0ga2luZE9mMihzcGVjaW1lbik7XG4gICAgc3dpdGNoIChraW5kMikge1xuICAgICAgY2FzZSBcImNvcHlBcnJheVwiOiB7XG4gICAgICAgIGlmICghZWxlbWVudHNIYXNTcGxpdChcbiAgICAgICAgICBzcGVjaW1lbixcbiAgICAgICAgICBlbGVtZW50UGF0dCxcbiAgICAgICAgICBib3VuZCxcbiAgICAgICAgICBpblJlc3VsdHMsXG4gICAgICAgICAgb3V0UmVzdWx0cyxcbiAgICAgICAgICBjaGVja1xuICAgICAgICApKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbaW5SZXN1bHRzLCBvdXRSZXN1bHRzXTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5U2V0XCI6IHtcbiAgICAgICAgaWYgKCFlbGVtZW50c0hhc1NwbGl0KFxuICAgICAgICAgIHNwZWNpbWVuLnBheWxvYWQsXG4gICAgICAgICAgZWxlbWVudFBhdHQsXG4gICAgICAgICAgYm91bmQsXG4gICAgICAgICAgaW5SZXN1bHRzLFxuICAgICAgICAgIG91dFJlc3VsdHMsXG4gICAgICAgICAgY2hlY2tcbiAgICAgICAgKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIGluUmVzdWx0cyAmJiBtYWtlQ29weVNldChpblJlc3VsdHMpLFxuICAgICAgICAgIG91dFJlc3VsdHMgJiYgbWFrZUNvcHlTZXQob3V0UmVzdWx0cylcbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5QmFnXCI6IHtcbiAgICAgICAgaWYgKCFwYWlyc0hhc1NwbGl0KFxuICAgICAgICAgIHNwZWNpbWVuLnBheWxvYWQsXG4gICAgICAgICAgZWxlbWVudFBhdHQsXG4gICAgICAgICAgYm91bmQsXG4gICAgICAgICAgaW5SZXN1bHRzLFxuICAgICAgICAgIG91dFJlc3VsdHMsXG4gICAgICAgICAgY2hlY2tcbiAgICAgICAgKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIGluUmVzdWx0cyAmJiBtYWtlQ29weUJhZyhpblJlc3VsdHMpLFxuICAgICAgICAgIG91dFJlc3VsdHMgJiYgbWFrZUNvcHlCYWcob3V0UmVzdWx0cylcbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgcmV0dXJuIGNoZWNrKGZhbHNlLCByZWRhY3RlZGB1bmV4cGVjdGVkICR7cXVvdGUoa2luZDIpfWApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgbWF0Y2hDb250YWluZXJIYXNIZWxwZXIgPSBGYXIoXCJNLmNvbnRhaW5lckhhcyBoZWxwZXJcIiwge1xuICAgIC8qKlxuICogQHBhcmFtIHtDb3B5QXJyYXkgfCBDb3B5U2V0IHwgQ29weUJhZ30gc3BlY2ltZW5cbiAqIEBwYXJhbSB7W1BhdHRlcm4sIGJpZ2ludCwgTGltaXRzP119IHBheWxvYWRcbiAqIEBwYXJhbSB7Q2hlY2tlcn0gY2hlY2tcbiAqL1xuICAgIGNoZWNrTWF0Y2hlczogKHNwZWNpbWVuLCBbZWxlbWVudFBhdHQsIGJvdW5kLCBsaW1pdHMgPSB2b2lkIDBdLCBjaGVjaykgPT4ge1xuICAgICAgY29uc3Qga2luZDIgPSBraW5kT2YyKHNwZWNpbWVuLCBjaGVjayk7XG4gICAgICBjb25zdCB7IGRlY2ltYWxEaWdpdHNMaW1pdCB9ID0gbGltaXQobGltaXRzKTtcbiAgICAgIGlmICghYXBwbHlMYWJlbGluZ0Vycm9yKFxuICAgICAgICBjaGVja0RlY2ltYWxEaWdpdHNMaW1pdCxcbiAgICAgICAgW2JvdW5kLCBkZWNpbWFsRGlnaXRzTGltaXQsIGNoZWNrXSxcbiAgICAgICAgYCR7a2luZDJ9IG1hdGNoZXNgXG4gICAgICApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAhIWNvbnRhaW5lckhhc1NwbGl0MihcbiAgICAgICAgc3BlY2ltZW4sXG4gICAgICAgIGVsZW1lbnRQYXR0LFxuICAgICAgICBib3VuZCxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBjaGVja1xuICAgICAgKTtcbiAgICB9LFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAocGF5bG9hZCwgY2hlY2spID0+IGNoZWNrSXNXZWxsRm9ybWVkV2l0aExpbWl0KFxuICAgICAgcGF5bG9hZCxcbiAgICAgIGhhcmRlbihbTU0ucGF0dGVybigpLCBNTS5ndGUoMW4pXSksXG4gICAgICBjaGVjayxcbiAgICAgIFwiTS5jb250YWluZXJIYXMgcGF5bG9hZFwiXG4gICAgKSxcbiAgICBnZXRSYW5rQ292ZXI6ICgpID0+IGdldFBhc3NTdHlsZUNvdmVyKFwidGFnZ2VkXCIpXG4gIH0pO1xuICBjb25zdCBtYXRjaE1hcE9mSGVscGVyID0gRmFyKFwibWF0Y2g6bWFwT2YgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChzcGVjaW1lbiwgW2tleVBhdHQsIHZhbHVlUGF0dCwgbGltaXRzID0gdm9pZCAwXSwgY2hlY2spID0+IHtcbiAgICAgIGNvbnN0IHsgbnVtTWFwRW50cmllc0xpbWl0IH0gPSBsaW1pdChsaW1pdHMpO1xuICAgICAgcmV0dXJuIGNoZWNrS2luZChzcGVjaW1lbiwgXCJjb3B5TWFwXCIsIGNoZWNrKSAmJiBjaGVjayhcbiAgICAgICAgLyoqIEB0eXBlIHtBcnJheX0gKi9cbiAgICAgICAgc3BlY2ltZW4ucGF5bG9hZC5rZXlzLmxlbmd0aCA8PSBudW1NYXBFbnRyaWVzTGltaXQsXG4gICAgICAgIHJlZGFjdGVkYENvcHlNYXAgbXVzdCBoYXZlIG5vIG1vcmUgdGhhbiAke3F1b3RlKFxuICAgICAgICAgIG51bU1hcEVudHJpZXNMaW1pdFxuICAgICAgICApfSBlbnRyaWVzOiAke3NwZWNpbWVufWBcbiAgICAgICkgJiYgYXJyYXlFdmVyeU1hdGNoUGF0dGVybihcbiAgICAgICAgc3BlY2ltZW4ucGF5bG9hZC5rZXlzLFxuICAgICAgICBrZXlQYXR0LFxuICAgICAgICBjaGVjayxcbiAgICAgICAgXCJtYXAga2V5c1wiXG4gICAgICApICYmIGFycmF5RXZlcnlNYXRjaFBhdHRlcm4oXG4gICAgICAgIHNwZWNpbWVuLnBheWxvYWQudmFsdWVzLFxuICAgICAgICB2YWx1ZVBhdHQsXG4gICAgICAgIGNoZWNrLFxuICAgICAgICBcIm1hcCB2YWx1ZXNcIlxuICAgICAgKTtcbiAgICB9LFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAocGF5bG9hZCwgY2hlY2spID0+IGNoZWNrSXNXZWxsRm9ybWVkV2l0aExpbWl0KFxuICAgICAgcGF5bG9hZCxcbiAgICAgIGhhcmRlbihbTU0ucGF0dGVybigpLCBNTS5wYXR0ZXJuKCldKSxcbiAgICAgIGNoZWNrLFxuICAgICAgXCJtYXRjaDptYXBPZiBwYXlsb2FkXCJcbiAgICApLFxuICAgIGdldFJhbmtDb3ZlcjogKF9lbnRyeVBhdHQpID0+IGdldFBhc3NTdHlsZUNvdmVyKFwidGFnZ2VkXCIpXG4gIH0pO1xuICBjb25zdCBzcGxpdEFycmF5UGFydHMgPSAoc3BlY2ltZW4sIHJlcXVpcmVkUGF0dCwgb3B0aW9uYWxQYXR0KSA9PiB7XG4gICAgY29uc3QgbnVtUmVxdWlyZWQgPSByZXF1aXJlZFBhdHQubGVuZ3RoO1xuICAgIGNvbnN0IG51bU9wdGlvbmFsID0gb3B0aW9uYWxQYXR0Lmxlbmd0aDtcbiAgICBjb25zdCByZXF1aXJlZFNwZWNpbWVuID0gc3BlY2ltZW4uc2xpY2UoMCwgbnVtUmVxdWlyZWQpO1xuICAgIGNvbnN0IG9wdGlvbmFsU3BlY2ltZW4gPSBzcGVjaW1lbi5zbGljZShcbiAgICAgIG51bVJlcXVpcmVkLFxuICAgICAgbnVtUmVxdWlyZWQgKyBudW1PcHRpb25hbFxuICAgICk7XG4gICAgY29uc3QgcmVzdFNwZWNpbWVuID0gc3BlY2ltZW4uc2xpY2UobnVtUmVxdWlyZWQgKyBudW1PcHRpb25hbCk7XG4gICAgcmV0dXJuIGhhcmRlbih7IHJlcXVpcmVkU3BlY2ltZW4sIG9wdGlvbmFsU3BlY2ltZW4sIHJlc3RTcGVjaW1lbiB9KTtcbiAgfTtcbiAgY29uc3QgYWRhcHRBcnJheVBhdHRlcm4gPSAob3B0aW9uYWxQYXR0LCBsZW5ndGgpID0+IGhhcmRlbihvcHRpb25hbFBhdHQuc2xpY2UoMCwgbGVuZ3RoKS5tYXAoKHBhdHQpID0+IE1NLm9wdChwYXR0KSkpO1xuICBjb25zdCBtYXRjaFNwbGl0QXJyYXlIZWxwZXIgPSBGYXIoXCJtYXRjaDpzcGxpdEFycmF5IGhlbHBlclwiLCB7XG4gICAgY2hlY2tNYXRjaGVzOiAoc3BlY2ltZW4sIFtyZXF1aXJlZFBhdHQsIG9wdGlvbmFsUGF0dCA9IFtdLCByZXN0UGF0dCA9IE1NLmFueSgpXSwgY2hlY2spID0+IHtcbiAgICAgIGlmICghY2hlY2tLaW5kKHNwZWNpbWVuLCBcImNvcHlBcnJheVwiLCBjaGVjaykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgeyByZXF1aXJlZFNwZWNpbWVuLCBvcHRpb25hbFNwZWNpbWVuLCByZXN0U3BlY2ltZW4gfSA9IHNwbGl0QXJyYXlQYXJ0cyhzcGVjaW1lbiwgcmVxdWlyZWRQYXR0LCBvcHRpb25hbFBhdHQpO1xuICAgICAgY29uc3QgcGFydGlhbFBhdHQgPSBhZGFwdEFycmF5UGF0dGVybihcbiAgICAgICAgb3B0aW9uYWxQYXR0LFxuICAgICAgICBvcHRpb25hbFNwZWNpbWVuLmxlbmd0aFxuICAgICAgKTtcbiAgICAgIGxldCBhcmdOdW0gPSAwO1xuICAgICAgcmV0dXJuIChyZXF1aXJlZFNwZWNpbWVuLmxlbmd0aCA9PT0gcmVxdWlyZWRQYXR0Lmxlbmd0aCB8fCBjaGVjayhcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIHJlZGFjdGVkYEV4cGVjdGVkIGF0IGxlYXN0ICR7cXVvdGUoXG4gICAgICAgICAgcmVxdWlyZWRQYXR0Lmxlbmd0aFxuICAgICAgICApfSBhcmd1bWVudHM6ICR7c3BlY2ltZW59YFxuICAgICAgKSkgJiYgcmVxdWlyZWRQYXR0LmV2ZXJ5KFxuICAgICAgICAocDMsIGkzKSA9PiAoXG4gICAgICAgICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBsdXNwbHVzKi9cbiAgICAgICAgICBjaGVja01hdGNoZXMyKHJlcXVpcmVkU3BlY2ltZW5baTNdLCBwMywgY2hlY2ssIGBhcmcgJHthcmdOdW0rK31gKVxuICAgICAgICApXG4gICAgICApICYmIHBhcnRpYWxQYXR0LmV2ZXJ5KFxuICAgICAgICAocDMsIGkzKSA9PiAoXG4gICAgICAgICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBsdXNwbHVzKi9cbiAgICAgICAgICBjaGVja01hdGNoZXMyKG9wdGlvbmFsU3BlY2ltZW5baTNdLCBwMywgY2hlY2ssIGBhcmcgJHthcmdOdW0rK30/YClcbiAgICAgICAgKVxuICAgICAgKSAmJiBjaGVja01hdGNoZXMyKHJlc3RTcGVjaW1lbiwgcmVzdFBhdHQsIGNoZWNrLCBcIi4uLnJlc3RcIik7XG4gICAgfSxcbiAgICAvKipcbiAqIEBwYXJhbSB7QXJyYXl9IHNwbGl0QXJyYXlcbiAqIEBwYXJhbSB7Q2hlY2tlcn0gY2hlY2tcbiAqL1xuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAoc3BsaXRBcnJheSwgY2hlY2spID0+IHtcbiAgICAgIGlmIChwYXNzU3R5bGVPZihzcGxpdEFycmF5KSA9PT0gXCJjb3B5QXJyYXlcIiAmJiAoc3BsaXRBcnJheS5sZW5ndGggPj0gMSB8fCBzcGxpdEFycmF5Lmxlbmd0aCA8PSAzKSkge1xuICAgICAgICBjb25zdCBbcmVxdWlyZWRQYXR0LCBvcHRpb25hbFBhdHQgPSB2b2lkIDAsIHJlc3RQYXR0ID0gdm9pZCAwXSA9IHNwbGl0QXJyYXk7XG4gICAgICAgIGlmIChpc1BhdHRlcm4yKHJlcXVpcmVkUGF0dCkgJiYgcGFzc1N0eWxlT2YocmVxdWlyZWRQYXR0KSA9PT0gXCJjb3B5QXJyYXlcIiAmJiAob3B0aW9uYWxQYXR0ID09PSB2b2lkIDAgfHwgaXNQYXR0ZXJuMihvcHRpb25hbFBhdHQpICYmIHBhc3NTdHlsZU9mKG9wdGlvbmFsUGF0dCkgPT09IFwiY29weUFycmF5XCIpICYmIChyZXN0UGF0dCA9PT0gdm9pZCAwIHx8IGlzUGF0dGVybjIocmVzdFBhdHQpKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gY2hlY2soXG4gICAgICAgIGZhbHNlLFxuICAgICAgICByZWRhY3RlZGBNdXN0IGJlIGFuIGFycmF5IG9mIGEgcmVxdWlyZWRQYXR0IGFycmF5LCBhbiBvcHRpb25hbCBvcHRpb25hbFBhdHQgYXJyYXksIGFuZCBhbiBvcHRpb25hbCByZXN0UGF0dDogJHtxdW90ZShcbiAgICAgICAgICBzcGxpdEFycmF5XG4gICAgICAgICl9YFxuICAgICAgKTtcbiAgICB9LFxuICAgIGdldFJhbmtDb3ZlcjogKFtcbiAgICAgIF9yZXF1aXJlZFBhdHQsXG4gICAgICBfb3B0aW9uYWxQYXR0ID0gdm9pZCAwLFxuICAgICAgX3Jlc3RQYXR0ID0gdm9pZCAwXG4gICAgXSkgPT4gZ2V0UGFzc1N0eWxlQ292ZXIoXCJjb3B5QXJyYXlcIilcbiAgfSk7XG4gIGNvbnN0IHNwbGl0UmVjb3JkUGFydHMgPSAoc3BlY2ltZW4sIHJlcXVpcmVkUGF0dCwgb3B0aW9uYWxQYXR0KSA9PiB7XG4gICAgY29uc3QgcmVxdWlyZWRFbnRyaWVzID0gW107XG4gICAgY29uc3Qgb3B0aW9uYWxFbnRyaWVzID0gW107XG4gICAgY29uc3QgcmVzdEVudHJpZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgZW50cmllczcoc3BlY2ltZW4pKSB7XG4gICAgICBpZiAoaGFzT3duOShyZXF1aXJlZFBhdHQsIG5hbWUpKSB7XG4gICAgICAgIHJlcXVpcmVkRW50cmllcy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xuICAgICAgfSBlbHNlIGlmIChoYXNPd245KG9wdGlvbmFsUGF0dCwgbmFtZSkpIHtcbiAgICAgICAgb3B0aW9uYWxFbnRyaWVzLnB1c2goW25hbWUsIHZhbHVlXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN0RW50cmllcy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaGFyZGVuKHtcbiAgICAgIHJlcXVpcmVkU3BlY2ltZW46IGZyb21VbmlxdWVFbnRyaWVzKHJlcXVpcmVkRW50cmllcyksXG4gICAgICBvcHRpb25hbFNwZWNpbWVuOiBmcm9tVW5pcXVlRW50cmllcyhvcHRpb25hbEVudHJpZXMpLFxuICAgICAgcmVzdFNwZWNpbWVuOiBmcm9tVW5pcXVlRW50cmllcyhyZXN0RW50cmllcylcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgYWRhcHRSZWNvcmRQYXR0ZXJuID0gKG9wdGlvbmFsUGF0dCwgbmFtZXMpID0+IGZyb21VbmlxdWVFbnRyaWVzKG5hbWVzLm1hcCgobmFtZSkgPT4gW25hbWUsIE1NLm9wdChvcHRpb25hbFBhdHRbbmFtZV0pXSkpO1xuICBjb25zdCBtYXRjaFNwbGl0UmVjb3JkSGVscGVyID0gRmFyKFwibWF0Y2g6c3BsaXRSZWNvcmQgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChzcGVjaW1lbiwgW3JlcXVpcmVkUGF0dCwgb3B0aW9uYWxQYXR0ID0ge30sIHJlc3RQYXR0ID0gTU0uYW55KCldLCBjaGVjaykgPT4ge1xuICAgICAgaWYgKCFjaGVja0tpbmQoc3BlY2ltZW4sIFwiY29weVJlY29yZFwiLCBjaGVjaykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgeyByZXF1aXJlZFNwZWNpbWVuLCBvcHRpb25hbFNwZWNpbWVuLCByZXN0U3BlY2ltZW4gfSA9IHNwbGl0UmVjb3JkUGFydHMoc3BlY2ltZW4sIHJlcXVpcmVkUGF0dCwgb3B0aW9uYWxQYXR0KTtcbiAgICAgIGNvbnN0IHBhcnRpYWxOYW1lcyA9IChcbiAgICAgICAgLyoqIEB0eXBlIHtzdHJpbmdbXX0gKi9cbiAgICAgICAgb3duS2V5czE4KG9wdGlvbmFsU3BlY2ltZW4pXG4gICAgICApO1xuICAgICAgY29uc3QgcGFydGlhbFBhdHQgPSBhZGFwdFJlY29yZFBhdHRlcm4ob3B0aW9uYWxQYXR0LCBwYXJ0aWFsTmFtZXMpO1xuICAgICAgcmV0dXJuIGNoZWNrTWF0Y2hlczIocmVxdWlyZWRTcGVjaW1lbiwgcmVxdWlyZWRQYXR0LCBjaGVjaykgJiYgcGFydGlhbE5hbWVzLmV2ZXJ5KFxuICAgICAgICAobmFtZSkgPT4gY2hlY2tNYXRjaGVzMihcbiAgICAgICAgICBvcHRpb25hbFNwZWNpbWVuW25hbWVdLFxuICAgICAgICAgIHBhcnRpYWxQYXR0W25hbWVdLFxuICAgICAgICAgIGNoZWNrLFxuICAgICAgICAgIGAke25hbWV9P2BcbiAgICAgICAgKVxuICAgICAgKSAmJiBjaGVja01hdGNoZXMyKHJlc3RTcGVjaW1lbiwgcmVzdFBhdHQsIGNoZWNrLCBcIi4uLnJlc3RcIik7XG4gICAgfSxcbiAgICAvKipcbiAqIEBwYXJhbSB7QXJyYXl9IHNwbGl0QXJyYXlcbiAqIEBwYXJhbSB7Q2hlY2tlcn0gY2hlY2tcbiAqL1xuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAoc3BsaXRBcnJheSwgY2hlY2spID0+IHtcbiAgICAgIGlmIChwYXNzU3R5bGVPZihzcGxpdEFycmF5KSA9PT0gXCJjb3B5QXJyYXlcIiAmJiAoc3BsaXRBcnJheS5sZW5ndGggPj0gMSB8fCBzcGxpdEFycmF5Lmxlbmd0aCA8PSAzKSkge1xuICAgICAgICBjb25zdCBbcmVxdWlyZWRQYXR0LCBvcHRpb25hbFBhdHQgPSB2b2lkIDAsIHJlc3RQYXR0ID0gdm9pZCAwXSA9IHNwbGl0QXJyYXk7XG4gICAgICAgIGlmIChpc1BhdHRlcm4yKHJlcXVpcmVkUGF0dCkgJiYgcGFzc1N0eWxlT2YocmVxdWlyZWRQYXR0KSA9PT0gXCJjb3B5UmVjb3JkXCIgJiYgKG9wdGlvbmFsUGF0dCA9PT0gdm9pZCAwIHx8IGlzUGF0dGVybjIob3B0aW9uYWxQYXR0KSAmJiBwYXNzU3R5bGVPZihvcHRpb25hbFBhdHQpID09PSBcImNvcHlSZWNvcmRcIikgJiYgKHJlc3RQYXR0ID09PSB2b2lkIDAgfHwgaXNQYXR0ZXJuMihyZXN0UGF0dCkpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBjaGVjayhcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIHJlZGFjdGVkYE11c3QgYmUgYW4gYXJyYXkgb2YgYSByZXF1aXJlZFBhdHQgcmVjb3JkLCBhbiBvcHRpb25hbCBvcHRpb25hbFBhdHQgcmVjb3JkLCBhbmQgYW4gb3B0aW9uYWwgcmVzdFBhdHQ6ICR7cXVvdGUoXG4gICAgICAgICAgc3BsaXRBcnJheVxuICAgICAgICApfWBcbiAgICAgICk7XG4gICAgfSxcbiAgICBnZXRSYW5rQ292ZXI6IChbXG4gICAgICByZXF1aXJlZFBhdHQsXG4gICAgICBfb3B0aW9uYWxQYXR0ID0gdm9pZCAwLFxuICAgICAgX3Jlc3RQYXR0ID0gdm9pZCAwXG4gICAgXSkgPT4gZ2V0UGFzc1N0eWxlQ292ZXIocGFzc1N0eWxlT2YocmVxdWlyZWRQYXR0KSlcbiAgfSk7XG4gIGNvbnN0IEhlbHBlcnNCeU1hdGNoVGFnID0gaGFyZGVuKHtcbiAgICBcIm1hdGNoOmFueVwiOiBtYXRjaEFueUhlbHBlcixcbiAgICBcIm1hdGNoOmFuZFwiOiBtYXRjaEFuZEhlbHBlcixcbiAgICBcIm1hdGNoOm9yXCI6IG1hdGNoT3JIZWxwZXIsXG4gICAgXCJtYXRjaDpub3RcIjogbWF0Y2hOb3RIZWxwZXIsXG4gICAgXCJtYXRjaDpzY2FsYXJcIjogbWF0Y2hTY2FsYXJIZWxwZXIsXG4gICAgXCJtYXRjaDprZXlcIjogbWF0Y2hLZXlIZWxwZXIsXG4gICAgXCJtYXRjaDpwYXR0ZXJuXCI6IG1hdGNoUGF0dGVybkhlbHBlcixcbiAgICBcIm1hdGNoOmtpbmRcIjogbWF0Y2hLaW5kSGVscGVyLFxuICAgIFwibWF0Y2g6dGFnZ2VkXCI6IG1hdGNoVGFnZ2VkSGVscGVyLFxuICAgIFwibWF0Y2g6YmlnaW50XCI6IG1hdGNoQmlnaW50SGVscGVyLFxuICAgIFwibWF0Y2g6bmF0XCI6IG1hdGNoTmF0SGVscGVyLFxuICAgIFwibWF0Y2g6c3RyaW5nXCI6IG1hdGNoU3RyaW5nSGVscGVyLFxuICAgIFwibWF0Y2g6c3ltYm9sXCI6IG1hdGNoU3ltYm9sSGVscGVyLFxuICAgIFwibWF0Y2g6cmVtb3RhYmxlXCI6IG1hdGNoUmVtb3RhYmxlSGVscGVyLFxuICAgIFwibWF0Y2g6bHRcIjogbWF0Y2hMVEhlbHBlcixcbiAgICBcIm1hdGNoOmx0ZVwiOiBtYXRjaExURUhlbHBlcixcbiAgICBcIm1hdGNoOmd0ZVwiOiBtYXRjaEdURUhlbHBlcixcbiAgICBcIm1hdGNoOmd0XCI6IG1hdGNoR1RIZWxwZXIsXG4gICAgXCJtYXRjaDphcnJheU9mXCI6IG1hdGNoQXJyYXlPZkhlbHBlcixcbiAgICBcIm1hdGNoOmJ5dGVBcnJheVwiOiBtYXRjaEJ5dGVBcnJheUhlbHBlcixcbiAgICBcIm1hdGNoOnJlY29yZE9mXCI6IG1hdGNoUmVjb3JkT2ZIZWxwZXIsXG4gICAgXCJtYXRjaDpzZXRPZlwiOiBtYXRjaFNldE9mSGVscGVyLFxuICAgIFwibWF0Y2g6YmFnT2ZcIjogbWF0Y2hCYWdPZkhlbHBlcixcbiAgICBcIm1hdGNoOmNvbnRhaW5lckhhc1wiOiBtYXRjaENvbnRhaW5lckhhc0hlbHBlcixcbiAgICBcIm1hdGNoOm1hcE9mXCI6IG1hdGNoTWFwT2ZIZWxwZXIsXG4gICAgXCJtYXRjaDpzcGxpdEFycmF5XCI6IG1hdGNoU3BsaXRBcnJheUhlbHBlcixcbiAgICBcIm1hdGNoOnNwbGl0UmVjb3JkXCI6IG1hdGNoU3BsaXRSZWNvcmRIZWxwZXJcbiAgfSk7XG4gIGNvbnN0IG1ha2VNYXRjaGVyID0gKHRhZywgcGF5bG9hZCkgPT4ge1xuICAgIGNvbnN0IG1hdGNoZXIgPSBtYWtlVGFnZ2VkKHRhZywgcGF5bG9hZCk7XG4gICAgYXNzZXJ0UGF0dGVybjIobWF0Y2hlcik7XG4gICAgcmV0dXJuIG1hdGNoZXI7XG4gIH07XG4gIGNvbnN0IG1ha2VLaW5kTWF0Y2hlciA9IChraW5kMikgPT4gbWFrZU1hdGNoZXIoXCJtYXRjaDpraW5kXCIsIGtpbmQyKTtcbiAgY29uc3QgQW55U2hhcGUgPSBtYWtlTWF0Y2hlcihcIm1hdGNoOmFueVwiLCB2b2lkIDApO1xuICBjb25zdCBTY2FsYXJTaGFwZSA9IG1ha2VNYXRjaGVyKFwibWF0Y2g6c2NhbGFyXCIsIHZvaWQgMCk7XG4gIGNvbnN0IEtleVNoYXBlID0gbWFrZU1hdGNoZXIoXCJtYXRjaDprZXlcIiwgdm9pZCAwKTtcbiAgY29uc3QgUGF0dGVyblNoYXBlID0gbWFrZU1hdGNoZXIoXCJtYXRjaDpwYXR0ZXJuXCIsIHZvaWQgMCk7XG4gIGNvbnN0IEJvb2xlYW5TaGFwZSA9IG1ha2VLaW5kTWF0Y2hlcihcImJvb2xlYW5cIik7XG4gIGNvbnN0IE51bWJlclNoYXBlID0gbWFrZUtpbmRNYXRjaGVyKFwibnVtYmVyXCIpO1xuICBjb25zdCBCaWdJbnRTaGFwZSA9IG1ha2VUYWdnZWQoXCJtYXRjaDpiaWdpbnRcIiwgW10pO1xuICBjb25zdCBOYXRTaGFwZSA9IG1ha2VUYWdnZWQoXCJtYXRjaDpuYXRcIiwgW10pO1xuICBjb25zdCBTdHJpbmdTaGFwZSA9IG1ha2VUYWdnZWQoXCJtYXRjaDpzdHJpbmdcIiwgW10pO1xuICBjb25zdCBTeW1ib2xTaGFwZSA9IG1ha2VUYWdnZWQoXCJtYXRjaDpzeW1ib2xcIiwgW10pO1xuICBjb25zdCBSZWNvcmRTaGFwZSA9IG1ha2VUYWdnZWQoXCJtYXRjaDpyZWNvcmRPZlwiLCBbQW55U2hhcGUsIEFueVNoYXBlXSk7XG4gIGNvbnN0IEFycmF5U2hhcGUgPSBtYWtlVGFnZ2VkKFwibWF0Y2g6YXJyYXlPZlwiLCBbQW55U2hhcGVdKTtcbiAgY29uc3QgQnl0ZUFycmF5U2hhcGUgPSBtYWtlVGFnZ2VkKFwibWF0Y2g6Ynl0ZUFycmF5XCIsIFtdKTtcbiAgY29uc3QgU2V0U2hhcGUgPSBtYWtlVGFnZ2VkKFwibWF0Y2g6c2V0T2ZcIiwgW0FueVNoYXBlXSk7XG4gIGNvbnN0IEJhZ1NoYXBlID0gbWFrZVRhZ2dlZChcIm1hdGNoOmJhZ09mXCIsIFtBbnlTaGFwZSwgQW55U2hhcGVdKTtcbiAgY29uc3QgTWFwU2hhcGUgPSBtYWtlVGFnZ2VkKFwibWF0Y2g6bWFwT2ZcIiwgW0FueVNoYXBlLCBBbnlTaGFwZV0pO1xuICBjb25zdCBSZW1vdGFibGVTaGFwZSA9IG1ha2VLaW5kTWF0Y2hlcihcInJlbW90YWJsZVwiKTtcbiAgY29uc3QgRXJyb3JTaGFwZSA9IG1ha2VLaW5kTWF0Y2hlcihcImVycm9yXCIpO1xuICBjb25zdCBQcm9taXNlU2hhcGUgPSBtYWtlS2luZE1hdGNoZXIoXCJwcm9taXNlXCIpO1xuICBjb25zdCBVbmRlZmluZWRTaGFwZSA9IG1ha2VLaW5kTWF0Y2hlcihcInVuZGVmaW5lZFwiKTtcbiAgY29uc3QgbWFrZUxpbWl0c01hdGNoZXIgPSAodGFnLCBwYXlsb2FkKSA9PiB7XG4gICAgaWYgKHBheWxvYWRbcGF5bG9hZC5sZW5ndGggLSAxXSA9PT0gdm9pZCAwKSB7XG4gICAgICBwYXlsb2FkID0gaGFyZGVuKHBheWxvYWQuc2xpY2UoMCwgcGF5bG9hZC5sZW5ndGggLSAxKSk7XG4gICAgfVxuICAgIHJldHVybiBtYWtlTWF0Y2hlcih0YWcsIHBheWxvYWQpO1xuICB9O1xuICBjb25zdCBtYWtlUmVtb3RhYmxlTWF0Y2hlciA9IChsYWJlbCA9IHZvaWQgMCkgPT4gbGFiZWwgPT09IHZvaWQgMCA/IFJlbW90YWJsZVNoYXBlIDogbWFrZU1hdGNoZXIoXCJtYXRjaDpyZW1vdGFibGVcIiwgaGFyZGVuKHsgbGFiZWwgfSkpO1xuICBjb25zdCBtYWtlU3BsaXRQYXlsb2FkID0gKGVtcHR5NSwgYmFzZTIsIG9wdGlvbmFsID0gdm9pZCAwLCByZXN0ID0gdm9pZCAwKSA9PiB7XG4gICAgaWYgKHJlc3QpIHtcbiAgICAgIHJldHVybiBbYmFzZTIsIG9wdGlvbmFsIHx8IGVtcHR5NSwgcmVzdF07XG4gICAgfVxuICAgIGlmIChvcHRpb25hbCkge1xuICAgICAgcmV0dXJuIFtiYXNlMiwgb3B0aW9uYWxdO1xuICAgIH1cbiAgICByZXR1cm4gW2Jhc2UyXTtcbiAgfTtcbiAgY29uc3QgTTMgPSBoYXJkZW4oe1xuICAgIGFueTogKCkgPT4gQW55U2hhcGUsXG4gICAgYW5kOiAoLi4ucGF0dHMpID0+IG1ha2VNYXRjaGVyKFwibWF0Y2g6YW5kXCIsIHBhdHRzKSxcbiAgICBvcjogKC4uLnBhdHRzKSA9PiBtYWtlTWF0Y2hlcihcIm1hdGNoOm9yXCIsIHBhdHRzKSxcbiAgICBub3Q6IChzdWJQYXR0KSA9PiBtYWtlTWF0Y2hlcihcIm1hdGNoOm5vdFwiLCBzdWJQYXR0KSxcbiAgICBzY2FsYXI6ICgpID0+IFNjYWxhclNoYXBlLFxuICAgIGtleTogKCkgPT4gS2V5U2hhcGUsXG4gICAgcGF0dGVybjogKCkgPT4gUGF0dGVyblNoYXBlLFxuICAgIGtpbmQ6IG1ha2VLaW5kTWF0Y2hlcixcbiAgICB0YWdnZWQ6ICh0YWdQYXR0ID0gTTMuc3RyaW5nKCksIHBheWxvYWRQYXR0ID0gTTMuYW55KCkpID0+IG1ha2VNYXRjaGVyKFwibWF0Y2g6dGFnZ2VkXCIsIGhhcmRlbihbdGFnUGF0dCwgcGF5bG9hZFBhdHRdKSksXG4gICAgYm9vbGVhbjogKCkgPT4gQm9vbGVhblNoYXBlLFxuICAgIG51bWJlcjogKCkgPT4gTnVtYmVyU2hhcGUsXG4gICAgYmlnaW50OiAobGltaXRzID0gdm9pZCAwKSA9PiBsaW1pdHMgPyBtYWtlTGltaXRzTWF0Y2hlcihcIm1hdGNoOmJpZ2ludFwiLCBbbGltaXRzXSkgOiBCaWdJbnRTaGFwZSxcbiAgICBuYXQ6IChsaW1pdHMgPSB2b2lkIDApID0+IGxpbWl0cyA/IG1ha2VMaW1pdHNNYXRjaGVyKFwibWF0Y2g6bmF0XCIsIFtsaW1pdHNdKSA6IE5hdFNoYXBlLFxuICAgIHN0cmluZzogKGxpbWl0cyA9IHZvaWQgMCkgPT4gbGltaXRzID8gbWFrZUxpbWl0c01hdGNoZXIoXCJtYXRjaDpzdHJpbmdcIiwgW2xpbWl0c10pIDogU3RyaW5nU2hhcGUsXG4gICAgc3ltYm9sOiAobGltaXRzID0gdm9pZCAwKSA9PiBsaW1pdHMgPyBtYWtlTGltaXRzTWF0Y2hlcihcIm1hdGNoOnN5bWJvbFwiLCBbbGltaXRzXSkgOiBTeW1ib2xTaGFwZSxcbiAgICByZWNvcmQ6IChsaW1pdHMgPSB2b2lkIDApID0+IGxpbWl0cyA/IE0zLnJlY29yZE9mKE0zLmFueSgpLCBNMy5hbnkoKSwgbGltaXRzKSA6IFJlY29yZFNoYXBlLFxuICAgIC8qIHN0cnVjdDogQSBwYXR0ZXJuIHRoYXQgbWF0Y2hlcyBDb3B5UmVjb3JkcyB3aXRoIGEgZml4ZWQgcXVhbnRpdHkgb2YqL1xuICAgIC8qIGVudHJpZXMgd2hlcmUgdGhlIHZhbHVlcyBtYXRjaCBwYXR0ZXJucyBmb3IgY29ycmVzcG9uZGluZyBrZXlzIGlzIG1lcmVseSovXG4gICAgLyogYSBoYXJkZW5lZCBvYmplY3Qgd2l0aCBwYXR0ZXJucyBpbiB0aGUgcGxhY2VzIG9mIHZhbHVlcyBmb3IqL1xuICAgIC8qIGNvcnJlc3BvbmRpbmcga2V5cy4qL1xuICAgIC8qIEZvciBleGFtcGxlLCBhIHBhdHRlcm4gdGhhdCBtYXRjaGVzIENvcHlSZWNvcmRzIHRoYXQgaGF2ZSBhIHN0cmluZyB2YWx1ZSovXG4gICAgLyogZm9yIHRoZSBrZXkgJ3gnIGFuZCBhIG51bWJlciBmb3IgdGhlIGtleSAneScgaXM6Ki9cbiAgICAvKiBoYXJkZW4oeyB4OiBNLnN0cmluZygpLCB5OiBNLm51bWJlcigpIH0pLiovXG4gICAgYXJyYXk6IChsaW1pdHMgPSB2b2lkIDApID0+IGxpbWl0cyA/IE0zLmFycmF5T2YoTTMuYW55KCksIGxpbWl0cykgOiBBcnJheVNoYXBlLFxuICAgIC8qIHR1cGxlOiBBIHBhdHRlcm4gdGhhdCBtYXRjaGVzIENvcHlBcnJheXMgd2l0aCBhIGZpeGVkIHF1YW50aXR5IG9mIHZhbHVlcyovXG4gICAgLyogdGhhdCBtYXRjaCBhIGhldGVyb2dlbmVvdXMgYXJyYXkgb2YgcGF0dGVybnMgaXMgbWVyZWx5IGEgaGFyZGVuZWQgYXJyYXkqL1xuICAgIC8qIG9mIHRoZSByZXNwZWN0aXZlIHBhdHRlcm5zLiovXG4gICAgLyogRm9yIGV4YW1wbGUsIGEgcGF0dGVybiB0aGF0IG1hdGNoZXMgQ29weUFycmF5cyBvZiBsZW5ndGggMiB0aGF0IGhhdmUgYSovXG4gICAgLyogc3RyaW5nIGF0IGluZGV4IDAgYW5kIGEgbnVtYmVyIGF0IGluZGV4IDEgaXM6Ki9cbiAgICAvKiBoYXJkZW4oWyBNLnN0cmluZygpLCBNLm51bWJlcigpIF0pLiovXG4gICAgYnl0ZUFycmF5OiAobGltaXRzID0gdm9pZCAwKSA9PiBsaW1pdHMgPyBtYWtlTGltaXRzTWF0Y2hlcihcIm1hdGNoOmJ5dGVBcnJheVwiLCBbbGltaXRzXSkgOiBCeXRlQXJyYXlTaGFwZSxcbiAgICBzZXQ6IChsaW1pdHMgPSB2b2lkIDApID0+IGxpbWl0cyA/IE0zLnNldE9mKE0zLmFueSgpLCBsaW1pdHMpIDogU2V0U2hhcGUsXG4gICAgYmFnOiAobGltaXRzID0gdm9pZCAwKSA9PiBsaW1pdHMgPyBNMy5iYWdPZihNMy5hbnkoKSwgTTMuYW55KCksIGxpbWl0cykgOiBCYWdTaGFwZSxcbiAgICBtYXA6IChsaW1pdHMgPSB2b2lkIDApID0+IGxpbWl0cyA/IE0zLm1hcE9mKE0zLmFueSgpLCBNMy5hbnkoKSwgbGltaXRzKSA6IE1hcFNoYXBlLFxuICAgIC8qIGhldGVyb2dlbmVvdXMgbWFwOiBBIHBhdHRlcm4gdGhhdCBtYXRjaGVzIENvcHlNYXBzIHdpdGggYSBmaXhlZCBxdWFudGl0eSovXG4gICAgLyogb2YgZW50cmllcyB3aGVyZSB0aGUgdmFsdWUgZm9yIGVhY2gga2V5IG1hdGNoZXMgYSBjb3JyZXNwb25kaW5nIHBhdHRlcm4qL1xuICAgIC8qIGlzIG1lcmVseSBhIChoYXJkZW5lZCkgQ29weU1hcCB3aXRoIHBhdHRlcm5zIGluc3RlYWQgb2YgdmFsdWVzIGZvciB0aGUqL1xuICAgIC8qIGNvcnJlc3BvbmRpbmcga2V5cy4qL1xuICAgIC8qIEZvciBleGFtcGxlLCBhIHBhdHRlcm4gdGhhdCBtYXRjaGVzIENvcHlNYXBzIHdoZXJlIHRoZSB2YWx1ZSBmb3IgdGhlIGtleSovXG4gICAgLyogJ3gnIGlzIGEgbnVtYmVyIGFuZCB0aGUgdmFsdWUgZm9yIHRoZSBrZXkgJ3knIGlzIGEgc3RyaW5nIGlzOiovXG4gICAgLyogbWFrZUNvcHlNYXAoW1sneCcsIE0ubnVtYmVyKCldLCBbJ3knLCBNLnN0cmluZygpXV0pLiovXG4gICAgcmVtb3RhYmxlOiBtYWtlUmVtb3RhYmxlTWF0Y2hlcixcbiAgICBlcnJvcjogKCkgPT4gRXJyb3JTaGFwZSxcbiAgICBwcm9taXNlOiAoKSA9PiBQcm9taXNlU2hhcGUsXG4gICAgdW5kZWZpbmVkOiAoKSA9PiBVbmRlZmluZWRTaGFwZSxcbiAgICBudWxsOiAoKSA9PiBudWxsLFxuICAgIGx0OiAocmlnaHRPcGVyYW5kKSA9PiBtYWtlTWF0Y2hlcihcIm1hdGNoOmx0XCIsIHJpZ2h0T3BlcmFuZCksXG4gICAgbHRlOiAocmlnaHRPcGVyYW5kKSA9PiBtYWtlTWF0Y2hlcihcIm1hdGNoOmx0ZVwiLCByaWdodE9wZXJhbmQpLFxuICAgIGVxOiAoa2V5KSA9PiB7XG4gICAgICBhc3NlcnRLZXkoa2V5KTtcbiAgICAgIHJldHVybiBrZXkgPT09IHZvaWQgMCA/IE0zLnVuZGVmaW5lZCgpIDoga2V5O1xuICAgIH0sXG4gICAgbmVxOiAoa2V5KSA9PiBNMy5ub3QoTTMuZXEoa2V5KSksXG4gICAgZ3RlOiAocmlnaHRPcGVyYW5kKSA9PiBtYWtlTWF0Y2hlcihcIm1hdGNoOmd0ZVwiLCByaWdodE9wZXJhbmQpLFxuICAgIGd0OiAocmlnaHRPcGVyYW5kKSA9PiBtYWtlTWF0Y2hlcihcIm1hdGNoOmd0XCIsIHJpZ2h0T3BlcmFuZCksXG4gICAgcmVjb3JkT2Y6IChrZXlQYXR0ID0gTTMuYW55KCksIHZhbHVlUGF0dCA9IE0zLmFueSgpLCBsaW1pdHMgPSB2b2lkIDApID0+IG1ha2VMaW1pdHNNYXRjaGVyKFwibWF0Y2g6cmVjb3JkT2ZcIiwgW2tleVBhdHQsIHZhbHVlUGF0dCwgbGltaXRzXSksXG4gICAgYXJyYXlPZjogKHN1YlBhdHQgPSBNMy5hbnkoKSwgbGltaXRzID0gdm9pZCAwKSA9PiBtYWtlTGltaXRzTWF0Y2hlcihcIm1hdGNoOmFycmF5T2ZcIiwgW3N1YlBhdHQsIGxpbWl0c10pLFxuICAgIHNldE9mOiAoa2V5UGF0dCA9IE0zLmFueSgpLCBsaW1pdHMgPSB2b2lkIDApID0+IG1ha2VMaW1pdHNNYXRjaGVyKFwibWF0Y2g6c2V0T2ZcIiwgW2tleVBhdHQsIGxpbWl0c10pLFxuICAgIGJhZ09mOiAoa2V5UGF0dCA9IE0zLmFueSgpLCBjb3VudFBhdHQgPSBNMy5hbnkoKSwgbGltaXRzID0gdm9pZCAwKSA9PiBtYWtlTGltaXRzTWF0Y2hlcihcIm1hdGNoOmJhZ09mXCIsIFtrZXlQYXR0LCBjb3VudFBhdHQsIGxpbWl0c10pLFxuICAgIGNvbnRhaW5lckhhczogKGVsZW1lbnRQYXR0ID0gTTMuYW55KCksIGNvdW50UGF0dCA9IDFuLCBsaW1pdHMgPSB2b2lkIDApID0+IG1ha2VMaW1pdHNNYXRjaGVyKFwibWF0Y2g6Y29udGFpbmVySGFzXCIsIFtlbGVtZW50UGF0dCwgY291bnRQYXR0LCBsaW1pdHNdKSxcbiAgICBtYXBPZjogKGtleVBhdHQgPSBNMy5hbnkoKSwgdmFsdWVQYXR0ID0gTTMuYW55KCksIGxpbWl0cyA9IHZvaWQgMCkgPT4gbWFrZUxpbWl0c01hdGNoZXIoXCJtYXRjaDptYXBPZlwiLCBba2V5UGF0dCwgdmFsdWVQYXR0LCBsaW1pdHNdKSxcbiAgICBzcGxpdEFycmF5OiAoYmFzZTIsIG9wdGlvbmFsID0gdm9pZCAwLCByZXN0ID0gdm9pZCAwKSA9PiBtYWtlTWF0Y2hlcihcbiAgICAgIFwibWF0Y2g6c3BsaXRBcnJheVwiLFxuICAgICAgbWFrZVNwbGl0UGF5bG9hZChbXSwgYmFzZTIsIG9wdGlvbmFsLCByZXN0KVxuICAgICksXG4gICAgc3BsaXRSZWNvcmQ6IChiYXNlMiwgb3B0aW9uYWwgPSB2b2lkIDAsIHJlc3QgPSB2b2lkIDApID0+IG1ha2VNYXRjaGVyKFxuICAgICAgXCJtYXRjaDpzcGxpdFJlY29yZFwiLFxuICAgICAgbWFrZVNwbGl0UGF5bG9hZCh7fSwgYmFzZTIsIG9wdGlvbmFsLCByZXN0KVxuICAgICksXG4gICAgc3BsaXQ6IChiYXNlMiwgcmVzdCA9IHZvaWQgMCkgPT4ge1xuICAgICAgaWYgKHBhc3NTdHlsZU9mKGhhcmRlbihiYXNlMikpID09PSBcImNvcHlBcnJheVwiKSB7XG4gICAgICAgIHJldHVybiBNMy5zcGxpdEFycmF5KGJhc2UyLCByZXN0ICYmIFtdLCByZXN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNMy5zcGxpdFJlY29yZChiYXNlMiwgcmVzdCAmJiB7fSwgcmVzdCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBwYXJ0aWFsOiAoYmFzZTIsIHJlc3QgPSB2b2lkIDApID0+IHtcbiAgICAgIGlmIChwYXNzU3R5bGVPZihoYXJkZW4oYmFzZTIpKSA9PT0gXCJjb3B5QXJyYXlcIikge1xuICAgICAgICByZXR1cm4gTTMuc3BsaXRBcnJheShbXSwgYmFzZTIsIHJlc3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE0zLnNwbGl0UmVjb3JkKHt9LCBiYXNlMiwgcmVzdCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBlcmVmOiAodDUpID0+IE0zLm9yKHQ1LCBNMy5wcm9taXNlKCkpLFxuICAgIG9wdDogKHQ1KSA9PiBNMy5vcihNMy51bmRlZmluZWQoKSwgdDUpLFxuICAgIGludGVyZmFjZTogKGludGVyZmFjZU5hbWUsIG1ldGhvZEd1YXJkcywgb3B0aW9ucykgPT4gKFxuICAgICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lKi9cbiAgICAgIG1ha2VJbnRlcmZhY2VHdWFyZChpbnRlcmZhY2VOYW1lLCBtZXRob2RHdWFyZHMsIG9wdGlvbnMpXG4gICAgKSxcbiAgICBjYWxsOiAoLi4uYXJnUGF0dGVybnMpID0+IChcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZSovXG4gICAgICBtYWtlTWV0aG9kR3VhcmRNYWtlcihcInN5bmNcIiwgYXJnUGF0dGVybnMpXG4gICAgKSxcbiAgICBjYWxsV2hlbjogKC4uLmFyZ0d1YXJkcykgPT4gKFxuICAgICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lKi9cbiAgICAgIG1ha2VNZXRob2RHdWFyZE1ha2VyKFwiYXN5bmNcIiwgYXJnR3VhcmRzKVxuICAgICksXG4gICAgYXdhaXQ6IChhcmdQYXR0ZXJuKSA9PiAoXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmUqL1xuICAgICAgbWFrZUF3YWl0QXJnR3VhcmQoYXJnUGF0dGVybilcbiAgICApLFxuICAgIHJhdzogKCkgPT4gKFxuICAgICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lKi9cbiAgICAgIG1ha2VSYXdHdWFyZCgpXG4gICAgKVxuICB9KTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgY2hlY2tNYXRjaGVzOiBjaGVja01hdGNoZXMyLFxuICAgIG1hdGNoZXM6IG1hdGNoZXMyLFxuICAgIG11c3RNYXRjaDogbXVzdE1hdGNoNCxcbiAgICBhc3NlcnRQYXR0ZXJuOiBhc3NlcnRQYXR0ZXJuMixcbiAgICBpc1BhdHRlcm46IGlzUGF0dGVybjIsXG4gICAgZ2V0UmFua0NvdmVyOiBnZXRSYW5rQ292ZXIyLFxuICAgIE06IE0zLFxuICAgIGtpbmRPZjoga2luZE9mMixcbiAgICBjb250YWluZXJIYXNTcGxpdDogY29udGFpbmVySGFzU3BsaXQyXG4gIH0pO1xufTtcbnZhciB7XG4gIGNoZWNrTWF0Y2hlcyxcbiAgbWF0Y2hlcyxcbiAgbXVzdE1hdGNoLFxuICBhc3NlcnRQYXR0ZXJuLFxuICBpc1BhdHRlcm4sXG4gIGdldFJhbmtDb3ZlcixcbiAgTSxcbiAga2luZE9mLFxuICBjb250YWluZXJIYXNTcGxpdFxufSA9IG1ha2VQYXR0ZXJuS2l0KCk7XG5NTSA9IE07XG52YXIgQXdhaXRBcmdHdWFyZFBheWxvYWRTaGFwZSA9IGhhcmRlbih7XG4gIGFyZ0d1YXJkOiBNLnBhdHRlcm4oKVxufSk7XG52YXIgQXdhaXRBcmdHdWFyZFNoYXBlID0gTS5raW5kKFwiZ3VhcmQ6YXdhaXRBcmdHdWFyZFwiKTtcbnZhciBpc0F3YWl0QXJnR3VhcmQgPSAoc3BlY2ltZW4pID0+IG1hdGNoZXMoc3BlY2ltZW4sIEF3YWl0QXJnR3VhcmRTaGFwZSk7XG5oYXJkZW4oaXNBd2FpdEFyZ0d1YXJkKTtcbnZhciBhc3NlcnRBd2FpdEFyZ0d1YXJkID0gKHNwZWNpbWVuKSA9PiB7XG4gIG11c3RNYXRjaChzcGVjaW1lbiwgQXdhaXRBcmdHdWFyZFNoYXBlLCBcImF3YWl0QXJnR3VhcmRcIik7XG59O1xuaGFyZGVuKGFzc2VydEF3YWl0QXJnR3VhcmQpO1xudmFyIG1ha2VBd2FpdEFyZ0d1YXJkID0gKGFyZ1BhdHRlcm4pID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gbWFrZVRhZ2dlZChcImd1YXJkOmF3YWl0QXJnR3VhcmRcIiwge1xuICAgIGFyZ0d1YXJkOiBhcmdQYXR0ZXJuXG4gIH0pO1xuICBhc3NlcnRBd2FpdEFyZ0d1YXJkKHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xudmFyIFJhd0d1YXJkUGF5bG9hZFNoYXBlID0gTS5yZWNvcmQoKTtcbnZhciBSYXdHdWFyZFNoYXBlID0gTS5raW5kKFwiZ3VhcmQ6cmF3R3VhcmRcIik7XG52YXIgaXNSYXdHdWFyZCA9IChzcGVjaW1lbikgPT4gbWF0Y2hlcyhzcGVjaW1lbiwgUmF3R3VhcmRTaGFwZSk7XG52YXIgbWFrZVJhd0d1YXJkID0gKCkgPT4gbWFrZVRhZ2dlZChcImd1YXJkOnJhd0d1YXJkXCIsIHt9KTtcbnZhciBTeW5jVmFsdWVHdWFyZFNoYXBlID0gTS5vcihSYXdHdWFyZFNoYXBlLCBNLnBhdHRlcm4oKSk7XG52YXIgU3luY1ZhbHVlR3VhcmRMaXN0U2hhcGUgPSBNLmFycmF5T2YoU3luY1ZhbHVlR3VhcmRTaGFwZSk7XG52YXIgQXJnR3VhcmRTaGFwZSA9IE0ub3IoUmF3R3VhcmRTaGFwZSwgQXdhaXRBcmdHdWFyZFNoYXBlLCBNLnBhdHRlcm4oKSk7XG52YXIgQXJnR3VhcmRMaXN0U2hhcGUgPSBNLmFycmF5T2YoQXJnR3VhcmRTaGFwZSk7XG52YXIgU3luY01ldGhvZEd1YXJkUGF5bG9hZFNoYXBlID0gaGFyZGVuKHtcbiAgY2FsbEtpbmQ6IFwic3luY1wiLFxuICBhcmdHdWFyZHM6IFN5bmNWYWx1ZUd1YXJkTGlzdFNoYXBlLFxuICBvcHRpb25hbEFyZ0d1YXJkczogTS5vcHQoU3luY1ZhbHVlR3VhcmRMaXN0U2hhcGUpLFxuICByZXN0QXJnR3VhcmQ6IE0ub3B0KFN5bmNWYWx1ZUd1YXJkU2hhcGUpLFxuICByZXR1cm5HdWFyZDogU3luY1ZhbHVlR3VhcmRTaGFwZVxufSk7XG52YXIgQXN5bmNNZXRob2RHdWFyZFBheWxvYWRTaGFwZSA9IGhhcmRlbih7XG4gIGNhbGxLaW5kOiBcImFzeW5jXCIsXG4gIGFyZ0d1YXJkczogQXJnR3VhcmRMaXN0U2hhcGUsXG4gIG9wdGlvbmFsQXJnR3VhcmRzOiBNLm9wdChBcmdHdWFyZExpc3RTaGFwZSksXG4gIHJlc3RBcmdHdWFyZDogTS5vcHQoU3luY1ZhbHVlR3VhcmRTaGFwZSksXG4gIHJldHVybkd1YXJkOiBTeW5jVmFsdWVHdWFyZFNoYXBlXG59KTtcbnZhciBNZXRob2RHdWFyZFBheWxvYWRTaGFwZSA9IE0ub3IoXG4gIFN5bmNNZXRob2RHdWFyZFBheWxvYWRTaGFwZSxcbiAgQXN5bmNNZXRob2RHdWFyZFBheWxvYWRTaGFwZVxuKTtcbnZhciBNZXRob2RHdWFyZFNoYXBlID0gTS5raW5kKFwiZ3VhcmQ6bWV0aG9kR3VhcmRcIik7XG52YXIgYXNzZXJ0TWV0aG9kR3VhcmQgPSAoc3BlY2ltZW4pID0+IHtcbiAgbXVzdE1hdGNoKHNwZWNpbWVuLCBNZXRob2RHdWFyZFNoYXBlLCBcIm1ldGhvZEd1YXJkXCIpO1xufTtcbmhhcmRlbihhc3NlcnRNZXRob2RHdWFyZCk7XG52YXIgbWFrZU1ldGhvZEd1YXJkTWFrZXIgPSAoY2FsbEtpbmQsIGFyZ0d1YXJkcywgb3B0aW9uYWxBcmdHdWFyZHMgPSB2b2lkIDAsIHJlc3RBcmdHdWFyZCA9IHZvaWQgMCkgPT4gaGFyZGVuKHtcbiAgb3B0aW9uYWw6ICguLi5vcHRBcmdHdWFyZHMpID0+IHtcbiAgICBvcHRpb25hbEFyZ0d1YXJkcyA9PT0gdm9pZCAwIHx8IHRocm93UmVkYWN0ZWRgQ2FuIG9ubHkgaGF2ZSBvbmUgc2V0IG9mIG9wdGlvbmFsIGd1YXJkc2A7XG4gICAgcmVzdEFyZ0d1YXJkID09PSB2b2lkIDAgfHwgdGhyb3dSZWRhY3RlZGBvcHRpb25hbCBhcmcgZ3VhcmRzIG11c3QgY29tZSBiZWZvcmUgcmVzdCBhcmdgO1xuICAgIHJldHVybiBtYWtlTWV0aG9kR3VhcmRNYWtlcihjYWxsS2luZCwgYXJnR3VhcmRzLCBvcHRBcmdHdWFyZHMpO1xuICB9LFxuICByZXN0OiAockFyZ0d1YXJkKSA9PiB7XG4gICAgcmVzdEFyZ0d1YXJkID09PSB2b2lkIDAgfHwgdGhyb3dSZWRhY3RlZGBDYW4gb25seSBoYXZlIG9uZSByZXN0IGFyZ2A7XG4gICAgcmV0dXJuIG1ha2VNZXRob2RHdWFyZE1ha2VyKFxuICAgICAgY2FsbEtpbmQsXG4gICAgICBhcmdHdWFyZHMsXG4gICAgICBvcHRpb25hbEFyZ0d1YXJkcyxcbiAgICAgIHJBcmdHdWFyZFxuICAgICk7XG4gIH0sXG4gIHJldHVybnM6IChyZXR1cm5HdWFyZCA9IE0udW5kZWZpbmVkKCkpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBtYWtlVGFnZ2VkKFwiZ3VhcmQ6bWV0aG9kR3VhcmRcIiwge1xuICAgICAgY2FsbEtpbmQsXG4gICAgICBhcmdHdWFyZHMsXG4gICAgICBvcHRpb25hbEFyZ0d1YXJkcyxcbiAgICAgIHJlc3RBcmdHdWFyZCxcbiAgICAgIHJldHVybkd1YXJkXG4gICAgfSk7XG4gICAgYXNzZXJ0TWV0aG9kR3VhcmQocmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbnZhciBJbnRlcmZhY2VHdWFyZFBheWxvYWRTaGFwZSA9IE0uc3BsaXRSZWNvcmQoXG4gIHtcbiAgICBpbnRlcmZhY2VOYW1lOiBNLnN0cmluZygpLFxuICAgIG1ldGhvZEd1YXJkczogTS5yZWNvcmRPZihNLnN0cmluZygpLCBNZXRob2RHdWFyZFNoYXBlKVxuICB9LFxuICB7XG4gICAgZGVmYXVsdEd1YXJkczogTS5vcihNLnVuZGVmaW5lZCgpLCBcInBhc3NhYmxlXCIsIFwicmF3XCIpLFxuICAgIHNsb3BweTogTS5ib29sZWFuKCksXG4gICAgc3ltYm9sTWV0aG9kR3VhcmRzOiBNLm1hcE9mKE0uc3ltYm9sKCksIE1ldGhvZEd1YXJkU2hhcGUpXG4gIH1cbik7XG52YXIgSW50ZXJmYWNlR3VhcmRTaGFwZSA9IE0ua2luZChcImd1YXJkOmludGVyZmFjZUd1YXJkXCIpO1xudmFyIGFzc2VydEludGVyZmFjZUd1YXJkID0gKHNwZWNpbWVuKSA9PiB7XG4gIG11c3RNYXRjaChzcGVjaW1lbiwgSW50ZXJmYWNlR3VhcmRTaGFwZSwgXCJpbnRlcmZhY2VHdWFyZFwiKTtcbn07XG5oYXJkZW4oYXNzZXJ0SW50ZXJmYWNlR3VhcmQpO1xudmFyIG1ha2VJbnRlcmZhY2VHdWFyZCA9IChpbnRlcmZhY2VOYW1lLCBtZXRob2RHdWFyZHMsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCB7IHNsb3BweSA9IGZhbHNlLCBkZWZhdWx0R3VhcmRzID0gc2xvcHB5ID8gXCJwYXNzYWJsZVwiIDogdm9pZCAwIH0gPSBvcHRpb25zO1xuICBjb25zdCBzdHJpbmdNZXRob2RHdWFyZHMgPSB7fTtcbiAgY29uc3Qgc3ltYm9sTWV0aG9kR3VhcmRzRW50cmllcyA9IFtdO1xuICBmb3IgKGNvbnN0IGtleSBvZiBvd25LZXlzMTgobWV0aG9kR3VhcmRzKSkge1xuICAgIGNvbnN0IHZhbHVlID0gbWV0aG9kR3VhcmRzW1xuICAgICAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gICAgICBrZXlcbiAgICBdO1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSBcInN5bWJvbFwiKSB7XG4gICAgICBzeW1ib2xNZXRob2RHdWFyZHNFbnRyaWVzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyaW5nTWV0aG9kR3VhcmRzW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0gbWFrZVRhZ2dlZChcImd1YXJkOmludGVyZmFjZUd1YXJkXCIsIHtcbiAgICBpbnRlcmZhY2VOYW1lLFxuICAgIG1ldGhvZEd1YXJkczogc3RyaW5nTWV0aG9kR3VhcmRzLFxuICAgIC4uLihzeW1ib2xNZXRob2RHdWFyZHNFbnRyaWVzLmxlbmd0aD8geyBzeW1ib2xNZXRob2RHdWFyZHM6IG1ha2VDb3B5TWFwKHN5bWJvbE1ldGhvZEd1YXJkc0VudHJpZXMpIH0gOiB7fSksXG4gICAgZGVmYXVsdEd1YXJkc1xuICB9KTtcbiAgYXNzZXJ0SW50ZXJmYWNlR3VhcmQocmVzdWx0KTtcbiAgcmV0dXJuIChcbiAgICAvKiogQHR5cGUge0ludGVyZmFjZUd1YXJkPE0+fSAqL1xuICAgIHJlc3VsdFxuICApO1xufTtcbnZhciBHdWFyZFBheWxvYWRTaGFwZXMgPSBoYXJkZW4oe1xuICBcImd1YXJkOmF3YWl0QXJnR3VhcmRcIjogQXdhaXRBcmdHdWFyZFBheWxvYWRTaGFwZSxcbiAgXCJndWFyZDpyYXdHdWFyZFwiOiBSYXdHdWFyZFBheWxvYWRTaGFwZSxcbiAgXCJndWFyZDptZXRob2RHdWFyZFwiOiBNZXRob2RHdWFyZFBheWxvYWRTaGFwZSxcbiAgXCJndWFyZDppbnRlcmZhY2VHdWFyZFwiOiBJbnRlcmZhY2VHdWFyZFBheWxvYWRTaGFwZVxufSk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9wYXR0ZXJucy9zcmMvcGF0dGVybnMvZ2V0R3VhcmRQYXlsb2Fkcy5qcyovXG52YXIgTGVnYWN5QXdhaXRBcmdHdWFyZFNoYXBlID0gaGFyZGVuKHtcbiAga2xhc3M6IFwiYXdhaXRBcmdcIixcbiAgYXJnR3VhcmQ6IE0ucGF0dGVybigpXG59KTtcbnZhciBnZXRBd2FpdEFyZ0d1YXJkUGF5bG9hZCA9IChhd2FpdEFyZ0d1YXJkKSA9PiB7XG4gIGlmIChtYXRjaGVzKGF3YWl0QXJnR3VhcmQsIExlZ2FjeUF3YWl0QXJnR3VhcmRTaGFwZSkpIHtcbiAgICBjb25zdCB7IGtsYXNzOiBfLCAuLi5wYXlsb2FkIH0gPSBhd2FpdEFyZ0d1YXJkO1xuICAgIHJldHVybiBwYXlsb2FkO1xuICB9XG4gIGFzc2VydEF3YWl0QXJnR3VhcmQoYXdhaXRBcmdHdWFyZCk7XG4gIHJldHVybiBhd2FpdEFyZ0d1YXJkLnBheWxvYWQ7XG59O1xuaGFyZGVuKGdldEF3YWl0QXJnR3VhcmRQYXlsb2FkKTtcbnZhciBMZWdhY3lTeW5jTWV0aG9kR3VhcmRTaGFwZSA9IE0uc3BsaXRSZWNvcmQoXG4gIHtcbiAgICBrbGFzczogXCJtZXRob2RHdWFyZFwiLFxuICAgIGNhbGxLaW5kOiBcInN5bmNcIixcbiAgICBhcmdHdWFyZHM6IFN5bmNWYWx1ZUd1YXJkTGlzdFNoYXBlLFxuICAgIHJldHVybkd1YXJkOiBTeW5jVmFsdWVHdWFyZFNoYXBlXG4gIH0sXG4gIHtcbiAgICBvcHRpb25hbEFyZ0d1YXJkczogU3luY1ZhbHVlR3VhcmRMaXN0U2hhcGUsXG4gICAgcmVzdEFyZ0d1YXJkOiBTeW5jVmFsdWVHdWFyZFNoYXBlXG4gIH1cbik7XG52YXIgTGVnYWN5QXJnR3VhcmRTaGFwZSA9IE0ub3IoXG4gIFJhd0d1YXJkU2hhcGUsXG4gIEF3YWl0QXJnR3VhcmRTaGFwZSxcbiAgTGVnYWN5QXdhaXRBcmdHdWFyZFNoYXBlLFxuICBNLnBhdHRlcm4oKVxuKTtcbnZhciBMZWdhY3lBcmdHdWFyZExpc3RTaGFwZSA9IE0uYXJyYXlPZihMZWdhY3lBcmdHdWFyZFNoYXBlKTtcbnZhciBMZWdhY3lBc3luY01ldGhvZEd1YXJkU2hhcGUgPSBNLnNwbGl0UmVjb3JkKFxuICB7XG4gICAga2xhc3M6IFwibWV0aG9kR3VhcmRcIixcbiAgICBjYWxsS2luZDogXCJhc3luY1wiLFxuICAgIGFyZ0d1YXJkczogTGVnYWN5QXJnR3VhcmRMaXN0U2hhcGUsXG4gICAgcmV0dXJuR3VhcmQ6IFN5bmNWYWx1ZUd1YXJkU2hhcGVcbiAgfSxcbiAge1xuICAgIG9wdGlvbmFsQXJnR3VhcmRzOiBBcmdHdWFyZExpc3RTaGFwZSxcbiAgICByZXN0QXJnR3VhcmQ6IFN5bmNWYWx1ZUd1YXJkU2hhcGVcbiAgfVxuKTtcbnZhciBMZWdhY3lNZXRob2RHdWFyZFNoYXBlID0gTS5vcihcbiAgTGVnYWN5U3luY01ldGhvZEd1YXJkU2hhcGUsXG4gIExlZ2FjeUFzeW5jTWV0aG9kR3VhcmRTaGFwZVxuKTtcbnZhciBhZGFwdExlZ2FjeUFyZ0d1YXJkID0gKGFyZ0d1YXJkKSA9PiBtYXRjaGVzKGFyZ0d1YXJkLCBMZWdhY3lBd2FpdEFyZ0d1YXJkU2hhcGUpID8gTS5hd2FpdChnZXRBd2FpdEFyZ0d1YXJkUGF5bG9hZChhcmdHdWFyZCkuYXJnR3VhcmQpIDogYXJnR3VhcmQ7XG52YXIgZ2V0TWV0aG9kR3VhcmRQYXlsb2FkID0gKG1ldGhvZEd1YXJkKSA9PiB7XG4gIGlmIChtYXRjaGVzKG1ldGhvZEd1YXJkLCBNZXRob2RHdWFyZFNoYXBlKSkge1xuICAgIHJldHVybiBtZXRob2RHdWFyZC5wYXlsb2FkO1xuICB9XG4gIG11c3RNYXRjaChtZXRob2RHdWFyZCwgTGVnYWN5TWV0aG9kR3VhcmRTaGFwZSwgXCJsZWdhY3lNZXRob2RHdWFyZFwiKTtcbiAgY29uc3Qge1xuICAgIC8qIEB0cy1leHBlY3QtZXJyb3IgTGVnYWN5IGFkYXB0b3IgY2FuIGJlIGlsbCB0eXBlZCovXG4gICAga2xhc3M6IF8sXG4gICAgLyogQHRzLWV4cGVjdC1lcnJvciBMZWdhY3kgYWRhcHRvciBjYW4gYmUgaWxsIHR5cGVkKi9cbiAgICBjYWxsS2luZCxcbiAgICAvKiBAdHMtZXhwZWN0LWVycm9yIExlZ2FjeSBhZGFwdG9yIGNhbiBiZSBpbGwgdHlwZWQqL1xuICAgIHJldHVybkd1YXJkLFxuICAgIC8qIEB0cy1leHBlY3QtZXJyb3IgTGVnYWN5IGFkYXB0b3IgY2FuIGJlIGlsbCB0eXBlZCovXG4gICAgcmVzdEFyZ0d1YXJkXG4gIH0gPSBtZXRob2RHdWFyZDtcbiAgbGV0IHtcbiAgICAvKiBAdHMtZXhwZWN0LWVycm9yIExlZ2FjeSBhZGFwdG9yIGNhbiBiZSBpbGwgdHlwZWQqL1xuICAgIGFyZ0d1YXJkcyxcbiAgICAvKiBAdHMtZXhwZWN0LWVycm9yIExlZ2FjeSBhZGFwdG9yIGNhbiBiZSBpbGwgdHlwZWQqL1xuICAgIG9wdGlvbmFsQXJnR3VhcmRzXG4gIH0gPSBtZXRob2RHdWFyZDtcbiAgaWYgKGNhbGxLaW5kID09PSBcImFzeW5jXCIpIHtcbiAgICBhcmdHdWFyZHMgPSBhcmdHdWFyZHMubWFwKGFkYXB0TGVnYWN5QXJnR3VhcmQpO1xuICAgIG9wdGlvbmFsQXJnR3VhcmRzID0gb3B0aW9uYWxBcmdHdWFyZHMgJiYgb3B0aW9uYWxBcmdHdWFyZHMubWFwKGFkYXB0TGVnYWN5QXJnR3VhcmQpO1xuICB9XG4gIGNvbnN0IHBheWxvYWQgPSBoYXJkZW4oe1xuICAgIGNhbGxLaW5kLFxuICAgIGFyZ0d1YXJkcyxcbiAgICBvcHRpb25hbEFyZ0d1YXJkcyxcbiAgICByZXN0QXJnR3VhcmQsXG4gICAgcmV0dXJuR3VhcmRcbiAgfSk7XG4gIG11c3RNYXRjaChwYXlsb2FkLCBNZXRob2RHdWFyZFBheWxvYWRTaGFwZSwgXCJpbnRlcm5hbE1ldGhvZEd1YXJkQWRhcHRvclwiKTtcbiAgcmV0dXJuIHBheWxvYWQ7XG59O1xuaGFyZGVuKGdldE1ldGhvZEd1YXJkUGF5bG9hZCk7XG52YXIgTGVnYWN5SW50ZXJmYWNlR3VhcmRTaGFwZSA9IE0uc3BsaXRSZWNvcmQoXG4gIHtcbiAgICBrbGFzczogXCJJbnRlcmZhY2VcIixcbiAgICBpbnRlcmZhY2VOYW1lOiBNLnN0cmluZygpLFxuICAgIG1ldGhvZEd1YXJkczogTS5yZWNvcmRPZihcbiAgICAgIE0uc3RyaW5nKCksXG4gICAgICBNLm9yKE1ldGhvZEd1YXJkU2hhcGUsIExlZ2FjeU1ldGhvZEd1YXJkU2hhcGUpXG4gICAgKVxuICB9LFxuICB7XG4gICAgZGVmYXVsdEd1YXJkczogTS5vcihNLnVuZGVmaW5lZCgpLCBcInBhc3NhYmxlXCIsIFwicmF3XCIpLFxuICAgIHNsb3BweTogTS5ib29sZWFuKCksXG4gICAgLyogVGhlcmUgaXMgbm8gbmVlZCB0byBhY2NvbW1vZGF0ZSBMZWdhY3lNZXRob2RHdWFyZFNoYXBlIGluKi9cbiAgICAvKiB0aGlzIHBvc2l0aW9uLCBzaW5jZSBgc3ltYm9sTWV0aG9kR3VhcmRzIGhhcHBlbmVkKi9cbiAgICAvKiBhZnRlciBodHRwczovL2dpdGh1Yi5jb20vZW5kb2pzL2VuZG8vcHVsbC8xNzEyKi9cbiAgICBzeW1ib2xNZXRob2RHdWFyZHM6IE0ubWFwT2YoTS5zeW1ib2woKSwgTWV0aG9kR3VhcmRTaGFwZSlcbiAgfVxuKTtcbnZhciBhZGFwdE1ldGhvZEd1YXJkID0gKG1ldGhvZEd1YXJkKSA9PiB7XG4gIGlmIChtYXRjaGVzKG1ldGhvZEd1YXJkLCBMZWdhY3lNZXRob2RHdWFyZFNoYXBlKSkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNhbGxLaW5kLFxuICAgICAgYXJnR3VhcmRzLFxuICAgICAgb3B0aW9uYWxBcmdHdWFyZHMgPSBbXSxcbiAgICAgIHJlc3RBcmdHdWFyZCA9IE0uYW55KCksXG4gICAgICByZXR1cm5HdWFyZFxuICAgIH0gPSBnZXRNZXRob2RHdWFyZFBheWxvYWQobWV0aG9kR3VhcmQpO1xuICAgIGNvbnN0IG1DYWxsID0gY2FsbEtpbmQgPT09IFwic3luY1wiID8gTS5jYWxsIDogTS5jYWxsV2hlbjtcbiAgICByZXR1cm4gbUNhbGwoLi4uYXJnR3VhcmRzKS5vcHRpb25hbCguLi5vcHRpb25hbEFyZ0d1YXJkcykucmVzdChyZXN0QXJnR3VhcmQpLnJldHVybnMocmV0dXJuR3VhcmQpO1xuICB9XG4gIHJldHVybiBtZXRob2RHdWFyZDtcbn07XG52YXIgZ2V0SW50ZXJmYWNlR3VhcmRQYXlsb2FkID0gKGludGVyZmFjZUd1YXJkKSA9PiB7XG4gIGlmIChtYXRjaGVzKGludGVyZmFjZUd1YXJkLCBJbnRlcmZhY2VHdWFyZFNoYXBlKSkge1xuICAgIHJldHVybiBpbnRlcmZhY2VHdWFyZC5wYXlsb2FkO1xuICB9XG4gIG11c3RNYXRjaChpbnRlcmZhY2VHdWFyZCwgTGVnYWN5SW50ZXJmYWNlR3VhcmRTaGFwZSwgXCJsZWdhY3lJbnRlcmZhY2VHdWFyZFwiKTtcbiAgbGV0IHsga2xhc3M6IF8sIGludGVyZmFjZU5hbWUsIG1ldGhvZEd1YXJkcywgLi4ucmVzdCB9ID0gaW50ZXJmYWNlR3VhcmQ7XG4gIG1ldGhvZEd1YXJkcyA9IG9iamVjdE1hcChtZXRob2RHdWFyZHMsIGFkYXB0TWV0aG9kR3VhcmQpO1xuICBjb25zdCBwYXlsb2FkID0gaGFyZGVuKHtcbiAgICBpbnRlcmZhY2VOYW1lLFxuICAgIG1ldGhvZEd1YXJkcyxcbiAgICAuLi5yZXN0XG4gIH0pO1xuICBtdXN0TWF0Y2goXG4gICAgcGF5bG9hZCxcbiAgICBJbnRlcmZhY2VHdWFyZFBheWxvYWRTaGFwZSxcbiAgICBcImludGVybmFsSW50ZXJmYWNlR3VhcmRBZGFwdG9yXCJcbiAgKTtcbiAgcmV0dXJuIHBheWxvYWQ7XG59O1xuaGFyZGVuKGdldEludGVyZmFjZUd1YXJkUGF5bG9hZCk7XG52YXIgZW1wdHlDb3B5TWFwID0gbWFrZUNvcHlNYXAoW10pO1xudmFyIGdldEludGVyZmFjZU1ldGhvZEtleXMgPSAoaW50ZXJmYWNlR3VhcmQpID0+IHtcbiAgY29uc3QgeyBtZXRob2RHdWFyZHMsIHN5bWJvbE1ldGhvZEd1YXJkcyA9IGVtcHR5Q29weU1hcCB9ID0gZ2V0SW50ZXJmYWNlR3VhcmRQYXlsb2FkKGludGVyZmFjZUd1YXJkKTtcbiAgcmV0dXJuIGhhcmRlbihbXG4gICAgLi4uUmVmbGVjdC5vd25LZXlzKG1ldGhvZEd1YXJkcyksXG4gICAgLi4uZ2V0Q29weU1hcEtleXMoc3ltYm9sTWV0aG9kR3VhcmRzKVxuICBdKTtcbn07XG5oYXJkZW4oZ2V0SW50ZXJmYWNlTWV0aG9kS2V5cyk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9leG8vc3JjL2dldC1pbnRlcmZhY2UuanMqL1xudmFyIEdFVF9JTlRFUkZBQ0VfR1VBUkQgPSBcIl9fZ2V0SW50ZXJmYWNlR3VhcmRfX1wiO1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvQGVuZG8vZXhvL3NyYy9leG8tdG9vbHMuanMqL1xudmFyIHsgYXBwbHk6IGFwcGx5NSwgb3duS2V5czogb3duS2V5czE5IH0gPSBSZWZsZWN0O1xudmFyIHsgZGVmaW5lUHJvcGVydGllczogZGVmaW5lUHJvcGVydGllczMsIGZyb21FbnRyaWVzOiBmcm9tRW50cmllczgsIGhhc093bjogaGFzT3duMTAgfSA9IE9iamVjdDtcbnZhciBSYXdNZXRob2RHdWFyZCA9IE0uY2FsbCgpLnJlc3QoTS5yYXcoKSkucmV0dXJucyhNLnJhdygpKTtcbnZhciBSRURBQ1RFRF9SQVdfQVJHID0gXCI8cmVkYWN0ZWQgcmF3IGFyZz5cIjtcbnZhciBQYXNzYWJsZU1ldGhvZEd1YXJkID0gTS5jYWxsKCkucmVzdChNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpO1xudmFyIGRlZmVuZFN5bmNBcmdzID0gKHN5bmNBcmdzLCBtYXRjaENvbmZpZywgbGFiZWwgPSB2b2lkIDApID0+IHtcbiAgY29uc3Qge1xuICAgIGRlY2xhcmVkTGVuLFxuICAgIGhhc1Jlc3RBcmdHdWFyZCxcbiAgICByZXN0QXJnR3VhcmRJc1JhdyxcbiAgICBwYXJhbXNQYXR0ZXJuLFxuICAgIHJlZGFjdGVkSW5kaWNlc1xuICB9ID0gbWF0Y2hDb25maWc7XG4gIGxldCBtYXRjaGFibGVBcmdzID0gc3luY0FyZ3M7XG4gIGlmIChyZXN0QXJnR3VhcmRJc1JhdyAmJiBzeW5jQXJncy5sZW5ndGggPiBkZWNsYXJlZExlbikge1xuICAgIGNvbnN0IHJlc3RMZW4gPSBzeW5jQXJncy5sZW5ndGggLSBkZWNsYXJlZExlbjtcbiAgICBjb25zdCByZWRhY3RlZFJlc3QgPSBBcnJheShyZXN0TGVuKS5maWxsKFJFREFDVEVEX1JBV19BUkcpO1xuICAgIG1hdGNoYWJsZUFyZ3MgPSBbLi4uc3luY0FyZ3Muc2xpY2UoMCwgZGVjbGFyZWRMZW4pLCAuLi5yZWRhY3RlZFJlc3RdO1xuICB9IGVsc2UgaWYgKHJlZGFjdGVkSW5kaWNlcy5sZW5ndGggPiAwICYmIHJlZGFjdGVkSW5kaWNlc1swXSA8IHN5bmNBcmdzLmxlbmd0aCkge1xuICAgIG1hdGNoYWJsZUFyZ3MgPSBbLi4uc3luY0FyZ3NdO1xuICB9XG4gIGZvciAoY29uc3QgaTMgb2YgcmVkYWN0ZWRJbmRpY2VzKSB7XG4gICAgaWYgKGkzID49IG1hdGNoYWJsZUFyZ3MubGVuZ3RoKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgbWF0Y2hhYmxlQXJnc1tpM10gPSBSRURBQ1RFRF9SQVdfQVJHO1xuICB9XG4gIG11c3RNYXRjaChoYXJkZW4obWF0Y2hhYmxlQXJncyksIHBhcmFtc1BhdHRlcm4sIGxhYmVsKTtcbiAgaWYgKGhhc1Jlc3RBcmdHdWFyZCkge1xuICAgIHJldHVybiBzeW5jQXJncztcbiAgfVxuICBzeW5jQXJncy5sZW5ndGggPD0gZGVjbGFyZWRMZW4gfHwgdGhyb3dSZWRhY3RlZGAke3F1b3RlKGxhYmVsKX0gYWNjZXB0cyBhdCBtb3N0ICR7cXVvdGUoZGVjbGFyZWRMZW4pfSBhcmd1bWVudHMsIG5vdCAke3F1b3RlKFxuICAgIHN5bmNBcmdzLmxlbmd0aFxuICApfTogJHtzeW5jQXJnc31gO1xuICByZXR1cm4gc3luY0FyZ3M7XG59O1xudmFyIGJ1aWxkTWF0Y2hDb25maWcgPSAobWV0aG9kR3VhcmRQYXlsb2FkKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBhcmdHdWFyZHMsXG4gICAgb3B0aW9uYWxBcmdHdWFyZHMgPSBbXSxcbiAgICByZXN0QXJnR3VhcmRcbiAgfSA9IG1ldGhvZEd1YXJkUGF5bG9hZDtcbiAgY29uc3QgbWF0Y2hhYmxlQXJnR3VhcmRzID0gWy4uLmFyZ0d1YXJkcywgLi4ub3B0aW9uYWxBcmdHdWFyZHNdO1xuICBjb25zdCByZWRhY3RlZEluZGljZXMgPSBbXTtcbiAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IG1hdGNoYWJsZUFyZ0d1YXJkcy5sZW5ndGg7IGkzICs9IDEpIHtcbiAgICBpZiAoaXNSYXdHdWFyZChtYXRjaGFibGVBcmdHdWFyZHNbaTNdKSkge1xuICAgICAgbWF0Y2hhYmxlQXJnR3VhcmRzW2kzXSA9IFJFREFDVEVEX1JBV19BUkc7XG4gICAgICByZWRhY3RlZEluZGljZXMucHVzaChpMyk7XG4gICAgfVxuICB9XG4gIGxldCBtYXRjaGFibGVSZXN0QXJnR3VhcmQgPSByZXN0QXJnR3VhcmQ7XG4gIGlmIChpc1Jhd0d1YXJkKG1hdGNoYWJsZVJlc3RBcmdHdWFyZCkpIHtcbiAgICBtYXRjaGFibGVSZXN0QXJnR3VhcmQgPSBNLmFycmF5T2YoUkVEQUNURURfUkFXX0FSRyk7XG4gIH1cbiAgY29uc3QgbWF0Y2hhYmxlTWV0aG9kR3VhcmRQYXlsb2FkID0gaGFyZGVuKHtcbiAgICAuLi5tZXRob2RHdWFyZFBheWxvYWQsXG4gICAgYXJnR3VhcmRzOiBtYXRjaGFibGVBcmdHdWFyZHMuc2xpY2UoMCwgYXJnR3VhcmRzLmxlbmd0aCksXG4gICAgb3B0aW9uYWxBcmdHdWFyZHM6IG1hdGNoYWJsZUFyZ0d1YXJkcy5zbGljZShhcmdHdWFyZHMubGVuZ3RoKSxcbiAgICByZXN0QXJnR3VhcmQ6IG1hdGNoYWJsZVJlc3RBcmdHdWFyZFxuICB9KTtcbiAgY29uc3QgcGFyYW1zUGF0dGVybiA9IE0uc3BsaXRBcnJheShcbiAgICBtYXRjaGFibGVNZXRob2RHdWFyZFBheWxvYWQuYXJnR3VhcmRzLFxuICAgIG1hdGNoYWJsZU1ldGhvZEd1YXJkUGF5bG9hZC5vcHRpb25hbEFyZ0d1YXJkcyxcbiAgICBtYXRjaGFibGVNZXRob2RHdWFyZFBheWxvYWQucmVzdEFyZ0d1YXJkXG4gICk7XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIGRlY2xhcmVkTGVuOiBtYXRjaGFibGVBcmdHdWFyZHMubGVuZ3RoLFxuICAgIGhhc1Jlc3RBcmdHdWFyZDogcmVzdEFyZ0d1YXJkICE9PSB2b2lkIDAsXG4gICAgcmVzdEFyZ0d1YXJkSXNSYXc6IHJlc3RBcmdHdWFyZCAhPT0gbWF0Y2hhYmxlUmVzdEFyZ0d1YXJkLFxuICAgIHBhcmFtc1BhdHRlcm4sXG4gICAgcmVkYWN0ZWRJbmRpY2VzLFxuICAgIG1hdGNoYWJsZU1ldGhvZEd1YXJkUGF5bG9hZFxuICB9KTtcbn07XG52YXIgZGVmZW5kU3luY01ldGhvZCA9IChnZXRDb250ZXh0LCBiZWhhdmlvck1ldGhvZCwgbWV0aG9kR3VhcmRQYXlsb2FkLCBsYWJlbCkgPT4ge1xuICBjb25zdCB7IHJldHVybkd1YXJkIH0gPSBtZXRob2RHdWFyZFBheWxvYWQ7XG4gIGNvbnN0IGlzUmF3UmV0dXJuID0gaXNSYXdHdWFyZChyZXR1cm5HdWFyZCk7XG4gIGNvbnN0IG1hdGNoQ29uZmlnID0gYnVpbGRNYXRjaENvbmZpZyhtZXRob2RHdWFyZFBheWxvYWQpO1xuICBjb25zdCB7IHN5bmNNZXRob2QgfSA9IHtcbiAgICAvKiBOb3RlIHB1cnBvc2VmdWwgdXNlIG9mIGB0aGlzYCBhbmQgY29uY2lzZSBtZXRob2Qgc3ludGF4Ki9cbiAgICBzeW5jTWV0aG9kKC4uLnN5bmNBcmdzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gZ2V0Q29udGV4dCh0aGlzKTtcbiAgICAgICAgY29uc3QgcmVhbEFyZ3MgPSBkZWZlbmRTeW5jQXJncyhzeW5jQXJncywgbWF0Y2hDb25maWcsIGxhYmVsKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXBwbHk1KGJlaGF2aW9yTWV0aG9kLCBjb250ZXh0LCByZWFsQXJncyk7XG4gICAgICAgIGlmICghaXNSYXdSZXR1cm4pIHtcbiAgICAgICAgICBtdXN0TWF0Y2goaGFyZGVuKHJlc3VsdCksIHJldHVybkd1YXJkLCBgJHtsYWJlbH06IHJlc3VsdGApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9IGNhdGNoICh0aHJvd25UaGluZykge1xuICAgICAgICB0aHJvdyB0b1Rocm93YWJsZSh0aHJvd25UaGluZyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gc3luY01ldGhvZDtcbn07XG52YXIgZGVzeW5jID0gKG1ldGhvZEd1YXJkUGF5bG9hZCkgPT4ge1xuICBjb25zdCB7XG4gICAgYXJnR3VhcmRzLFxuICAgIG9wdGlvbmFsQXJnR3VhcmRzID0gW10sXG4gICAgcmVzdEFyZ0d1YXJkXG4gIH0gPSBtZXRob2RHdWFyZFBheWxvYWQ7XG4gICFpc0F3YWl0QXJnR3VhcmQocmVzdEFyZ0d1YXJkKSB8fCB0aHJvd1JlZGFjdGVkYFJlc3QgYXJncyBtYXkgbm90IGJlIGF3YWl0ZWQ6ICR7cmVzdEFyZ0d1YXJkfWA7XG4gIGNvbnN0IHJhd0FyZ0d1YXJkcyA9IFsuLi5hcmdHdWFyZHMsIC4uLm9wdGlvbmFsQXJnR3VhcmRzXTtcbiAgY29uc3QgYXdhaXRJbmRleGVzID0gW107XG4gIGZvciAobGV0IGkzID0gMDsgaTMgPCByYXdBcmdHdWFyZHMubGVuZ3RoOyBpMyArPSAxKSB7XG4gICAgY29uc3QgYXJnR3VhcmQgPSByYXdBcmdHdWFyZHNbaTNdO1xuICAgIGlmIChpc0F3YWl0QXJnR3VhcmQoYXJnR3VhcmQpKSB7XG4gICAgICByYXdBcmdHdWFyZHNbaTNdID0gZ2V0QXdhaXRBcmdHdWFyZFBheWxvYWQoYXJnR3VhcmQpLmFyZ0d1YXJkO1xuICAgICAgYXdhaXRJbmRleGVzLnB1c2goaTMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIGF3YWl0SW5kZXhlcyxcbiAgICByYXdNZXRob2RHdWFyZFBheWxvYWQ6IHtcbiAgICAgIC4uLm1ldGhvZEd1YXJkUGF5bG9hZCxcbiAgICAgIGFyZ0d1YXJkczogcmF3QXJnR3VhcmRzLnNsaWNlKDAsIGFyZ0d1YXJkcy5sZW5ndGgpLFxuICAgICAgb3B0aW9uYWxBcmdHdWFyZHM6IHJhd0FyZ0d1YXJkcy5zbGljZShhcmdHdWFyZHMubGVuZ3RoKVxuICAgIH1cbiAgfTtcbn07XG52YXIgZGVmZW5kQXN5bmNNZXRob2QgPSAoZ2V0Q29udGV4dCwgYmVoYXZpb3JNZXRob2QsIG1ldGhvZEd1YXJkUGF5bG9hZCwgbGFiZWwpID0+IHtcbiAgY29uc3QgeyByZXR1cm5HdWFyZCB9ID0gbWV0aG9kR3VhcmRQYXlsb2FkO1xuICBjb25zdCBpc1Jhd1JldHVybiA9IGlzUmF3R3VhcmQocmV0dXJuR3VhcmQpO1xuICBjb25zdCB7IGF3YWl0SW5kZXhlcywgcmF3TWV0aG9kR3VhcmRQYXlsb2FkIH0gPSBkZXN5bmMobWV0aG9kR3VhcmRQYXlsb2FkKTtcbiAgY29uc3QgbWF0Y2hDb25maWcgPSBidWlsZE1hdGNoQ29uZmlnKHJhd01ldGhvZEd1YXJkUGF5bG9hZCk7XG4gIGNvbnN0IHsgYXN5bmNNZXRob2QgfSA9IHtcbiAgICAvKiBOb3RlIHB1cnBvc2VmdWwgdXNlIG9mIGB0aGlzYCBhbmQgY29uY2lzZSBtZXRob2Qgc3ludGF4Ki9cbiAgICBhc3luY01ldGhvZCguLi5hcmdzKSB7XG4gICAgICBjb25zdCBhd2FpdExpc3QgPSBbXTtcbiAgICAgIGZvciAoY29uc3QgaTMgb2YgYXdhaXRJbmRleGVzKSB7XG4gICAgICAgIGlmIChpMyA+PSBhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0TGlzdC5wdXNoKGFyZ3NbaTNdKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHAzID0gUHJvbWlzZS5hbGwoYXdhaXRMaXN0KTtcbiAgICAgIGNvbnN0IHN5bmNBcmdzID0gWy4uLmFyZ3NdO1xuICAgICAgY29uc3QgcmVzdWx0UCA9IEUud2hlbihcbiAgICAgICAgcDMsXG4gICAgICAgIC8qKiBAcGFyYW0ge2FueVtdfSBhd2FpdGVkQXJncyAqL1xuICAgICAgICAoYXdhaXRlZEFyZ3MpID0+IHtcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGF3YWl0ZWRBcmdzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICBzeW5jQXJnc1thd2FpdEluZGV4ZXNbal1dID0gYXdhaXRlZEFyZ3Nbal07XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSBnZXRDb250ZXh0KHRoaXMpO1xuICAgICAgICAgIGNvbnN0IHJlYWxBcmdzID0gZGVmZW5kU3luY0FyZ3Moc3luY0FyZ3MsIG1hdGNoQ29uZmlnLCBsYWJlbCk7XG4gICAgICAgICAgcmV0dXJuIGFwcGx5NShiZWhhdmlvck1ldGhvZCwgY29udGV4dCwgcmVhbEFyZ3MpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgcmV0dXJuIEUud2hlbihyZXN1bHRQLCAoZnVsZmlsbG1lbnQpID0+IHtcbiAgICAgICAgaWYgKCFpc1Jhd1JldHVybikge1xuICAgICAgICAgIG11c3RNYXRjaChoYXJkZW4oZnVsZmlsbG1lbnQpLCByZXR1cm5HdWFyZCwgYCR7bGFiZWx9OiByZXN1bHRgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVsZmlsbG1lbnQ7XG4gICAgICB9KS5jYXRjaChcbiAgICAgICAgKHJlYXNvbikgPT4gKFxuICAgICAgICAgIC8qIERvbmUgaXMgYSBjaGFpbmVkIGAuY2F0Y2hgIHJhdGhlciB0aGFuIGFuIG9uUmVqZWN0ZWQgY2xhdXNlIG9mIHRoZSovXG4gICAgICAgICAgLyogYEUud2hlbmAgYWJvdmUgaW4gY2FzZSB0aGUgYG11c3RNYXRjaGAgdGhyb3dzLiovXG4gICAgICAgICAgUHJvbWlzZS5yZWplY3QodG9UaHJvd2FibGUocmVhc29uKSlcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBhc3luY01ldGhvZDtcbn07XG52YXIgZGVmZW5kTWV0aG9kID0gKGdldENvbnRleHQsIGJlaGF2aW9yTWV0aG9kLCBtZXRob2RHdWFyZCwgbGFiZWwpID0+IHtcbiAgY29uc3QgbWV0aG9kR3VhcmRQYXlsb2FkID0gZ2V0TWV0aG9kR3VhcmRQYXlsb2FkKG1ldGhvZEd1YXJkKTtcbiAgY29uc3QgeyBjYWxsS2luZCB9ID0gbWV0aG9kR3VhcmRQYXlsb2FkO1xuICBpZiAoY2FsbEtpbmQgPT09IFwic3luY1wiKSB7XG4gICAgcmV0dXJuIGRlZmVuZFN5bmNNZXRob2QoXG4gICAgICBnZXRDb250ZXh0LFxuICAgICAgYmVoYXZpb3JNZXRob2QsXG4gICAgICBtZXRob2RHdWFyZFBheWxvYWQsXG4gICAgICBsYWJlbFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgYXNzZXJ0KGNhbGxLaW5kID09PSBcImFzeW5jXCIpO1xuICAgIHJldHVybiBkZWZlbmRBc3luY01ldGhvZChcbiAgICAgIGdldENvbnRleHQsXG4gICAgICBiZWhhdmlvck1ldGhvZCxcbiAgICAgIG1ldGhvZEd1YXJkUGF5bG9hZCxcbiAgICAgIGxhYmVsXG4gICAgKTtcbiAgfVxufTtcbnZhciBiaW5kTWV0aG9kID0gKG1ldGhvZFRhZywgY29udGV4dFByb3ZpZGVyLCBiZWhhdmlvck1ldGhvZCwgbWV0aG9kR3VhcmQpID0+IHtcbiAgYXNzZXJ0LnR5cGVvZihiZWhhdmlvck1ldGhvZCwgXCJmdW5jdGlvblwiKTtcbiAgY29uc3QgZ2V0Q29udGV4dCA9IChyZXByZXNlbnRhdGl2ZSkgPT4ge1xuICAgIHJlcHJlc2VudGF0aXZlIHx8IC8qIHNlcGFyYXRlIGxpbmUgdG8gZWFzZSBicmVha3BvaW50aW5nKi9cbiAgICB0aHJvd1JlZGFjdGVkYE1ldGhvZCAke21ldGhvZFRhZ30gY2FsbGVkIHdpdGhvdXQgJ3RoaXMnIG9iamVjdGA7XG4gICAgY29uc3QgY29udGV4dCA9IGNvbnRleHRQcm92aWRlcihyZXByZXNlbnRhdGl2ZSk7XG4gICAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGAke3F1b3RlKFxuICAgICAgICBtZXRob2RUYWdcbiAgICAgICl9IG1heSBvbmx5IGJlIGFwcGxpZWQgdG8gYSB2YWxpZCBpbnN0YW5jZTogJHtyZXByZXNlbnRhdGl2ZX1gO1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dDtcbiAgfTtcbiAgY29uc3QgbWV0aG9kID0gZGVmZW5kTWV0aG9kKFxuICAgIGdldENvbnRleHQsXG4gICAgYmVoYXZpb3JNZXRob2QsXG4gICAgbWV0aG9kR3VhcmQsXG4gICAgbWV0aG9kVGFnXG4gICk7XG4gIGRlZmluZVByb3BlcnRpZXMzKG1ldGhvZCwge1xuICAgIG5hbWU6IHsgdmFsdWU6IG1ldGhvZFRhZyB9LFxuICAgIGxlbmd0aDogeyB2YWx1ZTogYmVoYXZpb3JNZXRob2QubGVuZ3RoIH1cbiAgfSk7XG4gIHJldHVybiBtZXRob2Q7XG59O1xudmFyIGRlZmVuZFByb3RvdHlwZSA9ICh0YWcsIGNvbnRleHRQcm92aWRlciwgYmVoYXZpb3JNZXRob2RzLCB0aGlzZnVsTWV0aG9kcyA9IGZhbHNlLCBpbnRlcmZhY2VHdWFyZCA9IHZvaWQgMCkgPT4ge1xuICBjb25zdCBwcm90b3R5cGUgPSB7fTtcbiAgY29uc3QgbWV0aG9kTmFtZXMgPSBnZXRSZW1vdGFibGVNZXRob2ROYW1lcyhiZWhhdmlvck1ldGhvZHMpLmZpbHRlcihcbiAgICAvKiBCeSBpZ25vcmluZyBhbnkgbWV0aG9kIHRoYXQgc2VlbXMgdG8gYmUgYSBjb25zdHJ1Y3Rvciwgd2UgY2FuIHVzZSBhKi9cbiAgICAvKiBjbGFzcy5wcm90b3R5cGUgYXMgYSBiZWhhdmlvck1ldGhvZHMuKi9cbiAgICAoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5ICE9PSBcImNvbnN0cnVjdG9yXCIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBjb25zdCBjb25zdHJ1Y3RvciA9IGJlaGF2aW9yTWV0aG9kcy5jb25zdHJ1Y3RvcjtcbiAgICAgIHJldHVybiAhKGNvbnN0cnVjdG9yLnByb3RvdHlwZSAmJiBjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPT09IGNvbnN0cnVjdG9yKTtcbiAgICB9XG4gICk7XG4gIGxldCBtZXRob2RHdWFyZHM7XG4gIGxldCBkZWZhdWx0R3VhcmRzO1xuICBpZiAoaW50ZXJmYWNlR3VhcmQpIHtcbiAgICBjb25zdCB7XG4gICAgICBpbnRlcmZhY2VOYW1lLFxuICAgICAgbWV0aG9kR3VhcmRzOiBtZyxcbiAgICAgIHN5bWJvbE1ldGhvZEd1YXJkcyxcbiAgICAgIHNsb3BweSxcbiAgICAgIGRlZmF1bHRHdWFyZHM6IGRnID0gc2xvcHB5ID8gXCJwYXNzYWJsZVwiIDogZGVmYXVsdEd1YXJkc1xuICAgIH0gPSBnZXRJbnRlcmZhY2VHdWFyZFBheWxvYWQoaW50ZXJmYWNlR3VhcmQpO1xuICAgIG1ldGhvZEd1YXJkcyA9IGhhcmRlbih7XG4gICAgICAuLi5tZyxcbiAgICAgIC4uLihzeW1ib2xNZXRob2RHdWFyZHMmJiBmcm9tRW50cmllczgoZ2V0Q29weU1hcEVudHJpZXMoc3ltYm9sTWV0aG9kR3VhcmRzKSkpXG4gICAgfSk7XG4gICAgZGVmYXVsdEd1YXJkcyA9IGRnO1xuICAgIHtcbiAgICAgIGNvbnN0IG1ldGhvZEd1YXJkTmFtZXMgPSBvd25LZXlzMTkobWV0aG9kR3VhcmRzKTtcbiAgICAgIGNvbnN0IHVuaW1wbGVtZW50ZWQgPSBsaXN0RGlmZmVyZW5jZShtZXRob2RHdWFyZE5hbWVzLCBtZXRob2ROYW1lcyk7XG4gICAgICB1bmltcGxlbWVudGVkLmxlbmd0aCA9PT0gMCB8fCB0aHJvd1JlZGFjdGVkYG1ldGhvZHMgJHtxdW90ZSh1bmltcGxlbWVudGVkKX0gbm90IGltcGxlbWVudGVkIGJ5ICR7cXVvdGUodGFnKX1gO1xuICAgICAgaWYgKGRlZmF1bHRHdWFyZHMgPT09IHZvaWQgMCkge1xuICAgICAgICBjb25zdCB1bmd1YXJkZWQgPSBsaXN0RGlmZmVyZW5jZShtZXRob2ROYW1lcywgbWV0aG9kR3VhcmROYW1lcyk7XG4gICAgICAgIHVuZ3VhcmRlZC5sZW5ndGggPT09IDAgfHwgdGhyb3dSZWRhY3RlZGBtZXRob2RzICR7cXVvdGUodW5ndWFyZGVkKX0gbm90IGd1YXJkZWQgYnkgJHtxdW90ZShpbnRlcmZhY2VOYW1lKX1gO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmb3IgKGNvbnN0IHByb3Agb2YgbWV0aG9kTmFtZXMpIHtcbiAgICBjb25zdCBvcmlnaW5hbE1ldGhvZCA9IGJlaGF2aW9yTWV0aG9kc1twcm9wXTtcbiAgICBjb25zdCB7IHNoaWZ0ZWRNZXRob2QgfSA9IHtcbiAgICAgIHNoaWZ0ZWRNZXRob2QoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWxNZXRob2QodGhpcywgLi4uYXJncyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBiZWhhdmlvck1ldGhvZCA9IHRoaXNmdWxNZXRob2RzID8gb3JpZ2luYWxNZXRob2QgOiBzaGlmdGVkTWV0aG9kO1xuICAgIGxldCBtZXRob2RHdWFyZCA9IG1ldGhvZEd1YXJkcyAmJiBtZXRob2RHdWFyZHNbcHJvcF07XG4gICAgaWYgKCFtZXRob2RHdWFyZCkge1xuICAgICAgc3dpdGNoIChkZWZhdWx0R3VhcmRzKSB7XG4gICAgICAgIGNhc2Ugdm9pZCAwOiB7XG4gICAgICAgICAgaWYgKHRoaXNmdWxNZXRob2RzKSB7XG4gICAgICAgICAgICBtZXRob2RHdWFyZCA9IFBhc3NhYmxlTWV0aG9kR3VhcmQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1ldGhvZEd1YXJkID0gUmF3TWV0aG9kR3VhcmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJwYXNzYWJsZVwiOiB7XG4gICAgICAgICAgbWV0aG9kR3VhcmQgPSBQYXNzYWJsZU1ldGhvZEd1YXJkO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJyYXdcIjoge1xuICAgICAgICAgIG1ldGhvZEd1YXJkID0gUmF3TWV0aG9kR3VhcmQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgVW5yZWNvZ25pemVkIGRlZmF1bHRHdWFyZHMgJHtxdW90ZShkZWZhdWx0R3VhcmRzKX1gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHByb3RvdHlwZVtwcm9wXSA9IGJpbmRNZXRob2QoXG4gICAgICBgSW4gJHtxdW90ZShwcm9wKX0gbWV0aG9kIG9mICgke3RhZ30pYCxcbiAgICAgIGNvbnRleHRQcm92aWRlcixcbiAgICAgIGJlaGF2aW9yTWV0aG9kLFxuICAgICAgbWV0aG9kR3VhcmRcbiAgICApO1xuICB9XG4gIGlmICghaGFzT3duMTAocHJvdG90eXBlLCBHRVRfSU5URVJGQUNFX0dVQVJEKSkge1xuICAgIGNvbnN0IGdldEludGVyZmFjZUd1YXJkTWV0aG9kID0ge1xuICAgICAgW0dFVF9JTlRFUkZBQ0VfR1VBUkRdKCkge1xuICAgICAgICByZXR1cm4gaW50ZXJmYWNlR3VhcmQ7XG4gICAgICB9XG4gICAgfVtHRVRfSU5URVJGQUNFX0dVQVJEXTtcbiAgICBwcm90b3R5cGVbR0VUX0lOVEVSRkFDRV9HVUFSRF0gPSBiaW5kTWV0aG9kKFxuICAgICAgYEluICR7cXVvdGUoR0VUX0lOVEVSRkFDRV9HVUFSRCl9IG1ldGhvZCBvZiAoJHt0YWd9KWAsXG4gICAgICBjb250ZXh0UHJvdmlkZXIsXG4gICAgICBnZXRJbnRlcmZhY2VHdWFyZE1ldGhvZCxcbiAgICAgIFBhc3NhYmxlTWV0aG9kR3VhcmRcbiAgICApO1xuICB9XG4gIHJldHVybiBGYXIoXG4gICAgdGFnLFxuICAgIC8qKiBAdHlwZSB7VCAmIEdldEludGVyZmFjZUd1YXJkPFQ+fSAqL1xuICAgIHByb3RvdHlwZVxuICApO1xufTtcbmhhcmRlbihkZWZlbmRQcm90b3R5cGUpO1xudmFyIGRlZmVuZFByb3RvdHlwZUtpdCA9ICh0YWcsIGNvbnRleHRQcm92aWRlcktpdCwgYmVoYXZpb3JNZXRob2RzS2l0LCB0aGlzZnVsTWV0aG9kcyA9IGZhbHNlLCBpbnRlcmZhY2VHdWFyZEtpdCA9IHZvaWQgMCkgPT4ge1xuICBjb25zdCBmYWNldE5hbWVzID0gb3duS2V5czE5KGJlaGF2aW9yTWV0aG9kc0tpdCkuc29ydCgpO1xuICBmYWNldE5hbWVzLmxlbmd0aCA+IDEgfHwgdGhyb3dSZWRhY3RlZGBBIG11bHRpLWZhY2V0IG9iamVjdCBtdXN0IGhhdmUgbXVsdGlwbGUgZmFjZXRzYDtcbiAgaWYgKGludGVyZmFjZUd1YXJkS2l0KSB7XG4gICAgY29uc3QgaW50ZXJmYWNlTmFtZXMgPSBvd25LZXlzMTkoaW50ZXJmYWNlR3VhcmRLaXQpO1xuICAgIGNvbnN0IGV4dHJhSW50ZXJmYWNlTmFtZXMgPSBsaXN0RGlmZmVyZW5jZShmYWNldE5hbWVzLCBpbnRlcmZhY2VOYW1lcyk7XG4gICAgZXh0cmFJbnRlcmZhY2VOYW1lcy5sZW5ndGggPT09IDAgfHwgdGhyb3dSZWRhY3RlZGBJbnRlcmZhY2VzICR7cXVvdGUoZXh0cmFJbnRlcmZhY2VOYW1lcyl9IG5vdCBpbXBsZW1lbnRlZCBieSAke3F1b3RlKHRhZyl9YDtcbiAgICBjb25zdCBleHRyYUZhY2V0TmFtZXMyID0gbGlzdERpZmZlcmVuY2UoaW50ZXJmYWNlTmFtZXMsIGZhY2V0TmFtZXMpO1xuICAgIGV4dHJhRmFjZXROYW1lczIubGVuZ3RoID09PSAwIHx8IHRocm93UmVkYWN0ZWRgRmFjZXRzICR7cXVvdGUoZXh0cmFGYWNldE5hbWVzMil9IG9mICR7cXVvdGUodGFnKX0gbm90IGd1YXJkZWQgYnkgaW50ZXJmYWNlc2A7XG4gIH1cbiAgY29uc3QgY29udGV4dE1hcE5hbWVzID0gb3duS2V5czE5KGNvbnRleHRQcm92aWRlcktpdCk7XG4gIGNvbnN0IGV4dHJhQ29udGV4dE5hbWVzID0gbGlzdERpZmZlcmVuY2UoZmFjZXROYW1lcywgY29udGV4dE1hcE5hbWVzKTtcbiAgZXh0cmFDb250ZXh0TmFtZXMubGVuZ3RoID09PSAwIHx8IHRocm93UmVkYWN0ZWRgQ29udGV4dHMgJHtxdW90ZShleHRyYUNvbnRleHROYW1lcyl9IG5vdCBpbXBsZW1lbnRlZCBieSAke3F1b3RlKHRhZyl9YDtcbiAgY29uc3QgZXh0cmFGYWNldE5hbWVzID0gbGlzdERpZmZlcmVuY2UoY29udGV4dE1hcE5hbWVzLCBmYWNldE5hbWVzKTtcbiAgZXh0cmFGYWNldE5hbWVzLmxlbmd0aCA9PT0gMCB8fCB0aHJvd1JlZGFjdGVkYEZhY2V0cyAke3F1b3RlKGV4dHJhRmFjZXROYW1lcyl9IG9mICR7cXVvdGUodGFnKX0gbWlzc2luZyBjb250ZXh0c2A7XG4gIGNvbnN0IHByb3RvS2l0ID0gb2JqZWN0TWFwKFxuICAgIGJlaGF2aW9yTWV0aG9kc0tpdCxcbiAgICAoYmVoYXZpb3JNZXRob2RzLCBmYWNldE5hbWUpID0+IGRlZmVuZFByb3RvdHlwZShcbiAgICAgIGAke3RhZ30gJHtTdHJpbmcoZmFjZXROYW1lKX1gLFxuICAgICAgY29udGV4dFByb3ZpZGVyS2l0W2ZhY2V0TmFtZV0sXG4gICAgICBiZWhhdmlvck1ldGhvZHMsXG4gICAgICB0aGlzZnVsTWV0aG9kcyxcbiAgICAgIGludGVyZmFjZUd1YXJkS2l0ICYmIGludGVyZmFjZUd1YXJkS2l0W2ZhY2V0TmFtZV1cbiAgICApXG4gICk7XG4gIHJldHVybiBwcm90b0tpdDtcbn07XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9AZW5kby9leG8vc3JjL2V4by1tYWtlcnMuanMqL1xudmFyIHsgY3JlYXRlOiBjcmVhdGUzLCBzZWFsLCBmcmVlemU6IGZyZWV6ZTcsIGRlZmluZVByb3BlcnR5OiBkZWZpbmVQcm9wZXJ0eTIsIHZhbHVlczogdmFsdWVzMyB9ID0gT2JqZWN0O1xudmFyIExBQkVMX0lOU1RBTkNFUyA9IGVudmlyb25tZW50T3B0aW9uc0xpc3RIYXMoXCJERUJVR1wiLCBcImxhYmVsLWluc3RhbmNlc1wiKTtcbnZhciBtYWtlU2VsZiA9IChwcm90bywgaW5zdGFuY2VDb3VudCkgPT4ge1xuICBjb25zdCBzZWxmID0gY3JlYXRlMyhwcm90byk7XG4gIGlmIChMQUJFTF9JTlNUQU5DRVMpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eTIoc2VsZiwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7XG4gICAgICB2YWx1ZTogYCR7cHJvdG9bU3ltYm9sLnRvU3RyaW5nVGFnXX0jJHtpbnN0YW5jZUNvdW50fWAsXG4gICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gaGFyZGVuKHNlbGYpO1xufTtcbnZhciBlbXB0eVJlY29yZCA9IGhhcmRlbih7fSk7XG52YXIgaW5pdEVtcHR5ID0gKCkgPT4gZW1wdHlSZWNvcmQ7XG52YXIgZGVmaW5lRXhvQ2xhc3MgPSAodGFnLCBpbnRlcmZhY2VHdWFyZCwgaW5pdCwgbWV0aG9kcywgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGhhcmRlbihtZXRob2RzKTtcbiAgY29uc3Qge1xuICAgIGZpbmlzaCA9IHZvaWQgMCxcbiAgICByZWNlaXZlQW1wbGlmaWVyID0gdm9pZCAwLFxuICAgIHJlY2VpdmVJbnN0YW5jZVRlc3RlciA9IHZvaWQgMFxuICB9ID0gb3B0aW9ucztcbiAgcmVjZWl2ZUFtcGxpZmllciA9PT0gdm9pZCAwIHx8IHRocm93UmVkYWN0ZWRgT25seSBmYWNldHMgb2YgYW4gZXhvIGNsYXNzIGtpdCBjYW4gYmUgYW1wbGlmaWVkICR7cXVvdGUodGFnKX1gO1xuICBjb25zdCBjb250ZXh0TWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG4gIGNvbnN0IHByb3RvID0gZGVmZW5kUHJvdG90eXBlKFxuICAgIHRhZyxcbiAgICAoc2VsZikgPT4gKFxuICAgICAgLyoqIEB0eXBlIHthbnl9ICovXG4gICAgICBjb250ZXh0TWFwLmdldChzZWxmKVxuICAgICksXG4gICAgbWV0aG9kcyxcbiAgICB0cnVlLFxuICAgIGludGVyZmFjZUd1YXJkXG4gICk7XG4gIGxldCBpbnN0YW5jZUNvdW50ID0gMDtcbiAgY29uc3QgbWFrZUluc3RhbmNlID0gKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBzdGF0ZSA9IHNlYWwoaW5pdCguLi5hcmdzKSk7XG4gICAgaW5zdGFuY2VDb3VudCArPSAxO1xuICAgIGNvbnN0IHNlbGYgPSBtYWtlU2VsZihwcm90bywgaW5zdGFuY2VDb3VudCk7XG4gICAgY29uc3QgY29udGV4dCA9IGZyZWV6ZTcoeyBzdGF0ZSwgc2VsZiB9KTtcbiAgICBjb250ZXh0TWFwLnNldChzZWxmLCBjb250ZXh0KTtcbiAgICBpZiAoZmluaXNoKSB7XG4gICAgICBmaW5pc2goY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBzZWxmO1xuICB9O1xuICBpZiAocmVjZWl2ZUluc3RhbmNlVGVzdGVyKSB7XG4gICAgY29uc3QgaXNJbnN0YW5jZSA9IChleG8sIGZhY2V0TmFtZSA9IHZvaWQgMCkgPT4ge1xuICAgICAgZmFjZXROYW1lID09PSB2b2lkIDAgfHwgdGhyb3dSZWRhY3RlZGBmYWNldE5hbWUgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIGFuIGV4byBjbGFzcyBraXQ6ICR7cXVvdGUoXG4gICAgICAgIHRhZ1xuICAgICAgKX0gaGFzIG5vIGZhY2V0ICR7cXVvdGUoZmFjZXROYW1lKX1gO1xuICAgICAgcmV0dXJuIGNvbnRleHRNYXAuaGFzKGV4byk7XG4gICAgfTtcbiAgICBoYXJkZW4oaXNJbnN0YW5jZSk7XG4gICAgcmVjZWl2ZUluc3RhbmNlVGVzdGVyKGlzSW5zdGFuY2UpO1xuICB9XG4gIHJldHVybiBoYXJkZW4obWFrZUluc3RhbmNlKTtcbn07XG5oYXJkZW4oZGVmaW5lRXhvQ2xhc3MpO1xudmFyIGRlZmluZUV4b0NsYXNzS2l0ID0gKHRhZywgaW50ZXJmYWNlR3VhcmRLaXQsIGluaXQsIG1ldGhvZHNLaXQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBoYXJkZW4obWV0aG9kc0tpdCk7XG4gIGNvbnN0IHtcbiAgICBmaW5pc2ggPSB2b2lkIDAsXG4gICAgcmVjZWl2ZUFtcGxpZmllciA9IHZvaWQgMCxcbiAgICByZWNlaXZlSW5zdGFuY2VUZXN0ZXIgPSB2b2lkIDBcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGNvbnRleHRNYXBLaXQgPSBvYmplY3RNYXAobWV0aG9kc0tpdCwgKCkgPT4gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCkpO1xuICBjb25zdCBnZXRDb250ZXh0S2l0ID0gb2JqZWN0TWFwKFxuICAgIGNvbnRleHRNYXBLaXQsXG4gICAgKGNvbnRleHRNYXApID0+IChmYWNldCkgPT4gY29udGV4dE1hcC5nZXQoZmFjZXQpXG4gICk7XG4gIGNvbnN0IHByb3RvdHlwZUtpdCA9IGRlZmVuZFByb3RvdHlwZUtpdChcbiAgICB0YWcsXG4gICAgZ2V0Q29udGV4dEtpdCxcbiAgICBtZXRob2RzS2l0LFxuICAgIHRydWUsXG4gICAgaW50ZXJmYWNlR3VhcmRLaXRcbiAgKTtcbiAgbGV0IGluc3RhbmNlQ291bnQgPSAwO1xuICBjb25zdCBtYWtlSW5zdGFuY2VLaXQgPSAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IHN0YXRlID0gc2VhbChpbml0KC4uLmFyZ3MpKTtcbiAgICBjb25zdCBjb250ZXh0ID0geyBzdGF0ZSwgZmFjZXRzOiBudWxsIH07XG4gICAgaW5zdGFuY2VDb3VudCArPSAxO1xuICAgIGNvbnN0IGZhY2V0cyA9IG9iamVjdE1hcChwcm90b3R5cGVLaXQsIChwcm90bywgZmFjZXROYW1lKSA9PiB7XG4gICAgICBjb25zdCBzZWxmID0gbWFrZVNlbGYocHJvdG8sIGluc3RhbmNlQ291bnQpO1xuICAgICAgY29udGV4dE1hcEtpdFtmYWNldE5hbWVdLnNldChzZWxmLCBjb250ZXh0KTtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0pO1xuICAgIGNvbnRleHQuZmFjZXRzID0gZmFjZXRzO1xuICAgIGZyZWV6ZTcoY29udGV4dCk7XG4gICAgaWYgKGZpbmlzaCkge1xuICAgICAgZmluaXNoKGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgLyoqIEB0eXBlIHtHdWFyZGVkS2l0PEY+fSAqL1xuICAgICAgY29udGV4dC5mYWNldHNcbiAgICApO1xuICB9O1xuICBpZiAocmVjZWl2ZUFtcGxpZmllcikge1xuICAgIGNvbnN0IGFtcGxpZnkgPSAoZXhvRmFjZXQpID0+IHtcbiAgICAgIGZvciAoY29uc3QgY29udGV4dE1hcCBvZiB2YWx1ZXMzKGNvbnRleHRNYXBLaXQpKSB7XG4gICAgICAgIGlmIChjb250ZXh0TWFwLmhhcyhleG9GYWNldCkpIHtcbiAgICAgICAgICBjb25zdCB7IGZhY2V0cyB9ID0gY29udGV4dE1hcC5nZXQoZXhvRmFjZXQpO1xuICAgICAgICAgIHJldHVybiBmYWNldHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgTXVzdCBiZSBhIGZhY2V0IG9mICR7cXVvdGUodGFnKX06ICR7ZXhvRmFjZXR9YDtcbiAgICB9O1xuICAgIGhhcmRlbihhbXBsaWZ5KTtcbiAgICByZWNlaXZlQW1wbGlmaWVyKGFtcGxpZnkpO1xuICB9XG4gIGlmIChyZWNlaXZlSW5zdGFuY2VUZXN0ZXIpIHtcbiAgICBjb25zdCBpc0luc3RhbmNlID0gKGV4b0ZhY2V0LCBmYWNldE5hbWUgPSB2b2lkIDApID0+IHtcbiAgICAgIGlmIChmYWNldE5hbWUgPT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gdmFsdWVzMyhjb250ZXh0TWFwS2l0KS5zb21lKFxuICAgICAgICAgIChjb250ZXh0TWFwMikgPT4gY29udGV4dE1hcDIuaGFzKGV4b0ZhY2V0KVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgYXNzZXJ0LnR5cGVvZihmYWNldE5hbWUsIFwic3RyaW5nXCIpO1xuICAgICAgY29uc3QgY29udGV4dE1hcCA9IGNvbnRleHRNYXBLaXRbZmFjZXROYW1lXTtcbiAgICAgIGNvbnRleHRNYXAgIT09IHZvaWQgMCB8fCB0aHJvd1JlZGFjdGVkYGV4byBjbGFzcyBraXQgJHtxdW90ZSh0YWcpfSBoYXMgbm8gZmFjZXQgbmFtZWQgJHtxdW90ZShmYWNldE5hbWUpfWA7XG4gICAgICByZXR1cm4gY29udGV4dE1hcC5oYXMoZXhvRmFjZXQpO1xuICAgIH07XG4gICAgaGFyZGVuKGlzSW5zdGFuY2UpO1xuICAgIHJlY2VpdmVJbnN0YW5jZVRlc3Rlcihpc0luc3RhbmNlKTtcbiAgfVxuICByZXR1cm4gaGFyZGVuKG1ha2VJbnN0YW5jZUtpdCk7XG59O1xuaGFyZGVuKGRlZmluZUV4b0NsYXNzS2l0KTtcbnZhciBtYWtlRXhvID0gKHRhZywgaW50ZXJmYWNlR3VhcmQsIG1ldGhvZHMsIG9wdGlvbnMgPSB2b2lkIDApID0+IHtcbiAgY29uc3QgbWFrZUluc3RhbmNlID0gZGVmaW5lRXhvQ2xhc3MoXG4gICAgdGFnLFxuICAgIGludGVyZmFjZUd1YXJkLFxuICAgIGluaXRFbXB0eSxcbiAgICBtZXRob2RzLFxuICAgIG9wdGlvbnNcbiAgKTtcbiAgcmV0dXJuIG1ha2VJbnN0YW5jZSgpO1xufTtcbmhhcmRlbihtYWtlRXhvKTtcblxuLyogLi4vc3RvcmUvc3JjL3N0b3Jlcy9zY2FsYXJXZWFrU2V0U3RvcmUuanMqL1xudmFyIG1ha2VXZWFrU2V0U3RvcmVNZXRob2RzID0gKGpzc2V0LCBhc3NlcnRLZXlPa1RvQWRkLCBhc3NlcnRLZXlPa1RvRGVsZXRlID0gdm9pZCAwLCBrZXlOYW1lID0gXCJrZXlcIikgPT4ge1xuICBjb25zdCBhc3NlcnRLZXlFeGlzdHMgPSAoa2V5KSA9PiBqc3NldC5oYXMoa2V5KSB8fCB0aHJvd1JlZGFjdGVkYCR7cXVvdGUoa2V5TmFtZSl9IG5vdCBmb3VuZDogJHtrZXl9YDtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgaGFzOiAoa2V5KSA9PiB7XG4gICAgICByZXR1cm4ganNzZXQuaGFzKGtleSk7XG4gICAgfSxcbiAgICBhZGQ6IChrZXkpID0+IHtcbiAgICAgIGFzc2VydEtleU9rVG9BZGQoa2V5KTtcbiAgICAgIGpzc2V0LmFkZChrZXkpO1xuICAgIH0sXG4gICAgZGVsZXRlOiAoa2V5KSA9PiB7XG4gICAgICBhc3NlcnRLZXlFeGlzdHMoa2V5KTtcbiAgICAgIGlmIChhc3NlcnRLZXlPa1RvRGVsZXRlICE9PSB2b2lkIDApIHtcbiAgICAgICAgYXNzZXJ0S2V5T2tUb0RlbGV0ZShrZXkpO1xuICAgICAgfVxuICAgICAganNzZXQuZGVsZXRlKGtleSk7XG4gICAgfSxcbiAgICBhZGRBbGw6IChrZXlzOCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBrZXlzOFtTeW1ib2wuaXRlcmF0b3JdICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgaWYgKE9iamVjdC5pc0Zyb3plbihrZXlzOCkgJiYgaXNDb3B5U2V0KGtleXM4KSkge1xuICAgICAgICAgIGtleXM4ID0gZ2V0Q29weVNldEtleXMoa2V5czgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93UmVkYWN0ZWRgcHJvdmlkZWQgZGF0YSBzb3VyY2UgaXMgbm90IGl0ZXJhYmxlOiAke2tleXM4fWA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAoXG4gICAgICAgIGNvbnN0IGtleSBvZlxuICAgICAgICAvKiogQHR5cGUge0l0ZXJhYmxlPEs+fSAqL1xuICAgICAgICBrZXlzOFxuICAgICAgKSB7XG4gICAgICAgIGFzc2VydEtleU9rVG9BZGQoa2V5KTtcbiAgICAgICAganNzZXQuYWRkKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG52YXIgbWFrZVNjYWxhcldlYWtTZXRTdG9yZSA9ICh0YWcgPSBcImtleVwiLCB7IGxvbmdMaXZlZCA9IHRydWUsIGtleVNoYXBlID0gdm9pZCAwIH0gPSB7fSkgPT4ge1xuICBjb25zdCBqc3NldCA9IG5ldyAobG9uZ0xpdmVkID8gV2Vha1NldCA6IFNldCkoKTtcbiAgaWYgKGtleVNoYXBlICE9PSB2b2lkIDApIHtcbiAgICBhc3NlcnRQYXR0ZXJuKGtleVNoYXBlKTtcbiAgfVxuICBjb25zdCBhc3NlcnRLZXlPa1RvQWRkID0gKGtleSkgPT4ge1xuICAgIGhhcmRlbihrZXkpO1xuICAgIHBhc3NTdHlsZU9mKGtleSkgPT09IFwicmVtb3RhYmxlXCIgfHwgdGhyb3dSZWRhY3RlZGBPbmx5IHJlbW90YWJsZXMgY2FuIGJlIGtleXMgb2Ygc2NhbGFyIFdlYWtTdG9yZXM6ICR7a2V5fWA7XG4gICAgaWYgKGtleVNoYXBlICE9PSB2b2lkIDApIHtcbiAgICAgIG11c3RNYXRjaChrZXksIGtleVNoYXBlLCBcIndlYWtTZXRTdG9yZSBrZXlcIik7XG4gICAgfVxuICB9O1xuICByZXR1cm4gRmFyKGBzY2FsYXIgV2Vha1NldFN0b3JlIG9mICR7cXVvdGUodGFnKX1gLCB7XG4gICAgLi4ubWFrZVdlYWtTZXRTdG9yZU1ldGhvZHMoanNzZXQsIGFzc2VydEtleU9rVG9BZGQsIHZvaWQgMCwgdGFnKVxuICB9KTtcbn07XG5oYXJkZW4obWFrZVNjYWxhcldlYWtTZXRTdG9yZSk7XG5cbi8qIC4uL3N0b3JlL3NyYy9zdG9yZXMvc3RvcmUtdXRpbHMuanMqL1xudmFyIG1ha2VDdXJyZW50S2V5c0tpdCA9IChnZXRSYXdLZXlzLCBjaGVja0hhcywgY29tcGFyZSwgYXNzZXJ0T2tUb0FkZCwgYXNzZXJ0T2tUb0RlbGV0ZSA9IHZvaWQgMCwga2V5TmFtZSA9IFwia2V5XCIpID0+IHtcbiAgbGV0IHVwZGF0ZUNvdW50ID0gMDtcbiAgbGV0IHNvcnRlZEtleXNNZW1vO1xuICBjb25zdCBhc3NlcnRVcGRhdGVPbkFkZCA9IChrLCB2MiA9IHZvaWQgMCkgPT4ge1xuICAgIGFzc2VydE9rVG9BZGQoaywgdjIpO1xuICAgIHVwZGF0ZUNvdW50ICs9IDE7XG4gICAgc29ydGVkS2V5c01lbW8gPSB2b2lkIDA7XG4gIH07XG4gIGNvbnN0IGFzc2VydFVwZGF0ZU9uRGVsZXRlID0gKGspID0+IGFzc2VydE9rVG9EZWxldGUgJiYgYXNzZXJ0T2tUb0RlbGV0ZShrKTtcbiAgY29uc3QgZ2V0U29ydGVkS2V5cyA9ICgpID0+IHtcbiAgICBpZiAoc29ydGVkS2V5c01lbW8gPT09IHZvaWQgMCkge1xuICAgICAgc29ydGVkS2V5c01lbW8gPSBoYXJkZW4oWy4uLmdldFJhd0tleXMoKV0uc29ydChjb21wYXJlKSk7XG4gICAgfVxuICAgIHJldHVybiBzb3J0ZWRLZXlzTWVtbztcbiAgfTtcbiAgY29uc3QgaXRlcmFibGVLZXlzID0gRmFyKFwiSXRlcmFibGUgb2Yga2V5c1wiLCB7XG4gICAgW1N5bWJvbC5pdGVyYXRvcl06ICgpID0+IHtcbiAgICAgIGNvbnN0IGdlbmVyYXRpb24gPSB1cGRhdGVDb3VudDtcbiAgICAgIGdldFNvcnRlZEtleXMoKTtcbiAgICAgIGNvbnN0IGxlbiA9IHNvcnRlZEtleXNNZW1vLmxlbmd0aDtcbiAgICAgIGxldCBpMyA9IDA7XG4gICAgICByZXR1cm4gRmFyKFwiSXRlcmF0b3Igb2Yga2V5c1wiLCB7XG4gICAgICAgIG5leHQ6ICgpID0+IHtcbiAgICAgICAgICBnZW5lcmF0aW9uID09PSB1cGRhdGVDb3VudCB8fCB0aHJvd1JlZGFjdGVkYFN0b3JlICR7cXVvdGUoa2V5TmFtZSl9IGN1cnNvciBzdGFsZWA7XG4gICAgICAgICAgZm9yICg7IDsgKSB7XG4gICAgICAgICAgICBpZiAoaTMgPCBsZW4pIHtcbiAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBzb3J0ZWRLZXlzTWVtb1tpM107XG4gICAgICAgICAgICAgIGkzICs9IDE7XG4gICAgICAgICAgICAgIGlmIChjaGVja0hhcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFyZGVuKHsgZG9uZTogZmFsc2UsIHZhbHVlIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gaGFyZGVuKHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHZvaWQgMCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIGFzc2VydFVwZGF0ZU9uQWRkLFxuICAgIGFzc2VydFVwZGF0ZU9uRGVsZXRlLFxuICAgIGl0ZXJhYmxlS2V5c1xuICB9KTtcbn07XG5oYXJkZW4obWFrZUN1cnJlbnRLZXlzS2l0KTtcbnZhciBwcm92aWRlTGF6eSA9IChtYXBTdG9yZSwga2V5LCBtYWtlVmFsdWUpID0+IHtcbiAgaWYgKCFtYXBTdG9yZS5oYXMoa2V5KSkge1xuICAgIG1hcFN0b3JlLmluaXQoa2V5LCBtYWtlVmFsdWUoa2V5KSk7XG4gIH1cbiAgcmV0dXJuIG1hcFN0b3JlLmdldChrZXkpO1xufTtcbmhhcmRlbihwcm92aWRlTGF6eSk7XG52YXIgbWFrZUF0b21pY1Byb3ZpZGVyID0gKHN0b3JlKSA9PiB7XG4gIGNvbnN0IHBlbmRpbmcgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBjb25zdCBwcm92aWRlQXN5bmMgPSAoa2V5LCBtYWtlVmFsdWUsIGZpbmlzaFZhbHVlKSA9PiB7XG4gICAgaWYgKHN0b3JlLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHN0b3JlLmdldChrZXkpKTtcbiAgICB9XG4gICAgaWYgKCFwZW5kaW5nLmhhcyhrZXkpKSB7XG4gICAgICBjb25zdCB2YWxQMiA9IG1ha2VWYWx1ZShrZXkpLnRoZW4oKHYyKSA9PiB7XG4gICAgICAgIHN0b3JlLmluaXQoa2V5LCB2Mik7XG4gICAgICAgIHJldHVybiB2MjtcbiAgICAgIH0pLnRoZW4oKHYyKSA9PiB7XG4gICAgICAgIGlmIChmaW5pc2hWYWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmaW5pc2hWYWx1ZShrZXksIHYyKS50aGVuKCgpID0+IHYyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdjI7XG4gICAgICB9KS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgcGVuZGluZy5kZWxldGUoa2V5KTtcbiAgICAgIH0pO1xuICAgICAgcGVuZGluZy5zZXQoa2V5LCB2YWxQMik7XG4gICAgfVxuICAgIGNvbnN0IHZhbFAgPSBwZW5kaW5nLmdldChrZXkpO1xuICAgIGFzc2VydCh2YWxQKTtcbiAgICByZXR1cm4gdmFsUDtcbiAgfTtcbiAgcmV0dXJuIGhhcmRlbih7IHByb3ZpZGVBc3luYyB9KTtcbn07XG5oYXJkZW4obWFrZUF0b21pY1Byb3ZpZGVyKTtcbnZhciBhcHBlbmRUb1N0b3JlZEFycmF5ID0gKG1hcFN0b3JlLCBrZXksIGl0ZW0pID0+IHtcbiAgaWYgKG1hcFN0b3JlLmhhcyhrZXkpKSB7XG4gICAgY29uc3QgZXh0YW50ID0gbWFwU3RvcmUuZ2V0KGtleSk7XG4gICAgbWFwU3RvcmUuc2V0KGtleSwgaGFyZGVuKFsuLi5leHRhbnQsIGl0ZW1dKSk7XG4gIH0gZWxzZSB7XG4gICAgbWFwU3RvcmUuaW5pdChrZXksIGhhcmRlbihbaXRlbV0pKTtcbiAgfVxufTtcbmhhcmRlbihhcHBlbmRUb1N0b3JlZEFycmF5KTtcblxuLyogLi4vc3RvcmUvc3JjL3N0b3Jlcy9zY2FsYXJTZXRTdG9yZS5qcyovXG52YXIgbWFrZVNldFN0b3JlTWV0aG9kcyA9IChqc3NldCwgYXNzZXJ0S2V5T2tUb0FkZCwgYXNzZXJ0S2V5T2tUb0RlbGV0ZSA9IHZvaWQgMCwga2V5TmFtZSA9IFwia2V5XCIpID0+IHtcbiAgY29uc3QgeyBhc3NlcnRVcGRhdGVPbkFkZCwgYXNzZXJ0VXBkYXRlT25EZWxldGUsIGl0ZXJhYmxlS2V5cyB9ID0gbWFrZUN1cnJlbnRLZXlzS2l0KFxuICAgICgpID0+IGpzc2V0LmtleXMoKSxcbiAgICAoaykgPT4ganNzZXQuaGFzKGspLFxuICAgIGNvbXBhcmVSYW5rLFxuICAgIGFzc2VydEtleU9rVG9BZGQsXG4gICAgYXNzZXJ0S2V5T2tUb0RlbGV0ZSxcbiAgICBrZXlOYW1lXG4gICk7XG4gIGNvbnN0IGtleXM4ID0gKGtleVBhdHQgPSB2b2lkIDApID0+IGtleVBhdHQgPT09IHZvaWQgMCA/IGl0ZXJhYmxlS2V5cyA6IGZpbHRlckl0ZXJhYmxlKGl0ZXJhYmxlS2V5cywgKGspID0+IG1hdGNoZXMoaywga2V5UGF0dCkpO1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICAuLi5tYWtlV2Vha1NldFN0b3JlTWV0aG9kcyhcbiAgICAgIGpzc2V0LFxuICAgICAgYXNzZXJ0VXBkYXRlT25BZGQsXG4gICAgICBhc3NlcnRVcGRhdGVPbkRlbGV0ZSxcbiAgICAgIGtleU5hbWVcbiAgICApLFxuICAgIGtleXM6IGtleXM4LFxuICAgIHZhbHVlczoga2V5czgsXG4gICAgc25hcHNob3Q6IChrZXlQYXR0ID0gdm9pZCAwKSA9PiBtYWtlQ29weVNldChrZXlzOChrZXlQYXR0KSksXG4gICAgZ2V0U2l6ZTogKGtleVBhdHQgPSB2b2lkIDApID0+IGtleVBhdHQgPT09IHZvaWQgMCA/IGpzc2V0LnNpemUgOiBbLi4ua2V5czgoa2V5UGF0dCldLmxlbmd0aCxcbiAgICBjbGVhcjogKGtleVBhdHQgPSB2b2lkIDApID0+IHtcbiAgICAgIGlmIChrZXlQYXR0ID09PSB2b2lkIDApIHtcbiAgICAgICAganNzZXQuY2xlYXIoKTtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXM4KGtleVBhdHQpKSB7XG4gICAgICAgIGpzc2V0LmRlbGV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xudmFyIG1ha2VTY2FsYXJTZXRTdG9yZSA9ICh0YWcgPSBcImtleVwiLCB7IGtleVNoYXBlID0gdm9pZCAwIH0gPSB7fSkgPT4ge1xuICBjb25zdCBqc3NldCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIGlmIChrZXlTaGFwZSAhPT0gdm9pZCAwKSB7XG4gICAgYXNzZXJ0UGF0dGVybihrZXlTaGFwZSk7XG4gIH1cbiAgY29uc3QgYXNzZXJ0S2V5T2tUb0FkZCA9IChrZXkpID0+IHtcbiAgICBoYXJkZW4oa2V5KTtcbiAgICBhc3NlcnRTY2FsYXJLZXkoa2V5KTtcbiAgICBpZiAoa2V5U2hhcGUgIT09IHZvaWQgMCkge1xuICAgICAgbXVzdE1hdGNoKGtleSwga2V5U2hhcGUsIFwic2V0U3RvcmUga2V5XCIpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIEZhcihgc2NhbGFyIFNldFN0b3JlIG9mICR7cXVvdGUodGFnKX1gLCB7XG4gICAgLi4ubWFrZVNldFN0b3JlTWV0aG9kcyhqc3NldCwgYXNzZXJ0S2V5T2tUb0FkZCwgdm9pZCAwLCB0YWcpXG4gIH0pO1xufTtcbmhhcmRlbihtYWtlU2NhbGFyU2V0U3RvcmUpO1xuXG4vKiAuLi9zdG9yZS9zcmMvc3RvcmVzL3NjYWxhcldlYWtNYXBTdG9yZS5qcyovXG52YXIgbWFrZVdlYWtNYXBTdG9yZU1ldGhvZHMgPSAoanNtYXAsIGFzc2VydEtWT2tUb0FkZCwgYXNzZXJ0S1ZPa1RvU2V0LCBhc3NlcnRLZXlPa1RvRGVsZXRlID0gdm9pZCAwLCBrZXlOYW1lID0gXCJrZXlcIikgPT4ge1xuICBjb25zdCBhc3NlcnRLZXlEb2VzTm90RXhpc3QgPSAoa2V5KSA9PiAhanNtYXAuaGFzKGtleSkgfHwgdGhyb3dSZWRhY3RlZGAke3F1b3RlKGtleU5hbWUpfSBhbHJlYWR5IHJlZ2lzdGVyZWQ6ICR7a2V5fWA7XG4gIGNvbnN0IGFzc2VydEtleUV4aXN0cyA9IChrZXkpID0+IGpzbWFwLmhhcyhrZXkpIHx8IHRocm93UmVkYWN0ZWRgJHtxdW90ZShrZXlOYW1lKX0gbm90IGZvdW5kOiAke2tleX1gO1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICBoYXM6IChrZXkpID0+IHtcbiAgICAgIHJldHVybiBqc21hcC5oYXMoa2V5KTtcbiAgICB9LFxuICAgIGdldDogKGtleSkgPT4ge1xuICAgICAgYXNzZXJ0S2V5RXhpc3RzKGtleSk7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAvKiogQHR5cGUge1Z9ICovXG4gICAgICAgIGpzbWFwLmdldChrZXkpXG4gICAgICApO1xuICAgIH0sXG4gICAgaW5pdDogKGtleSwgdmFsdWUpID0+IHtcbiAgICAgIGFzc2VydEtleURvZXNOb3RFeGlzdChrZXkpO1xuICAgICAgYXNzZXJ0S1ZPa1RvQWRkKGtleSwgdmFsdWUpO1xuICAgICAganNtYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0OiAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgYXNzZXJ0S2V5RXhpc3RzKGtleSk7XG4gICAgICBhc3NlcnRLVk9rVG9TZXQoa2V5LCB2YWx1ZSk7XG4gICAgICBqc21hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBkZWxldGU6IChrZXkpID0+IHtcbiAgICAgIGFzc2VydEtleUV4aXN0cyhrZXkpO1xuICAgICAgaWYgKGFzc2VydEtleU9rVG9EZWxldGUgIT09IHZvaWQgMCkge1xuICAgICAgICBhc3NlcnRLZXlPa1RvRGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgICBqc21hcC5kZWxldGUoa2V5KTtcbiAgICB9LFxuICAgIGFkZEFsbDogKGVudHJpZXMxMSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBlbnRyaWVzMTFbU3ltYm9sLml0ZXJhdG9yXSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGlmIChPYmplY3QuaXNGcm96ZW4oZW50cmllczExKSAmJiBpc0NvcHlNYXAoZW50cmllczExKSkge1xuICAgICAgICAgIGVudHJpZXMxMSA9IGdldENvcHlNYXBFbnRyaWVzKGVudHJpZXMxMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3dSZWRhY3RlZGBwcm92aWRlZCBkYXRhIHNvdXJjZSBpcyBub3QgaXRlcmFibGU6ICR7ZW50cmllczExfWA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAoXG4gICAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSBvZlxuICAgICAgICAvKiogQHR5cGUge0l0ZXJhYmxlPFtLLCBWXT59ICovXG4gICAgICAgIGVudHJpZXMxMVxuICAgICAgKSB7XG4gICAgICAgIGFzc2VydEtWT2tUb0FkZChrZXksIHZhbHVlKTtcbiAgICAgICAganNtYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xudmFyIG1ha2VTY2FsYXJXZWFrTWFwU3RvcmUgPSAodGFnID0gXCJrZXlcIiwgeyBsb25nTGl2ZWQgPSB0cnVlLCBrZXlTaGFwZSA9IHZvaWQgMCwgdmFsdWVTaGFwZSA9IHZvaWQgMCB9ID0ge30pID0+IHtcbiAgY29uc3QganNtYXAgPSBuZXcgKGxvbmdMaXZlZCA/IFdlYWtNYXAgOiBNYXApKCk7XG4gIGlmIChrZXlTaGFwZSAhPT0gdm9pZCAwKSB7XG4gICAgYXNzZXJ0UGF0dGVybihrZXlTaGFwZSk7XG4gIH1cbiAgaWYgKHZhbHVlU2hhcGUgIT09IHZvaWQgMCkge1xuICAgIGFzc2VydFBhdHRlcm4odmFsdWVTaGFwZSk7XG4gIH1cbiAgY29uc3QgYXNzZXJ0S1ZPa1RvU2V0ID0gKF9rZXksIHZhbHVlKSA9PiB7XG4gICAgaGFyZGVuKHZhbHVlKTtcbiAgICBhc3NlcnRQYXNzYWJsZSh2YWx1ZSk7XG4gICAgaWYgKHZhbHVlU2hhcGUgIT09IHZvaWQgMCkge1xuICAgICAgbXVzdE1hdGNoKHZhbHVlLCB2YWx1ZVNoYXBlLCBcIndlYWtNYXBTdG9yZSB2YWx1ZVwiKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGFzc2VydEtWT2tUb0FkZCA9IChrZXksIHZhbHVlKSA9PiB7XG4gICAgaGFyZGVuKGtleSk7XG4gICAgcGFzc1N0eWxlT2Yoa2V5KSA9PT0gXCJyZW1vdGFibGVcIiB8fCB0aHJvd1JlZGFjdGVkYE9ubHkgcmVtb3RhYmxlcyBjYW4gYmUga2V5cyBvZiBzY2FsYXIgV2Vha01hcFN0b3JlczogJHtrZXl9YDtcbiAgICBpZiAoa2V5U2hhcGUgIT09IHZvaWQgMCkge1xuICAgICAgbXVzdE1hdGNoKGtleSwga2V5U2hhcGUsIFwid2Vha01hcFN0b3JlIGtleVwiKTtcbiAgICB9XG4gICAgYXNzZXJ0S1ZPa1RvU2V0KGtleSwgdmFsdWUpO1xuICB9O1xuICByZXR1cm4gRmFyKGBzY2FsYXIgV2Vha01hcFN0b3JlIG9mICR7cXVvdGUodGFnKX1gLCB7XG4gICAgLi4ubWFrZVdlYWtNYXBTdG9yZU1ldGhvZHMoXG4gICAgICBqc21hcCxcbiAgICAgIGFzc2VydEtWT2tUb0FkZCxcbiAgICAgIGFzc2VydEtWT2tUb1NldCxcbiAgICAgIHZvaWQgMCxcbiAgICAgIHRhZ1xuICAgIClcbiAgfSk7XG59O1xuaGFyZGVuKG1ha2VTY2FsYXJXZWFrTWFwU3RvcmUpO1xuXG4vKiAuLi9zdG9yZS9zcmMvc3RvcmVzL3NjYWxhck1hcFN0b3JlLmpzKi9cbnZhciBtYWtlTWFwU3RvcmVNZXRob2RzID0gKGpzbWFwLCBhc3NlcnRLVk9rVG9BZGQsIGFzc2VydEtWT2tUb1NldCwgYXNzZXJ0S2V5T2tUb0RlbGV0ZSA9IHZvaWQgMCwgdGFnID0gXCJrZXlcIikgPT4ge1xuICBjb25zdCB7IGFzc2VydFVwZGF0ZU9uQWRkLCBhc3NlcnRVcGRhdGVPbkRlbGV0ZSwgaXRlcmFibGVLZXlzIH0gPSBtYWtlQ3VycmVudEtleXNLaXQoXG4gICAgKCkgPT4ganNtYXAua2V5cygpLFxuICAgIChrKSA9PiBqc21hcC5oYXMoayksXG4gICAgY29tcGFyZVJhbmssXG4gICAgYXNzZXJ0S1ZPa1RvQWRkLFxuICAgIGFzc2VydEtleU9rVG9EZWxldGUsXG4gICAgdGFnXG4gICk7XG4gIGNvbnN0IGtleXM4ID0gKGtleVBhdHQgPSB2b2lkIDAsIHZhbHVlUGF0dCA9IHZvaWQgMCkgPT4ge1xuICAgIGlmIChrZXlQYXR0ID09PSB2b2lkIDAgJiYgdmFsdWVQYXR0ID09PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiBpdGVyYWJsZUtleXM7XG4gICAgfVxuICAgIGNvbnN0IGZpbHRlciA9IChrKSA9PiB7XG4gICAgICBpZiAoa2V5UGF0dCAhPT0gdm9pZCAwICYmICFtYXRjaGVzKGssIGtleVBhdHQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZVBhdHQgIT09IHZvaWQgMCAmJiAhbWF0Y2hlcyhqc21hcC5nZXQoayksIHZhbHVlUGF0dCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICByZXR1cm4gZmlsdGVySXRlcmFibGUoaXRlcmFibGVLZXlzLCBmaWx0ZXIpO1xuICB9O1xuICBjb25zdCB2YWx1ZXM3ID0gKGtleVBhdHQgPSB2b2lkIDAsIHZhbHVlUGF0dCA9IHZvaWQgMCkgPT4gbWFwSXRlcmFibGUoa2V5czgoa2V5UGF0dCwgdmFsdWVQYXR0KSwgKGspID0+IChcbiAgICAvKiogQHR5cGUge1Z9ICovXG4gICAganNtYXAuZ2V0KGspXG4gICkpO1xuICBjb25zdCBlbnRyaWVzMTEgPSAoa2V5UGF0dCA9IHZvaWQgMCwgdmFsdWVQYXR0ID0gdm9pZCAwKSA9PiBtYXBJdGVyYWJsZShrZXlzOChrZXlQYXR0LCB2YWx1ZVBhdHQpLCAoaykgPT4gW1xuICAgIGssXG4gICAgLyoqIEB0eXBlIHtWfSAqL1xuICAgIGpzbWFwLmdldChrKVxuICBdKTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgLi4ubWFrZVdlYWtNYXBTdG9yZU1ldGhvZHMoXG4gICAgICBqc21hcCxcbiAgICAgIC8qKiBAdHlwZSB7KGs6IEssIHY6IFYpID0+IHZvaWR9ICovXG4gICAgICBhc3NlcnRVcGRhdGVPbkFkZCxcbiAgICAgIGFzc2VydEtWT2tUb1NldCxcbiAgICAgIGFzc2VydFVwZGF0ZU9uRGVsZXRlLFxuICAgICAgdGFnXG4gICAgKSxcbiAgICBrZXlzOiBrZXlzOCxcbiAgICB2YWx1ZXM6IHZhbHVlczcsXG4gICAgZW50cmllczogZW50cmllczExLFxuICAgIHNuYXBzaG90OiAoa2V5UGF0dCA9IHZvaWQgMCwgdmFsdWVQYXR0ID0gdm9pZCAwKSA9PiBtYWtlQ29weU1hcChlbnRyaWVzMTEoa2V5UGF0dCwgdmFsdWVQYXR0KSksXG4gICAgZ2V0U2l6ZTogKGtleVBhdHQgPSB2b2lkIDAsIHZhbHVlUGF0dCA9IHZvaWQgMCkgPT4ga2V5UGF0dCA9PT0gdm9pZCAwICYmIHZhbHVlUGF0dCA9PT0gdm9pZCAwID8ganNtYXAuc2l6ZSA6IFsuLi5rZXlzOChrZXlQYXR0LCB2YWx1ZVBhdHQpXS5sZW5ndGgsXG4gICAgY2xlYXI6IChrZXlQYXR0ID0gdm9pZCAwLCB2YWx1ZVBhdHQgPSB2b2lkIDApID0+IHtcbiAgICAgIGlmIChrZXlQYXR0ID09PSB2b2lkIDAgJiYgdmFsdWVQYXR0ID09PSB2b2lkIDApIHtcbiAgICAgICAganNtYXAuY2xlYXIoKTtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXM4KGtleVBhdHQsIHZhbHVlUGF0dCkpIHtcbiAgICAgICAganNtYXAuZGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG52YXIgbWFrZVNjYWxhck1hcFN0b3JlID0gKHRhZyA9IFwia2V5XCIsIHsga2V5U2hhcGUgPSB2b2lkIDAsIHZhbHVlU2hhcGUgPSB2b2lkIDAgfSA9IHt9KSA9PiB7XG4gIGNvbnN0IGpzbWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgaWYgKGtleVNoYXBlICE9PSB2b2lkIDApIHtcbiAgICBhc3NlcnRQYXR0ZXJuKGtleVNoYXBlKTtcbiAgfVxuICBpZiAodmFsdWVTaGFwZSAhPT0gdm9pZCAwKSB7XG4gICAgYXNzZXJ0UGF0dGVybih2YWx1ZVNoYXBlKTtcbiAgfVxuICBjb25zdCBhc3NlcnRLVk9rVG9TZXQgPSAoX2tleSwgdmFsdWUpID0+IHtcbiAgICBoYXJkZW4odmFsdWUpO1xuICAgIGFzc2VydFBhc3NhYmxlKHZhbHVlKTtcbiAgICBpZiAodmFsdWVTaGFwZSAhPT0gdm9pZCAwKSB7XG4gICAgICBtdXN0TWF0Y2godmFsdWUsIHZhbHVlU2hhcGUsIFwibWFwU3RvcmUgdmFsdWVcIik7XG4gICAgfVxuICB9O1xuICBjb25zdCBhc3NlcnRLVk9rVG9BZGQgPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgIGhhcmRlbihrZXkpO1xuICAgIGFzc2VydFNjYWxhcktleShrZXkpO1xuICAgIGlmIChrZXlTaGFwZSAhPT0gdm9pZCAwKSB7XG4gICAgICBtdXN0TWF0Y2goa2V5LCBrZXlTaGFwZSwgXCJtYXBTdG9yZSBrZXlcIik7XG4gICAgfVxuICAgIGFzc2VydEtWT2tUb1NldChrZXksIHZhbHVlKTtcbiAgfTtcbiAgcmV0dXJuIEZhcihgc2NhbGFyIE1hcFN0b3JlIG9mICR7cXVvdGUodGFnKX1gLCB7XG4gICAgLi4ubWFrZU1hcFN0b3JlTWV0aG9kcyhcbiAgICAgIGpzbWFwLFxuICAgICAgYXNzZXJ0S1ZPa1RvQWRkLFxuICAgICAgYXNzZXJ0S1ZPa1RvU2V0LFxuICAgICAgdm9pZCAwLFxuICAgICAgdGFnXG4gICAgKVxuICB9KTtcbn07XG5oYXJkZW4obWFrZVNjYWxhck1hcFN0b3JlKTtcblxuLyogLi4vc3RvcmUvc3JjL2xlZ2FjeS9sZWdhY3lNYXAuanMqL1xudmFyIG1ha2VMZWdhY3lNYXAgPSAodGFnID0gXCJrZXlcIikgPT4ge1xuICBjb25zdCBtMiA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGNvbnN0IGFzc2VydEtleURvZXNOb3RFeGlzdCA9IChrZXkpID0+ICFtMi5oYXMoa2V5KSB8fCB0aHJvd1JlZGFjdGVkYCR7cXVvdGUodGFnKX0gYWxyZWFkeSByZWdpc3RlcmVkOiAke2tleX1gO1xuICBjb25zdCBhc3NlcnRLZXlFeGlzdHMgPSAoa2V5KSA9PiBtMi5oYXMoa2V5KSB8fCB0aHJvd1JlZGFjdGVkYCR7cXVvdGUodGFnKX0gbm90IGZvdW5kOiAke2tleX1gO1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICBoYXM6IChrZXkpID0+IHtcbiAgICAgIHJldHVybiBtMi5oYXMoa2V5KTtcbiAgICB9LFxuICAgIGluaXQ6IChrZXksIHZhbHVlKSA9PiB7XG4gICAgICBhc3NlcnRLZXlEb2VzTm90RXhpc3Qoa2V5KTtcbiAgICAgIG0yLnNldChrZXksIHZhbHVlKTtcbiAgICB9LFxuICAgIGdldDogKGtleSkgPT4ge1xuICAgICAgYXNzZXJ0S2V5RXhpc3RzKGtleSk7XG4gICAgICByZXR1cm4gbTIuZ2V0KGtleSk7XG4gICAgfSxcbiAgICBzZXQ6IChrZXksIHZhbHVlKSA9PiB7XG4gICAgICBhc3NlcnRLZXlFeGlzdHMoa2V5KTtcbiAgICAgIG0yLnNldChrZXksIHZhbHVlKTtcbiAgICB9LFxuICAgIGRlbGV0ZTogKGtleSkgPT4ge1xuICAgICAgYXNzZXJ0S2V5RXhpc3RzKGtleSk7XG4gICAgICBtMi5kZWxldGUoa2V5KTtcbiAgICB9LFxuICAgIGtleXM6ICgpID0+IG0yLmtleXMoKSxcbiAgICB2YWx1ZXM6ICgpID0+IG0yLnZhbHVlcygpLFxuICAgIGVudHJpZXM6ICgpID0+IG0yLmVudHJpZXMoKSxcbiAgICBnZXRTaXplOiAoKSA9PiBtMi5zaXplLFxuICAgIGNsZWFyOiAoKSA9PiBtMi5jbGVhcigpXG4gIH0pO1xufTtcbmhhcmRlbihtYWtlTGVnYWN5TWFwKTtcblxuLyogLi4vc3RvcmUvc3JjL2xlZ2FjeS9sZWdhY3lXZWFrTWFwLmpzKi9cbnZhciBtYWtlTGVnYWN5V2Vha01hcCA9ICh0YWcgPSBcImtleVwiKSA9PiB7XG4gIGNvbnN0IHdtID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG4gIGNvbnN0IGFzc2VydEtleURvZXNOb3RFeGlzdCA9IChrZXkpID0+ICF3bS5oYXMoa2V5KSB8fCB0aHJvd1JlZGFjdGVkYCR7cXVvdGUodGFnKX0gYWxyZWFkeSByZWdpc3RlcmVkOiAke2tleX1gO1xuICBjb25zdCBhc3NlcnRLZXlFeGlzdHMgPSAoa2V5KSA9PiB3bS5oYXMoa2V5KSB8fCB0aHJvd1JlZGFjdGVkYCR7cXVvdGUodGFnKX0gbm90IGZvdW5kOiAke2tleX1gO1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICBoYXM6IChrZXkpID0+IHtcbiAgICAgIHJldHVybiB3bS5oYXMoa2V5KTtcbiAgICB9LFxuICAgIGluaXQ6IChrZXksIHZhbHVlKSA9PiB7XG4gICAgICBhc3NlcnRLZXlEb2VzTm90RXhpc3Qoa2V5KTtcbiAgICAgIHdtLnNldChrZXksIHZhbHVlKTtcbiAgICB9LFxuICAgIGdldDogKGtleSkgPT4ge1xuICAgICAgYXNzZXJ0S2V5RXhpc3RzKGtleSk7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAvKiogQHR5cGUge1Z9ICovXG4gICAgICAgIHdtLmdldChrZXkpXG4gICAgICApO1xuICAgIH0sXG4gICAgc2V0OiAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgYXNzZXJ0S2V5RXhpc3RzKGtleSk7XG4gICAgICB3bS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBkZWxldGU6IChrZXkpID0+IHtcbiAgICAgIGFzc2VydEtleUV4aXN0cyhrZXkpO1xuICAgICAgd20uZGVsZXRlKGtleSk7XG4gICAgfVxuICB9KTtcbn07XG5oYXJkZW4obWFrZUxlZ2FjeVdlYWtNYXApO1xuXG4vKiAuLi9zdG9yZS9zcmMvaW5kZXguanMqL1xudmFyIG11c3RNYXRjaDIgPSBtdXN0TWF0Y2g7XG5cbi8qIC4uL2Jhc2Utem9uZS9zcmMvbWFrZS1vbmNlLmpzKi9cbnZhciBkZWZhdWx0TGFiZWxUb0tleXMgPSAobGFiZWwpID0+IGhhcmRlbihbbGFiZWxdKTtcbmhhcmRlbihkZWZhdWx0TGFiZWxUb0tleXMpO1xudmFyIG1ha2VPbmNlS2l0ID0gKGRlYnVnTmFtZSwgc3RvcmVzLCBiYWNraW5nU3RvcmUgPSB2b2lkIDApID0+IHtcbiAgY29uc3QgdXNlZEtleXMgPSBzdG9yZXMuZGV0YWNoZWQoKS5zZXRTdG9yZShgJHtkZWJ1Z05hbWV9IHVzZWQga2V5c2ApO1xuICBjb25zdCBhc3NlcnRPbmx5T25jZSA9IChrZXkpID0+IHtcbiAgICB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiIHx8IHRocm93UmVkYWN0ZWRga2V5ICR7a2V5fSBtdXN0IGJlIGEgc3RyaW5nYDtcbiAgICAhdXNlZEtleXMuaGFzKGtleSkgfHwgdGhyb3dSZWRhY3RlZGBrZXkgJHtrZXl9IGhhcyBhbHJlYWR5IGJlZW4gdXNlZCBpbiB0aGlzIHpvbmUgYW5kIGluY2FybmF0aW9uYDtcbiAgICB1c2VkS2V5cy5hZGQoa2V5KTtcbiAgfTtcbiAgY29uc3Qgd3JhcFByb3ZpZGVyID0gKHByb3ZpZGVyLCBsYWJlbFRvS2V5cyA9IGRlZmF1bHRMYWJlbFRvS2V5cykgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIgPSAobGFiZWwsIC4uLnJlc3QpID0+IHtcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIGxhYmVsVG9LZXlzKGxhYmVsKSkge1xuICAgICAgICBhc3NlcnRPbmx5T25jZShrZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3ZpZGVyKGxhYmVsLCAuLi5yZXN0KTtcbiAgICB9O1xuICAgIHJldHVybiAoXG4gICAgICAvKiogQHR5cGUge1R9ICovXG4gICAgICB3cmFwcGVyXG4gICAgKTtcbiAgfTtcbiAgY29uc3QgbWFrZU9uY2UgPSAoa2V5LCBtYWtlcikgPT4ge1xuICAgIGFzc2VydE9ubHlPbmNlKGtleSk7XG4gICAgaWYgKGJhY2tpbmdTdG9yZSAmJiBiYWNraW5nU3RvcmUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBiYWNraW5nU3RvcmUuZ2V0KGtleSk7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gbWFrZXIoa2V5KTtcbiAgICBzdG9yZXMuaXNTdG9yYWJsZSh2YWx1ZSkgfHwgdGhyb3dSZWRhY3RlZGBtYWtlciByZXR1cm4gdmFsdWUgJHt2YWx1ZX0gaXMgbm90IHN0b3JhYmxlYDtcbiAgICBiYWNraW5nU3RvcmUgJiYgYmFja2luZ1N0b3JlLmluaXQoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuICByZXR1cm4gaGFyZGVuKHsgbWFrZU9uY2UsIHdyYXBQcm92aWRlciB9KTtcbn07XG5oYXJkZW4obWFrZU9uY2VLaXQpO1xuXG4vKiAuLi9iYXNlLXpvbmUvc3JjL2tleXMuanMqL1xudmFyIGtpbmQgPSAobGFiZWwpID0+IGAke2xhYmVsfV9raW5kSGFuZGxlYDtcbnZhciBzaW5nbGV0b24gPSAobGFiZWwpID0+IGAke2xhYmVsfV9zaW5nbGV0b25gO1xudmFyIGFnb3JpY1ZhdERhdGFLZXlzID0ge1xuICBleG9DbGFzczogKGxhYmVsKSA9PiBoYXJkZW4oW2tpbmQobGFiZWwpXSksXG4gIGV4b0NsYXNzS2l0OiAobGFiZWwpID0+IGhhcmRlbihba2luZChsYWJlbCldKSxcbiAgZXhvOiAobGFiZWwpID0+IGhhcmRlbihba2luZChsYWJlbCksIHNpbmdsZXRvbihsYWJlbCldKSxcbiAgc3RvcmU6IChsYWJlbCkgPT4gaGFyZGVuKFtsYWJlbF0pLFxuICB6b25lOiAobGFiZWwpID0+IGhhcmRlbihbbGFiZWxdKVxufTtcbmhhcmRlbihhZ29yaWNWYXREYXRhS2V5cyk7XG5cbi8qIC4uL2Jhc2Utem9uZS9zcmMvd2F0Y2gtcHJvbWlzZS5qcyovXG52YXIgeyBhcHBseTogYXBwbHk2IH0gPSBSZWZsZWN0O1xudmFyIFByb21pc2VXYXRjaGVySGFuZGxlciA9IE0uY2FsbChNLnJhdygpKS5yZXN0KE0ucmF3KCkpLnJldHVybnMoKTtcbnZhciBQcm9taXNlV2F0Y2hlckkgPSBNLmludGVyZmFjZShcIlByb21pc2VXYXRjaGVyXCIsIHtcbiAgb25GdWxmaWxsZWQ6IFByb21pc2VXYXRjaGVySGFuZGxlcixcbiAgb25SZWplY3RlZDogUHJvbWlzZVdhdGNoZXJIYW5kbGVyXG59KTtcbnZhciBQcm9taXNlV2F0Y2hlckZ1bGZpbGxlZEkgPSBNLmludGVyZmFjZShcIlByb21pc2VXYXRjaGVyRnVsZmlsbGVkXCIsIHtcbiAgb25GdWxmaWxsZWQ6IFByb21pc2VXYXRjaGVySGFuZGxlclxufSk7XG52YXIgUHJvbWlzZVdhdGNoZXJSZWplY3RlZEkgPSBNLmludGVyZmFjZShcIlByb21pc2VXYXRjaGVyUmVqZWN0ZWRcIiwge1xuICBvblJlamVjdGVkOiBQcm9taXNlV2F0Y2hlckhhbmRsZXJcbn0pO1xudmFyIGNhbGxNZU1heWJlID0gKHRoYXQsIHByb3AsIHBvc3RBcmdzKSA9PiB7XG4gIGNvbnN0IGZuID0gdGhhdFtwcm9wXTtcbiAgaWYgKCFmbikge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgYXNzZXJ0LnR5cGVvZihmbiwgXCJmdW5jdGlvblwiKTtcbiAgY29uc3Qgd3JhcHBlZCA9IChhcmcpID0+IHtcbiAgICBhcHBseTYoZm4sIHRoYXQsIFthcmcsIC4uLnBvc3RBcmdzXSk7XG4gIH07XG4gIHJldHVybiB3cmFwcGVkO1xufTtcbnZhciB3YXRjaFByb21pc2UgPSAocDMsIHdhdGNoZXIsIC4uLndhdGNoZXJBcmdzKSA9PiB7XG4gIFByb21pc2UucmVzb2x2ZShwMykgPT09IHAzIHx8IHRocm93UmVkYWN0ZWRgd2F0Y2hQcm9taXNlIG9ubHkgd2F0Y2hlcyBwcm9taXNlc2A7XG4gIGNvbnN0IG9uRnVsZmlsbGVkID0gY2FsbE1lTWF5YmUod2F0Y2hlciwgXCJvbkZ1bGZpbGxlZFwiLCB3YXRjaGVyQXJncyk7XG4gIGNvbnN0IG9uUmVqZWN0ZWQgPSBjYWxsTWVNYXliZSh3YXRjaGVyLCBcIm9uUmVqZWN0ZWRcIiwgd2F0Y2hlckFyZ3MpO1xuICBvbkZ1bGZpbGxlZCB8fCBvblJlamVjdGVkIHx8IHRocm93UmVkYWN0ZWRgcHJvbWlzZSB3YXRjaGVyIG11c3QgaW1wbGVtZW50IGF0IGxlYXN0IG9uZSBoYW5kbGVyIG1ldGhvZGA7XG4gIHZvaWQgRS53aGVuKHAzLCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG59O1xuaGFyZGVuKHdhdGNoUHJvbWlzZSk7XG5cbi8qIC4uL2Jhc2Utem9uZS9zcmMvaGVhcC5qcyovXG52YXIgZGV0YWNoZWRIZWFwU3RvcmVzID0gRmFyKFwiaGVhcFN0b3Jlc1wiLCB7XG4gIGRldGFjaGVkOiAoKSA9PiBkZXRhY2hlZEhlYXBTdG9yZXMsXG4gIGlzU3RvcmFibGU6IGlzUGFzc2FibGUsXG4gIHNldFN0b3JlOiBtYWtlU2NhbGFyU2V0U3RvcmUsXG4gIG1hcFN0b3JlOiBtYWtlU2NhbGFyTWFwU3RvcmUsXG4gIHdlYWtNYXBTdG9yZTogbWFrZVNjYWxhcldlYWtNYXBTdG9yZSxcbiAgd2Vha1NldFN0b3JlOiBtYWtlU2NhbGFyV2Vha1NldFN0b3JlXG59KTtcbnZhciBtYWtlSGVhcFpvbmUgPSAoYmFzZUxhYmVsID0gXCJoZWFwWm9uZVwiKSA9PiB7XG4gIGNvbnN0IHsgbWFrZU9uY2UsIHdyYXBQcm92aWRlciB9ID0gbWFrZU9uY2VLaXQoYmFzZUxhYmVsLCBkZXRhY2hlZEhlYXBTdG9yZXMpO1xuICBjb25zdCBtYWtlU3ViWm9uZSA9IChsYWJlbCwgX29wdGlvbnMpID0+IG1ha2VIZWFwWm9uZShgJHtiYXNlTGFiZWx9LiR7bGFiZWx9YCk7XG4gIHJldHVybiBGYXIoXCJoZWFwWm9uZVwiLCB7XG4gICAgZXhvOiB3cmFwUHJvdmlkZXIobWFrZUV4bywgYWdvcmljVmF0RGF0YUtleXMuZXhvKSxcbiAgICBleG9DbGFzczogd3JhcFByb3ZpZGVyKGRlZmluZUV4b0NsYXNzLCBhZ29yaWNWYXREYXRhS2V5cy5leG9DbGFzcyksXG4gICAgZXhvQ2xhc3NLaXQ6IHdyYXBQcm92aWRlcihkZWZpbmVFeG9DbGFzc0tpdCwgYWdvcmljVmF0RGF0YUtleXMuZXhvQ2xhc3NLaXQpLFxuICAgIHN1YlpvbmU6IHdyYXBQcm92aWRlcihtYWtlU3ViWm9uZSksXG4gICAgbWFrZU9uY2UsXG4gICAgd2F0Y2hQcm9taXNlLFxuICAgIGRldGFjaGVkOiBkZXRhY2hlZEhlYXBTdG9yZXMuZGV0YWNoZWQsXG4gICAgaXNTdG9yYWJsZTogZGV0YWNoZWRIZWFwU3RvcmVzLmlzU3RvcmFibGUsXG4gICAgbWFwU3RvcmU6IHdyYXBQcm92aWRlcihkZXRhY2hlZEhlYXBTdG9yZXMubWFwU3RvcmUpLFxuICAgIHNldFN0b3JlOiB3cmFwUHJvdmlkZXIoZGV0YWNoZWRIZWFwU3RvcmVzLnNldFN0b3JlKSxcbiAgICB3ZWFrTWFwU3RvcmU6IHdyYXBQcm92aWRlcihkZXRhY2hlZEhlYXBTdG9yZXMud2Vha01hcFN0b3JlKSxcbiAgICB3ZWFrU2V0U3RvcmU6IHdyYXBQcm92aWRlcihkZXRhY2hlZEhlYXBTdG9yZXMud2Vha1NldFN0b3JlKVxuICB9KTtcbn07XG5oYXJkZW4obWFrZUhlYXBab25lKTtcblxuLyogLi4vaW50ZXJuYWwvc3JjL2NhbGxiYWNrLmpzKi9cbnZhciB7IGZyb21FbnRyaWVzOiBmcm9tRW50cmllczkgfSA9IE9iamVjdDtcbnZhciB7IG93bktleXM6IHJhd093bktleXMgfSA9IFJlZmxlY3Q7XG52YXIgb3duS2V5czIwID0gKFxuICAvKiogQHR5cGUgezxUIGV4dGVuZHMgUHJvcGVydHlLZXk+KG9iajogeyBbSyBpbiBUXT86IHVua25vd24gfSkgPT4gVFtdfSAqL1xuICByYXdPd25LZXlzXG4pO1xudmFyIGlzUHJvcGVydHlLZXkgPSAoa2V5KSA9PiB7XG4gIHN3aXRjaCAodHlwZW9mIGtleSkge1xuICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcbnZhciBjYWxsU3luYyA9IChjYWxsYmFjaywgLi4uYXJncykgPT4ge1xuICBjb25zdCB7IHRhcmdldCwgbWV0aG9kTmFtZSwgYm91bmQgfSA9IGNhbGxiYWNrO1xuICBpZiAobWV0aG9kTmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIHRhcmdldCguLi5ib3VuZCwgLi4uYXJncyk7XG4gIH1cbiAgcmV0dXJuIHRhcmdldFttZXRob2ROYW1lXSguLi5ib3VuZCwgLi4uYXJncyk7XG59O1xuaGFyZGVuKGNhbGxTeW5jKTtcbnZhciBjYWxsRSA9IChjYWxsYmFjaywgLi4uYXJncykgPT4ge1xuICBjb25zdCB7IHRhcmdldCwgbWV0aG9kTmFtZSwgYm91bmQgfSA9IGNhbGxiYWNrO1xuICBpZiAobWV0aG9kTmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIEUodGFyZ2V0KSguLi5ib3VuZCwgLi4uYXJncyk7XG4gIH1cbiAgcmV0dXJuIEUodGFyZ2V0KVttZXRob2ROYW1lXSguLi5ib3VuZCwgLi4uYXJncyk7XG59O1xuaGFyZGVuKGNhbGxFKTtcbnZhciBtYWtlU3luY0Z1bmN0aW9uQ2FsbGJhY2sgPSAodGFyZ2V0LCAuLi5ib3VuZCkgPT4ge1xuICB0eXBlb2YgdGFyZ2V0ID09PSBcImZ1bmN0aW9uXCIgfHwgdGhyb3dSZWRhY3RlZGBzeW5jIGZ1bmN0aW9uIGNhbGxiYWNrIHRhcmdldCBtdXN0IGJlIGEgZnVuY3Rpb246ICR7dGFyZ2V0fWA7XG4gIGNvbnN0IGNiID0gaGFyZGVuKHsgdGFyZ2V0LCBib3VuZCwgaXNTeW5jOiB0cnVlIH0pO1xuICByZXR1cm4gKFxuICAgIC8qKiBAdHlwZSB7U3luY0NhbGxiYWNrPEk+fSAqL1xuICAgIGNiXG4gICk7XG59O1xuaGFyZGVuKG1ha2VTeW5jRnVuY3Rpb25DYWxsYmFjayk7XG52YXIgbWFrZUZ1bmN0aW9uQ2FsbGJhY2sgPSAodGFyZ2V0LCAuLi5ib3VuZCkgPT4ge1xuICAhaXNQcmltaXRpdmUyKHRhcmdldCkgfHwgdGhyb3dSZWRhY3RlZGBmdW5jdGlvbiBjYWxsYmFjayB0YXJnZXQgbXVzdCBiZSBhIGZ1bmN0aW9uIHByZXNlbmNlOiAke3RhcmdldH1gO1xuICBjb25zdCBjYiA9IGhhcmRlbih7IHRhcmdldCwgYm91bmQgfSk7XG4gIHJldHVybiAoXG4gICAgLyoqIEB0eXBlIHtDYWxsYmFjazxJPn0gKi9cbiAgICBjYlxuICApO1xufTtcbmhhcmRlbihtYWtlRnVuY3Rpb25DYWxsYmFjayk7XG52YXIgbWFrZVN5bmNNZXRob2RDYWxsYmFjayA9ICh0YXJnZXQsIG1ldGhvZE5hbWUsIC4uLmJvdW5kKSA9PiB7XG4gICFpc1ByaW1pdGl2ZTIodGFyZ2V0KSB8fCB0aHJvd1JlZGFjdGVkYHN5bmMgbWV0aG9kIGNhbGxiYWNrIHRhcmdldCBtdXN0IGJlIGFuIG9iamVjdDogJHt0YXJnZXR9YDtcbiAgdHlwZW9mIG1ldGhvZE5hbWUgPT09IFwic3RyaW5nXCIgfHwgaXNQYXNzYWJsZVN5bWJvbChtZXRob2ROYW1lKSB8fCB0aHJvd1JlZGFjdGVkYG1ldGhvZCBuYW1lIG11c3QgYmUgYSBzdHJpbmcgb3IgcGFzc2FibGUgc3ltYm9sOiAke21ldGhvZE5hbWV9YDtcbiAgY29uc3QgY2IgPSBoYXJkZW4oeyB0YXJnZXQsIG1ldGhvZE5hbWUsIGJvdW5kLCBpc1N5bmM6IHRydWUgfSk7XG4gIHJldHVybiAoXG4gICAgLyoqIEB0eXBlIHtTeW5jQ2FsbGJhY2s8ST59ICovXG4gICAgY2JcbiAgKTtcbn07XG5oYXJkZW4obWFrZVN5bmNNZXRob2RDYWxsYmFjayk7XG52YXIgbWFrZU1ldGhvZENhbGxiYWNrID0gKHRhcmdldCwgbWV0aG9kTmFtZSwgLi4uYm91bmQpID0+IHtcbiAgIWlzUHJpbWl0aXZlMih0YXJnZXQpIHx8IHRocm93UmVkYWN0ZWRgbWV0aG9kIGNhbGxiYWNrIHRhcmdldCBtdXN0IGJlIGFuIG9iamVjdDogJHt0YXJnZXR9YDtcbiAgdHlwZW9mIG1ldGhvZE5hbWUgPT09IFwic3RyaW5nXCIgfHwgaXNQYXNzYWJsZVN5bWJvbChtZXRob2ROYW1lKSB8fCB0aHJvd1JlZGFjdGVkYG1ldGhvZCBuYW1lIG11c3QgYmUgYSBzdHJpbmcgb3IgcGFzc2FibGUgc3ltYm9sOiAke21ldGhvZE5hbWV9YDtcbiAgY29uc3QgY2IgPSBoYXJkZW4oeyB0YXJnZXQsIG1ldGhvZE5hbWUsIGJvdW5kIH0pO1xuICByZXR1cm4gKFxuICAgIC8qKiBAdHlwZSB7Q2FsbGJhY2s8ST59ICovXG4gICAgY2JcbiAgKTtcbn07XG5oYXJkZW4obWFrZU1ldGhvZENhbGxiYWNrKTtcbnZhciBpc0NhbGxiYWNrID0gKGNhbGxiYWNrKSA9PiB7XG4gIGlmIChpc1ByaW1pdGl2ZTIoY2FsbGJhY2spKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHsgdGFyZ2V0LCBtZXRob2ROYW1lLCBib3VuZCB9ID0gY2FsbGJhY2s7XG4gIHJldHVybiAhaXNQcmltaXRpdmUyKHRhcmdldCkgJiYgKG1ldGhvZE5hbWUgPT09IHZvaWQgMCB8fCB0eXBlb2YgbWV0aG9kTmFtZSA9PT0gXCJzdHJpbmdcIiB8fCBpc1Bhc3NhYmxlU3ltYm9sKG1ldGhvZE5hbWUpKSAmJiBBcnJheS5pc0FycmF5KGJvdW5kKTtcbn07XG5oYXJkZW4oaXNDYWxsYmFjayk7XG52YXIgcHJlcGFyZUF0dGVudWF0b3IgPSAoem9uZSwgbWV0aG9kTmFtZXMsIHsgaW50ZXJmYWNlR3VhcmQsIHRhZyA9IFwiQXR0ZW51YXRvclwiIH0gPSB7fSkgPT4ge1xuICBjb25zdCBtZXRob2RzID0gKFxuICAgIC8qKiBAdHlwZSB7TWV0aG9kc30gKi9cbiAgICBmcm9tRW50cmllczkoXG4gICAgICBtZXRob2ROYW1lcy5tYXAoKGtleSkgPT4ge1xuICAgICAgICBpZiAoIWlzUHJvcGVydHlLZXkoa2V5KSkge1xuICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRga2V5ICR7cXVvdGUoa2V5KX0gaXMgbm90IGEgUHJvcGVydHlLZXlgO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG0yID0gKFxuICAgICAgICAgIC8qKiBAdHlwZSB7TWV0aG9kc30gKi9cbiAgICAgICAgICB7XG4gICAgICAgICAgICAvKiBFeHBsaWNpdGx5IHVzZSBjb25jaXNlIG1ldGhvZCBzeW50YXggdG8gcHJlc2VydmUgYHRoaXNgIGJ1dCBwcmV2ZW50Ki9cbiAgICAgICAgICAgIC8qIGNvbnN0cnVjdG9yIGJlaGF2aW9yLiovXG4gICAgICAgICAgICAvKiogQHR5cGUge01ldGhvZH0gKi9cbiAgICAgICAgICAgIFtrZXldKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgY29uc3QgY2IgPSB0aGlzLnN0YXRlLmNic1trZXldO1xuICAgICAgICAgICAgICBpZiAoIWNiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyID0gbWFrZUVycm9yKGB1bmltcGxlbWVudGVkICR7cXVvdGUodGFnKX0gbWV0aG9kICR7cXVvdGUoa2V5KX1gKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5pc1N5bmMpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGNiLmlzU3luYykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsU3luYyhjYiwgLi4uYXJncyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxFKGNiLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9W2tleV1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAvKiogQHR5cGUge2NvbnN0fSAqL1xuICAgICAgICAgIFtrZXksIG0yXVxuICAgICAgICApO1xuICAgICAgfSlcbiAgICApXG4gICk7XG4gIGNvbnN0IG1ha2VBdHRlbnVhdG9yID0gem9uZS5leG9DbGFzcyhcbiAgICB0YWcsXG4gICAgaW50ZXJmYWNlR3VhcmQsXG4gICAgLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0c1xuICogQHBhcmFtIHthbnl9IFtvcHRzLnRhcmdldF1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuaXNTeW5jXVxuICogQHBhcmFtIHtPdmVycmlkZXN9IFtvcHRzLm92ZXJyaWRlc11cbiAqL1xuICAgICh7XG4gICAgICB0YXJnZXQgPSBudWxsLFxuICAgICAgaXNTeW5jID0gZmFsc2UsXG4gICAgICBvdmVycmlkZXMgPSAoXG4gICAgICAgIC8qKiBAdHlwZSB7T3ZlcnJpZGVzfSAqL1xuICAgICAgICB7fVxuICAgICAgKVxuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IGNicyA9IChcbiAgICAgICAgLyoqIEB0eXBlIHtPdmVycmlkZXN9ICovXG4gICAgICAgIHt9XG4gICAgICApO1xuICAgICAgY29uc3QgcmVtYWluaW5nID0gbmV3IFNldChtZXRob2ROYW1lcyk7XG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBvd25LZXlzMjAob3ZlcnJpZGVzKSkge1xuICAgICAgICByZW1haW5pbmcuaGFzKGtleSkgfHwgdGhyb3dSZWRhY3RlZGAke3F1b3RlKHRhZyl9IG92ZXJyaWRlc1ske3F1b3RlKGtleSl9XSBub3QgYWxsb3dlZCBieSBtZXRob2ROYW1lc2A7XG4gICAgICAgIHJlbWFpbmluZy5kZWxldGUoa2V5KTtcbiAgICAgICAgY29uc3QgY2IgPSBvdmVycmlkZXNba2V5XTtcbiAgICAgICAgY2IgPT0gbnVsbCB8fCBpc0NhbGxiYWNrKGNiKSB8fCB0aHJvd1JlZGFjdGVkYCR7cXVvdGUodGFnKX0gb3ZlcnJpZGVzWyR7cXVvdGUoa2V5KX1dIGlzIG5vdCBhIGNhbGxiYWNrOyBnb3QgJHtjYn1gO1xuICAgICAgICBjYnNba2V5XSA9IGNiO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBrZXkgb2YgcmVtYWluaW5nKSB7XG4gICAgICAgIGlmIChpc1N5bmMpIHtcbiAgICAgICAgICBjYnNba2V5XSA9IG1ha2VTeW5jTWV0aG9kQ2FsbGJhY2sodGFyZ2V0LCBrZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNic1trZXldID0gbWFrZU1ldGhvZENhbGxiYWNrKHRhcmdldCwga2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhcmRlbih7IGNicywgaXNTeW5jIH0pO1xuICAgIH0sXG4gICAgLyoqIEB0eXBlIHtNZXRob2RzfSAqL1xuICAgIG1ldGhvZHNcbiAgKTtcbiAgcmV0dXJuIG1ha2VBdHRlbnVhdG9yO1xufTtcbmhhcmRlbihwcmVwYXJlQXR0ZW51YXRvcik7XG52YXIgcHJlcGFyZUd1YXJkZWRBdHRlbnVhdG9yID0gKHpvbmUsIGludGVyZmFjZUd1YXJkLCBvcHRzID0ge30pID0+IHtcbiAgY29uc3QgbWV0aG9kTmFtZXMgPSBnZXRJbnRlcmZhY2VNZXRob2RLZXlzKGludGVyZmFjZUd1YXJkKTtcbiAgY29uc3QgbWFrZUF0dGVudWF0b3IgPSBwcmVwYXJlQXR0ZW51YXRvcih6b25lLCBtZXRob2ROYW1lcywge1xuICAgIC4uLm9wdHMsXG4gICAgaW50ZXJmYWNlR3VhcmRcbiAgfSk7XG4gIHJldHVybiAoXG4gICAgLyoqIEB0eXBlIHtNYWtlQXR0ZW51YXRvcjxhbnk+fSAqL1xuICAgIG1ha2VBdHRlbnVhdG9yXG4gICk7XG59O1xuaGFyZGVuKHByZXBhcmVHdWFyZGVkQXR0ZW51YXRvcik7XG5cbi8qIC4uL2ludGVybmFsL3NyYy9saWItY2hhaW5TdG9yYWdlLmpzKi9cbnZhciBTdHJlYW1DZWxsU2hhcGUgPSBoYXJkZW4oe1xuICBibG9ja0hlaWdodDogTS5zdHJpbmcoKSxcbiAgdmFsdWVzOiBNLmFycmF5KClcbn0pO1xudmFyIENoYWluU3RvcmFnZU5vZGVJID0gTS5pbnRlcmZhY2UoXCJTdG9yYWdlTm9kZVwiLCB7XG4gIHNldFZhbHVlOiBNLmNhbGxXaGVuKE0uc3RyaW5nKCkpLnJldHVybnMoKSxcbiAgZ2V0UGF0aDogTS5jYWxsKCkucmV0dXJucyhNLnN0cmluZygpKSxcbiAgZ2V0U3RvcmVLZXk6IE0uY2FsbFdoZW4oKS5yZXR1cm5zKE0ucmVjb3JkKCkpLFxuICBtYWtlQ2hpbGROb2RlOiBNLmNhbGwoTS5zdHJpbmcoKSkub3B0aW9uYWwoTS5zcGxpdFJlY29yZCh7fSwgeyBzZXF1ZW5jZTogTS5ib29sZWFuKCkgfSwge30pKS5yZXR1cm5zKE0ucmVtb3RhYmxlKFwiU3RvcmFnZU5vZGVcIikpXG59KTtcbnZhciBpc1N0cmVhbUNlbGwgPSAoY2VsbCkgPT4gY2VsbCAmJiB0eXBlb2YgY2VsbCA9PT0gXCJvYmplY3RcIiAmJiBBcnJheS5pc0FycmF5KGNlbGwudmFsdWVzKSAmJiB0eXBlb2YgY2VsbC5ibG9ja0hlaWdodCA9PT0gXCJzdHJpbmdcIiAmJiAvXjAkfF5bMS05XVswLTldKiQvLnRlc3QoY2VsbC5ibG9ja0hlaWdodCk7XG5oYXJkZW4oaXNTdHJlYW1DZWxsKTtcbnZhciBwYXRoU2VnbWVudFBhdHRlcm4gPSAvXlthLXpBLVowLTlfLV17MSwxMDB9JC87XG52YXIgYXNzZXJ0UGF0aFNlZ21lbnQgPSAobmFtZSkgPT4ge1xuICBwYXRoU2VnbWVudFBhdHRlcm4udGVzdChuYW1lKSB8fCB0aHJvd1JlZGFjdGVkYFBhdGggc2VnbWVudCBuYW1lcyBtdXN0IGNvbnNpc3Qgb2YgMSB0byAxMDAgY2hhcmFjdGVycyBsaW1pdGVkIHRvIEFTQ0lJIGFscGhhbnVtZXJpY3MsIHVuZGVyc2NvcmVzLCBhbmQvb3IgZGFzaGVzOiAke25hbWV9YDtcbn07XG5oYXJkZW4oYXNzZXJ0UGF0aFNlZ21lbnQpO1xudmFyIHByZXBhcmVDaGFpblN0b3JhZ2VOb2RlID0gKHpvbmUpID0+IHtcbiAgY29uc3QgbWFrZUNoYWluU3RvcmFnZU5vZGUgPSB6b25lLmV4b0NsYXNzKFxuICAgIFwiQ2hhaW5TdG9yYWdlTm9kZVwiLFxuICAgIENoYWluU3RvcmFnZU5vZGVJLFxuICAgIC8qKlxuICogQHBhcmFtIHtJTVBPUlQoJy4vdHlwZXMuanMnKS5DYWxsYmFjazxcbiAqICAgKG1lc3NhZ2U6IFN0b3JhZ2VNZXNzYWdlKSA9PiBhbnlcbiAqID59IG1lc3NlbmdlclxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuc2VxdWVuY2VdXG4gKi9cbiAgICAobWVzc2VuZ2VyLCBwYXRoLCB7IHNlcXVlbmNlID0gZmFsc2UgfSA9IHt9KSA9PiB7XG4gICAgICBhc3NlcnQudHlwZW9mKHBhdGgsIFwic3RyaW5nXCIpO1xuICAgICAgYXNzZXJ0LnR5cGVvZihzZXF1ZW5jZSwgXCJib29sZWFuXCIpO1xuICAgICAgcmV0dXJuIGhhcmRlbih7IHBhdGgsIG1lc3Nlbmdlciwgc2VxdWVuY2UgfSk7XG4gICAgfSxcbiAgICB7XG4gICAgICBnZXRQYXRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5wYXRoO1xuICAgICAgfSxcbiAgICAgIC8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIGdldFBhdGhcbiAqIEB0eXBlIHsoKSA9PiBQcm9taXNlPFZTdG9yYWdlS2V5Pn1cbiAqL1xuICAgICAgYXN5bmMgZ2V0U3RvcmVLZXkoKSB7XG4gICAgICAgIGNvbnN0IHsgcGF0aCwgbWVzc2VuZ2VyIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICByZXR1cm4gY2FsbEUobWVzc2VuZ2VyLCB7XG4gICAgICAgICAgbWV0aG9kOiBcImdldFN0b3JlS2V5XCIsXG4gICAgICAgICAgYXJnczogW3BhdGhdXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIC8qKlxuICogQHR5cGUgeyhcbiAqICAgbmFtZTogc3RyaW5nLFxuICogICBjaGlsZE5vZGVPcHRpb25zPzogeyBzZXF1ZW5jZT86IGJvb2xlYW4gfSxcbiAqICkgPT4gU3RvcmFnZU5vZGV9XG4gKi9cbiAgICAgIG1ha2VDaGlsZE5vZGUobmFtZSwgY2hpbGROb2RlT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHsgc2VxdWVuY2UsIHBhdGgsIG1lc3NlbmdlciB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgYXNzZXJ0UGF0aFNlZ21lbnQobmFtZSk7XG4gICAgICAgIGNvbnN0IG1lcmdlZE9wdGlvbnMgPSB7IHNlcXVlbmNlLCAuLi5jaGlsZE5vZGVPcHRpb25zIH07XG4gICAgICAgIHJldHVybiBtYWtlQ2hhaW5TdG9yYWdlTm9kZShcbiAgICAgICAgICBtZXNzZW5nZXIsXG4gICAgICAgICAgYCR7cGF0aH0uJHtuYW1lfWAsXG4gICAgICAgICAgbWVyZ2VkT3B0aW9uc1xuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIC8qKiBAdHlwZSB7KHZhbHVlOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD59ICovXG4gICAgICBhc3luYyBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCB7IHNlcXVlbmNlLCBwYXRoLCBtZXNzZW5nZXIgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGFzc2VydC50eXBlb2YodmFsdWUsIFwic3RyaW5nXCIpO1xuICAgICAgICBsZXQgZW50cnk7XG4gICAgICAgIGlmICghc2VxdWVuY2UgJiYgIXZhbHVlKSB7XG4gICAgICAgICAgZW50cnkgPSBbcGF0aF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW50cnkgPSBbcGF0aCwgdmFsdWVdO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IGNhbGxFKG1lc3Nlbmdlciwge1xuICAgICAgICAgIG1ldGhvZDogc2VxdWVuY2UgPyBcImFwcGVuZFwiIDogXCJzZXRcIixcbiAgICAgICAgICBhcmdzOiBbZW50cnldXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLyogUG9zc2libGUgZXh0ZW5zaW9uczoqL1xuICAgICAgLyogKiBnZXRWYWx1ZSgpKi9cbiAgICAgIC8qICogZ2V0Q2hpbGROYW1lcygpIGFuZC9vciBtYWtlQ2hpbGROb2RlcygpKi9cbiAgICAgIC8qICogZ2V0TmFtZSgpKi9cbiAgICAgIC8qICogcmVjdXJzaXZlIGRlbGV0ZSovXG4gICAgICAvKiAqIGJhdGNoIG9wZXJhdGlvbnMqL1xuICAgICAgLyogKiBsb2NhbCBidWZmZXJpbmcgKHdpdGggZW5kLW9mLWJsb2NrIGNvbW1pdCkqL1xuICAgIH1cbiAgKTtcbiAgcmV0dXJuIG1ha2VDaGFpblN0b3JhZ2VOb2RlO1xufTtcbnZhciBtYWtlSGVhcENoYWluU3RvcmFnZU5vZGUgPSBwcmVwYXJlQ2hhaW5TdG9yYWdlTm9kZShtYWtlSGVhcFpvbmUoKSk7XG5mdW5jdGlvbiBtYWtlQ2hhaW5TdG9yYWdlUm9vdChoYW5kbGVTdG9yYWdlTWVzc2FnZSwgcm9vdFBhdGgsIHJvb3RPcHRpb25zID0ge30pIHtcbiAgY29uc3QgbWVzc2VuZ2VyID0gbWFrZUZ1bmN0aW9uQ2FsbGJhY2soaGFuZGxlU3RvcmFnZU1lc3NhZ2UpO1xuICBjb25zdCByb290Tm9kZSA9IG1ha2VIZWFwQ2hhaW5TdG9yYWdlTm9kZShtZXNzZW5nZXIsIHJvb3RQYXRoLCByb290T3B0aW9ucyk7XG4gIHJldHVybiByb290Tm9kZTtcbn1cbnZhciBtYWtlTnVsbFN0b3JhZ2VOb2RlID0gKCkgPT4ge1xuICByZXR1cm4gbWFrZUNoYWluU3RvcmFnZVJvb3QoXG4gICAgRmFyKFwiTnVsbE1lc3NlbmdlclwiLCAoKSA9PiBudWxsKSxcbiAgICBcIm51bGxcIlxuICApO1xufTtcbmFzeW5jIGZ1bmN0aW9uIG1ha2VTdG9yYWdlTm9kZUNoaWxkKHN0b3JhZ2VOb2RlUmVmLCBjaGlsZE5hbWUpIHtcbiAgY29uc3QgZXhpc3RpbmdTdG9yYWdlTm9kZSA9IGF3YWl0IHN0b3JhZ2VOb2RlUmVmO1xuICBjb25zdCBzdG9yYWdlTm9kZSA9IGV4aXN0aW5nU3RvcmFnZU5vZGUgfHwgbWFrZU51bGxTdG9yYWdlTm9kZSgpO1xuICByZXR1cm4gRShzdG9yYWdlTm9kZSkubWFrZUNoaWxkTm9kZShjaGlsZE5hbWUpO1xufVxuaGFyZGVuKG1ha2VTdG9yYWdlTm9kZUNoaWxkKTtcbnZhciBtYWtlU2VyaWFsaXplVG9TdG9yYWdlID0gKHN0b3JhZ2VOb2RlLCBtYXJzaGFsbGVyKSA9PiB7XG4gIHJldHVybiBhc3luYyAodmFsdWUpID0+IHtcbiAgICBjb25zdCBtYXJzaGFsbGVkID0gYXdhaXQgRShtYXJzaGFsbGVyKS50b0NhcERhdGEodmFsdWUpO1xuICAgIGNvbnN0IHNlcmlhbGl6ZWQgPSBKU09OLnN0cmluZ2lmeShtYXJzaGFsbGVkKTtcbiAgICByZXR1cm4gRShzdG9yYWdlTm9kZSkuc2V0VmFsdWUoc2VyaWFsaXplZCk7XG4gIH07XG59O1xuXG4vKiAuLi9pbnRlcm5hbC9zcmMvbWFyc2hhbC5qcyovXG52YXIgQ2FwRGF0YVNoYXBlID0geyBib2R5OiBNLnN0cmluZygpLCBzbG90czogTS5hcnJheSgpIH07XG5oYXJkZW4oQ2FwRGF0YVNoYXBlKTtcbnZhciBhc3NlcnRDYXBEYXRhID0gKGRhdGEpID0+IHtcbiAgYXNzZXJ0LnR5cGVvZihkYXRhLCBcIm9iamVjdFwiKTtcbiAgYXNzZXJ0KGRhdGEpO1xuICB0eXBlb2YgZGF0YS5ib2R5ID09PSBcInN0cmluZ1wiIHx8IHRocm93UmVkYWN0ZWRgZGF0YSBoYXMgbm9uLXN0cmluZyAuYm9keSAke2RhdGEuYm9keX1gO1xuICBBcnJheS5pc0FycmF5KGRhdGEuc2xvdHMpIHx8IHRocm93UmVkYWN0ZWRgZGF0YSBoYXMgbm9uLUFycmF5IHNsb3RzICR7ZGF0YS5zbG90c31gO1xufTtcbmhhcmRlbihhc3NlcnRDYXBEYXRhKTtcbnZhciB1bm1hcnNoYWxGcm9tVnN0b3JhZ2UgPSAoZGF0YSwga2V5LCBmcm9tQ2FwRGF0YSwgaW5kZXgpID0+IHtcbiAgY29uc3Qgc2VyaWFsaXplZCA9IGRhdGEuZ2V0KGtleSkgfHwgdGhyb3dSZWRhY3RlZGBubyBkYXRhIGZvciAke2tleX1gO1xuICBhc3NlcnQudHlwZW9mKHNlcmlhbGl6ZWQsIFwic3RyaW5nXCIpO1xuICBhc3NlcnQudHlwZW9mKGluZGV4LCBcIm51bWJlclwiKTtcbiAgY29uc3Qgc3RyZWFtQ2VsbCA9IEpTT04ucGFyc2Uoc2VyaWFsaXplZCk7XG4gIGlmICghaXNTdHJlYW1DZWxsKHN0cmVhbUNlbGwpKSB7XG4gICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBub3QgYSBTdHJlYW1DZWxsOiAke3N0cmVhbUNlbGx9YDtcbiAgfVxuICBjb25zdCB7IHZhbHVlczogdmFsdWVzNyB9ID0gc3RyZWFtQ2VsbDtcbiAgdmFsdWVzNy5sZW5ndGggPiAwIHx8IHRocm93UmVkYWN0ZWRgbm8gU3RyZWFtQ2VsbCB2YWx1ZXM6ICR7c3RyZWFtQ2VsbH1gO1xuICBjb25zdCBtYXJzaGFsbGVkID0gdmFsdWVzNy5hdChpbmRleCk7XG4gIGFzc2VydC50eXBlb2YobWFyc2hhbGxlZCwgXCJzdHJpbmdcIik7XG4gIGNvbnN0IGNhcERhdGEgPSBoYXJkZW4oSlNPTi5wYXJzZShtYXJzaGFsbGVkKSk7XG4gIGFzc2VydENhcERhdGEoY2FwRGF0YSk7XG4gIGNvbnN0IHVubWFyc2hhbGxlZCA9IGZyb21DYXBEYXRhKGNhcERhdGEpO1xuICByZXR1cm4gdW5tYXJzaGFsbGVkO1xufTtcbmhhcmRlbih1bm1hcnNoYWxGcm9tVnN0b3JhZ2UpO1xudmFyIHJlamVjdE9DYXAgPSAoY2FwKSA9PiB0aHJvd1JlZGFjdGVkYCR7Y2FwfSBpcyBub3QgcHVyZSBkYXRhYDtcbnZhciBwdXJlRGF0YU1hcnNoYWxsZXIgPSBtYWtlTWFyc2hhbChyZWplY3RPQ2FwLCByZWplY3RPQ2FwLCB7XG4gIHNlcmlhbGl6ZUJvZHlGb3JtYXQ6IFwic21hbGxjYXBzXCJcbn0pO1xuaGFyZGVuKHB1cmVEYXRhTWFyc2hhbGxlcik7XG5cbi8qIC4uL2ludGVybmFsL3NyYy9tZXRob2QtdG9vbHMuanMqL1xudmFyIHsgY3JlYXRlOiBjcmVhdGU0LCBmcm9tRW50cmllczogZnJvbUVudHJpZXMxMCB9ID0gT2JqZWN0O1xudmFyIHsgYXBwbHk6IGFwcGx5NyB9ID0gUmVmbGVjdDtcbnZhciBnZXRNZXRob2ROYW1lczIgPSAodmFsKSA9PiAoXG4gIC8qKiBAdHlwZSB7S1tdfSAqL1xuICBnZXRNZXRob2ROYW1lcyh2YWwpXG4pO1xuaGFyZGVuKGdldE1ldGhvZE5hbWVzMik7XG52YXIgYmluZEFsbE1ldGhvZHMgPSAob2JqKSA9PiBoYXJkZW4oXG4gIGNyZWF0ZTQoXG4gICAgb2JqLFxuICAgIGZyb21FbnRyaWVzMTAoXG4gICAgICBnZXRNZXRob2ROYW1lcyhvYmopLm1hcCgobmFtZSkgPT4gW1xuICAgICAgICBuYW1lLFxuICAgICAgICB7XG4gICAgICAgICAgdmFsdWU6ICguLi5hcmdzKSA9PiBhcHBseTcob2JqW25hbWVdLCBvYmosIGFyZ3MpLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgXSlcbiAgICApXG4gIClcbik7XG5oYXJkZW4oYmluZEFsbE1ldGhvZHMpO1xuXG4vKiAuLi9pbnRlcm5hbC9zcmMvbWV0cmljcy5qcyovXG52YXIgSElTVE9HUkFNX01TX0xBVEVOQ1lfQk9VTkRBUklFUyA9IFtcbiAgNSxcbiAgMTAsXG4gIDI1LFxuICA1MCxcbiAgMTAwLFxuICAyNTAsXG4gIDUwMCxcbiAgMWUzLFxuICAyNTAwLFxuICA1ZTMsXG4gIDFlNCxcbiAgSW5maW5pdHlcbl07XG52YXIgSElTVE9HUkFNX1NFQ09ORFNfTEFURU5DWV9CT1VOREFSSUVTID0gSElTVE9HUkFNX01TX0xBVEVOQ1lfQk9VTkRBUklFUy5tYXAoKG1zKSA9PiBtcyAvIDFlMyk7XG52YXIgSElTVE9HUkFNX01FVFJJQ1MgPSAoXG4gIC8qKiBAdHlwZSB7Y29uc3R9ICovXG4gIHtcbiAgICBzd2luZ3NldF9jcmFua19wcm9jZXNzaW5nX3RpbWU6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlByb2Nlc3NpbmcgdGltZSBwZXIgY3JhbmsgKG1zKVwiLFxuICAgICAgdW5pdDogXCJtc1wiLFxuICAgICAgYm91bmRhcmllczogQXJyYXkub2YoMSwgMTEsIDIxLCAzMSwgNDEsIDUxLCA2MSwgNzEsIDgxLCA5MSwgSW5maW5pdHkpXG4gICAgfSxcbiAgICBzd2luZ3NldF9ibG9ja19wcm9jZXNzaW5nX3NlY29uZHM6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlByb2Nlc3NpbmcgdGltZSBwZXIgYmxvY2tcIixcbiAgICAgIHVuaXQ6IFwic1wiLFxuICAgICAgYm91bmRhcmllczogSElTVE9HUkFNX1NFQ09ORFNfTEFURU5DWV9CT1VOREFSSUVTXG4gICAgfSxcbiAgICBzd2luZ3NldF92YXRfc3RhcnR1cDoge1xuICAgICAgZGVzY3JpcHRpb246IFwiVmF0IHN0YXJ0dXAgdGltZSAobXMpXCIsXG4gICAgICB1bml0OiBcIm1zXCIsXG4gICAgICBib3VuZGFyaWVzOiBISVNUT0dSQU1fTVNfTEFURU5DWV9CT1VOREFSSUVTXG4gICAgfSxcbiAgICBzd2luZ3NldF92YXRfZGVsaXZlcnk6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlZhdCBkZWxpdmVyeSB0aW1lIChtcylcIixcbiAgICAgIHVuaXQ6IFwibXNcIixcbiAgICAgIGJvdW5kYXJpZXM6IEhJU1RPR1JBTV9NU19MQVRFTkNZX0JPVU5EQVJJRVNcbiAgICB9LFxuICAgIHN3aW5nc2V0X21ldGVyX3VzYWdlOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJWYXQgbWV0ZXIgdXNhZ2VcIixcbiAgICAgIHVuaXQ6IFwibXNcIixcbiAgICAgIGJvdW5kYXJpZXM6IEhJU1RPR1JBTV9NU19MQVRFTkNZX0JPVU5EQVJJRVNcbiAgICB9XG4gIH1cbik7XG52YXIgYmxvY2tIaXN0b2dyYW1NZXRyaWNEZXNjID0ge1xuICAvKiBEaXNhYmxlZCBiZWNhdXNlIGltcG9ydGluZyBmcm9tIEBvcGVudGVsZW1ldHJ5L2FwaSBicmVha3Mga2VybmVsIGJ1bmRsaW5nLiovXG4gIC8qIFRoYW5rZnVsbHksIGl0J3MgdGhlIGRlZmF1bHQgYW55d2F5OiovXG4gIC8qIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuLXRlbGVtZXRyeS9vcGVudGVsZW1ldHJ5LWpzL2Jsb2IvZjRkZDJhMTA2MmY5ODBjZDM0NGNmYjE3MmE1MTVkMDAxMTVkZjU3MC9hcGkvc3JjL21ldHJpY3MvTWV0cmljLnRzI0w1My1MNTcqL1xuICAvKiB2YWx1ZVR5cGU6IFZhbHVlVHlwZS5ET1VCTEUsKi9cbiAgdW5pdDogXCJzXCIsXG4gIGFkdmljZToge1xuICAgIGV4cGxpY2l0QnVja2V0Qm91bmRhcmllczogW1xuICAgICAgMC4xLFxuICAgICAgMC4yLFxuICAgICAgMC4zLFxuICAgICAgMC40LFxuICAgICAgMC41LFxuICAgICAgMSxcbiAgICAgIDIsXG4gICAgICAzLFxuICAgICAgNCxcbiAgICAgIDUsXG4gICAgICA2LFxuICAgICAgNyxcbiAgICAgIDEwLFxuICAgICAgMTUsXG4gICAgICAzMFxuICAgIF1cbiAgfVxufTtcbnZhciBCTE9DS19ISVNUT0dSQU1fTUVUUklDUyA9IChcbiAgLyoqIEB0eXBlIHtjb25zdH0gKi9cbiAge1xuICAgIHN3aW5nc2V0UnVuU2Vjb25kczoge1xuICAgICAgZGVzY3JpcHRpb246IFwiUGVyLWJsb2NrIHRpbWUgc3BlbnQgZXhlY3V0aW5nIFN3aW5nU2V0XCIsXG4gICAgICAuLi5ibG9ja0hpc3RvZ3JhbU1ldHJpY0Rlc2NcbiAgICB9LFxuICAgIHN3aW5nc2V0Q2hhaW5TYXZlU2Vjb25kczoge1xuICAgICAgZGVzY3JpcHRpb246IFwiUGVyLWJsb2NrIHRpbWUgc3BlbnQgcHJvcGFnYXRpbmcgU3dpbmdTZXQgc3RhdGUgaW50byBjb3Ntb3NcIixcbiAgICAgIC4uLmJsb2NrSGlzdG9ncmFtTWV0cmljRGVzY1xuICAgIH0sXG4gICAgc3dpbmdzZXRDb21taXRTZWNvbmRzOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJQZXItYmxvY2sgdGltZSBzcGVudCBjb21taXR0aW5nIFN3aW5nU2V0IHN0YXRlIHRvIGhvc3Qgc3RvcmFnZVwiLFxuICAgICAgLi4uYmxvY2tIaXN0b2dyYW1NZXRyaWNEZXNjXG4gICAgfSxcbiAgICBjb3Ntb3NDb21taXRTZWNvbmRzOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJQZXItYmxvY2sgdGltZSBzcGVudCBjb21taXR0aW5nIGNvc21vcyBzdGF0ZVwiLFxuICAgICAgLi4uYmxvY2tIaXN0b2dyYW1NZXRyaWNEZXNjXG4gICAgfSxcbiAgICBmdWxsQ29tbWl0U2Vjb25kczoge1xuICAgICAgZGVzY3JpcHRpb246IFwiUGVyLWJsb2NrIHRpbWUgc3BlbnQgY29tbWl0dGluZyBzdGF0ZSwgaW5jbHVzaXZlIG9mIENPTU1JVF9CTE9DSyBwcm9jZXNzaW5nIHBsdXMgdGltZSBzcGVudCBbb3V0c2lkZSBvZiBjb3NtaWMtc3dpbmdzZXRdIGJlZm9yZSBhbmQgYWZ0ZXIgaXRcIixcbiAgICAgIC4uLmJsb2NrSGlzdG9ncmFtTWV0cmljRGVzY1xuICAgIH0sXG4gICAgaW50ZXJCbG9ja1NlY29uZHM6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRpbWUgc3BlbnQgaWRsZSBiZXR3ZWVuIGJsb2Nrc1wiLFxuICAgICAgLi4uYmxvY2tIaXN0b2dyYW1NZXRyaWNEZXNjXG4gICAgfSxcbiAgICBhZnRlckNvbW1pdEhhbmdvdmVyU2Vjb25kczoge1xuICAgICAgZGVzY3JpcHRpb246IFwiUGVyLWJsb2NrIHRpbWUgc3BlbnQgd2FpdGluZyBmb3IgcHJldmlvdXMtYmxvY2sgYWZ0ZXJDb21taXQgd29ya1wiLFxuICAgICAgLi4uYmxvY2tIaXN0b2dyYW1NZXRyaWNEZXNjXG4gICAgfSxcbiAgICBibG9ja0xhZ1NlY29uZHM6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlRoZSBkZWxheSBvZiBlYWNoIGJsb2NrIGZyb20gaXRzIGV4cGVjdGVkIGJlZ2luIHRpbWVcIixcbiAgICAgIC4uLmJsb2NrSGlzdG9ncmFtTWV0cmljRGVzYyxcbiAgICAgIC8qIEFkZCBidWNrZXRzIGZvciBleGNlc3NpdmVseSBsb25nIGRlbGF5cy4qL1xuICAgICAgYWR2aWNlOiB7XG4gICAgICAgIC4uLmJsb2NrSGlzdG9ncmFtTWV0cmljRGVzYy5hZHZpY2UsXG4gICAgICAgIGV4cGxpY2l0QnVja2V0Qm91bmRhcmllczogKFxuICAgICAgICAgIC8qKiBAdHlwZSB7bnVtYmVyW119ICovXG4gICAgICAgICAgW1xuICAgICAgICAgICAgLi4uYmxvY2tIaXN0b2dyYW1NZXRyaWNEZXNjLmFkdmljZS5leHBsaWNpdEJ1Y2tldEJvdW5kYXJpZXMsXG4gICAgICAgICAgICAuLi5bNjAsIDEyMCwgMTgwLCAyNDAsIDMwMCwgNjAwLCAzNjAwXVxuICAgICAgICAgIF1cbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cbiAgfVxuKTtcbnZhciBNZXRyaWNUeXBlID0gKFxuICAvKiogQHR5cGUge2NvbnN0fSAqL1xuICB7XG4gICAgQ291bnRlcjogXCJjb3VudGVyXCIsXG4gICAgR2F1Z2U6IFwiZ2F1Z2VcIlxuICB9XG4pO1xudmFyIEtFUk5FTF9TVEFUU19TVU1fTUVUUklDUyA9IFtcbiAge1xuICAgIGtleTogXCJzeXNjYWxsc1wiLFxuICAgIG5hbWU6IFwic3dpbmdzZXRfYWxsX3N5c2NhbGxfdG90YWxcIixcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQga2VybmVsIGNhbGxzXCJcbiAgfSxcbiAge1xuICAgIGtleTogXCJzeXNjYWxsU2VuZFwiLFxuICAgIG5hbWU6IFwic3dpbmdzZXRfc3lzY2FsbF90b3RhbFwiLFxuICAgIHN1YjogeyBkaW1lbnNpb246IFwic3lzY2FsbFwiLCB2YWx1ZTogXCJzZW5kXCIgfSxcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQgbWVzc2FnZSBzZW5kIGtlcm5lbCBjYWxsc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwic3lzY2FsbENhbGxOb3dcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X3N5c2NhbGxfdG90YWxcIixcbiAgICBzdWI6IHsgZGltZW5zaW9uOiBcInN5c2NhbGxcIiwgdmFsdWU6IFwiY2FsbE5vd1wiIH0sXG4gICAgZGVzY3JpcHRpb246IFwiVG90YWwgbnVtYmVyIG9mIFN3aW5nU2V0IHN5bmNocm9ub3VzIGRldmljZSBrZXJuZWwgY2FsbHNcIlxuICB9LFxuICB7XG4gICAga2V5OiBcInN5c2NhbGxTdWJzY3JpYmVcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X3N5c2NhbGxfdG90YWxcIixcbiAgICBzdWI6IHsgZGltZW5zaW9uOiBcInN5c2NhbGxcIiwgdmFsdWU6IFwic3Vic2NyaWJlXCIgfSxcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQgcHJvbWlzZSBzdWJzY3JpcHRpb24ga2VybmVsIGNhbGxzXCJcbiAgfSxcbiAge1xuICAgIGtleTogXCJzeXNjYWxsUmVzb2x2ZVwiLFxuICAgIG5hbWU6IFwic3dpbmdzZXRfc3lzY2FsbF90b3RhbFwiLFxuICAgIHN1YjogeyBkaW1lbnNpb246IFwic3lzY2FsbFwiLCB2YWx1ZTogXCJyZXNvbHZlXCIgfSxcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQgcHJvbWlzZSByZXNvbHV0aW9uIGtlcm5lbCBjYWxsc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwic3lzY2FsbEV4aXRcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X3N5c2NhbGxfdG90YWxcIixcbiAgICBzdWI6IHsgZGltZW5zaW9uOiBcInN5c2NhbGxcIiwgdmFsdWU6IFwiZXhpdFwiIH0sXG4gICAgZGVzY3JpcHRpb246IFwiVG90YWwgbnVtYmVyIG9mIFN3aW5nU2V0IHZhdCBleGl0IGtlcm5lbCBjYWxsc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwic3lzY2FsbFZhdHN0b3JlR2V0XCIsXG4gICAgbmFtZTogXCJzd2luZ3NldF9zeXNjYWxsX3RvdGFsXCIsXG4gICAgc3ViOiB7IGRpbWVuc2lvbjogXCJzeXNjYWxsXCIsIHZhbHVlOiBcInZhdHN0b3JlR2V0XCIgfSxcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQgdmF0c3RvcmUgZ2V0IGtlcm5lbCBjYWxsc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwic3lzY2FsbFZhdHN0b3JlU2V0XCIsXG4gICAgbmFtZTogXCJzd2luZ3NldF9zeXNjYWxsX3RvdGFsXCIsXG4gICAgc3ViOiB7IGRpbWVuc2lvbjogXCJzeXNjYWxsXCIsIHZhbHVlOiBcInZhdHN0b3JlU2V0XCIgfSxcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQgdmF0c3RvcmUgc2V0IGtlcm5lbCBjYWxsc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwic3lzY2FsbFZhdHN0b3JlR2V0TmV4dEtleVwiLFxuICAgIG5hbWU6IFwic3dpbmdzZXRfc3lzY2FsbF90b3RhbFwiLFxuICAgIHN1YjogeyBkaW1lbnNpb246IFwic3lzY2FsbFwiLCB2YWx1ZTogXCJ2YXRzdG9yZUdldE5leHRcIiB9LFxuICAgIGRlc2NyaXB0aW9uOiBcIlRvdGFsIG51bWJlciBvZiBTd2luZ1NldCB2YXRzdG9yZSBnZXROZXh0S2V5IGtlcm5lbCBjYWxsc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwic3lzY2FsbFZhdHN0b3JlRGVsZXRlXCIsXG4gICAgbmFtZTogXCJzd2luZ3NldF9zeXNjYWxsX3RvdGFsXCIsXG4gICAgc3ViOiB7IGRpbWVuc2lvbjogXCJzeXNjYWxsXCIsIHZhbHVlOiBcInZhdHN0b3JlRGVsZXRlXCIgfSxcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQgdmF0c3RvcmUgZGVsZXRlIGtlcm5lbCBjYWxsc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwic3lzY2FsbERyb3BJbXBvcnRzXCIsXG4gICAgbmFtZTogXCJzd2luZ3NldF9zeXNjYWxsX3RvdGFsXCIsXG4gICAgc3ViOiB7IGRpbWVuc2lvbjogXCJzeXNjYWxsXCIsIHZhbHVlOiBcImRyb3BJbXBvcnRzXCIgfSxcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQgZHJvcCBpbXBvcnRzIGtlcm5lbCBjYWxsc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwiZGlzcGF0Y2hlc1wiLFxuICAgIG5hbWU6IFwic3dpbmdzZXRfZGlzcGF0Y2hfdG90YWxcIixcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQgdmF0IGNhbGxzXCJcbiAgfSxcbiAge1xuICAgIGtleTogXCJkaXNwYXRjaERlbGl2ZXJcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X2Rpc3BhdGNoX2RlbGl2ZXJfdG90YWxcIixcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQgdmF0IG1lc3NhZ2UgZGVsaXZlcmllc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwiZGlzcGF0Y2hOb3RpZnlcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X2Rpc3BhdGNoX25vdGlmeV90b3RhbFwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlRvdGFsIG51bWJlciBvZiBTd2luZ1NldCB2YXQgcHJvbWlzZSBub3RpZmljYXRpb25zXCJcbiAgfVxuXTtcbnZhciBLRVJORUxfU1RBVFNfVVBET1dOX01FVFJJQ1MgPSBbXG4gIHtcbiAgICBrZXk6IFwia2VybmVsT2JqZWN0c1wiLFxuICAgIG5hbWU6IFwic3dpbmdzZXRfa2VybmVsX29iamVjdHNcIixcbiAgICBkZXNjcmlwdGlvbjogXCJBY3RpdmUga2VybmVsIG9iamVjdHNcIlxuICB9LFxuICB7XG4gICAga2V5OiBcImtlcm5lbERldmljZXNcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X2tlcm5lbF9kZXZpY2VzXCIsXG4gICAgZGVzY3JpcHRpb246IFwiQWN0aXZlIGtlcm5lbCBkZXZpY2VzXCJcbiAgfSxcbiAge1xuICAgIGtleTogXCJrZXJuZWxQcm9taXNlc1wiLFxuICAgIG5hbWU6IFwic3dpbmdzZXRfa2VybmVsX3Byb21pc2VzXCIsXG4gICAgZGVzY3JpcHRpb246IFwiQWN0aXZlIGtlcm5lbCBwcm9taXNlc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwia3BVbnJlc29sdmVkXCIsXG4gICAgbmFtZTogXCJzd2luZ3NldF91bnJlc29sdmVkX2tlcm5lbF9wcm9taXNlc1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlVucmVzb2x2ZWQga2VybmVsIHByb21pc2VzXCJcbiAgfSxcbiAge1xuICAgIGtleTogXCJrcEZ1bGZpbGxlZFwiLFxuICAgIG5hbWU6IFwic3dpbmdzZXRfZnVsZmlsbGVkX2tlcm5lbF9wcm9taXNlc1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkZ1bGZpbGxlZCBrZXJuZWwgcHJvbWlzZXNcIlxuICB9LFxuICB7XG4gICAga2V5OiBcImtwUmVqZWN0ZWRcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X3JlamVjdGVkX2tlcm5lbF9wcm9taXNlc1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlJlamVjdGVkIGtlcm5lbCBwcm9taXNlc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwicnVuUXVldWVMZW5ndGhcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X3J1bl9xdWV1ZV9sZW5ndGhcIixcbiAgICBjb25zZW5zdXM6IHRydWUsXG4gICAgZGVzY3JpcHRpb246IFwiTGVuZ3RoIG9mIHRoZSBrZXJuZWwgcnVuIHF1ZXVlXCJcbiAgfSxcbiAge1xuICAgIGtleTogXCJhY2NlcHRhbmNlUXVldWVMZW5ndGhcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X2FjY2VwdGFuY2VfcXVldWVfbGVuZ3RoXCIsXG4gICAgY29uc2Vuc3VzOiB0cnVlLFxuICAgIGRlc2NyaXB0aW9uOiBcIkxlbmd0aCBvZiB0aGUga2VybmVsIGFjY2VwdGFuY2UgcXVldWVcIlxuICB9LFxuICB7XG4gICAga2V5OiBcInByb21pc2VRdWV1ZXNMZW5ndGhcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X3Byb21pc2VfcXVldWVzX2xlbmd0aFwiLFxuICAgIGNvbnNlbnN1czogdHJ1ZSxcbiAgICBkZXNjcmlwdGlvbjogXCJDb21iaW5lZCBsZW5ndGggb2YgYWxsIGtlcm5lbCBwcm9taXNlIHF1ZXVlc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwiY2xpc3RFbnRyaWVzXCIsXG4gICAgbmFtZTogXCJzd2luZ3NldF9jbGlzdF9lbnRyaWVzXCIsXG4gICAgZGVzY3JpcHRpb246IFwiTnVtYmVyIG9mIGVudHJpZXMgaW4gdGhlIGtlcm5lbCBjLWxpc3RcIlxuICB9LFxuICB7XG4gICAga2V5OiBcInZhdHNcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X3ZhdHNcIixcbiAgICBkZXNjcmlwdGlvbjogXCJOdW1iZXIgb2YgYWN0aXZlIHZhdHNcIlxuICB9XG5dO1xudmFyIHsgQ291bnRlciwgR2F1Z2UgfSA9IE1ldHJpY1R5cGU7XG52YXIgS0VSTkVMX1NUQVRTX01FVFJJQ1MgPSBoYXJkZW4oW1xuICAuLi5LRVJORUxfU1RBVFNfU1VNX01FVFJJQ1MubWFwKChtMikgPT4gKHsgLi4ubTIsIG1ldHJpY1R5cGU6IENvdW50ZXIgfSkpLFxuICAuLi5LRVJORUxfU1RBVFNfVVBET1dOX01FVFJJQ1MubWFwKChtMikgPT4gKHsgLi4ubTIsIG1ldHJpY1R5cGU6IEdhdWdlIH0pKVxuXSk7XG52YXIga2VybmVsU3RhdHNLZXlzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbmZvciAoY29uc3QgeyBrZXkgfSBvZiBLRVJORUxfU1RBVFNfTUVUUklDUykge1xuICBrZXJuZWxTdGF0c0tleXMuc2V0KGtleSwgKGtlcm5lbFN0YXRzS2V5cy5nZXQoa2V5KSB8fCAwKSArIDEpO1xufVxudmFyIGR1cGxpY2F0ZUtlcm5lbFN0YXRzS2V5cyA9IFsuLi5rZXJuZWxTdGF0c0tleXMuZW50cmllcygpXS5mbGF0TWFwKFxuICAoW2tleSwgdmFsdWVdKSA9PiB2YWx1ZSA+IDEgPyBba2V5XSA6IFtdXG4pO1xuaWYgKGR1cGxpY2F0ZUtlcm5lbFN0YXRzS2V5cy5sZW5ndGggPiAwKSB7XG4gIGNvbnN0IG1zZyA9IGBEdXBsaWNhdGUga2VybmVsIHN0YXRzIGtleXMgJHtKU09OLnN0cmluZ2lmeShkdXBsaWNhdGVLZXJuZWxTdGF0c0tleXMpfWA7XG4gIHRocm93IEVycm9yKG1zZyk7XG59XG5cbi8qIC4uL2ludGVybmFsL3NyYy9uYXR1cmFsLXNvcnQuanMqL1xudmFyIGNvbXBhcmVOYXRzID0gKGEyLCBiMykgPT4ge1xuICBjb25zdCBkaWZmID0gK2EyIC0gK2IzO1xuICBjb25zdCBmaW5pdGVEaWZmID0gTnVtYmVyLmlzRmluaXRlKGRpZmYpICYmIGRpZmYgfHwgKGEyID09PSBiMyA/IDAgOiBOdW1iZXIoQmlnSW50KGEyKSAtIEJpZ0ludChiMykpIHx8IGEyLmxlbmd0aCAtIGIzLmxlbmd0aCk7XG4gIHJldHVybiBNYXRoLnNpZ24oZmluaXRlRGlmZik7XG59O1xudmFyIGNvbXBhcmVTdHJpbmdzID0gKGEyLCBiMykgPT4gYTIgPiBiMyA/IDEgOiBhMiA8IGIzID8gLTEgOiAwO1xudmFyIHJQcmVmaXhlZERpZ2l0cyA9IC9eKFxcRCopKFxcZCspKFxcRC4qfCkvcztcbnZhciBuYXR1cmFsQ29tcGFyZSA9IChhMiwgYjMpID0+IHtcbiAgY29uc3QgW19hLCBhUHJlZml4LCBhRGlnaXRzLCBhU3VmZml4XSA9IHJQcmVmaXhlZERpZ2l0cy5leGVjKGEyKSB8fCBbXTtcbiAgaWYgKGFQcmVmaXggIT09IHZvaWQgMCkge1xuICAgIGNvbnN0IFtfYiwgYlByZWZpeCwgYkRpZ2l0cywgYlN1ZmZpeF0gPSByUHJlZml4ZWREaWdpdHMuZXhlYyhiMykgfHwgW107XG4gICAgaWYgKGJQcmVmaXggPT09IGFQcmVmaXgpIHtcbiAgICAgIHJldHVybiBjb21wYXJlTmF0cyhhRGlnaXRzLCBiRGlnaXRzKSB8fCBjb21wYXJlU3RyaW5ncyhhU3VmZml4LCBiU3VmZml4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvbXBhcmVTdHJpbmdzKGEyLCBiMyk7XG59O1xuaGFyZGVuKG5hdHVyYWxDb21wYXJlKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL2NvbW1vbi9vYmplY3QtbWV0YS1tYXAuanMqL1xudmFyIHsgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczcsIGNyZWF0ZTogY3JlYXRlNSwgZnJvbUVudHJpZXM6IGZyb21FbnRyaWVzMTEgfSA9IE9iamVjdDtcbnZhciB7IG93bktleXM6IG93bktleXMyMSB9ID0gUmVmbGVjdDtcbnZhciBvYmplY3RNZXRhTWFwID0gKG9yaWdpbmFsLCBtZXRhTWFwRm4sIHByb3RvID0gT2JqZWN0LnByb3RvdHlwZSkgPT4ge1xuICBjb25zdCBkZXNjcyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM3KG9yaWdpbmFsKTtcbiAgY29uc3Qga2V5czggPSBvd25LZXlzMjEob3JpZ2luYWwpO1xuICBjb25zdCBkZXNjRW50cmllcyA9IChcbiAgICAvKiogQHR5cGUge1tQcm9wZXJ0eUtleSxQcm9wZXJ0eURlc2NyaXB0b3JdW119ICovXG4gICAga2V5czgubWFwKChrZXkpID0+IFtrZXksIG1ldGFNYXBGbihkZXNjc1trZXldLCBrZXkpXSkuZmlsdGVyKChbX2tleSwgb3B0RGVzY10pID0+IG9wdERlc2MgIT09IHZvaWQgMClcbiAgKTtcbiAgcmV0dXJuIGhhcmRlbihjcmVhdGU1KHByb3RvLCBmcm9tRW50cmllczExKGRlc2NFbnRyaWVzKSkpO1xufTtcbmhhcmRlbihvYmplY3RNZXRhTWFwKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL3N0cmVhbS9pbmRleC5qcyovXG52YXIgZnJlZXplOCA9IChcbiAgLyoqIEB0eXBlIHs8VD4odjogVCB8IFJlYWRvbmx5PFQ+KSA9PiBUfSAqL1xuICBPYmplY3QuZnJlZXplXG4pO1xudmFyIG1ha2VRdWV1ZSA9ICgpID0+IHtcbiAgbGV0IHsgcHJvbWlzZTogdGFpbFByb21pc2UsIHJlc29sdmU6IHRhaWxSZXNvbHZlIH0gPSBtYWtlUHJvbWlzZUtpdCgpO1xuICByZXR1cm4ge1xuICAgIHB1dCh2YWx1ZSkge1xuICAgICAgY29uc3QgeyByZXNvbHZlOiByZXNvbHZlMiwgcHJvbWlzZSB9ID0gbWFrZVByb21pc2VLaXQoKTtcbiAgICAgIHRhaWxSZXNvbHZlKGZyZWV6ZTgoeyB2YWx1ZSwgcHJvbWlzZSB9KSk7XG4gICAgICB0YWlsUmVzb2x2ZSA9IHJlc29sdmUyO1xuICAgIH0sXG4gICAgZ2V0KCkge1xuICAgICAgY29uc3QgcHJvbWlzZSA9IHRhaWxQcm9taXNlLnRoZW4oKG5leHQpID0+IG5leHQudmFsdWUpO1xuICAgICAgdGFpbFByb21pc2UgPSB0YWlsUHJvbWlzZS50aGVuKChuZXh0KSA9PiBuZXh0LnByb21pc2UpO1xuICAgICAgcmV0dXJuIGhhcmRlbihwcm9taXNlKTtcbiAgICB9XG4gIH07XG59O1xuaGFyZGVuKG1ha2VRdWV1ZSk7XG52YXIgbWFrZVN0cmVhbSA9IChhY2tzLCBkYXRhKSA9PiB7XG4gIGNvbnN0IHN0cmVhbSA9IGhhcmRlbih7XG4gICAgLyoqXG4gKiBAcGFyYW0ge1RXcml0ZX0gdmFsdWVcbiAqL1xuICAgIG5leHQodmFsdWUpIHtcbiAgICAgIGRhdGEucHV0KGZyZWV6ZTgoeyB2YWx1ZSwgZG9uZTogZmFsc2UgfSkpO1xuICAgICAgcmV0dXJuIGFja3MuZ2V0KCk7XG4gICAgfSxcbiAgICAvKipcbiAqIEBwYXJhbSB7VFdyaXRlUmV0dXJufSB2YWx1ZVxuICovXG4gICAgcmV0dXJuKHZhbHVlKSB7XG4gICAgICBkYXRhLnB1dChmcmVlemU4KHsgdmFsdWUsIGRvbmU6IHRydWUgfSkpO1xuICAgICAgcmV0dXJuIGFja3MuZ2V0KCk7XG4gICAgfSxcbiAgICAvKipcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yXG4gKi9cbiAgICB0aHJvdyhlcnJvcikge1xuICAgICAgZGF0YS5wdXQoaGFyZGVuKFByb21pc2UucmVqZWN0KGVycm9yKSkpO1xuICAgICAgcmV0dXJuIGFja3MuZ2V0KCk7XG4gICAgfSxcbiAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc3RyZWFtO1xufTtcbmhhcmRlbihtYWtlU3RyZWFtKTtcbnZhciBtYWtlUGlwZSA9ICgpID0+IHtcbiAgY29uc3QgZGF0YSA9IG1ha2VRdWV1ZSgpO1xuICBjb25zdCBhY2tzID0gbWFrZVF1ZXVlKCk7XG4gIGNvbnN0IHJlYWRlciA9IG1ha2VTdHJlYW0oYWNrcywgZGF0YSk7XG4gIGNvbnN0IHdyaXRlciA9IG1ha2VTdHJlYW0oZGF0YSwgYWNrcyk7XG4gIHJldHVybiBoYXJkZW4oW3dyaXRlciwgcmVhZGVyXSk7XG59O1xuaGFyZGVuKG1ha2VQaXBlKTtcbnZhciBwdW1wID0gYXN5bmMgKHdyaXRlciwgcmVhZGVyLCBwcmltZXIpID0+IHtcbiAgY29uc3QgdGljayA9IChwcm9taXNlKSA9PiBFLndoZW4oXG4gICAgcHJvbWlzZSxcbiAgICAocmVzdWx0KSA9PiB7XG4gICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0dXJuIHdyaXRlci5yZXR1cm4ocmVzdWx0LnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0b2NrKHdyaXRlci5uZXh0KHJlc3VsdC52YWx1ZSkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgKGVycm9yKSA9PiB7XG4gICAgICByZXR1cm4gd3JpdGVyLnRocm93KGVycm9yKTtcbiAgICB9XG4gICk7XG4gIGNvbnN0IHRvY2sgPSAocHJvbWlzZSkgPT4gRS53aGVuKFxuICAgIHByb21pc2UsXG4gICAgKHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgIHJldHVybiByZWFkZXIucmV0dXJuKHJlc3VsdC52YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGljayhyZWFkZXIubmV4dChyZXN1bHQudmFsdWUpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIChlcnJvcikgPT4ge1xuICAgICAgcmV0dXJuIHJlYWRlci50aHJvdyhlcnJvcik7XG4gICAgfVxuICApO1xuICBhd2FpdCB0aWNrKHJlYWRlci5uZXh0KHByaW1lcikpO1xuICByZXR1cm4gdm9pZCAwO1xufTtcbmhhcmRlbihwdW1wKTtcbnZhciBwcmltZSA9IChnZW5lcmF0b3IsIHByaW1lcikgPT4ge1xuICBjb25zdCBmaXJzdCA9IGdlbmVyYXRvci5uZXh0KHByaW1lcik7XG4gIGxldCByZXN1bHQ7XG4gIGNvbnN0IHByaW1lZCA9IGhhcmRlbih7XG4gICAgLyoqIEBwYXJhbSB7VFdyaXRlfSB2YWx1ZSAqL1xuICAgIGFzeW5jIG5leHQodmFsdWUpIHtcbiAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkge1xuICAgICAgICByZXN1bHQgPSBhd2FpdCBmaXJzdDtcbiAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGdlbmVyYXRvci5uZXh0KHZhbHVlKTtcbiAgICB9LFxuICAgIC8qKiBAcGFyYW0ge1RSZXR1cm59IHZhbHVlICovXG4gICAgYXN5bmMgcmV0dXJuKHZhbHVlKSB7XG4gICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIHtcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgZmlyc3Q7XG4gICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBnZW5lcmF0b3IucmV0dXJuKHZhbHVlKTtcbiAgICB9LFxuICAgIC8qKiBAcGFyYW0ge0Vycm9yfSBlcnJvciAqL1xuICAgIGFzeW5jIHRocm93KGVycm9yKSB7XG4gICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIHtcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgZmlyc3Q7XG4gICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZ2VuZXJhdG9yLnRocm93KGVycm9yKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcHJpbWVkO1xufTtcbmhhcmRlbihwcmltZSk7XG52YXIgbWFwUmVhZGVyID0gKHJlYWRlciwgdHJhbnNmb3JtKSA9PiB7XG4gIGFzeW5jIGZ1bmN0aW9uKiB0cmFuc2Zvcm1HZW5lcmF0b3IoKSB7XG4gICAgZm9yIGF3YWl0IChjb25zdCB2YWx1ZSBvZiByZWFkZXIpIHtcbiAgICAgIHlpZWxkIHRyYW5zZm9ybSh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgaGFyZGVuKHRyYW5zZm9ybUdlbmVyYXRvcik7XG4gIHJldHVybiBoYXJkZW4odHJhbnNmb3JtR2VuZXJhdG9yKCkpO1xufTtcbmhhcmRlbihtYXBSZWFkZXIpO1xudmFyIG1hcFdyaXRlciA9ICh3cml0ZXIsIHRyYW5zZm9ybSkgPT4ge1xuICBjb25zdCB0cmFuc2Zvcm1lZFdyaXRlciA9IGhhcmRlbih7XG4gICAgLyoqXG4gKiBAcGFyYW0ge1RJbn0gdmFsdWVcbiAqL1xuICAgIGFzeW5jIG5leHQodmFsdWUpIHtcbiAgICAgIHJldHVybiB3cml0ZXIubmV4dCh0cmFuc2Zvcm0odmFsdWUpKTtcbiAgICB9LFxuICAgIC8qKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3JcbiAqL1xuICAgIGFzeW5jIHRocm93KGVycm9yKSB7XG4gICAgICByZXR1cm4gd3JpdGVyLnRocm93KGVycm9yKTtcbiAgICB9LFxuICAgIC8qKlxuICogQHBhcmFtIHt1bmRlZmluZWR9IHZhbHVlXG4gKi9cbiAgICBhc3luYyByZXR1cm4odmFsdWUpIHtcbiAgICAgIHJldHVybiB3cml0ZXIucmV0dXJuKHZhbHVlKTtcbiAgICB9LFxuICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtZWRXcml0ZXI7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHRyYW5zZm9ybWVkV3JpdGVyO1xufTtcbmhhcmRlbihtYXBXcml0ZXIpO1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvamVzc2llLmpzL3NyYy9yaW5nMC9tYWtlcnMuanMqL1xudmFyIG1ha2VQcm9taXNlID0gKGV4ZWN1dG9yKSA9PiBoYXJkZW4obmV3IFByb21pc2UoZXhlY3V0b3IpKTtcbmhhcmRlbihtYWtlUHJvbWlzZSk7XG52YXIgbWFrZU1hcCA9IChlbnRyaWVzT3JJdGVyYWJsZSkgPT4gaGFyZGVuKG5ldyBNYXAoZW50cmllc09ySXRlcmFibGUpKTtcbmhhcmRlbihtYWtlTWFwKTtcbnZhciBtYWtlU2V0ID0gKHZhbHVlczcpID0+IGhhcmRlbihuZXcgU2V0KHZhbHVlczcpKTtcbmhhcmRlbihtYWtlU2V0KTtcbnZhciBtYWtlV2Vha01hcCA9IChlbnRyaWVzMTEpID0+IGhhcmRlbihuZXcgV2Vha01hcChlbnRyaWVzMTEpKTtcbmhhcmRlbihtYWtlV2Vha01hcCk7XG52YXIgbWFrZVdlYWtTZXQgPSAodmFsdWVzNykgPT4gaGFyZGVuKG5ldyBXZWFrU2V0KHZhbHVlczcpKTtcbmhhcmRlbihtYWtlV2Vha1NldCk7XG5cbi8qIC4uLy4uL25vZGVfbW9kdWxlcy9qZXNzaWUuanMvc3JjL3JpbmcwL2FzeW5jLWdlbmVyYXRlLmpzKi9cbnZhciBhc3luY0dlbmVyYXRlID0gKG5leHQpID0+IHtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTogKCkgPT4ge1xuICAgICAgcmV0dXJuIGhhcmRlbih7XG4gICAgICAgIG5leHQ6IGFzeW5jICgpID0+IGhhcmRlbihuZXh0KCkpXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufTtcbmhhcmRlbihhc3luY0dlbmVyYXRlKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL2plc3NpZS5qcy9zcmMvcmluZzEvYXN5bmMtdG9vbHMuanMqL1xudmFyIGFzeW5jRG9XaGlsZSA9IChib2R5KSA9PiB7XG4gIHJldHVybiBtYWtlUHJvbWlzZSgocmVzb2x2ZTIsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGxvb3AgPSBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBkb0NvbnRpbnVlID0gYXdhaXQgYm9keSgpO1xuICAgICAgaWYgKCFkb0NvbnRpbnVlKSB7XG4gICAgICAgIHJlc29sdmUyKHZvaWQgMCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvb3AoKS5jYXRjaChyZWplY3QpO1xuICAgIH07XG4gICAgbG9vcCgpLmNhdGNoKHJlamVjdCk7XG4gIH0pO1xufTtcbmhhcmRlbihhc3luY0RvV2hpbGUpO1xuXG4vKiAuLi9pbnRlcm5hbC9zcmMvc2VzLXV0aWxzLmpzKi9cbnZhciB7IGZyb21FbnRyaWVzOiBmcm9tRW50cmllczEyLCBrZXlzLCB2YWx1ZXM6IHZhbHVlczQgfSA9IE9iamVjdDtcbnZhciBtYWtlTGltaXRlZENvbnNvbGUgPSAobWFrZUxvZ2dlcikgPT4ge1xuICBjb25zdCBsaW1pdGVkQ29uc29sZSA9IChcbiAgICAvKiogQHR5cGUge2FueX0gKi9cbiAgICBmcm9tRW50cmllczEyKGxvZ0xldmVscy5tYXAoKGxldmVsKSA9PiBbbGV2ZWwsIG1ha2VMb2dnZXIobGV2ZWwpXSkpXG4gICk7XG4gIHJldHVybiAoXG4gICAgLyoqIEB0eXBlIHtMaW1pdGVkQ29uc29sZX0gKi9cbiAgICBoYXJkZW4obGltaXRlZENvbnNvbGUpXG4gICk7XG59O1xuaGFyZGVuKG1ha2VMaW1pdGVkQ29uc29sZSk7XG52YXIgYXNzZXJ0QWxsRGVmaW5lZCA9IChvYmopID0+IHtcbiAgY29uc3QgbWlzc2luZzIgPSBbXTtcbiAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKG9iaikpIHtcbiAgICBpZiAodmFsID09PSB2b2lkIDApIHtcbiAgICAgIG1pc3NpbmcyLnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgaWYgKG1pc3NpbmcyLmxlbmd0aCA+IDApIHtcbiAgICB0aHJvd1JlZGFjdGVkYG1pc3NpbmcgJHtxdW90ZShtaXNzaW5nMil9YDtcbiAgfVxufTtcbnZhciBub3REb25lID0gaGFyZGVuKHsgZG9uZTogZmFsc2UsIHZhbHVlOiB2b2lkIDAgfSk7XG52YXIgYWx3YXlzRG9uZSA9IGhhcmRlbih7IGRvbmU6IHRydWUsIHZhbHVlOiB2b2lkIDAgfSk7XG52YXIgZm9yZXZlciA9IGFzeW5jR2VuZXJhdGUoKCkgPT4gbm90RG9uZSk7XG52YXIgemlwID0gKHhzLCB5cykgPT4gaGFyZGVuKHhzLm1hcCgoeCwgaTMpID0+IFt4LCB5c1sraTNdXSkpO1xudmFyIGFsbFZhbHVlcyA9IGFzeW5jIChvYmopID0+IHtcbiAgY29uc3QgcmVzb2x2ZWQgPSBhd2FpdCBQcm9taXNlLmFsbCh2YWx1ZXM0KG9iaikpO1xuICByZXR1cm4gaGFyZGVuKGZyb21FbnRyaWVzMTIoemlwKGtleXMob2JqKSwgcmVzb2x2ZWQpKSk7XG59O1xuXG4vKiAuLi9pbnRlcm5hbC9zcmMvdHlwZUNoZWNrLmpzKi9cbnZhciBtdXN0TWF0Y2gzID0gbXVzdE1hdGNoO1xuXG4vKiAuLi9pbnRlcm5hbC9zcmMvdHlwZUd1YXJkcy5qcyovXG52YXIgU3RvcmFnZU5vZGVTaGFwZSA9IE0ucmVtb3RhYmxlKFwiU3RvcmFnZU5vZGVcIik7XG52YXIgVW5ndWFyZGVkSGVscGVySSA9IE0uaW50ZXJmYWNlKFxuICBcImhlbHBlclwiLFxuICB7fSxcbiAgLyogbm90IGV4cG9zZWQgc28gc2xvcHB5IG9rYXkqL1xuICB7IHNsb3BweTogdHJ1ZSB9XG4pO1xudmFyIEJyaWRnZUJpZ0ludFNoYXBlID0gTS5vcihNLm51bWJlcigpLCBNLnN0cmluZygpKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL0BlbmRvL2Jhc2U2NC9zcmMvY29tbW9uLmpzKi9cbnZhciB7IGZyZWV6ZTogZnJlZXplOSB9ID0gT2JqZWN0O1xudmFyIHBhZGRpbmcgPSBcIj1cIjtcbnZhciBhbHBoYWJldDY0ID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG52YXIgbW9ub2R1NjQgPSB7fTtcbmZvciAobGV0IGkzID0gMDsgaTMgPCBhbHBoYWJldDY0Lmxlbmd0aDsgaTMgKz0gMSkge1xuICBjb25zdCBjMiA9IGFscGhhYmV0NjRbaTNdO1xuICBtb25vZHU2NFtjMl0gPSBpMztcbn1cbmZyZWV6ZTkobW9ub2R1NjQpO1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvQGVuZG8vYmFzZTY0L3NyYy9lbmNvZGUuanMqL1xudmFyIGpzRW5jb2RlQmFzZTY0ID0gKGRhdGEpID0+IHtcbiAgbGV0IHN0cmluZyA9IFwiXCI7XG4gIGxldCByZWdpc3RlciA9IDA7XG4gIGxldCBxdWFudHVtID0gMDtcbiAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IGRhdGEubGVuZ3RoOyBpMyArPSAxKSB7XG4gICAgY29uc3QgYjMgPSBkYXRhW2kzXTtcbiAgICByZWdpc3RlciA9IHJlZ2lzdGVyIDw8IDggfCBiMztcbiAgICBxdWFudHVtICs9IDg7XG4gICAgaWYgKHF1YW50dW0gPT09IDI0KSB7XG4gICAgICBzdHJpbmcgKz0gYWxwaGFiZXQ2NFtyZWdpc3RlciA+Pj4gMTggJiA2M10gKyBhbHBoYWJldDY0W3JlZ2lzdGVyID4+PiAxMiAmIDYzXSArIGFscGhhYmV0NjRbcmVnaXN0ZXIgPj4+IDYgJiA2M10gKyBhbHBoYWJldDY0W3JlZ2lzdGVyID4+PiAwICYgNjNdO1xuICAgICAgcmVnaXN0ZXIgPSAwO1xuICAgICAgcXVhbnR1bSA9IDA7XG4gICAgfVxuICB9XG4gIHN3aXRjaCAocXVhbnR1bSkge1xuICAgIGNhc2UgMDpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgODpcbiAgICAgIHN0cmluZyArPSBhbHBoYWJldDY0W3JlZ2lzdGVyID4+PiAyICYgNjNdICsgYWxwaGFiZXQ2NFtyZWdpc3RlciA8PCA0ICYgNjNdICsgcGFkZGluZyArIHBhZGRpbmc7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE2OlxuICAgICAgc3RyaW5nICs9IGFscGhhYmV0NjRbcmVnaXN0ZXIgPj4+IDEwICYgNjNdICsgYWxwaGFiZXQ2NFtyZWdpc3RlciA+Pj4gNCAmIDYzXSArIGFscGhhYmV0NjRbcmVnaXN0ZXIgPDwgMiAmIDYzXSArIHBhZGRpbmc7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgRXJyb3IoYGludGVybmFsOiBiYWQgcXVhbnR1bSAke3F1YW50dW19YCk7XG4gIH1cbiAgcmV0dXJuIHN0cmluZztcbn07XG52YXIgZW5jb2RlQmFzZTY0ID0gZ2xvYmFsVGhpcy5CYXNlNjQgIT09IHZvaWQgMCA/IGdsb2JhbFRoaXMuQmFzZTY0LmVuY29kZSA6IGpzRW5jb2RlQmFzZTY0O1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvQGVuZG8vYmFzZTY0L3NyYy9kZWNvZGUuanMqL1xudmFyIGpzRGVjb2RlQmFzZTY0ID0gKHN0cmluZywgbmFtZSA9IFwiPHVua25vd24+XCIpID0+IHtcbiAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KE1hdGguY2VpbChzdHJpbmcubGVuZ3RoICogNCAvIDMpKTtcbiAgbGV0IHJlZ2lzdGVyID0gMDtcbiAgbGV0IHF1YW50dW0gPSAwO1xuICBsZXQgaTMgPSAwO1xuICBsZXQgaiA9IDA7XG4gIHdoaWxlIChpMyA8IHN0cmluZy5sZW5ndGggJiYgc3RyaW5nW2kzXSAhPT0gcGFkZGluZykge1xuICAgIGNvbnN0IG51bWJlcjIgPSBtb25vZHU2NFtzdHJpbmdbaTNdXTtcbiAgICBpZiAobnVtYmVyMiA9PT0gdm9pZCAwKSB7XG4gICAgICB0aHJvdyBFcnJvcihgSW52YWxpZCBiYXNlNjQgY2hhcmFjdGVyICR7c3RyaW5nW2kzXX0gaW4gc3RyaW5nICR7bmFtZX1gKTtcbiAgICB9XG4gICAgcmVnaXN0ZXIgPSByZWdpc3RlciA8PCA2IHwgbnVtYmVyMjtcbiAgICBxdWFudHVtICs9IDY7XG4gICAgaWYgKHF1YW50dW0gPj0gOCkge1xuICAgICAgcXVhbnR1bSAtPSA4O1xuICAgICAgZGF0YVtqXSA9IHJlZ2lzdGVyID4+PiBxdWFudHVtO1xuICAgICAgaiArPSAxO1xuICAgICAgcmVnaXN0ZXIgJj0gKDEgPDwgcXVhbnR1bSkgLSAxO1xuICAgIH1cbiAgICBpMyArPSAxO1xuICB9XG4gIHdoaWxlIChxdWFudHVtID4gMCkge1xuICAgIGlmIChpMyA9PT0gc3RyaW5nLmxlbmd0aCB8fCBzdHJpbmdbaTNdICE9PSBwYWRkaW5nKSB7XG4gICAgICB0aHJvdyBFcnJvcihgTWlzc2luZyBwYWRkaW5nIGF0IG9mZnNldCAke2kzfSBvZiBzdHJpbmcgJHtuYW1lfWApO1xuICAgIH1cbiAgICBpMyArPSAxO1xuICAgIHF1YW50dW0gLT0gMjtcbiAgfVxuICBpZiAoaTMgPCBzdHJpbmcubGVuZ3RoKSB7XG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICBgQmFzZTY0IHN0cmluZyBoYXMgdHJhaWxpbmcgZ2FyYmFnZSAke3N0cmluZy5zdWJzdHIoXG4gICAgICAgIGkzXG4gICAgICApfSBpbiBzdHJpbmcgJHtuYW1lfWBcbiAgICApO1xuICB9XG4gIHJldHVybiBkYXRhLnN1YmFycmF5KDAsIGopO1xufTtcbnZhciBhZGFwdERlY29kZXIgPSAobmF0aXZlRGVjb2RlQmFzZTY0KSA9PiAoLi4uYXJncykgPT4ge1xuICBjb25zdCBkZWNvZGVkID0gbmF0aXZlRGVjb2RlQmFzZTY0KC4uLmFyZ3MpO1xuICBpZiAoZGVjb2RlZCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICByZXR1cm4gZGVjb2RlZDtcbiAgfVxuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZGVjb2RlZCk7XG59O1xudmFyIGRlY29kZUJhc2U2NCA9IGdsb2JhbFRoaXMuQmFzZTY0ICE9PSB2b2lkIDAgPyBhZGFwdERlY29kZXIoZ2xvYmFsVGhpcy5CYXNlNjQuZGVjb2RlKSA6IGpzRGVjb2RlQmFzZTY0O1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvQGVuZG8vYmFzZTY0L2F0b2IuanMqL1xudmFyIGF0b2IyID0gKGVuY29kZWREYXRhKSA9PiB7XG4gIGNvbnN0IGJ1ZiA9IGRlY29kZUJhc2U2NChlbmNvZGVkRGF0YSk7XG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKC4uLmJ1Zik7XG59O1xuXG4vKiAuLi9uZXR3b3JrL3NyYy9ieXRlcy5qcyovXG52YXIgY29lcmNlVG9CeXRlQXJyYXkgPSAoY29udGVudHMpID0+IHtcbiAgaWYgKHR5cGVvZiBjb250ZW50cyA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oY29udGVudHMsIChjMikgPT4ge1xuICAgICAgY29uc3QgYjMgPSBjMi5jaGFyQ29kZUF0KDApO1xuICAgICAgYjMgPD0gMjU1IHx8IHRocm93UmVkYWN0ZWRgY2hhcmFjdGVyIGNhbm5vdCBiZSBjb2VyY2VkIHRvIGFuIG9jdGV0OiAke2MyfWA7XG4gICAgICByZXR1cm4gYjM7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoY29udGVudHMgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFxuICAgICAgY29udGVudHMuYnVmZmVyLFxuICAgICAgY29udGVudHMuYnl0ZU9mZnNldCxcbiAgICAgIGNvbnRlbnRzLmJ5dGVMZW5ndGhcbiAgICApO1xuICB9XG4gIHJldHVybiBuZXcgVWludDhBcnJheShjb250ZW50cyk7XG59O1xuZnVuY3Rpb24gdG9CeXRlcyhieXRlU291cmNlKSB7XG4gIGNvbnN0IGJ1ZiA9IGNvZXJjZVRvQnl0ZUFycmF5KGJ5dGVTb3VyY2UpO1xuICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSguLi5idWYpO1xufVxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyhzdHJpbmcpIHtcbiAgcmV0dXJuIHRvQnl0ZXMoZGVjb2RlQmFzZTY0KHN0cmluZykpO1xufVxuXG4vKiAuLi9uZXR3b3JrL3NyYy9zaGFwZXMuanMqL1xudmFyIFNoYXBlMSA9IChcbiAgLyoqIEB0eXBlIHtjb25zdH0gKi9cbiAge1xuICAgIC8qKlxuICogRGF0YSBpcyBzdHJpbmcgfCBCdWZmZXIgfCBBcnJheUJ1ZmZlclxuICogYnV0IG9ubHkgc3RyaW5nIGlzIHBhc3NhYmxlXG4gKi9cbiAgICBEYXRhOiBNLnN0cmluZygpLFxuICAgIEJ5dGVzOiBNLnN0cmluZygpLFxuICAgIEVuZHBvaW50OiBNLnN0cmluZygpLFxuICAgIFZvdzogTS50YWdnZWQoXG4gICAgICBcIlZvd1wiLFxuICAgICAgaGFyZGVuKHtcbiAgICAgICAgdm93VjA6IE0ucmVtb3RhYmxlKFwiVm93VjBcIilcbiAgICAgIH0pXG4gICAgKSxcbiAgICBDb25uZWN0aW9uSGFuZGxlcjogTS5yZW1vdGFibGUoXCJDb25uZWN0aW9uSGFuZGxlclwiKSxcbiAgICBDb25uZWN0aW9uOiBNLnJlbW90YWJsZShcIkNvbm5lY3Rpb25cIiksXG4gICAgSW5ib3VuZEF0dGVtcHQ6IE0ucmVtb3RhYmxlKFwiSW5ib3VuZEF0dGVtcHRcIiksXG4gICAgTGlzdGVuZXI6IE0ucmVtb3RhYmxlKFwiTGlzdGVuZXJcIiksXG4gICAgTGlzdGVuSGFuZGxlcjogTS5yZW1vdGFibGUoXCJMaXN0ZW5IYW5kbGVyXCIpLFxuICAgIFBvcnQ6IE0ucmVtb3RhYmxlKFwiUG9ydFwiKSxcbiAgICBQcm90b2NvbEhhbmRsZXI6IE0ucmVtb3RhYmxlKFwiUHJvdG9jb2xIYW5kbGVyXCIpLFxuICAgIFByb3RvY29sSW1wbDogTS5yZW1vdGFibGUoXCJQcm90b2NvbEltcGxcIilcbiAgfVxuKTtcbnZhciBTZW5kT3B0aW9uc1NoYXBlID0gTS5zcGxpdFJlY29yZChcbiAge30sXG4gIHsgcmVsYXRpdmVUaW1lb3V0TnM6IE0uYmlnaW50KCkgfVxuKTtcbnZhciBTaGFwZTIgPSAoXG4gIC8qKiBAdHlwZSB7Y29uc3R9ICovXG4gIHtcbiAgICAuLi5TaGFwZTEsXG4gICAgVm93JDogKHNoYXBlKSA9PiBNLm9yKHNoYXBlLCBTaGFwZTEuVm93KSxcbiAgICBBdHRlbXB0RGVzY3JpcHRpb246IE0uc3BsaXRSZWNvcmQoXG4gICAgICB7IGhhbmRsZXI6IFNoYXBlMS5Db25uZWN0aW9uSGFuZGxlciB9LFxuICAgICAgeyByZW1vdGVBZGRyZXNzOiBTaGFwZTEuRW5kcG9pbnQsIGxvY2FsQWRkcmVzczogU2hhcGUxLkVuZHBvaW50IH1cbiAgICApLFxuICAgIE9wdHM6IFNlbmRPcHRpb25zU2hhcGVcbiAgfVxuKTtcbnZhciBTaGFwZSA9IChcbiAgLyoqIEB0eXBlIHtjb25zdH0gKi9cbiAgaGFyZGVuKHtcbiAgICAuLi5TaGFwZTIsXG4gICAgQ29ubmVjdGlvbkk6IHtcbiAgICAgIGNvbm5lY3Rpb246IE0uaW50ZXJmYWNlKFwiQ29ubmVjdGlvblwiLCB7XG4gICAgICAgIHNlbmQ6IE0uY2FsbFdoZW4oU2hhcGUyLkRhdGEpLm9wdGlvbmFsKFNoYXBlMi5PcHRzKS5yZXR1cm5zKFNoYXBlMi5Wb3ckKFNoYXBlMi5CeXRlcykpLFxuICAgICAgICBjbG9zZTogTS5jYWxsV2hlbigpLnJldHVybnMoU2hhcGUyLlZvdyQoTS51bmRlZmluZWQoKSkpLFxuICAgICAgICBnZXRMb2NhbEFkZHJlc3M6IE0uY2FsbCgpLnJldHVybnMoU2hhcGUyLkVuZHBvaW50KSxcbiAgICAgICAgZ2V0UmVtb3RlQWRkcmVzczogTS5jYWxsKCkucmV0dXJucyhTaGFwZTIuRW5kcG9pbnQpXG4gICAgICB9KSxcbiAgICAgIG9wZW5Db25uZWN0aW9uQWNrV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJPcGVuQ29ubmVjdGlvbkFja1dhdGNoZXJcIiwge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uYW55KCkpLnJlc3QoTS5hbnkoKSkucmV0dXJucyhNLmFueSgpKVxuICAgICAgfSksXG4gICAgICByZXRocm93VW5sZXNzTWlzc2luZ1dhdGNoZXI6IE0uaW50ZXJmYWNlKFwiUmV0aHJvd1VubGVzc01pc3NpbmdXYXRjaGVyXCIsIHtcbiAgICAgICAgb25SZWplY3RlZDogTS5jYWxsKE0uYW55KCkpLnJlc3QoTS5hbnkoKSkucmV0dXJucyhNLmFueSgpKVxuICAgICAgfSksXG4gICAgICBzaW5rV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJTaW5rV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hbnkoKSkucmVzdChNLmFueSgpKS5yZXR1cm5zKClcbiAgICAgIH0pXG4gICAgfSxcbiAgICBJbmJvdW5kQXR0ZW1wdEk6IHtcbiAgICAgIGluYm91bmRBdHRlbXB0OiBNLmludGVyZmFjZShcIkluYm91bmRBdHRlbXB0XCIsIHtcbiAgICAgICAgYWNjZXB0OiBNLmNhbGxXaGVuKFNoYXBlMi5BdHRlbXB0RGVzY3JpcHRpb24pLnJldHVybnMoXG4gICAgICAgICAgU2hhcGUyLlZvdyQoU2hhcGUyLkNvbm5lY3Rpb24pXG4gICAgICAgICksXG4gICAgICAgIGdldExvY2FsQWRkcmVzczogTS5jYWxsKCkucmV0dXJucyhTaGFwZTIuRW5kcG9pbnQpLFxuICAgICAgICBnZXRSZW1vdGVBZGRyZXNzOiBNLmNhbGwoKS5yZXR1cm5zKFNoYXBlMi5FbmRwb2ludCksXG4gICAgICAgIGNsb3NlOiBNLmNhbGxXaGVuKCkucmV0dXJucyhTaGFwZTIuVm93JChNLnVuZGVmaW5lZCgpKSlcbiAgICAgIH0pLFxuICAgICAgaW5ib3VuZEF0dGVtcHRBY2NlcHRXYXRjaGVyOiBNLmludGVyZmFjZShcIkluYm91bmRBdHRlbXB0QWNjZXB0V2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hbnkoKSkucmVzdChNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICB9KSxcbiAgICAgIHJldGhyb3dVbmxlc3NNaXNzaW5nV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJSZXRocm93VW5sZXNzTWlzc2luZ1dhdGNoZXJcIiwge1xuICAgICAgICBvblJlamVjdGVkOiBNLmNhbGwoTS5hbnkoKSkucmVzdChNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICB9KSxcbiAgICAgIHNpbmtXYXRjaGVyOiBNLmludGVyZmFjZShcIlNpbmtXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFueSgpKS5yZXN0KE0uYW55KCkpLnJldHVybnMoKVxuICAgICAgfSlcbiAgICB9LFxuICAgIFBvcnRJOiB7XG4gICAgICBwb3J0OiBNLmludGVyZmFjZShcIlBvcnRcIiwge1xuICAgICAgICBnZXRMb2NhbEFkZHJlc3M6IE0uY2FsbCgpLnJldHVybnMoU2hhcGUyLkVuZHBvaW50KSxcbiAgICAgICAgYWRkTGlzdGVuZXI6IE0uY2FsbFdoZW4oU2hhcGUyLkxpc3RlbmVyKS5yZXR1cm5zKFxuICAgICAgICAgIFNoYXBlMi5Wb3ckKE0udW5kZWZpbmVkKCkpXG4gICAgICAgICksXG4gICAgICAgIGNvbm5lY3Q6IE0uY2FsbFdoZW4oU2hhcGUyLkVuZHBvaW50KS5vcHRpb25hbChTaGFwZTIuQ29ubmVjdGlvbkhhbmRsZXIpLnJldHVybnMoU2hhcGUyLlZvdyQoU2hhcGUyLkNvbm5lY3Rpb24pKSxcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXI6IE0uY2FsbFdoZW4oU2hhcGUyLkxpc3RlbmVyKS5yZXR1cm5zKFxuICAgICAgICAgIFNoYXBlMi5Wb3ckKE0udW5kZWZpbmVkKCkpXG4gICAgICAgICksXG4gICAgICAgIHJldm9rZTogTS5jYWxsV2hlbigpLnJldHVybnMoU2hhcGUyLlZvdyQoTS51bmRlZmluZWQoKSkpXG4gICAgICB9KSxcbiAgICAgIHBvcnRBZGRMaXN0ZW5lcldhdGNoZXI6IE0uaW50ZXJmYWNlKFwiUG9ydEFkZExpc3RlbmVyV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hbnkoKSkucmVzdChNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICB9KSxcbiAgICAgIHBvcnRSZW1vdmVMaXN0ZW5lcldhdGNoZXI6IE0uaW50ZXJmYWNlKFwiUG9ydFJlbW92ZUxpc3RlbmVyV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hbnkoKSkucmVzdChNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICB9KSxcbiAgICAgIHBvcnRDb25uZWN0V2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJQb3J0Q29ubmVjdFdhdGNoZXJcIiwge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uYW55KCkpLnJlc3QoTS5hbnkoKSkucmV0dXJucyhNLmFueSgpKVxuICAgICAgfSksXG4gICAgICBwb3J0UmV2b2tlV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJQb3J0UmV2b2tlV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hbnkoKSkucmVzdChNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICB9KSxcbiAgICAgIHBvcnRSZXZva2VDbGVhbnVwV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJQb3J0UmV2b2tlQ2xlYW51cFdhdGNoZXJcIiwge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uYW55KCkpLnJlc3QoTS5hbnkoKSkucmV0dXJucyhNLmFueSgpKVxuICAgICAgfSksXG4gICAgICByZXRocm93VW5sZXNzTWlzc2luZ1dhdGNoZXI6IE0uaW50ZXJmYWNlKFwiUmV0aHJvd1VubGVzc01pc3NpbmdXYXRjaGVyXCIsIHtcbiAgICAgICAgb25SZWplY3RlZDogTS5jYWxsKE0uYW55KCkpLnJlc3QoTS5hbnkoKSkucmV0dXJucyhNLmFueSgpKVxuICAgICAgfSksXG4gICAgICBzaW5rV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJTaW5rV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hbnkoKSkucmVzdChNLmFueSgpKS5yZXR1cm5zKCksXG4gICAgICAgIG9uUmVqZWN0ZWQ6IE0uY2FsbChNLmFueSgpKS5yZXN0KE0uYW55KCkpLnJldHVybnMoTS5hbnkoKSlcbiAgICAgIH0pXG4gICAgfSxcbiAgICBQcm90b2NvbEhhbmRsZXJJOiB7XG4gICAgICBwcm90b2NvbEhhbmRsZXI6IE0uaW50ZXJmYWNlKFwiUHJvdG9jb2xIYW5kbGVyXCIsIHtcbiAgICAgICAgb25DcmVhdGU6IE0uY2FsbFdoZW4oTS5yZW1vdGFibGUoKSwgU2hhcGUyLlByb3RvY29sSGFuZGxlcikucmV0dXJucyhcbiAgICAgICAgICBTaGFwZTIuVm93JChNLnVuZGVmaW5lZCgpKVxuICAgICAgICApLFxuICAgICAgICBnZW5lcmF0ZVBvcnRJRDogTS5jYWxsV2hlbihcbiAgICAgICAgICBTaGFwZTIuRW5kcG9pbnQsXG4gICAgICAgICAgU2hhcGUyLlByb3RvY29sSGFuZGxlclxuICAgICAgICApLnJldHVybnMoU2hhcGUyLlZvdyQoTS5zdHJpbmcoKSkpLFxuICAgICAgICBvbkJpbmQ6IE0uY2FsbFdoZW4oXG4gICAgICAgICAgU2hhcGUyLlBvcnQsXG4gICAgICAgICAgU2hhcGUyLkVuZHBvaW50LFxuICAgICAgICAgIFNoYXBlMi5Qcm90b2NvbEhhbmRsZXJcbiAgICAgICAgKS5yZXR1cm5zKFNoYXBlMi5Wb3ckKE0udW5kZWZpbmVkKCkpKSxcbiAgICAgICAgb25MaXN0ZW46IE0uY2FsbFdoZW4oXG4gICAgICAgICAgU2hhcGUyLlBvcnQsXG4gICAgICAgICAgU2hhcGUyLkVuZHBvaW50LFxuICAgICAgICAgIFNoYXBlMi5MaXN0ZW5IYW5kbGVyLFxuICAgICAgICAgIFNoYXBlMi5Qcm90b2NvbEhhbmRsZXJcbiAgICAgICAgKS5yZXR1cm5zKFNoYXBlMi5Wb3ckKE0udW5kZWZpbmVkKCkpKSxcbiAgICAgICAgb25MaXN0ZW5SZW1vdmU6IE0uY2FsbFdoZW4oXG4gICAgICAgICAgU2hhcGUyLlBvcnQsXG4gICAgICAgICAgU2hhcGUyLkVuZHBvaW50LFxuICAgICAgICAgIFNoYXBlMi5MaXN0ZW5IYW5kbGVyLFxuICAgICAgICAgIFNoYXBlMi5Qcm90b2NvbEhhbmRsZXJcbiAgICAgICAgKS5yZXR1cm5zKFNoYXBlMi5Wb3ckKE0udW5kZWZpbmVkKCkpKSxcbiAgICAgICAgb25JbnN0YW50aWF0ZTogTS5jYWxsV2hlbihcbiAgICAgICAgICBTaGFwZTIuUG9ydCxcbiAgICAgICAgICBTaGFwZTIuRW5kcG9pbnQsXG4gICAgICAgICAgU2hhcGUyLkVuZHBvaW50LFxuICAgICAgICAgIFNoYXBlMi5Qcm90b2NvbEhhbmRsZXJcbiAgICAgICAgKS5yZXR1cm5zKFNoYXBlMi5Wb3ckKFNoYXBlMi5FbmRwb2ludCkpLFxuICAgICAgICBvbkNvbm5lY3Q6IE0uY2FsbFdoZW4oXG4gICAgICAgICAgU2hhcGUyLlBvcnQsXG4gICAgICAgICAgU2hhcGUyLkVuZHBvaW50LFxuICAgICAgICAgIFNoYXBlMi5FbmRwb2ludCxcbiAgICAgICAgICBTaGFwZTIuQ29ubmVjdGlvbkhhbmRsZXIsXG4gICAgICAgICAgU2hhcGUyLlByb3RvY29sSGFuZGxlclxuICAgICAgICApLnJldHVybnMoU2hhcGUyLlZvdyQoU2hhcGUyLkF0dGVtcHREZXNjcmlwdGlvbikpLFxuICAgICAgICBvblJldm9rZTogTS5jYWxsV2hlbihcbiAgICAgICAgICBTaGFwZTIuUG9ydCxcbiAgICAgICAgICBTaGFwZTIuRW5kcG9pbnQsXG4gICAgICAgICAgU2hhcGUyLlByb3RvY29sSGFuZGxlclxuICAgICAgICApLnJldHVybnMoU2hhcGUyLlZvdyQoTS51bmRlZmluZWQoKSkpXG4gICAgICB9KSxcbiAgICAgIHByb3RvY29sSGFuZGxlckFjY2VwdFdhdGNoZXI6IE0uaW50ZXJmYWNlKFwiUHJvdG9jb2xIYW5kbGVyQWNjZXB0V2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hbnkoKSkucmVzdChNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICB9KSxcbiAgICAgIHByb3RvY29sSGFuZGxlckluc3RhbnRpYXRlV2F0Y2hlcjogTS5pbnRlcmZhY2UoXG4gICAgICAgIFwiUHJvdG9jb2xIYW5kbGVySW5zdGFudGlhdGVXYXRjaGVyXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uYW55KCkpLnJlc3QoTS5hbnkoKSkucmV0dXJucyhNLmFueSgpKVxuICAgICAgICB9XG4gICAgICApLFxuICAgICAgcHJvdG9jb2xIYW5kbGVyQ29ubmVjdFdhdGNoZXI6IE0uaW50ZXJmYWNlKFxuICAgICAgICBcIlByb3RvY29sSGFuZGxlckNvbm5lY3RXYXRjaGVyXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uYW55KCkpLnJlc3QoTS5hbnkoKSkucmV0dXJucyhNLmFueSgpKVxuICAgICAgICB9XG4gICAgICApLFxuICAgICAgcmV0aHJvd1VubGVzc01pc3NpbmdXYXRjaGVyOiBNLmludGVyZmFjZShcIlJldGhyb3dVbmxlc3NNaXNzaW5nV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uUmVqZWN0ZWQ6IE0uY2FsbChNLmFueSgpKS5yZXN0KE0uYW55KCkpLnJldHVybnMoTS5hbnkoKSlcbiAgICAgIH0pXG4gICAgfSxcbiAgICBQcm90b2NvbEltcGxJOiBNLmludGVyZmFjZShcIlByb3RvY29sSW1wbFwiLCB7XG4gICAgICBiaW5kUG9ydDogTS5jYWxsV2hlbihTaGFwZTIuRW5kcG9pbnQpLnJldHVybnMoU2hhcGUyLlZvdyQoU2hhcGUyLlBvcnQpKSxcbiAgICAgIGluYm91bmQ6IE0uY2FsbFdoZW4oU2hhcGUyLkVuZHBvaW50LCBTaGFwZTIuRW5kcG9pbnQpLnJldHVybnMoXG4gICAgICAgIFNoYXBlMi5Wb3ckKFNoYXBlMi5JbmJvdW5kQXR0ZW1wdClcbiAgICAgICksXG4gICAgICBvdXRib3VuZDogTS5jYWxsV2hlbihcbiAgICAgICAgU2hhcGUyLlBvcnQsXG4gICAgICAgIFNoYXBlMi5FbmRwb2ludCxcbiAgICAgICAgU2hhcGUyLkNvbm5lY3Rpb25IYW5kbGVyXG4gICAgICApLnJldHVybnMoU2hhcGUyLlZvdyQoU2hhcGUyLkNvbm5lY3Rpb24pKVxuICAgIH0pXG4gIH0pXG4pO1xuXG4vKiAuLi9uZXR3b3JrL3NyYy9uZXR3b3JrLmpzKi9cbnZhciBzaW5rID0gKCkgPT4ge1xufTtcbmhhcmRlbihzaW5rKTtcbnZhciBDTE9TRV9SRUFTT05fRklOQUxJWkVSID0gXCJjbG9zZWQtYnktZmluYWxpemVyXCI7XG52YXIgUmV2b2tlU3RhdGUgPSAoXG4gIC8qKiBAdHlwZSB7Y29uc3R9ICovXG4gIHtcbiAgICBOT1RfUkVWT0tFRDogMCxcbiAgICBSRVZPS0lORzogMSxcbiAgICBSRVZPS0VEOiAyXG4gIH1cbik7XG5oYXJkZW4oUmV2b2tlU3RhdGUpO1xudmFyIHByZXBhcmVGaW5hbGl6ZXIgPSAoem9uZSwgeyB3YXRjaCB9KSA9PiB7XG4gIGNvbnN0IG9ialRvRmluYWxpemVySW5mbyA9IHpvbmUubWFwU3RvcmUoXCJvYmpUb0ZpbmFsaXplckluZm9cIik7XG4gIHJldHVybiB6b25lLmV4byhcIk5ldHdvcmtGaW5hbGl6ZXJcIiwgdm9pZCAwLCB7XG4gICAgaGFzKG9iaikge1xuICAgICAgcmV0dXJuIG9ialRvRmluYWxpemVySW5mby5oYXMob2JqKTtcbiAgICB9LFxuICAgIC8qKlxuICogQWRkIGEgY29ubmVjdGlvbiBhbmQgaGFuZGxlciBmb3IgYW4gYG9uQ2xvc2VgIG1ldGhvZCB0byBiZSBjYWxsZWQgdXBvblxuICogZmluYWxpemF0aW9uLlxuICogQHBhcmFtIHtSZW1vdGU8Q29ubmVjdGlvbj59IGNvbm5cbiAqIEBwYXJhbSB7UmVtb3RlPFJlcXVpcmVkPENvbm5lY3Rpb25IYW5kbGVyPj59IGhhbmRsZXJcbiAqL1xuICAgIGluaXRDb25uZWN0aW9uKGNvbm4sIGhhbmRsZXIpIHtcbiAgICAgIG9ialRvRmluYWxpemVySW5mby5pbml0KGNvbm4sIGhhcmRlbih7IGNvbm4sIGhhbmRsZXIgfSkpO1xuICAgIH0sXG4gICAgLyoqXG4gKiBBZGQgYW4gb2JqZWN0IHdpdGggYSBgY2xvc2VgIG1ldGhvZCB0byBiZSBjYWxsZWQgKHN1Y2ggYXMgYW5cbiAqIGBpbmJvdW5kQXR0ZW1wdGApIHVwb24gZmluYWxpemF0aW9uLlxuICogQHBhcmFtIHtSZW1vdGU8eyBjbG9zZSgpOiBQcm9taXNlVm93PGFueT4gfT59IGNsb3NlclxuICovXG4gICAgaW5pdENsb3NlcihjbG9zZXIpIHtcbiAgICAgIG9ialRvRmluYWxpemVySW5mby5pbml0KGNsb3NlciwgaGFyZGVuKHsgY2xvc2VyIH0pKTtcbiAgICB9LFxuICAgIGZpbmFsaXplKG9iaikge1xuICAgICAgaWYgKCFvYmpUb0ZpbmFsaXplckluZm8uaGFzKG9iaikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgZGlzcG9zZUluZm8gPSBvYmpUb0ZpbmFsaXplckluZm8uZ2V0KG9iaik7XG4gICAgICBpZiAoXCJjb25uXCIgaW4gZGlzcG9zZUluZm8pIHtcbiAgICAgICAgY29uc3QgeyBjb25uLCBoYW5kbGVyIH0gPSBkaXNwb3NlSW5mbztcbiAgICAgICAgb2JqVG9GaW5hbGl6ZXJJbmZvLmRlbGV0ZShvYmopO1xuICAgICAgICByZXR1cm4gd2F0Y2goRShoYW5kbGVyKS5vbkNsb3NlKGNvbm4sIENMT1NFX1JFQVNPTl9GSU5BTElaRVIsIGhhbmRsZXIpKTtcbiAgICAgIH0gZWxzZSBpZiAoXCJjbG9zZXJcIiBpbiBkaXNwb3NlSW5mbykge1xuICAgICAgICBjb25zdCB7IGNsb3NlciB9ID0gZGlzcG9zZUluZm87XG4gICAgICAgIG9ialRvRmluYWxpemVySW5mby5kZWxldGUob2JqKTtcbiAgICAgICAgcmV0dXJuIHdhdGNoKEUoY2xvc2VyKS5jbG9zZSgpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVucGluKG9iaikge1xuICAgICAgb2JqVG9GaW5hbGl6ZXJJbmZvLmRlbGV0ZShvYmopO1xuICAgIH1cbiAgfSk7XG59O1xuaGFyZGVuKHByZXBhcmVGaW5hbGl6ZXIpO1xuXG4vKiAuLi9uZXR3b3JrL3NyYy9yb3V0ZXIuanMqL1xudmFyIFJvdXRlckkgPSBNLmludGVyZmFjZShcIlJvdXRlclwiLCB7XG4gIGdldFJvdXRlczogTS5jYWxsKFNoYXBlLkVuZHBvaW50KS5yZXR1cm5zKE0uYXJyYXlPZihbTS5zdHJpbmcoKSwgTS5hbnkoKV0pKSxcbiAgcmVnaXN0ZXI6IE0uY2FsbChNLnN0cmluZygpLCBNLmFueSgpKS5yZXR1cm5zKE0udW5kZWZpbmVkKCkpLFxuICB1bnJlZ2lzdGVyOiBNLmNhbGwoTS5zdHJpbmcoKSwgTS5hbnkoKSkucmV0dXJucyhNLnVuZGVmaW5lZCgpKVxufSk7XG5cbi8qIC4uL3ZhdC1kYXRhL3NyYy92YXQtZGF0YS1iaW5kaW5ncy5qcyovXG52YXIgVmF0RGF0YUdsb2JhbDtcbmlmIChcIlZhdERhdGFcIiBpbiBnbG9iYWxUaGlzKSB7XG4gIGdsb2JhbFRoaXMuVmF0RGF0YSB8fCB0aHJvd1JlZGFjdGVkYFZhdERhdGEgZGVmaW5lZCBpbiBnbG9iYWwgYXMgbnVsbCBvciB1bmRlZmluZWRgO1xuICBWYXREYXRhR2xvYmFsID0gLyoqIEB0eXBlIHthbnl9ICovXG4gIGdsb2JhbFRoaXMuVmF0RGF0YTtcbn0gZWxzZSB7XG4gIGNvbnN0IHVuYXZhaWxhYmxlID0gKCkgPT4gdGhyb3dSZWRhY3RlZGBWYXREYXRhIHVuYXZhaWxhYmxlYDtcbiAgVmF0RGF0YUdsb2JhbCA9IHtcbiAgICBkZWZpbmVLaW5kOiB1bmF2YWlsYWJsZSxcbiAgICBkZWZpbmVLaW5kTXVsdGk6IHVuYXZhaWxhYmxlLFxuICAgIGRlZmluZUR1cmFibGVLaW5kOiB1bmF2YWlsYWJsZSxcbiAgICBkZWZpbmVEdXJhYmxlS2luZE11bHRpOiB1bmF2YWlsYWJsZSxcbiAgICBtYWtlS2luZEhhbmRsZTogdW5hdmFpbGFibGUsXG4gICAgcHJvdmlkZVByb21pc2VXYXRjaGVyOiB1bmF2YWlsYWJsZSxcbiAgICB3YXRjaFByb21pc2U6IHVuYXZhaWxhYmxlLFxuICAgIG1ha2VTY2FsYXJCaWdNYXBTdG9yZTogdW5hdmFpbGFibGUsXG4gICAgbWFrZVNjYWxhckJpZ1dlYWtNYXBTdG9yZTogdW5hdmFpbGFibGUsXG4gICAgbWFrZVNjYWxhckJpZ1NldFN0b3JlOiB1bmF2YWlsYWJsZSxcbiAgICBtYWtlU2NhbGFyQmlnV2Vha1NldFN0b3JlOiB1bmF2YWlsYWJsZSxcbiAgICBjYW5CZUR1cmFibGU6IHVuYXZhaWxhYmxlXG4gIH07XG59XG52YXIgVmF0RGF0YUV4cG9ydCA9IFZhdERhdGFHbG9iYWw7XG52YXIge1xuICBkZWZpbmVLaW5kLFxuICBkZWZpbmVLaW5kTXVsdGksXG4gIGRlZmluZUR1cmFibGVLaW5kLFxuICBkZWZpbmVEdXJhYmxlS2luZE11bHRpXG59ID0gVmF0RGF0YUdsb2JhbDtcbnZhciB7XG4gIG1ha2VLaW5kSGFuZGxlLFxuICBwcm92aWRlUHJvbWlzZVdhdGNoZXIsXG4gIHdhdGNoUHJvbWlzZTogd2F0Y2hQcm9taXNlMixcbiAgbWFrZVNjYWxhckJpZ01hcFN0b3JlLFxuICBtYWtlU2NhbGFyQmlnV2Vha01hcFN0b3JlLFxuICBtYWtlU2NhbGFyQmlnU2V0U3RvcmUsXG4gIG1ha2VTY2FsYXJCaWdXZWFrU2V0U3RvcmUsXG4gIGNhbkJlRHVyYWJsZVxufSA9IFZhdERhdGFHbG9iYWw7XG52YXIgcGlja0ZhY2V0ID0gKG1ha2VyLCBmYWNldE5hbWUpID0+ICguLi5hcmdzKSA9PiBtYWtlciguLi5hcmdzKVtmYWNldE5hbWVdO1xuaGFyZGVuKHBpY2tGYWNldCk7XG52YXIgcGFydGlhbEFzc2lnbiA9ICh0YXJnZXQsIHNvdXJjZSkgPT4ge1xuICBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKTtcbn07XG5oYXJkZW4ocGFydGlhbEFzc2lnbik7XG52YXIgcHJvdmlkZSA9IChcbiAgLyogWFhYIGNhc3QgYmVjYXVzZSBwcm92aWRlTGF6eSBpcyBgYW55YCBkdWUgdG8gYnJva2VuIHR5cGUgaW1wb3J0Ki9cbiAgLyoqXG4gKiBAdHlwZSB7PEssIFY+KFxuICogICBiYWdnYWdlOiBCYWdnYWdlLFxuICogICBrZXk6IEssXG4gKiAgIG1ha2VWYWx1ZTogKGtleTogSykgPT4gVixcbiAqICkgPT4gVn1cbiAqL1xuICBwcm92aWRlTGF6eVxuKTtcbnZhciBtYWtlU3RvcmVVdGlscyA9IChWYXREYXRhKSA9PiB7XG4gIGNvbnN0IHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93IC0tIHRoZXNlIGxpdGVyYWxseSBkbyBzaGFkb3cgdGhlIGdsb2JhbHMqL1xuICAgIG1ha2VTY2FsYXJCaWdNYXBTdG9yZTogbWFrZVNjYWxhckJpZ01hcFN0b3JlMixcbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93IC0tIHRoZXNlIGxpdGVyYWxseSBkbyBzaGFkb3cgdGhlIGdsb2JhbHMqL1xuICAgIG1ha2VTY2FsYXJCaWdXZWFrTWFwU3RvcmU6IG1ha2VTY2FsYXJCaWdXZWFrTWFwU3RvcmUyLFxuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3cgLS0gdGhlc2UgbGl0ZXJhbGx5IGRvIHNoYWRvdyB0aGUgZ2xvYmFscyovXG4gICAgbWFrZVNjYWxhckJpZ1NldFN0b3JlOiBtYWtlU2NhbGFyQmlnU2V0U3RvcmUyLFxuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3cgLS0gdGhlc2UgbGl0ZXJhbGx5IGRvIHNoYWRvdyB0aGUgZ2xvYmFscyovXG4gICAgbWFrZVNjYWxhckJpZ1dlYWtTZXRTdG9yZTogbWFrZVNjYWxhckJpZ1dlYWtTZXRTdG9yZTJcbiAgfSA9IFZhdERhdGE7XG4gIGNvbnN0IHByb3ZpZGVEdXJhYmxlTWFwU3RvcmUyID0gKGJhZ2dhZ2UsIG5hbWUsIG9wdGlvbnMgPSB7fSkgPT4gcHJvdmlkZShcbiAgICBiYWdnYWdlLFxuICAgIG5hbWUsXG4gICAgKCkgPT4gbWFrZVNjYWxhckJpZ01hcFN0b3JlMihuYW1lLCB7IGR1cmFibGU6IHRydWUsIC4uLm9wdGlvbnMgfSlcbiAgKTtcbiAgaGFyZGVuKHByb3ZpZGVEdXJhYmxlTWFwU3RvcmUyKTtcbiAgY29uc3QgcHJvdmlkZUR1cmFibGVXZWFrTWFwU3RvcmUyID0gKGJhZ2dhZ2UsIG5hbWUsIG9wdGlvbnMgPSB7fSkgPT4gcHJvdmlkZShcbiAgICBiYWdnYWdlLFxuICAgIG5hbWUsXG4gICAgKCkgPT4gbWFrZVNjYWxhckJpZ1dlYWtNYXBTdG9yZTIobmFtZSwgeyBkdXJhYmxlOiB0cnVlLCAuLi5vcHRpb25zIH0pXG4gICk7XG4gIGhhcmRlbihwcm92aWRlRHVyYWJsZVdlYWtNYXBTdG9yZTIpO1xuICBjb25zdCBwcm92aWRlRHVyYWJsZVNldFN0b3JlMiA9IChiYWdnYWdlLCBuYW1lLCBvcHRpb25zID0ge30pID0+IHByb3ZpZGUoXG4gICAgYmFnZ2FnZSxcbiAgICBuYW1lLFxuICAgICgpID0+IG1ha2VTY2FsYXJCaWdTZXRTdG9yZTIobmFtZSwgeyBkdXJhYmxlOiB0cnVlLCAuLi5vcHRpb25zIH0pXG4gICk7XG4gIGhhcmRlbihwcm92aWRlRHVyYWJsZVNldFN0b3JlMik7XG4gIGNvbnN0IHByb3ZpZGVEdXJhYmxlV2Vha1NldFN0b3JlMiA9IChiYWdnYWdlLCBuYW1lLCBvcHRpb25zID0ge30pID0+IHByb3ZpZGUoXG4gICAgYmFnZ2FnZSxcbiAgICBuYW1lLFxuICAgICgpID0+IG1ha2VTY2FsYXJCaWdXZWFrU2V0U3RvcmUyKG5hbWUsIHsgZHVyYWJsZTogdHJ1ZSwgLi4ub3B0aW9ucyB9KVxuICApO1xuICBoYXJkZW4ocHJvdmlkZUR1cmFibGVXZWFrU2V0U3RvcmUyKTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgcHJvdmlkZUR1cmFibGVNYXBTdG9yZTogcHJvdmlkZUR1cmFibGVNYXBTdG9yZTIsXG4gICAgcHJvdmlkZUR1cmFibGVXZWFrTWFwU3RvcmU6IHByb3ZpZGVEdXJhYmxlV2Vha01hcFN0b3JlMixcbiAgICBwcm92aWRlRHVyYWJsZVNldFN0b3JlOiBwcm92aWRlRHVyYWJsZVNldFN0b3JlMixcbiAgICBwcm92aWRlRHVyYWJsZVdlYWtTZXRTdG9yZTogcHJvdmlkZUR1cmFibGVXZWFrU2V0U3RvcmUyXG4gIH0pO1xufTtcbnZhciBnbG9iYWxTdG9yZVV0aWxzID0gbWFrZVN0b3JlVXRpbHMoVmF0RGF0YUdsb2JhbCk7XG52YXIge1xuICBwcm92aWRlRHVyYWJsZU1hcFN0b3JlLFxuICBwcm92aWRlRHVyYWJsZVdlYWtNYXBTdG9yZSxcbiAgcHJvdmlkZUR1cmFibGVTZXRTdG9yZSxcbiAgcHJvdmlkZUR1cmFibGVXZWFrU2V0U3RvcmVcbn0gPSBnbG9iYWxTdG9yZVV0aWxzO1xuXG4vKiAuLi92YXQtZGF0YS9zcmMvZXhvLXV0aWxzLmpzKi9cbnZhciBpZ25vcmVDb250ZXh0ID0gKGZuKSA9PiAoX2NvbnRleHQsIC4uLmFyZ3MpID0+IGZuKC4uLmFyZ3MpO1xuaGFyZGVuKGlnbm9yZUNvbnRleHQpO1xudmFyIG1ha2VFeG9VdGlscyA9IChWYXREYXRhKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBkZWZpbmVLaW5kOiBkZWZpbmVLaW5kMixcbiAgICBkZWZpbmVLaW5kTXVsdGk6IGRlZmluZUtpbmRNdWx0aTIsXG4gICAgZGVmaW5lRHVyYWJsZUtpbmQ6IGRlZmluZUR1cmFibGVLaW5kMixcbiAgICBkZWZpbmVEdXJhYmxlS2luZE11bHRpOiBkZWZpbmVEdXJhYmxlS2luZE11bHRpMixcbiAgICBtYWtlS2luZEhhbmRsZTogbWFrZUtpbmRIYW5kbGUyXG4gIH0gPSBWYXREYXRhO1xuICBjb25zdCBwcm92aWRlS2luZEhhbmRsZTIgPSAoYmFnZ2FnZSwga2luZE5hbWUpID0+IHByb3ZpZGUoYmFnZ2FnZSwgYCR7a2luZE5hbWV9X2tpbmRIYW5kbGVgLCAoKSA9PiBtYWtlS2luZEhhbmRsZTIoa2luZE5hbWUpKTtcbiAgaGFyZGVuKHByb3ZpZGVLaW5kSGFuZGxlMik7XG4gIGNvbnN0IHByZXBhcmVLaW5kMiA9IChiYWdnYWdlLCBraW5kTmFtZSwgaW5pdCwgYmVoYXZpb3IsIG9wdGlvbnMgPSB2b2lkIDApID0+IGRlZmluZUR1cmFibGVLaW5kMihcbiAgICBwcm92aWRlS2luZEhhbmRsZTIoYmFnZ2FnZSwga2luZE5hbWUpLFxuICAgIGluaXQsXG4gICAgYmVoYXZpb3IsXG4gICAgb3B0aW9uc1xuICApO1xuICBoYXJkZW4ocHJlcGFyZUtpbmQyKTtcbiAgY29uc3QgcHJlcGFyZUtpbmRNdWx0aTIgPSAoYmFnZ2FnZSwga2luZE5hbWUsIGluaXQsIGJlaGF2aW9yLCBvcHRpb25zID0gdm9pZCAwKSA9PiBkZWZpbmVEdXJhYmxlS2luZE11bHRpMihcbiAgICBwcm92aWRlS2luZEhhbmRsZTIoYmFnZ2FnZSwga2luZE5hbWUpLFxuICAgIGluaXQsXG4gICAgYmVoYXZpb3IsXG4gICAgb3B0aW9uc1xuICApO1xuICBoYXJkZW4ocHJlcGFyZUtpbmRNdWx0aTIpO1xuICBjb25zdCBkZWZpbmVWaXJ0dWFsRXhvQ2xhc3MyID0gKHRhZywgaW50ZXJmYWNlR3VhcmQsIGluaXQsIG1ldGhvZHMsIG9wdGlvbnMpID0+IChcbiAgICAvKiBAdHMtZXhwZWN0LWVycm9yIGNhc3QqL1xuICAgIGRlZmluZUtpbmQyKHRhZywgaW5pdCwgbWV0aG9kcywge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHRoaXNmdWxNZXRob2RzOiB0cnVlLFxuICAgICAgaW50ZXJmYWNlR3VhcmRcbiAgICB9KVxuICApO1xuICBoYXJkZW4oZGVmaW5lVmlydHVhbEV4b0NsYXNzMik7XG4gIGNvbnN0IGRlZmluZVZpcnR1YWxFeG9DbGFzc0tpdDIgPSAodGFnLCBpbnRlcmZhY2VHdWFyZEtpdCwgaW5pdCwgZmFjZXRzLCBvcHRpb25zKSA9PiAoXG4gICAgLyogQHRzLWV4cGVjdC1lcnJvciBjYXN0Ki9cbiAgICBkZWZpbmVLaW5kTXVsdGkyKHRhZywgaW5pdCwgZmFjZXRzLCB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgdGhpc2Z1bE1ldGhvZHM6IHRydWUsXG4gICAgICBpbnRlcmZhY2VHdWFyZEtpdFxuICAgIH0pXG4gICk7XG4gIGhhcmRlbihkZWZpbmVWaXJ0dWFsRXhvQ2xhc3NLaXQyKTtcbiAgY29uc3QgZGVmaW5lRHVyYWJsZUV4b0NsYXNzMiA9IChraW5kSGFuZGxlLCBpbnRlcmZhY2VHdWFyZCwgaW5pdCwgbWV0aG9kcywgb3B0aW9ucykgPT4gKFxuICAgIC8qIEB0cy1leHBlY3QtZXJyb3IgY2FzdCovXG4gICAgZGVmaW5lRHVyYWJsZUtpbmQyKGtpbmRIYW5kbGUsIGluaXQsIG1ldGhvZHMsIHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICB0aGlzZnVsTWV0aG9kczogdHJ1ZSxcbiAgICAgIGludGVyZmFjZUd1YXJkXG4gICAgfSlcbiAgKTtcbiAgaGFyZGVuKGRlZmluZUR1cmFibGVFeG9DbGFzczIpO1xuICBjb25zdCBkZWZpbmVEdXJhYmxlRXhvQ2xhc3NLaXQyID0gKGtpbmRIYW5kbGUsIGludGVyZmFjZUd1YXJkS2l0LCBpbml0LCBmYWNldHMsIG9wdGlvbnMpID0+IChcbiAgICAvKiBAdHMtZXhwZWN0LWVycm9yIGNhc3QqL1xuICAgIGRlZmluZUR1cmFibGVLaW5kTXVsdGkyKGtpbmRIYW5kbGUsIGluaXQsIGZhY2V0cywge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHRoaXNmdWxNZXRob2RzOiB0cnVlLFxuICAgICAgaW50ZXJmYWNlR3VhcmRLaXRcbiAgICB9KVxuICApO1xuICBoYXJkZW4oZGVmaW5lRHVyYWJsZUV4b0NsYXNzS2l0Mik7XG4gIGNvbnN0IHByZXBhcmVFeG9DbGFzczIgPSAoYmFnZ2FnZSwga2luZE5hbWUsIGludGVyZmFjZUd1YXJkLCBpbml0LCBtZXRob2RzLCBvcHRpb25zID0gdm9pZCAwKSA9PiBkZWZpbmVEdXJhYmxlRXhvQ2xhc3MyKFxuICAgIHByb3ZpZGVLaW5kSGFuZGxlMihiYWdnYWdlLCBraW5kTmFtZSksXG4gICAgaW50ZXJmYWNlR3VhcmQsXG4gICAgaW5pdCxcbiAgICBtZXRob2RzLFxuICAgIG9wdGlvbnNcbiAgKTtcbiAgaGFyZGVuKHByZXBhcmVFeG9DbGFzczIpO1xuICBjb25zdCBwcmVwYXJlRXhvQ2xhc3NLaXQyID0gKGJhZ2dhZ2UsIGtpbmROYW1lLCBpbnRlcmZhY2VHdWFyZEtpdCwgaW5pdCwgZmFjZXRzLCBvcHRpb25zID0gdm9pZCAwKSA9PiBkZWZpbmVEdXJhYmxlRXhvQ2xhc3NLaXQyKFxuICAgIHByb3ZpZGVLaW5kSGFuZGxlMihiYWdnYWdlLCBraW5kTmFtZSksXG4gICAgaW50ZXJmYWNlR3VhcmRLaXQsXG4gICAgaW5pdCxcbiAgICBmYWNldHMsXG4gICAgb3B0aW9uc1xuICApO1xuICBoYXJkZW4ocHJlcGFyZUV4b0NsYXNzS2l0Mik7XG4gIGNvbnN0IHByZXBhcmVFeG8yID0gKGJhZ2dhZ2UsIGtpbmROYW1lLCBpbnRlcmZhY2VHdWFyZCwgbWV0aG9kcywgb3B0aW9ucyA9IHZvaWQgMCkgPT4ge1xuICAgIGNvbnN0IG1ha2VTaW5nbGV0b24gPSBwcmVwYXJlRXhvQ2xhc3MyKFxuICAgICAgYmFnZ2FnZSxcbiAgICAgIGtpbmROYW1lLFxuICAgICAgaW50ZXJmYWNlR3VhcmQsXG4gICAgICBpbml0RW1wdHksXG4gICAgICBtZXRob2RzLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gICAgcmV0dXJuIHByb3ZpZGUoYmFnZ2FnZSwgYCR7a2luZE5hbWV9X3NpbmdsZXRvbmAsICgpID0+IG1ha2VTaW5nbGV0b24oKSk7XG4gIH07XG4gIGhhcmRlbihwcmVwYXJlRXhvMik7XG4gIGNvbnN0IHByZXBhcmVTaW5nbGV0b24yID0gKGJhZ2dhZ2UsIGtpbmROYW1lLCBtZXRob2RzLCBvcHRpb25zID0gdm9pZCAwKSA9PiBwcmVwYXJlRXhvMihiYWdnYWdlLCBraW5kTmFtZSwgdm9pZCAwLCBtZXRob2RzLCBvcHRpb25zKTtcbiAgaGFyZGVuKHByZXBhcmVTaW5nbGV0b24yKTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgZGVmaW5lVmlydHVhbEV4b0NsYXNzOiBkZWZpbmVWaXJ0dWFsRXhvQ2xhc3MyLFxuICAgIGRlZmluZVZpcnR1YWxFeG9DbGFzc0tpdDogZGVmaW5lVmlydHVhbEV4b0NsYXNzS2l0MixcbiAgICBkZWZpbmVEdXJhYmxlRXhvQ2xhc3M6IGRlZmluZUR1cmFibGVFeG9DbGFzczIsXG4gICAgZGVmaW5lRHVyYWJsZUV4b0NsYXNzS2l0OiBkZWZpbmVEdXJhYmxlRXhvQ2xhc3NLaXQyLFxuICAgIHByZXBhcmVFeG9DbGFzczogcHJlcGFyZUV4b0NsYXNzMixcbiAgICBwcmVwYXJlRXhvQ2xhc3NLaXQ6IHByZXBhcmVFeG9DbGFzc0tpdDIsXG4gICAgcHJlcGFyZUV4bzogcHJlcGFyZUV4bzIsXG4gICAgcHJlcGFyZVNpbmdsZXRvbjogcHJlcGFyZVNpbmdsZXRvbjIsXG4gICAgcHJvdmlkZUtpbmRIYW5kbGU6IHByb3ZpZGVLaW5kSGFuZGxlMixcbiAgICBwcmVwYXJlS2luZDogcHJlcGFyZUtpbmQyLFxuICAgIHByZXBhcmVLaW5kTXVsdGk6IHByZXBhcmVLaW5kTXVsdGkyXG4gIH0pO1xufTtcbnZhciBnbG9iYWxFeG9VdGlscyA9IG1ha2VFeG9VdGlscyhWYXREYXRhRXhwb3J0KTtcbnZhciB7XG4gIGRlZmluZVZpcnR1YWxFeG9DbGFzcyxcbiAgZGVmaW5lVmlydHVhbEV4b0NsYXNzS2l0LFxuICBkZWZpbmVEdXJhYmxlRXhvQ2xhc3MsXG4gIGRlZmluZUR1cmFibGVFeG9DbGFzc0tpdCxcbiAgcHJlcGFyZUV4b0NsYXNzLFxuICBwcmVwYXJlRXhvQ2xhc3NLaXQsXG4gIHByZXBhcmVFeG8sXG4gIHByZXBhcmVTaW5nbGV0b25cbn0gPSBnbG9iYWxFeG9VdGlscztcbnZhciB7IHByb3ZpZGVLaW5kSGFuZGxlLCBwcmVwYXJlS2luZCwgcHJlcGFyZUtpbmRNdWx0aSB9ID0gZ2xvYmFsRXhvVXRpbHM7XG5cbi8qIC4uL29yY2hlc3RyYXRpb24vc3JjL3V0aWxzL2FkZHJlc3MuanMqL1xudmFyIGltcG9ydF9lbmNvZGluZyA9IF9fdG9FU00ocmVxdWlyZV9idWlsZCgpLCAxKTtcblxuLyogLi4vLi4vbm9kZV9tb2R1bGVzL2Jhc2UteC9zcmMvZXNtL2luZGV4LmpzKi9cbmZ1bmN0aW9uIGJhc2UoQUxQSEFCRVQyKSB7XG4gIGlmIChBTFBIQUJFVDIubGVuZ3RoID49IDI1NSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBbHBoYWJldCB0b28gbG9uZ1wiKTtcbiAgfVxuICBjb25zdCBCQVNFX01BUCA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG4gIGZvciAobGV0IGogPSAwOyBqIDwgQkFTRV9NQVAubGVuZ3RoOyBqKyspIHtcbiAgICBCQVNFX01BUFtqXSA9IDI1NTtcbiAgfVxuICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgQUxQSEFCRVQyLmxlbmd0aDsgaTMrKykge1xuICAgIGNvbnN0IHggPSBBTFBIQUJFVDIuY2hhckF0KGkzKTtcbiAgICBjb25zdCB4YyA9IHguY2hhckNvZGVBdCgwKTtcbiAgICBpZiAoQkFTRV9NQVBbeGNdICE9PSAyNTUpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoeCArIFwiIGlzIGFtYmlndW91c1wiKTtcbiAgICB9XG4gICAgQkFTRV9NQVBbeGNdID0gaTM7XG4gIH1cbiAgY29uc3QgQkFTRSA9IEFMUEhBQkVUMi5sZW5ndGg7XG4gIGNvbnN0IExFQURFUiA9IEFMUEhBQkVUMi5jaGFyQXQoMCk7XG4gIGNvbnN0IEZBQ1RPUiA9IE1hdGgubG9nKEJBU0UpIC8gTWF0aC5sb2coMjU2KTtcbiAgY29uc3QgaUZBQ1RPUiA9IE1hdGgubG9nKDI1NikgLyBNYXRoLmxvZyhCQVNFKTtcbiAgZnVuY3Rpb24gZW5jb2RlKHNvdXJjZSkge1xuICAgIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgfSBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoc291cmNlKSkge1xuICAgICAgc291cmNlID0gbmV3IFVpbnQ4QXJyYXkoc291cmNlLmJ1ZmZlciwgc291cmNlLmJ5dGVPZmZzZXQsIHNvdXJjZS5ieXRlTGVuZ3RoKTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgc291cmNlID0gVWludDhBcnJheS5mcm9tKHNvdXJjZSk7XG4gICAgfVxuICAgIGlmICghKHNvdXJjZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgVWludDhBcnJheVwiKTtcbiAgICB9XG4gICAgaWYgKHNvdXJjZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBsZXQgemVyb2VzMiA9IDA7XG4gICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgbGV0IHBiZWdpbiA9IDA7XG4gICAgY29uc3QgcGVuZCA9IHNvdXJjZS5sZW5ndGg7XG4gICAgd2hpbGUgKHBiZWdpbiAhPT0gcGVuZCAmJiBzb3VyY2VbcGJlZ2luXSA9PT0gMCkge1xuICAgICAgcGJlZ2luKys7XG4gICAgICB6ZXJvZXMyKys7XG4gICAgfVxuICAgIGNvbnN0IHNpemUgPSAocGVuZCAtIHBiZWdpbikgKiBpRkFDVE9SICsgMSA+Pj4gMDtcbiAgICBjb25zdCBiNTggPSBuZXcgVWludDhBcnJheShzaXplKTtcbiAgICB3aGlsZSAocGJlZ2luICE9PSBwZW5kKSB7XG4gICAgICBsZXQgY2FycnkgPSBzb3VyY2VbcGJlZ2luXTtcbiAgICAgIGxldCBpMyA9IDA7XG4gICAgICBmb3IgKGxldCBpdDEgPSBzaXplIC0gMTsgKGNhcnJ5ICE9PSAwIHx8IGkzIDwgbGVuZ3RoKSAmJiBpdDEgIT09IC0xOyBpdDEtLSwgaTMrKykge1xuICAgICAgICBjYXJyeSArPSAyNTYgKiBiNThbaXQxXSA+Pj4gMDtcbiAgICAgICAgYjU4W2l0MV0gPSBjYXJyeSAlIEJBU0UgPj4+IDA7XG4gICAgICAgIGNhcnJ5ID0gY2FycnkgLyBCQVNFID4+PiAwO1xuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vbi16ZXJvIGNhcnJ5XCIpO1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gaTM7XG4gICAgICBwYmVnaW4rKztcbiAgICB9XG4gICAgbGV0IGl0MiA9IHNpemUgLSBsZW5ndGg7XG4gICAgd2hpbGUgKGl0MiAhPT0gc2l6ZSAmJiBiNThbaXQyXSA9PT0gMCkge1xuICAgICAgaXQyKys7XG4gICAgfVxuICAgIGxldCBzdHIgPSBMRUFERVIucmVwZWF0KHplcm9lczIpO1xuICAgIGZvciAoOyBpdDIgPCBzaXplOyArK2l0Mikge1xuICAgICAgc3RyICs9IEFMUEhBQkVUMi5jaGFyQXQoYjU4W2l0Ml0pO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9XG4gIGZ1bmN0aW9uIGRlY29kZVVuc2FmZShzb3VyY2UpIHtcbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIFN0cmluZ1wiKTtcbiAgICB9XG4gICAgaWYgKHNvdXJjZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSgpO1xuICAgIH1cbiAgICBsZXQgcHN6ID0gMDtcbiAgICBsZXQgemVyb2VzMiA9IDA7XG4gICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgd2hpbGUgKHNvdXJjZVtwc3pdID09PSBMRUFERVIpIHtcbiAgICAgIHplcm9lczIrKztcbiAgICAgIHBzeisrO1xuICAgIH1cbiAgICBjb25zdCBzaXplID0gKHNvdXJjZS5sZW5ndGggLSBwc3opICogRkFDVE9SICsgMSA+Pj4gMDtcbiAgICBjb25zdCBiMjU2ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7XG4gICAgd2hpbGUgKHBzeiA8IHNvdXJjZS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQocHN6KTtcbiAgICAgIGlmIChjaGFyQ29kZSA+IDI1NSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQgY2FycnkgPSBCQVNFX01BUFtjaGFyQ29kZV07XG4gICAgICBpZiAoY2FycnkgPT09IDI1NSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQgaTMgPSAwO1xuICAgICAgZm9yIChsZXQgaXQzID0gc2l6ZSAtIDE7IChjYXJyeSAhPT0gMCB8fCBpMyA8IGxlbmd0aCkgJiYgaXQzICE9PSAtMTsgaXQzLS0sIGkzKyspIHtcbiAgICAgICAgY2FycnkgKz0gQkFTRSAqIGIyNTZbaXQzXSA+Pj4gMDtcbiAgICAgICAgYjI1NltpdDNdID0gY2FycnkgJSAyNTYgPj4+IDA7XG4gICAgICAgIGNhcnJ5ID0gY2FycnkgLyAyNTYgPj4+IDA7XG4gICAgICB9XG4gICAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm9uLXplcm8gY2FycnlcIik7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBpMztcbiAgICAgIHBzeisrO1xuICAgIH1cbiAgICBsZXQgaXQ0ID0gc2l6ZSAtIGxlbmd0aDtcbiAgICB3aGlsZSAoaXQ0ICE9PSBzaXplICYmIGIyNTZbaXQ0XSA9PT0gMCkge1xuICAgICAgaXQ0Kys7XG4gICAgfVxuICAgIGNvbnN0IHZjaCA9IG5ldyBVaW50OEFycmF5KHplcm9lczIgKyAoc2l6ZSAtIGl0NCkpO1xuICAgIGxldCBqID0gemVyb2VzMjtcbiAgICB3aGlsZSAoaXQ0ICE9PSBzaXplKSB7XG4gICAgICB2Y2hbaisrXSA9IGIyNTZbaXQ0KytdO1xuICAgIH1cbiAgICByZXR1cm4gdmNoO1xuICB9XG4gIGZ1bmN0aW9uIGRlY29kZShzdHJpbmcpIHtcbiAgICBjb25zdCBidWZmZXIgPSBkZWNvZGVVbnNhZmUoc3RyaW5nKTtcbiAgICBpZiAoYnVmZmVyKSB7XG4gICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb24tYmFzZVwiICsgQkFTRSArIFwiIGNoYXJhY3RlclwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGVuY29kZSxcbiAgICBkZWNvZGVVbnNhZmUsXG4gICAgZGVjb2RlXG4gIH07XG59XG52YXIgZXNtX2RlZmF1bHQgPSBiYXNlO1xuXG4vKiAuLi8uLi9ub2RlX21vZHVsZXMvYnM1OC9zcmMvZXNtL2luZGV4LmpzKi9cbnZhciBBTFBIQUJFVCA9IFwiMTIzNDU2Nzg5QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaYWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5elwiO1xudmFyIGVzbV9kZWZhdWx0MiA9IGVzbV9kZWZhdWx0KEFMUEhBQkVUKTtcblxuLyogLi4vb3JjaGVzdHJhdGlvbi9zcmMvdXRpbHMvYWRkcmVzcy5qcyovXG52YXIgbWFrZUlDQUNoYW5uZWxBZGRyZXNzID0gKGhvc3RDb25uZWN0aW9uSWQsIGNvbnRyb2xsZXJDb25uZWN0aW9uSWQsIHtcbiAgdmVyc2lvbiA9IFwiaWNzMjctMVwiLFxuICBlbmNvZGluZyA9IFwicHJvdG8zXCIsXG4gIG9yZGVyaW5nID0gXCJvcmRlcmVkXCIsXG4gIHR4VHlwZSA9IFwic2RrX211bHRpX21zZ1wiXG59ID0ge30pID0+IHtcbiAgaG9zdENvbm5lY3Rpb25JZCB8fCB0aHJvd1JlZGFjdGVkYGhvc3RDb25uZWN0aW9uSWQgaXMgcmVxdWlyZWRgO1xuICBjb250cm9sbGVyQ29ubmVjdGlvbklkIHx8IHRocm93UmVkYWN0ZWRgY29udHJvbGxlckNvbm5lY3Rpb25JZCBpcyByZXF1aXJlZGA7XG4gIGNvbnN0IGNvbm5TdHJpbmcgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgdmVyc2lvbixcbiAgICBjb250cm9sbGVyQ29ubmVjdGlvbklkLFxuICAgIGhvc3RDb25uZWN0aW9uSWQsXG4gICAgYWRkcmVzczogXCJcIixcbiAgICAvKiB3aWxsIGJlIHByb3ZpZGVkIGJ5IHRoZSBjb3VudGVycGFydHkgYWZ0ZXIgY2hhbm5lbE9wZW5BY2sqL1xuICAgIGVuY29kaW5nLFxuICAgIHR4VHlwZVxuICB9KTtcbiAgcmV0dXJuIGAvaWJjLWhvcC8ke2NvbnRyb2xsZXJDb25uZWN0aW9uSWR9L2liYy1wb3J0L2ljYWhvc3QvJHtvcmRlcmluZ30vJHtjb25uU3RyaW5nfWA7XG59O1xuaGFyZGVuKG1ha2VJQ0FDaGFubmVsQWRkcmVzcyk7XG52YXIgREVGQVVMVF9JQ1FfVkVSU0lPTiA9IFwiaWNxLTFcIjtcbnZhciBtYWtlSUNRQ2hhbm5lbEFkZHJlc3MgPSAoY29udHJvbGxlckNvbm5lY3Rpb25JZCwgdmVyc2lvbiA9IERFRkFVTFRfSUNRX1ZFUlNJT04pID0+IHtcbiAgY29udHJvbGxlckNvbm5lY3Rpb25JZCB8fCB0aHJvd1JlZGFjdGVkYGNvbnRyb2xsZXJDb25uZWN0aW9uSWQgaXMgcmVxdWlyZWRgO1xuICByZXR1cm4gYC9pYmMtaG9wLyR7Y29udHJvbGxlckNvbm5lY3Rpb25JZH0vaWJjLXBvcnQvaWNxaG9zdC91bm9yZGVyZWQvJHt2ZXJzaW9ufWA7XG59O1xuaGFyZGVuKG1ha2VJQ1FDaGFubmVsQWRkcmVzcyk7XG52YXIgZmluZEFkZHJlc3NGaWVsZCA9IChyZW1vdGVBZGRyZXNzU3RyaW5nKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QganNvblN0ciA9IHJlbW90ZUFkZHJlc3NTdHJpbmc/Lm1hdGNoKC97Lio/fS8pPy5bMF07XG4gICAgY29uc3QganNvbk9iaiA9IGpzb25TdHIgPyBKU09OLnBhcnNlKGpzb25TdHIpIDogdm9pZCAwO1xuICAgIGlmICghanNvbk9iaj8uYWRkcmVzcz8ubGVuZ3RoKSByZXR1cm4gdm9pZCAwO1xuICAgIHJldHVybiBqc29uT2JqLmFkZHJlc3M7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxufTtcbmhhcmRlbihmaW5kQWRkcmVzc0ZpZWxkKTtcbnZhciBnZXRCZWNoMzJQcmVmaXggPSAoYWRkcmVzcykgPT4ge1xuICBhc3NlcnQoYWRkcmVzcywgXCJhZGRyZXNzIGlzIHJlcXVpcmVkXCIpO1xuICBjb25zdCBzcGxpdDIgPSBhZGRyZXNzLmxhc3RJbmRleE9mKFwiMVwiKTtcbiAgaWYgKHNwbGl0MiA9PT0gLTEpIHJldHVybiB0aHJvd1JlZGFjdGVkYE5vIHNlcGFyYXRvciBjaGFyYWN0ZXIgZm9yICR7cXVvdGUoYWRkcmVzcyl9YDtcbiAgaWYgKHNwbGl0MiA9PT0gMCkgcmV0dXJuIHRocm93UmVkYWN0ZWRgTWlzc2luZyBwcmVmaXggZm9yICR7cXVvdGUoYWRkcmVzcyl9YDtcbiAgcmV0dXJuIGFkZHJlc3Muc2xpY2UoMCwgc3BsaXQyKTtcbn07XG52YXIgY29lcmNlQWNjb3VudElkID0gKGlkQXJnKSA9PiB7XG4gIGlmICh0eXBlb2YgaWRBcmcgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gaWRBcmc7XG4gIH1cbiAgcmV0dXJuIGBjb3Ntb3M6JHtpZEFyZy5jaGFpbklkfToke2lkQXJnLnZhbHVlfWA7XG59O1xuaGFyZGVuKGNvZXJjZUFjY291bnRJZCk7XG52YXIgcGFyc2VBY2NvdW50SWRBcmcgPSAoaWRBcmcpID0+IHtcbiAgaWYgKHR5cGVvZiBpZEFyZyA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBwYXJzZUFjY291bnRJZChpZEFyZyk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBuYW1lc3BhY2U6IFwiY29zbW9zXCIsXG4gICAgcmVmZXJlbmNlOiBpZEFyZy5jaGFpbklkLFxuICAgIGFjY291bnRBZGRyZXNzOiBpZEFyZy52YWx1ZVxuICB9O1xufTtcbmhhcmRlbihwYXJzZUFjY291bnRJZEFyZyk7XG52YXIgcGFyc2VBY2NvdW50SWQgPSAoYWNjb3VudElkKSA9PiB7XG4gIGNvbnN0IHBhcnRzID0gYWNjb3VudElkLnNwbGl0KFwiOlwiKTtcbiAgcGFydHMubGVuZ3RoID09PSAzIHx8IHRocm93UmVkYWN0ZWRgbWFsZm9ybWVkIENBSVAtMTAgYWNjb3VudElkOiAke3F1b3RlKGFjY291bnRJZCl9YDtcbiAgY29uc3QgW25hbWVzcGFjZSwgcmVmZXJlbmNlLCBhY2NvdW50QWRkcmVzc10gPSBwYXJ0cztcbiAgcmV0dXJuIHtcbiAgICBuYW1lc3BhY2UsXG4gICAgcmVmZXJlbmNlLFxuICAgIGFjY291bnRBZGRyZXNzXG4gIH07XG59O1xuaGFyZGVuKHBhcnNlQWNjb3VudElkKTtcbnZhciBpc0JlY2gzMkFkZHJlc3MgPSAoYWRkcmVzcykgPT4ge1xuICBpZiAodHlwZW9mIGFkZHJlc3MgIT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdHJ5IHtcbiAgICBjb25zdCBkZWNvZGVkID0gKDAsIGltcG9ydF9lbmNvZGluZy5mcm9tQmVjaDMyKShhZGRyZXNzKTtcbiAgICByZXR1cm4gISFkZWNvZGVkICYmIGRlY29kZWQuZGF0YS5sZW5ndGggPiAwO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcbmhhcmRlbihpc0JlY2gzMkFkZHJlc3MpO1xudmFyIGFzc2VydEJlY2gzMkFkZHJlc3MgPSAoYWRkcmVzcykgPT4ge1xuICBpZiAoIWlzQmVjaDMyQWRkcmVzcyhhZGRyZXNzKSkge1xuICAgIHRocm93UmVkYWN0ZWRgRXhwZWN0ZWQgYSB2YWxpZCBCZWNoMzIgYWRkcmVzcywgZ290ICR7cXVvdGUoYWRkcmVzcyl9YDtcbiAgfVxufTtcbmhhcmRlbihhc3NlcnRCZWNoMzJBZGRyZXNzKTtcbnZhciBsZWZ0UGFkRXRoQWRkcmVzc1RvMzJCeXRlcyA9IChyYXdBZGRyZXNzKSA9PiB7XG4gIGNvbnN0IGNsZWFuZWRBZGRyZXNzID0gcmF3QWRkcmVzcy5yZXBsYWNlKC9eMHgvLCBcIlwiKTtcbiAgY29uc3QgemVyb2VzTmVlZGVkID0gNjQgLSBjbGVhbmVkQWRkcmVzcy5sZW5ndGg7XG4gIGNvbnN0IHBhZGRlZEFkZHJlc3MgPSBcIjBcIi5yZXBlYXQoemVyb2VzTmVlZGVkKSArIGNsZWFuZWRBZGRyZXNzO1xuICByZXR1cm4gKDAsIGltcG9ydF9lbmNvZGluZy5mcm9tSGV4KShwYWRkZWRBZGRyZXNzKTtcbn07XG52YXIgc29sYW5hQWRkcmVzc1RvQ2N0cFJlY2lwaWVudCA9IChzb2xhbmFBZGRyZXNzKSA9PiBlc21fZGVmYXVsdDIuZGVjb2RlKHNvbGFuYUFkZHJlc3MpO1xudmFyIGFjY291bnRJZFRvMzJCeXRlcyA9IChhY2NvdW50SWQpID0+IHtcbiAgY29uc3QgeyBuYW1lc3BhY2UsIGFjY291bnRBZGRyZXNzIH0gPSBwYXJzZUFjY291bnRJZChhY2NvdW50SWQpO1xuICBzd2l0Y2ggKG5hbWVzcGFjZSkge1xuICAgIGNhc2UgXCJlaXAxNTVcIjpcbiAgICAgIHJldHVybiBsZWZ0UGFkRXRoQWRkcmVzc1RvMzJCeXRlcyhhY2NvdW50QWRkcmVzcyk7XG4gICAgY2FzZSBcInNvbGFuYVwiOlxuICAgICAgcmV0dXJuIHNvbGFuYUFkZHJlc3NUb0NjdHBSZWNpcGllbnQoYWNjb3VudEFkZHJlc3MpO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYG5hbWVzcGFjZSAke25hbWVzcGFjZX0gbm90IHN1cHBvcnRlZGApO1xuICB9XG59O1xuXG4vKiAuLi9pbnRlcm5hbC9zcmMvdXBncmFkZS1hcGkuanMqL1xudmFyIHsgaXNGcm96ZW46IGlzRnJvemVuNiB9ID0gT2JqZWN0O1xudmFyIFVwZ3JhZGVEaXNjb25uZWN0aW9uU2hhcGUgPSBoYXJkZW4oe1xuICBuYW1lOiBcInZhdFVwZ3JhZGVkXCIsXG4gIHVwZ3JhZGVNZXNzYWdlOiBNLnN0cmluZygpLFxuICBpbmNhcm5hdGlvbk51bWJlcjogTS5udW1iZXIoKVxufSk7XG52YXIgbWFrZVVwZ3JhZGVEaXNjb25uZWN0aW9uID0gKHVwZ3JhZGVNZXNzYWdlLCB0b0luY2FybmF0aW9uTnVtYmVyKSA9PiBoYXJkZW4oe1xuICBuYW1lOiBcInZhdFVwZ3JhZGVkXCIsXG4gIHVwZ3JhZGVNZXNzYWdlLFxuICBpbmNhcm5hdGlvbk51bWJlcjogdG9JbmNhcm5hdGlvbk51bWJlclxufSk7XG5oYXJkZW4obWFrZVVwZ3JhZGVEaXNjb25uZWN0aW9uKTtcbnZhciBpc1VwZ3JhZGVEaXNjb25uZWN0aW9uID0gKHJlYXNvbikgPT4gcmVhc29uICE9IG51bGwgJiYgLyogZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXEqL1xuaXNGcm96ZW42KHJlYXNvbikgJiYgbWF0Y2hlcyhyZWFzb24sIFVwZ3JhZGVEaXNjb25uZWN0aW9uU2hhcGUpO1xuaGFyZGVuKGlzVXBncmFkZURpc2Nvbm5lY3Rpb24pO1xudmFyIGlzQWJhbmRvbmVkRXJyb3IgPSAocmVhc29uKSA9PiByZWFzb24gIT0gbnVsbCAmJiAvKiBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcSovXG5pc0Zyb3plbjYocmVhc29uKSAmJiBtYXRjaGVzKHJlYXNvbiwgTS5lcnJvcigpKSAmJiAvKiBXZSdyZSBub3QgdXNpbmcgYSBjb25zdGFudCBoZXJlIHNpbmNlIHRoaXMgc3BlY2lhbCB2YWx1ZSBpcyBhbHJlYWR5Ki9cbi8qIHNwcmlua2xlZCB0aHJvdWdob3V0IHRoZSBTREsqL1xucmVhc29uLm1lc3NhZ2UgPT09IFwidmF0IHRlcm1pbmF0ZWRcIjtcbmhhcmRlbihpc0FiYW5kb25lZEVycm9yKTtcblxuLyogLi4vdm93L3NyYy92b3ctdXRpbHMuanMqL1xudmFyIHNpbmsyID0gKCkgPT4ge1xufTtcbmhhcmRlbihzaW5rMik7XG52YXIgVm93U2hhcGUgPSBNLnRhZ2dlZChcbiAgXCJWb3dcIixcbiAgTS5zcGxpdFJlY29yZCh7XG4gICAgdm93VjA6IE0ucmVtb3RhYmxlKFwiVm93VjBcIilcbiAgfSlcbik7XG52YXIgaXNWb3cgPSAoc3BlY2ltZW4pID0+IGlzUGFzc2FibGUoc3BlY2ltZW4pICYmIG1hdGNoZXMoc3BlY2ltZW4sIFZvd1NoYXBlKTtcbmhhcmRlbihpc1Zvdyk7XG52YXIgZ2V0Vm93UGF5bG9hZCA9IChzcGVjaW1lbikgPT4ge1xuICBpZiAoIWlzVm93KHNwZWNpbWVuKSkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgY29uc3Qgdm93ID0gKFxuICAgIC8qKiBAdHlwZSB7Vm93PFQ+fSAqL1xuICAgIC8qKiBAdHlwZSB7dW5rbm93bn0gKi9cbiAgICBzcGVjaW1lblxuICApO1xuICByZXR1cm4gdm93LnBheWxvYWQ7XG59O1xuaGFyZGVuKGdldFZvd1BheWxvYWQpO1xudmFyIHRvUGFzc2FibGVDYXAgPSAoaykgPT4ge1xuICBjb25zdCBwYXlsb2FkID0gZ2V0Vm93UGF5bG9hZChrKTtcbiAgaWYgKHBheWxvYWQgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiAoXG4gICAgICAvKiogQHR5cGUge1Bhc3NhYmxlQ2FwfSAqL1xuICAgICAga1xuICAgICk7XG4gIH1cbiAgY29uc3QgeyB2b3dWMCB9ID0gcGF5bG9hZDtcbiAgcmV0dXJuIHZvd1YwO1xufTtcbmhhcmRlbih0b1Bhc3NhYmxlQ2FwKTtcbnZhciBtYWtlQXNWb3cgPSAobWFrZVZvd0tpdCkgPT4ge1xuICBjb25zdCBhc1ZvdyA9IChmbikgPT4ge1xuICAgIGxldCByZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGZuKCk7XG4gICAgfSBjYXRjaCAoZTIpIHtcbiAgICAgIHJlc3VsdCA9IFByb21pc2UucmVqZWN0KGUyKTtcbiAgICB9XG4gICAgaWYgKGlzVm93KHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNvbnN0IHsgdm93LCByZXNvbHZlciB9ID0gbWFrZVZvd0tpdCgpO1xuICAgIHJlc29sdmVyLnJlc29sdmUocmVzdWx0KTtcbiAgICByZXR1cm4gdm93O1xuICB9O1xuICByZXR1cm4gaGFyZGVuKGFzVm93KTtcbn07XG5oYXJkZW4obWFrZUFzVm93KTtcblxuLyogLi4vdm93L3NyYy92b3cuanMqL1xudmFyIHsgZGV0YWlsczogWDMgfSA9IGFzc2VydDtcbnZhciBub29wID0gKCkgPT4ge1xufTtcbmhhcmRlbihub29wKTtcbnZhciBwcmVwYXJlVm93S2l0ID0gKHpvbmUsIHZvd1JlamVjdGlvblRyYWNrZXIpID0+IHtcbiAgY29uc3QgcmVzb2x2ZXJUb0VwaGVtZXJhID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG4gIGNvbnN0IHJlc29sdmVyVG9Ob25TdG9yZWRWYWx1ZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuICBjb25zdCBwcm92aWRlRXBoZW1lcmEgPSAocmVzb2x2ZXIsIG9wdGlvbnMpID0+IHtcbiAgICBsZXQgZXBoZW1lcmEgPSByZXNvbHZlclRvRXBoZW1lcmEuZ2V0KHJlc29sdmVyKTtcbiAgICBpZiAoIWVwaGVtZXJhKSB7XG4gICAgICBlcGhlbWVyYSA9IG1ha2VQcm9taXNlS2l0KCk7XG4gICAgICBlcGhlbWVyYS5wcm9taXNlLmNhdGNoKG5vb3ApO1xuICAgIH1cbiAgICBlcGhlbWVyYSA9IGhhcmRlbih7IC4uLmVwaGVtZXJhLCAuLi5vcHRpb25zIH0pO1xuICAgIHJlc29sdmVyVG9FcGhlbWVyYS5zZXQocmVzb2x2ZXIsIGVwaGVtZXJhKTtcbiAgICByZXR1cm4gZXBoZW1lcmE7XG4gIH07XG4gIGNvbnN0IHByb3ZpZGVFcGhlbWVyYUZvclJlc29sdXRpb24gPSAocmVzb2x2ZXIpID0+IHtcbiAgICBjb25zdCBlcGhlbWVyYSA9IHByb3ZpZGVFcGhlbWVyYShyZXNvbHZlcik7XG4gICAgaWYgKGVwaGVtZXJhLnJlc29sdmUpIHtcbiAgICAgIGNvbnN0IHsgcmVzb2x2ZTogXzEsIHJlamVjdDogXzIsIC4uLnJlc3QgfSA9IGVwaGVtZXJhO1xuICAgICAgcmVzb2x2ZXJUb0VwaGVtZXJhLnNldChyZXNvbHZlciwgaGFyZGVuKHJlc3QpKTtcbiAgICB9XG4gICAgcmV0dXJuIGVwaGVtZXJhO1xuICB9O1xuICBjb25zdCBtYWtlVm93SW50ZXJuYWxzS2l0ID0gem9uZS5leG9DbGFzc0tpdChcbiAgICBcIlZvd0ludGVybmFsc0tpdFwiLFxuICAgIHtcbiAgICAgIHZvd1YwOiBNLmludGVyZmFjZShcIlZvd1YwXCIsIHtcbiAgICAgICAgc2hvcnRlbjogTS5jYWxsKCkucmV0dXJucyhNLnByb21pc2UoKSlcbiAgICAgIH0pLFxuICAgICAgcmVzb2x2ZXI6IE0uaW50ZXJmYWNlKFwiVm93UmVzb2x2ZXJcIiwge1xuICAgICAgICByZXNvbHZlOiBNLmNhbGwoKS5vcHRpb25hbChNLnJhdygpKS5yZXR1cm5zKCksXG4gICAgICAgIHJlamVjdDogTS5jYWxsKCkub3B0aW9uYWwoTS5yYXcoKSkucmV0dXJucygpXG4gICAgICB9KSxcbiAgICAgIHdhdGNoTmV4dFN0ZXA6IFByb21pc2VXYXRjaGVySVxuICAgIH0sXG4gICAgKCkgPT4gKHtcbiAgICAgIC8qKiBAdHlwZSB7YW55fSAqL1xuICAgICAgdmFsdWU6IHZvaWQgMCxcbiAgICAgIC8qKlxuICogVGhlIHN0ZXBTdGF0dXMgaXMgbnVsbCBpZiB0aGUgcHJvbWlzZSBzdGVwIGhhc24ndCBzZXR0bGVkIHlldC5cbiAqIEB0eXBlIHtudWxsIHwgJ3BlbmRpbmcnIHwgJ2Z1bGZpbGxlZCcgfCAncmVqZWN0ZWQnfVxuICovXG4gICAgICBzdGVwU3RhdHVzOiBudWxsLFxuICAgICAgaXNTdG9yZWRWYWx1ZTogZmFsc2UsXG4gICAgICAvKipcbiAqIFNvbWUgdmVyc2lvbnMgb2YgdGhlIFZvd0ludGVybmFsc0tpdCB3aWxsIG5vdCBoYXZlIHRoaXMgcHJvcGVydHksXG4gKiAoYW5kIGl0IGNhbm5vdCBiZSBhZGRlZCBkeW5hbWljYWxseSkuXG4gKiBAdHlwZSB7Ym9vbGVhbiB8IHVuZGVmaW5lZH1cbiAqL1xuICAgICAgdm93SXNIYW5kbGVkOiBmYWxzZSxcbiAgICAgIC8qKlxuICogUmVjb3JkIGZvciBmdXR1cmUgcHJvcGVydGllcyB0aGF0IGFyZW4ndCBpbiB0aGUgc2NoZW1hLlxuICogVU5USUwgaHR0cHM6Ly9naXRodWIuY29tL0Fnb3JpYy9hZ29yaWMtc2RrL2lzc3Vlcy83NDA3XG4gKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgYW55PiB8IHVuZGVmaW5lZH1cbiAqL1xuICAgICAgZXh0cmE6IHZvaWQgMFxuICAgIH0pLFxuICAgIHtcbiAgICAgIHZvd1YwOiB7XG4gICAgICAgIC8qKlxuICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAqL1xuICAgICAgICBhc3luYyBzaG9ydGVuKCkge1xuICAgICAgICAgIGNvbnN0IHsgc3RlcFN0YXR1cywgaXNTdG9yZWRWYWx1ZSwgdmFsdWUsIHZvd0lzSGFuZGxlZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBjb25zdCB7IHJlc29sdmVyLCB2b3dWMCB9ID0gdGhpcy5mYWNldHM7XG4gICAgICAgICAgc3dpdGNoIChzdGVwU3RhdHVzKSB7XG4gICAgICAgICAgICBjYXNlIFwiZnVsZmlsbGVkXCI6IHtcbiAgICAgICAgICAgICAgaWYgKHZvd0lzSGFuZGxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnZvd0lzSGFuZGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGlzU3RvcmVkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzb2x2ZXJUb05vblN0b3JlZFZhbHVlLmhhcyhyZXNvbHZlcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZXJUb05vblN0b3JlZFZhbHVlLmdldChyZXNvbHZlcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhyb3cgdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwicmVqZWN0ZWRcIjoge1xuICAgICAgICAgICAgICBpZiAodm93SXNIYW5kbGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUudm93SXNIYW5kbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2b3dSZWplY3Rpb25UcmFja2VyPy5oYW5kbGUodm93VjApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnN0IHJlYXNvbiA9IHJlc29sdmVyVG9Ob25TdG9yZWRWYWx1ZS5oYXMocmVzb2x2ZXIpID8gcmVzb2x2ZXJUb05vblN0b3JlZFZhbHVlLmdldChyZXNvbHZlcikgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgdGhyb3cgcmVhc29uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBudWxsOlxuICAgICAgICAgICAgY2FzZSBcInBlbmRpbmdcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVFcGhlbWVyYSh0aGlzLmZhY2V0cy5yZXNvbHZlciwge1xuICAgICAgICAgICAgICAgIHBvdGVudGlhbGx5SGFuZGxlZDogdHJ1ZVxuICAgICAgICAgICAgICB9KS5wcm9taXNlO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKGB1bmV4cGVjdGVkIHN0ZXBTdGF0dXMgJHtzdGVwU3RhdHVzfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlc29sdmVyOiB7XG4gICAgICAgIC8qKlxuICogQHBhcmFtIHthbnl9IFt2YWx1ZV1cbiAqL1xuICAgICAgICByZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgICAgY29uc3QgeyBzdGVwU3RhdHVzIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIGlmIChzdGVwU3RhdHVzICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuc3RhdGUuc3RlcFN0YXR1cyA9IFwicGVuZGluZ1wiO1xuICAgICAgICAgIGNvbnN0IHsgcmVzb2x2ZXIgfSA9IHRoaXMuZmFjZXRzO1xuICAgICAgICAgIGNvbnN0IHsgcmVzb2x2ZTogcmVzb2x2ZTIgfSA9IHByb3ZpZGVFcGhlbWVyYUZvclJlc29sdXRpb24ocmVzb2x2ZXIpO1xuICAgICAgICAgIHJlc29sdmUyICYmIHJlc29sdmUyKHZhbHVlKTtcbiAgICAgICAgICB6b25lLndhdGNoUHJvbWlzZShcbiAgICAgICAgICAgIEhhbmRsZWRQcm9taXNlLnJlc29sdmUodmFsdWUpLFxuICAgICAgICAgICAgdGhpcy5mYWNldHMud2F0Y2hOZXh0U3RlcFxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICogQHBhcmFtIHthbnl9IFtyZWFzb25dXG4gKi9cbiAgICAgICAgcmVqZWN0KHJlYXNvbikge1xuICAgICAgICAgIGNvbnN0IHsgc3RlcFN0YXR1cyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBpZiAoc3RlcFN0YXR1cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnN0YXRlLnN0ZXBTdGF0dXMgPSBcInJlamVjdGVkXCI7XG4gICAgICAgICAgY29uc3QgeyByZXNvbHZlciwgd2F0Y2hOZXh0U3RlcCB9ID0gdGhpcy5mYWNldHM7XG4gICAgICAgICAgY29uc3QgeyByZWplY3QgfSA9IHByb3ZpZGVFcGhlbWVyYUZvclJlc29sdXRpb24ocmVzb2x2ZXIpO1xuICAgICAgICAgIHJlamVjdCAmJiByZWplY3QocmVhc29uKTtcbiAgICAgICAgICB3YXRjaE5leHRTdGVwLm9uUmVqZWN0ZWQocmVhc29uKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHdhdGNoTmV4dFN0ZXA6IHtcbiAgICAgICAgb25GdWxmaWxsZWQodmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlLnN0ZXBTdGF0dXMgPSBcImZ1bGZpbGxlZFwiO1xuICAgICAgICAgIGNvbnN0IHsgcmVzb2x2ZXIgfSA9IHRoaXMuZmFjZXRzO1xuICAgICAgICAgIGNvbnN0IHsgcmVzb2x2ZTogcmVzb2x2ZTIgfSA9IHByb3ZpZGVFcGhlbWVyYUZvclJlc29sdXRpb24ocmVzb2x2ZXIpO1xuICAgICAgICAgIGhhcmRlbih2YWx1ZSk7XG4gICAgICAgICAgcmVzb2x2ZTIgJiYgcmVzb2x2ZTIodmFsdWUpO1xuICAgICAgICAgIHRoaXMuc3RhdGUuaXNTdG9yZWRWYWx1ZSA9IHpvbmUuaXNTdG9yYWJsZSh2YWx1ZSk7XG4gICAgICAgICAgaWYgKHRoaXMuc3RhdGUuaXNTdG9yZWRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlclRvTm9uU3RvcmVkVmFsdWUuc2V0KHJlc29sdmVyLCB2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnZhbHVlID0gYXNzZXJ0LmVycm9yKFxuICAgICAgICAgICAgICBYM2BWb3cgZnVsZmlsbG1lbnQgdmFsdWUgd2FzIG5vdCBzdG9yZWQ6ICR7dmFsdWV9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uUmVqZWN0ZWQocmVhc29uKSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5zdGVwU3RhdHVzID0gXCJyZWplY3RlZFwiO1xuICAgICAgICAgIGNvbnN0IHsgcmVzb2x2ZXIsIHZvd1YwIH0gPSB0aGlzLmZhY2V0cztcbiAgICAgICAgICBjb25zdCB7IHJlamVjdCwgcG90ZW50aWFsbHlIYW5kbGVkIH0gPSBwcm92aWRlRXBoZW1lcmFGb3JSZXNvbHV0aW9uKHJlc29sdmVyKTtcbiAgICAgICAgICBoYXJkZW4ocmVhc29uKTtcbiAgICAgICAgICByZWplY3QgJiYgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgaWYgKHRoaXMuc3RhdGUudm93SXNIYW5kbGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKHBvdGVudGlhbGx5SGFuZGxlZCkge1xuICAgICAgICAgICAgICB0aGlzLnN0YXRlLnZvd0lzSGFuZGxlZCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2b3dSZWplY3Rpb25UcmFja2VyPy5yZWplY3Qodm93VjAsIHJlYXNvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuc3RhdGUuaXNTdG9yZWRWYWx1ZSA9IHpvbmUuaXNTdG9yYWJsZShyZWFzb24pO1xuICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmlzU3RvcmVkVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUudmFsdWUgPSByZWFzb247XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmVyVG9Ob25TdG9yZWRWYWx1ZS5zZXQocmVzb2x2ZXIsIHJlYXNvbik7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnZhbHVlID0gYXNzZXJ0LmVycm9yKFxuICAgICAgICAgICAgICBYM2BWb3cgcmVqZWN0aW9uIHJlYXNvbiB3YXMgbm90IHN0b3JlZDogJHtyZWFzb259YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIGNvbnN0IG1ha2VWb3dLaXQgPSAoKSA9PiB7XG4gICAgY29uc3QgeyByZXNvbHZlciwgdm93VjAgfSA9IG1ha2VWb3dJbnRlcm5hbHNLaXQoKTtcbiAgICBjb25zdCB2b3cgPSBtYWtlVGFnZ2VkKFwiVm93XCIsIGhhcmRlbih7IHZvd1YwIH0pKTtcbiAgICByZXR1cm4gaGFyZGVuKHsgcmVzb2x2ZXIsIHZvdyB9KTtcbiAgfTtcbiAgcmV0dXJuIG1ha2VWb3dLaXQ7XG59O1xuaGFyZGVuKHByZXBhcmVWb3dLaXQpO1xuXG4vKiAuLi92b3cvc3JjL3dhdGNoLXV0aWxzLmpzKi9cbnZhciB7IEZhaWw6IEZhaWw1LCBiYXJlOiBiYXJlMiwgZGV0YWlsczogWDQgfSA9IGFzc2VydDtcbnZhciBWb3dTaGFwZTIgPSBNLnRhZ2dlZChcbiAgXCJWb3dcIixcbiAgaGFyZGVuKHtcbiAgICB2b3dWMDogTS5yZW1vdGFibGUoXCJWb3dWMFwiKVxuICB9KVxuKTtcbnZhciBwcmVwYXJlV2F0Y2hVdGlscyA9ICh6b25lLCB7IHdhdGNoLCB3aGVuLCBtYWtlVm93S2l0LCBpc1JldHJ5YWJsZVJlYXNvbjogaXNSZXRyeWFibGVSZWFzb24yIH0pID0+IHtcbiAgY29uc3QgZGV0YWNoZWQgPSB6b25lLmRldGFjaGVkKCk7XG4gIGNvbnN0IHV0aWxzVG9Ob25TdG9yYWJsZVJlc3VsdHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbiAgY29uc3QgbWFrZVdhdGNoVXRpbHNLaXQgPSB6b25lLmV4b0NsYXNzS2l0KFxuICAgIFwiV2F0Y2hVdGlsc1wiLFxuICAgIHtcbiAgICAgIHV0aWxzOiBNLmludGVyZmFjZShcIlV0aWxzXCIsIHtcbiAgICAgICAgYWxsOiBNLmNhbGwoTS5hcnJheU9mKE0uYW55KCkpKS5yZXR1cm5zKFZvd1NoYXBlMiksXG4gICAgICAgIGFsbFNldHRsZWQ6IE0uY2FsbChNLmFycmF5T2YoTS5hbnkoKSkpLnJldHVybnMoVm93U2hhcGUyKSxcbiAgICAgICAgYXNQcm9taXNlOiBNLmNhbGwoTS5yYXcoKSkucmVzdChNLnJhdygpKS5yZXR1cm5zKE0ucHJvbWlzZSgpKVxuICAgICAgfSksXG4gICAgICB3YXRjaGVyOiBNLmludGVyZmFjZShcIldhdGNoZXJcIiwge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0ucmF3KCkpLnJlc3QoTS5yYXcoKSkucmV0dXJucyhNLnJhdygpKSxcbiAgICAgICAgb25SZWplY3RlZDogTS5jYWxsKE0ucmF3KCkpLnJlc3QoTS5yYXcoKSkucmV0dXJucyhNLnJhdygpKVxuICAgICAgfSksXG4gICAgICBoZWxwZXI6IE0uaW50ZXJmYWNlKFwiSGVscGVyXCIsIHtcbiAgICAgICAgY3JlYXRlVm93OiBNLmNhbGwoTS5hcnJheU9mKE0uYW55KCkpLCBNLmJvb2xlYW4oKSkucmV0dXJucyhWb3dTaGFwZTIpLFxuICAgICAgICBwcm9jZXNzUmVzdWx0OiBNLmNhbGwoTS5yYXcoKSkucmVzdChNLnJhdygpKS5yZXR1cm5zKE0udW5kZWZpbmVkKCkpXG4gICAgICB9KSxcbiAgICAgIHJldHJ5UmVqZWN0aW9uUHJvbWlzZVdhdGNoZXI6IFByb21pc2VXYXRjaGVySVxuICAgIH0sXG4gICAgKCkgPT4ge1xuICAgICAgY29uc3QgaWRUb1Zvd1N0YXRlID0gZGV0YWNoZWQubWFwU3RvcmUoXCJpZFRvVm93U3RhdGVcIik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0SWQ6IDBuLFxuICAgICAgICBpZFRvVm93U3RhdGVcbiAgICAgIH07XG4gICAgfSxcbiAgICB7XG4gICAgICB1dGlsczoge1xuICAgICAgICAvKiogQHBhcmFtIHt1bmtub3duW119IHNwZWNpbWVucyAqL1xuICAgICAgICBhbGwoc3BlY2ltZW5zKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmFjZXRzLmhlbHBlci5jcmVhdGVWb3coc3BlY2ltZW5zLCBmYWxzZSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBAcGFyYW0ge3Vua25vd25bXX0gc3BlY2ltZW5zICovXG4gICAgICAgIGFsbFNldHRsZWQoc3BlY2ltZW5zKSB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIC8qKiBAdHlwZSB7Vm93PCh7c3RhdHVzOiAnZnVsZmlsbGVkJywgdmFsdWU6IGFueX0gfCB7c3RhdHVzOiAncmVqZWN0ZWQnLCByZWFzb246IGFueX0pW10+fSAqL1xuICAgICAgICAgICAgdGhpcy5mYWNldHMuaGVscGVyLmNyZWF0ZVZvdyhzcGVjaW1lbnMsIHRydWUpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIEB0eXBlIHtBc1Byb21pc2VGdW5jdGlvbn0gKi9cbiAgICAgICAgYXNQcm9taXNlKHNwZWNpbWVuUCwgLi4ud2F0Y2hlckFyZ3MpIHtcbiAgICAgICAgICBjb25zdCB2b3cgPSB3YXRjaChzcGVjaW1lblAsIC4uLndhdGNoZXJBcmdzKTtcbiAgICAgICAgICBjb25zdCBwcm9taXNlID0gd2hlbih2b3cpO1xuICAgICAgICAgIHpvbmUud2F0Y2hQcm9taXNlKHByb21pc2UsIHRoaXMuZmFjZXRzLnJldHJ5UmVqZWN0aW9uUHJvbWlzZVdhdGNoZXIpO1xuICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgd2F0Y2hlcjoge1xuICAgICAgICAvKipcbiAqIEBwYXJhbSB7dW5rbm93bn0gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSBjdHhcbiAqIEBwYXJhbSB7YmlnaW50fSBjdHguaWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBjdHguaW5kZXhcbiAqIEBwYXJhbSB7bnVtYmVyfSBjdHgubnVtUmVzdWx0c1xuICogQHBhcmFtIHtib29sZWFufSBjdHguaXNBbGxTZXR0bGVkXG4gKi9cbiAgICAgICAgb25GdWxmaWxsZWQodmFsdWUsIGN0eCkge1xuICAgICAgICAgIHRoaXMuZmFjZXRzLmhlbHBlci5wcm9jZXNzUmVzdWx0KHZhbHVlLCBjdHgsIFwiZnVsZmlsbGVkXCIpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAqIEBwYXJhbSB7dW5rbm93bn0gcmVhc29uXG4gKiBAcGFyYW0ge29iamVjdH0gY3R4XG4gKiBAcGFyYW0ge2JpZ2ludH0gY3R4LmlkXG4gKiBAcGFyYW0ge251bWJlcn0gY3R4LmluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gY3R4Lm51bVJlc3VsdHNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY3R4LmlzQWxsU2V0dGxlZFxuICovXG4gICAgICAgIG9uUmVqZWN0ZWQocmVhc29uLCBjdHgpIHtcbiAgICAgICAgICB0aGlzLmZhY2V0cy5oZWxwZXIucHJvY2Vzc1Jlc3VsdChyZWFzb24sIGN0eCwgXCJyZWplY3RlZFwiKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGhlbHBlcjoge1xuICAgICAgICAvKipcbiAqIEBwYXJhbSB7dW5rbm93bltdfSBzcGVjaW1lbnNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNBbGxTZXR0bGVkXG4gKi9cbiAgICAgICAgY3JlYXRlVm93KHNwZWNpbWVucywgaXNBbGxTZXR0bGVkKSB7XG4gICAgICAgICAgY29uc3QgeyBuZXh0SWQ6IGlkLCBpZFRvVm93U3RhdGUgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgY29uc3Qga2l0ID0gbWFrZVZvd0tpdCgpO1xuICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBzcGVjaW1lbnMubGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgICAgICAgICB3YXRjaChzcGVjaW1lbnNbaW5kZXhdLCB0aGlzLmZhY2V0cy53YXRjaGVyLCB7XG4gICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgbnVtUmVzdWx0czogc3BlY2ltZW5zLmxlbmd0aCxcbiAgICAgICAgICAgICAgaXNBbGxTZXR0bGVkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNwZWNpbWVucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLm5leHRJZCArPSAxbjtcbiAgICAgICAgICAgIGlkVG9Wb3dTdGF0ZS5pbml0KFxuICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgaGFyZGVuKHtcbiAgICAgICAgICAgICAgICByZXNvbHZlcjoga2l0LnJlc29sdmVyLFxuICAgICAgICAgICAgICAgIHJlbWFpbmluZzogc3BlY2ltZW5zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICByZXN1bHRzTWFwOiBkZXRhY2hlZC5tYXBTdG9yZShcInJlc3VsdHNNYXBcIiksXG4gICAgICAgICAgICAgICAgaXNBbGxTZXR0bGVkXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgaWRUb05vblN0b3JhYmxlUmVzdWx0cyA9IHByb3ZpZGVMYXp5TWFwKFxuICAgICAgICAgICAgICB1dGlsc1RvTm9uU3RvcmFibGVSZXN1bHRzLFxuICAgICAgICAgICAgICB0aGlzLmZhY2V0cy51dGlscyxcbiAgICAgICAgICAgICAgKCkgPT4gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlkVG9Ob25TdG9yYWJsZVJlc3VsdHMuc2V0KGlkLCAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAga2l0LnJlc29sdmVyLnJlc29sdmUoaGFyZGVuKFtdKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBraXQudm93O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAqIEBwYXJhbSB7dW5rbm93bn0gcmVzdWx0XG4gKiBAcGFyYW0ge29iamVjdH0gY3R4XG4gKiBAcGFyYW0ge2JpZ2ludH0gY3R4LmlkXG4gKiBAcGFyYW0ge251bWJlcn0gY3R4LmluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gY3R4Lm51bVJlc3VsdHNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gY3R4LmlzQWxsU2V0dGxlZFxuICogQHBhcmFtIHsnZnVsZmlsbGVkJyB8ICdyZWplY3RlZCd9IHN0YXR1c1xuICovXG4gICAgICAgIHByb2Nlc3NSZXN1bHQocmVzdWx0LCB7IGlkLCBpbmRleCwgbnVtUmVzdWx0cywgaXNBbGxTZXR0bGVkIH0sIHN0YXR1cykge1xuICAgICAgICAgIGNvbnN0IHsgaWRUb1Zvd1N0YXRlIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIGlmICghaWRUb1Zvd1N0YXRlLmhhcyhpZCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgaWRUb05vblN0b3JhYmxlUmVzdWx0cyA9IHByb3ZpZGVMYXp5TWFwKFxuICAgICAgICAgICAgdXRpbHNUb05vblN0b3JhYmxlUmVzdWx0cyxcbiAgICAgICAgICAgIHRoaXMuZmFjZXRzLnV0aWxzLFxuICAgICAgICAgICAgKCkgPT4gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKVxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgeyByZW1haW5pbmcsIHJlc3VsdHNNYXAsIHJlc29sdmVyIH0gPSBpZFRvVm93U3RhdGUuZ2V0KGlkKTtcbiAgICAgICAgICBpZiAoIWlzQWxsU2V0dGxlZCAmJiBzdGF0dXMgPT09IFwicmVqZWN0ZWRcIikge1xuICAgICAgICAgICAgaWRUb1Zvd1N0YXRlLmRlbGV0ZShpZCk7XG4gICAgICAgICAgICBpZFRvTm9uU3RvcmFibGVSZXN1bHRzLmRlbGV0ZShpZCk7XG4gICAgICAgICAgICByZXNvbHZlci5yZWplY3QocmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgcG9zc2libHlXcmFwcGVkUmVzdWx0ID0gaXNBbGxTZXR0bGVkID8gaGFyZGVuKHtcbiAgICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICAgIFtzdGF0dXMgPT09IFwiZnVsZmlsbGVkXCIgPyBcInZhbHVlXCIgOiBcInJlYXNvblwiXTogcmVzdWx0XG4gICAgICAgICAgfSkgOiByZXN1bHQ7XG4gICAgICAgICAgY29uc3Qgbm9uU3RvcmFibGVSZXN1bHRzID0gcHJvdmlkZUxhenlNYXAoXG4gICAgICAgICAgICBpZFRvTm9uU3RvcmFibGVSZXN1bHRzLFxuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAoKSA9PiAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoem9uZS5pc1N0b3JhYmxlKHBvc3NpYmx5V3JhcHBlZFJlc3VsdCkpIHtcbiAgICAgICAgICAgIHJlc3VsdHNNYXAuaW5pdChpbmRleCwgcG9zc2libHlXcmFwcGVkUmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9uU3RvcmFibGVSZXN1bHRzLnNldChpbmRleCwgcG9zc2libHlXcmFwcGVkUmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgdm93U3RhdGUgPSBoYXJkZW4oe1xuICAgICAgICAgICAgcmVtYWluaW5nOiByZW1haW5pbmcgLSAxLFxuICAgICAgICAgICAgcmVzdWx0c01hcCxcbiAgICAgICAgICAgIHJlc29sdmVyLFxuICAgICAgICAgICAgaXNBbGxTZXR0bGVkXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKHZvd1N0YXRlLnJlbWFpbmluZyA+IDApIHtcbiAgICAgICAgICAgIGlkVG9Wb3dTdGF0ZS5zZXQoaWQsIHZvd1N0YXRlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWRUb1Zvd1N0YXRlLmRlbGV0ZShpZCk7XG4gICAgICAgICAgaWRUb05vblN0b3JhYmxlUmVzdWx0cy5kZWxldGUoaWQpO1xuICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBuZXcgQXJyYXkobnVtUmVzdWx0cyk7XG4gICAgICAgICAgbGV0IG51bUxvc3QgPSAwO1xuICAgICAgICAgIGZvciAobGV0IGkzID0gMDsgaTMgPCBudW1SZXN1bHRzOyBpMyArPSAxKSB7XG4gICAgICAgICAgICBpZiAobm9uU3RvcmFibGVSZXN1bHRzLmhhcyhpMykpIHtcbiAgICAgICAgICAgICAgcmVzdWx0c1tpM10gPSBub25TdG9yYWJsZVJlc3VsdHMuZ2V0KGkzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0c01hcC5oYXMoaTMpKSB7XG4gICAgICAgICAgICAgIHJlc3VsdHNbaTNdID0gcmVzdWx0c01hcC5nZXQoaTMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbnVtTG9zdCArPSAxO1xuICAgICAgICAgICAgICByZXN1bHRzW2kzXSA9IGlzQWxsU2V0dGxlZCA/IHsgc3RhdHVzOiBcInJlamVjdGVkXCIsIHJlYXNvbjogXCJVbnN0b3JhYmxlIHJlc3VsdCB3YXMgbG9zdFwiIH0gOiB2b2lkIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChudW1Mb3N0ID4gMCAmJiAhaXNBbGxTZXR0bGVkKSB7XG4gICAgICAgICAgICByZXNvbHZlci5yZWplY3QoXG4gICAgICAgICAgICAgIGFzc2VydC5lcnJvcihYNGAke251bUxvc3R9IHVuc3RvcmFibGUgcmVzdWx0cyB3ZXJlIGxvc3RgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZXIucmVzb2x2ZShoYXJkZW4ocmVzdWx0cykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJldHJ5UmVqZWN0aW9uUHJvbWlzZVdhdGNoZXI6IHtcbiAgICAgICAgb25GdWxmaWxsZWQoX3Jlc3VsdCkge1xuICAgICAgICB9LFxuICAgICAgICBvblJlamVjdGVkKHJlYXNvbiwgZmFpbGVkT3ApIHtcbiAgICAgICAgICBpZiAoaXNSZXRyeWFibGVSZWFzb24yKHJlYXNvbiwgdm9pZCAwKSkge1xuICAgICAgICAgICAgRmFpbDVgUGVuZGluZyAke2JhcmUyKGZhaWxlZE9wKX0gY291bGQgbm90IHJldHJ5OyAke3JlYXNvbn1gO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgKTtcbiAgY29uc3QgbWFrZVdhdGNoVXRpbCA9ICgpID0+IHtcbiAgICBjb25zdCB7IHV0aWxzIH0gPSBtYWtlV2F0Y2hVdGlsc0tpdCgpO1xuICAgIHJldHVybiBoYXJkZW4odXRpbHMpO1xuICB9O1xuICByZXR1cm4gbWFrZVdhdGNoVXRpbDtcbn07XG5oYXJkZW4ocHJlcGFyZVdhdGNoVXRpbHMpO1xuXG4vKiAuLi92b3cvc3JjL3dhdGNoLmpzKi9cbnZhciB7IGFwcGx5OiBhcHBseTggfSA9IFJlZmxlY3Q7XG52YXIgbWFrZVdhdGNoTmV4dFN0ZXAgPSAoem9uZSkgPT4gKFxuICAvKipcbiAqIElmIHRoZSBzcGVjaW1lbiBpcyBhIHZvdywgb2J0YWluIGEgZnJlc2ggc2hvcnRlbmVkIHByb21pc2UgZnJvbSBpdCxcbiAqIG90aGVyd2lzZSBjb2VyY2UgdGhlIG5vbi12b3cgc3BlY2ltZW4gdG8gYSBwcm9taXNlLiAgVGhlbiwgYXNzb2NpYXRlIGFcbiAqICh1c3VhbGx5IGR1cmFibGUpIHdhdGNoZXIgb2JqZWN0IHdpdGggdGhlIHByb21pc2UuXG4gKlxuICogQHBhcmFtIHthbnl9IHNwZWNpbWVuXG4gKiBAcGFyYW0ge1Byb21pc2VXYXRjaGVyfSBwcm9taXNlV2F0Y2hlclxuICovXG4gIChzcGVjaW1lbiwgcHJvbWlzZVdhdGNoZXIpID0+IHtcbiAgICBsZXQgcHJvbWlzZTtcbiAgICBjb25zdCBwYXlsb2FkID0gZ2V0Vm93UGF5bG9hZChzcGVjaW1lbik7XG4gICAgaWYgKHBheWxvYWQpIHtcbiAgICAgIHByb21pc2UgPSBFKHBheWxvYWQudm93VjApLnNob3J0ZW4oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZSA9IEUucmVzb2x2ZShzcGVjaW1lbik7XG4gICAgfVxuICAgIHpvbmUud2F0Y2hQcm9taXNlKHByb21pc2UsIHByb21pc2VXYXRjaGVyKTtcbiAgfVxuKTtcbnZhciBzZXR0bGUgPSBhc3luYyAocmVzb2x2ZXIsIHdhdGNoZXIsIHdjYiwgdmFsdWUsIHdhdGNoZXJBcmdzID0gW10pID0+IHtcbiAgYXdhaXQgbnVsbDtcbiAgdHJ5IHtcbiAgICBsZXQgY2hhaW5lZFZhbHVlID0gdmFsdWU7XG4gICAgY29uc3QgdzIgPSB3YXRjaGVyICYmIHdhdGNoZXJbd2NiXTtcbiAgICBpZiAodzIpIHtcbiAgICAgIGNoYWluZWRWYWx1ZSA9IGFwcGx5OCh3Miwgd2F0Y2hlciwgW3ZhbHVlLCAuLi53YXRjaGVyQXJnc10pO1xuICAgIH0gZWxzZSBpZiAod2NiID09PSBcIm9uUmVqZWN0ZWRcIikge1xuICAgICAgdGhyb3cgdmFsdWU7XG4gICAgfVxuICAgIGlmIChyZXNvbHZlcikge1xuICAgICAgcmVzb2x2ZXIucmVzb2x2ZShjaGFpbmVkVmFsdWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhd2FpdCBjaGFpbmVkVmFsdWU7XG4gIH0gY2F0Y2ggKGUyKSB7XG4gICAgaWYgKHJlc29sdmVyKSB7XG4gICAgICByZXNvbHZlci5yZWplY3QoZTIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aHJvdyBlMjtcbiAgfVxufTtcbnZhciBwcmVwYXJlUHJvbWlzZVdhdGNoZXIgPSAoem9uZSwgaXNSZXRyeWFibGVSZWFzb24yLCB3YXRjaE5leHRTdGVwKSA9PiB7XG4gIGNvbnN0IHdhdGNoZXJTZWVuUGF5bG9hZHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbiAgY29uc3QgZ2V0U2VlblBheWxvYWRzID0gKHdhdGNoZXIpID0+IHtcbiAgICBsZXQgc2VlblBheWxvYWRzID0gd2F0Y2hlclNlZW5QYXlsb2Fkcy5nZXQod2F0Y2hlcik7XG4gICAgaWYgKCFzZWVuUGF5bG9hZHMpIHtcbiAgICAgIHNlZW5QYXlsb2FkcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha1NldCgpO1xuICAgICAgd2F0Y2hlclNlZW5QYXlsb2Fkcy5zZXQod2F0Y2hlciwgc2VlblBheWxvYWRzKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlZW5QYXlsb2FkcztcbiAgfTtcbiAgcmV0dXJuIHpvbmUuZXhvQ2xhc3MoXG4gICAgXCJQcm9taXNlV2F0Y2hlclwiLFxuICAgIFByb21pc2VXYXRjaGVySSxcbiAgICAvKipcbiAqIEB0ZW1wbGF0ZSBbVD1hbnldXG4gKiBAdGVtcGxhdGUgW1RSZXN1bHQxPVRdXG4gKiBAdGVtcGxhdGUgW1RSZXN1bHQyPW5ldmVyXVxuICogQHBhcmFtIHtWb3dSZXNvbHZlcjxUUmVzdWx0MSB8IFRSZXN1bHQyPn0gcmVzb2x2ZXJcbiAqIEBwYXJhbSB7V2F0Y2hlcjxULCBUUmVzdWx0MSwgVFJlc3VsdDI+fSBbd2F0Y2hlcl1cbiAqIEBwYXJhbSB7dW5rbm93bltdfSBbd2F0Y2hlckFyZ3NdXG4gKi9cbiAgICAocmVzb2x2ZXIsIHdhdGNoZXIsIHdhdGNoZXJBcmdzKSA9PiB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHtcbiAgICAgICAgdm93OiAoXG4gICAgICAgICAgLyoqIEB0eXBlIHt1bmtub3dufSAqL1xuICAgICAgICAgIHZvaWQgMFxuICAgICAgICApLFxuICAgICAgICBwcmlvclJldHJ5VmFsdWU6IChcbiAgICAgICAgICAvKiogQHR5cGUge2FueX0gKi9cbiAgICAgICAgICB2b2lkIDBcbiAgICAgICAgKSxcbiAgICAgICAgcmVzb2x2ZXIsXG4gICAgICAgIHdhdGNoZXIsXG4gICAgICAgIHdhdGNoZXJBcmdzOiBoYXJkZW4od2F0Y2hlckFyZ3MpXG4gICAgICB9O1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgLyoqIEB0eXBlIHtQYXJ0aWFsPHR5cGVvZiBzdGF0ZT59ICovXG4gICAgICAgIHN0YXRlXG4gICAgICApO1xuICAgIH0sXG4gICAge1xuICAgICAgLyoqIEB0eXBlIHtSZXF1aXJlZDxQcm9taXNlV2F0Y2hlcj5bJ29uRnVsZmlsbGVkJ119ICovXG4gICAgICBvbkZ1bGZpbGxlZCh2YWx1ZSkge1xuICAgICAgICBjb25zdCB7IHdhdGNoZXIsIHdhdGNoZXJBcmdzLCByZXNvbHZlciB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgaWYgKCFyZXNvbHZlcikge1xuICAgICAgICAgIHRocm93IEVycm9yKFwiVW5leHBlY3RlZCBtdWx0aXBsZSBjYWxscyB0byBQcm9taXNlV2F0Y2hlclwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXlsb2FkID0gZ2V0Vm93UGF5bG9hZCh2YWx1ZSk7XG4gICAgICAgIGlmIChwYXlsb2FkKSB7XG4gICAgICAgICAgY29uc3Qgc2VlblBheWxvYWRzID0gZ2V0U2VlblBheWxvYWRzKHRoaXMuc2VsZik7XG4gICAgICAgICAgaWYgKHNlZW5QYXlsb2Fkcy5oYXMocGF5bG9hZC52b3dWMCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbGYub25SZWplY3RlZChFcnJvcihcIlZvdyByZXNvbHV0aW9uIGN5Y2xlIGRldGVjdGVkXCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VlblBheWxvYWRzLmFkZChwYXlsb2FkLnZvd1YwKTtcbiAgICAgICAgICB0aGlzLnN0YXRlLnZvdyA9IHZhbHVlO1xuICAgICAgICAgIHdhdGNoTmV4dFN0ZXAodmFsdWUsIHRoaXMuc2VsZik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHdhdGNoZXJTZWVuUGF5bG9hZHMuZGVsZXRlKHRoaXMuc2VsZik7XG4gICAgICAgIHRoaXMuc3RhdGUucHJpb3JSZXRyeVZhbHVlID0gdm9pZCAwO1xuICAgICAgICB0aGlzLnN0YXRlLndhdGNoZXIgPSB2b2lkIDA7XG4gICAgICAgIHRoaXMuc3RhdGUucmVzb2x2ZXIgPSB2b2lkIDA7XG4gICAgICAgIHZvaWQgc2V0dGxlKHJlc29sdmVyLCB3YXRjaGVyLCBcIm9uRnVsZmlsbGVkXCIsIHZhbHVlLCB3YXRjaGVyQXJncyk7XG4gICAgICB9LFxuICAgICAgLyoqIEB0eXBlIHtSZXF1aXJlZDxQcm9taXNlV2F0Y2hlcj5bJ29uUmVqZWN0ZWQnXX0gKi9cbiAgICAgIG9uUmVqZWN0ZWQocmVhc29uKSB7XG4gICAgICAgIGNvbnN0IHsgdm93LCB3YXRjaGVyLCB3YXRjaGVyQXJncywgcmVzb2x2ZXIsIHByaW9yUmV0cnlWYWx1ZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgaWYgKCFyZXNvbHZlcikge1xuICAgICAgICAgIHRocm93IEVycm9yKFwiVW5leHBlY3RlZCBtdWx0aXBsZSBjYWxscyB0byBQcm9taXNlV2F0Y2hlclwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXRyeVZhbHVlID0gaXNSZXRyeWFibGVSZWFzb24yKHJlYXNvbiwgcHJpb3JSZXRyeVZhbHVlKTtcbiAgICAgICAgaWYgKHJldHJ5VmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlLnByaW9yUmV0cnlWYWx1ZSA9IHJldHJ5VmFsdWU7XG4gICAgICAgICAgaWYgKHZvdykge1xuICAgICAgICAgICAgd2F0Y2hOZXh0U3RlcCh2b3csIHRoaXMuc2VsZik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdhdGNoZXJTZWVuUGF5bG9hZHMuZGVsZXRlKHRoaXMuc2VsZik7XG4gICAgICAgIHRoaXMuc3RhdGUucHJpb3JSZXRyeVZhbHVlID0gdm9pZCAwO1xuICAgICAgICB0aGlzLnN0YXRlLnJlc29sdmVyID0gdm9pZCAwO1xuICAgICAgICB0aGlzLnN0YXRlLndhdGNoZXIgPSB2b2lkIDA7XG4gICAgICAgIHZvaWQgc2V0dGxlKHJlc29sdmVyLCB3YXRjaGVyLCBcIm9uUmVqZWN0ZWRcIiwgcmVhc29uLCB3YXRjaGVyQXJncyk7XG4gICAgICB9XG4gICAgfVxuICApO1xufTtcbnZhciBwcmVwYXJlV2F0Y2ggPSAoem9uZSwgbWFrZVZvd0tpdCwgaXNSZXRyeWFibGVSZWFzb24yID0gKF9yZWFzb24sIF9sYXN0VmFsdWUpID0+IHZvaWQgMCkgPT4ge1xuICBjb25zdCB3YXRjaE5leHRTdGVwID0gbWFrZVdhdGNoTmV4dFN0ZXAoem9uZSk7XG4gIGNvbnN0IG1ha2VQcm9taXNlV2F0Y2hlciA9IHByZXBhcmVQcm9taXNlV2F0Y2hlcihcbiAgICB6b25lLFxuICAgIGlzUmV0cnlhYmxlUmVhc29uMixcbiAgICB3YXRjaE5leHRTdGVwXG4gICk7XG4gIGNvbnN0IHdhdGNoID0gKHNwZWNpbWVuUCwgd2F0Y2hlciwgLi4ud2F0Y2hlckFyZ3MpID0+IHtcbiAgICBjb25zdCB7IHJlc29sdmVyLCB2b3cgfSA9IG1ha2VWb3dLaXQoKTtcbiAgICBjb25zdCBwcm9taXNlV2F0Y2hlciA9IG1ha2VQcm9taXNlV2F0Y2hlcihyZXNvbHZlciwgd2F0Y2hlciwgd2F0Y2hlckFyZ3MpO1xuICAgIGNvbnN0IHByb21pc2UgPSBFLnJlc29sdmUoc3BlY2ltZW5QKTtcbiAgICB6b25lLndhdGNoUHJvbWlzZShwcm9taXNlLCBwcm9taXNlV2F0Y2hlcik7XG4gICAgcmV0dXJuIHZvdztcbiAgfTtcbiAgaGFyZGVuKHdhdGNoKTtcbiAgcmV0dXJuIHdhdGNoO1xufTtcbmhhcmRlbihwcmVwYXJlV2F0Y2gpO1xuXG4vKiAuLi92b3cvc3JjL3JlamVjdGlvbi10cmFja2VyLmpzKi9cbnZhciBtYWtlVW5oYW5kbGVkUmVqZWN0aW9uQ2FuY2VsbGVyID0gKHJlamVjdGVkLCB1cGdyYWRlZFBLKSA9PiB7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgcmVqZWN0ZWQ/LmNhdGNoKHNpbmsyKTtcbiAgICB1cGdyYWRlZFBLPy5yZXNvbHZlKCk7XG4gIH07XG59O1xudmFyIHByZXBhcmVWb3dSZWplY3Rpb25UcmFja2VyID0gKHpvbmUpID0+IHtcbiAgY29uc3Qgdm93VG9DYW5jZWxVbmhhbmRsZWRSZWplY3Rpb24gPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbiAgY29uc3QgdXBncmFkZVJlamVjdGlvbldhdGNoZXIgPSB6b25lLmV4byhcbiAgICBcIlVwZ3JhZGVSZWplY3Rpb25XYXRjaGVyXCIsXG4gICAgTS5pbnRlcmZhY2UoXCJVcGdyYWRlUmVqZWN0aW9uV2F0Y2hlclwiLCB7XG4gICAgICBvblJlamVjdGVkOiBNLmNhbGwoTS5yYXcoKSwgTS5yYXcoKSkucmV0dXJucygpXG4gICAgfSksXG4gICAge1xuICAgICAgb25SZWplY3RlZCh1cGdyYWRlUmVhc29uLCBiYXNlUmVhc29uKSB7XG4gICAgICAgIGNvbnN0IHJlYXNvbiA9IGFzc2VydC5lcnJvcihcbiAgICAgICAgICByZWRhY3RlZGBWT1dfUkVKRUNUSU9OICR7YmFzZVJlYXNvbn0gbm90IGhhbmRsZWQgYmVmb3JlIHVwZ3JhZGUgJHt1cGdyYWRlUmVhc29ufWBcbiAgICAgICAgKTtcbiAgICAgICAgdGhyb3cgcmVhc29uO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbiAgY29uc3Qgdm93UmVqZWN0aW9uVHJhY2tlciA9IHpvbmUuZXhvKFxuICAgIFwiVm93UmVqZWN0aW9uVHJhY2tlclwiLFxuICAgIE0uaW50ZXJmYWNlKFwiVm93UmVqZWN0aW9uVHJhY2tlclwiLCB7XG4gICAgICBoYW5kbGU6IE0uY2FsbChNLnJlbW90YWJsZSgpKS5yZXR1cm5zKCksXG4gICAgICByZWplY3Q6IE0uY2FsbChNLnJlbW90YWJsZSgpLCBNLnJhdygpKS5yZXR1cm5zKClcbiAgICB9KSxcbiAgICB7XG4gICAgICAvKipcbiAqIEBwYXJhbSB7UGFzc2FibGVDYXB9IHZvd0NhcFxuICovXG4gICAgICBoYW5kbGUodm93Q2FwKSB7XG4gICAgICAgIGNvbnN0IGNhbmNlbCA9IHZvd1RvQ2FuY2VsVW5oYW5kbGVkUmVqZWN0aW9uLmdldCh2b3dDYXApO1xuICAgICAgICBpZiAoIWNhbmNlbCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIGFzc2VydC5lcnJvcihcbiAgICAgICAgICAgICAgcmVkYWN0ZWRgTm93IGhhbmRsaW5nIGEgVk9XX1JFSkVDVElPTiBmcm9tIGEgcHJpb3IgaW5jYXJuYXRpb24gZm9yICR7dm93Q2FwfWBcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2b3dUb0NhbmNlbFVuaGFuZGxlZFJlamVjdGlvbi5kZWxldGUodm93Q2FwKTtcbiAgICAgICAgY2FuY2VsKCk7XG4gICAgICB9LFxuICAgICAgLyoqXG4gKiBAcGFyYW0ge1Bhc3NhYmxlQ2FwfSB2b3dDYXBcbiAqIEBwYXJhbSB7YW55fSByZWFzb25cbiAqL1xuICAgICAgcmVqZWN0KHZvd0NhcCwgcmVhc29uKSB7XG4gICAgICAgIGlmICh2b3dUb0NhbmNlbFVuaGFuZGxlZFJlamVjdGlvbi5oYXModm93Q2FwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBoYXJkZW4ocmVhc29uKTtcbiAgICAgICAgY29uc3QgYmFzZVJlYXNvbiA9IHpvbmUuaXNTdG9yYWJsZShyZWFzb24pID8gcmVhc29uIDogYXNzZXJ0LmVycm9yKHJlZGFjdGVkYFZvdyByZWplY3Rpb24gcmVhc29uIHdhcyBub3Qgc3RvcmVkOiAke3JlYXNvbn1gKTtcbiAgICAgICAgY29uc3QgdXBncmFkZWRQSyA9IG1ha2VQcm9taXNlS2l0KCk7XG4gICAgICAgIHpvbmUud2F0Y2hQcm9taXNlKFxuICAgICAgICAgIHVwZ3JhZGVkUEsucHJvbWlzZSxcbiAgICAgICAgICB1cGdyYWRlUmVqZWN0aW9uV2F0Y2hlcixcbiAgICAgICAgICBiYXNlUmVhc29uXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHJlamVjdGVkID0gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgICAgICAgY29uc3QgY2FuY2VsID0gbWFrZVVuaGFuZGxlZFJlamVjdGlvbkNhbmNlbGxlcihyZWplY3RlZCwgdXBncmFkZWRQSyk7XG4gICAgICAgIHZvd1RvQ2FuY2VsVW5oYW5kbGVkUmVqZWN0aW9uLnNldCh2b3dDYXAsIGNhbmNlbCk7XG4gICAgICB9XG4gICAgfVxuICApO1xuICByZXR1cm4gdm93UmVqZWN0aW9uVHJhY2tlcjtcbn07XG5cbi8qIC4uL3Zvdy9zcmMvcmV0cnlhYmxlLmpzKi9cbnZhciB7IGRlZmluZVByb3BlcnRpZXM6IGRlZmluZVByb3BlcnRpZXM0IH0gPSBPYmplY3Q7XG52YXIgUmV0cnlhYmxlRmxvd0lLaXQgPSBoYXJkZW4oe1xuICBmbG93OiBNLmludGVyZmFjZShcIkZsb3dcIiwge1xuICAgIHJlc3RhcnQ6IE0uY2FsbCgpLnJldHVybnMoKSxcbiAgICBnZXRPdXRjb21lOiBNLmNhbGwoKS5yZXR1cm5zKFZvd1NoYXBlKVxuICB9KSxcbiAgcmVzdWx0V2F0Y2hlcjogUHJvbWlzZVdhdGNoZXJJXG59KTtcbnZhciBBZG1pblJldHJ5YWJsZUZsb3dJID0gTS5pbnRlcmZhY2UoXCJSZXRyeWFibGVGbG93QWRtaW5cIiwge1xuICBnZXRGbG93Rm9yT3V0Y29tZVZvdzogTS5jYWxsKFZvd1NoYXBlKS5yZXR1cm5zKE0ub3B0KE0ucmVtb3RhYmxlKFwiZmxvd1wiKSkpXG59KTtcbnZhciBwcmVwYXJlUmV0cnlhYmxlVG9vbHMgPSAob3V0ZXJab25lLCBvdXRlck9wdGlvbnMpID0+IHtcbiAgY29uc3QgeyBtYWtlVm93S2l0LCBpc1JldHJ5YWJsZVJlYXNvbjogaXNSZXRyeWFibGVSZWFzb24yIH0gPSBvdXRlck9wdGlvbnM7XG4gIGNvbnN0IGFzVm93ID0gbWFrZUFzVm93KG1ha2VWb3dLaXQpO1xuICBjb25zdCBmbG93Rm9yT3V0Y29tZVZvd0tleSA9IChcbiAgICAvKiogQHR5cGUge01hcFN0b3JlPFBhc3NhYmxlQ2FwLCBSZXRyeWFibGVGbG93Pn0gKi9cbiAgICBvdXRlclpvbmUubWFwU3RvcmUoXCJyZXRyeWFibGVGbG93Rm9yT3V0Y29tZVZvd1wiLCB7XG4gICAgICBrZXlTaGFwZTogTS5yZW1vdGFibGUoXCJ0b1Bhc3NhYmxlQ2FwXCIpLFxuICAgICAgdmFsdWVTaGFwZTogTS5yZW1vdGFibGUoXCJmbG93XCIpXG4gICAgICAvKiBpc0RvbmUgPT09IGZhbHNlKi9cbiAgICB9KVxuICApO1xuICBjb25zdCBwcmVwYXJlUmV0cnlhYmxlRmxvd0tpdCA9ICh6b25lLCB0YWcsIHJldHJ5YWJsZUZ1bmMpID0+IHtcbiAgICB0eXBlb2YgcmV0cnlhYmxlRnVuYyA9PT0gXCJmdW5jdGlvblwiIHx8IHRocm93UmVkYWN0ZWRgcmV0cnlhYmxlRnVuYyBtdXN0IGJlIGEgY2FsbGFibGUgZnVuY3Rpb24gJHtyZXRyeWFibGVGdW5jfWA7XG4gICAgY29uc3QgaW50ZXJuYWxNYWtlUmV0cnlhYmxlRmxvd0tpdCA9IHpvbmUuZXhvQ2xhc3NLaXQoXG4gICAgICB0YWcsXG4gICAgICBSZXRyeWFibGVGbG93SUtpdCxcbiAgICAgIChhY3RpdmF0aW9uQXJncykgPT4ge1xuICAgICAgICBoYXJkZW4oYWN0aXZhdGlvbkFyZ3MpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGFjdGl2YXRpb25BcmdzLFxuICAgICAgICAgIC8qIHJlc3RhcnRpbmcgdGhlIHJldHJ5YWJsZSBmdW5jdGlvbiB1c2VzIHRoZSBvcmlnaW5hbCBhcmdzKi9cbiAgICAgICAgICBvdXRjb21lS2l0OiBtYWtlVm93S2l0KCksXG4gICAgICAgICAgLyogb3V0Y29tZSBvZiBhY3RpdmF0aW9uIGFzIHZvdyovXG4gICAgICAgICAgbGFzdFJldHJ5UmVhc29uOiB2b2lkIDAsXG4gICAgICAgICAgcnVuczogMG4sXG4gICAgICAgICAgaXNEb25lOiBmYWxzZVxuICAgICAgICAgIC8qIHBlcnNpc3RlbnRseSBkb25lKi9cbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGZsb3c6IHtcbiAgICAgICAgICAvKipcbiAqIENhbGxzIHRoZSByZXRyeWFibGUgZnVuY3Rpb24sIGVpdGhlciBmb3IgdGhlIGluaXRpYWwgcnVuIG9yIHdoZW5cbiAqIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHJ1biBmYWlscyB3aXRoIGEgcmV0cnlhYmxlIHJlYXNvbi5cbiAqL1xuICAgICAgICAgIHJlc3RhcnQoKSB7XG4gICAgICAgICAgICBjb25zdCB7IHN0YXRlLCBmYWNldHMgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IGFjdGl2YXRpb25BcmdzLCBpc0RvbmUgfSA9IHN0YXRlO1xuICAgICAgICAgICAgY29uc3QgeyBmbG93LCByZXN1bHRXYXRjaGVyIH0gPSBmYWNldHM7XG4gICAgICAgICAgICAhaXNEb25lIHx8IC8qIHNlcGFyYXRlIGxpbmUgc28gSSBjYW4gc2V0IGEgYnJlYWtwb2ludCovXG4gICAgICAgICAgICB0aHJvd1JlZGFjdGVkYENhbm5vdCByZXN0YXJ0IGEgZG9uZSByZXRyeWFibGUgZmxvdyAke2Zsb3d9YDtcbiAgICAgICAgICAgIGNvbnN0IHJ1bklkID0gc3RhdGUucnVucyArIDFuO1xuICAgICAgICAgICAgc3RhdGUucnVucyA9IHJ1bklkO1xuICAgICAgICAgICAgbGV0IHJlc3VsdFA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICByZXN1bHRQID0gUHJvbWlzZS5yZXNvbHZlKHJldHJ5YWJsZUZ1bmMoLi4uYWN0aXZhdGlvbkFyZ3MpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICByZXN1bHRQID0gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dGVyWm9uZS53YXRjaFByb21pc2UoaGFyZGVuKHJlc3VsdFApLCByZXN1bHRXYXRjaGVyLCBydW5JZCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZXRPdXRjb21lKCkge1xuICAgICAgICAgICAgY29uc3QgeyBzdGF0ZSB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IHsgb3V0Y29tZUtpdCB9ID0gc3RhdGU7XG4gICAgICAgICAgICByZXR1cm4gb3V0Y29tZUtpdC52b3c7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXN1bHRXYXRjaGVyOiB7XG4gICAgICAgICAgb25GdWxmaWxsZWQodmFsdWUsIHJ1bklkKSB7XG4gICAgICAgICAgICBjb25zdCB7IHN0YXRlIH0gPSB0aGlzO1xuICAgICAgICAgICAgY29uc3QgeyBydW5zLCBvdXRjb21lS2l0IH0gPSBzdGF0ZTtcbiAgICAgICAgICAgIGlmIChydW5JZCAhPT0gcnVucykgcmV0dXJuO1xuICAgICAgICAgICAgIXN0YXRlLmlzRG9uZSB8fCB0aHJvd1JlZGFjdGVkYENhbm5vdCByZXNvbHZlIGEgZG9uZSByZXRyeWFibGUgZmxvdyAke3RoaXMuZmFjZXRzLmZsb3d9YDtcbiAgICAgICAgICAgIG91dGNvbWVLaXQucmVzb2x2ZXIucmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgICBmbG93Rm9yT3V0Y29tZVZvd0tleS5kZWxldGUodG9QYXNzYWJsZUNhcChvdXRjb21lS2l0LnZvdykpO1xuICAgICAgICAgICAgc3RhdGUuaXNEb25lID0gdHJ1ZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9uUmVqZWN0ZWQocmVhc29uLCBydW5JZCkge1xuICAgICAgICAgICAgY29uc3QgeyBzdGF0ZSB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IHsgcnVucywgb3V0Y29tZUtpdCB9ID0gc3RhdGU7XG4gICAgICAgICAgICBpZiAocnVuSWQgIT09IHJ1bnMpIHJldHVybjtcbiAgICAgICAgICAgICFzdGF0ZS5pc0RvbmUgfHwgdGhyb3dSZWRhY3RlZGBDYW5ub3QgcmVqZWN0IGEgZG9uZSByZXRyeWFibGUgZmxvdyAke3RoaXMuZmFjZXRzLmZsb3d9YDtcbiAgICAgICAgICAgIGNvbnN0IHJldHJ5UmVhc29uID0gaXNSZXRyeWFibGVSZWFzb24yKFxuICAgICAgICAgICAgICByZWFzb24sXG4gICAgICAgICAgICAgIHN0YXRlLmxhc3RSZXRyeVJlYXNvblxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChyZXRyeVJlYXNvbikge1xuICAgICAgICAgICAgICBzdGF0ZS5sYXN0UmV0cnlSZWFzb24gPSByZXRyeVJlYXNvbjtcbiAgICAgICAgICAgICAgdGhpcy5mYWNldHMuZmxvdy5yZXN0YXJ0KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvdXRjb21lS2l0LnJlc29sdmVyLnJlamVjdChyZWFzb24pO1xuICAgICAgICAgICAgICBmbG93Rm9yT3V0Y29tZVZvd0tleS5kZWxldGUodG9QYXNzYWJsZUNhcChvdXRjb21lS2l0LnZvdykpO1xuICAgICAgICAgICAgICBzdGF0ZS5pc0RvbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gICAgY29uc3QgbWFrZVJldHJ5YWJsZUZsb3dLaXQgPSAoYWN0aXZhdGlvbkFyZ3MpID0+IHtcbiAgICAgIGNvbnN0IHJldHJ5YWJsZUtpdCA9IGludGVybmFsTWFrZVJldHJ5YWJsZUZsb3dLaXQoYWN0aXZhdGlvbkFyZ3MpO1xuICAgICAgY29uc3QgeyBmbG93IH0gPSByZXRyeWFibGVLaXQ7XG4gICAgICBjb25zdCB2b3cgPSBmbG93LmdldE91dGNvbWUoKTtcbiAgICAgIGZsb3dGb3JPdXRjb21lVm93S2V5LmluaXQodG9QYXNzYWJsZUNhcCh2b3cpLCBmbG93KTtcbiAgICAgIGZsb3cucmVzdGFydCgpO1xuICAgICAgcmV0dXJuIHJldHJ5YWJsZUtpdDtcbiAgICB9O1xuICAgIHJldHVybiBoYXJkZW4obWFrZVJldHJ5YWJsZUZsb3dLaXQpO1xuICB9O1xuICBjb25zdCByZXRyeWFibGUgPSAoem9uZSwgdGFnLCByZXRyeWFibGVGdW5jKSA9PiB7XG4gICAgY29uc3QgbWFrZVJldHJ5YWJsZUtpdCA9IHByZXBhcmVSZXRyeWFibGVGbG93S2l0KHpvbmUsIHRhZywgcmV0cnlhYmxlRnVuYyk7XG4gICAgY29uc3Qgd3JhcHBlckZ1bmNOYW1lID0gYCR7dGFnfV9yZXRyeWFibGVgO1xuICAgIGNvbnN0IHdyYXBwZXJGdW5jID0ge1xuICAgICAgLyoqIEBwYXJhbSB7YW55W119IGFyZ3MgKi9cbiAgICAgIFt3cmFwcGVyRnVuY05hbWVdKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICB6b25lLmlzU3RvcmFibGUoaGFyZGVuKGFyZ3MpKSB8fCB0aHJvd1JlZGFjdGVkYHJldHJ5YWJsZSBhcmd1bWVudHMgbXVzdCBiZSBzdG9yYWJsZSAke2FyZ3N9YDtcbiAgICAgICAgICBjb25zdCB7IGZsb3cgfSA9IG1ha2VSZXRyeWFibGVLaXQoYXJncyk7XG4gICAgICAgICAgcmV0dXJuIGZsb3cuZ2V0T3V0Y29tZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9W3dyYXBwZXJGdW5jTmFtZV07XG4gICAgZGVmaW5lUHJvcGVydGllczQod3JhcHBlckZ1bmMsIHtcbiAgICAgIGxlbmd0aDogeyB2YWx1ZTogcmV0cnlhYmxlRnVuYy5sZW5ndGggfVxuICAgIH0pO1xuICAgIHJldHVybiBoYXJkZW4od3JhcHBlckZ1bmMpO1xuICB9O1xuICBjb25zdCBhZG1pblJldHJ5YWJsZUZsb3cgPSBvdXRlclpvbmUuZXhvKFxuICAgIFwiQWRtaW5SZXRyeWFibGVGbG93XCIsXG4gICAgQWRtaW5SZXRyeWFibGVGbG93SSxcbiAgICB7XG4gICAgICAvKipcbiAqIEBwYXJhbSB7Vm93fSBvdXRjb21lVm93XG4gKi9cbiAgICAgIGdldEZsb3dGb3JPdXRjb21lVm93KG91dGNvbWVWb3cpIHtcbiAgICAgICAgcmV0dXJuIGZsb3dGb3JPdXRjb21lVm93S2V5LmdldCh0b1Bhc3NhYmxlQ2FwKG91dGNvbWVWb3cpKTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIHByZXBhcmVSZXRyeWFibGVGbG93S2l0LFxuICAgIGFkbWluUmV0cnlhYmxlRmxvdyxcbiAgICByZXRyeWFibGVcbiAgfSk7XG59O1xuaGFyZGVuKHByZXBhcmVSZXRyeWFibGVUb29scyk7XG5cbi8qIC4uL3Zvdy9zcmMvd2hlbi5qcyovXG52YXIgbWFrZVdoZW4gPSAoaXNSZXRyeWFibGVSZWFzb24yID0gKFxuICAvKiogQHR5cGUge0lzUmV0cnlhYmxlUmVhc29ufSAqL1xuICAoKCkgPT4gZmFsc2UpXG4pKSA9PiB7XG4gIGNvbnN0IHVud3JhcCA9IGFzeW5jIChzcGVjaW1lblApID0+IHtcbiAgICBhd2FpdCBudWxsO1xuICAgIGxldCByZXN1bHQgPSBhd2FpdCBzcGVjaW1lblA7XG4gICAgbGV0IHBheWxvYWQgPSBnZXRWb3dQYXlsb2FkKHJlc3VsdCk7XG4gICAgbGV0IHByaW9yUmV0cnlWYWx1ZTtcbiAgICBjb25zdCBzZWVuUGF5bG9hZHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKTtcbiAgICB3aGlsZSAocGF5bG9hZCkge1xuICAgICAgY29uc3QgeyB2b3dWMCB9ID0gcGF5bG9hZDtcbiAgICAgIGlmIChzZWVuUGF5bG9hZHMuaGFzKHZvd1YwKSkge1xuICAgICAgICB0aHJvdyBFcnJvcihcIlZvdyByZXNvbHV0aW9uIGN5Y2xlIGRldGVjdGVkXCIpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgRSh2b3dWMCkuc2hvcnRlbigpO1xuICAgICAgICBzZWVuUGF5bG9hZHMuYWRkKHZvd1YwKTtcbiAgICAgICAgcHJpb3JSZXRyeVZhbHVlID0gdm9pZCAwO1xuICAgICAgICByZXN1bHQgPSByZXM7XG4gICAgICB9IGNhdGNoIChlMikge1xuICAgICAgICBjb25zdCBuZXh0UmV0cnlWYWx1ZSA9IGlzUmV0cnlhYmxlUmVhc29uMihlMiwgcHJpb3JSZXRyeVZhbHVlKTtcbiAgICAgICAgaWYgKCFuZXh0UmV0cnlWYWx1ZSkge1xuICAgICAgICAgIHRocm93IGUyO1xuICAgICAgICB9XG4gICAgICAgIHByaW9yUmV0cnlWYWx1ZSA9IG5leHRSZXRyeVZhbHVlO1xuICAgICAgfVxuICAgICAgcGF5bG9hZCA9IGdldFZvd1BheWxvYWQocmVzdWx0KTtcbiAgICB9XG4gICAgY29uc3QgdW53cmFwcGVkID0gKFxuICAgICAgLyoqIEB0eXBlIHtFVW53cmFwPFQ+fSAqL1xuICAgICAgcmVzdWx0XG4gICAgKTtcbiAgICByZXR1cm4gdW53cmFwcGVkO1xuICB9O1xuICBjb25zdCB3aGVuID0gKHNwZWNpbWVuUCwgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpID0+IHtcbiAgICBjb25zdCB1bndyYXBwZWQgPSB1bndyYXAoc3BlY2ltZW5QKTtcbiAgICBpZiAob25GdWxmaWxsZWQgPT0gbnVsbCAmJiBvblJlamVjdGVkID09IG51bGwpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIC8qKiBAdHlwZSB7UHJvbWlzZTxUUmVzdWx0MT59ICovXG4gICAgICAgIHVud3JhcHBlZFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIEUucmVzb2x2ZSh1bndyYXBwZWQpLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuICB9O1xuICBoYXJkZW4od2hlbik7XG4gIHJldHVybiB3aGVuO1xufTtcbmhhcmRlbihtYWtlV2hlbik7XG5cbi8qIC4uL3Zvdy9zcmMvdG9vbHMuanMqL1xudmFyIHByZXBhcmVCYXNpY1Zvd1Rvb2xzID0gKHpvbmUsIHBvd2VycyA9IHt9KSA9PiB7XG4gIGNvbnN0IHsgaXNSZXRyeWFibGVSZWFzb246IGlzUmV0cnlhYmxlUmVhc29uMiA9IChcbiAgICAvKiogQHR5cGUge0lzUmV0cnlhYmxlUmVhc29ufSAqL1xuICAgICgoKSA9PiBmYWxzZSlcbiAgKSB9ID0gcG93ZXJzO1xuICBjb25zdCB2b3dSZWplY3Rpb25UcmFja2VyID0gcHJlcGFyZVZvd1JlamVjdGlvblRyYWNrZXIoem9uZSk7XG4gIGNvbnN0IG1ha2VWb3dLaXQgPSBwcmVwYXJlVm93S2l0KHpvbmUsIHZvd1JlamVjdGlvblRyYWNrZXIpO1xuICBjb25zdCB3aGVuID0gbWFrZVdoZW4oaXNSZXRyeWFibGVSZWFzb24yKTtcbiAgY29uc3Qgd2F0Y2ggPSBwcmVwYXJlV2F0Y2goem9uZSwgbWFrZVZvd0tpdCwgaXNSZXRyeWFibGVSZWFzb24yKTtcbiAgY29uc3QgbWFrZVdhdGNoVXRpbHMgPSBwcmVwYXJlV2F0Y2hVdGlscyh6b25lLCB7XG4gICAgd2F0Y2gsXG4gICAgd2hlbixcbiAgICBtYWtlVm93S2l0LFxuICAgIGlzUmV0cnlhYmxlUmVhc29uOiBpc1JldHJ5YWJsZVJlYXNvbjJcbiAgfSk7XG4gIGNvbnN0IHdhdGNoVXRpbHMgPSBtYWtlV2F0Y2hVdGlscygpO1xuICBjb25zdCBhc1ZvdyA9IG1ha2VBc1ZvdyhtYWtlVm93S2l0KTtcbiAgY29uc3QgeyByZXRyeWFibGUgfSA9IHByZXBhcmVSZXRyeWFibGVUb29scyh6b25lLCB7XG4gICAgbWFrZVZvd0tpdCxcbiAgICBpc1JldHJ5YWJsZVJlYXNvbjogaXNSZXRyeWFibGVSZWFzb24yXG4gIH0pO1xuICBjb25zdCBhbGwgPSAobWF5YmVWb3dzKSA9PiB3YXRjaFV0aWxzLmFsbChtYXliZVZvd3MpO1xuICBjb25zdCBhbGxWb3dzID0gYWxsO1xuICBjb25zdCBhbGxTZXR0bGVkID0gKG1heWJlVm93cykgPT4gd2F0Y2hVdGlscy5hbGxTZXR0bGVkKG1heWJlVm93cyk7XG4gIGNvbnN0IGFzUHJvbWlzZSA9IChzcGVjaW1lblAsIC4uLndhdGNoZXJBcmdzKSA9PiB3YXRjaFV0aWxzLmFzUHJvbWlzZShzcGVjaW1lblAsIC4uLndhdGNoZXJBcmdzKTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgd2hlbixcbiAgICB3YXRjaCxcbiAgICBtYWtlVm93S2l0LFxuICAgIGFsbCxcbiAgICBhbGxWb3dzLFxuICAgIGFsbFNldHRsZWQsXG4gICAgYXNWb3csXG4gICAgYXNQcm9taXNlLFxuICAgIHJldHJ5YWJsZSxcbiAgICByZXRyaWFibGU6IHJldHJ5YWJsZVxuICAgIC8qIEZvciB0ZW1wb3JhcnkgYmFja3dhcmRzIGNvbXBhdCB3aXRoIGFscGhhIGltcGxlbWVudGF0aW9uKi9cbiAgfSk7XG59O1xuaGFyZGVuKHByZXBhcmVCYXNpY1Zvd1Rvb2xzKTtcblxuLyogLi4vdm93L3NyYy90cmFjay10dXJucy5qcyovXG52YXIgaGlkZGVuUHJpb3JFcnJvcjI7XG52YXIgaGlkZGVuQ3VycmVudFR1cm4yID0gMDtcbnZhciBoaWRkZW5DdXJyZW50RXZlbnQyID0gMDtcbnZhciBWRVJCT1NFMiA9IGVudmlyb25tZW50T3B0aW9uc0xpc3RIYXMoXCJERUJVR1wiLCBcInRyYWNrLXR1cm5zXCIpO1xudmFyIEVOQUJMRUQyID0gZ2V0RW52aXJvbm1lbnRPcHRpb24oXCJUUkFDS19UVVJOU1wiLCBcImRpc2FibGVkXCIsIFtcImVuYWJsZWRcIl0pID09PSBcImVuYWJsZWRcIjtcbnZhciBhZGRSZWplY3Rpb25Ob3RlMiA9IChkZXRhaWxzTm90ZSkgPT4gKHJlYXNvbikgPT4ge1xuICBpZiAocmVhc29uIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBub3RlKHJlYXNvbiwgZGV0YWlsc05vdGUpO1xuICB9XG4gIGlmIChWRVJCT1NFMikge1xuICAgIGNvbnNvbGUubG9nKFwiUkVKRUNURUQgYXQgdG9wIG9mIGV2ZW50IGxvb3BcIiwgcmVhc29uKTtcbiAgfVxufTtcbnZhciB3cmFwRnVuY3Rpb24yID0gKGZ1bmMsIHNlbmRpbmdFcnJvcikgPT4gKC4uLmFyZ3MpID0+IHtcbiAgaGlkZGVuUHJpb3JFcnJvcjIgPSBzZW5kaW5nRXJyb3I7XG4gIGhpZGRlbkN1cnJlbnRUdXJuMiArPSAxO1xuICBoaWRkZW5DdXJyZW50RXZlbnQyID0gMDtcbiAgdHJ5IHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBmdW5jKC4uLmFyZ3MpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIG5vdGUoXG4gICAgICAgICAgZXJyLFxuICAgICAgICAgIHJlZGFjdGVkYFRocm93biBmcm9tOiAke2hpZGRlblByaW9yRXJyb3IyfToke2hpZGRlbkN1cnJlbnRUdXJuMn0uJHtoaWRkZW5DdXJyZW50RXZlbnQyfWBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChWRVJCT1NFMikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlRIUk9XTiB0byB0b3Agb2YgZXZlbnQgbG9vcFwiLCBlcnIpO1xuICAgICAgfVxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICBjb25zdCBkZXRhaWxzTm90ZSA9IHJlZGFjdGVkYFJlamVjdGlvbiBmcm9tOiAke2hpZGRlblByaW9yRXJyb3IyfToke2hpZGRlbkN1cnJlbnRUdXJuMn0uJHtoaWRkZW5DdXJyZW50RXZlbnQyfWA7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCkuY2F0Y2goYWRkUmVqZWN0aW9uTm90ZTIoZGV0YWlsc05vdGUpKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IGZpbmFsbHkge1xuICAgIGhpZGRlblByaW9yRXJyb3IyID0gdm9pZCAwO1xuICB9XG59O1xudmFyIHRyYWNrVHVybnMyID0gKGZ1bmNzKSA9PiB7XG4gIGlmICghRU5BQkxFRDIgfHwgdHlwZW9mIGdsb2JhbFRoaXMgPT09IFwidW5kZWZpbmVkXCIgfHwgIWdsb2JhbFRoaXMuYXNzZXJ0KSB7XG4gICAgcmV0dXJuIGZ1bmNzO1xuICB9XG4gIGhpZGRlbkN1cnJlbnRFdmVudDIgKz0gMTtcbiAgY29uc3Qgc2VuZGluZ0Vycm9yID0gRXJyb3IoXG4gICAgYEV2ZW50OiAke2hpZGRlbkN1cnJlbnRUdXJuMn0uJHtoaWRkZW5DdXJyZW50RXZlbnQyfWBcbiAgKTtcbiAgaWYgKGhpZGRlblByaW9yRXJyb3IyICE9PSB2b2lkIDApIHtcbiAgICBub3RlKHNlbmRpbmdFcnJvciwgcmVkYWN0ZWRgQ2F1c2VkIGJ5OiAke2hpZGRlblByaW9yRXJyb3IyfWApO1xuICB9XG4gIHJldHVybiAoXG4gICAgLyoqIEB0eXBlIHtUfSAqL1xuICAgIGZ1bmNzLm1hcCgoZnVuYykgPT4gZnVuYyAmJiB3cmFwRnVuY3Rpb24yKGZ1bmMsIHNlbmRpbmdFcnJvcikpXG4gICk7XG59O1xuXG4vKiAuLi92b3cvc3JjL21lc3NhZ2UtYnJlYWtwb2ludHMuanMqL1xudmFyIHsgaGFzT3duOiBoYXNPd24xMSwgZnJlZXplOiBmcmVlemUxMCwgZW50cmllczogZW50cmllczggfSA9IE9iamVjdDtcbnZhciBpc0pTT05SZWNvcmQyID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJvYmplY3RcIiAmJiB2YWwgIT09IG51bGwgJiYgIUFycmF5LmlzQXJyYXkodmFsKTtcbnZhciBzaW1wbGlmeVRhZzIgPSAodGFnKSA9PiB7XG4gIGZvciAoY29uc3QgcHJlZml4IG9mIFtcIkFsbGVnZWQ6IFwiLCBcIkRlYnVnTmFtZTogXCJdKSB7XG4gICAgaWYgKHRhZy5zdGFydHNXaXRoKHByZWZpeCkpIHtcbiAgICAgIHJldHVybiB0YWcuc2xpY2UocHJlZml4Lmxlbmd0aCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0YWc7XG59O1xudmFyIG1ha2VNZXNzYWdlQnJlYWtwb2ludFRlc3RlcjIgPSAob3B0aW9uTmFtZSkgPT4ge1xuICBsZXQgYnJlYWtwb2ludHMgPSBKU09OLnBhcnNlKGdldEVudmlyb25tZW50T3B0aW9uKG9wdGlvbk5hbWUsIFwibnVsbFwiKSk7XG4gIGlmIChicmVha3BvaW50cyA9PT0gbnVsbCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgbGV0IGJyZWFrcG9pbnRzVGFibGU7XG4gIGNvbnN0IGdldEJyZWFrcG9pbnRzID0gKCkgPT4gYnJlYWtwb2ludHM7XG4gIGZyZWV6ZTEwKGdldEJyZWFrcG9pbnRzKTtcbiAgY29uc3Qgc2V0QnJlYWtwb2ludHMgPSAobmV3QnJlYWtwb2ludHMgPSBicmVha3BvaW50cykgPT4ge1xuICAgIGlzSlNPTlJlY29yZDIobmV3QnJlYWtwb2ludHMpIHx8IHRocm93UmVkYWN0ZWRgRXhwZWN0ZWQgJHtxdW90ZShvcHRpb25OYW1lKX0gb3B0aW9uIHRvIGJlIGEgSlNPTiBicmVha3BvaW50cyByZWNvcmRgO1xuICAgIGNvbnN0IG5ld0JyZWFrcG9pbnRzVGFibGUgPSB7IF9fcHJvdG9fXzogbnVsbCB9O1xuICAgIGZvciAoY29uc3QgW3RhZywgbWV0aG9kQlBzXSBvZiBlbnRyaWVzOChuZXdCcmVha3BvaW50cykpIHtcbiAgICAgIHRhZyA9PT0gc2ltcGxpZnlUYWcyKHRhZykgfHwgdGhyb3dSZWRhY3RlZGBKdXN0IHVzZSBzaW1wbGUgdGFnICR7cXVvdGUoc2ltcGxpZnlUYWcyKHRhZykpfSByYXRoZXIgdGhhbiAke3F1b3RlKHRhZyl9YDtcbiAgICAgIGlzSlNPTlJlY29yZDIobWV0aG9kQlBzKSB8fCB0aHJvd1JlZGFjdGVkYEV4cGVjdGVkICR7cXVvdGUob3B0aW9uTmFtZSl9IG9wdGlvbidzICR7cXVvdGUoXG4gICAgICAgIHRhZ1xuICAgICAgKX0gdG8gYmUgYSBKU09OIG1ldGhvZHMgYnJlYWtwb2ludHMgcmVjb3JkYDtcbiAgICAgIGZvciAoY29uc3QgW21ldGhvZE5hbWUsIGNvdW50XSBvZiBlbnRyaWVzOChtZXRob2RCUHMpKSB7XG4gICAgICAgIGNvdW50ID09PSBcIipcIiB8fCB0eXBlb2YgY291bnQgPT09IFwibnVtYmVyXCIgJiYgTnVtYmVyLmlzU2FmZUludGVnZXIoY291bnQpICYmIGNvdW50ID49IDAgfHwgdGhyb3dSZWRhY3RlZGBFeHBlY3RlZCAke3F1b3RlKG9wdGlvbk5hbWUpfSBvcHRpb24ncyAke3F1b3RlKHRhZyl9LiR7cXVvdGUoXG4gICAgICAgICAgbWV0aG9kTmFtZVxuICAgICAgICApfSB0byBiZSBcIipcIiBvciBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyYDtcbiAgICAgICAgY29uc3QgY2xhc3NCUHMgPSBoYXNPd24xMShuZXdCcmVha3BvaW50c1RhYmxlLCBtZXRob2ROYW1lKSA/IG5ld0JyZWFrcG9pbnRzVGFibGVbbWV0aG9kTmFtZV0gOiBuZXdCcmVha3BvaW50c1RhYmxlW21ldGhvZE5hbWVdID0ge1xuICAgICAgICAgIC8qIEB0cy1leHBlY3QtZXJyb3IgY29uZnVzZWQgYnkgX19wcm90b19fKi9cbiAgICAgICAgICBfX3Byb3RvX186IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgY2xhc3NCUHNbdGFnXSA9IGNvdW50O1xuICAgICAgfVxuICAgIH1cbiAgICBicmVha3BvaW50cyA9IG5ld0JyZWFrcG9pbnRzO1xuICAgIGJyZWFrcG9pbnRzVGFibGUgPSBuZXdCcmVha3BvaW50c1RhYmxlO1xuICB9O1xuICBmcmVlemUxMChzZXRCcmVha3BvaW50cyk7XG4gIGNvbnN0IHNob3VsZEJyZWFrcG9pbnQgPSAocmVjaXBpZW50LCBtZXRob2ROYW1lKSA9PiB7XG4gICAgaWYgKG1ldGhvZE5hbWUgPT09IHZvaWQgMCB8fCBtZXRob2ROYW1lID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGNsYXNzQlBzID0gYnJlYWtwb2ludHNUYWJsZVttZXRob2ROYW1lXSB8fCBicmVha3BvaW50c1RhYmxlW1wiKlwiXTtcbiAgICBpZiAoY2xhc3NCUHMgPT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsZXQgdGFnID0gc2ltcGxpZnlUYWcyKHJlY2lwaWVudFtTeW1ib2wudG9TdHJpbmdUYWddKTtcbiAgICBsZXQgY291bnQgPSBjbGFzc0JQc1t0YWddO1xuICAgIGlmIChjb3VudCA9PT0gdm9pZCAwKSB7XG4gICAgICB0YWcgPSBcIipcIjtcbiAgICAgIGNvdW50ID0gY2xhc3NCUHNbdGFnXTtcbiAgICAgIGlmIChjb3VudCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvdW50ID09PSBcIipcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGFzc2VydCh0eXBlb2YgY291bnQgPT09IFwibnVtYmVyXCIgJiYgY291bnQgPj0gMSk7XG4gICAgY2xhc3NCUHNbdGFnXSA9IGNvdW50IC0gMTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG4gIGZyZWV6ZTEwKHNob3VsZEJyZWFrcG9pbnQpO1xuICBjb25zdCBicmVha3BvaW50VGVzdGVyID0gZnJlZXplMTAoe1xuICAgIGdldEJyZWFrcG9pbnRzLFxuICAgIHNldEJyZWFrcG9pbnRzLFxuICAgIHNob3VsZEJyZWFrcG9pbnRcbiAgfSk7XG4gIGJyZWFrcG9pbnRUZXN0ZXIuc2V0QnJlYWtwb2ludHMoKTtcbiAgcmV0dXJuIGJyZWFrcG9pbnRUZXN0ZXI7XG59O1xuZnJlZXplMTAobWFrZU1lc3NhZ2VCcmVha3BvaW50VGVzdGVyMik7XG5cbi8qIC4uL3Zvdy9zcmMvRS5qcyovXG52YXIgeyBhc3NpZ246IGFzc2lnbjIsIGNyZWF0ZTogY3JlYXRlNiB9ID0gT2JqZWN0O1xudmFyIG9uU2VuZDIgPSBtYWtlTWVzc2FnZUJyZWFrcG9pbnRUZXN0ZXIyKFwiRU5ET19TRU5EX0JSRUFLUE9JTlRTXCIpO1xudmFyIGJhc2VGcmVlemFibGVQcm94eUhhbmRsZXIyID0ge1xuICBzZXQoX3RhcmdldCwgX3Byb3AsIF92YWx1ZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgaXNFeHRlbnNpYmxlKF90YXJnZXQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIHNldFByb3RvdHlwZU9mKF90YXJnZXQsIF92YWx1ZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgZGVsZXRlUHJvcGVydHkoX3RhcmdldCwgX3Byb3ApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG52YXIgbWFrZUVQcm94eUhhbmRsZXIyID0gKHJlY2lwaWVudCwgSGFuZGxlZFByb21pc2UyLCB1bndyYXApID0+IGhhcmRlbih7XG4gIC4uLmJhc2VGcmVlemFibGVQcm94eUhhbmRsZXIyLFxuICBnZXQ6IChfdGFyZ2V0LCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpID0+IHtcbiAgICByZXR1cm4gaGFyZGVuKFxuICAgICAge1xuICAgICAgICAvKipcbiAqIFRoaXMgZnVuY3Rpb24gcHVycG9zZWx5IGNoZWNrcyB0aGUgYHRoaXNgIHZhbHVlIChzZWUgYWJvdmUpXG4gKiBJbiBvcmRlciB0byBiZSBgdGhpc2Agc2Vuc2l0aXZlIGl0IGlzIGRlZmluZWQgdXNpbmcgY29uY2lzZSBtZXRob2RcbiAqIHN5bnRheCByYXRoZXIgdGhhbiBhcyBhbiBhcnJvdyBmdW5jdGlvbi4gVG8gZW5zdXJlIHRoZSBmdW5jdGlvblxuICogaXMgbm90IGNvbnN0cnVjdGFibGUsIGl0IGFsc28gYXZvaWRzIHRoZSBgZnVuY3Rpb25gIHN5bnRheC5cbiAqIEBwYXJhbSAgey4uLmFueVtdfSBhcmdzXG4gKi9cbiAgICAgICAgW3Byb3BlcnR5S2V5XSguLi5hcmdzKSB7XG4gICAgICAgICAgaWYgKHRoaXMgIT09IHJlY2VpdmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gSGFuZGxlZFByb21pc2UyLnJlamVjdChcbiAgICAgICAgICAgICAgbWFrZUVycm9yKFxuICAgICAgICAgICAgICAgIHJlZGFjdGVkYFVuZXhwZWN0ZWQgcmVjZWl2ZXIgZm9yIFwiJHtxdW90ZShwcm9wZXJ0eUtleSl9XCIgbWV0aG9kIG9mIEUoJHtxdW90ZShcbiAgICAgICAgICAgICAgICAgIHJlY2lwaWVudFxuICAgICAgICAgICAgICAgICl9KWBcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9uU2VuZDIgJiYgb25TZW5kMi5zaG91bGRCcmVha3BvaW50KHJlY2lwaWVudCwgcHJvcGVydHlLZXkpKSB7XG4gICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHVud3JhcChcbiAgICAgICAgICAgIEhhbmRsZWRQcm9taXNlMi5hcHBseU1ldGhvZCh1bndyYXAocmVjaXBpZW50KSwgcHJvcGVydHlLZXksIGFyZ3MpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBAdHMtZXhwZWN0LWVycm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvNTAzMTkqL1xuICAgICAgfVtwcm9wZXJ0eUtleV1cbiAgICApO1xuICB9LFxuICBhcHBseTogKF90YXJnZXQsIF90aGlzQXJnLCBhcmdBcnJheSA9IFtdKSA9PiB7XG4gICAgaWYgKG9uU2VuZDIgJiYgb25TZW5kMi5zaG91bGRCcmVha3BvaW50KHJlY2lwaWVudCwgdm9pZCAwKSkge1xuICAgICAgZGVidWdnZXI7XG4gICAgfVxuICAgIHJldHVybiB1bndyYXAoSGFuZGxlZFByb21pc2UyLmFwcGx5RnVuY3Rpb24odW53cmFwKHJlY2lwaWVudCksIGFyZ0FycmF5KSk7XG4gIH0sXG4gIGhhczogKF90YXJnZXQsIF9wKSA9PiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn0pO1xudmFyIG1ha2VFU2VuZE9ubHlQcm94eUhhbmRsZXIyID0gKHJlY2lwaWVudCwgSGFuZGxlZFByb21pc2UyLCB1bndyYXApID0+IGhhcmRlbih7XG4gIC4uLmJhc2VGcmVlemFibGVQcm94eUhhbmRsZXIyLFxuICBnZXQ6IChfdGFyZ2V0LCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpID0+IHtcbiAgICByZXR1cm4gaGFyZGVuKFxuICAgICAge1xuICAgICAgICAvKipcbiAqIFRoaXMgZnVuY3Rpb24gcHVycG9zZWx5IGNoZWNrcyB0aGUgYHRoaXNgIHZhbHVlIChzZWUgYWJvdmUpXG4gKiBJbiBvcmRlciB0byBiZSBgdGhpc2Agc2Vuc2l0aXZlIGl0IGlzIGRlZmluZWQgdXNpbmcgY29uY2lzZSBtZXRob2RcbiAqIHN5bnRheCByYXRoZXIgdGhhbiBhcyBhbiBhcnJvdyBmdW5jdGlvbi4gVG8gZW5zdXJlIHRoZSBmdW5jdGlvblxuICogaXMgbm90IGNvbnN0cnVjdGFibGUsIGl0IGFsc28gYXZvaWRzIHRoZSBgZnVuY3Rpb25gIHN5bnRheC5cbiAqIEBwYXJhbSAgey4uLmFueVtdfSBhcmdzXG4gKi9cbiAgICAgICAgW3Byb3BlcnR5S2V5XSguLi5hcmdzKSB7XG4gICAgICAgICAgdGhpcyA9PT0gcmVjZWl2ZXIgfHwgdGhyb3dSZWRhY3RlZGBVbmV4cGVjdGVkIHJlY2VpdmVyIGZvciBcIiR7cXVvdGUoXG4gICAgICAgICAgICBwcm9wZXJ0eUtleVxuICAgICAgICAgICl9XCIgbWV0aG9kIG9mIEUuc2VuZE9ubHkoJHtxdW90ZShyZWNpcGllbnQpfSlgO1xuICAgICAgICAgIGlmIChvblNlbmQyICYmIG9uU2VuZDIuc2hvdWxkQnJlYWtwb2ludChyZWNpcGllbnQsIHByb3BlcnR5S2V5KSkge1xuICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIEhhbmRsZWRQcm9taXNlMi5hcHBseU1ldGhvZFNlbmRPbmx5KFxuICAgICAgICAgICAgdW53cmFwKHJlY2lwaWVudCksXG4gICAgICAgICAgICBwcm9wZXJ0eUtleSxcbiAgICAgICAgICAgIGFyZ3NcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgLyogQHRzLWV4cGVjdC1lcnJvciBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzUwMzE5Ki9cbiAgICAgIH1bcHJvcGVydHlLZXldXG4gICAgKTtcbiAgfSxcbiAgYXBwbHk6IChfdGFyZ2V0LCBfdGhpc0FyZywgYXJnc0FycmF5ID0gW10pID0+IHtcbiAgICBpZiAob25TZW5kMiAmJiBvblNlbmQyLnNob3VsZEJyZWFrcG9pbnQocmVjaXBpZW50LCB2b2lkIDApKSB7XG4gICAgICBkZWJ1Z2dlcjtcbiAgICB9XG4gICAgSGFuZGxlZFByb21pc2UyLmFwcGx5RnVuY3Rpb25TZW5kT25seSh1bndyYXAocmVjaXBpZW50KSwgYXJnc0FycmF5KTtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9LFxuICBoYXM6IChfdGFyZ2V0LCBfcCkgPT4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59KTtcbnZhciBtYWtlRUdldFByb3h5SGFuZGxlcjIgPSAoeCwgSGFuZGxlZFByb21pc2UyLCB1bndyYXApID0+IGhhcmRlbih7XG4gIC4uLmJhc2VGcmVlemFibGVQcm94eUhhbmRsZXIyLFxuICBoYXM6IChfdGFyZ2V0LCBfcHJvcCkgPT4gdHJ1ZSxcbiAgZ2V0OiAoX3RhcmdldCwgcHJvcCkgPT4gSGFuZGxlZFByb21pc2UyLmdldCh1bndyYXAoeCksIHByb3ApXG59KTtcbnZhciByZXNvbHZlID0gKHgpID0+IEhhbmRsZWRQcm9taXNlLnJlc29sdmUoeCk7XG52YXIgbWFrZUUyID0gKEhhbmRsZWRQcm9taXNlMiwgcG93ZXJzID0ge30pID0+IHtcbiAgY29uc3Qge1xuICAgIGFkZGl0aW9uYWwgPSAoXG4gICAgICAvKiogQHR5cGUge0F9ICovXG4gICAgICB7fVxuICAgICksXG4gICAgdW53cmFwID0gKFxuICAgICAgLyoqIEB0eXBlIHtOb25OdWxsYWJsZTx0eXBlb2YgcG93ZXJzLnVud3JhcD59ICovXG4gICAgICByZXNvbHZlXG4gICAgKVxuICB9ID0gcG93ZXJzO1xuICByZXR1cm4gaGFyZGVuKFxuICAgIGFzc2lnbjIoXG4gICAgICAvKipcbiAqIEUoeCkgcmV0dXJucyBhIHByb3h5IG9uIHdoaWNoIHlvdSBjYW4gY2FsbCBhcmJpdHJhcnkgbWV0aG9kcy4gRWFjaCBvZiB0aGVzZVxuICogbWV0aG9kIGNhbGxzIHJldHVybnMgYSBwcm9taXNlLiBUaGUgbWV0aG9kIHdpbGwgYmUgaW52b2tlZCBvbiB3aGF0ZXZlclxuICogJ3gnIGRlc2lnbmF0ZXMgKG9yIHJlc29sdmVzIHRvKSBpbiBhIGZ1dHVyZSB0dXJuLCBub3QgdGhpcyBvbmUuXG4gKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7VH0geCB0YXJnZXQgZm9yIG1ldGhvZC9mdW5jdGlvbiBjYWxsXG4gKiBAcmV0dXJucyB7RUNhbGxhYmxlT3JNZXRob2RzPFJlbW90ZUZ1bmN0aW9uczxUPj59IG1ldGhvZC9mdW5jdGlvbiBjYWxsIHByb3h5XG4gKi9cbiAgICAgICh4KSA9PiBoYXJkZW4oXG4gICAgICAgIG5ldyBQcm94eSgoKSA9PiB7XG4gICAgICAgIH0sIG1ha2VFUHJveHlIYW5kbGVyMih4LCBIYW5kbGVkUHJvbWlzZTIsIHVud3JhcCkpXG4gICAgICApLFxuICAgICAge1xuICAgICAgICAvKipcbiAqIEUuZ2V0KHgpIHJldHVybnMgYSBwcm94eSBvbiB3aGljaCB5b3UgY2FuIGdldCBhcmJpdHJhcnkgcHJvcGVydGllcy5cbiAqIEVhY2ggb2YgdGhlc2UgcHJvcGVydGllcyByZXR1cm5zIGEgcHJvbWlzZSBmb3IgdGhlIHByb3BlcnR5LiAgVGhlIHByb21pc2VcbiAqIHZhbHVlIHdpbGwgYmUgdGhlIHByb3BlcnR5IGZldGNoZWQgZnJvbSB3aGF0ZXZlciAneCcgZGVzaWduYXRlcyAob3JcbiAqIHJlc29sdmVzIHRvKSBpbiBhIGZ1dHVyZSB0dXJuLCBub3QgdGhpcyBvbmUuXG4gKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7VH0geCB0YXJnZXQgZm9yIHByb3BlcnR5IGdldFxuICogQHJldHVybnMge0VHZXR0ZXJzPExvY2FsUmVjb3JkPFQ+Pn0gcHJvcGVydHkgZ2V0IHByb3h5XG4gKiBAcmVhZG9ubHlcbiAqL1xuICAgICAgICBnZXQ6ICh4KSA9PiBoYXJkZW4oXG4gICAgICAgICAgbmV3IFByb3h5KFxuICAgICAgICAgICAgY3JlYXRlNihudWxsKSxcbiAgICAgICAgICAgIG1ha2VFR2V0UHJveHlIYW5kbGVyMih4LCBIYW5kbGVkUHJvbWlzZTIsIHVud3JhcClcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIC8qKlxuICogRS5yZXNvbHZlKHgpIGNvbnZlcnRzIHggdG8gYSBoYW5kbGVkIHByb21pc2UuIEl0IGlzXG4gKiBzaG9ydGhhbmQgZm9yIEhhbmRsZWRQcm9taXNlLnJlc29sdmUoeClcbiAqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtUfSB4IHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBoYW5kbGVkIHByb21pc2VcbiAqIEByZXR1cm5zIHtQcm9taXNlPEF3YWl0ZWQ8VD4+fSBoYW5kbGVkIHByb21pc2UgZm9yIHhcbiAqIEByZWFkb25seVxuICovXG4gICAgICAgIHJlc29sdmU6ICh4KSA9PiByZXNvbHZlKHVud3JhcCh4KSksXG4gICAgICAgIC8qKlxuICogRS5zZW5kT25seSByZXR1cm5zIGEgcHJveHkgc2ltaWxhciB0byBFLCBidXQgZm9yIHdoaWNoIHRoZSByZXN1bHRzXG4gKiBhcmUgaWdub3JlZCAodW5kZWZpbmVkIGlzIHJldHVybmVkKS5cbiAqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtUfSB4IHRhcmdldCBmb3IgbWV0aG9kL2Z1bmN0aW9uIGNhbGxcbiAqIEByZXR1cm5zIHtFU2VuZE9ubHlDYWxsYWJsZU9yTWV0aG9kczxSZW1vdGVGdW5jdGlvbnM8VD4+fSBtZXRob2QvZnVuY3Rpb24gY2FsbCBwcm94eVxuICogQHJlYWRvbmx5XG4gKi9cbiAgICAgICAgc2VuZE9ubHk6ICh4KSA9PiBoYXJkZW4oXG4gICAgICAgICAgbmV3IFByb3h5KFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1ha2VFU2VuZE9ubHlQcm94eUhhbmRsZXIyKHgsIEhhbmRsZWRQcm9taXNlMiwgdW53cmFwKVxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgLyoqXG4gKiBFLndoZW4oeCwgcmVzLCByZWopIGlzIGVxdWl2YWxlbnQgdG9cbiAqIHVud3JhcCh4KS50aGVuKG9uZnVsZmlsbGVkLCBvbnJlamVjdGVkKVxuICpcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAdGVtcGxhdGUgW1RSZXN1bHQxPUVVbndyYXA8VD5dXG4gKiBAdGVtcGxhdGUgW1RSZXN1bHQyPW5ldmVyXVxuICogQHBhcmFtIHtFUmVmPFQ+fSB4IHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBoYW5kbGVkIHByb21pc2VcbiAqIEBwYXJhbSB7KHZhbHVlOiBFVW53cmFwPFQ+KSA9PiBFUmVmPFRSZXN1bHQxPn0gW29uZnVsZmlsbGVkXVxuICogQHBhcmFtIHsocmVhc29uOiBhbnkpID0+IEVSZWY8VFJlc3VsdDI+fSBbb25yZWplY3RlZF1cbiAqIEByZXR1cm5zIHtQcm9taXNlPFRSZXN1bHQxIHwgVFJlc3VsdDI+fVxuICogQHJlYWRvbmx5XG4gKi9cbiAgICAgICAgd2hlbjogKHgsIG9uZnVsZmlsbGVkLCBvbnJlamVjdGVkKSA9PiB7XG4gICAgICAgICAgY29uc3QgdW53cmFwcGVkID0gcmVzb2x2ZSh1bndyYXAoeCkpO1xuICAgICAgICAgIGlmIChvbmZ1bGZpbGxlZCA9PSBudWxsICYmIG9ucmVqZWN0ZWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHVud3JhcHBlZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHVud3JhcHBlZC50aGVuKFxuICAgICAgICAgICAgLi4udHJhY2tUdXJuczIoXG4gICAgICAgICAgICAgIC8qKiBAdHlwZSB7Y29uc3R9ICovXG4gICAgICAgICAgICAgIFtvbmZ1bGZpbGxlZCwgb25yZWplY3RlZF1cbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYWRkaXRpb25hbFxuICAgIClcbiAgKTtcbn07XG52YXIgRV9kZWZhdWx0MiA9IG1ha2VFMjtcblxuLyogLi4vdm93L3ZhdC5qcyovXG52YXIgaXNSZXRyeWFibGVSZWFzb24gPSAocmVhc29uLCBwcmlvclJldHJ5VmFsdWUpID0+IHtcbiAgaWYgKGlzVXBncmFkZURpc2Nvbm5lY3Rpb24ocmVhc29uKSAmJiAoIWlzVXBncmFkZURpc2Nvbm5lY3Rpb24ocHJpb3JSZXRyeVZhbHVlKSB8fCByZWFzb24uaW5jYXJuYXRpb25OdW1iZXIgPiBwcmlvclJldHJ5VmFsdWUuaW5jYXJuYXRpb25OdW1iZXIpKSB7XG4gICAgcmV0dXJuIHJlYXNvbjtcbiAgfVxuICBpZiAoaXNBYmFuZG9uZWRFcnJvcihyZWFzb24pICYmICFpc0FiYW5kb25lZEVycm9yKHByaW9yUmV0cnlWYWx1ZSkpIHtcbiAgICByZXR1cm4gcmVhc29uO1xuICB9XG4gIHJldHVybiB2b2lkIDA7XG59O1xudmFyIGRlZmF1bHRQb3dlcnMgPSBoYXJkZW4oe1xuICBpc1JldHJ5YWJsZVJlYXNvblxufSk7XG52YXIgcHJlcGFyZVN3aW5nc2V0Vm93VG9vbHMgPSAoem9uZSwgcG93ZXJzID0ge30pID0+IHByZXBhcmVCYXNpY1Zvd1Rvb2xzKHpvbmUsIHsgLi4uZGVmYXVsdFBvd2VycywgLi4ucG93ZXJzIH0pO1xuaGFyZGVuKHByZXBhcmVTd2luZ3NldFZvd1Rvb2xzKTtcbnZhciBoZWFwVm93VG9vbHMgPSBwcmVwYXJlU3dpbmdzZXRWb3dUb29scyhtYWtlSGVhcFpvbmUoKSk7XG52YXIgaGVhcFZvd0UgPSBFX2RlZmF1bHQyKGdsb2JhbFRoaXMuSGFuZGxlZFByb21pc2UsIHtcbiAgdW53cmFwOiBoZWFwVm93VG9vbHMud2hlbixcbiAgYWRkaXRpb25hbDogeyB3aGVuOiBoZWFwVm93VG9vbHMud2hlbiB9XG59KTtcblxuLyogLi4vRVJUUC9zcmMvdHlwZUd1YXJkcy5qcyovXG52YXIgQnJhbmRTaGFwZSA9IE0ucmVtb3RhYmxlKFwiQnJhbmRcIik7XG52YXIgSXNzdWVyU2hhcGUgPSBNLnJlbW90YWJsZShcIklzc3VlclwiKTtcbnZhciBQYXltZW50U2hhcGUgPSBNLnJlbW90YWJsZShcIlBheW1lbnRcIik7XG52YXIgUHVyc2VTaGFwZSA9IE0ucmVtb3RhYmxlKFwiUHVyc2VcIik7XG52YXIgRGVwb3NpdEZhY2V0U2hhcGUgPSBNLnJlbW90YWJsZShcIkRlcG9zaXRGYWNldFwiKTtcbnZhciBOb3RpZmllclNoYXBlID0gTS5yZW1vdGFibGUoXCJOb3RpZmllclwiKTtcbnZhciBNaW50U2hhcGUgPSBNLnJlbW90YWJsZShcIk1pbnRcIik7XG52YXIgTmF0VmFsdWVTaGFwZSA9IE0ubmF0KCk7XG52YXIgQ29weVNldFZhbHVlU2hhcGUgPSBNLnNldCgpO1xudmFyIFNldFZhbHVlU2hhcGUgPSBNLmFycmF5T2YoTS5rZXkoKSk7XG52YXIgQ29weUJhZ1ZhbHVlU2hhcGUgPSBNLmJhZygpO1xudmFyIEFtb3VudFZhbHVlU2hhcGUgPSBNLm9yKFxuICBOYXRWYWx1ZVNoYXBlLFxuICBDb3B5U2V0VmFsdWVTaGFwZSxcbiAgU2V0VmFsdWVTaGFwZSxcbiAgQ29weUJhZ1ZhbHVlU2hhcGVcbik7XG52YXIgQW1vdW50U2hhcGUgPSB7IGJyYW5kOiBCcmFuZFNoYXBlLCB2YWx1ZTogQW1vdW50VmFsdWVTaGFwZSB9O1xuaGFyZGVuKEFtb3VudFNoYXBlKTtcbnZhciBBbW91bnRQYXR0ZXJuU2hhcGUgPSBNLnBhdHRlcm4oKTtcbnZhciBSYXRpb1NoYXBlID0geyBudW1lcmF0b3I6IEFtb3VudFNoYXBlLCBkZW5vbWluYXRvcjogQW1vdW50U2hhcGUgfTtcbmhhcmRlbihSYXRpb1NoYXBlKTtcbnZhciBpc05hdFZhbHVlID0gKHZhbHVlKSA9PiBtYXRjaGVzKHZhbHVlLCBOYXRWYWx1ZVNoYXBlKTtcbmhhcmRlbihpc05hdFZhbHVlKTtcbnZhciBpc0NvcHlTZXRWYWx1ZSA9ICh2YWx1ZSkgPT4gbWF0Y2hlcyh2YWx1ZSwgQ29weVNldFZhbHVlU2hhcGUpO1xuaGFyZGVuKGlzQ29weVNldFZhbHVlKTtcbnZhciBpc1NldFZhbHVlID0gKHZhbHVlKSA9PiBtYXRjaGVzKHZhbHVlLCBTZXRWYWx1ZVNoYXBlKTtcbmhhcmRlbihpc1NldFZhbHVlKTtcbnZhciBpc0NvcHlCYWdWYWx1ZSA9ICh2YWx1ZSkgPT4gbWF0Y2hlcyh2YWx1ZSwgQ29weUJhZ1ZhbHVlU2hhcGUpO1xuaGFyZGVuKGlzQ29weUJhZ1ZhbHVlKTtcbnZhciBNQVhfQUJTT0xVVEVfREVDSU1BTF9QTEFDRVMgPSAxMDA7XG52YXIgQXNzZXRLaW5kU2hhcGUgPSBNLm9yKFwibmF0XCIsIFwic2V0XCIsIFwiY29weVNldFwiLCBcImNvcHlCYWdcIik7XG52YXIgRGlzcGxheUluZm9TaGFwZSA9IE0uc3BsaXRSZWNvcmQoXG4gIHt9LFxuICB7XG4gICAgZGVjaW1hbFBsYWNlczogTS5hbmQoXG4gICAgICBNLmd0ZSgtTUFYX0FCU09MVVRFX0RFQ0lNQUxfUExBQ0VTKSxcbiAgICAgIE0ubHRlKE1BWF9BQlNPTFVURV9ERUNJTUFMX1BMQUNFUylcbiAgICApLFxuICAgIGFzc2V0S2luZDogQXNzZXRLaW5kU2hhcGVcbiAgfSxcbiAge1xuICAgIC8qIEluY2x1ZGluZyB0aGlzIGVtcHR5IGByZXN0YCBlbnN1cmVzIHRoYXQgdGhlcmUgYXJlIG5vIG90aGVyKi9cbiAgICAvKiBwcm9wZXJ0aWVzIGJleW9uZCB0aG9zZSBpbiB0aGUgYGJhc2VgIHJlY29yZC4qL1xuICB9XG4pO1xudmFyIElzc3VlcktpdFNoYXBlID0ge1xuICBicmFuZDogQnJhbmRTaGFwZSxcbiAgbWludDogTWludFNoYXBlLFxuICBtaW50UmVjb3ZlcnlQdXJzZTogUHVyc2VTaGFwZSxcbiAgaXNzdWVyOiBJc3N1ZXJTaGFwZSxcbiAgZGlzcGxheUluZm86IERpc3BsYXlJbmZvU2hhcGVcbn07XG5oYXJkZW4oSXNzdWVyS2l0U2hhcGUpO1xudmFyIEJyYW5kSSA9IE0uaW50ZXJmYWNlKFwiQnJhbmRcIiwge1xuICBpc015SXNzdWVyOiBNLmNhbGxXaGVuKE0uYXdhaXQoSXNzdWVyU2hhcGUpKS5yZXR1cm5zKE0uYm9vbGVhbigpKSxcbiAgZ2V0QWxsZWdlZE5hbWU6IE0uY2FsbCgpLnJldHVybnMoTS5zdHJpbmcoKSksXG4gIGdldERpc3BsYXlJbmZvOiBNLmNhbGwoKS5yZXR1cm5zKERpc3BsYXlJbmZvU2hhcGUpLFxuICBnZXRBbW91bnRTaGFwZTogTS5jYWxsKCkucmV0dXJucyhNLnBhdHRlcm4oKSlcbn0pO1xudmFyIG1ha2VJc3N1ZXJJbnRlcmZhY2VzID0gKGJyYW5kU2hhcGUgPSBCcmFuZFNoYXBlLCBhc3NldEtpbmRTaGFwZSA9IEFzc2V0S2luZFNoYXBlLCBhbW91bnRTaGFwZSA9IEFtb3VudFNoYXBlKSA9PiB7XG4gIGNvbnN0IElzc3VlckkgPSBNLmludGVyZmFjZShcIklzc3VlclwiLCB7XG4gICAgZ2V0QnJhbmQ6IE0uY2FsbCgpLnJldHVybnMoYnJhbmRTaGFwZSksXG4gICAgZ2V0QWxsZWdlZE5hbWU6IE0uY2FsbCgpLnJldHVybnMoTS5zdHJpbmcoKSksXG4gICAgZ2V0QXNzZXRLaW5kOiBNLmNhbGwoKS5yZXR1cm5zKGFzc2V0S2luZFNoYXBlKSxcbiAgICBnZXREaXNwbGF5SW5mbzogTS5jYWxsKCkucmV0dXJucyhEaXNwbGF5SW5mb1NoYXBlKSxcbiAgICBtYWtlRW1wdHlQdXJzZTogTS5jYWxsKCkucmV0dXJucyhQdXJzZVNoYXBlKSxcbiAgICBpc0xpdmU6IE0uY2FsbFdoZW4oTS5hd2FpdChQYXltZW50U2hhcGUpKS5yZXR1cm5zKE0uYm9vbGVhbigpKSxcbiAgICBnZXRBbW91bnRPZjogTS5jYWxsV2hlbihNLmF3YWl0KFBheW1lbnRTaGFwZSkpLnJldHVybnMoYW1vdW50U2hhcGUpLFxuICAgIGJ1cm46IE0uY2FsbFdoZW4oTS5hd2FpdChQYXltZW50U2hhcGUpKS5vcHRpb25hbChBbW91bnRQYXR0ZXJuU2hhcGUpLnJldHVybnMoYW1vdW50U2hhcGUpXG4gIH0pO1xuICBjb25zdCBNaW50SSA9IE0uaW50ZXJmYWNlKFwiTWludFwiLCB7XG4gICAgZ2V0SXNzdWVyOiBNLmNhbGwoKS5yZXR1cm5zKElzc3VlclNoYXBlKSxcbiAgICBtaW50UGF5bWVudDogTS5jYWxsKGFtb3VudFNoYXBlKS5yZXR1cm5zKFBheW1lbnRTaGFwZSlcbiAgfSk7XG4gIGNvbnN0IFBheW1lbnRJID0gTS5pbnRlcmZhY2UoXCJQYXltZW50XCIsIHtcbiAgICBnZXRBbGxlZ2VkQnJhbmQ6IE0uY2FsbCgpLnJldHVybnMoYnJhbmRTaGFwZSlcbiAgfSk7XG4gIGNvbnN0IFB1cnNlSSA9IE0uaW50ZXJmYWNlKFwiUHVyc2VcIiwge1xuICAgIGdldEFsbGVnZWRCcmFuZDogTS5jYWxsKCkucmV0dXJucyhicmFuZFNoYXBlKSxcbiAgICBnZXRDdXJyZW50QW1vdW50OiBNLmNhbGwoKS5yZXR1cm5zKGFtb3VudFNoYXBlKSxcbiAgICBnZXRDdXJyZW50QW1vdW50Tm90aWZpZXI6IE0uY2FsbCgpLnJldHVybnMoTm90aWZpZXJTaGFwZSksXG4gICAgLyogUHVyc2VJIGRvZXMgKm5vdCogZGVsYXkgYGRlcG9zaXRgIHVudGlsIGBzcmNQYXltZW50YCBpcyBmdWxmdWxsZWQuKi9cbiAgICAvKiBSYXRoZXIsIHRoZSBzZW1hbnRpY3Mgb2YgYGRlcG9zaXRgIHJlcXVpcmUgaXQgdG8gcHJvdmlkZSBpdHMqL1xuICAgIC8qIGNhbGxlcnMgd2l0aCBhIHN0cm9uZyBndWFyYW50ZWUgdGhhdCBgZGVwb3NpdGAgbWVzc2FnZXMgYXJlKi9cbiAgICAvKiBwcm9jZXNzZWQgd2l0aG91dCBmdXJ0aGVyIGRlbGF5IGluIHRoZSBvcmRlciB0aGV5IGFycml2ZS4qL1xuICAgIC8qIFB1cnNlSSB0aGVyZWZvcmUgcmVxdWlyZXMgdGhhdCB0aGUgYHNyY1BheW1lbnRgIGFyZ3VtZW50IGFscmVhZHkqL1xuICAgIC8qIGJlIGEgcmVtb3RhYmxlLCBub3QgYSBwcm9taXNlLiovXG4gICAgLyogUHVyc2VJIG9ubHkgY2FsbHMgdGhpcyByYXcgbWV0aG9kIGFmdGVyIHZhbGlkYXRpbmcgdGhhdCovXG4gICAgLyogYHNyY1BheW1lbnRgIGlzIGEgcmVtb3RhYmxlLCBsZWF2aW5nIGl0Ki9cbiAgICAvKiB0byB0aGlzIHJhdyBtZXRob2QgdG8gdmFsaWRhdGUgdGhhdCB0aGlzIHJlbW90YWJsZSBpcyBhY3R1YWxseSovXG4gICAgLyogYSBsaXZlIHBheW1lbnQgb2YgdGhlIGNvcnJlY3QgYnJhbmQgd2l0aCBzdWZmaWNpZW50IGZ1bmRzLiovXG4gICAgZGVwb3NpdDogTS5jYWxsKFBheW1lbnRTaGFwZSkub3B0aW9uYWwoQW1vdW50UGF0dGVyblNoYXBlKS5yZXR1cm5zKGFtb3VudFNoYXBlKSxcbiAgICBnZXREZXBvc2l0RmFjZXQ6IE0uY2FsbCgpLnJldHVybnMoRGVwb3NpdEZhY2V0U2hhcGUpLFxuICAgIHdpdGhkcmF3OiBNLmNhbGwoYW1vdW50U2hhcGUpLnJldHVybnMoUGF5bWVudFNoYXBlKSxcbiAgICBnZXRSZWNvdmVyeVNldDogTS5jYWxsKCkucmV0dXJucyhNLnNldE9mKFBheW1lbnRTaGFwZSkpLFxuICAgIHJlY292ZXJBbGw6IE0uY2FsbCgpLnJldHVybnMoYW1vdW50U2hhcGUpXG4gIH0pO1xuICBjb25zdCBEZXBvc2l0RmFjZXRJID0gTS5pbnRlcmZhY2UoXCJEZXBvc2l0RmFjZXRcIiwge1xuICAgIHJlY2VpdmU6IGdldEludGVyZmFjZUd1YXJkUGF5bG9hZChQdXJzZUkpLm1ldGhvZEd1YXJkcy5kZXBvc2l0XG4gIH0pO1xuICBjb25zdCBQdXJzZUlLaXQgPSB7XG4gICAgcHVyc2U6IFB1cnNlSSxcbiAgICBkZXBvc2l0RmFjZXQ6IERlcG9zaXRGYWNldElcbiAgfTtcbiAgaGFyZGVuKFB1cnNlSUtpdCk7XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIElzc3VlckksXG4gICAgTWludEksXG4gICAgUGF5bWVudEksXG4gICAgUHVyc2VJS2l0XG4gIH0pO1xufTtcbmhhcmRlbihtYWtlSXNzdWVySW50ZXJmYWNlcyk7XG5cbi8qIC4uL29yY2hlc3RyYXRpb24vc3JjL3R5cGVHdWFyZHMuanMqL1xudmFyIE91dGJvdW5kQ29ubmVjdGlvbkhhbmRsZXJJID0gTS5pbnRlcmZhY2UoXG4gIFwiT3V0Ym91bmRDb25uZWN0aW9uSGFuZGxlclwiLFxuICB7XG4gICAgb25PcGVuOiBNLmNhbGxXaGVuKE0uYW55KCksIE0uc3RyaW5nKCksIE0uc3RyaW5nKCksIE0uYW55KCkpLnJldHVybnMoXG4gICAgICBNLmFueSgpXG4gICAgKSxcbiAgICBvbkNsb3NlOiBNLmNhbGxXaGVuKE0uYW55KCksIE0uYW55KCksIE0uYW55KCkpLnJldHVybnMoTS5hbnkoKSlcbiAgfVxuKTtcbnZhciBDb3Ntb3NDaGFpbkFkZHJlc3NTaGFwZSA9IHtcbiAgY2hhaW5JZDogTS5zdHJpbmcoKSxcbiAgLyogSWdub3JlZCBidXQgbWFpbnRhaW5lZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkqL1xuICBlbmNvZGluZzogTS5zdHJpbmcoKSxcbiAgdmFsdWU6IE0uc3RyaW5nKClcbn07XG5oYXJkZW4oQ29zbW9zQ2hhaW5BZGRyZXNzU2hhcGUpO1xudmFyIENhaXAxMFJlY29yZFNoYXBlID0ge1xuICBuYW1lc3BhY2U6IE0uc3RyaW5nKCksXG4gIHJlZmVyZW5jZTogTS5zdHJpbmcoKSxcbiAgYWNjb3VudEFkZHJlc3M6IE0uc3RyaW5nKClcbn07XG5oYXJkZW4oQ2FpcDEwUmVjb3JkU2hhcGUpO1xudmFyIEFjY291bnRJZEFyZ1NoYXBlID0gTS5vcihNLnN0cmluZygpLCBDb3Ntb3NDaGFpbkFkZHJlc3NTaGFwZSk7XG52YXIgUHJvdG8zU2hhcGUgPSB7IHR5cGVVcmw6IE0uc3RyaW5nKCksIHZhbHVlOiBNLnN0cmluZygpIH07XG5oYXJkZW4oUHJvdG8zU2hhcGUpO1xudmFyIElCQ0NoYW5uZWxJRFNoYXBlID0gTS5zdHJpbmcoKTtcbnZhciBJQkNDaGFubmVsSW5mb1NoYXBlID0gTS5zcGxpdFJlY29yZCh7XG4gIHBvcnRJZDogTS5zdHJpbmcoKSxcbiAgY2hhbm5lbElkOiBJQkNDaGFubmVsSURTaGFwZSxcbiAgY291bnRlclBhcnR5UG9ydElkOiBNLnN0cmluZygpLFxuICBjb3VudGVyUGFydHlDaGFubmVsSWQ6IElCQ0NoYW5uZWxJRFNoYXBlLFxuICBvcmRlcmluZzogTS5zY2FsYXIoKSxcbiAgLyogWFhYKi9cbiAgc3RhdGU6IE0uc2NhbGFyKCksXG4gIC8qIFhYWCovXG4gIHZlcnNpb246IE0uc3RyaW5nKClcbn0pO1xudmFyIElCQ0Nvbm5lY3Rpb25JRFNoYXBlID0gTS5zdHJpbmcoKTtcbnZhciBJQkNDb25uZWN0aW9uSW5mb1NoYXBlID0gTS5zcGxpdFJlY29yZCh7XG4gIGlkOiBJQkNDb25uZWN0aW9uSURTaGFwZSxcbiAgY2xpZW50X2lkOiBNLnN0cmluZygpLFxuICBzdGF0ZTogTS5zY2FsYXIoKSxcbiAgLyogWFhYIFNUQVRFX09QRU4gb3IuLi4qL1xuICBjb3VudGVycGFydHk6IHtcbiAgICBjbGllbnRfaWQ6IE0uc3RyaW5nKCksXG4gICAgY29ubmVjdGlvbl9pZDogSUJDQ29ubmVjdGlvbklEU2hhcGVcbiAgfSxcbiAgdHJhbnNmZXJDaGFubmVsOiBJQkNDaGFubmVsSW5mb1NoYXBlXG59KTtcbnZhciBDb3Ntb3NBc3NldEluZm9TaGFwZSA9IE0uc3BsaXRSZWNvcmQoe1xuICBiYXNlOiBNLnN0cmluZygpLFxuICBuYW1lOiBNLnN0cmluZygpLFxuICBkaXNwbGF5OiBNLnN0cmluZygpLFxuICBzeW1ib2w6IE0uc3RyaW5nKCksXG4gIGRlbm9tX3VuaXRzOiBNLmFycmF5T2YoXG4gICAgTS5zcGxpdFJlY29yZCh7IGRlbm9tOiBNLnN0cmluZygpLCBleHBvbmVudDogTS5udW1iZXIoKSB9KVxuICApXG59KTtcbnZhciBDaGFpbkluZm9SZXF1aXJlZFNoYXBlID0ge1xuICBuYW1lc3BhY2U6IE0uc3RyaW5nKCksXG4gIHJlZmVyZW5jZTogTS5zdHJpbmcoKVxufTtcbnZhciBDaGFpbkluZm9PcHRpb25hbFNoYXBlID0ge1xuICBjY3RwRGVzdGluYXRpb25Eb21haW46IE0ubnVtYmVyKClcbn07XG52YXIgQmFzZUNoYWluSW5mb1NoYXBlID0gTS5zcGxpdFJlY29yZChcbiAgQ2hhaW5JbmZvUmVxdWlyZWRTaGFwZSxcbiAgQ2hhaW5JbmZvT3B0aW9uYWxTaGFwZVxuKTtcbmhhcmRlbihCYXNlQ2hhaW5JbmZvU2hhcGUpO1xudmFyIENvc21vc0NoYWluSW5mb1NoYXBlID0gTS5zcGxpdFJlY29yZChcbiAge1xuICAgIGNoYWluSWQ6IE0uc3RyaW5nKCksXG4gICAgYmVjaDMyUHJlZml4OiBNLnN0cmluZygpLFxuICAgIC4uLkNoYWluSW5mb1JlcXVpcmVkU2hhcGVcbiAgfSxcbiAge1xuICAgIGNvbm5lY3Rpb25zOiBNLnJlY29yZCgpLFxuICAgIC8qIFVOVElMIGh0dHBzOi8vZ2l0aHViLmNvbS9BZ29yaWMvYWdvcmljLXNkay9pc3N1ZXMvOTMyNiovXG4gICAgaWNxRW5hYmxlZDogTS5ib29sZWFuKCksXG4gICAgcGZtRW5hYmxlZDogTS5ib29sZWFuKCksXG4gICAgc3Rha2luZ1Rva2VuczogTS5hcnJheU9mKHsgZGVub206IE0uc3RyaW5nKCkgfSksXG4gICAgLi4uQ2hhaW5JbmZvT3B0aW9uYWxTaGFwZVxuICB9XG4pO1xuaGFyZGVuKENvc21vc0NoYWluSW5mb1NoYXBlKTtcbnZhciBDaGFpbkluZm9TaGFwZSA9IE0ub3IoQ29zbW9zQ2hhaW5JbmZvU2hhcGUsIEJhc2VDaGFpbkluZm9TaGFwZSk7XG5oYXJkZW4oQ2hhaW5JbmZvU2hhcGUpO1xudmFyIERlbm9tU2hhcGUgPSBNLnN0cmluZygpO1xudmFyIENvaW5TaGFwZSA9IHtcbiAgLyoqIGpzb24tc2FmZSBzdHJpbmdpZmllZCBiaWdpbnQgKi9cbiAgYW1vdW50OiBNLnN0cmluZygpLFxuICBkZW5vbTogRGVub21TaGFwZVxufTtcbmhhcmRlbihDb2luU2hhcGUpO1xudmFyIERlbm9tSW5mb1NoYXBlID0ge1xuICBjaGFpbjogTS5yZW1vdGFibGUoXCJDaGFpblwiKSxcbiAgYmFzZTogTS5yZW1vdGFibGUoXCJDaGFpblwiKSxcbiAgYnJhbmQ6IE0ub3IoTS5yZW1vdGFibGUoXCJCcmFuZFwiKSwgTS51bmRlZmluZWQoKSksXG4gIGJhc2VEZW5vbTogTS5zdHJpbmcoKVxufTtcbmhhcmRlbihEZW5vbUluZm9TaGFwZSk7XG52YXIgRGVub21EZXRhaWxTaGFwZSA9IE0uc3BsaXRSZWNvcmQoXG4gIHsgY2hhaW5OYW1lOiBNLnN0cmluZygpLCBiYXNlTmFtZTogTS5zdHJpbmcoKSwgYmFzZURlbm9tOiBNLnN0cmluZygpIH0sXG4gIHsgYnJhbmQ6IEJyYW5kU2hhcGUgfVxuKTtcbmhhcmRlbihEZW5vbURldGFpbFNoYXBlKTtcbnZhciBEZW5vbUFtb3VudFNoYXBlID0geyBkZW5vbTogRGVub21TaGFwZSwgdmFsdWU6IE0ubmF0KCkgfTtcbmhhcmRlbihEZW5vbUFtb3VudFNoYXBlKTtcbnZhciBBbnlOYXRBbW91bnRTaGFwZSA9IHtcbiAgYnJhbmQ6IE0ucmVtb3RhYmxlKFwiQnJhbmRcIiksXG4gIHZhbHVlOiBNLm5hdCgpXG59O1xuaGFyZGVuKEFueU5hdEFtb3VudFNoYXBlKTtcbnZhciBBbW91bnRBcmdTaGFwZSA9IE0ub3IoQW55TmF0QW1vdW50U2hhcGUsIERlbm9tQW1vdW50U2hhcGUpO1xudmFyIERlbGVnYXRpb25TaGFwZSA9IE0uc3BsaXRSZWNvcmQoXG4gIHtcbiAgICB2YWxpZGF0b3I6IENvc21vc0NoYWluQWRkcmVzc1NoYXBlLFxuICAgIGFtb3VudDogQW1vdW50QXJnU2hhcGVcbiAgfSxcbiAgeyBkZWxlZ2F0b3I6IENvc21vc0NoYWluQWRkcmVzc1NoYXBlIH1cbik7XG52YXIgSUNRTXNnU2hhcGUgPSBNLnNwbGl0UmVjb3JkKFxuICB7IHBhdGg6IE0uc3RyaW5nKCksIGRhdGE6IE0uc3RyaW5nKCkgfSxcbiAgeyBoZWlnaHQ6IE0uc3RyaW5nKCksIHByb3ZlOiBNLmJvb2xlYW4oKSB9XG4pO1xudmFyIFR5cGVkSnNvblNoYXBlID0gTS5zcGxpdFJlY29yZCh7IFwiQHR5cGVcIjogTS5zdHJpbmcoKSB9KTtcbnZhciBjaGFpbkZhY2FkZU1ldGhvZHMgPSB7XG4gIGdldENoYWluSW5mbzogTS5jYWxsKCkucmV0dXJucyhWb3dTaGFwZSksXG4gIG1ha2VBY2NvdW50OiBNLmNhbGwoKS5yZXR1cm5zKFZvd1NoYXBlKVxufTtcbmhhcmRlbihjaGFpbkZhY2FkZU1ldGhvZHMpO1xudmFyIFRpbWVzdGFtcFByb3RvU2hhcGUgPSB7IHNlY29uZHM6IE0uc3RyaW5nKCksIG5hbm9zOiBNLm51bWJlcigpIH07XG5oYXJkZW4oVGltZXN0YW1wUHJvdG9TaGFwZSk7XG52YXIgRXhlY3V0ZUlDQVR4T3B0c1NoYXBlID0gTS5zcGxpdFJlY29yZChcbiAge30sXG4gIHtcbiAgICBtZW1vOiBNLnN0cmluZygpLFxuICAgIHRpbWVvdXRIZWlnaHQ6IE0uYmlnaW50KCksXG4gICAgZXh0ZW5zaW9uT3B0aW9uczogTS5hcnJheU9mKE0uYW55KCkpLFxuICAgIG5vbkNyaXRpY2FsRXh0ZW5zaW9uT3B0aW9uczogTS5hcnJheU9mKE0uYW55KCkpLFxuICAgIHNlbmRPcHRzOiBTZW5kT3B0aW9uc1NoYXBlXG4gIH1cbik7XG52YXIgQW55TmF0QW1vdW50c1JlY29yZCA9IE0uYW5kKFxuICBNLnJlY29yZE9mKE0uc3RyaW5nKCksIEFueU5hdEFtb3VudFNoYXBlKSxcbiAgTS5ub3Qoe30pXG4pO1xudmFyIE9yY2hlc3RyYXRpb25Qb3dlcnNTaGFwZSA9IHtcbiAgYWdvcmljTmFtZXM6IE0ucmVtb3RhYmxlKCksXG4gIGxvY2FsY2hhaW46IE0ucmVtb3RhYmxlKCksXG4gIG9yY2hlc3RyYXRpb25TZXJ2aWNlOiBNLnJlbW90YWJsZSgpLFxuICBzdG9yYWdlTm9kZTogTS5yZW1vdGFibGUoKSxcbiAgdGltZXJTZXJ2aWNlOiBNLnJlbW90YWJsZSgpXG59O1xuaGFyZGVuKE9yY2hlc3RyYXRpb25Qb3dlcnNTaGFwZSk7XG52YXIgRm9yd2FyZEFyZ3NTaGFwZSA9IHtcbiAgcmVjZWl2ZXI6IE0uc3RyaW5nKCksXG4gIHBvcnQ6IFwidHJhbnNmZXJcIixcbiAgY2hhbm5lbDogTS5zdHJpbmcoKSxcbiAgdGltZW91dDogTS5zdHJpbmcoKSxcbiAgcmV0cmllczogTS5udW1iZXIoKVxufTtcbmhhcmRlbihGb3J3YXJkQXJnc1NoYXBlKTtcbnZhciBGb3J3YXJkSW5mb1NoYXBlID0ge1xuICBmb3J3YXJkOiBNLnNwbGl0UmVjb3JkKEZvcndhcmRBcmdzU2hhcGUsIHtcbiAgICAvKipcbiAqIFByb3RvY29sIGFsbG93cyB1cyB0byByZWN1cnNpdmVseSBpbmNsdWRlIGBuZXh0YCBrZXlzLCBidXQgdGhpcyBvbmx5XG4gKiBzdXBwb3J0cyBvbmUuIEluIHByYWN0aWNlLCB0aGlzIGlzIGFsbCB3ZSBjdXJyZW50bHkgbmVlZC5cbiAqL1xuICAgIG5leHQ6IHtcbiAgICAgIGZvcndhcmQ6IEZvcndhcmRBcmdzU2hhcGVcbiAgICB9XG4gIH0pXG59O1xuaGFyZGVuKEZvcndhcmRJbmZvU2hhcGUpO1xudmFyIEZvcndhcmRPcHRzU2hhcGUgPSBNLnNwbGl0UmVjb3JkKFxuICB7fSxcbiAge1xuICAgIHRpbWVvdXQ6IE0uc3RyaW5nKCksXG4gICAgcmV0cmllczogTS5udW1iZXIoKSxcbiAgICBpbnRlcm1lZGlhdGVSZWNpcGllbnQ6IENvc21vc0NoYWluQWRkcmVzc1NoYXBlXG4gIH0sXG4gIHt9XG4pO1xudmFyIElCQ1RyYW5zZmVyT3B0aW9uc1NoYXBlID0gTS5zcGxpdFJlY29yZChcbiAge30sXG4gIHtcbiAgICB0aW1lb3V0VGltZXN0YW1wOiBNLmJpZ2ludCgpLFxuICAgIHRpbWVvdXRIZWlnaHQ6IHtcbiAgICAgIHJldmlzaW9uSGVpZ2h0OiBNLmJpZ2ludCgpLFxuICAgICAgcmV2aXNpb25OdW1iZXI6IE0uYmlnaW50KClcbiAgICB9LFxuICAgIHRpbWVvdXRSZWxhdGl2ZVNlY29uZHM6IE0uYmlnaW50KCksXG4gICAgbWVtbzogTS5zdHJpbmcoKSxcbiAgICBmb3J3YXJkT3B0czogRm9yd2FyZE9wdHNTaGFwZVxuICB9XG4pO1xuXG4vKiAuLi9jb3NtaWMtcHJvdG8vZGlzdC9jb2RlZ2VuL3V0ZjguanMqL1xuZnVuY3Rpb24gdXRmOExlbmd0aCh0NSkge1xuICBsZXQgcjYgPSAwLCBlMiA9IDA7XG4gIGZvciAobGV0IG8yID0gMDsgbzIgPCB0NS5sZW5ndGg7ICsrbzIpIGUyID0gdDUuY2hhckNvZGVBdChvMiksIGUyIDwgMTI4ID8gcjYgKz0gMSA6IGUyIDwgMjA0OCA/IHI2ICs9IDIgOiA1NTI5NiA9PSAoNjQ1MTIgJiBlMikgJiYgNTYzMjAgPT0gKDY0NTEyICYgdDUuY2hhckNvZGVBdChvMiArIDEpKSA/ICgrK28yLCByNiArPSA0KSA6IHI2ICs9IDM7XG4gIHJldHVybiByNjtcbn1cbmZ1bmN0aW9uIHV0ZjhSZWFkKHQ1LCByNiwgZTIpIHtcbiAgaWYgKGUyIC0gcjYgPCAxKSByZXR1cm4gXCJcIjtcbiAgY29uc3QgbzIgPSBbXTtcbiAgbGV0IG4yLCBmMiA9IFtdLCBoID0gMDtcbiAgZm9yICg7IHI2IDwgZTI7ICkgbjIgPSB0NVtyNisrXSwgbjIgPCAxMjggPyBvMltoKytdID0gbjIgOiBuMiA+IDE5MSAmJiBuMiA8IDIyNCA/IG8yW2grK10gPSAoMzEgJiBuMikgPDwgNiB8IDYzICYgdDVbcjYrK10gOiBuMiA+IDIzOSAmJiBuMiA8IDM2NSA/IChuMiA9ICgoNyAmIG4yKSA8PCAxOCB8ICg2MyAmIHQ1W3I2KytdKSA8PCAxMiB8ICg2MyAmIHQ1W3I2KytdKSA8PCA2IHwgNjMgJiB0NVtyNisrXSkgLSA2NTUzNiwgbzJbaCsrXSA9IDU1Mjk2ICsgKG4yID4+IDEwKSwgbzJbaCsrXSA9IDU2MzIwICsgKDEwMjMgJiBuMikpIDogbzJbaCsrXSA9ICgxNSAmIG4yKSA8PCAxMiB8ICg2MyAmIHQ1W3I2KytdKSA8PCA2IHwgNjMgJiB0NVtyNisrXSwgaCA+IDgxOTEgJiYgKChmMiB8fCAoZjIgPSBbXSkpLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSguLi5vMikpLCBoID0gMCk7XG4gIHJldHVybiBmMiA/IChoICYmIGYyLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSguLi5vMi5zbGljZSgwLCBoKSkpLCBmMi5qb2luKFwiXCIpKSA6IFN0cmluZy5mcm9tQ2hhckNvZGUoLi4ubzIuc2xpY2UoMCwgaCkpO1xufVxuZnVuY3Rpb24gdXRmOFdyaXRlKHQ1LCByNiwgZTIpIHtcbiAgY29uc3QgbzIgPSBlMjtcbiAgbGV0IG4yLCBmMjtcbiAgZm9yIChsZXQgbzMgPSAwOyBvMyA8IHQ1Lmxlbmd0aDsgKytvMykgbjIgPSB0NS5jaGFyQ29kZUF0KG8zKSwgbjIgPCAxMjggPyByNltlMisrXSA9IG4yIDogbjIgPCAyMDQ4ID8gKHI2W2UyKytdID0gbjIgPj4gNiB8IDE5MiwgcjZbZTIrK10gPSA2MyAmIG4yIHwgMTI4KSA6IDU1Mjk2ID09ICg2NDUxMiAmIG4yKSAmJiA1NjMyMCA9PSAoNjQ1MTIgJiAoZjIgPSB0NS5jaGFyQ29kZUF0KG8zICsgMSkpKSA/IChuMiA9IDY1NTM2ICsgKCgxMDIzICYgbjIpIDw8IDEwKSArICgxMDIzICYgZjIpLCArK28zLCByNltlMisrXSA9IG4yID4+IDE4IHwgMjQwLCByNltlMisrXSA9IG4yID4+IDEyICYgNjMgfCAxMjgsIHI2W2UyKytdID0gbjIgPj4gNiAmIDYzIHwgMTI4LCByNltlMisrXSA9IDYzICYgbjIgfCAxMjgpIDogKHI2W2UyKytdID0gbjIgPj4gMTIgfCAyMjQsIHI2W2UyKytdID0gbjIgPj4gNiAmIDYzIHwgMTI4LCByNltlMisrXSA9IDYzICYgbjIgfCAxMjgpO1xuICByZXR1cm4gZTIgLSBvMjtcbn1cblxuLyogLi4vY29zbWljLXByb3RvL2Rpc3QvY29kZWdlbi92YXJpbnQuanMqL1xuZnVuY3Rpb24gdmFyaW50NjRyZWFkKCkge1xuICBsZXQgdDUgPSAwLCByNiA9IDA7XG4gIGZvciAobGV0IG4zID0gMDsgbjMgPCAyODsgbjMgKz0gNykge1xuICAgIGxldCBvMiA9IHRoaXMuYnVmW3RoaXMucG9zKytdO1xuICAgIGlmICh0NSB8PSAoMTI3ICYgbzIpIDw8IG4zLCAhKDEyOCAmIG8yKSkgcmV0dXJuIHRoaXMuYXNzZXJ0Qm91bmRzKCksIFt0NSwgcjZdO1xuICB9XG4gIGxldCBuMiA9IHRoaXMuYnVmW3RoaXMucG9zKytdO1xuICBpZiAodDUgfD0gKDE1ICYgbjIpIDw8IDI4LCByNiA9ICgxMTIgJiBuMikgPj4gNCwgISgxMjggJiBuMikpIHJldHVybiB0aGlzLmFzc2VydEJvdW5kcygpLCBbdDUsIHI2XTtcbiAgZm9yIChsZXQgbjMgPSAzOyBuMyA8PSAzMTsgbjMgKz0gNykge1xuICAgIGxldCBvMiA9IHRoaXMuYnVmW3RoaXMucG9zKytdO1xuICAgIGlmIChyNiB8PSAoMTI3ICYgbzIpIDw8IG4zLCAhKDEyOCAmIG8yKSkgcmV0dXJuIHRoaXMuYXNzZXJ0Qm91bmRzKCksIFt0NSwgcjZdO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgdmFyaW50XCIpO1xufVxudmFyIHQgPSA0Mjk0OTY3Mjk2O1xuZnVuY3Rpb24gaW50NjRGcm9tU3RyaW5nKG8yKSB7XG4gIGNvbnN0IGkzID0gXCItXCIgPT09IG8yWzBdO1xuICBpMyAmJiAobzIgPSBvMi5zbGljZSgxKSk7XG4gIGNvbnN0IGUyID0gMWU2O1xuICBsZXQgczMgPSAwLCB1ID0gMDtcbiAgZnVuY3Rpb24gZjIocjYsIG4yKSB7XG4gICAgY29uc3QgaTQgPSBOdW1iZXIobzIuc2xpY2UocjYsIG4yKSk7XG4gICAgdSAqPSBlMiwgczMgPSBzMyAqIGUyICsgaTQsIHMzID49IHQgJiYgKHUgKz0gczMgLyB0IHwgMCwgczMgJT0gdCk7XG4gIH1cbiAgcmV0dXJuIGYyKC0yNCwgLTE4KSwgZjIoLTE4LCAtMTIpLCBmMigtMTIsIC02KSwgZjIoLTYpLCBpMyA/IG4oczMsIHUpIDogcihzMywgdSk7XG59XG5mdW5jdGlvbiBpbnQ2NFRvU3RyaW5nKHQ1LCBvMikge1xuICBsZXQgaTMgPSByKHQ1LCBvMik7XG4gIGNvbnN0IGUyID0gMjE0NzQ4MzY0OCAmIGkzLmhpO1xuICBlMiAmJiAoaTMgPSBuKGkzLmxvLCBpMy5oaSkpO1xuICBjb25zdCBzMyA9IHVJbnQ2NFRvU3RyaW5nKGkzLmxvLCBpMy5oaSk7XG4gIHJldHVybiBlMiA/IFwiLVwiICsgczMgOiBzMztcbn1cbmZ1bmN0aW9uIHVJbnQ2NFRvU3RyaW5nKHI2LCBuMikge1xuICBpZiAoeyBsbzogcjYsIGhpOiBuMiB9ID0gKGZ1bmN0aW9uKHQ1LCByNykge1xuICAgIHJldHVybiB7IGxvOiB0NSA+Pj4gMCwgaGk6IHI3ID4+PiAwIH07XG4gIH0pKHI2LCBuMiksIG4yIDw9IDIwOTcxNTEpIHJldHVybiBTdHJpbmcodCAqIG4yICsgcjYpO1xuICBjb25zdCBpMyA9IDE2Nzc3MjE1ICYgKHI2ID4+PiAyNCB8IG4yIDw8IDgpLCBlMiA9IG4yID4+IDE2ICYgNjU1MzU7XG4gIGxldCBzMyA9ICgxNjc3NzIxNSAmIHI2KSArIDY3NzcyMTYgKiBpMyArIDY3MTA2NTYgKiBlMiwgdSA9IGkzICsgODE0NzQ5NyAqIGUyLCBmMiA9IDIgKiBlMjtcbiAgY29uc3QgaCA9IDFlNztcbiAgcmV0dXJuIHMzID49IGggJiYgKHUgKz0gTWF0aC5mbG9vcihzMyAvIGgpLCBzMyAlPSBoKSwgdSA+PSBoICYmIChmMiArPSBNYXRoLmZsb29yKHUgLyBoKSwgdSAlPSBoKSwgZjIudG9TdHJpbmcoKSArIG8odSkgKyBvKHMzKTtcbn1cbmZ1bmN0aW9uIHIodDUsIHI2KSB7XG4gIHJldHVybiB7IGxvOiAwIHwgdDUsIGhpOiAwIHwgcjYgfTtcbn1cbmZ1bmN0aW9uIG4odDUsIG4yKSB7XG4gIHJldHVybiBuMiA9IH5uMiwgdDUgPyB0NSA9IDEgKyB+dDUgOiBuMiArPSAxLCByKHQ1LCBuMik7XG59XG52YXIgbyA9ICh0NSkgPT4ge1xuICBjb25zdCByNiA9IFN0cmluZyh0NSk7XG4gIHJldHVybiBcIjAwMDAwMDBcIi5zbGljZShyNi5sZW5ndGgpICsgcjY7XG59O1xuZnVuY3Rpb24gdmFyaW50MzJyZWFkKCkge1xuICBsZXQgdDUgPSB0aGlzLmJ1Zlt0aGlzLnBvcysrXSwgcjYgPSAxMjcgJiB0NTtcbiAgaWYgKCEoMTI4ICYgdDUpKSByZXR1cm4gdGhpcy5hc3NlcnRCb3VuZHMoKSwgcjY7XG4gIGlmICh0NSA9IHRoaXMuYnVmW3RoaXMucG9zKytdLCByNiB8PSAoMTI3ICYgdDUpIDw8IDcsICEoMTI4ICYgdDUpKSByZXR1cm4gdGhpcy5hc3NlcnRCb3VuZHMoKSwgcjY7XG4gIGlmICh0NSA9IHRoaXMuYnVmW3RoaXMucG9zKytdLCByNiB8PSAoMTI3ICYgdDUpIDw8IDE0LCAhKDEyOCAmIHQ1KSkgcmV0dXJuIHRoaXMuYXNzZXJ0Qm91bmRzKCksIHI2O1xuICBpZiAodDUgPSB0aGlzLmJ1Zlt0aGlzLnBvcysrXSwgcjYgfD0gKDEyNyAmIHQ1KSA8PCAyMSwgISgxMjggJiB0NSkpIHJldHVybiB0aGlzLmFzc2VydEJvdW5kcygpLCByNjtcbiAgdDUgPSB0aGlzLmJ1Zlt0aGlzLnBvcysrXSwgcjYgfD0gKDE1ICYgdDUpIDw8IDI4O1xuICBmb3IgKGxldCByNyA9IDU7IDEyOCAmIHQ1ICYmIHI3IDwgMTA7IHI3KyspIHQ1ID0gdGhpcy5idWZbdGhpcy5wb3MrK107XG4gIGlmICgxMjggJiB0NSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB2YXJpbnRcIik7XG4gIHJldHVybiB0aGlzLmFzc2VydEJvdW5kcygpLCByNiA+Pj4gMDtcbn1cbmZ1bmN0aW9uIHp6RW5jb2RlKHQ1LCByNikge1xuICBsZXQgbjIgPSByNiA+PiAzMTtcbiAgcmV0dXJuIHI2ID0gKChyNiA8PCAxIHwgdDUgPj4+IDMxKSBeIG4yKSA+Pj4gMCwgW3Q1ID0gKHQ1IDw8IDEgXiBuMikgPj4+IDAsIHI2XTtcbn1cbmZ1bmN0aW9uIHp6RGVjb2RlKHQ1LCByNikge1xuICBsZXQgbjIgPSAtKDEgJiB0NSk7XG4gIHJldHVybiBbdDUgPSAoKHQ1ID4+PiAxIHwgcjYgPDwgMzEpIF4gbjIpID4+PiAwLCByNiA9IChyNiA+Pj4gMSBeIG4yKSA+Pj4gMF07XG59XG5mdW5jdGlvbiByZWFkVUludDMyKHQ1LCByNikge1xuICByZXR1cm4gKHQ1W3I2XSB8IHQ1W3I2ICsgMV0gPDwgOCB8IHQ1W3I2ICsgMl0gPDwgMTYpICsgMTY3NzcyMTYgKiB0NVtyNiArIDNdO1xufVxuZnVuY3Rpb24gcmVhZEludDMyKHQ1LCByNikge1xuICByZXR1cm4gKHQ1W3I2XSB8IHQ1W3I2ICsgMV0gPDwgOCB8IHQ1W3I2ICsgMl0gPDwgMTYpICsgKHQ1W3I2ICsgM10gPDwgMjQpO1xufVxuZnVuY3Rpb24gd3JpdGVWYXJpbnQzMih0NSwgcjYsIG4yKSB7XG4gIGZvciAoOyB0NSA+IDEyNzsgKSByNltuMisrXSA9IDEyNyAmIHQ1IHwgMTI4LCB0NSA+Pj49IDc7XG4gIHI2W24yXSA9IHQ1O1xufVxuZnVuY3Rpb24gd3JpdGVWYXJpbnQ2NCh0NSwgcjYsIG4yKSB7XG4gIGZvciAoOyB0NS5oaTsgKSByNltuMisrXSA9IDEyNyAmIHQ1LmxvIHwgMTI4LCB0NS5sbyA9ICh0NS5sbyA+Pj4gNyB8IHQ1LmhpIDw8IDI1KSA+Pj4gMCwgdDUuaGkgPj4+PSA3O1xuICBmb3IgKDsgdDUubG8gPiAxMjc7ICkgcjZbbjIrK10gPSAxMjcgJiB0NS5sbyB8IDEyOCwgdDUubG8gPSB0NS5sbyA+Pj4gNztcbiAgcjZbbjIrK10gPSB0NS5sbztcbn1cbmZ1bmN0aW9uIGludDY0TGVuZ3RoKHQ1LCByNikge1xuICBsZXQgbjIgPSAodDUgPj4+IDI4IHwgcjYgPDwgNCkgPj4+IDAsIG8yID0gcjYgPj4+IDI0O1xuICByZXR1cm4gMCA9PT0gbzIgPyAwID09PSBuMiA/IHQ1IDwgMTYzODQgPyB0NSA8IDEyOCA/IDEgOiAyIDogdDUgPCAyMDk3MTUyID8gMyA6IDQgOiBuMiA8IDE2Mzg0ID8gbjIgPCAxMjggPyA1IDogNiA6IG4yIDwgMjA5NzE1MiA/IDcgOiA4IDogbzIgPCAxMjggPyA5IDogMTA7XG59XG5mdW5jdGlvbiB3cml0ZUZpeGVkMzIodDUsIHI2LCBuMikge1xuICByNltuMl0gPSAyNTUgJiB0NSwgcjZbbjIgKyAxXSA9IHQ1ID4+PiA4ICYgMjU1LCByNltuMiArIDJdID0gdDUgPj4+IDE2ICYgMjU1LCByNltuMiArIDNdID0gdDUgPj4+IDI0O1xufVxuZnVuY3Rpb24gd3JpdGVCeXRlKHQ1LCByNiwgbjIpIHtcbiAgcjZbbjJdID0gMjU1ICYgdDU7XG59XG5cbi8qIC4uL2Nvc21pYy1wcm90by9kaXN0L2NvZGVnZW4vYmluYXJ5LmpzKi9cbnZhciBXaXJlVHlwZTtcbiEoZnVuY3Rpb24odDUpIHtcbiAgdDVbdDUuVmFyaW50ID0gMF0gPSBcIlZhcmludFwiLCB0NVt0NS5GaXhlZDY0ID0gMV0gPSBcIkZpeGVkNjRcIiwgdDVbdDUuQnl0ZXMgPSAyXSA9IFwiQnl0ZXNcIiwgdDVbdDUuRml4ZWQzMiA9IDVdID0gXCJGaXhlZDMyXCI7XG59KShXaXJlVHlwZSB8fCAoV2lyZVR5cGUgPSB7fSkpO1xudmFyIEJpbmFyeVJlYWRlciA9IGNsYXNzIHtcbiAgYnVmO1xuICBwb3M7XG4gIHR5cGU7XG4gIGxlbjtcbiAgYXNzZXJ0Qm91bmRzKCkge1xuICAgIGlmICh0aGlzLnBvcyA+IHRoaXMubGVuKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInByZW1hdHVyZSBFT0ZcIik7XG4gIH1cbiAgY29uc3RydWN0b3IodDUpIHtcbiAgICB0aGlzLmJ1ZiA9IHQ1ID8gbmV3IFVpbnQ4QXJyYXkodDUpIDogbmV3IFVpbnQ4QXJyYXkoMCksIHRoaXMucG9zID0gMCwgdGhpcy50eXBlID0gMCwgdGhpcy5sZW4gPSB0aGlzLmJ1Zi5sZW5ndGg7XG4gIH1cbiAgdGFnKCkge1xuICAgIGNvbnN0IHQ1ID0gdGhpcy51aW50MzIoKSwgaTMgPSB0NSA+Pj4gMywgczMgPSA3ICYgdDU7XG4gICAgaWYgKGkzIDw9IDAgfHwgczMgPCAwIHx8IHMzID4gNSkgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCB0YWc6IGZpZWxkIG5vIFwiICsgaTMgKyBcIiB3aXJlIHR5cGUgXCIgKyBzMyk7XG4gICAgcmV0dXJuIFtpMywgczMsIHQ1XTtcbiAgfVxuICBza2lwKHQ1KSB7XG4gICAgaWYgKFwibnVtYmVyXCIgPT0gdHlwZW9mIHQ1KSB7XG4gICAgICBpZiAodGhpcy5wb3MgKyB0NSA+IHRoaXMubGVuKSB0aHJvdyBCKHRoaXMsIHQ1KTtcbiAgICAgIHRoaXMucG9zICs9IHQ1O1xuICAgIH0gZWxzZSBkbyB7XG4gICAgICBpZiAodGhpcy5wb3MgPj0gdGhpcy5sZW4pIHRocm93IEIodGhpcyk7XG4gICAgfSB3aGlsZSAoMTI4ICYgdGhpcy5idWZbdGhpcy5wb3MrK10pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHNraXBUeXBlKHQ1KSB7XG4gICAgc3dpdGNoICh0NSkge1xuICAgICAgY2FzZSBXaXJlVHlwZS5WYXJpbnQ6XG4gICAgICAgIHRoaXMuc2tpcCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgV2lyZVR5cGUuRml4ZWQ2NDpcbiAgICAgICAgdGhpcy5za2lwKDgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgV2lyZVR5cGUuQnl0ZXM6XG4gICAgICAgIHRoaXMuc2tpcCh0aGlzLnVpbnQzMigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGZvciAoOyA0ICE9ICh0NSA9IDcgJiB0aGlzLnVpbnQzMigpKTsgKSB0aGlzLnNraXBUeXBlKHQ1KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFdpcmVUeXBlLkZpeGVkMzI6XG4gICAgICAgIHRoaXMuc2tpcCg0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBFcnJvcihcImludmFsaWQgd2lyZSB0eXBlIFwiICsgdDUgKyBcIiBhdCBvZmZzZXQgXCIgKyB0aGlzLnBvcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHVpbnQzMigpIHtcbiAgICByZXR1cm4gdmFyaW50MzJyZWFkLmJpbmQodGhpcykoKTtcbiAgfVxuICBpbnQzMigpIHtcbiAgICByZXR1cm4gMCB8IHRoaXMudWludDMyKCk7XG4gIH1cbiAgc2ludDMyKCkge1xuICAgIGNvbnN0IHQ1ID0gdGhpcy51aW50MzIoKTtcbiAgICByZXR1cm4gdDUgJSAyID09IDEgPyAodDUgKyAxKSAvIC0yIDogdDUgLyAyO1xuICB9XG4gIGZpeGVkMzIoKSB7XG4gICAgY29uc3QgdDUgPSByZWFkVUludDMyKHRoaXMuYnVmLCB0aGlzLnBvcyk7XG4gICAgcmV0dXJuIHRoaXMucG9zICs9IDQsIHQ1O1xuICB9XG4gIHNmaXhlZDMyKCkge1xuICAgIGNvbnN0IHQ1ID0gcmVhZEludDMyKHRoaXMuYnVmLCB0aGlzLnBvcyk7XG4gICAgcmV0dXJuIHRoaXMucG9zICs9IDQsIHQ1O1xuICB9XG4gIGludDY0KCkge1xuICAgIGNvbnN0IFt0NSwgaTNdID0gdmFyaW50NjRyZWFkLmJpbmQodGhpcykoKTtcbiAgICByZXR1cm4gQmlnSW50KGludDY0VG9TdHJpbmcodDUsIGkzKSk7XG4gIH1cbiAgdWludDY0KCkge1xuICAgIGNvbnN0IFt0NSwgaTNdID0gdmFyaW50NjRyZWFkLmJpbmQodGhpcykoKTtcbiAgICByZXR1cm4gQmlnSW50KHVJbnQ2NFRvU3RyaW5nKHQ1LCBpMykpO1xuICB9XG4gIHNpbnQ2NCgpIHtcbiAgICBsZXQgW3Q1LCBpM10gPSB2YXJpbnQ2NHJlYWQuYmluZCh0aGlzKSgpO1xuICAgIHJldHVybiBbdDUsIGkzXSA9IHp6RGVjb2RlKHQ1LCBpMyksIEJpZ0ludChpbnQ2NFRvU3RyaW5nKHQ1LCBpMykpO1xuICB9XG4gIGZpeGVkNjQoKSB7XG4gICAgY29uc3QgdDUgPSB0aGlzLnNmaXhlZDMyKCksIGkzID0gdGhpcy5zZml4ZWQzMigpO1xuICAgIHJldHVybiBCaWdJbnQodUludDY0VG9TdHJpbmcodDUsIGkzKSk7XG4gIH1cbiAgc2ZpeGVkNjQoKSB7XG4gICAgY29uc3QgdDUgPSB0aGlzLnNmaXhlZDMyKCksIGkzID0gdGhpcy5zZml4ZWQzMigpO1xuICAgIHJldHVybiBCaWdJbnQoaW50NjRUb1N0cmluZyh0NSwgaTMpKTtcbiAgfVxuICBmbG9hdCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmbG9hdCBub3Qgc3VwcG9ydGVkXCIpO1xuICB9XG4gIGRvdWJsZSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJkb3VibGUgbm90IHN1cHBvcnRlZFwiKTtcbiAgfVxuICBib29sKCkge1xuICAgIGNvbnN0IFt0NSwgaTNdID0gdmFyaW50NjRyZWFkLmJpbmQodGhpcykoKTtcbiAgICByZXR1cm4gMCAhPT0gdDUgfHwgMCAhPT0gaTM7XG4gIH1cbiAgYnl0ZXMoKSB7XG4gICAgY29uc3QgdDUgPSB0aGlzLnVpbnQzMigpLCBpMyA9IHRoaXMucG9zO1xuICAgIHJldHVybiB0aGlzLnBvcyArPSB0NSwgdGhpcy5hc3NlcnRCb3VuZHMoKSwgdGhpcy5idWYuc3ViYXJyYXkoaTMsIGkzICsgdDUpO1xuICB9XG4gIHN0cmluZygpIHtcbiAgICBjb25zdCB0NSA9IHRoaXMuYnl0ZXMoKTtcbiAgICByZXR1cm4gdXRmOFJlYWQodDUsIDAsIHQ1Lmxlbmd0aCk7XG4gIH1cbn07XG52YXIgdyA9IGNsYXNzIHtcbiAgZm47XG4gIGxlbjtcbiAgdmFsO1xuICBuZXh0O1xuICBjb25zdHJ1Y3Rvcih0NSwgaTMsIHMzKSB7XG4gICAgdGhpcy5mbiA9IHQ1LCB0aGlzLmxlbiA9IGkzLCB0aGlzLnZhbCA9IHMzO1xuICB9XG4gIHByb2NlZWQodDUsIGkzKSB7XG4gICAgdGhpcy5mbiAmJiB0aGlzLmZuKHRoaXMudmFsLCB0NSwgaTMpO1xuICB9XG59O1xudmFyIGIgPSBjbGFzcyB7XG4gIGhlYWQ7XG4gIHRhaWw7XG4gIGxlbjtcbiAgbmV4dDtcbiAgY29uc3RydWN0b3IodDUpIHtcbiAgICB0aGlzLmhlYWQgPSB0NS5oZWFkLCB0aGlzLnRhaWwgPSB0NS50YWlsLCB0aGlzLmxlbiA9IHQ1LmxlbiwgdGhpcy5uZXh0ID0gdDUuc3RhdGVzO1xuICB9XG59O1xudmFyIEJpbmFyeVdyaXRlciA9IGNsYXNzIF9CaW5hcnlXcml0ZXIge1xuICBsZW4gPSAwO1xuICBoZWFkO1xuICB0YWlsO1xuICBzdGF0ZXM7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaGVhZCA9IG5ldyB3KG51bGwsIDAsIDApLCB0aGlzLnRhaWwgPSB0aGlzLmhlYWQsIHRoaXMuc3RhdGVzID0gbnVsbDtcbiAgfVxuICBzdGF0aWMgY3JlYXRlKCkge1xuICAgIHJldHVybiBuZXcgX0JpbmFyeVdyaXRlcigpO1xuICB9XG4gIHN0YXRpYyBhbGxvYyh0NSkge1xuICAgIHJldHVybiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBVaW50OEFycmF5ID8gKGZ1bmN0aW9uKHQ2LCBpMywgczMpIHtcbiAgICAgIGNvbnN0IGUyID0gczMgfHwgODE5MiwgbjIgPSBlMiA+Pj4gMTtcbiAgICAgIGxldCByNiA9IG51bGwsIGggPSBlMjtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzNCkge1xuICAgICAgICBpZiAoczQgPCAxIHx8IHM0ID4gbjIpIHJldHVybiB0NihzNCk7XG4gICAgICAgIGggKyBzNCA+IGUyICYmIChyNiA9IHQ2KGUyKSwgaCA9IDApO1xuICAgICAgICBjb25zdCBvMiA9IGkzLmNhbGwocjYsIGgsIGggKz0gczQpO1xuICAgICAgICByZXR1cm4gNyAmIGggJiYgKGggPSAxICsgKDcgfCBoKSksIG8yO1xuICAgICAgfTtcbiAgICB9KSgoKHQ2KSA9PiBuZXcgVWludDhBcnJheSh0NikpLCBVaW50OEFycmF5LnByb3RvdHlwZS5zdWJhcnJheSkodDUpIDogbmV3IEFycmF5KHQ1KTtcbiAgfVxuICBfcHVzaCh0NSwgaTMsIHMzKSB7XG4gICAgcmV0dXJuIHRoaXMudGFpbCA9IHRoaXMudGFpbC5uZXh0ID0gbmV3IHcodDUsIGkzLCBzMyksIHRoaXMubGVuICs9IGkzLCB0aGlzO1xuICB9XG4gIGZpbmlzaCgpIHtcbiAgICBsZXQgdDUgPSB0aGlzLmhlYWQubmV4dCwgaTMgPSAwO1xuICAgIGNvbnN0IHMzID0gX0JpbmFyeVdyaXRlci5hbGxvYyh0aGlzLmxlbik7XG4gICAgZm9yICg7IHQ1OyApIHQ1LnByb2NlZWQoczMsIGkzKSwgaTMgKz0gdDUubGVuLCB0NSA9IHQ1Lm5leHQ7XG4gICAgcmV0dXJuIHMzO1xuICB9XG4gIGZvcmsoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVzID0gbmV3IGIodGhpcyksIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG5ldyB3KG51bGwsIDAsIDApLCB0aGlzLmxlbiA9IDAsIHRoaXM7XG4gIH1cbiAgcmVzZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVzID8gKHRoaXMuaGVhZCA9IHRoaXMuc3RhdGVzLmhlYWQsIHRoaXMudGFpbCA9IHRoaXMuc3RhdGVzLnRhaWwsIHRoaXMubGVuID0gdGhpcy5zdGF0ZXMubGVuLCB0aGlzLnN0YXRlcyA9IHRoaXMuc3RhdGVzLm5leHQpIDogKHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG5ldyB3KG51bGwsIDAsIDApLCB0aGlzLmxlbiA9IDApLCB0aGlzO1xuICB9XG4gIGxkZWxpbSgpIHtcbiAgICBjb25zdCB0NSA9IHRoaXMuaGVhZCwgaTMgPSB0aGlzLnRhaWwsIHMzID0gdGhpcy5sZW47XG4gICAgcmV0dXJuIHRoaXMucmVzZXQoKS51aW50MzIoczMpLCBzMyAmJiAodGhpcy50YWlsLm5leHQgPSB0NS5uZXh0LCB0aGlzLnRhaWwgPSBpMywgdGhpcy5sZW4gKz0gczMpLCB0aGlzO1xuICB9XG4gIHRhZyh0NSwgaTMpIHtcbiAgICByZXR1cm4gdGhpcy51aW50MzIoKHQ1IDw8IDMgfCBpMykgPj4+IDApO1xuICB9XG4gIHVpbnQzMih0NSkge1xuICAgIHJldHVybiB0aGlzLmxlbiArPSAodGhpcy50YWlsID0gdGhpcy50YWlsLm5leHQgPSBuZXcgdyh3cml0ZVZhcmludDMyLCAodDUgPj4+PSAwKSA8IDEyOCA/IDEgOiB0NSA8IDE2Mzg0ID8gMiA6IHQ1IDwgMjA5NzE1MiA/IDMgOiB0NSA8IDI2ODQzNTQ1NiA/IDQgOiA1LCB0NSkpLmxlbiwgdGhpcztcbiAgfVxuICBpbnQzMih0NSkge1xuICAgIHJldHVybiB0NSA8IDAgPyB0aGlzLl9wdXNoKHdyaXRlVmFyaW50NjQsIDEwLCBpbnQ2NEZyb21TdHJpbmcodDUudG9TdHJpbmcoKSkpIDogdGhpcy51aW50MzIodDUpO1xuICB9XG4gIHNpbnQzMih0NSkge1xuICAgIHJldHVybiB0aGlzLnVpbnQzMigodDUgPDwgMSBeIHQ1ID4+IDMxKSA+Pj4gMCk7XG4gIH1cbiAgaW50NjQodDUpIHtcbiAgICBjb25zdCB7IGxvOiBpMywgaGk6IHMzIH0gPSBpbnQ2NEZyb21TdHJpbmcodDUudG9TdHJpbmcoKSk7XG4gICAgcmV0dXJuIHRoaXMuX3B1c2god3JpdGVWYXJpbnQ2NCwgaW50NjRMZW5ndGgoaTMsIHMzKSwgeyBsbzogaTMsIGhpOiBzMyB9KTtcbiAgfVxuICB1aW50NjQgPSBfQmluYXJ5V3JpdGVyLnByb3RvdHlwZS5pbnQ2NDtcbiAgc2ludDY0KHQ1KSB7XG4gICAgbGV0IHsgbG86IGkzLCBoaTogczMgfSA9IGludDY0RnJvbVN0cmluZyh0NS50b1N0cmluZygpKTtcbiAgICByZXR1cm4gW2kzLCBzM10gPSB6ekVuY29kZShpMywgczMpLCB0aGlzLl9wdXNoKHdyaXRlVmFyaW50NjQsIGludDY0TGVuZ3RoKGkzLCBzMyksIHsgbG86IGkzLCBoaTogczMgfSk7XG4gIH1cbiAgZml4ZWQ2NCh0NSkge1xuICAgIGNvbnN0IHsgbG86IGkzLCBoaTogczMgfSA9IGludDY0RnJvbVN0cmluZyh0NS50b1N0cmluZygpKTtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZUZpeGVkMzIsIDQsIGkzKS5fcHVzaCh3cml0ZUZpeGVkMzIsIDQsIHMzKTtcbiAgfVxuICBzZml4ZWQ2NCA9IF9CaW5hcnlXcml0ZXIucHJvdG90eXBlLmZpeGVkNjQ7XG4gIGJvb2wodDUpIHtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZUJ5dGUsIDEsIHQ1ID8gMSA6IDApO1xuICB9XG4gIGZpeGVkMzIodDUpIHtcbiAgICByZXR1cm4gdGhpcy5fcHVzaCh3cml0ZUZpeGVkMzIsIDQsIHQ1ID4+PiAwKTtcbiAgfVxuICBzZml4ZWQzMiA9IF9CaW5hcnlXcml0ZXIucHJvdG90eXBlLmZpeGVkMzI7XG4gIGZsb2F0KHQ1KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZmxvYXQgbm90IHN1cHBvcnRlZFwiICsgdDUpO1xuICB9XG4gIGRvdWJsZSh0NSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImRvdWJsZSBub3Qgc3VwcG9ydGVkXCIgKyB0NSk7XG4gIH1cbiAgYnl0ZXModDUpIHtcbiAgICBjb25zdCBpMyA9IHQ1Lmxlbmd0aCA+Pj4gMDtcbiAgICByZXR1cm4gaTMgPyB0aGlzLnVpbnQzMihpMykuX3B1c2goZywgaTMsIHQ1KSA6IHRoaXMuX3B1c2god3JpdGVCeXRlLCAxLCAwKTtcbiAgfVxuICBzdHJpbmcoaTMpIHtcbiAgICBjb25zdCBlMiA9IHV0ZjhMZW5ndGgoaTMpO1xuICAgIHJldHVybiBlMiA/IHRoaXMudWludDMyKGUyKS5fcHVzaCh1dGY4V3JpdGUsIGUyLCBpMykgOiB0aGlzLl9wdXNoKHdyaXRlQnl0ZSwgMSwgMCk7XG4gIH1cbn07XG5mdW5jdGlvbiBnKHQ1LCBpMywgczMpIHtcbiAgaWYgKFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFVpbnQ4QXJyYXkpIGkzLnNldCh0NSwgczMpO1xuICBlbHNlIGZvciAobGV0IGUyID0gMDsgZTIgPCB0NS5sZW5ndGg7ICsrZTIpIGkzW3MzICsgZTJdID0gdDVbZTJdO1xufVxuZnVuY3Rpb24gQih0NSwgaTMpIHtcbiAgcmV0dXJuIFJhbmdlRXJyb3IoXCJpbmRleCBvdXQgb2YgcmFuZ2U6IFwiICsgdDUucG9zICsgXCIgKyBcIiArIChpMyB8fCAxKSArIFwiID4gXCIgKyB0NS5sZW4pO1xufVxuXG4vKiAuLi9jb3NtaWMtcHJvdG8vZGlzdC9jb2RlZ2VuL2hlbHBlcnMuanMqL1xuZnVuY3Rpb24gaXNTZXQodDUpIHtcbiAgcmV0dXJuIG51bGwgIT0gdDU7XG59XG5mdW5jdGlvbiB0b1RpbWVzdGFtcCh0NSkge1xuICB2YXIgbjI7XG4gIHJldHVybiB7IHNlY29uZHM6IChuMiA9IHQ1LmdldFRpbWUoKSAvIDFlMywgQmlnSW50KE1hdGgudHJ1bmMobjIpKSksIG5hbm9zOiB0NS5nZXRUaW1lKCkgJSAxZTMgKiAxZTYgfTtcbn1cbmZ1bmN0aW9uIGZyb21UaW1lc3RhbXAodDUpIHtcbiAgbGV0IG4yID0gMWUzICogTnVtYmVyKHQ1LnNlY29uZHMpO1xuICByZXR1cm4gbjIgKz0gdDUubmFub3MgLyAxZTYsIG5ldyBEYXRlKG4yKTtcbn1cbmZ1bmN0aW9uIGZyb21Kc29uVGltZXN0YW1wKHQ1KSB7XG4gIHJldHVybiB0NSBpbnN0YW5jZW9mIERhdGUgPyB0b1RpbWVzdGFtcCh0NSkgOiBcInN0cmluZ1wiID09IHR5cGVvZiB0NSA/IHRvVGltZXN0YW1wKG5ldyBEYXRlKHQ1KSkgOiB7IHNlY29uZHM6IGlzU2V0KChuMiA9IHQ1KS5zZWNvbmRzKSA/IEJpZ0ludChuMi5zZWNvbmRzLnRvU3RyaW5nKCkpIDogQmlnSW50KDApLCBuYW5vczogaXNTZXQobjIubmFub3MpID8gTnVtYmVyKG4yLm5hbm9zKSA6IDAgfTtcbiAgdmFyIG4yO1xufVxuXG4vKiAuLi9jb3NtaWMtcHJvdG8vZGlzdC9jb2RlZ2VuL2dvb2dsZS9wcm90b2J1Zi9hbnkuanMqL1xuZnVuY3Rpb24gbCgpIHtcbiAgcmV0dXJuIHsgJHR5cGVVcmw6IFwiL2dvb2dsZS5wcm90b2J1Zi5BbnlcIiwgdHlwZVVybDogXCJcIiwgdmFsdWU6IG5ldyBVaW50OEFycmF5KCkgfTtcbn1cbnZhciBBbnkgPSB7IHR5cGVVcmw6IFwiL2dvb2dsZS5wcm90b2J1Zi5BbnlcIiwgZW5jb2RlOiAoZTIsIG8yID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAoXCJcIiAhPT0gZTIudHlwZVVybCAmJiBvMi51aW50MzIoMTApLnN0cmluZyhlMi50eXBlVXJsKSwgMCAhPT0gZTIudmFsdWUubGVuZ3RoICYmIG8yLnVpbnQzMigxOCkuYnl0ZXMoZTIudmFsdWUpLCBvMiksIGRlY29kZShyNiwgbzIpIHtcbiAgY29uc3QgdDUgPSByNiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IHI2IDogbmV3IEJpbmFyeVJlYWRlcihyNik7XG4gIGxldCBuMiA9IHZvaWQgMCA9PT0gbzIgPyB0NS5sZW4gOiB0NS5wb3MgKyBvMjtcbiAgY29uc3QgYTIgPSBsKCk7XG4gIGZvciAoOyB0NS5wb3MgPCBuMjsgKSB7XG4gICAgY29uc3QgZTIgPSB0NS51aW50MzIoKTtcbiAgICBzd2l0Y2ggKGUyID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGEyLnR5cGVVcmwgPSB0NS5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGEyLnZhbHVlID0gdDUuYnl0ZXMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0NS5za2lwVHlwZSg3ICYgZTIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYTI7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyB0eXBlVXJsOiBpc1NldChlMi50eXBlVXJsKSA/IFN0cmluZyhlMi50eXBlVXJsKSA6IFwiXCIsIHZhbHVlOiBpc1NldChlMi52YWx1ZSkgPyBkZWNvZGVCYXNlNjQoZTIudmFsdWUpIDogbmV3IFVpbnQ4QXJyYXkoKSB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IHI2ID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLnR5cGVVcmwgJiYgKHI2LnR5cGVVcmwgPSBlMi50eXBlVXJsKSwgdm9pZCAwICE9PSBlMi52YWx1ZSAmJiAocjYudmFsdWUgPSBlbmNvZGVCYXNlNjQodm9pZCAwICE9PSBlMi52YWx1ZSA/IGUyLnZhbHVlIDogbmV3IFVpbnQ4QXJyYXkoKSkpLCByNjtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IHI2ID0gbCgpO1xuICByZXR1cm4gcjYudHlwZVVybCA9IGUyLnR5cGVVcmwgPz8gXCJcIiwgcjYudmFsdWUgPSBlMi52YWx1ZSA/PyBuZXcgVWludDhBcnJheSgpLCByNjtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBBbnkuZGVjb2RlKGUyLnZhbHVlKSwgdG9Qcm90bzogKGUyKSA9PiBBbnkuZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9nb29nbGUucHJvdG9idWYuQW55XCIsIHZhbHVlOiBBbnkuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xuXG4vKiAuLi9jb3NtaWMtcHJvdG8vZGlzdC9jb2RlZ2VuL2Nvc21vcy90eC9zaWduaW5nL3YxYmV0YTEvc2lnbmluZy5qcyovXG52YXIgU2lnbk1vZGU7XG4hKGZ1bmN0aW9uKGUyKSB7XG4gIGUyW2UyLlNJR05fTU9ERV9VTlNQRUNJRklFRCA9IDBdID0gXCJTSUdOX01PREVfVU5TUEVDSUZJRURcIiwgZTJbZTIuU0lHTl9NT0RFX0RJUkVDVCA9IDFdID0gXCJTSUdOX01PREVfRElSRUNUXCIsIGUyW2UyLlNJR05fTU9ERV9URVhUVUFMID0gMl0gPSBcIlNJR05fTU9ERV9URVhUVUFMXCIsIGUyW2UyLlNJR05fTU9ERV9ESVJFQ1RfQVVYID0gM10gPSBcIlNJR05fTU9ERV9ESVJFQ1RfQVVYXCIsIGUyW2UyLlNJR05fTU9ERV9MRUdBQ1lfQU1JTk9fSlNPTiA9IDEyN10gPSBcIlNJR05fTU9ERV9MRUdBQ1lfQU1JTk9fSlNPTlwiLCBlMltlMi5TSUdOX01PREVfRUlQXzE5MSA9IDE5MV0gPSBcIlNJR05fTU9ERV9FSVBfMTkxXCIsIGUyW2UyLlVOUkVDT0dOSVpFRCA9IC0xXSA9IFwiVU5SRUNPR05JWkVEXCI7XG59KShTaWduTW9kZSB8fCAoU2lnbk1vZGUgPSB7fSkpO1xuXG4vKiAuLi9jb3NtaWMtcHJvdG8vZGlzdC9jb2RlZ2VuL2RlY2ltYWxzLmpzKi9cbnZhciBEZWNpbWFsID0gY2xhc3MgX0RlY2ltYWwge1xuICBzdGF0aWMgZnJvbVVzZXJJbnB1dCh0NSwgaTMpIHtcbiAgICBfRGVjaW1hbC52ZXJpZnlGcmFjdGlvbmFsRGlnaXRzKGkzKTtcbiAgICBjb25zdCByNiA9IHQ1Lm1hdGNoKC9bXjAtOS5dLyk7XG4gICAgaWYgKHI2KSB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgY2hhcmFjdGVyIGF0IHBvc2l0aW9uICR7cjYuaW5kZXggKyAxfWApO1xuICAgIGxldCBhMiwgZTI7XG4gICAgaWYgKFwiXCIgPT09IHQ1KSBhMiA9IFwiMFwiLCBlMiA9IFwiXCI7XG4gICAgZWxzZSBpZiAoLTEgPT09IHQ1LnNlYXJjaCgvXFwuLykpIGEyID0gdDUsIGUyID0gXCJcIjtcbiAgICBlbHNlIHtcbiAgICAgIGNvbnN0IGk0ID0gdDUuc3BsaXQoXCIuXCIpO1xuICAgICAgc3dpdGNoIChpNC5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmV3ZXIgdGhhbiB0d28gZWxlbWVudHMgaW4gc3BsaXQgcmVzdWx0LiBUaGlzIG11c3Qgbm90IGhhcHBlbiBoZXJlLlwiKTtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGlmICghaTRbMV0pIHRocm93IG5ldyBFcnJvcihcIkZyYWN0aW9uYWwgcGFydCBtaXNzaW5nXCIpO1xuICAgICAgICAgIGEyID0gaTRbMF0sIGUyID0gaTRbMV0ucmVwbGFjZSgvMCskLywgXCJcIik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTW9yZSB0aGFuIG9uZSBzZXBhcmF0b3IgZm91bmRcIik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlMi5sZW5ndGggPiBpMykgdGhyb3cgbmV3IEVycm9yKFwiR290IG1vcmUgZnJhY3Rpb25hbCBkaWdpdHMgdGhhbiBzdXBwb3J0ZWRcIik7XG4gICAgY29uc3QgbjIgPSBgJHthMn0ke2UyLnBhZEVuZChpMywgXCIwXCIpfWA7XG4gICAgcmV0dXJuIG5ldyBfRGVjaW1hbChuMiwgaTMpO1xuICB9XG4gIHN0YXRpYyBmcm9tQXRvbWljcyh0NSwgaTMpIHtcbiAgICByZXR1cm4gX0RlY2ltYWwudmVyaWZ5RnJhY3Rpb25hbERpZ2l0cyhpMyksIG5ldyBfRGVjaW1hbCh0NSwgaTMpO1xuICB9XG4gIHN0YXRpYyB2ZXJpZnlGcmFjdGlvbmFsRGlnaXRzKHQ1KSB7XG4gICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHQ1KSkgdGhyb3cgbmV3IEVycm9yKFwiRnJhY3Rpb25hbCBkaWdpdHMgaXMgbm90IGFuIGludGVnZXJcIik7XG4gICAgaWYgKHQ1IDwgMCkgdGhyb3cgbmV3IEVycm9yKFwiRnJhY3Rpb25hbCBkaWdpdHMgbXVzdCBub3QgYmUgbmVnYXRpdmVcIik7XG4gICAgaWYgKHQ1ID4gMzApIHRocm93IG5ldyBFcnJvcihcIkZyYWN0aW9uYWwgZGlnaXRzIG11c3Qgbm90IGV4Y2VlZCAzMFwiKTtcbiAgfVxuICBnZXQgYXRvbWljcygpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLmF0b21pY3MudG9TdHJpbmcoKTtcbiAgfVxuICBnZXQgZnJhY3Rpb25hbERpZ2l0cygpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhLmZyYWN0aW9uYWxEaWdpdHM7XG4gIH1cbiAgZGF0YTtcbiAgY29uc3RydWN0b3IodDUsIGkzKSB7XG4gICAgaWYgKCF0NS5tYXRjaCgvXlswLTldKyQvKSkgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzdHJpbmcgZm9ybWF0LiBPbmx5IG5vbi1uZWdhdGl2ZSBpbnRlZ2VycyBpbiBkZWNpbWFsIHJlcHJlc2VudGF0aW9uIHN1cHBvcnRlZC5cIik7XG4gICAgdGhpcy5kYXRhID0geyBhdG9taWNzOiBCaWdJbnQodDUpLCBmcmFjdGlvbmFsRGlnaXRzOiBpMyB9O1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIGNvbnN0IHQ1ID0gQmlnSW50KDEwKSAqKiBCaWdJbnQodGhpcy5kYXRhLmZyYWN0aW9uYWxEaWdpdHMpLCBpMyA9IHRoaXMuZGF0YS5hdG9taWNzIC8gdDUsIHI2ID0gdGhpcy5kYXRhLmF0b21pY3MgJSB0NTtcbiAgICBpZiAoMG4gPT09IHI2KSByZXR1cm4gaTMudG9TdHJpbmcoKTtcbiAgICB7XG4gICAgICBjb25zdCB0NiA9IHI2LnRvU3RyaW5nKCkucGFkU3RhcnQodGhpcy5kYXRhLmZyYWN0aW9uYWxEaWdpdHMsIFwiMFwiKS5yZXBsYWNlKC8wKyQvLCBcIlwiKTtcbiAgICAgIHJldHVybiBgJHtpMy50b1N0cmluZygpfS4ke3Q2fWA7XG4gICAgfVxuICB9XG59O1xuXG4vKiAuLi9jb3NtaWMtcHJvdG8vZGlzdC9jb2RlZ2VuL2Nvc21vcy9iYXNlL3YxYmV0YTEvY29pbi5qcyovXG52YXIgQ29pbiA9IHsgdHlwZVVybDogXCIvY29zbW9zLmJhc2UudjFiZXRhMS5Db2luXCIsIGVuY29kZTogKG8yLCBuMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKFwiXCIgIT09IG8yLmRlbm9tICYmIG4yLnVpbnQzMigxMCkuc3RyaW5nKG8yLmRlbm9tKSwgXCJcIiAhPT0gbzIuYW1vdW50ICYmIG4yLnVpbnQzMigxOCkuc3RyaW5nKG8yLmFtb3VudCksIG4yKSwgZGVjb2RlKHQ1LCBuMikge1xuICBjb25zdCBlMiA9IHQ1IGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gdDUgOiBuZXcgQmluYXJ5UmVhZGVyKHQ1KTtcbiAgbGV0IHI2ID0gdm9pZCAwID09PSBuMiA/IGUyLmxlbiA6IGUyLnBvcyArIG4yO1xuICBjb25zdCBzMyA9IHsgZGVub206IFwiXCIsIGFtb3VudDogXCJcIiB9O1xuICBmb3IgKDsgZTIucG9zIDwgcjY7ICkge1xuICAgIGNvbnN0IG8yID0gZTIudWludDMyKCk7XG4gICAgc3dpdGNoIChvMiA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBzMy5kZW5vbSA9IGUyLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgczMuYW1vdW50ID0gZTIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZTIuc2tpcFR5cGUoNyAmIG8yKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHMzO1xufSwgZnJvbUpTT046IChvMikgPT4gKHsgZGVub206IGlzU2V0KG8yLmRlbm9tKSA/IFN0cmluZyhvMi5kZW5vbSkgOiBcIlwiLCBhbW91bnQ6IGlzU2V0KG8yLmFtb3VudCkgPyBTdHJpbmcobzIuYW1vdW50KSA6IFwiXCIgfSksIHRvSlNPTihvMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBvMi5kZW5vbSAmJiAodDUuZGVub20gPSBvMi5kZW5vbSksIHZvaWQgMCAhPT0gbzIuYW1vdW50ICYmICh0NS5hbW91bnQgPSBvMi5hbW91bnQpLCB0NTtcbn0sIGZyb21QYXJ0aWFsKG8yKSB7XG4gIGNvbnN0IHQ1ID0geyBkZW5vbTogXCJcIiwgYW1vdW50OiBcIlwiIH07XG4gIHJldHVybiB0NS5kZW5vbSA9IG8yLmRlbm9tID8/IFwiXCIsIHQ1LmFtb3VudCA9IG8yLmFtb3VudCA/PyBcIlwiLCB0NTtcbn0sIGZyb21Qcm90b01zZzogKG8yKSA9PiBDb2luLmRlY29kZShvMi52YWx1ZSksIHRvUHJvdG86IChvMikgPT4gQ29pbi5lbmNvZGUobzIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAobzIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5iYXNlLnYxYmV0YTEuQ29pblwiLCB2YWx1ZTogQ29pbi5lbmNvZGUobzIpLmZpbmlzaCgpIH0pIH07XG52YXIgRGVjQ29pbiA9IHsgdHlwZVVybDogXCIvY29zbW9zLmJhc2UudjFiZXRhMS5EZWNDb2luXCIsIGVuY29kZTogKG8yLCBuMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKFwiXCIgIT09IG8yLmRlbm9tICYmIG4yLnVpbnQzMigxMCkuc3RyaW5nKG8yLmRlbm9tKSwgXCJcIiAhPT0gbzIuYW1vdW50ICYmIG4yLnVpbnQzMigxOCkuc3RyaW5nKERlY2ltYWwuZnJvbVVzZXJJbnB1dChvMi5hbW91bnQsIDE4KS5hdG9taWNzKSwgbjIpLCBkZWNvZGUodDUsIG4yKSB7XG4gIGNvbnN0IHI2ID0gdDUgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyB0NSA6IG5ldyBCaW5hcnlSZWFkZXIodDUpO1xuICBsZXQgczMgPSB2b2lkIDAgPT09IG4yID8gcjYubGVuIDogcjYucG9zICsgbjI7XG4gIGNvbnN0IGkzID0geyBkZW5vbTogXCJcIiwgYW1vdW50OiBcIlwiIH07XG4gIGZvciAoOyByNi5wb3MgPCBzMzsgKSB7XG4gICAgY29uc3QgbzIgPSByNi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKG8yID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGkzLmRlbm9tID0gcjYuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBpMy5hbW91bnQgPSBEZWNpbWFsLmZyb21BdG9taWNzKHI2LnN0cmluZygpLCAxOCkudG9TdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByNi5za2lwVHlwZSg3ICYgbzIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTM7XG59LCBmcm9tSlNPTjogKG8yKSA9PiAoeyBkZW5vbTogaXNTZXQobzIuZGVub20pID8gU3RyaW5nKG8yLmRlbm9tKSA6IFwiXCIsIGFtb3VudDogaXNTZXQobzIuYW1vdW50KSA/IFN0cmluZyhvMi5hbW91bnQpIDogXCJcIiB9KSwgdG9KU09OKG8yKSB7XG4gIGNvbnN0IHQ1ID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IG8yLmRlbm9tICYmICh0NS5kZW5vbSA9IG8yLmRlbm9tKSwgdm9pZCAwICE9PSBvMi5hbW91bnQgJiYgKHQ1LmFtb3VudCA9IG8yLmFtb3VudCksIHQ1O1xufSwgZnJvbVBhcnRpYWwobzIpIHtcbiAgY29uc3QgdDUgPSB7IGRlbm9tOiBcIlwiLCBhbW91bnQ6IFwiXCIgfTtcbiAgcmV0dXJuIHQ1LmRlbm9tID0gbzIuZGVub20gPz8gXCJcIiwgdDUuYW1vdW50ID0gbzIuYW1vdW50ID8/IFwiXCIsIHQ1O1xufSwgZnJvbVByb3RvTXNnOiAobzIpID0+IERlY0NvaW4uZGVjb2RlKG8yLnZhbHVlKSwgdG9Qcm90bzogKG8yKSA9PiBEZWNDb2luLmVuY29kZShvMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChvMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLmJhc2UudjFiZXRhMS5EZWNDb2luXCIsIHZhbHVlOiBEZWNDb2luLmVuY29kZShvMikuZmluaXNoKCkgfSkgfTtcblxuLyogLi4vY29zbWljLXByb3RvL2Rpc3QvY29kZWdlbi9jb3Ntb3MvdHgvdjFiZXRhMS90eC5qcyovXG5mdW5jdGlvbiBnMigpIHtcbiAgcmV0dXJuIHsgbWVzc2FnZXM6IFtdLCBtZW1vOiBcIlwiLCB0aW1lb3V0SGVpZ2h0OiBCaWdJbnQoMCksIGV4dGVuc2lvbk9wdGlvbnM6IFtdLCBub25Dcml0aWNhbEV4dGVuc2lvbk9wdGlvbnM6IFtdIH07XG59XG52YXIgVHhCb2R5ID0geyB0eXBlVXJsOiBcIi9jb3Ntb3MudHgudjFiZXRhMS5UeEJvZHlcIiwgZW5jb2RlKGUyLCB0NSA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkge1xuICBmb3IgKGNvbnN0IG4yIG9mIGUyLm1lc3NhZ2VzKSBBbnkuZW5jb2RlKG4yLCB0NS51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gIFwiXCIgIT09IGUyLm1lbW8gJiYgdDUudWludDMyKDE4KS5zdHJpbmcoZTIubWVtbyksIGUyLnRpbWVvdXRIZWlnaHQgIT09IEJpZ0ludCgwKSAmJiB0NS51aW50MzIoMjQpLnVpbnQ2NChlMi50aW1lb3V0SGVpZ2h0KTtcbiAgZm9yIChjb25zdCBuMiBvZiBlMi5leHRlbnNpb25PcHRpb25zKSBBbnkuZW5jb2RlKG4yLCB0NS51aW50MzIoODE4NikuZm9yaygpKS5sZGVsaW0oKTtcbiAgZm9yIChjb25zdCBuMiBvZiBlMi5ub25Dcml0aWNhbEV4dGVuc2lvbk9wdGlvbnMpIEFueS5lbmNvZGUobjIsIHQ1LnVpbnQzMigxNjM3OCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgcmV0dXJuIHQ1O1xufSwgZGVjb2RlKGUyLCB0NSkge1xuICBjb25zdCBuMiA9IGUyIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gZTIgOiBuZXcgQmluYXJ5UmVhZGVyKGUyKTtcbiAgbGV0IGkzID0gdm9pZCAwID09PSB0NSA/IG4yLmxlbiA6IG4yLnBvcyArIHQ1O1xuICBjb25zdCByNiA9IGcyKCk7XG4gIGZvciAoOyBuMi5wb3MgPCBpMzsgKSB7XG4gICAgY29uc3QgZTMgPSBuMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKGUzID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHI2Lm1lc3NhZ2VzLnB1c2goQW55LmRlY29kZShuMiwgbjIudWludDMyKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHI2Lm1lbW8gPSBuMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHI2LnRpbWVvdXRIZWlnaHQgPSBuMi51aW50NjQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEwMjM6XG4gICAgICAgIHI2LmV4dGVuc2lvbk9wdGlvbnMucHVzaChBbnkuZGVjb2RlKG4yLCBuMi51aW50MzIoKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjA0NzpcbiAgICAgICAgcjYubm9uQ3JpdGljYWxFeHRlbnNpb25PcHRpb25zLnB1c2goQW55LmRlY29kZShuMiwgbjIudWludDMyKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBuMi5za2lwVHlwZSg3ICYgZTMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcjY7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyBtZXNzYWdlczogQXJyYXkuaXNBcnJheShlMj8ubWVzc2FnZXMpID8gZTIubWVzc2FnZXMubWFwKCgoZTMpID0+IEFueS5mcm9tSlNPTihlMykpKSA6IFtdLCBtZW1vOiBpc1NldChlMi5tZW1vKSA/IFN0cmluZyhlMi5tZW1vKSA6IFwiXCIsIHRpbWVvdXRIZWlnaHQ6IGlzU2V0KGUyLnRpbWVvdXRIZWlnaHQpID8gQmlnSW50KGUyLnRpbWVvdXRIZWlnaHQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIGV4dGVuc2lvbk9wdGlvbnM6IEFycmF5LmlzQXJyYXkoZTI/LmV4dGVuc2lvbk9wdGlvbnMpID8gZTIuZXh0ZW5zaW9uT3B0aW9ucy5tYXAoKChlMykgPT4gQW55LmZyb21KU09OKGUzKSkpIDogW10sIG5vbkNyaXRpY2FsRXh0ZW5zaW9uT3B0aW9uczogQXJyYXkuaXNBcnJheShlMj8ubm9uQ3JpdGljYWxFeHRlbnNpb25PcHRpb25zKSA/IGUyLm5vbkNyaXRpY2FsRXh0ZW5zaW9uT3B0aW9ucy5tYXAoKChlMykgPT4gQW55LmZyb21KU09OKGUzKSkpIDogW10gfSksIHRvSlNPTihlMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gZTIubWVzc2FnZXMgPyB0NS5tZXNzYWdlcyA9IGUyLm1lc3NhZ2VzLm1hcCgoKGUzKSA9PiBlMyA/IEFueS50b0pTT04oZTMpIDogdm9pZCAwKSkgOiB0NS5tZXNzYWdlcyA9IFtdLCB2b2lkIDAgIT09IGUyLm1lbW8gJiYgKHQ1Lm1lbW8gPSBlMi5tZW1vKSwgdm9pZCAwICE9PSBlMi50aW1lb3V0SGVpZ2h0ICYmICh0NS50aW1lb3V0SGVpZ2h0ID0gKGUyLnRpbWVvdXRIZWlnaHQgfHwgQmlnSW50KDApKS50b1N0cmluZygpKSwgZTIuZXh0ZW5zaW9uT3B0aW9ucyA/IHQ1LmV4dGVuc2lvbk9wdGlvbnMgPSBlMi5leHRlbnNpb25PcHRpb25zLm1hcCgoKGUzKSA9PiBlMyA/IEFueS50b0pTT04oZTMpIDogdm9pZCAwKSkgOiB0NS5leHRlbnNpb25PcHRpb25zID0gW10sIGUyLm5vbkNyaXRpY2FsRXh0ZW5zaW9uT3B0aW9ucyA/IHQ1Lm5vbkNyaXRpY2FsRXh0ZW5zaW9uT3B0aW9ucyA9IGUyLm5vbkNyaXRpY2FsRXh0ZW5zaW9uT3B0aW9ucy5tYXAoKChlMykgPT4gZTMgPyBBbnkudG9KU09OKGUzKSA6IHZvaWQgMCkpIDogdDUubm9uQ3JpdGljYWxFeHRlbnNpb25PcHRpb25zID0gW10sIHQ1O1xufSwgZnJvbVBhcnRpYWwoZTIpIHtcbiAgY29uc3QgdDUgPSBnMigpO1xuICByZXR1cm4gdDUubWVzc2FnZXMgPSBlMi5tZXNzYWdlcz8ubWFwKCgoZTMpID0+IEFueS5mcm9tUGFydGlhbChlMykpKSB8fCBbXSwgdDUubWVtbyA9IGUyLm1lbW8gPz8gXCJcIiwgdDUudGltZW91dEhlaWdodCA9IHZvaWQgMCAhPT0gZTIudGltZW91dEhlaWdodCAmJiBudWxsICE9PSBlMi50aW1lb3V0SGVpZ2h0ID8gQmlnSW50KGUyLnRpbWVvdXRIZWlnaHQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIHQ1LmV4dGVuc2lvbk9wdGlvbnMgPSBlMi5leHRlbnNpb25PcHRpb25zPy5tYXAoKChlMykgPT4gQW55LmZyb21QYXJ0aWFsKGUzKSkpIHx8IFtdLCB0NS5ub25Dcml0aWNhbEV4dGVuc2lvbk9wdGlvbnMgPSBlMi5ub25Dcml0aWNhbEV4dGVuc2lvbk9wdGlvbnM/Lm1hcCgoKGUzKSA9PiBBbnkuZnJvbVBhcnRpYWwoZTMpKSkgfHwgW10sIHQ1O1xufSwgZnJvbVByb3RvTXNnOiAobzIpID0+IFR4Qm9keS5kZWNvZGUobzIudmFsdWUpLCB0b1Byb3RvOiAobzIpID0+IFR4Qm9keS5lbmNvZGUobzIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAobzIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy50eC52MWJldGExLlR4Qm9keVwiLCB2YWx1ZTogVHhCb2R5LmVuY29kZShvMikuZmluaXNoKCkgfSkgfTtcblxuLyogLi4vY29zbWljLXByb3RvL2Rpc3QvY29kZWdlbi9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLmpzKi9cbmZ1bmN0aW9uIHQyKCkge1xuICByZXR1cm4geyBzZWNvbmRzOiBCaWdJbnQoMCksIG5hbm9zOiAwIH07XG59XG52YXIgVGltZXN0YW1wID0geyB0eXBlVXJsOiBcIi9nb29nbGUucHJvdG9idWYuVGltZXN0YW1wXCIsIGVuY29kZTogKG4yLCBzMyA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKG4yLnNlY29uZHMgIT09IEJpZ0ludCgwKSAmJiBzMy51aW50MzIoOCkuaW50NjQobjIuc2Vjb25kcyksIDAgIT09IG4yLm5hbm9zICYmIHMzLnVpbnQzMigxNikuaW50MzIobjIubmFub3MpLCBzMyksIGRlY29kZShvMiwgczMpIHtcbiAgY29uc3QgZTIgPSBvMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IG8yIDogbmV3IEJpbmFyeVJlYWRlcihvMik7XG4gIGxldCBpMyA9IHZvaWQgMCA9PT0gczMgPyBlMi5sZW4gOiBlMi5wb3MgKyBzMztcbiAgY29uc3QgcjYgPSB0MigpO1xuICBmb3IgKDsgZTIucG9zIDwgaTM7ICkge1xuICAgIGNvbnN0IG4yID0gZTIudWludDMyKCk7XG4gICAgc3dpdGNoIChuMiA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByNi5zZWNvbmRzID0gZTIuaW50NjQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHI2Lm5hbm9zID0gZTIuaW50MzIoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlMi5za2lwVHlwZSg3ICYgbjIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcjY7XG59LCBmcm9tSlNPTjogKG4yKSA9PiAoeyBzZWNvbmRzOiBpc1NldChuMi5zZWNvbmRzKSA/IEJpZ0ludChuMi5zZWNvbmRzLnRvU3RyaW5nKCkpIDogQmlnSW50KDApLCBuYW5vczogaXNTZXQobjIubmFub3MpID8gTnVtYmVyKG4yLm5hbm9zKSA6IDAgfSksIHRvSlNPTihuMikge1xuICBjb25zdCBvMiA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBuMi5zZWNvbmRzICYmIChvMi5zZWNvbmRzID0gKG4yLnNlY29uZHMgfHwgQmlnSW50KDApKS50b1N0cmluZygpKSwgdm9pZCAwICE9PSBuMi5uYW5vcyAmJiAobzIubmFub3MgPSBNYXRoLnJvdW5kKG4yLm5hbm9zKSksIG8yO1xufSwgZnJvbVBhcnRpYWwobjIpIHtcbiAgY29uc3QgbzIgPSB0MigpO1xuICByZXR1cm4gbzIuc2Vjb25kcyA9IHZvaWQgMCAhPT0gbjIuc2Vjb25kcyAmJiBudWxsICE9PSBuMi5zZWNvbmRzID8gQmlnSW50KG4yLnNlY29uZHMudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIG8yLm5hbm9zID0gbjIubmFub3MgPz8gMCwgbzI7XG59LCBmcm9tUHJvdG9Nc2c6IChuMikgPT4gVGltZXN0YW1wLmRlY29kZShuMi52YWx1ZSksIHRvUHJvdG86IChuMikgPT4gVGltZXN0YW1wLmVuY29kZShuMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChuMikgPT4gKHsgdHlwZVVybDogXCIvZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcFwiLCB2YWx1ZTogVGltZXN0YW1wLmVuY29kZShuMikuZmluaXNoKCkgfSkgfTtcblxuLyogLi4vY29zbWljLXByb3RvL2Rpc3QvY29kZWdlbi90ZW5kZXJtaW50L2NyeXB0by9wcm9vZi5qcyovXG5mdW5jdGlvbiBzKCkge1xuICByZXR1cm4geyB0eXBlOiBcIlwiLCBrZXk6IG5ldyBVaW50OEFycmF5KCksIGRhdGE6IG5ldyBVaW50OEFycmF5KCkgfTtcbn1cbnZhciBQcm9vZk9wID0geyB0eXBlVXJsOiBcIi90ZW5kZXJtaW50LmNyeXB0by5Qcm9vZk9wXCIsIGVuY29kZTogKHQ1LCBlMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKFwiXCIgIT09IHQ1LnR5cGUgJiYgZTIudWludDMyKDEwKS5zdHJpbmcodDUudHlwZSksIDAgIT09IHQ1LmtleS5sZW5ndGggJiYgZTIudWludDMyKDE4KS5ieXRlcyh0NS5rZXkpLCAwICE9PSB0NS5kYXRhLmxlbmd0aCAmJiBlMi51aW50MzIoMjYpLmJ5dGVzKHQ1LmRhdGEpLCBlMiksIGRlY29kZShvMiwgZTIpIHtcbiAgY29uc3QgbjIgPSBvMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IG8yIDogbmV3IEJpbmFyeVJlYWRlcihvMik7XG4gIGxldCByNiA9IHZvaWQgMCA9PT0gZTIgPyBuMi5sZW4gOiBuMi5wb3MgKyBlMjtcbiAgY29uc3QgaTMgPSBzKCk7XG4gIGZvciAoOyBuMi5wb3MgPCByNjsgKSB7XG4gICAgY29uc3QgdDUgPSBuMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKHQ1ID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGkzLnR5cGUgPSBuMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGkzLmtleSA9IG4yLmJ5dGVzKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBpMy5kYXRhID0gbjIuYnl0ZXMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBuMi5za2lwVHlwZSg3ICYgdDUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTM7XG59LCBmcm9tSlNPTjogKHQ1KSA9PiAoeyB0eXBlOiBpc1NldCh0NS50eXBlKSA/IFN0cmluZyh0NS50eXBlKSA6IFwiXCIsIGtleTogaXNTZXQodDUua2V5KSA/IGRlY29kZUJhc2U2NCh0NS5rZXkpIDogbmV3IFVpbnQ4QXJyYXkoKSwgZGF0YTogaXNTZXQodDUuZGF0YSkgPyBkZWNvZGVCYXNlNjQodDUuZGF0YSkgOiBuZXcgVWludDhBcnJheSgpIH0pLCB0b0pTT04odDUpIHtcbiAgY29uc3QgbzIgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gdDUudHlwZSAmJiAobzIudHlwZSA9IHQ1LnR5cGUpLCB2b2lkIDAgIT09IHQ1LmtleSAmJiAobzIua2V5ID0gZW5jb2RlQmFzZTY0KHZvaWQgMCAhPT0gdDUua2V5ID8gdDUua2V5IDogbmV3IFVpbnQ4QXJyYXkoKSkpLCB2b2lkIDAgIT09IHQ1LmRhdGEgJiYgKG8yLmRhdGEgPSBlbmNvZGVCYXNlNjQodm9pZCAwICE9PSB0NS5kYXRhID8gdDUuZGF0YSA6IG5ldyBVaW50OEFycmF5KCkpKSwgbzI7XG59LCBmcm9tUGFydGlhbCh0NSkge1xuICBjb25zdCBvMiA9IHMoKTtcbiAgcmV0dXJuIG8yLnR5cGUgPSB0NS50eXBlID8/IFwiXCIsIG8yLmtleSA9IHQ1LmtleSA/PyBuZXcgVWludDhBcnJheSgpLCBvMi5kYXRhID0gdDUuZGF0YSA/PyBuZXcgVWludDhBcnJheSgpLCBvMjtcbn0sIGZyb21Qcm90b01zZzogKHQ1KSA9PiBQcm9vZk9wLmRlY29kZSh0NS52YWx1ZSksIHRvUHJvdG86ICh0NSkgPT4gUHJvb2ZPcC5lbmNvZGUodDUpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAodDUpID0+ICh7IHR5cGVVcmw6IFwiL3RlbmRlcm1pbnQuY3J5cHRvLlByb29mT3BcIiwgdmFsdWU6IFByb29mT3AuZW5jb2RlKHQ1KS5maW5pc2goKSB9KSB9O1xudmFyIFByb29mT3BzID0geyB0eXBlVXJsOiBcIi90ZW5kZXJtaW50LmNyeXB0by5Qcm9vZk9wc1wiLCBlbmNvZGUodDUsIGUyID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSB7XG4gIGZvciAoY29uc3QgbzIgb2YgdDUub3BzKSBQcm9vZk9wLmVuY29kZShvMiwgZTIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICByZXR1cm4gZTI7XG59LCBkZWNvZGUobzIsIGUyKSB7XG4gIGNvbnN0IG4yID0gbzIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBvMiA6IG5ldyBCaW5hcnlSZWFkZXIobzIpO1xuICBsZXQgcjYgPSB2b2lkIDAgPT09IGUyID8gbjIubGVuIDogbjIucG9zICsgZTI7XG4gIGNvbnN0IGkzID0geyBvcHM6IFtdIH07XG4gIGZvciAoOyBuMi5wb3MgPCByNjsgKSB7XG4gICAgY29uc3QgdDUgPSBuMi51aW50MzIoKTtcbiAgICBpZiAodDUgPj4+IDMgPT0gMSkgaTMub3BzLnB1c2goUHJvb2ZPcC5kZWNvZGUobjIsIG4yLnVpbnQzMigpKSk7XG4gICAgZWxzZSBuMi5za2lwVHlwZSg3ICYgdDUpO1xuICB9XG4gIHJldHVybiBpMztcbn0sIGZyb21KU09OOiAodDUpID0+ICh7IG9wczogQXJyYXkuaXNBcnJheSh0NT8ub3BzKSA/IHQ1Lm9wcy5tYXAoKCh0NikgPT4gUHJvb2ZPcC5mcm9tSlNPTih0NikpKSA6IFtdIH0pLCB0b0pTT04odDUpIHtcbiAgY29uc3QgbzIgPSB7fTtcbiAgcmV0dXJuIHQ1Lm9wcyA/IG8yLm9wcyA9IHQ1Lm9wcy5tYXAoKCh0NikgPT4gdDYgPyBQcm9vZk9wLnRvSlNPTih0NikgOiB2b2lkIDApKSA6IG8yLm9wcyA9IFtdLCBvMjtcbn0sIGZyb21QYXJ0aWFsKHQ1KSB7XG4gIGNvbnN0IG8yID0geyBvcHM6IFtdIH07XG4gIHJldHVybiBvMi5vcHMgPSB0NS5vcHM/Lm1hcCgoKHQ2KSA9PiBQcm9vZk9wLmZyb21QYXJ0aWFsKHQ2KSkpIHx8IFtdLCBvMjtcbn0sIGZyb21Qcm90b01zZzogKHQ1KSA9PiBQcm9vZk9wcy5kZWNvZGUodDUudmFsdWUpLCB0b1Byb3RvOiAodDUpID0+IFByb29mT3BzLmVuY29kZSh0NSkuZmluaXNoKCksIHRvUHJvdG9Nc2c6ICh0NSkgPT4gKHsgdHlwZVVybDogXCIvdGVuZGVybWludC5jcnlwdG8uUHJvb2ZPcHNcIiwgdmFsdWU6IFByb29mT3BzLmVuY29kZSh0NSkuZmluaXNoKCkgfSkgfTtcblxuLyogLi4vY29zbWljLXByb3RvL2Rpc3QvY29kZWdlbi90ZW5kZXJtaW50L3R5cGVzL3ZhbGlkYXRvci5qcyovXG52YXIgQmxvY2tJREZsYWc7XG4hKGZ1bmN0aW9uKG8yKSB7XG4gIG8yW28yLkJMT0NLX0lEX0ZMQUdfVU5LTk9XTiA9IDBdID0gXCJCTE9DS19JRF9GTEFHX1VOS05PV05cIiwgbzJbbzIuQkxPQ0tfSURfRkxBR19BQlNFTlQgPSAxXSA9IFwiQkxPQ0tfSURfRkxBR19BQlNFTlRcIiwgbzJbbzIuQkxPQ0tfSURfRkxBR19DT01NSVQgPSAyXSA9IFwiQkxPQ0tfSURfRkxBR19DT01NSVRcIiwgbzJbbzIuQkxPQ0tfSURfRkxBR19OSUwgPSAzXSA9IFwiQkxPQ0tfSURfRkxBR19OSUxcIiwgbzJbbzIuVU5SRUNPR05JWkVEID0gLTFdID0gXCJVTlJFQ09HTklaRURcIjtcbn0pKEJsb2NrSURGbGFnIHx8IChCbG9ja0lERmxhZyA9IHt9KSk7XG5cbi8qIC4uL2Nvc21pYy1wcm90by9kaXN0L2NvZGVnZW4vdGVuZGVybWludC9hYmNpL3R5cGVzLmpzKi9cbnZhciBDaGVja1R4VHlwZTtcbiEoZnVuY3Rpb24oZTIpIHtcbiAgZTJbZTIuTkVXID0gMF0gPSBcIk5FV1wiLCBlMltlMi5SRUNIRUNLID0gMV0gPSBcIlJFQ0hFQ0tcIiwgZTJbZTIuVU5SRUNPR05JWkVEID0gLTFdID0gXCJVTlJFQ09HTklaRURcIjtcbn0pKENoZWNrVHhUeXBlIHx8IChDaGVja1R4VHlwZSA9IHt9KSk7XG52YXIgUmVzcG9uc2VPZmZlclNuYXBzaG90X1Jlc3VsdDtcbiEoZnVuY3Rpb24oZTIpIHtcbiAgZTJbZTIuVU5LTk9XTiA9IDBdID0gXCJVTktOT1dOXCIsIGUyW2UyLkFDQ0VQVCA9IDFdID0gXCJBQ0NFUFRcIiwgZTJbZTIuQUJPUlQgPSAyXSA9IFwiQUJPUlRcIiwgZTJbZTIuUkVKRUNUID0gM10gPSBcIlJFSkVDVFwiLCBlMltlMi5SRUpFQ1RfRk9STUFUID0gNF0gPSBcIlJFSkVDVF9GT1JNQVRcIiwgZTJbZTIuUkVKRUNUX1NFTkRFUiA9IDVdID0gXCJSRUpFQ1RfU0VOREVSXCIsIGUyW2UyLlVOUkVDT0dOSVpFRCA9IC0xXSA9IFwiVU5SRUNPR05JWkVEXCI7XG59KShSZXNwb25zZU9mZmVyU25hcHNob3RfUmVzdWx0IHx8IChSZXNwb25zZU9mZmVyU25hcHNob3RfUmVzdWx0ID0ge30pKTtcbnZhciBSZXNwb25zZUFwcGx5U25hcHNob3RDaHVua19SZXN1bHQ7XG4hKGZ1bmN0aW9uKGUyKSB7XG4gIGUyW2UyLlVOS05PV04gPSAwXSA9IFwiVU5LTk9XTlwiLCBlMltlMi5BQ0NFUFQgPSAxXSA9IFwiQUNDRVBUXCIsIGUyW2UyLkFCT1JUID0gMl0gPSBcIkFCT1JUXCIsIGUyW2UyLlJFVFJZID0gM10gPSBcIlJFVFJZXCIsIGUyW2UyLlJFVFJZX1NOQVBTSE9UID0gNF0gPSBcIlJFVFJZX1NOQVBTSE9UXCIsIGUyW2UyLlJFSkVDVF9TTkFQU0hPVCA9IDVdID0gXCJSRUpFQ1RfU05BUFNIT1RcIiwgZTJbZTIuVU5SRUNPR05JWkVEID0gLTFdID0gXCJVTlJFQ09HTklaRURcIjtcbn0pKFJlc3BvbnNlQXBwbHlTbmFwc2hvdENodW5rX1Jlc3VsdCB8fCAoUmVzcG9uc2VBcHBseVNuYXBzaG90Q2h1bmtfUmVzdWx0ID0ge30pKTtcbnZhciBSZXNwb25zZVByb2Nlc3NQcm9wb3NhbF9Qcm9wb3NhbFN0YXR1cztcbiEoZnVuY3Rpb24oZTIpIHtcbiAgZTJbZTIuVU5LTk9XTiA9IDBdID0gXCJVTktOT1dOXCIsIGUyW2UyLkFDQ0VQVCA9IDFdID0gXCJBQ0NFUFRcIiwgZTJbZTIuUkVKRUNUID0gMl0gPSBcIlJFSkVDVFwiLCBlMltlMi5VTlJFQ09HTklaRUQgPSAtMV0gPSBcIlVOUkVDT0dOSVpFRFwiO1xufSkoUmVzcG9uc2VQcm9jZXNzUHJvcG9zYWxfUHJvcG9zYWxTdGF0dXMgfHwgKFJlc3BvbnNlUHJvY2Vzc1Byb3Bvc2FsX1Byb3Bvc2FsU3RhdHVzID0ge30pKTtcbnZhciBSZXNwb25zZVZlcmlmeVZvdGVFeHRlbnNpb25fVmVyaWZ5U3RhdHVzO1xuIShmdW5jdGlvbihlMikge1xuICBlMltlMi5VTktOT1dOID0gMF0gPSBcIlVOS05PV05cIiwgZTJbZTIuQUNDRVBUID0gMV0gPSBcIkFDQ0VQVFwiLCBlMltlMi5SRUpFQ1QgPSAyXSA9IFwiUkVKRUNUXCIsIGUyW2UyLlVOUkVDT0dOSVpFRCA9IC0xXSA9IFwiVU5SRUNPR05JWkVEXCI7XG59KShSZXNwb25zZVZlcmlmeVZvdGVFeHRlbnNpb25fVmVyaWZ5U3RhdHVzIHx8IChSZXNwb25zZVZlcmlmeVZvdGVFeHRlbnNpb25fVmVyaWZ5U3RhdHVzID0ge30pKTtcbnZhciBNaXNiZWhhdmlvclR5cGU7XG4hKGZ1bmN0aW9uKGUyKSB7XG4gIGUyW2UyLlVOS05PV04gPSAwXSA9IFwiVU5LTk9XTlwiLCBlMltlMi5EVVBMSUNBVEVfVk9URSA9IDFdID0gXCJEVVBMSUNBVEVfVk9URVwiLCBlMltlMi5MSUdIVF9DTElFTlRfQVRUQUNLID0gMl0gPSBcIkxJR0hUX0NMSUVOVF9BVFRBQ0tcIiwgZTJbZTIuVU5SRUNPR05JWkVEID0gLTFdID0gXCJVTlJFQ09HTklaRURcIjtcbn0pKE1pc2JlaGF2aW9yVHlwZSB8fCAoTWlzYmVoYXZpb3JUeXBlID0ge30pKTtcbmZ1bmN0aW9uIG0oKSB7XG4gIHJldHVybiB7IGRhdGE6IG5ldyBVaW50OEFycmF5KCksIHBhdGg6IFwiXCIsIGhlaWdodDogQmlnSW50KDApLCBwcm92ZTogZmFsc2UgfTtcbn1cbnZhciBSZXF1ZXN0UXVlcnkgPSB7IHR5cGVVcmw6IFwiL3RlbmRlcm1pbnQuYWJjaS5SZXF1ZXN0UXVlcnlcIiwgZW5jb2RlOiAoZTIsIHQ1ID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAoMCAhPT0gZTIuZGF0YS5sZW5ndGggJiYgdDUudWludDMyKDEwKS5ieXRlcyhlMi5kYXRhKSwgXCJcIiAhPT0gZTIucGF0aCAmJiB0NS51aW50MzIoMTgpLnN0cmluZyhlMi5wYXRoKSwgZTIuaGVpZ2h0ICE9PSBCaWdJbnQoMCkgJiYgdDUudWludDMyKDI0KS5pbnQ2NChlMi5oZWlnaHQpLCB0cnVlID09PSBlMi5wcm92ZSAmJiB0NS51aW50MzIoMzIpLmJvb2woZTIucHJvdmUpLCB0NSksIGRlY29kZShlMiwgdDUpIHtcbiAgY29uc3QgbzIgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCBzMyA9IHZvaWQgMCA9PT0gdDUgPyBvMi5sZW4gOiBvMi5wb3MgKyB0NTtcbiAgY29uc3QgbjIgPSBtKCk7XG4gIGZvciAoOyBvMi5wb3MgPCBzMzsgKSB7XG4gICAgY29uc3QgZTMgPSBvMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKGUzID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIG4yLmRhdGEgPSBvMi5ieXRlcygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgbjIucGF0aCA9IG8yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgbjIuaGVpZ2h0ID0gbzIuaW50NjQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIG4yLnByb3ZlID0gbzIuYm9vbCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG8yLnNraXBUeXBlKDcgJiBlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuMjtcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IGRhdGE6IGlzU2V0KGUyLmRhdGEpID8gZGVjb2RlQmFzZTY0KGUyLmRhdGEpIDogbmV3IFVpbnQ4QXJyYXkoKSwgcGF0aDogaXNTZXQoZTIucGF0aCkgPyBTdHJpbmcoZTIucGF0aCkgOiBcIlwiLCBoZWlnaHQ6IGlzU2V0KGUyLmhlaWdodCkgPyBCaWdJbnQoZTIuaGVpZ2h0LnRvU3RyaW5nKCkpIDogQmlnSW50KDApLCBwcm92ZTogISFpc1NldChlMi5wcm92ZSkgJiYgQm9vbGVhbihlMi5wcm92ZSkgfSksIHRvSlNPTihlMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5kYXRhICYmICh0NS5kYXRhID0gZW5jb2RlQmFzZTY0KHZvaWQgMCAhPT0gZTIuZGF0YSA/IGUyLmRhdGEgOiBuZXcgVWludDhBcnJheSgpKSksIHZvaWQgMCAhPT0gZTIucGF0aCAmJiAodDUucGF0aCA9IGUyLnBhdGgpLCB2b2lkIDAgIT09IGUyLmhlaWdodCAmJiAodDUuaGVpZ2h0ID0gKGUyLmhlaWdodCB8fCBCaWdJbnQoMCkpLnRvU3RyaW5nKCkpLCB2b2lkIDAgIT09IGUyLnByb3ZlICYmICh0NS5wcm92ZSA9IGUyLnByb3ZlKSwgdDU7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCB0NSA9IG0oKTtcbiAgcmV0dXJuIHQ1LmRhdGEgPSBlMi5kYXRhID8/IG5ldyBVaW50OEFycmF5KCksIHQ1LnBhdGggPSBlMi5wYXRoID8/IFwiXCIsIHQ1LmhlaWdodCA9IHZvaWQgMCAhPT0gZTIuaGVpZ2h0ICYmIG51bGwgIT09IGUyLmhlaWdodCA/IEJpZ0ludChlMi5oZWlnaHQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIHQ1LnByb3ZlID0gZTIucHJvdmUgPz8gZmFsc2UsIHQ1O1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IFJlcXVlc3RRdWVyeS5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IFJlcXVlc3RRdWVyeS5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL3RlbmRlcm1pbnQuYWJjaS5SZXF1ZXN0UXVlcnlcIiwgdmFsdWU6IFJlcXVlc3RRdWVyeS5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG5mdW5jdGlvbiBPKCkge1xuICByZXR1cm4geyBjb2RlOiAwLCBsb2c6IFwiXCIsIGluZm86IFwiXCIsIGluZGV4OiBCaWdJbnQoMCksIGtleTogbmV3IFVpbnQ4QXJyYXkoKSwgdmFsdWU6IG5ldyBVaW50OEFycmF5KCksIHByb29mT3BzOiB2b2lkIDAsIGhlaWdodDogQmlnSW50KDApLCBjb2Rlc3BhY2U6IFwiXCIgfTtcbn1cbnZhciBSZXNwb25zZVF1ZXJ5ID0geyB0eXBlVXJsOiBcIi90ZW5kZXJtaW50LmFiY2kuUmVzcG9uc2VRdWVyeVwiLCBlbmNvZGU6IChlMiwgdDUgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+ICgwICE9PSBlMi5jb2RlICYmIHQ1LnVpbnQzMig4KS51aW50MzIoZTIuY29kZSksIFwiXCIgIT09IGUyLmxvZyAmJiB0NS51aW50MzIoMjYpLnN0cmluZyhlMi5sb2cpLCBcIlwiICE9PSBlMi5pbmZvICYmIHQ1LnVpbnQzMigzNCkuc3RyaW5nKGUyLmluZm8pLCBlMi5pbmRleCAhPT0gQmlnSW50KDApICYmIHQ1LnVpbnQzMig0MCkuaW50NjQoZTIuaW5kZXgpLCAwICE9PSBlMi5rZXkubGVuZ3RoICYmIHQ1LnVpbnQzMig1MCkuYnl0ZXMoZTIua2V5KSwgMCAhPT0gZTIudmFsdWUubGVuZ3RoICYmIHQ1LnVpbnQzMig1OCkuYnl0ZXMoZTIudmFsdWUpLCB2b2lkIDAgIT09IGUyLnByb29mT3BzICYmIFByb29mT3BzLmVuY29kZShlMi5wcm9vZk9wcywgdDUudWludDMyKDY2KS5mb3JrKCkpLmxkZWxpbSgpLCBlMi5oZWlnaHQgIT09IEJpZ0ludCgwKSAmJiB0NS51aW50MzIoNzIpLmludDY0KGUyLmhlaWdodCksIFwiXCIgIT09IGUyLmNvZGVzcGFjZSAmJiB0NS51aW50MzIoODIpLnN0cmluZyhlMi5jb2Rlc3BhY2UpLCB0NSksIGRlY29kZShlMiwgdDUpIHtcbiAgY29uc3QgczMgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCBuMiA9IHZvaWQgMCA9PT0gdDUgPyBzMy5sZW4gOiBzMy5wb3MgKyB0NTtcbiAgY29uc3QgaTMgPSBPKCk7XG4gIGZvciAoOyBzMy5wb3MgPCBuMjsgKSB7XG4gICAgY29uc3QgZTMgPSBzMy51aW50MzIoKTtcbiAgICBzd2l0Y2ggKGUzID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGkzLmNvZGUgPSBzMy51aW50MzIoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGkzLmxvZyA9IHMzLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgaTMuaW5mbyA9IHMzLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNTpcbiAgICAgICAgaTMuaW5kZXggPSBzMy5pbnQ2NCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNjpcbiAgICAgICAgaTMua2V5ID0gczMuYnl0ZXMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDc6XG4gICAgICAgIGkzLnZhbHVlID0gczMuYnl0ZXMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDg6XG4gICAgICAgIGkzLnByb29mT3BzID0gUHJvb2ZPcHMuZGVjb2RlKHMzLCBzMy51aW50MzIoKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA5OlxuICAgICAgICBpMy5oZWlnaHQgPSBzMy5pbnQ2NCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTA6XG4gICAgICAgIGkzLmNvZGVzcGFjZSA9IHMzLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHMzLnNraXBUeXBlKDcgJiBlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpMztcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IGNvZGU6IGlzU2V0KGUyLmNvZGUpID8gTnVtYmVyKGUyLmNvZGUpIDogMCwgbG9nOiBpc1NldChlMi5sb2cpID8gU3RyaW5nKGUyLmxvZykgOiBcIlwiLCBpbmZvOiBpc1NldChlMi5pbmZvKSA/IFN0cmluZyhlMi5pbmZvKSA6IFwiXCIsIGluZGV4OiBpc1NldChlMi5pbmRleCkgPyBCaWdJbnQoZTIuaW5kZXgudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIGtleTogaXNTZXQoZTIua2V5KSA/IGRlY29kZUJhc2U2NChlMi5rZXkpIDogbmV3IFVpbnQ4QXJyYXkoKSwgdmFsdWU6IGlzU2V0KGUyLnZhbHVlKSA/IGRlY29kZUJhc2U2NChlMi52YWx1ZSkgOiBuZXcgVWludDhBcnJheSgpLCBwcm9vZk9wczogaXNTZXQoZTIucHJvb2ZPcHMpID8gUHJvb2ZPcHMuZnJvbUpTT04oZTIucHJvb2ZPcHMpIDogdm9pZCAwLCBoZWlnaHQ6IGlzU2V0KGUyLmhlaWdodCkgPyBCaWdJbnQoZTIuaGVpZ2h0LnRvU3RyaW5nKCkpIDogQmlnSW50KDApLCBjb2Rlc3BhY2U6IGlzU2V0KGUyLmNvZGVzcGFjZSkgPyBTdHJpbmcoZTIuY29kZXNwYWNlKSA6IFwiXCIgfSksIHRvSlNPTihlMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5jb2RlICYmICh0NS5jb2RlID0gTWF0aC5yb3VuZChlMi5jb2RlKSksIHZvaWQgMCAhPT0gZTIubG9nICYmICh0NS5sb2cgPSBlMi5sb2cpLCB2b2lkIDAgIT09IGUyLmluZm8gJiYgKHQ1LmluZm8gPSBlMi5pbmZvKSwgdm9pZCAwICE9PSBlMi5pbmRleCAmJiAodDUuaW5kZXggPSAoZTIuaW5kZXggfHwgQmlnSW50KDApKS50b1N0cmluZygpKSwgdm9pZCAwICE9PSBlMi5rZXkgJiYgKHQ1LmtleSA9IGVuY29kZUJhc2U2NCh2b2lkIDAgIT09IGUyLmtleSA/IGUyLmtleSA6IG5ldyBVaW50OEFycmF5KCkpKSwgdm9pZCAwICE9PSBlMi52YWx1ZSAmJiAodDUudmFsdWUgPSBlbmNvZGVCYXNlNjQodm9pZCAwICE9PSBlMi52YWx1ZSA/IGUyLnZhbHVlIDogbmV3IFVpbnQ4QXJyYXkoKSkpLCB2b2lkIDAgIT09IGUyLnByb29mT3BzICYmICh0NS5wcm9vZk9wcyA9IGUyLnByb29mT3BzID8gUHJvb2ZPcHMudG9KU09OKGUyLnByb29mT3BzKSA6IHZvaWQgMCksIHZvaWQgMCAhPT0gZTIuaGVpZ2h0ICYmICh0NS5oZWlnaHQgPSAoZTIuaGVpZ2h0IHx8IEJpZ0ludCgwKSkudG9TdHJpbmcoKSksIHZvaWQgMCAhPT0gZTIuY29kZXNwYWNlICYmICh0NS5jb2Rlc3BhY2UgPSBlMi5jb2Rlc3BhY2UpLCB0NTtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IHQ1ID0gTygpO1xuICByZXR1cm4gdDUuY29kZSA9IGUyLmNvZGUgPz8gMCwgdDUubG9nID0gZTIubG9nID8/IFwiXCIsIHQ1LmluZm8gPSBlMi5pbmZvID8/IFwiXCIsIHQ1LmluZGV4ID0gdm9pZCAwICE9PSBlMi5pbmRleCAmJiBudWxsICE9PSBlMi5pbmRleCA/IEJpZ0ludChlMi5pbmRleC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgdDUua2V5ID0gZTIua2V5ID8/IG5ldyBVaW50OEFycmF5KCksIHQ1LnZhbHVlID0gZTIudmFsdWUgPz8gbmV3IFVpbnQ4QXJyYXkoKSwgdDUucHJvb2ZPcHMgPSB2b2lkIDAgIT09IGUyLnByb29mT3BzICYmIG51bGwgIT09IGUyLnByb29mT3BzID8gUHJvb2ZPcHMuZnJvbVBhcnRpYWwoZTIucHJvb2ZPcHMpIDogdm9pZCAwLCB0NS5oZWlnaHQgPSB2b2lkIDAgIT09IGUyLmhlaWdodCAmJiBudWxsICE9PSBlMi5oZWlnaHQgPyBCaWdJbnQoZTIuaGVpZ2h0LnRvU3RyaW5nKCkpIDogQmlnSW50KDApLCB0NS5jb2Rlc3BhY2UgPSBlMi5jb2Rlc3BhY2UgPz8gXCJcIiwgdDU7XG59LCBmcm9tUHJvdG9Nc2c6IChlMikgPT4gUmVzcG9uc2VRdWVyeS5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IFJlc3BvbnNlUXVlcnkuZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi90ZW5kZXJtaW50LmFiY2kuUmVzcG9uc2VRdWVyeVwiLCB2YWx1ZTogUmVzcG9uc2VRdWVyeS5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG5cbi8qIC4uL2Nvc21pYy1wcm90by9kaXN0L2NvZGVnZW4vaWNxL3YxL3BhY2tldC5qcyovXG52YXIgQ29zbW9zUXVlcnkgPSB7IHR5cGVVcmw6IFwiL2ljcS52MS5Db3Ntb3NRdWVyeVwiLCBlbmNvZGUobzIsIHQ1ID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSB7XG4gIGZvciAoY29uc3QgcjYgb2YgbzIucmVxdWVzdHMpIFJlcXVlc3RRdWVyeS5lbmNvZGUocjYsIHQ1LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgcmV0dXJuIHQ1O1xufSwgZGVjb2RlKG8yLCByNikge1xuICBjb25zdCBzMyA9IG8yIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gbzIgOiBuZXcgQmluYXJ5UmVhZGVyKG8yKTtcbiAgbGV0IG4yID0gdm9pZCAwID09PSByNiA/IHMzLmxlbiA6IHMzLnBvcyArIHI2O1xuICBjb25zdCBhMiA9IHsgcmVxdWVzdHM6IFtdIH07XG4gIGZvciAoOyBzMy5wb3MgPCBuMjsgKSB7XG4gICAgY29uc3QgbzMgPSBzMy51aW50MzIoKTtcbiAgICBpZiAobzMgPj4+IDMgPT0gMSkgYTIucmVxdWVzdHMucHVzaChSZXF1ZXN0UXVlcnkuZGVjb2RlKHMzLCBzMy51aW50MzIoKSkpO1xuICAgIGVsc2UgczMuc2tpcFR5cGUoNyAmIG8zKTtcbiAgfVxuICByZXR1cm4gYTI7XG59LCBmcm9tSlNPTjogKG8yKSA9PiAoeyByZXF1ZXN0czogQXJyYXkuaXNBcnJheShvMj8ucmVxdWVzdHMpID8gbzIucmVxdWVzdHMubWFwKCgobzMpID0+IFJlcXVlc3RRdWVyeS5mcm9tSlNPTihvMykpKSA6IFtdIH0pLCB0b0pTT04obzIpIHtcbiAgY29uc3QgdDUgPSB7fTtcbiAgcmV0dXJuIG8yLnJlcXVlc3RzID8gdDUucmVxdWVzdHMgPSBvMi5yZXF1ZXN0cy5tYXAoKChvMykgPT4gbzMgPyBSZXF1ZXN0UXVlcnkudG9KU09OKG8zKSA6IHZvaWQgMCkpIDogdDUucmVxdWVzdHMgPSBbXSwgdDU7XG59LCBmcm9tUGFydGlhbChvMikge1xuICBjb25zdCB0NSA9IHsgcmVxdWVzdHM6IFtdIH07XG4gIHJldHVybiB0NS5yZXF1ZXN0cyA9IG8yLnJlcXVlc3RzPy5tYXAoKChvMykgPT4gUmVxdWVzdFF1ZXJ5LmZyb21QYXJ0aWFsKG8zKSkpIHx8IFtdLCB0NTtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBDb3Ntb3NRdWVyeS5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IENvc21vc1F1ZXJ5LmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvaWNxLnYxLkNvc21vc1F1ZXJ5XCIsIHZhbHVlOiBDb3Ntb3NRdWVyeS5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG52YXIgQ29zbW9zUmVzcG9uc2UgPSB7IHR5cGVVcmw6IFwiL2ljcS52MS5Db3Ntb3NSZXNwb25zZVwiLCBlbmNvZGUoZTIsIHQ1ID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSB7XG4gIGZvciAoY29uc3QgcjYgb2YgZTIucmVzcG9uc2VzKSBSZXNwb25zZVF1ZXJ5LmVuY29kZShyNiwgdDUudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICByZXR1cm4gdDU7XG59LCBkZWNvZGUoZTIsIHI2KSB7XG4gIGNvbnN0IHMzID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgbjIgPSB2b2lkIDAgPT09IHI2ID8gczMubGVuIDogczMucG9zICsgcjY7XG4gIGNvbnN0IGEyID0geyByZXNwb25zZXM6IFtdIH07XG4gIGZvciAoOyBzMy5wb3MgPCBuMjsgKSB7XG4gICAgY29uc3QgZTMgPSBzMy51aW50MzIoKTtcbiAgICBpZiAoZTMgPj4+IDMgPT0gMSkgYTIucmVzcG9uc2VzLnB1c2goUmVzcG9uc2VRdWVyeS5kZWNvZGUoczMsIHMzLnVpbnQzMigpKSk7XG4gICAgZWxzZSBzMy5za2lwVHlwZSg3ICYgZTMpO1xuICB9XG4gIHJldHVybiBhMjtcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IHJlc3BvbnNlczogQXJyYXkuaXNBcnJheShlMj8ucmVzcG9uc2VzKSA/IGUyLnJlc3BvbnNlcy5tYXAoKChlMykgPT4gUmVzcG9uc2VRdWVyeS5mcm9tSlNPTihlMykpKSA6IFtdIH0pLCB0b0pTT04oZTIpIHtcbiAgY29uc3QgdDUgPSB7fTtcbiAgcmV0dXJuIGUyLnJlc3BvbnNlcyA/IHQ1LnJlc3BvbnNlcyA9IGUyLnJlc3BvbnNlcy5tYXAoKChlMykgPT4gZTMgPyBSZXNwb25zZVF1ZXJ5LnRvSlNPTihlMykgOiB2b2lkIDApKSA6IHQ1LnJlc3BvbnNlcyA9IFtdLCB0NTtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IHQ1ID0geyByZXNwb25zZXM6IFtdIH07XG4gIHJldHVybiB0NS5yZXNwb25zZXMgPSBlMi5yZXNwb25zZXM/Lm1hcCgoKGUzKSA9PiBSZXNwb25zZVF1ZXJ5LmZyb21QYXJ0aWFsKGUzKSkpIHx8IFtdLCB0NTtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBDb3Ntb3NSZXNwb25zZS5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IENvc21vc1Jlc3BvbnNlLmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvaWNxLnYxLkNvc21vc1Jlc3BvbnNlXCIsIHZhbHVlOiBDb3Ntb3NSZXNwb25zZS5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG5cbi8qIC4uL2Nvc21pYy1wcm90by9kaXN0L2hlbHBlcnMuanMqL1xudmFyIHQzID0gL15cXC8oPzxzZXJ2aWNlTmFtZT5cXHcrKD86XFwuXFx3KykqKVxcLlF1ZXJ5KD88bWV0aG9kTmFtZT5cXHcrKVJlcXVlc3QkLztcbnZhciB0eXBlVXJsVG9HcnBjUGF0aCA9IChlMikgPT4ge1xuICBjb25zdCByNiA9IGUyLm1hdGNoKHQzKTtcbiAgaWYgKCFyNiB8fCAhcjYuZ3JvdXBzKSB0aHJvdyBUeXBlRXJyb3IoYEludmFsaWQgdHlwZVVybDogJHtlMn0uIE11c3QgYmUgYSBRdWVyeSBSZXF1ZXN0LmApO1xuICBjb25zdCB7IHNlcnZpY2VOYW1lOiBvMiwgbWV0aG9kTmFtZTogczMgfSA9IHI2Lmdyb3VwcztcbiAgcmV0dXJuIGAvJHtvMn0uUXVlcnkvJHtzM31gO1xufTtcbnZhciB0b1JlcXVlc3RRdWVyeUpzb24gPSAodDUsIHI2ID0ge30pID0+IFJlcXVlc3RRdWVyeS50b0pTT04oUmVxdWVzdFF1ZXJ5LmZyb21QYXJ0aWFsKHsgcGF0aDogdHlwZVVybFRvR3JwY1BhdGgodDUudHlwZVVybCksIGRhdGE6IHQ1LnZhbHVlLCAuLi5yNiB9KSk7XG5cbi8qIC4uL2Nvc21pYy1wcm90by9kaXN0L2NvZGVjLWhlbHBlcnMuanMqL1xudmFyIHsgZnJlZXplOiB0NCB9ID0gT2JqZWN0O1xudmFyIHIyID0geyBcIi9pYmMuYXBwbGljYXRpb25zLnRyYW5zZmVyLnYxLk1zZ1RyYW5zZmVyXCI6IFtcInRpbWVvdXRfaGVpZ2h0XCIsIFwidGltZW91dEhlaWdodFwiXSB9O1xudmFyIGUgPSB7IFwiL2Nvc21vcy5hdXRoLnYxYmV0YTEuTW9kdWxlQWNjb3VudFwiOiB7IGJhc2VfYWNjb3VudDogXCJiYXNlQWNjb3VudFwiIH0gfTtcbnZhciBDb2RlYyA9IChlMiwgbzIpID0+IHtcbiAgY29uc3QgbjIgPSBvMiA/PyByMltlMi50eXBlVXJsXSA/PyBbXSwgbDIgPSB0NCh7IHR5cGVVcmw6IGUyLnR5cGVVcmwsIGVuY29kZTogKHQ1LCByNikgPT4gZTIuZW5jb2RlKGwyLmZyb21QYXJ0aWFsKHQ1KSwgcjYpLCBkZWNvZGU6ICh0NSwgcjYpID0+IGUyLmRlY29kZSh0NSwgcjYpLCBmcm9tSlNPTjogKHQ1KSA9PiBlMi5mcm9tSlNPTih0NSksIHRvSlNPTjogKHQ1KSA9PiBlMi50b0pTT04obDIuZnJvbVBhcnRpYWwodDUpKSwgZnJvbVBhcnRpYWwodDUpIHtcbiAgICBjb25zdCByNiA9IHsgLi4udDUgfTtcbiAgICBmb3IgKGNvbnN0IHQ2IG9mIG4yKSBudWxsID09IHI2W3Q2XSAmJiAocjZbdDZdID0ge30pO1xuICAgIHJldHVybiBlMi5mcm9tUGFydGlhbChyNik7XG4gIH0sIGZyb21Qcm90b01zZzogKHQ1KSA9PiBlMi5mcm9tUHJvdG9Nc2codDUpLCB0b1Byb3RvOiAodDUpID0+IGUyLnRvUHJvdG8obDIuZnJvbVBhcnRpYWwodDUpKSwgdG9Qcm90b01zZzogKHQ1KSA9PiBlMi50b1Byb3RvTXNnKGwyLmZyb21QYXJ0aWFsKHQ1KSkgfSk7XG4gIHJldHVybiBsMjtcbn07XG52YXIgQ29kZWNIZWxwZXIgPSAocjYsIG8yKSA9PiB7XG4gIGNvbnN0IG4yID0gQ29kZWMocjYsIG8yKTtcbiAgcmV0dXJuIHQ0KHsgLi4ubjIsIHR5cGVkQW1pbm86ICh0NSkgPT4gKHsgdHlwZTogcjYudHlwZVVybCwgdmFsdWU6IG4yLmZyb21QYXJ0aWFsKHQ1KSB9KSwgdHlwZWRFbmNvZGU6ICh0NSkgPT4gKHsgdHlwZVVybDogcjYudHlwZVVybCwgdmFsdWU6IG4yLmZyb21QYXJ0aWFsKHQ1KSB9KSwgdHlwZWRKc29uOiAodDUpID0+ICh7IFwiQHR5cGVcIjogcjYudHlwZVVybCwgLi4ubjIuZnJvbVBhcnRpYWwodDUpIH0pLCBmcm9tVHlwZWQodDUsIG8zKSB7XG4gICAgY29uc3QgeyB0eXBlVXJsOiBsMiwgdmFsdWU6IGEyIH0gPSAoKHQ2KSA9PiB7XG4gICAgICBpZiAoXCJAdHlwZVwiIGluIHQ2KSB7XG4gICAgICAgIGNvbnN0IHsgXCJAdHlwZVwiOiByNywgLi4uZTIgfSA9IHQ2O1xuICAgICAgICByZXR1cm4geyB0eXBlVXJsOiByNywgdmFsdWU6IGUyIH07XG4gICAgICB9XG4gICAgICBpZiAoXCIkdHlwZVVybFwiIGluIHQ2KSB7XG4gICAgICAgIGNvbnN0IHsgJHR5cGVVcmw6IHI3LCAuLi5lMiB9ID0gdDY7XG4gICAgICAgIHJldHVybiB7IHR5cGVVcmw6IHI3LCB2YWx1ZTogZTIgfTtcbiAgICAgIH1cbiAgICAgIGlmIChcInR5cGVVcmxcIiBpbiB0Nikge1xuICAgICAgICBjb25zdCB7IHR5cGVVcmw6IHI3LCB2YWx1ZTogZTIgfSA9IHQ2O1xuICAgICAgICByZXR1cm4geyB0eXBlVXJsOiByNywgdmFsdWU6IGUyIGluc3RhbmNlb2YgVWludDhBcnJheSA/IGUyIDogeyAuLi5lMiB9IH07XG4gICAgICB9XG4gICAgICBpZiAoXCJ0eXBlXCIgaW4gdDYpIHtcbiAgICAgICAgY29uc3QgeyB0eXBlOiByNywgdmFsdWU6IGUyIH0gPSB0NjtcbiAgICAgICAgcmV0dXJuIHsgdHlwZVVybDogcjcsIHZhbHVlOiBlMiB9O1xuICAgICAgfVxuICAgICAgdGhyb3cgVHlwZUVycm9yKGBVbnJlY29nbml6ZWQgaW5wdXQ6ICR7dDZ9YCk7XG4gICAgfSkodDUpO1xuICAgIGlmIChsMiAhPT0gcjYudHlwZVVybCkgdGhyb3cgVHlwZUVycm9yKGBJbnZhbGlkIHR5cGVVcmw6ICR7bDJ9LiBNdXN0IGJlICR7cjYudHlwZVVybH0uYCk7XG4gICAgY29uc3QgYzIgPSBvMyA/PyBlW2wyXSA/PyB7fSwgaTMgPSAodDYpID0+IHtcbiAgICAgIGZvciAoY29uc3QgW3I4LCBlMl0gb2YgT2JqZWN0LmVudHJpZXMoYzIpKSBudWxsID09IHQ2W2UyXSAmJiAodDZbZTJdID0gYTJbcjhdID8/IGEyKTtcbiAgICAgIGNvbnN0IHI3ID0gbjIuZnJvbVBhcnRpYWwodDYpO1xuICAgICAgZm9yIChjb25zdCB0NyBvZiBPYmplY3QudmFsdWVzKGMyKSkge1xuICAgICAgICBjb25zdCBlMiA9IHI3W3Q3XSA/PyByNztcbiAgICAgICAgaWYgKE9iamVjdChlMikgPT09IGUyKSBmb3IgKGNvbnN0IFt0OCwgbzRdIG9mIE9iamVjdC5lbnRyaWVzKGUyKSkgbnVsbCA9PSByN1t0OF0gJiYgKHI3W3Q4XSA9IG80KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByNztcbiAgICB9O1xuICAgIHJldHVybiBhMiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBpMyhuMi5mcm9tUHJvdG9Nc2coeyB0eXBlVXJsOiBsMiwgdmFsdWU6IGEyIH0pKSA6IGkzKG4yLmZyb21QYXJ0aWFsKGEyKSk7XG4gIH0gfSk7XG59O1xuXG4vKiAuLi9jb3NtaWMtcHJvdG8vZGlzdC9jb2RlZ2VuL2liYy9hcHBsaWNhdGlvbnMvaW50ZXJjaGFpbl9hY2NvdW50cy92MS9wYWNrZXQuanMqL1xudmFyIFR5cGU7XG4hKGZ1bmN0aW9uKGUyKSB7XG4gIGUyW2UyLlRZUEVfVU5TUEVDSUZJRUQgPSAwXSA9IFwiVFlQRV9VTlNQRUNJRklFRFwiLCBlMltlMi5UWVBFX0VYRUNVVEVfVFggPSAxXSA9IFwiVFlQRV9FWEVDVVRFX1RYXCIsIGUyW2UyLlVOUkVDT0dOSVpFRCA9IC0xXSA9IFwiVU5SRUNPR05JWkVEXCI7XG59KShUeXBlIHx8IChUeXBlID0ge30pKTtcblxuLyogLi4vb3JjaGVzdHJhdGlvbi9zcmMvdXRpbHMvcGFja2V0LmpzKi9cbnZhciBUeEJvZHkyID0gQ29kZWNIZWxwZXIoVHhCb2R5KTtcbnZhciBBbnkyID0gQ29kZWNIZWxwZXIoQW55KTtcbnZhciBSZXF1ZXN0UXVlcnkyID0gQ29kZWNIZWxwZXIoUmVxdWVzdFF1ZXJ5KTtcbnZhciBSZXNwb25zZVF1ZXJ5MiA9IENvZGVjSGVscGVyKFJlc3BvbnNlUXVlcnkpO1xudmFyIENvc21vc1F1ZXJ5MiA9IENvZGVjSGVscGVyKENvc21vc1F1ZXJ5KTtcbnZhciBDb3Ntb3NSZXNwb25zZTIgPSBDb2RlY0hlbHBlcihDb3Ntb3NSZXNwb25zZSk7XG5mdW5jdGlvbiBtYWtlVHhQYWNrZXQobXNncywgb3B0cykge1xuICBjb25zdCBtZXNzYWdlcyA9IG1zZ3MubWFwKEFueTIuZnJvbUpTT04pO1xuICBjb25zdCBieXRlczIgPSBUeEJvZHkyLnRvUHJvdG8oe1xuICAgIG1lc3NhZ2VzLFxuICAgIC4uLm9wdHNcbiAgfSk7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShcbiAgICAvKiogQHR5cGUge0pzb25TYWZlPEludGVyY2hhaW5BY2NvdW50UGFja2V0RGF0YT59ICovXG4gICAge1xuICAgICAgdHlwZTogVHlwZS5UWVBFX0VYRUNVVEVfVFgsXG4gICAgICBkYXRhOiBlbmNvZGVCYXNlNjQoYnl0ZXMyKSxcbiAgICAgIG1lbW86IFwiXCJcbiAgICB9XG4gICk7XG59XG5oYXJkZW4obWFrZVR4UGFja2V0KTtcbmZ1bmN0aW9uIG1ha2VRdWVyeVBhY2tldChtc2dzKSB7XG4gIGNvbnN0IGJ5dGVzMiA9IENvc21vc1F1ZXJ5Mi5lbmNvZGUoXG4gICAgQ29zbW9zUXVlcnkyLmZyb21QYXJ0aWFsKHtcbiAgICAgIHJlcXVlc3RzOiBtc2dzLm1hcChSZXF1ZXN0UXVlcnkyLmZyb21KU09OKVxuICAgIH0pXG4gICkuZmluaXNoKCk7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShcbiAgICAvKiogQHR5cGUge0pzb25TYWZlPEludGVyY2hhaW5RdWVyeVBhY2tldERhdGE+fSAqL1xuICAgIHtcbiAgICAgIGRhdGE6IGVuY29kZUJhc2U2NChieXRlczIpLFxuICAgICAgbWVtbzogXCJcIlxuICAgIH1cbiAgKTtcbn1cbmhhcmRlbihtYWtlUXVlcnlQYWNrZXQpO1xuZnVuY3Rpb24gcGFyc2VUeFBhY2tldChyZXNwb25zZSkge1xuICBjb25zdCB7IHJlc3VsdCwgZXJyb3IgfSA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xuICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICBlbHNlIGlmIChlcnJvcikgdGhyb3cgRXJyb3IoZXJyb3IpO1xuICBlbHNlIHRocm93IHRocm93UmVkYWN0ZWRgZXhwZWN0ZWQgZWl0aGVyIHJlc3VsdCBvciBlcnJvcjogJHtyZXNwb25zZX1gO1xufVxuaGFyZGVuKHBhcnNlVHhQYWNrZXQpO1xuZnVuY3Rpb24gcGFyc2VRdWVyeVBhY2tldChyZXNwb25zZSkge1xuICBjb25zdCByZXN1bHQgPSBwYXJzZVR4UGFja2V0KHJlc3BvbnNlKTtcbiAgY29uc3QgeyBkYXRhIH0gPSBKU09OLnBhcnNlKGF0b2IyKHJlc3VsdCkpO1xuICBjb25zdCB7IHJlc3BvbnNlcyA9IFtdIH0gPSBDb3Ntb3NSZXNwb25zZTIuZGVjb2RlKGRlY29kZUJhc2U2NChkYXRhKSk7XG4gIHJldHVybiBoYXJkZW4ocmVzcG9uc2VzLm1hcChSZXNwb25zZVF1ZXJ5Mi50b0pTT04pKTtcbn1cbmhhcmRlbihwYXJzZVF1ZXJ5UGFja2V0KTtcblxuLyogLi4vb3JjaGVzdHJhdGlvbi9zcmMvZXhvcy9pY2EtYWNjb3VudC1raXQuanMqL1xudmFyIHRyYWNlID0gbWFrZVRyYWNlcihcIkljYUFjY291bnRLaXRcIik7XG52YXIgVU5QQVJTQUJMRV9DSEFJTl9BRERSRVNTID0gXCJVTlBBUlNBQkxFX0NIQUlOX0FERFJFU1NcIjtcbnZhciBJY2FBY2NvdW50SSA9IE0uaW50ZXJmYWNlKFwiSWNhQWNjb3VudFwiLCB7XG4gIGdldEFkZHJlc3M6IE0uY2FsbCgpLnJldHVybnMoQ29zbW9zQ2hhaW5BZGRyZXNzU2hhcGUpLFxuICBnZXRMb2NhbEFkZHJlc3M6IE0uY2FsbCgpLnJldHVybnMoTS5zdHJpbmcoKSksXG4gIGdldFJlbW90ZUFkZHJlc3M6IE0uY2FsbCgpLnJldHVybnMoTS5zdHJpbmcoKSksXG4gIGdldFBvcnQ6IE0uY2FsbCgpLnJldHVybnMoTS5yZW1vdGFibGUoXCJQb3J0XCIpKSxcbiAgZXhlY3V0ZVR4OiBNLmNhbGwoTS5hcnJheU9mKE0ucmVjb3JkKCkpKS5yZXR1cm5zKFZvd1NoYXBlKSxcbiAgZXhlY3V0ZUVuY29kZWRUeDogTS5jYWxsKE0uYXJyYXlPZihQcm90bzNTaGFwZSkpLm9wdGlvbmFsKEV4ZWN1dGVJQ0FUeE9wdHNTaGFwZSkucmV0dXJucyhWb3dTaGFwZSksXG4gIGRlYWN0aXZhdGU6IE0uY2FsbCgpLnJldHVybnMoVm93U2hhcGUpLFxuICByZWFjdGl2YXRlOiBNLmNhbGwoKS5yZXR1cm5zKFZvd1NoYXBlKVxufSk7XG52YXIgcHJlcGFyZUljYUFjY291bnRLaXQgPSAoem9uZSwgeyB3YXRjaCwgYXNWb3cgfSkgPT4gem9uZS5leG9DbGFzc0tpdChcbiAgXCJJY2FBY2NvdW50S2l0XCIsXG4gIHtcbiAgICBhY2NvdW50OiBJY2FBY2NvdW50SSxcbiAgICBjb25uZWN0aW9uSGFuZGxlcjogT3V0Ym91bmRDb25uZWN0aW9uSGFuZGxlckksXG4gICAgcGFyc2VUeFBhY2tldFdhdGNoZXI6IE0uaW50ZXJmYWNlKFwiUGFyc2VUeFBhY2tldFdhdGNoZXJcIiwge1xuICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLnN0cmluZygpKS5vcHRpb25hbChNLmFycmF5T2YoTS51bmRlZmluZWQoKSkpLnJldHVybnMoTS5zdHJpbmcoKSlcbiAgICB9KVxuICB9LFxuICAvKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjaGFpbklkXG4gKiBAcGFyYW0ge1BvcnR9IHBvcnRcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRSZW1vdGVBZGRyZXNzXG4gKi9cbiAgKGNoYWluSWQsIHBvcnQsIHJlcXVlc3RlZFJlbW90ZUFkZHJlc3MpID0+IChcbiAgICAvKiogQHR5cGUge1N0YXRlfSAqL1xuICAgIHtcbiAgICAgIGNoYWluSWQsXG4gICAgICBwb3J0LFxuICAgICAgY29ubmVjdGlvbjogdm9pZCAwLFxuICAgICAgcmVxdWVzdGVkUmVtb3RlQWRkcmVzcyxcbiAgICAgIHJlbW90ZUFkZHJlc3M6IHZvaWQgMCxcbiAgICAgIGNoYWluQWRkcmVzczogdm9pZCAwLFxuICAgICAgbG9jYWxBZGRyZXNzOiB2b2lkIDAsXG4gICAgICBpc0luaXRpYXRpbmdDbG9zZTogZmFsc2VcbiAgICB9XG4gICksXG4gIHtcbiAgICBwYXJzZVR4UGFja2V0V2F0Y2hlcjoge1xuICAgICAgLyoqIEBwYXJhbSB7c3RyaW5nfSBhY2sgKi9cbiAgICAgIG9uRnVsZmlsbGVkKGFjaykge1xuICAgICAgICByZXR1cm4gcGFyc2VUeFBhY2tldChhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYWNjb3VudDoge1xuICAgICAgLyoqIEByZXR1cm5zIHtDb3Ntb3NDaGFpbkFkZHJlc3N9ICovXG4gICAgICBnZXRBZGRyZXNzKCkge1xuICAgICAgICByZXR1cm4gTm9uTnVsbGlzaChcbiAgICAgICAgICB0aGlzLnN0YXRlLmNoYWluQWRkcmVzcyxcbiAgICAgICAgICBcIklDQSBjaGFubmVsIGNyZWF0aW9uIGFja25vd2xlZGdlbWVudCBub3QgeWV0IHJlY2VpdmVkLlwiXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgZ2V0TG9jYWxBZGRyZXNzKCkge1xuICAgICAgICByZXR1cm4gTm9uTnVsbGlzaChcbiAgICAgICAgICB0aGlzLnN0YXRlLmxvY2FsQWRkcmVzcyxcbiAgICAgICAgICBcImxvY2FsIGFkZHJlc3Mgbm90IGF2YWlsYWJsZVwiXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgZ2V0UmVtb3RlQWRkcmVzcygpIHtcbiAgICAgICAgcmV0dXJuIE5vbk51bGxpc2goXG4gICAgICAgICAgdGhpcy5zdGF0ZS5yZW1vdGVBZGRyZXNzLFxuICAgICAgICAgIFwicmVtb3RlIGFkZHJlc3Mgbm90IGF2YWlsYWJsZVwiXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgZ2V0UG9ydCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUucG9ydDtcbiAgICAgIH0sXG4gICAgICBleGVjdXRlVHgoKSB7XG4gICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB0aHJvd1JlZGFjdGVkYG5vdCB5ZXQgaW1wbGVtZW50ZWRgKTtcbiAgICAgIH0sXG4gICAgICAvKipcbiAqIFN1Ym1pdCBhIHRyYW5zYWN0aW9uIG9uIGJlaGFsZiBvZiB0aGUgcmVtb3RlIGFjY291bnQgZm9yIGV4ZWN1dGlvbiBvblxuICogdGhlIHJlbW90ZSBjaGFpbi5cbiAqXG4gKiBTZXQgYHJlbGF0aXZlVGltZW91dE5zYCB0byBwcm92aWRlIGEgdGltZW91dCBmb3IgdGhlIElCQyBwYWNrZXQuXG4gKlxuICogYFR4Qm9keWAgZmllbGRzIGxpa2UgYHRpbWVvdXRIZWlnaHRgIGFuZCBgbWVtb2AgY2FuIGJlIHNldCwgYnV0IHRoZXNlXG4gKiB0eXBpY2FsbHkgZG8gbm90IGFmZmVjdCBJQkMgYXBwIHByb3RvY29scyBsaWtlIFBGTSwgSUNBLlxuICpcbiAqIEBwYXJhbSB7QW55SnNvbltdfSBtc2dzXG4gKiBAcGFyYW0ge1BhcnRpYWw8T21pdDxUeEJvZHksICdtZXNzYWdlcyc+PiAmIHtcbiAqICAgc2VuZE9wdHM/OiBTZW5kT3B0aW9ucztcbiAqIH19IFtvcHRzXVxuICogQHJldHVybnMge1ZvdzxzdHJpbmc+fSAtIGJhc2U2NCBlbmNvZGVkIGJ5dGVzIHN0cmluZy4gQ2FuIGJlIGRlY29kZWRcbiAqICAgdXNpbmcgdGhlIGNvcnJlc3BvbmRpbmcgYE1zZypSZXNwb25zZWAgb2JqZWN0LlxuICogQHRocm93cyB7RXJyb3J9IGlmIHBhY2tldCBmYWlscyB0byBzZW5kIG9yIGFuIGVycm9yIGlzIHJldHVybmVkXG4gKi9cbiAgICAgIGV4ZWN1dGVFbmNvZGVkVHgobXNncywgb3B0cyA9IHt9KSB7XG4gICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBjb25uZWN0aW9uIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIGlmICghY29ubmVjdGlvbikge1xuICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBBY2NvdW50IG5vdCBhdmFpbGFibGUgb3IgZGVhY3RpdmF0ZWQuYDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgeyBzZW5kT3B0cywgLi4udHhCb2R5T3B0cyB9ID0gb3B0cztcbiAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICBFKGNvbm5lY3Rpb24pLnNlbmQobWFrZVR4UGFja2V0KG1zZ3MsIHR4Qm9keU9wdHMpLCBzZW5kT3B0cyksXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy5wYXJzZVR4UGFja2V0V2F0Y2hlclxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIC8qKiBAdHlwZSB7SG9zdE9mPEljYUFjY291bnRbJ2RlYWN0aXZhdGUnXT59ICovXG4gICAgICBkZWFjdGl2YXRlKCkge1xuICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgY29ubmVjdGlvbiB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBpZiAoIWNvbm5lY3Rpb24pIHRocm93IHRocm93UmVkYWN0ZWRgQWNjb3VudCBub3QgYXZhaWxhYmxlIG9yIGRlYWN0aXZhdGVkLmA7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5pc0luaXRpYXRpbmdDbG9zZSA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIEUoY29ubmVjdGlvbikuY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgLyoqIEB0eXBlIHtIb3N0T2Y8SWNhQWNjb3VudFsncmVhY3RpdmF0ZSddPn0gKi9cbiAgICAgIHJlYWN0aXZhdGUoKSB7XG4gICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBjb25uZWN0aW9uLCBwb3J0LCByZXF1ZXN0ZWRSZW1vdGVBZGRyZXNzIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIGlmIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYEFjY291bnQgaXMgYWxyZWFkeSBhY3RpdmUuYDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgRShwb3J0KS5jb25uZWN0KFxuICAgICAgICAgICAgICByZXF1ZXN0ZWRSZW1vdGVBZGRyZXNzLFxuICAgICAgICAgICAgICB0aGlzLmZhY2V0cy5jb25uZWN0aW9uSGFuZGxlclxuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgY29ubmVjdGlvbkhhbmRsZXI6IHtcbiAgICAgIC8qKlxuICogQHBhcmFtIHtSZW1vdGU8Q29ubmVjdGlvbj59IGNvbm5lY3Rpb25cbiAqIEBwYXJhbSB7TG9jYWxJYmNBZGRyZXNzfSBsb2NhbEFkZHJcbiAqIEBwYXJhbSB7UmVtb3RlSWJjQWRkcmVzc30gcmVtb3RlQWRkclxuICovXG4gICAgICBhc3luYyBvbk9wZW4oY29ubmVjdGlvbiwgbG9jYWxBZGRyLCByZW1vdGVBZGRyKSB7XG4gICAgICAgIHRyYWNlKGBJQ0EgQ2hhbm5lbCBPcGVuZWQgZm9yICR7bG9jYWxBZGRyfSBhdCAke3JlbW90ZUFkZHJ9YCk7XG4gICAgICAgIHRoaXMuc3RhdGUuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XG4gICAgICAgIHRoaXMuc3RhdGUucmVtb3RlQWRkcmVzcyA9IHJlbW90ZUFkZHI7XG4gICAgICAgIHRoaXMuc3RhdGUubG9jYWxBZGRyZXNzID0gbG9jYWxBZGRyO1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gZmluZEFkZHJlc3NGaWVsZChyZW1vdGVBZGRyKTtcbiAgICAgICAgaWYgKCFhZGRyZXNzKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIlxcdTI2QTBcXHVGRTBGIGZhaWxlZCB0byBwYXJzZSBjaGFpbiBhZGRyZXNzXCIsIHJlbW90ZUFkZHIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUuY2hhaW5BZGRyZXNzID0gaGFyZGVuKHtcbiAgICAgICAgICB2YWx1ZTogYWRkcmVzcyB8fCBVTlBBUlNBQkxFX0NIQUlOX0FERFJFU1MsXG4gICAgICAgICAgY2hhaW5JZDogdGhpcy5zdGF0ZS5jaGFpbklkLFxuICAgICAgICAgIGVuY29kaW5nOiBcImJlY2gzMlwiXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIC8qKlxuICogVGhpcyBoYW5kbGVyIGZpcmVzIGFueSB0aW1lIHRoZSBjb25uZWN0aW9uIChjaGFubmVsKSBjbG9zZXMuIFRoaXNcbiAqIGNvdWxkIGJlIGR1ZSB0byBleHRlcm5hbCBmYWN0b3JzIChlLmcuIGEgcGFja2V0IHRpbWVvdXQpLCBvciBhIGhvbGRlclxuICogaW5pdGlhdGVkIGFjdGlvbiAoYC5kZWFjdGl2YXRlKClgKS5cbiAqXG4gKiBIZXJlLCBpZiBhIGNvbm5lY3Rpb24gaXMgb3BlbmVkIGFnYWluLCB3ZSBjbGVhciB0aGUgY29ubmVjdGlvbiBhbmRcbiAqIGFkZHJlc3NlcyBmcm9tIHN0YXRlIGFzIHRoZXkgd2lsbCBjaGFuZ2UgLSBhIG5ldyBjaGFubmVsIHdpbGwgYmVcbiAqIGVzdGFibGlzaGVkIGlmIHRoZSBjb25uZWN0aW9uIGlzIHJlb3BlbmVkLlxuICpcbiAqIElmIHRoZSBob2xkZXIgZGlkIG5vdCBpbml0aWF0ZSB0aGUgY2xvc3VyZSwgYSBuZXcgY29ubmVjdGlvbiBpc1xuICogZXN0YWJsaXNoZWQgdXNpbmcgdGhlIG9yaWdpbmFsIHJlcXVlc3RlZCByZW1vdGUgYWRkcmVzcy4gVGhpcyB3aWxsXG4gKiByZXN1bHQgaW4gYSBuZXcgY2hhbm5lbElEIGJ1dCB0aGUgQ2hhaW5BZGRyZXNzIHdpbGwgYmUgcHJlc2VydmVkLlxuICpcbiAqIEBwYXJhbSB7UmVtb3RlPENvbm5lY3Rpb24+fSBfY29ubmVjdGlvblxuICogQHBhcmFtIHt1bmtub3dufSByZWFzb25cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5jb3Ntb3MubmV0d29yay92MC40NS9pYmMvb3ZlcnZpZXcuaHRtbCM6fjp0ZXh0PUluJTIwT1JERVJFRCUyMGNoYW5uZWxzJTJDJTIwYSUyMHRpbWVvdXQlMjBvZiUyMGElMjBzaW5nbGUlMjBwYWNrZXQlMjBpbiUyMHRoZSUyMGNoYW5uZWwlMjBjbG9zZXMlMjB0aGUlMjBjaGFubmVsLn1cbiAqL1xuICAgICAgYXN5bmMgb25DbG9zZShfY29ubmVjdGlvbiwgcmVhc29uKSB7XG4gICAgICAgIHRyYWNlKGBJQ0EgQ2hhbm5lbCBjbG9zZWQuIFJlYXNvbjogJHtyZWFzb259YCk7XG4gICAgICAgIHRoaXMuc3RhdGUuY29ubmVjdGlvbiA9IHZvaWQgMDtcbiAgICAgICAgdGhpcy5zdGF0ZS5sb2NhbEFkZHJlc3MgPSB2b2lkIDA7XG4gICAgICAgIHRoaXMuc3RhdGUucmVtb3RlQWRkcmVzcyA9IHZvaWQgMDtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaXNJbml0aWF0aW5nQ2xvc2UgPT09IHRydWUpIHtcbiAgICAgICAgICB0cmFjZShcIkFjY291bnQgZGVhY3RpdmF0ZWQgYnkgaG9sZGVyLiBTa2lwcGluZyByZWFjdGl2YXRpb24uXCIpO1xuICAgICAgICAgIHRoaXMuc3RhdGUuaXNJbml0aWF0aW5nQ2xvc2UgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cmFjZShcIkFjY291bnQgY2xvc2VkIHVuZXhwZWN0ZWRseS4gQXV0b21hdGljYWxseSByZWFjdGl2YXRpbmcuXCIpO1xuICAgICAgICAgIHZvaWQgd2F0Y2godGhpcy5mYWNldHMuYWNjb3VudC5yZWFjdGl2YXRlKCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4pO1xuXG4vKiAuLi9vcmNoZXN0cmF0aW9uL3NyYy9leG9zL2ljcS1jb25uZWN0aW9uLWtpdC5qcyovXG52YXIgdHJhY2UyID0gbWFrZVRyYWNlcihcIk9yY2hlc3RyYXRpb246SUNRQ29ubmVjdGlvblwiKTtcbnZhciBJQ1FDb25uZWN0aW9uSSA9IE0uaW50ZXJmYWNlKFwiSUNRQ29ubmVjdGlvblwiLCB7XG4gIGdldExvY2FsQWRkcmVzczogTS5jYWxsKCkucmV0dXJucyhNLnN0cmluZygpKSxcbiAgZ2V0UmVtb3RlQWRkcmVzczogTS5jYWxsKCkucmV0dXJucyhNLnN0cmluZygpKSxcbiAgcXVlcnk6IE0uY2FsbChNLmFycmF5T2YoSUNRTXNnU2hhcGUpKS5yZXR1cm5zKFZvd1NoYXBlKVxufSk7XG52YXIgcHJlcGFyZUlDUUNvbm5lY3Rpb25LaXQgPSAoem9uZSwgeyB3YXRjaCwgYXNWb3cgfSkgPT4gem9uZS5leG9DbGFzc0tpdChcbiAgXCJJQ1FDb25uZWN0aW9uS2l0XCIsXG4gIHtcbiAgICBjb25uZWN0aW9uOiBJQ1FDb25uZWN0aW9uSSxcbiAgICBjb25uZWN0aW9uSGFuZGxlcjogT3V0Ym91bmRDb25uZWN0aW9uSGFuZGxlckksXG4gICAgcGFyc2VRdWVyeVBhY2tldFdhdGNoZXI6IE0uaW50ZXJmYWNlKFwiUGFyc2VRdWVyeVBhY2tldFdhdGNoZXJcIiwge1xuICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLnN0cmluZygpKS5vcHRpb25hbChNLmFycmF5T2YoTS51bmRlZmluZWQoKSkpLnJldHVybnMoTS5hcnJheU9mKE0ucmVjb3JkKCkpKVxuICAgIH0pXG4gIH0sXG4gIC8qKiBAcGFyYW0ge1BvcnR9IHBvcnQgKi9cbiAgKHBvcnQpID0+IChcbiAgICAvKiogQHR5cGUge0lDUUNvbm5lY3Rpb25LaXRTdGF0ZX0gKi9cbiAgICB7XG4gICAgICBwb3J0LFxuICAgICAgY29ubmVjdGlvbjogdm9pZCAwLFxuICAgICAgcmVtb3RlQWRkcmVzczogdm9pZCAwLFxuICAgICAgbG9jYWxBZGRyZXNzOiB2b2lkIDBcbiAgICB9XG4gICksXG4gIHtcbiAgICBjb25uZWN0aW9uOiB7XG4gICAgICBnZXRMb2NhbEFkZHJlc3MoKSB7XG4gICAgICAgIHJldHVybiBOb25OdWxsaXNoKFxuICAgICAgICAgIHRoaXMuc3RhdGUubG9jYWxBZGRyZXNzLFxuICAgICAgICAgIFwibG9jYWwgYWRkcmVzcyBub3QgYXZhaWxhYmxlXCJcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBnZXRSZW1vdGVBZGRyZXNzKCkge1xuICAgICAgICByZXR1cm4gTm9uTnVsbGlzaChcbiAgICAgICAgICB0aGlzLnN0YXRlLnJlbW90ZUFkZHJlc3MsXG4gICAgICAgICAgXCJyZW1vdGUgYWRkcmVzcyBub3QgYXZhaWxhYmxlXCJcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICAvKipcbiAqIFZvdyByZWplY3RzIGlmIHBhY2tldCBmYWlscyB0byBzZW5kIG9yIGFuIGVycm9yIGlzIHJldHVybmVkXG4gKlxuICogQHBhcmFtIHtKc29uU2FmZTxSZXF1ZXN0UXVlcnk+W119IG1zZ3NcbiAqIEByZXR1cm5zIHtWb3c8SnNvblNhZmU8UmVzcG9uc2VRdWVyeT5bXT59XG4gKi9cbiAgICAgIHF1ZXJ5KG1zZ3MpIHtcbiAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICBjb25zdCB7IGNvbm5lY3Rpb24gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgaWYgKCFjb25uZWN0aW9uKSB0aHJvdyB0aHJvd1JlZGFjdGVkYGNvbm5lY3Rpb24gbm90IGF2YWlsYWJsZWA7XG4gICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgRShjb25uZWN0aW9uKS5zZW5kKG1ha2VRdWVyeVBhY2tldChtc2dzKSksXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy5wYXJzZVF1ZXJ5UGFja2V0V2F0Y2hlclxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgcGFyc2VRdWVyeVBhY2tldFdhdGNoZXI6IHtcbiAgICAgIC8qKiBAcGFyYW0ge3N0cmluZ30gYWNrIHBhY2tldCBhY2tub3dsZWRnZW1lbnQgc3RyaW5nICovXG4gICAgICBvbkZ1bGZpbGxlZChhY2spIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlUXVlcnlQYWNrZXQoYWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbm5lY3Rpb25IYW5kbGVyOiB7XG4gICAgICAvKipcbiAqIEBwYXJhbSB7UmVtb3RlPENvbm5lY3Rpb24+fSBjb25uZWN0aW9uXG4gKiBAcGFyYW0ge0xvY2FsSWJjQWRkcmVzc30gbG9jYWxBZGRyXG4gKiBAcGFyYW0ge1JlbW90ZUliY0FkZHJlc3N9IHJlbW90ZUFkZHJcbiAqL1xuICAgICAgYXN5bmMgb25PcGVuKGNvbm5lY3Rpb24sIGxvY2FsQWRkciwgcmVtb3RlQWRkcikge1xuICAgICAgICB0cmFjZTIoYElDUSBDaGFubmVsIE9wZW5lZCBmb3IgJHtsb2NhbEFkZHJ9IGF0ICR7cmVtb3RlQWRkcn1gKTtcbiAgICAgICAgdGhpcy5zdGF0ZS5jb25uZWN0aW9uID0gY29ubmVjdGlvbjtcbiAgICAgICAgdGhpcy5zdGF0ZS5yZW1vdGVBZGRyZXNzID0gcmVtb3RlQWRkcjtcbiAgICAgICAgdGhpcy5zdGF0ZS5sb2NhbEFkZHJlc3MgPSBsb2NhbEFkZHI7XG4gICAgICB9LFxuICAgICAgYXN5bmMgb25DbG9zZShfY29ubmVjdGlvbiwgcmVhc29uKSB7XG4gICAgICAgIHRyYWNlMihgSUNRIENoYW5uZWwgY2xvc2VkLiBSZWFzb246ICR7cmVhc29ufWApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuKTtcblxuLyogLi4vb3JjaGVzdHJhdGlvbi9zcmMvZXhvcy9jb3Ntb3MtaW50ZXJjaGFpbi1zZXJ2aWNlLmpzKi9cbnZhciB7IFZvdyQgfSA9IFNoYXBlO1xudmFyIGdldElDUUNvbm5lY3Rpb25LZXkgPSAoY29udHJvbGxlckNvbm5lY3Rpb25JZCwgdmVyc2lvbikgPT4ge1xuICByZXR1cm4gYCR7Y29udHJvbGxlckNvbm5lY3Rpb25JZH06JHt2ZXJzaW9uIHx8IERFRkFVTFRfSUNRX1ZFUlNJT059YDtcbn07XG52YXIgcHJlcGFyZUNvc21vc09yY2hlc3RyYXRpb25TZXJ2aWNlS2l0ID0gKHpvbmUsIHsgd2F0Y2gsIGFzVm93IH0sIG1ha2VJY2FBY2NvdW50S2l0LCBtYWtlSUNRQ29ubmVjdGlvbktpdCkgPT4gem9uZS5leG9DbGFzc0tpdChcbiAgXCJPcmNoZXN0cmF0aW9uXCIsXG4gIHtcbiAgICByZXF1ZXN0SUNBQ2hhbm5lbFdhdGNoZXI6IE0uaW50ZXJmYWNlKFwiUmVxdWVzdElDQUNoYW5uZWxXYXRjaGVyXCIsIHtcbiAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5yZW1vdGFibGUoXCJQb3J0XCIpKS5vcHRpb25hbCh7IGNoYWluSWQ6IE0uc3RyaW5nKCksIHJlbW90ZUNvbm5BZGRyOiBNLnN0cmluZygpIH0pLnJldHVybnMoVm93JChTaGFwZS5Db25uZWN0aW9uKSlcbiAgICB9KSxcbiAgICByZXF1ZXN0SUNRQ2hhbm5lbFdhdGNoZXI6IE0uaW50ZXJmYWNlKFwiUmVxdWVzdElDUUNoYW5uZWxXYXRjaGVyXCIsIHtcbiAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5yZW1vdGFibGUoXCJQb3J0XCIpKS5vcHRpb25hbCh7XG4gICAgICAgIHJlbW90ZUNvbm5BZGRyOiBNLnN0cmluZygpLFxuICAgICAgICBpY3FMb29rdXBLZXk6IE0uc3RyaW5nKClcbiAgICAgIH0pLnJldHVybnMoVm93JChTaGFwZS5Db25uZWN0aW9uKSlcbiAgICB9KSxcbiAgICBjaGFubmVsT3BlbldhdGNoZXI6IE0uaW50ZXJmYWNlKFwiQ2hhbm5lbE9wZW5XYXRjaGVyXCIsIHtcbiAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5yZW1vdGFibGUoXCJDb25uZWN0aW9uXCIpKS5vcHRpb25hbChcbiAgICAgICAgTS5zcGxpdFJlY29yZChcbiAgICAgICAgICB7IGNvbm5lY3Rpb25LaXQ6IE0ucmVjb3JkKCksIHJldHVybkZhY2V0OiBNLnN0cmluZygpIH0sXG4gICAgICAgICAgeyBpY3FMb29rdXBLZXk6IE0uc3RyaW5nKCkgfVxuICAgICAgICApXG4gICAgICApLnJldHVybnMoTS5yZW1vdGFibGUoXCJDb25uZWN0aW9uS2l0IEhvbGRlciBmYWNldFwiKSlcbiAgICB9KSxcbiAgICBwdWJsaWM6IE0uaW50ZXJmYWNlKFwiQ29zbW9zSW50ZXJjaGFpblNlcnZpY2VcIiwge1xuICAgICAgbWFrZUFjY291bnQ6IE0uY2FsbChNLnN0cmluZygpLCBNLnN0cmluZygpLCBNLnN0cmluZygpKS5vcHRpb25hbChNLnJlY29yZCgpKS5yZXR1cm5zKFZvdyQoTS5yZW1vdGFibGUoXCJJY2FBY2NvdW50S2l0XCIpKSksXG4gICAgICBwcm92aWRlSUNRQ29ubmVjdGlvbjogTS5jYWxsKE0uc3RyaW5nKCkpLm9wdGlvbmFsKE0uc3RyaW5nKCkpLnJldHVybnMoVm93JChNLnJlbW90YWJsZShcIklDUUNvbm5lY3Rpb25cIikpKVxuICAgIH0pXG4gIH0sXG4gIC8qKiBAcGFyYW0ge1BhcnRpYWw8Q29zbW9zT3JjaGVzdHJhdGlvblBvd2Vycz59IHBvd2VycyAqL1xuICAocG93ZXJzKSA9PiB7XG4gICAgbXVzdE1hdGNoKHBvd2Vycz8ucG9ydEFsbG9jYXRvciwgTS5yZW1vdGFibGUoXCJQb3J0QWxsb2NhdG9yXCIpKTtcbiAgICBjb25zdCBpY3FDb25uZWN0aW9ucyA9IHpvbmUuZGV0YWNoZWQoKS5tYXBTdG9yZShcIklDUUNvbm5lY3Rpb25zXCIpO1xuICAgIHJldHVybiAoXG4gICAgICAvKiogQHR5cGUge09yY2hlc3RyYXRpb25TdGF0ZX0gKi9cbiAgICAgIHtcbiAgICAgICAgaWNxQ29ubmVjdGlvbnMsXG4gICAgICAgIHNoYXJlZElDUVBvcnQ6IHZvaWQgMCxcbiAgICAgICAgcmVzZXJ2ZWQ6IHZvaWQgMCxcbiAgICAgICAgLi4ucG93ZXJzXG4gICAgICB9XG4gICAgKTtcbiAgfSxcbiAge1xuICAgIHJlcXVlc3RJQ0FDaGFubmVsV2F0Y2hlcjoge1xuICAgICAgLyoqXG4gKiBAcGFyYW0ge1BvcnR9IHBvcnRcbiAqIEBwYXJhbSB7e1xuICogICBjaGFpbklkOiBzdHJpbmc7XG4gKiAgIHJlbW90ZUNvbm5BZGRyOiBSZW1vdGVJYmNBZGRyZXNzO1xuICogfX0gd2F0Y2hDb250ZXh0XG4gKi9cbiAgICAgIG9uRnVsZmlsbGVkKHBvcnQsIHsgY2hhaW5JZCwgcmVtb3RlQ29ubkFkZHIgfSkge1xuICAgICAgICBjb25zdCBjb25uZWN0aW9uS2l0ID0gbWFrZUljYUFjY291bnRLaXQoXG4gICAgICAgICAgY2hhaW5JZCxcbiAgICAgICAgICBwb3J0LFxuICAgICAgICAgIHJlbW90ZUNvbm5BZGRyXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICBFKHBvcnQpLmNvbm5lY3QocmVtb3RlQ29ubkFkZHIsIGNvbm5lY3Rpb25LaXQuY29ubmVjdGlvbkhhbmRsZXIpLFxuICAgICAgICAgIHRoaXMuZmFjZXRzLmNoYW5uZWxPcGVuV2F0Y2hlcixcbiAgICAgICAgICB7IHJldHVybkZhY2V0OiBcImFjY291bnRcIiwgY29ubmVjdGlvbktpdCB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXF1ZXN0SUNRQ2hhbm5lbFdhdGNoZXI6IHtcbiAgICAgIC8qKlxuICogQHBhcmFtIHtQb3J0fSBwb3J0XG4gKiBAcGFyYW0ge3tcbiAqICAgcmVtb3RlQ29ubkFkZHI6IFJlbW90ZUliY0FkZHJlc3M7XG4gKiAgIGljcUxvb2t1cEtleTogc3RyaW5nO1xuICogfX0gd2F0Y2hDb250ZXh0XG4gKi9cbiAgICAgIG9uRnVsZmlsbGVkKHBvcnQsIHsgcmVtb3RlQ29ubkFkZHIsIGljcUxvb2t1cEtleSB9KSB7XG4gICAgICAgIGlmICghdGhpcy5zdGF0ZS5zaGFyZWRJQ1FQb3J0KSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5zaGFyZWRJQ1FQb3J0ID0gcG9ydDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb25uZWN0aW9uS2l0ID0gbWFrZUlDUUNvbm5lY3Rpb25LaXQocG9ydCk7XG4gICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICBFKHBvcnQpLmNvbm5lY3QocmVtb3RlQ29ubkFkZHIsIGNvbm5lY3Rpb25LaXQuY29ubmVjdGlvbkhhbmRsZXIpLFxuICAgICAgICAgIHRoaXMuZmFjZXRzLmNoYW5uZWxPcGVuV2F0Y2hlcixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25uZWN0aW9uS2l0LFxuICAgICAgICAgICAgcmV0dXJuRmFjZXQ6IFwiY29ubmVjdGlvblwiLFxuICAgICAgICAgICAgaWNxTG9va3VwS2V5XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gKiBXYWl0cyBmb3IgYSBjaGFubmVsIChJQ0EsIElDUSkgdG8gb3BlbiBhbmQgcmV0dXJucyB0aGUgY29uc3VtZXItZmFjaW5nXG4gKiBmYWNldCBvZiB0aGUgQ29ubmVjdGlvbktpdCwgc3BlY2lmaWVkIGJ5IGByZXR1cm5GYWNldGAuIFNhdmVzIHRoZVxuICogQ29ubmVjdGlvbktpdCBpZiBgc2F2ZUlDUUNvbm5lY3Rpb25gIGlzIHByb3ZpZGVkLlxuICovXG4gICAgY2hhbm5lbE9wZW5XYXRjaGVyOiB7XG4gICAgICAvKipcbiAqIEBwYXJhbSB7Q29ubmVjdGlvbn0gX2Nvbm5lY3Rpb25cbiAqIEBwYXJhbSB7e1xuICogICBjb25uZWN0aW9uS2l0OiBDb25uZWN0aW9uS2l0O1xuICogICByZXR1cm5GYWNldDogc3RyaW5nO1xuICogICBpY3FMb29rdXBLZXk/OiBzdHJpbmc7XG4gKiB9fSB3YXRjaENvbnRleHRcbiAqL1xuICAgICAgb25GdWxmaWxsZWQoX2Nvbm5lY3Rpb24sIHsgY29ubmVjdGlvbktpdCwgcmV0dXJuRmFjZXQsIGljcUxvb2t1cEtleSB9KSB7XG4gICAgICAgIGlmIChpY3FMb29rdXBLZXkpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlLmljcUNvbm5lY3Rpb25zLmluaXQoXG4gICAgICAgICAgICBpY3FMb29rdXBLZXksXG4gICAgICAgICAgICAvKiogQHR5cGUge0lDUUNvbm5lY3Rpb25LaXR9ICovXG4gICAgICAgICAgICBjb25uZWN0aW9uS2l0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29ubmVjdGlvbktpdFtyZXR1cm5GYWNldF07XG4gICAgICB9XG4gICAgfSxcbiAgICBwdWJsaWM6IHtcbiAgICAgIC8qKlxuICogQHNhdGlzZmllcyB7Q29zbW9zSW50ZXJjaGFpblNlcnZpY2VbJ21ha2VBY2NvdW50J119XG4gKiBAcGFyYW0ge3N0cmluZ30gY2hhaW5JZFxuICogQHBhcmFtIHtJQkNDb25uZWN0aW9uSUR9IGhvc3RDb25uZWN0aW9uSWQgdGhlIGNvdW50ZXJwYXJ0eVxuICogICBjb25uZWN0aW9uX2lkXG4gKiBAcGFyYW0ge0lCQ0Nvbm5lY3Rpb25JRH0gY29udHJvbGxlckNvbm5lY3Rpb25JZCBzZWxmIGNvbm5lY3Rpb25faWRcbiAqIEBwYXJhbSB7SUNBQ2hhbm5lbEFkZHJlc3NPcHRzfSBbb3B0c10gb3B0aW9uYWwgdG8gY29uZmlndXJlIHRoZVxuICogICBjaGFubmVsIGFkZHJlc3MsIHN1Y2ggYXMgdmVyc2lvbiBhbmQgb3JkZXJpbmdcbiAqIEByZXR1cm5zIHtWb3c8SWNhQWNjb3VudD59XG4gKi9cbiAgICAgIG1ha2VBY2NvdW50KGNoYWluSWQsIGhvc3RDb25uZWN0aW9uSWQsIGNvbnRyb2xsZXJDb25uZWN0aW9uSWQsIG9wdHMpIHtcbiAgICAgICAgY29uc3QgcmVtb3RlQ29ubkFkZHIgPSBtYWtlSUNBQ2hhbm5lbEFkZHJlc3MoXG4gICAgICAgICAgaG9zdENvbm5lY3Rpb25JZCxcbiAgICAgICAgICBjb250cm9sbGVyQ29ubmVjdGlvbklkLFxuICAgICAgICAgIG9wdHNcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgeyBwb3J0QWxsb2NhdG9yIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgRShwb3J0QWxsb2NhdG9yKS5hbGxvY2F0ZUlDQUNvbnRyb2xsZXJQb3J0KCksXG4gICAgICAgICAgdGhpcy5mYWNldHMucmVxdWVzdElDQUNoYW5uZWxXYXRjaGVyLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNoYWluSWQsXG4gICAgICAgICAgICByZW1vdGVDb25uQWRkclxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICAvKipcbiAqIEBzYXRpc2ZpZXMge0Nvc21vc0ludGVyY2hhaW5TZXJ2aWNlWydwcm92aWRlSUNRQ29ubmVjdGlvbiddfVxuICogQHBhcmFtIHtJQkNDb25uZWN0aW9uSUR9IGNvbnRyb2xsZXJDb25uZWN0aW9uSWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdmVyc2lvbl1cbiAqIEByZXR1cm5zIHtWb3c8SUNRQ29ubmVjdGlvbj4gfCBJQ1FDb25uZWN0aW9ufVxuICovXG4gICAgICBwcm92aWRlSUNRQ29ubmVjdGlvbihjb250cm9sbGVyQ29ubmVjdGlvbklkLCB2ZXJzaW9uKSB7XG4gICAgICAgIGNvbnN0IGljcUxvb2t1cEtleSA9IGdldElDUUNvbm5lY3Rpb25LZXkoXG4gICAgICAgICAgY29udHJvbGxlckNvbm5lY3Rpb25JZCxcbiAgICAgICAgICB2ZXJzaW9uXG4gICAgICAgICk7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmljcUNvbm5lY3Rpb25zLmhhcyhpY3FMb29rdXBLZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KFxuICAgICAgICAgICAgKCkgPT4gdGhpcy5zdGF0ZS5pY3FDb25uZWN0aW9ucy5nZXQoaWNxTG9va3VwS2V5KS5jb25uZWN0aW9uXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZW1vdGVDb25uQWRkciA9IG1ha2VJQ1FDaGFubmVsQWRkcmVzcyhcbiAgICAgICAgICBjb250cm9sbGVyQ29ubmVjdGlvbklkLFxuICAgICAgICAgIHZlcnNpb25cbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgeyBwb3J0QWxsb2NhdG9yLCBzaGFyZWRJQ1FQb3J0IH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCBwb3J0T3JQb3J0Vm93ID0gc2hhcmVkSUNRUG9ydCB8fCBFKHBvcnRBbGxvY2F0b3IpLmFsbG9jYXRlSUNRQ29udHJvbGxlclBvcnQoKTtcbiAgICAgICAgcmV0dXJuIHdhdGNoKHBvcnRPclBvcnRWb3csIHRoaXMuZmFjZXRzLnJlcXVlc3RJQ1FDaGFubmVsV2F0Y2hlciwge1xuICAgICAgICAgIHJlbW90ZUNvbm5BZGRyLFxuICAgICAgICAgIGljcUxvb2t1cEtleVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICBzdGF0ZVNoYXBlOiB7XG4gICAgICBpY3FDb25uZWN0aW9uczogTS5yZW1vdGFibGUoXCJpY3FDb25uZWN0aW9ucyBtYXBTdG9yZVwiKSxcbiAgICAgIHNoYXJlZElDUVBvcnQ6IE0ub3IoTS5yZW1vdGFibGUoXCJQb3J0XCIpLCBNLnVuZGVmaW5lZCgpKSxcbiAgICAgIHBvcnRBbGxvY2F0b3I6IE0ucmVtb3RhYmxlKFwiUG9ydEFsbG9jYXRvclwiKSxcbiAgICAgIHJlc2VydmVkOiBNLmFueSgpXG4gICAgfVxuICB9XG4pO1xudmFyIHByZXBhcmVDb3Ntb3NJbnRlcmNoYWluU2VydmljZSA9ICh6b25lLCB2b3dUb29scykgPT4ge1xuICBjb25zdCBtYWtlSWNhQWNjb3VudEtpdCA9IHByZXBhcmVJY2FBY2NvdW50S2l0KHpvbmUsIHZvd1Rvb2xzKTtcbiAgY29uc3QgbWFrZUlDUUNvbm5lY3Rpb25LaXQgPSBwcmVwYXJlSUNRQ29ubmVjdGlvbktpdCh6b25lLCB2b3dUb29scyk7XG4gIGNvbnN0IG1ha2VDb3Ntb3NPcmNoZXN0cmF0aW9uU2VydmljZUtpdCA9IHByZXBhcmVDb3Ntb3NPcmNoZXN0cmF0aW9uU2VydmljZUtpdChcbiAgICB6b25lLFxuICAgIHZvd1Rvb2xzLFxuICAgIG1ha2VJY2FBY2NvdW50S2l0LFxuICAgIG1ha2VJQ1FDb25uZWN0aW9uS2l0XG4gICk7XG4gIGNvbnN0IG1ha2VDb3Ntb3NJbnRlcmNoYWluU2VydmljZSA9IHBpY2tGYWNldChcbiAgICBtYWtlQ29zbW9zT3JjaGVzdHJhdGlvblNlcnZpY2VLaXQsXG4gICAgXCJwdWJsaWNcIlxuICApO1xuICByZXR1cm4gbWFrZUNvc21vc0ludGVyY2hhaW5TZXJ2aWNlO1xufTtcbmhhcmRlbihwcmVwYXJlQ29zbW9zSW50ZXJjaGFpblNlcnZpY2UpO1xuXG4vKiAuLi9hc3luYy1mbG93L3NyYy9jb252ZXJ0LmpzKi9cbnZhciBtYWtlQ29udmVydCA9IChjb252ZXJ0UmVtb3RhYmxlLCBjb252ZXJ0UHJvbWlzZU9yVm93LCBjb252ZXJ0RXJyb3IpID0+IHtcbiAgY29uc3QgY29udmVydFJlY3VyID0gKHNwZWNpbWVuLCBsYWJlbCkgPT4ge1xuICAgIGlmIChsYWJlbCA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gaW5uZXJDb252ZXJ0KHNwZWNpbWVuKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBpbm5lckNvbnZlcnQoc3BlY2ltZW4pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhyb3dMYWJlbGVkKGVyciwgbGFiZWwpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaW5uZXJDb252ZXJ0ID0gKHNwZWNpbWVuKSA9PiB7XG4gICAgaWYgKGlzUHJpbWl0aXZlMihzcGVjaW1lbikpIHtcbiAgICAgIHJldHVybiBzcGVjaW1lbjtcbiAgICB9XG4gICAgY29uc3QgcGFzc1N0eWxlID0gcGFzc1N0eWxlT2Yoc3BlY2ltZW4pO1xuICAgIHN3aXRjaCAocGFzc1N0eWxlKSB7XG4gICAgICBjYXNlIFwiY29weUFycmF5XCI6IHtcbiAgICAgICAgcmV0dXJuIHNwZWNpbWVuLm1hcCgoZWxlbWVudCwgaTMpID0+IGNvbnZlcnRSZWN1cihlbGVtZW50LCBpMykpO1xuICAgICAgfVxuICAgICAgY2FzZSBcImNvcHlSZWNvcmRcIjoge1xuICAgICAgICByZXR1cm4gb2JqZWN0TWFwKHNwZWNpbWVuLCAodmFsdWUsIG5hbWUpID0+IGNvbnZlcnRSZWN1cih2YWx1ZSwgbmFtZSkpO1xuICAgICAgfVxuICAgICAgY2FzZSBcInRhZ2dlZFwiOiB7XG4gICAgICAgIGlmIChpc1ZvdyhzcGVjaW1lbikpIHtcbiAgICAgICAgICByZXR1cm4gY29udmVydFByb21pc2VPclZvdyhzcGVjaW1lbik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFnID0gZ2V0VGFnKHNwZWNpbWVuKTtcbiAgICAgICAgY29uc3QgeyBwYXlsb2FkIH0gPSBzcGVjaW1lbjtcbiAgICAgICAgcmV0dXJuIG1ha2VUYWdnZWQodGFnLCBjb252ZXJ0UmVjdXIocGF5bG9hZCwgYCR7dGFnfSBwYXlsb2FkYCkpO1xuICAgICAgfVxuICAgICAgY2FzZSBcImVycm9yXCI6IHtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnRFcnJvcihzcGVjaW1lbik7XG4gICAgICB9XG4gICAgICBjYXNlIFwicmVtb3RhYmxlXCI6IHtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnRSZW1vdGFibGUoc3BlY2ltZW4pO1xuICAgICAgfVxuICAgICAgY2FzZSBcInByb21pc2VcIjoge1xuICAgICAgICByZXR1cm4gY29udmVydFByb21pc2VPclZvdyhzcGVjaW1lbik7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgdW5leHBlY3RlZCBwYXNzU3R5bGUgJHtxdW90ZShwYXNzU3R5bGUpfWA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBjb252ZXJ0ID0gKHNwZWNpbWVuLCBsYWJlbCA9IHZvaWQgMCkgPT4gY29udmVydFJlY3VyKGhhcmRlbihzcGVjaW1lbiksIGxhYmVsKTtcbiAgcmV0dXJuIGhhcmRlbihjb252ZXJ0KTtcbn07XG52YXIgbWFrZUNvbnZlcnRLaXQgPSAoYmlqZWN0aW9uLCBtYWtlR3Vlc3RGb3JIb3N0UmVtb3RhYmxlLCBtYWtlR3Vlc3RGb3JIb3N0Vm93KSA9PiB7XG4gIGNvbnN0IGd1ZXN0VG9Ib3N0ID0gbWFrZUNvbnZlcnQoXG4gICAgKGdSZW0pID0+IHtcbiAgICAgIGlmIChiaWplY3Rpb24uaGFzR3Vlc3QoZ1JlbSkpIHtcbiAgICAgICAgcmV0dXJuIGJpamVjdGlvbi5ndWVzdFRvSG9zdChnUmVtKTtcbiAgICAgIH1cbiAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgY2Fubm90IHlldCBzZW5kIGd1ZXN0IHJlbW90YWJsZXMgJHtnUmVtfWA7XG4gICAgfSxcbiAgICAoZ1Byb20pID0+IHtcbiAgICAgIGlmIChiaWplY3Rpb24uaGFzR3Vlc3QoZ1Byb20pKSB7XG4gICAgICAgIHJldHVybiBiaWplY3Rpb24uZ3Vlc3RUb0hvc3QoZ1Byb20pO1xuICAgICAgfVxuICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBjYW5ub3QgeWV0IHNlbmQgZ3Vlc3QgcHJvbWlzZXMgJHtnUHJvbX1gO1xuICAgIH0sXG4gICAgKGdFcnIpID0+IHtcbiAgICAgIGNvbnN0IGhFcnIgPSBoYXJkZW4oXG4gICAgICAgIG1ha2VFcnJvcihnRXJyLm1lc3NhZ2UsIGdldEVycm9yQ29uc3RydWN0b3IoZ0Vyci5uYW1lKSlcbiAgICAgICk7XG4gICAgICBub3RlKGhFcnIsIHJlZGFjdGVkYGZyb20gZ3Vlc3QgZXJyb3IgJHtnRXJyfWApO1xuICAgICAgcmV0dXJuIGhFcnI7XG4gICAgfVxuICApO1xuICBjb25zdCBob3N0VG9HdWVzdCA9IG1ha2VDb252ZXJ0KFxuICAgIChoUmVtKSA9PiB7XG4gICAgICBpZiAoYmlqZWN0aW9uLmhhc0hvc3QoaFJlbSkpIHtcbiAgICAgICAgcmV0dXJuIGJpamVjdGlvbi5ob3N0VG9HdWVzdChoUmVtKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGdSZW0gPSBtYWtlR3Vlc3RGb3JIb3N0UmVtb3RhYmxlKGhSZW0pO1xuICAgICAgcmV0dXJuIGJpamVjdGlvbi51bndyYXBJbml0KGdSZW0sIGhSZW0pO1xuICAgIH0sXG4gICAgKGhWb3cpID0+IHtcbiAgICAgIGlmIChiaWplY3Rpb24uaGFzSG9zdChoVm93KSkge1xuICAgICAgICByZXR1cm4gYmlqZWN0aW9uLmhvc3RUb0d1ZXN0KGhWb3cpO1xuICAgICAgfVxuICAgICAgY29uc3QgZ1AgPSBtYWtlR3Vlc3RGb3JIb3N0Vm93KGhWb3cpO1xuICAgICAgcmV0dXJuIGJpamVjdGlvbi51bndyYXBJbml0KGdQLCBoVm93KTtcbiAgICB9LFxuICAgIChoRXJyKSA9PiB7XG4gICAgICBjb25zdCBnRXJyID0gaGFyZGVuKFxuICAgICAgICBtYWtlRXJyb3IoaEVyci5tZXNzYWdlLCBnZXRFcnJvckNvbnN0cnVjdG9yKGhFcnIubmFtZSkpXG4gICAgICApO1xuICAgICAgbm90ZShnRXJyLCByZWRhY3RlZGBmcm9tIGhvc3QgZXJyb3IgJHtoRXJyfWApO1xuICAgICAgcmV0dXJuIGdFcnI7XG4gICAgfVxuICApO1xuICByZXR1cm4gaGFyZGVuKHsgZ3Vlc3RUb0hvc3QsIGhvc3RUb0d1ZXN0IH0pO1xufTtcbmhhcmRlbihtYWtlQ29udmVydEtpdCk7XG5cbi8qIC4uL2FzeW5jLWZsb3cvc3JjL2VxdWF0ZS5qcyovXG52YXIgeyBpczogaXM1IH0gPSBPYmplY3Q7XG52YXIgbWFrZUVxdWF0ZSA9IChiaWplY3Rpb24pID0+IHtcbiAgY29uc3QgZXF1YXRlID0gKGczLCBoLCBsYWJlbCkgPT4ge1xuICAgIGlmIChsYWJlbCA9PT0gdm9pZCAwKSB7XG4gICAgICBpbm5lckVxdWF0ZShnMywgaCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBpbm5lckVxdWF0ZShnMywgaCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aHJvd0xhYmVsZWQoZXJyLCBsYWJlbCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBpbm5lckVxdWF0ZSA9IChnMywgaCkgPT4ge1xuICAgIGlmIChpc1ByaW1pdGl2ZTIoZzMpKSB7XG4gICAgICBpczUoZzMsIGgpIHx8IC8qIHNlcGFyYXRlIGxpbmUgc28gSSBjYW4gc2V0IGEgYnJlYWtwb2ludCovXG4gICAgICB0aHJvd1JlZGFjdGVkYHVuZXF1YWwgJHtnM30gdnMgJHtofWA7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChiaWplY3Rpb24uaGFzR3Vlc3QoZzMpICYmIGJpamVjdGlvbi5ndWVzdFRvSG9zdChnMykgPT09IGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZ1Bhc3NTdHlsZSA9IHBhc3NTdHlsZU9mKGczKTtcbiAgICBpZiAoZ1Bhc3NTdHlsZSA9PT0gXCJwcm9taXNlXCIgJiYgaXNWb3coaCkpIHtcbiAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgZ3Vlc3QgcHJvbWlzZXMgbm90IHlldCBwYXNzYWJsZWA7XG4gICAgfVxuICAgIGNvbnN0IGhQYXNzU3R5bGUgPSBwYXNzU3R5bGVPZihoKTtcbiAgICBnUGFzc1N0eWxlID09PSBoUGFzc1N0eWxlIHx8IHRocm93UmVkYWN0ZWRgdW5lcXVhbCBwYXNzU3R5bGVzICR7cXVvdGUoZ1Bhc3NTdHlsZSl9IHZzICR7cXVvdGUoaFBhc3NTdHlsZSl9YDtcbiAgICBzd2l0Y2ggKGdQYXNzU3R5bGUpIHtcbiAgICAgIGNhc2UgXCJjb3B5QXJyYXlcIjoge1xuICAgICAgICBlcXVhdGUoZzMubGVuZ3RoLCBoLmxlbmd0aCwgXCJsZW5ndGhcIik7XG4gICAgICAgIGczLmZvckVhY2goKGdFbCwgaTMpID0+IGVxdWF0ZShnRWwsIGhbaTNdLCBpMykpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjYXNlIFwiY29weVJlY29yZFwiOiB7XG4gICAgICAgIGNvbnN0IGdOYW1lcyA9IHJlY29yZE5hbWVzKGczKTtcbiAgICAgICAgY29uc3QgaE5hbWVzID0gcmVjb3JkTmFtZXMoaCk7XG4gICAgICAgIGVxdWF0ZShnTmFtZXMsIGhOYW1lcywgXCJwcm9wZXJ0eU5hbWVzXCIpO1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgZ05hbWVzKSB7XG4gICAgICAgICAgZXF1YXRlKGczW25hbWVdLCBoW25hbWVdLCBuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjYXNlIFwidGFnZ2VkXCI6IHtcbiAgICAgICAgZXF1YXRlKGdldFRhZyhnMyksIGdldFRhZyhoKSwgXCJ0YWdcIik7XG4gICAgICAgIGVxdWF0ZShnMy5wYXlsb2FkLCBoLnBheWxvYWQsIFwicGF5bG9hZFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY2FzZSBcImVycm9yXCI6IHtcbiAgICAgICAgZXF1YXRlKGczLm5hbWUsIGgubmFtZSwgXCJlcnJvciBuYW1lXCIpO1xuICAgICAgICBub3RlKGczLCByZWRhY3RlZGByZXBsYXkgb2YgZXJyb3IgJHtofWApO1xuICAgICAgICBub3RlKGgsIHJlZGFjdGVkYHJlcGxheWVkIGFzIGVycm9yICR7ZzN9YCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJyZW1vdGFibGVcIjoge1xuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYGNhbm5vdCB5ZXQgc2VuZCBndWVzdCByZW1vdGFibGVzIHRvIGhvc3QgJHtnM30gdnMgJHtofWA7XG4gICAgICB9XG4gICAgICBjYXNlIFwicHJvbWlzZVwiOiB7XG4gICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgY2Fubm90IHlldCBzZW5kIGd1ZXN0IHByb21pc2VzIHRvIGhvc3QgJHtnM30gdnMgJHtofWA7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgdW5leHBlY3RlZCBwYXNzU3R5bGUgJHtxdW90ZShnUGFzc1N0eWxlKX1gO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhhcmRlbihlcXVhdGUpO1xufTtcbmhhcmRlbihtYWtlRXF1YXRlKTtcblxuLyogLi4vYXN5bmMtZmxvdy9zcmMvcmVwbGF5LW1lbWJyYW5lLmpzKi9cbnZhciB7IGZyb21FbnRyaWVzOiBmcm9tRW50cmllczEzLCBkZWZpbmVQcm9wZXJ0aWVzOiBkZWZpbmVQcm9wZXJ0aWVzNSwgYXNzaWduOiBhc3NpZ24zIH0gPSBPYmplY3Q7XG52YXIgbWFrZVJlcGxheU1lbWJyYW5lID0gKGFyZykgPT4ge1xuICBjb25zdCBub0R1bmRlckFyZyA9IChcbiAgICAvKiogQHR5cGUge3R5cGVvZiBhcmd9ICovXG4gICAgT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGFyZykuZmlsdGVyKChba10pID0+ICFrLnN0YXJ0c1dpdGgoXCJfX1wiKSkpXG4gICk7XG4gIHJldHVybiBtYWtlUmVwbGF5TWVtYnJhbmVGb3JUZXN0aW5nKG5vRHVuZGVyQXJnKTtcbn07XG52YXIgbWFrZVJlcGxheU1lbWJyYW5lRm9yVGVzdGluZyA9ICh7XG4gIGxvZyxcbiAgYmlqZWN0aW9uLFxuICB2b3dUb29scyxcbiAgd2F0Y2hXYWtlLFxuICBwYW5pYyxcbiAgX19ldmVudHVhbFNlbmRGb3JUZXN0aW5nXG59KSA9PiB7XG4gIGNvbnN0IHsgd2hlbiwgbWFrZVZvd0tpdCB9ID0gdm93VG9vbHM7XG4gIGNvbnN0IGVxdWF0ZSA9IG1ha2VFcXVhdGUoYmlqZWN0aW9uKTtcbiAgY29uc3QgZ3Vlc3RQcm9taXNlTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG4gIGxldCBzdG9wcGVkID0gZmFsc2U7XG4gIGNvbnN0IFBhbmljID0gKHRlbXBsYXRlLCAuLi5hcmdzKSA9PiBwYW5pYyhtYWtlRXJyb3IocmVkYWN0ZWQodGVtcGxhdGUsIC4uLmFyZ3MpKSk7XG4gIGNvbnN0IHN0YXJ0R2VuZXJhdGlvbiA9IChnZW5lcmF0aW9uKSA9PiB7XG4gICAgTnVtYmVyLmlzU2FmZUludGVnZXIoZ2VuZXJhdGlvbikgfHwgdGhyb3dSZWRhY3RlZGBnZW5lcmF0aW9uIGV4cGVjdGVkIGludGVnZXI7IGdvdCAke2dlbmVyYXRpb259YDtcbiAgICBnZW5lcmF0aW9uID49IDAgfHwgdGhyb3dSZWRhY3RlZGBnZW5lcmF0aW9uIGV4cGVjdGVkIG5vbi1uZWdhdGl2ZTsgZ290ICR7Z2VuZXJhdGlvbn1gO1xuICB9O1xuICBjb25zdCBkb0Z1bGZpbGwgPSAoaG9zdFZvdywgaG9zdEZ1bGZpbGxtZW50KSA9PiB7XG4gICAgY29uc3QgZ3Vlc3RQcm9taXNlID0gaG9zdFRvR3Vlc3QoaG9zdFZvdyk7XG4gICAgY29uc3Qgc3RhdHVzID0gZ3Vlc3RQcm9taXNlTWFwLmdldChndWVzdFByb21pc2UpO1xuICAgIGlmICghc3RhdHVzIHx8IHN0YXR1cyA9PT0gXCJzZXR0bGVkXCIpIHtcbiAgICAgIHRocm93UmVkYWN0ZWRgZG9GdWxmaWxsIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbiBhIHJlZ2lzdGVyZWQgdW5yZXNvbHZlZCBwcm9taXNlYDtcbiAgICB9XG4gICAgY29uc3QgZ3Vlc3RGdWxmaWxsbWVudCA9IGhvc3RUb0d1ZXN0KGhvc3RGdWxmaWxsbWVudCk7XG4gICAgc3RhdHVzLnJlc29sdmUoZ3Vlc3RGdWxmaWxsbWVudCk7XG4gICAgZ3Vlc3RQcm9taXNlTWFwLnNldChndWVzdFByb21pc2UsIFwic2V0dGxlZFwiKTtcbiAgfTtcbiAgY29uc3QgZG9SZWplY3QgPSAoaG9zdFZvdywgaG9zdFJlYXNvbikgPT4ge1xuICAgIGNvbnN0IGd1ZXN0UHJvbWlzZSA9IGhvc3RUb0d1ZXN0KGhvc3RWb3cpO1xuICAgIGNvbnN0IHN0YXR1cyA9IGd1ZXN0UHJvbWlzZU1hcC5nZXQoZ3Vlc3RQcm9taXNlKTtcbiAgICBpZiAoIXN0YXR1cyB8fCBzdGF0dXMgPT09IFwic2V0dGxlZFwiKSB7XG4gICAgICB0aHJvd1JlZGFjdGVkYGRvUmVqZWN0IHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbiBhIHJlZ2lzdGVyZWQgdW5yZXNvbHZlZCBwcm9taXNlYDtcbiAgICB9XG4gICAgY29uc3QgZ3Vlc3RSZWFzb24gPSBob3N0VG9HdWVzdChob3N0UmVhc29uKTtcbiAgICBzdGF0dXMucmVqZWN0KGd1ZXN0UmVhc29uKTtcbiAgICBndWVzdFByb21pc2VNYXAuc2V0KGd1ZXN0UHJvbWlzZSwgXCJzZXR0bGVkXCIpO1xuICB9O1xuICBjb25zdCBkb1JldHVybiA9IChjYWxsSW5kZXgsIGhvc3RSZXN1bHQpID0+IHtcbiAgICB1bm5lc3RJbnRlcnByZXRlcihjYWxsSW5kZXgpO1xuICAgIGNvbnN0IGd1ZXN0UmVzdWx0ID0gaG9zdFRvR3Vlc3QoaG9zdFJlc3VsdCk7XG4gICAgcmV0dXJuIGhhcmRlbih7XG4gICAgICBraW5kOiBcInJldHVyblwiLFxuICAgICAgcmVzdWx0OiBndWVzdFJlc3VsdFxuICAgIH0pO1xuICB9O1xuICBjb25zdCBkb1Rocm93ID0gKGNhbGxJbmRleCwgaG9zdFByb2JsZW0pID0+IHtcbiAgICB1bm5lc3RJbnRlcnByZXRlcihjYWxsSW5kZXgpO1xuICAgIGNvbnN0IGd1ZXN0UHJvYmxlbSA9IGhvc3RUb0d1ZXN0KGhvc3RQcm9ibGVtKTtcbiAgICByZXR1cm4gaGFyZGVuKHtcbiAgICAgIGtpbmQ6IFwidGhyb3dcIixcbiAgICAgIHByb2JsZW06IGd1ZXN0UHJvYmxlbVxuICAgIH0pO1xuICB9O1xuICBjb25zdCBwZXJmb3JtQ2FsbCA9IChob3N0VGFyZ2V0LCBvcHRWZXJiLCBob3N0QXJncywgY2FsbEluZGV4KSA9PiB7XG4gICAgbGV0IGhvc3RSZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgIGhvc3RSZXN1bHQgPSBvcHRWZXJiID8gaG9zdFRhcmdldFtvcHRWZXJiXSguLi5ob3N0QXJncykgOiBob3N0VGFyZ2V0KC4uLmhvc3RBcmdzKTtcbiAgICAgIGhvc3RUb0d1ZXN0KGhvc3RSZXN1bHQsIGBjb252ZXJ0aW5nICR7b3B0VmVyYiB8fCBcImhvc3RcIn0gcmVzdWx0YCk7XG4gICAgfSBjYXRjaCAoaG9zdFByb2JsZW0pIHtcbiAgICAgIHJldHVybiBsb2dEbyhuZXN0RGlzcGF0Y2gsIGhhcmRlbihbXCJkb1Rocm93XCIsIGNhbGxJbmRleCwgaG9zdFByb2JsZW1dKSk7XG4gICAgfVxuICAgIHJldHVybiBsb2dEbyhuZXN0RGlzcGF0Y2gsIGhhcmRlbihbXCJkb1JldHVyblwiLCBjYWxsSW5kZXgsIGhvc3RSZXN1bHRdKSk7XG4gIH07XG4gIGNvbnN0IGd1ZXN0Q2FsbHNIb3N0ID0gKGd1ZXN0VGFyZ2V0LCBvcHRWZXJiLCBndWVzdEFyZ3MsIGNhbGxJbmRleCkgPT4ge1xuICAgIGlmIChzdG9wcGVkIHx8ICFiaWplY3Rpb24uaGFzR3Vlc3QoZ3Vlc3RUYXJnZXQpKSB7XG4gICAgICBjb25zdCBleHRyYURpYWdub3N0aWMgPSBjYWxsU3RhY2subGVuZ3RoID09PSAwID8gXCJcIiA6IChcbiAgICAgICAgLyogVGhpcyBjYXNlIHNob3VsZCBvbmx5IGhhcHBlbiB3aGVuIHRoZSBjYWxsU3RhY2sgaXMgZW1wdHkqL1xuICAgICAgICBgIHdpdGggbm9uLWVtcHR5IGNhbGxzdGFjayAke3F1b3RlKGNhbGxTdGFjayl9O2BcbiAgICAgICk7XG4gICAgICB0aHJvd1JlZGFjdGVkYENhbGxlZCBmcm9tIGEgcHJldmlvdXMgcnVuOiAke2d1ZXN0VGFyZ2V0fSR7YmFyZU9yUXVvdGUoZXh0cmFEaWFnbm9zdGljKX1gO1xuICAgIH1cbiAgICBsZXQgb3V0Y29tZTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZ3Vlc3RFbnRyeSA9IGhhcmRlbihbXG4gICAgICAgIFwiY2hlY2tDYWxsXCIsXG4gICAgICAgIGd1ZXN0VGFyZ2V0LFxuICAgICAgICBvcHRWZXJiLFxuICAgICAgICBndWVzdEFyZ3MsXG4gICAgICAgIGNhbGxJbmRleFxuICAgICAgXSk7XG4gICAgICBpZiAobG9nLmlzUmVwbGF5aW5nKCkpIHtcbiAgICAgICAgY29uc3QgZW50cnkgPSBsb2cubmV4dEVudHJ5KCk7XG4gICAgICAgIGVxdWF0ZShcbiAgICAgICAgICBndWVzdEVudHJ5LFxuICAgICAgICAgIGVudHJ5LFxuICAgICAgICAgIGByZXBsYXkgJHtjYWxsSW5kZXh9OlxuICAgICAke3F1b3RlKGd1ZXN0RW50cnkpfVxuICB2cyAke3F1b3RlKGVudHJ5KX1cbiAgICBgXG4gICAgICAgICk7XG4gICAgICAgIG91dGNvbWUgPSAvKiogQHR5cGUge091dGNvbWV9ICovXG4gICAgICAgIG5lc3RJbnRlcnByZXRlcihjYWxsSW5kZXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZW50cnkgPSBndWVzdFRvSG9zdChndWVzdEVudHJ5KTtcbiAgICAgICAgbG9nLnB1c2hFbnRyeShlbnRyeSk7XG4gICAgICAgIGNvbnN0IFtfLCAuLi5hcmdzXSA9IGVudHJ5O1xuICAgICAgICBuZXN0SW50ZXJwcmV0ZXIoY2FsbEluZGV4KTtcbiAgICAgICAgb3V0Y29tZSA9IHBlcmZvcm1DYWxsKC4uLmFyZ3MpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGZhdGFsRXJyb3IpIHtcbiAgICAgIHRocm93IHBhbmljKGZhdGFsRXJyb3IpO1xuICAgIH1cbiAgICBzd2l0Y2ggKG91dGNvbWUua2luZCkge1xuICAgICAgY2FzZSBcInJldHVyblwiOiB7XG4gICAgICAgIHJldHVybiBvdXRjb21lLnJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJ0aHJvd1wiOiB7XG4gICAgICAgIHRocm93IG91dGNvbWUucHJvYmxlbTtcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgdGhyb3cgUGFuaWNgdW5leHBlY3RlZCBvdXRjb21lIGtpbmQgJHtxdW90ZShvdXRjb21lLmtpbmQpfWA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBwZXJmb3JtU2VuZE9ubHkgPSAoaG9zdFRhcmdldCwgb3B0VmVyYiwgaG9zdEFyZ3MpID0+IHtcbiAgICB0cnkge1xuICAgICAgb3B0VmVyYiA9PT0gdm9pZCAwID8gaGVhcFZvd0Uuc2VuZE9ubHkoaG9zdFRhcmdldCkoLi4uaG9zdEFyZ3MpIDogaGVhcFZvd0Uuc2VuZE9ubHkoaG9zdFRhcmdldClbb3B0VmVyYl0oLi4uaG9zdEFyZ3MpO1xuICAgIH0gY2F0Y2ggKGhvc3RQcm9ibGVtKSB7XG4gICAgICB0aHJvdyBQYW5pY2BpbnRlcm5hbDogZXZlbnR1YWwgc2VuZE9ubHkgc3luY2hyb25vdXNseSBmYWlsZWQgJHtob3N0UHJvYmxlbX1gO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcGVyZm9ybVNlbmQgPSAoaG9zdFRhcmdldCwgb3B0VmVyYiwgaG9zdEFyZ3MsIGNhbGxJbmRleCwgaG9zdFJlc3VsdEtpdCwgZ3Vlc3RSZXR1cm5lZFApID0+IHtcbiAgICBjb25zdCB7IHZvdywgcmVzb2x2ZXIgfSA9IGhvc3RSZXN1bHRLaXQ7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGhvc3RQcm9taXNlID0gb3B0VmVyYiA9PT0gdm9pZCAwID8gaGVhcFZvd0UoaG9zdFRhcmdldCkoLi4uaG9zdEFyZ3MpIDogaGVhcFZvd0UoaG9zdFRhcmdldClbb3B0VmVyYl0oLi4uaG9zdEFyZ3MpO1xuICAgICAgcmVzb2x2ZXIucmVzb2x2ZShob3N0UHJvbWlzZSk7XG4gICAgfSBjYXRjaCAoaG9zdFByb2JsZW0pIHtcbiAgICAgIHRocm93IFBhbmljYGludGVybmFsOiBldmVudHVhbCBzZW5kIHN5bmNocm9ub3VzbHkgZmFpbGVkICR7aG9zdFByb2JsZW19YDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGVudHJ5ID0gaGFyZGVuKFtcImRvUmV0dXJuXCIsIGNhbGxJbmRleCwgdm93XSk7XG4gICAgICBsb2cucHVzaEVudHJ5KGVudHJ5KTtcbiAgICAgIGNvbnN0IGd1ZXN0UHJvbWlzZSA9IG1ha2VHdWVzdEZvckhvc3RWb3codm93LCBndWVzdFJldHVybmVkUCk7XG4gICAgICBkb1JldHVybihjYWxsSW5kZXgsIHZvdyk7XG4gICAgICByZXR1cm4gaGFyZGVuKHtcbiAgICAgICAga2luZDogXCJyZXR1cm5cIixcbiAgICAgICAgcmVzdWx0OiBndWVzdFByb21pc2VcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKHByb2JsZW0pIHtcbiAgICAgIHRocm93IHBhbmljKHByb2JsZW0pO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZ3Vlc3RIYW5kbGVyID0gaGFyZGVuKHtcbiAgICBhcHBseU1ldGhvZFNlbmRPbmx5KGd1ZXN0VGFyZ2V0LCBvcHRWZXJiLCBndWVzdEFyZ3MpIHtcbiAgICAgIF9fZXZlbnR1YWxTZW5kRm9yVGVzdGluZyB8fCBQYW5pY2BndWVzdCBldmVudHVhbCBhcHBseU1ldGhvZFNlbmRPbmx5IG5vdCB5ZXQgc3VwcG9ydGVkOiAke2d1ZXN0VGFyZ2V0fS4ke2JhcmVPclF1b3RlKG9wdFZlcmIpfWA7XG4gICAgICBjb25zdCBjYWxsSW5kZXggPSBsb2cuZ2V0SW5kZXgoKTtcbiAgICAgIGlmIChzdG9wcGVkIHx8ICFiaWplY3Rpb24uaGFzR3Vlc3QoZ3Vlc3RUYXJnZXQpKSB7XG4gICAgICAgIHRocm93UmVkYWN0ZWRgU2VudCBmcm9tIGEgcHJldmlvdXMgcnVuOiAke2d1ZXN0VGFyZ2V0fWA7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBndWVzdEVudHJ5ID0gaGFyZGVuKFtcbiAgICAgICAgICBcImNoZWNrU2VuZE9ubHlcIixcbiAgICAgICAgICBndWVzdFRhcmdldCxcbiAgICAgICAgICBvcHRWZXJiLFxuICAgICAgICAgIGd1ZXN0QXJncyxcbiAgICAgICAgICBjYWxsSW5kZXhcbiAgICAgICAgXSk7XG4gICAgICAgIGlmIChsb2cuaXNSZXBsYXlpbmcoKSkge1xuICAgICAgICAgIGNvbnN0IGVudHJ5ID0gbG9nLm5leHRFbnRyeSgpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBlcXVhdGUoZ3Vlc3RFbnRyeSwgZW50cnkpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVxdWF0ZUVycikge1xuICAgICAgICAgICAgdGhyb3dMYWJlbGVkKFxuICAgICAgICAgICAgICBlcXVhdGVFcnIsXG4gICAgICAgICAgICAgIGByZXBsYXkgJHtjYWxsSW5kZXh9OlxuICAgICAke3F1b3RlKGd1ZXN0RW50cnkpfVxuICB2cyAke3F1b3RlKGVudHJ5KX1cbiAgICBgXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBlbnRyeSA9IGd1ZXN0VG9Ib3N0KGd1ZXN0RW50cnkpO1xuICAgICAgICAgIGxvZy5wdXNoRW50cnkoZW50cnkpO1xuICAgICAgICAgIGNvbnN0IFtfb3AsIGhvc3RUYXJnZXQsIF9vcHRWZXJiLCBob3N0QXJncywgX2NhbGxJbmRleF0gPSBlbnRyeTtcbiAgICAgICAgICBwZXJmb3JtU2VuZE9ubHkoaG9zdFRhcmdldCwgb3B0VmVyYiwgaG9zdEFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChmYXRhbEVycm9yKSB7XG4gICAgICAgIHRocm93IHBhbmljKGZhdGFsRXJyb3IpO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXBwbHlNZXRob2QoZ3Vlc3RUYXJnZXQsIG9wdFZlcmIsIGd1ZXN0QXJncywgZ3Vlc3RSZXR1cm5lZFApIHtcbiAgICAgIF9fZXZlbnR1YWxTZW5kRm9yVGVzdGluZyB8fCBQYW5pY2BndWVzdCBldmVudHVhbCBhcHBseU1ldGhvZCBub3QgeWV0IHN1cHBvcnRlZDogJHtndWVzdFRhcmdldH0uJHtiYXJlT3JRdW90ZShvcHRWZXJiKX0gLT4gJHtiYXJlT3JRdW90ZShndWVzdFJldHVybmVkUCl9YDtcbiAgICAgIGNvbnN0IGNhbGxJbmRleCA9IGxvZy5nZXRJbmRleCgpO1xuICAgICAgaWYgKHN0b3BwZWQgfHwgIWJpamVjdGlvbi5oYXNHdWVzdChndWVzdFRhcmdldCkpIHtcbiAgICAgICAgdGhyb3dSZWRhY3RlZGBTZW50IGZyb20gYSBwcmV2aW91cyBydW46ICR7Z3Vlc3RUYXJnZXR9YDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGhvc3RSZXN1bHRLaXQgPSBtYWtlVm93S2l0KCk7XG4gICAgICBjb25zdCBnMyA9IGJpamVjdGlvbi51bndyYXBJbml0KGd1ZXN0UmV0dXJuZWRQLCBob3N0UmVzdWx0S2l0LnZvdyk7XG4gICAgICBnMyA9PT0gZ3Vlc3RSZXR1cm5lZFAgfHwgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbDogZ3Vlc3RSZXR1cm5lZFAgc2hvdWxkIG5vdCB1bndyYXA6ICR7ZzN9IHZzICR7Z3Vlc3RSZXR1cm5lZFB9YDtcbiAgICAgIGxldCBvdXRjb21lO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZ3Vlc3RFbnRyeSA9IGhhcmRlbihbXG4gICAgICAgICAgXCJjaGVja1NlbmRcIixcbiAgICAgICAgICBndWVzdFRhcmdldCxcbiAgICAgICAgICBvcHRWZXJiLFxuICAgICAgICAgIGd1ZXN0QXJncyxcbiAgICAgICAgICBjYWxsSW5kZXhcbiAgICAgICAgXSk7XG4gICAgICAgIGlmIChsb2cuaXNSZXBsYXlpbmcoKSkge1xuICAgICAgICAgIGNvbnN0IGVudHJ5ID0gbG9nLm5leHRFbnRyeSgpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBlcXVhdGUoZ3Vlc3RFbnRyeSwgZW50cnkpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVxdWF0ZUVycikge1xuICAgICAgICAgICAgdGhyb3dMYWJlbGVkKFxuICAgICAgICAgICAgICBlcXVhdGVFcnIsXG4gICAgICAgICAgICAgIGByZXBsYXkgJHtjYWxsSW5kZXh9OlxuICAgICAke3F1b3RlKGd1ZXN0RW50cnkpfVxuICB2cyAke3F1b3RlKGVudHJ5KX1cbiAgICBgXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXRjb21lID0gLyoqIEB0eXBlIHtPdXRjb21lfSAqL1xuICAgICAgICAgIG5lc3RJbnRlcnByZXRlcihjYWxsSW5kZXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGVudHJ5ID0gZ3Vlc3RUb0hvc3QoZ3Vlc3RFbnRyeSk7XG4gICAgICAgICAgbG9nLnB1c2hFbnRyeShlbnRyeSk7XG4gICAgICAgICAgY29uc3QgW19vcCwgaG9zdFRhcmdldCwgX29wdFZlcmIsIGhvc3RBcmdzLCBfY2FsbEluZGV4XSA9IGVudHJ5O1xuICAgICAgICAgIG5lc3RJbnRlcnByZXRlcihjYWxsSW5kZXgpO1xuICAgICAgICAgIG91dGNvbWUgPSBwZXJmb3JtU2VuZChcbiAgICAgICAgICAgIGhvc3RUYXJnZXQsXG4gICAgICAgICAgICBvcHRWZXJiLFxuICAgICAgICAgICAgaG9zdEFyZ3MsXG4gICAgICAgICAgICBjYWxsSW5kZXgsXG4gICAgICAgICAgICBob3N0UmVzdWx0S2l0LFxuICAgICAgICAgICAgZ3Vlc3RSZXR1cm5lZFBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChmYXRhbEVycm9yKSB7XG4gICAgICAgIHRocm93IHBhbmljKGZhdGFsRXJyb3IpO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChvdXRjb21lLmtpbmQpIHtcbiAgICAgICAgY2FzZSBcInJldHVyblwiOiB7XG4gICAgICAgICAgcmV0dXJuIG91dGNvbWUucmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJ0aHJvd1wiOiB7XG4gICAgICAgICAgdGhyb3cgb3V0Y29tZS5wcm9ibGVtO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICB0aHJvdyBQYW5pY2B1bmV4cGVjdGVkIG91dGNvbWUga2luZCAke3F1b3RlKG91dGNvbWUua2luZCl9YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYXBwbHlGdW5jdGlvblNlbmRPbmx5KGd1ZXN0VGFyZ2V0LCBndWVzdEFyZ3MpIHtcbiAgICAgIF9fZXZlbnR1YWxTZW5kRm9yVGVzdGluZyB8fCBQYW5pY2BndWVzdCBldmVudHVhbCBhcHBseUZ1bmN0aW9uU2VuZE9ubHkgbm90IHlldCBzdXBwb3J0ZWQ6ICR7Z3Vlc3RUYXJnZXR9YDtcbiAgICAgIHJldHVybiBndWVzdEhhbmRsZXIuYXBwbHlNZXRob2RTZW5kT25seShcbiAgICAgICAgZ3Vlc3RUYXJnZXQsXG4gICAgICAgIHZvaWQgMCxcbiAgICAgICAgZ3Vlc3RBcmdzXG4gICAgICApO1xuICAgIH0sXG4gICAgYXBwbHlGdW5jdGlvbihndWVzdFRhcmdldCwgZ3Vlc3RBcmdzLCBndWVzdFJldHVybmVkUCkge1xuICAgICAgX19ldmVudHVhbFNlbmRGb3JUZXN0aW5nIHx8IFBhbmljYGd1ZXN0IGV2ZW50dWFsIGFwcGx5RnVuY3Rpb24gbm90IHlldCBzdXBwb3J0ZWQ6ICR7Z3Vlc3RUYXJnZXR9IC0+ICR7YmFyZU9yUXVvdGUoZ3Vlc3RSZXR1cm5lZFApfWA7XG4gICAgICByZXR1cm4gZ3Vlc3RIYW5kbGVyLmFwcGx5TWV0aG9kKFxuICAgICAgICBndWVzdFRhcmdldCxcbiAgICAgICAgdm9pZCAwLFxuICAgICAgICBndWVzdEFyZ3MsXG4gICAgICAgIGd1ZXN0UmV0dXJuZWRQXG4gICAgICApO1xuICAgIH0sXG4gICAgZ2V0U2VuZE9ubHkoZ3Vlc3RUYXJnZXQsIHByb3ApIHtcbiAgICAgIHRocm93IFBhbmljYGd1ZXN0IGV2ZW50dWFsIGdldFNlbmRPbmx5IG5vdCB5ZXQgc3VwcG9ydGVkOiAke2d1ZXN0VGFyZ2V0fS4ke2JhcmVPclF1b3RlKHByb3ApfWA7XG4gICAgfSxcbiAgICBnZXQoZ3Vlc3RUYXJnZXQsIHByb3AsIGd1ZXN0UmV0dXJuZWRQKSB7XG4gICAgICB0aHJvdyBQYW5pY2BndWVzdCBldmVudHVhbCBnZXQgbm90IHlldCBzdXBwb3J0ZWQ6ICR7Z3Vlc3RUYXJnZXR9LiR7YmFyZU9yUXVvdGUocHJvcCl9IC0+ICR7YmFyZU9yUXVvdGUoZ3Vlc3RSZXR1cm5lZFApfWA7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgbWFrZUd1ZXN0UHJlc2VuY2UgPSAoaWZhY2UsIG1ldGhvZEVudHJpZXMpID0+IHtcbiAgICBsZXQgZ3Vlc3RQcmVzZW5jZTtcbiAgICB2b2lkIG5ldyBIYW5kbGVkUHJvbWlzZSgoX3JlcywgX3JlaiwgcmVzb2x2ZVdpdGhQcmVzZW5jZSkgPT4ge1xuICAgICAgZ3Vlc3RQcmVzZW5jZSA9IHJlc29sdmVXaXRoUHJlc2VuY2UoZ3Vlc3RIYW5kbGVyKTtcbiAgICB9KTtcbiAgICBpZiAodHlwZW9mIGd1ZXN0UHJlc2VuY2UgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgcHJlc2VuY2UgZXhwZWN0ZWQgdG8gYmUgb2JqZWN0ICR7Z3Vlc3RQcmVzZW5jZX1gO1xuICAgIH1cbiAgICBhc3NpZ24zKGd1ZXN0UHJlc2VuY2UsIGZyb21FbnRyaWVzMTMobWV0aG9kRW50cmllcykpO1xuICAgIGNvbnN0IHJlc3VsdCA9IFJlbW90YWJsZShpZmFjZSwgdm9pZCAwLCBndWVzdFByZXNlbmNlKTtcbiAgICByZXN1bHQgPT09IGd1ZXN0UHJlc2VuY2UgfHwgdGhyb3dSZWRhY3RlZGBSZW1vdGFibGUgZXhwZWN0ZWQgdG8gbWFrZSBwcmVzZW5jZSBpbiBwbGFjZTogJHtndWVzdFByZXNlbmNlfSB2cyAke3Jlc3VsdH1gO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIGNvbnN0IG1ha2VHdWVzdFByb21pc2VLaXQgPSAoKSA9PiB7XG4gICAgbGV0IHJlc29sdmUyO1xuICAgIGxldCByZWplY3Q7XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBIYW5kbGVkUHJvbWlzZSgocmVzLCByZWosIF9yZXNQcmVzKSA9PiB7XG4gICAgICByZXNvbHZlMiA9IHJlcztcbiAgICAgIHJlamVjdCA9IHJlajtcbiAgICB9LCBndWVzdEhhbmRsZXIpO1xuICAgIHJldHVybiBoYXJkZW4oeyBwcm9taXNlLCByZXNvbHZlOiByZXNvbHZlMiwgcmVqZWN0IH0pO1xuICB9O1xuICBjb25zdCBtYWtlR3Vlc3RGb3JIb3N0UmVtb3RhYmxlID0gKGhSZW0pID0+IHtcbiAgICBsZXQgZ1JlbTtcbiAgICBjb25zdCBtYWtlR3Vlc3RNZXRob2QgPSAob3B0VmVyYiA9IHZvaWQgMCkgPT4ge1xuICAgICAgY29uc3QgZ3Vlc3RNZXRob2QgPSAoLi4uZ3Vlc3RBcmdzKSA9PiB7XG4gICAgICAgIGNvbnN0IGNhbGxJbmRleCA9IGxvZy5nZXRJbmRleCgpO1xuICAgICAgICByZXR1cm4gZ3Vlc3RDYWxsc0hvc3QoZ1JlbSwgb3B0VmVyYiwgZ3Vlc3RBcmdzLCBjYWxsSW5kZXgpO1xuICAgICAgfTtcbiAgICAgIGlmIChvcHRWZXJiKSB7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXM1KGd1ZXN0TWV0aG9kLCB7XG4gICAgICAgICAgbmFtZTogeyB2YWx1ZTogU3RyaW5nKGhSZW1bb3B0VmVyYl0ubmFtZSB8fCBvcHRWZXJiKSB9LFxuICAgICAgICAgIGxlbmd0aDogeyB2YWx1ZTogTnVtYmVyKGhSZW1bb3B0VmVyYl0ubGVuZ3RoIHx8IDApIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzNShndWVzdE1ldGhvZCwge1xuICAgICAgICAgIG5hbWU6IHsgdmFsdWU6IFN0cmluZyhoUmVtLm5hbWUgfHwgXCJhbm9uXCIpIH0sXG4gICAgICAgICAgbGVuZ3RoOiB7IHZhbHVlOiBOdW1iZXIoaFJlbS5sZW5ndGggfHwgMCkgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBndWVzdE1ldGhvZDtcbiAgICB9O1xuICAgIGNvbnN0IGlmYWNlID0gU3RyaW5nKGdldEludGVyZmFjZU9mKGhSZW0pIHx8IFwicmVtb3RhYmxlXCIpO1xuICAgIGNvbnN0IGd1ZXN0SWZhY2UgPSBgJHtpZmFjZX0gZ3Vlc3Qgd3JhcHBlcmA7XG4gICAgaWYgKHR5cGVvZiBoUmVtID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGdSZW0gPSBSZW1vdGFibGUoZ3Vlc3RJZmFjZSwgdm9pZCAwLCBtYWtlR3Vlc3RNZXRob2QoKSk7XG4gICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYGhvc3QgZmFyIGZ1bmN0aW9ucyBub3QgeWV0IHBhc3NhYmxlYDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbWV0aG9kTmFtZXMgPSBnZXRNZXRob2ROYW1lcyhoUmVtKTtcbiAgICAgIGNvbnN0IGd1ZXN0TWV0aG9kcyA9IG1ldGhvZE5hbWVzLm1hcCgobmFtZSkgPT4gW1xuICAgICAgICBuYW1lLFxuICAgICAgICBtYWtlR3Vlc3RNZXRob2QobmFtZSlcbiAgICAgIF0pO1xuICAgICAgZ1JlbSA9IG1ha2VHdWVzdFByZXNlbmNlKGd1ZXN0SWZhY2UsIGd1ZXN0TWV0aG9kcyk7XG4gICAgfVxuICAgIGhSZW0gPSB2b2lkIDA7XG4gICAgcmV0dXJuIGdSZW07XG4gIH07XG4gIGhhcmRlbihtYWtlR3Vlc3RGb3JIb3N0UmVtb3RhYmxlKTtcbiAgY29uc3QgbWFrZUd1ZXN0Rm9ySG9zdFZvdyA9IChoVm93LCBwcm9taXNlS2V5ID0gdm9pZCAwKSA9PiB7XG4gICAgaXNWb3coaFZvdykgfHwgdGhyb3dSZWRhY3RlZGB2b3cgZXhwZWN0ZWQgJHtoVm93fWA7XG4gICAgY29uc3QgeyBwcm9taXNlLCByZXNvbHZlOiByZXNvbHZlMiwgcmVqZWN0IH0gPSBtYWtlR3Vlc3RQcm9taXNlS2l0KCk7XG4gICAgcHJvbWlzZUtleSA/Pz0gcHJvbWlzZTtcbiAgICBndWVzdFByb21pc2VNYXAuc2V0KHByb21pc2VLZXksIGhhcmRlbih7IHJlc29sdmU6IHJlc29sdmUyLCByZWplY3QgfSkpO1xuICAgIHdhdGNoV2FrZShoVm93KTtcbiAgICB2b2lkIHdoZW4oXG4gICAgICBoVm93LFxuICAgICAgYXN5bmMgKGhvc3RGdWxmaWxsbWVudCkgPT4ge1xuICAgICAgICBhd2FpdCBsb2cucHJvbWlzZVJlcGxheURvbmUoKTtcbiAgICAgICAgaWYgKCFzdG9wcGVkICYmIGd1ZXN0UHJvbWlzZU1hcC5nZXQocHJvbWlzZUtleSkgIT09IFwic2V0dGxlZFwiKSB7XG4gICAgICAgICAgY29uc3QgZW50cnkgPSBoYXJkZW4oW1wiZG9GdWxmaWxsXCIsIGhWb3csIGhvc3RGdWxmaWxsbWVudF0pO1xuICAgICAgICAgIGxvZy5wdXNoRW50cnkoZW50cnkpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpbnRlcnByZXRPbmUodG9wRGlzcGF0Y2gsIGVudHJ5KTtcbiAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhc3luYyAoaG9zdFJlYXNvbikgPT4ge1xuICAgICAgICBhd2FpdCBsb2cucHJvbWlzZVJlcGxheURvbmUoKTtcbiAgICAgICAgaWYgKCFzdG9wcGVkICYmIGd1ZXN0UHJvbWlzZU1hcC5nZXQocHJvbWlzZUtleSkgIT09IFwic2V0dGxlZFwiKSB7XG4gICAgICAgICAgY29uc3QgZW50cnkgPSBoYXJkZW4oW1wiZG9SZWplY3RcIiwgaFZvdywgaG9zdFJlYXNvbl0pO1xuICAgICAgICAgIGxvZy5wdXNoRW50cnkoZW50cnkpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpbnRlcnByZXRPbmUodG9wRGlzcGF0Y2gsIGVudHJ5KTtcbiAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuICBoYXJkZW4obWFrZUd1ZXN0Rm9ySG9zdFZvdyk7XG4gIGNvbnN0IHsgZ3Vlc3RUb0hvc3QsIGhvc3RUb0d1ZXN0IH0gPSBtYWtlQ29udmVydEtpdChcbiAgICBiaWplY3Rpb24sXG4gICAgbWFrZUd1ZXN0Rm9ySG9zdFJlbW90YWJsZSxcbiAgICBtYWtlR3Vlc3RGb3JIb3N0Vm93XG4gICk7XG4gIGNvbnN0IHRvcERpc3BhdGNoID0gaGFyZGVuKHtcbiAgICBzdGFydEdlbmVyYXRpb24sXG4gICAgZG9GdWxmaWxsLFxuICAgIGRvUmVqZWN0XG4gICAgLyogZG9DYWxsLCAvLyB1bmltcGxlbWVudGVkIGluIHRoZSBjdXJyZW50IHBsYW4qL1xuICB9KTtcbiAgY29uc3QgbmVzdERpc3BhdGNoID0gaGFyZGVuKHtcbiAgICBkb1JldHVybixcbiAgICBkb1Rocm93XG4gICAgLyogZG9DYWxsLCAvLyB1bmltcGxlbWVudGVkIGluIHRoZSBjdXJyZW50IHBsYW4qL1xuICB9KTtcbiAgY29uc3QgaW50ZXJwcmV0T25lID0gKGRpc3BhdGNoLCBbb3AsIC4uLmFyZ3NdKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIG9wIGluIGRpc3BhdGNoIHx8IC8qIHNlcGFyYXRlIGxpbmUgc28gSSBjYW4gc2V0IGEgYnJlYWtwb2ludCovXG4gICAgICB0aHJvd1JlZGFjdGVkYHVuZXhwZWN0ZWQgZGlzcGF0Y2ggb3A6ICR7cXVvdGUob3ApfWA7XG4gICAgICByZXR1cm4gZGlzcGF0Y2hbb3BdKC4uLmFyZ3MpO1xuICAgIH0gY2F0Y2ggKHByb2JsZW0pIHtcbiAgICAgIHRocm93IHBhbmljKHByb2JsZW0pO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgbG9nRG8gPSAoZGlzcGF0Y2gsIGVudHJ5KSA9PiB7XG4gICAgbG9nLnB1c2hFbnRyeShlbnRyeSk7XG4gICAgcmV0dXJuIGludGVycHJldE9uZShkaXNwYXRjaCwgZW50cnkpO1xuICB9O1xuICBjb25zdCBjYWxsU3RhY2sgPSBbXTtcbiAgbGV0IHVubmVzdEZsYWcgPSBmYWxzZTtcbiAgY29uc3QgbmVzdEludGVycHJldGVyID0gKGNhbGxJbmRleCkgPT4ge1xuICAgIGNhbGxTdGFjay5wdXNoKGNhbGxJbmRleCk7XG4gICAgd2hpbGUgKGxvZy5pc1JlcGxheWluZygpICYmICFzdG9wcGVkKSB7XG4gICAgICBjb25zdCBlbnRyeSA9IGxvZy5uZXh0VW5maWx0ZXJlZEVudHJ5KCk7XG4gICAgICBjb25zdCBvcHRPdXRjb21lID0gaW50ZXJwcmV0T25lKG5lc3REaXNwYXRjaCwgZW50cnkpO1xuICAgICAgaWYgKHVubmVzdEZsYWcpIHtcbiAgICAgICAgb3B0T3V0Y29tZSB8fCAvKiBzZXBhcmF0ZSBsaW5lIHNvIEkgY2FuIHNldCBhIGJyZWFrcG9pbnQqL1xuICAgICAgICB0aHJvd1JlZGFjdGVkYG9ubHkgdW5uZXN0IHdpdGggYW4gb3V0Y29tZTogJHtxdW90ZShlbnRyeVswXSl9YDtcbiAgICAgICAgdW5uZXN0RmxhZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gb3B0T3V0Y29tZTtcbiAgICAgIH1cbiAgICB9XG4gICAgdW5uZXN0RmxhZyA9IGZhbHNlO1xuICB9O1xuICBjb25zdCB1bm5lc3RJbnRlcnByZXRlciA9IChjYWxsSW5kZXgpID0+IHtcbiAgICAhc3RvcHBlZCB8fCB0aHJvd1JlZGFjdGVkYFRoaXMgbWVtYnJhbmUgc3RvcHBlZC4gUmVzdGFydCB3aXRoIG5ldyBtZW1icmFuZSAke3JlcGxheU1lbWJyYW5lfWA7XG4gICAgY2FsbFN0YWNrLmxlbmd0aCA+PSAxIHx8IC8qIHNlcGFyYXRlIGxpbmUgc28gSSBjYW4gc2V0IGEgYnJlYWtwb2ludCovXG4gICAgdGhyb3dSZWRhY3RlZGBVbm1hdGNoZWQgdW5uZXN0OiAke3F1b3RlKGNhbGxJbmRleCl9YDtcbiAgICBjb25zdCBpMyA9IGNhbGxTdGFjay5wb3AoKTtcbiAgICBpMyA9PT0gY2FsbEluZGV4IHx8IC8qIHNlcGFyYXRlIGxpbmUgc28gSSBjYW4gc2V0IGEgYnJlYWtwb2ludCovXG4gICAgdGhyb3dSZWRhY3RlZGBVbmV4cGVjdGVkIHVubmVzdDogJHtxdW90ZShjYWxsSW5kZXgpfSB2cyAke3F1b3RlKGkzKX1gO1xuICAgIHVubmVzdEZsYWcgPSB0cnVlO1xuICAgIGlmIChjYWxsU3RhY2subGVuZ3RoID09PSAwKSB7XG4gICAgICB2b2lkIEUud2hlbih2b2lkIDAsIHdha2UpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgd2FrZSA9ICgpID0+IHtcbiAgICB3aGlsZSAobG9nLmlzUmVwbGF5aW5nKCkgJiYgIXN0b3BwZWQpIHtcbiAgICAgIGNhbGxTdGFjay5sZW5ndGggPT09IDAgfHwgdGhyb3dSZWRhY3RlZGB3YWtlIG9ubHkgd2l0aCBlbXB0eSBjYWxsU3RhY2s6ICR7cXVvdGUoY2FsbFN0YWNrKX1gO1xuICAgICAgY29uc3QgZW50cnkgPSBsb2cucGVla0VudHJ5KCk7XG4gICAgICBjb25zdCBvcCA9IGVudHJ5WzBdO1xuICAgICAgaWYgKCEob3AgaW4gdG9wRGlzcGF0Y2gpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZvaWQgbG9nLm5leHRVbmZpbHRlcmVkRW50cnkoKTtcbiAgICAgIGludGVycHJldE9uZSh0b3BEaXNwYXRjaCwgZW50cnkpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc3RvcCA9ICgpID0+IHtcbiAgICBzdG9wcGVkID0gdHJ1ZTtcbiAgfTtcbiAgY29uc3QgcmVwbGF5TWVtYnJhbmUgPSBGYXIoXCJyZXBsYXlNZW1icmFuZVwiLCB7XG4gICAgaG9zdFRvR3Vlc3QsXG4gICAgZ3Vlc3RUb0hvc3QsXG4gICAgd2FrZSxcbiAgICBzdG9wXG4gIH0pO1xuICByZXR1cm4gcmVwbGF5TWVtYnJhbmU7XG59O1xuaGFyZGVuKG1ha2VSZXBsYXlNZW1icmFuZSk7XG5cbi8qIC4uL2FzeW5jLWZsb3cvc3JjL3R5cGUtZ3VhcmRzLmpzKi9cbnZhciBGbG93U3RhdGVTaGFwZSA9IE0ub3IoXG4gIFwiUnVubmluZ1wiLFxuICBcIlNsZWVwaW5nXCIsXG4gIFwiUmVwbGF5aW5nXCIsXG4gIFwiRmFpbGVkXCIsXG4gIFwiRG9uZVwiXG4pO1xudmFyIFByb3BlcnR5S2V5U2hhcGUgPSBNLm9yKE0uc3RyaW5nKCksIE0uc3ltYm9sKCkpO1xudmFyIExvZ0VudHJ5U2hhcGUgPSBNLm9yKFxuICBbXCJzdGFydEdlbmVyYXRpb25cIiwgTS5udW1iZXIoKV0sXG4gIC8qIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyBGcm9tIEhvc3QgdG8gR3Vlc3QgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyovXG4gIFtcImRvRnVsZmlsbFwiLCBWb3dTaGFwZSwgTS5hbnkoKV0sXG4gIFtcImRvUmVqZWN0XCIsIFZvd1NoYXBlLCBNLmFueSgpXSxcbiAgLyogWyovXG4gIC8qICdkb0NhbGwnLCovXG4gIC8qIE0ucmVtb3RhYmxlKCdob3N0IHdyYXBwZXIgb2YgZ3Vlc3QgdGFyZ2V0JyksKi9cbiAgLyogTS5vcHQoUHJvcGVydHlLZXlTaGFwZSksKi9cbiAgLyogTS5hcnJheU9mKE0uYW55KCkpLCovXG4gIC8qIE0ubnVtYmVyKCksKi9cbiAgLyogXSwqL1xuICAvKiBbKi9cbiAgLyogJ2RvU2VuZE9ubHknLCovXG4gIC8qIE0ub3IoTS5yZW1vdGFibGUoJ2hvc3Qgd3JhcHBlciBvZiBndWVzdCB0YXJnZXQnKSwgVm93U2hhcGUpLCovXG4gIC8qIE0ub3B0KFByb3BlcnR5S2V5U2hhcGUpLCovXG4gIC8qIE0uYXJyYXlPZihNLmFueSgpKSwqL1xuICAvKiBNLm51bWJlcigpLCovXG4gIC8qIF0sKi9cbiAgLyogWyovXG4gIC8qICdkb1NlbmQnLCovXG4gIC8qIE0ub3IoTS5yZW1vdGFibGUoJ2hvc3Qgd3JhcHBlciBvZiBndWVzdCB0YXJnZXQnKSwgVm93U2hhcGUpLCovXG4gIC8qIE0ub3B0KFByb3BlcnR5S2V5U2hhcGUpLCovXG4gIC8qIE0uYXJyYXlPZihNLmFueSgpKSwqL1xuICAvKiBNLm51bWJlcigpLCovXG4gIC8qIF0sKi9cbiAgW1wiZG9SZXR1cm5cIiwgTS5udW1iZXIoKSwgTS5hbnkoKV0sXG4gIFtcImRvVGhyb3dcIiwgTS5udW1iZXIoKSwgTS5hbnkoKV0sXG4gIC8qIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyBGcm9tIEd1ZXN0IHRvIEhvc3QgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyovXG4gIC8qIFsnY2hlY2tGdWxmaWxsJywgVm93U2hhcGUsIE0uYW55KCldLCovXG4gIC8qIFsnY2hlY2tSZWplY3QnLCBWb3dTaGFwZSwgTS5hbnkoKV0sKi9cbiAgW1xuICAgIFwiY2hlY2tDYWxsXCIsXG4gICAgTS5yZW1vdGFibGUoXCJob3N0IHRhcmdldFwiKSxcbiAgICBNLm9wdChQcm9wZXJ0eUtleVNoYXBlKSxcbiAgICBNLmFycmF5T2YoTS5hbnkoKSksXG4gICAgTS5udW1iZXIoKVxuICBdLFxuICBbXG4gICAgXCJjaGVja1NlbmRPbmx5XCIsXG4gICAgTS5vcihNLnJlbW90YWJsZShcImhvc3QgdGFyZ2V0XCIpLCBWb3dTaGFwZSksXG4gICAgTS5vcHQoUHJvcGVydHlLZXlTaGFwZSksXG4gICAgTS5hcnJheU9mKE0uYW55KCkpLFxuICAgIE0ubnVtYmVyKClcbiAgXSxcbiAgW1xuICAgIFwiY2hlY2tTZW5kXCIsXG4gICAgTS5vcihNLnJlbW90YWJsZShcImhvc3QgdGFyZ2V0XCIpLCBWb3dTaGFwZSksXG4gICAgTS5vcHQoUHJvcGVydHlLZXlTaGFwZSksXG4gICAgTS5hcnJheU9mKE0uYW55KCkpLFxuICAgIE0ubnVtYmVyKClcbiAgXVxuICAvKiBbJ2NoZWNrUmV0dXJuJywgTS5udW1iZXIoKSwgTS5hbnkoKV0sKi9cbiAgLyogWydjaGVja1Rocm93JywgTS5udW1iZXIoKSwgTS5hbnkoKV0sKi9cbik7XG5cbi8qIC4uL2FzeW5jLWZsb3cvc3JjL2VwaGVtZXJhLmpzKi9cbnZhciBtYWtlRXBoZW1lcmEgPSAocmVpbml0KSA9PiB7XG4gIGNvbnN0IG1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICBmb3Ioc2VsZikge1xuICAgICAgaWYgKCFtYXAuaGFzKHNlbGYpKSB7XG4gICAgICAgIG1hcC5zZXQoc2VsZiwgcmVpbml0KHNlbGYpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoXG4gICAgICAgIC8qKiBAdHlwZSB7Vn0gKi9cbiAgICAgICAgbWFwLmdldChzZWxmKVxuICAgICAgKTtcbiAgICB9LFxuICAgIHJlc2V0Rm9yKHNlbGYpIHtcbiAgICAgIHJldHVybiBtYXAuZGVsZXRlKHNlbGYpO1xuICAgIH1cbiAgfSk7XG59O1xuaGFyZGVuKG1ha2VFcGhlbWVyYSk7XG5cbi8qIC4uL2FzeW5jLWZsb3cvc3JjL2xvZy1zdG9yZS5qcyovXG52YXIgTG9nU3RvcmVJID0gTS5pbnRlcmZhY2UoXCJMb2dTdG9yZVwiLCB7XG4gIHJlc2V0OiBNLmNhbGwoKS5yZXR1cm5zKCksXG4gIGRpc3Bvc2U6IE0uY2FsbCgpLnJldHVybnMoKSxcbiAgZ2V0VW5maWx0ZXJlZEluZGV4OiBNLmNhbGwoKS5yZXR1cm5zKE0ubnVtYmVyKCkpLFxuICBnZXRJbmRleDogTS5jYWxsKCkucmV0dXJucyhNLm51bWJlcigpKSxcbiAgZ2V0TGVuZ3RoOiBNLmNhbGwoKS5yZXR1cm5zKE0ubnVtYmVyKCkpLFxuICBpc1JlcGxheWluZzogTS5jYWxsKCkucmV0dXJucyhNLmJvb2xlYW4oKSksXG4gIHBlZWtFbnRyeTogTS5jYWxsKCkucmV0dXJucyhMb2dFbnRyeVNoYXBlKSxcbiAgbmV4dEVudHJ5OiBNLmNhbGwoKS5yZXR1cm5zKExvZ0VudHJ5U2hhcGUpLFxuICBuZXh0VW5maWx0ZXJlZEVudHJ5OiBNLmNhbGwoKS5yZXR1cm5zKExvZ0VudHJ5U2hhcGUpLFxuICBwdXNoRW50cnk6IE0uY2FsbChMb2dFbnRyeVNoYXBlKS5yZXR1cm5zKE0ubnVtYmVyKCkpLFxuICBkdW1wVW5maWx0ZXJlZDogTS5jYWxsKCkucmV0dXJucyhNLmFycmF5T2YoTG9nRW50cnlTaGFwZSkpLFxuICBkdW1wOiBNLmNhbGwoKS5yZXR1cm5zKE0uYXJyYXlPZihMb2dFbnRyeVNoYXBlKSksXG4gIHByb21pc2VSZXBsYXlEb25lOiBNLmNhbGwoKS5yZXR1cm5zKE0ucHJvbWlzZSgpKVxufSk7XG52YXIgbmV4dEdlbmVyYXRpb24gPSAoem9uZSkgPT4ge1xuICBjb25zdCBsb2dTdG9yZU1ldGFkYXRhID0gem9uZS5tYXBTdG9yZShcIkxvZ1N0b3JlTWV0YWRhdGFcIik7XG4gIGNvbnN0IGdlbmVyYXRpb25LZXkgPSBcImdlbmVyYXRpb25cIjtcbiAgaWYgKCFsb2dTdG9yZU1ldGFkYXRhLmhhcyhnZW5lcmF0aW9uS2V5KSkge1xuICAgIGNvbnN0IGZpcnN0R2VuID0gMDtcbiAgICBsb2dTdG9yZU1ldGFkYXRhLmluaXQoZ2VuZXJhdGlvbktleSwgZmlyc3RHZW4pO1xuICAgIHJldHVybiBmaXJzdEdlbjtcbiAgfVxuICBjb25zdCBuZXh0R2VuID0gbG9nU3RvcmVNZXRhZGF0YS5nZXQoZ2VuZXJhdGlvbktleSkgKyAxO1xuICBsb2dTdG9yZU1ldGFkYXRhLnNldChnZW5lcmF0aW9uS2V5LCBuZXh0R2VuKTtcbiAgcmV0dXJuIG5leHRHZW47XG59O1xudmFyIHByZXBhcmVMb2dTdG9yZSA9ICh6b25lKSA9PiB7XG4gIGNvbnN0IGluaXRpYWxQdXNoID0gaGFyZGVuKFtbXCJzdGFydEdlbmVyYXRpb25cIiwgbmV4dEdlbmVyYXRpb24oem9uZSldXSk7XG4gIGNvbnN0IGVudHJ5SXNWaXNpYmxlID0gKGVudHJ5KSA9PiBlbnRyeVswXSAhPT0gXCJzdGFydEdlbmVyYXRpb25cIjtcbiAgY29uc3QgdG1wID0gbWFrZUVwaGVtZXJhKChsb2cpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICBpbmRleDogMCxcbiAgICAgIHVuZmlsdGVyZWRJbmRleDogMCxcbiAgICAgIGluaXRpYWxQdXNoLFxuICAgICAgcmVwbGF5RG9uZUtpdDogbWFrZVByb21pc2VLaXQoKVxuICAgIH07XG4gICAgaWYgKGxvZy5nZXRMZW5ndGgoKSA9PT0gMCkge1xuICAgICAgcmVzdWx0LnJlcGxheURvbmVLaXQucmVzb2x2ZSh2b2lkIDApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9KTtcbiAgcmV0dXJuIHpvbmUuZXhvQ2xhc3MoXG4gICAgXCJMb2dTdG9yZVwiLFxuICAgIExvZ1N0b3JlSSxcbiAgICAoKSA9PiB7XG4gICAgICBjb25zdCBtYXBTdG9yZSA9IHpvbmUuZGV0YWNoZWQoKS5tYXBTdG9yZShcImxvZ01hcFN0b3JlXCIsIHtcbiAgICAgICAga2V5U2hhcGU6IE0ubnVtYmVyKCksXG4gICAgICAgIHZhbHVlU2hhcGU6IExvZ0VudHJ5U2hhcGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWFwU3RvcmVcbiAgICAgIH07XG4gICAgfSxcbiAgICB7XG4gICAgICByZXNldCgpIHtcbiAgICAgICAgY29uc3QgeyBzZWxmIH0gPSB0aGlzO1xuICAgICAgICB0bXAucmVzZXRGb3Ioc2VsZik7XG4gICAgICB9LFxuICAgICAgZGlzcG9zZSgpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0ZSwgc2VsZiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBtYXBTdG9yZSB9ID0gc3RhdGU7XG4gICAgICAgIHRtcC5yZXNldEZvcihzZWxmKTtcbiAgICAgICAgbWFwU3RvcmUuY2xlYXIoKTtcbiAgICAgIH0sXG4gICAgICBnZXRVbmZpbHRlcmVkSW5kZXgoKSB7XG4gICAgICAgIGNvbnN0IHsgc2VsZiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZXBoID0gdG1wLmZvcihzZWxmKTtcbiAgICAgICAgcmV0dXJuIGVwaC51bmZpbHRlcmVkSW5kZXg7XG4gICAgICB9LFxuICAgICAgZ2V0SW5kZXgoKSB7XG4gICAgICAgIGNvbnN0IHsgc2VsZiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZXBoID0gdG1wLmZvcihzZWxmKTtcbiAgICAgICAgcmV0dXJuIGVwaC5pbmRleDtcbiAgICAgIH0sXG4gICAgICBnZXRMZW5ndGgoKSB7XG4gICAgICAgIGNvbnN0IHsgc3RhdGUgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgbWFwU3RvcmUgfSA9IHN0YXRlO1xuICAgICAgICByZXR1cm4gbWFwU3RvcmUuZ2V0U2l6ZSgpO1xuICAgICAgfSxcbiAgICAgIGlzUmVwbGF5aW5nKCkge1xuICAgICAgICBjb25zdCB7IHN0YXRlLCBzZWxmIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IG1hcFN0b3JlIH0gPSBzdGF0ZTtcbiAgICAgICAgY29uc3QgZXBoID0gdG1wLmZvcihzZWxmKTtcbiAgICAgICAgcmV0dXJuIGVwaC51bmZpbHRlcmVkSW5kZXggPCBtYXBTdG9yZS5nZXRTaXplKCk7XG4gICAgICB9LFxuICAgICAgLyoqXG4gKiBAcmV0dXJucyB7TG9nRW50cnl9XG4gKi9cbiAgICAgIHBlZWtFbnRyeSgpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0ZSwgc2VsZiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBtYXBTdG9yZSB9ID0gc3RhdGU7XG4gICAgICAgIGNvbnN0IGVwaCA9IHRtcC5mb3Ioc2VsZik7XG4gICAgICAgIHNlbGYuaXNSZXBsYXlpbmcoKSB8fCB0aHJvd1JlZGFjdGVkYE5vIGxvbmdlciByZXBsYXlpbmc6ICR7cXVvdGUoZXBoLnVuZmlsdGVyZWRJbmRleCl9IHZzICR7cXVvdGUoXG4gICAgICAgICAgbWFwU3RvcmUuZ2V0U2l6ZSgpXG4gICAgICAgICl9YDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbWFwU3RvcmUuZ2V0KGVwaC51bmZpbHRlcmVkSW5kZXgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSxcbiAgICAgIC8qKlxuICogQHJldHVybnMge0xvZ0VudHJ5fVxuICovXG4gICAgICBuZXh0VW5maWx0ZXJlZEVudHJ5KCkge1xuICAgICAgICBjb25zdCB7IHNlbGYgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGVwaCA9IHRtcC5mb3Ioc2VsZik7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHNlbGYucGVla0VudHJ5KCk7XG4gICAgICAgIGVwaC51bmZpbHRlcmVkSW5kZXggKz0gMTtcbiAgICAgICAgaWYgKGVudHJ5SXNWaXNpYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICBlcGguaW5kZXggKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNlbGYuaXNSZXBsYXlpbmcoKSkge1xuICAgICAgICAgIGVwaC5yZXBsYXlEb25lS2l0LnJlc29sdmUodm9pZCAwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSxcbiAgICAgIC8qKlxuICogQHJldHVybnMge0xvZ0VudHJ5fVxuICovXG4gICAgICBuZXh0RW50cnkoKSB7XG4gICAgICAgIGNvbnN0IHsgc2VsZiB9ID0gdGhpcztcbiAgICAgICAgbGV0IHJlc3VsdCA9IHNlbGYubmV4dFVuZmlsdGVyZWRFbnRyeSgpO1xuICAgICAgICB3aGlsZSAoIWVudHJ5SXNWaXNpYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICBzZWxmLmlzUmVwbGF5aW5nKCkgfHwgdGhyb3dSZWRhY3RlZGBVbmV4cGVjdGVkIGVudHJ5IGF0IGxvZyB0YWlsOiAke3Jlc3VsdH1gO1xuICAgICAgICAgIHJlc3VsdCA9IHNlbGYubmV4dFVuZmlsdGVyZWRFbnRyeSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9LFxuICAgICAgLyoqXG4gKiBAcGFyYW0ge0xvZ0VudHJ5fSBsYXRlc3RFbnRyeVxuICovXG4gICAgICBwdXNoRW50cnkobGF0ZXN0RW50cnkpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0ZSwgc2VsZiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBtYXBTdG9yZSB9ID0gc3RhdGU7XG4gICAgICAgIGNvbnN0IGVwaCA9IHRtcC5mb3Ioc2VsZik7XG4gICAgICAgICFzZWxmLmlzUmVwbGF5aW5nKCkgfHwgdGhyb3dSZWRhY3RlZGBzdGlsbCByZXBsYXlpbmc6ICR7cXVvdGUoZXBoLnVuZmlsdGVyZWRJbmRleCl9IHZzICR7cXVvdGUobWFwU3RvcmUuZ2V0U2l6ZSgpKX1gO1xuICAgICAgICBjb25zdCBwdXNoT25lID0gKGVudHJ5KSA9PiB7XG4gICAgICAgICAgZXBoLnVuZmlsdGVyZWRJbmRleCA9PT0gbWFwU3RvcmUuZ2V0U2l6ZSgpIHx8IHRocm93UmVkYWN0ZWRgaW50ZXJuYWw6IHVuZmlsdGVyZWRJbmRleCBjb25mdXNpb24gJHtxdW90ZShlcGgudW5maWx0ZXJlZEluZGV4KX0gdnMgJHtxdW90ZShcbiAgICAgICAgICAgIG1hcFN0b3JlLmdldFNpemUoKVxuICAgICAgICAgICl9YDtcbiAgICAgICAgICBtYXBTdG9yZS5pbml0KGVwaC51bmZpbHRlcmVkSW5kZXgsIGVudHJ5KTtcbiAgICAgICAgICBlcGgudW5maWx0ZXJlZEluZGV4ICs9IDE7XG4gICAgICAgICAgaWYgKGVudHJ5SXNWaXNpYmxlKGVudHJ5KSkge1xuICAgICAgICAgICAgZXBoLmluZGV4ICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVwaC51bmZpbHRlcmVkSW5kZXggPT09IG1hcFN0b3JlLmdldFNpemUoKSB8fCB0aHJvd1JlZGFjdGVkYGludGVybmFsOiB1bmZpbHRlcmVkSW5kZXggY29uZnVzaW9uICR7cXVvdGUoZXBoLnVuZmlsdGVyZWRJbmRleCl9IHZzICR7cXVvdGUoXG4gICAgICAgICAgICBtYXBTdG9yZS5nZXRTaXplKClcbiAgICAgICAgICApfWA7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChlcGguaW5pdGlhbFB1c2gpIHtcbiAgICAgICAgICBjb25zdCBpbml0aWFsRW50cmllcyA9IGVwaC5pbml0aWFsUHVzaDtcbiAgICAgICAgICBlcGguaW5pdGlhbFB1c2ggPSB2b2lkIDA7XG4gICAgICAgICAgZm9yIChjb25zdCBpbml0aWFsRW50cnkgb2YgaW5pdGlhbEVudHJpZXMpIHtcbiAgICAgICAgICAgIHB1c2hPbmUoaW5pdGlhbEVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHVzaE9uZShsYXRlc3RFbnRyeSk7XG4gICAgICAgIHJldHVybiBlcGgudW5maWx0ZXJlZEluZGV4O1xuICAgICAgfSxcbiAgICAgIC8qKlxuICogQHJldHVybnMge0xvZ0VudHJ5W119XG4gKi9cbiAgICAgIGR1bXBVbmZpbHRlcmVkKCkge1xuICAgICAgICBjb25zdCB7IHN0YXRlIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IG1hcFN0b3JlIH0gPSBzdGF0ZTtcbiAgICAgICAgY29uc3QgbGVuID0gbWFwU3RvcmUuZ2V0U2l6ZSgpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IGxlbjsgaTMgKz0gMSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKG1hcFN0b3JlLmdldChpMykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYXJkZW4ocmVzdWx0KTtcbiAgICAgIH0sXG4gICAgICBkdW1wKCkge1xuICAgICAgICBjb25zdCB7IHNlbGYgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBoYXJkZW4oc2VsZi5kdW1wVW5maWx0ZXJlZCgpLmZpbHRlcihlbnRyeUlzVmlzaWJsZSkpO1xuICAgICAgfSxcbiAgICAgIHByb21pc2VSZXBsYXlEb25lKCkge1xuICAgICAgICBjb25zdCB7IHNlbGYgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGVwaCA9IHRtcC5mb3Ioc2VsZik7XG4gICAgICAgIHJldHVybiBlcGgucmVwbGF5RG9uZUtpdC5wcm9taXNlO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbn07XG5cbi8qIC4uL2FzeW5jLWZsb3cvc3JjL2JpamVjdGlvbi5qcyovXG52YXIgQmlqZWN0aW9uSSA9IE0uaW50ZXJmYWNlKFwiQmlqZWN0aW9uXCIsIHtcbiAgcmVzZXQ6IE0uY2FsbCgpLnJldHVybnMoKSxcbiAgdW53cmFwSW5pdDogTS5jYWxsKE0ucmF3KCksIE0uYW55KCkpLnJldHVybnMoTS5yYXcoKSksXG4gIGhhc0d1ZXN0OiBNLmNhbGwoTS5yYXcoKSkucmV0dXJucyhNLmJvb2xlYW4oKSksXG4gIGhhc0hvc3Q6IE0uY2FsbChNLmFueSgpKS5yZXR1cm5zKE0uYm9vbGVhbigpKSxcbiAgaGFzOiBNLmNhbGwoTS5yYXcoKSwgTS5hbnkoKSkucmV0dXJucyhNLmJvb2xlYW4oKSksXG4gIGd1ZXN0VG9Ib3N0OiBNLmNhbGwoTS5yYXcoKSkucmV0dXJucyhNLmFueSgpKSxcbiAgaG9zdFRvR3Vlc3Q6IE0uY2FsbChNLmFueSgpKS5yZXR1cm5zKE0ucmF3KCkpXG59KTtcbnZhciB0b0tleSA9IChrKSA9PiAoXG4gIC8qIEB0cy1leHBlY3QtZXJyb3IgayBzcGVjaWZpY2l0eSovXG4gIGlzUGFzc2FibGUoaykgPyB0b1Bhc3NhYmxlQ2FwKGspIDoga1xuKTtcbnZhciBtYWtlVm93aXNoU3RvcmUgPSAobmFtZSkgPT4ge1xuICBjb25zdCBtYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICByZXR1cm4gRmFyKG5hbWUsIHtcbiAgICBpbml0OiAoaywgdjIpID0+IHtcbiAgICAgIGNvbnN0IGsyID0gdG9LZXkoayk7XG4gICAgICAhbWFwLmhhcyhrMikgfHwgLyogc2VwYXJhdGUgbGluZSBzbyBJIGNhbiBzZXQgYSBicmVha3BvaW50Ki9cbiAgICAgIHRocm93UmVkYWN0ZWRgJHtiYXJlT3JRdW90ZShuYW1lKX0ga2V5IGFscmVhZHkgYm91bmQ6ICR7a30gLT4gJHttYXAuZ2V0KGsyKX0gdnMgJHt2Mn1gO1xuICAgICAgbWFwLnNldChrMiwgdjIpO1xuICAgIH0sXG4gICAgaGFzOiAoaykgPT4gbWFwLmhhcyh0b0tleShrKSksXG4gICAgZ2V0OiAoaykgPT4ge1xuICAgICAgY29uc3QgazIgPSB0b0tleShrKTtcbiAgICAgIG1hcC5oYXMoazIpIHx8IC8qIHNlcGFyYXRlIGxpbmUgc28gSSBjYW4gc2V0IGEgYnJlYWtwb2ludCovXG4gICAgICB0aHJvd1JlZGFjdGVkYCR7YmFyZU9yUXVvdGUobmFtZSl9IGtleSBub3QgZm91bmQ6ICR7a31gO1xuICAgICAgcmV0dXJuIG1hcC5nZXQoazIpO1xuICAgIH1cbiAgfSk7XG59O1xudmFyIHByZXBhcmVCaWplY3Rpb24gPSAoem9uZSwgdW53cmFwID0gKF9ob3N0V3JhcHBlciwgZ3Vlc3RXcmFwcGVyKSA9PiBndWVzdFdyYXBwZXIpID0+IHtcbiAgY29uc3QgZzJoID0gbWFrZUVwaGVtZXJhKCgpID0+IG1ha2VWb3dpc2hTdG9yZShcImd1ZXN0VG9Ib3N0XCIpKTtcbiAgY29uc3QgaDJnID0gbWFrZUVwaGVtZXJhKCgpID0+IG1ha2VWb3dpc2hTdG9yZShcImhvc3RUb0d1ZXN0XCIpKTtcbiAgcmV0dXJuIHpvbmUuZXhvQ2xhc3MoXCJCaWplY3Rpb25cIiwgQmlqZWN0aW9uSSwgKCkgPT4gKHt9KSwge1xuICAgIHJlc2V0KCkge1xuICAgICAgY29uc3QgeyBzZWxmIH0gPSB0aGlzO1xuICAgICAgZzJoLnJlc2V0Rm9yKHNlbGYpO1xuICAgICAgaDJnLnJlc2V0Rm9yKHNlbGYpO1xuICAgIH0sXG4gICAgdW53cmFwSW5pdChnMywgaCkge1xuICAgICAgaGFyZGVuKGczKTtcbiAgICAgIGNvbnN0IHsgc2VsZiB9ID0gdGhpcztcbiAgICAgIGNvbnN0IGd1ZXN0VG9Ib3N0ID0gZzJoLmZvcihzZWxmKTtcbiAgICAgIGNvbnN0IGhvc3RUb0d1ZXN0ID0gaDJnLmZvcihzZWxmKTtcbiAgICAgIGNvbnN0IGdVbndyYXBwZWQgPSB1bndyYXAoaCwgZzMpO1xuICAgICAgIWhvc3RUb0d1ZXN0LmhhcyhoKSB8fCB0aHJvd1JlZGFjdGVkYGhvc3RUb0d1ZXN0IGtleSBhbHJlYWR5IGJvdW5kOiAke2h9IC0+ICR7aG9zdFRvR3Vlc3QuZ2V0KGgpfSB2cyAke2dVbndyYXBwZWR9YDtcbiAgICAgIGd1ZXN0VG9Ib3N0LmluaXQoZ1Vud3JhcHBlZCwgaCk7XG4gICAgICBob3N0VG9HdWVzdC5pbml0KGgsIGdVbndyYXBwZWQpO1xuICAgICAgc2VsZi5oYXMoZ1Vud3JhcHBlZCwgaCkgfHwgLyogc2VwYXJhdGUgbGluZSBzbyBJIGNhbiBzZXQgYSBicmVha3BvaW50Ki9cbiAgICAgIHRocm93UmVkYWN0ZWRgaW50ZXJuYWw6ICR7ZzN9IDwtPiAke2h9YDtcbiAgICAgIGlmIChnMyAhPT0gZ1Vud3JhcHBlZCkge1xuICAgICAgICAhZ3Vlc3RUb0hvc3QuaGFzKGczKSB8fCAvKiBzZXBhcmF0ZSBsaW5lIHNvIEkgY2FuIHNldCBhIGJyZWFrcG9pbnQqL1xuICAgICAgICB0aHJvd1JlZGFjdGVkYGhpZGRlbiBndWVzdCB3cmFwcGVyIGFscmVhZHkgYm91bmQgJHtnM31gO1xuICAgICAgICBndWVzdFRvSG9zdC5pbml0KGczLCBoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBnVW53cmFwcGVkO1xuICAgIH0sXG4gICAgaGFzR3Vlc3QoZzMpIHtcbiAgICAgIGhhcmRlbihnMyk7XG4gICAgICBjb25zdCB7IHNlbGYgfSA9IHRoaXM7XG4gICAgICBjb25zdCBndWVzdFRvSG9zdCA9IGcyaC5mb3Ioc2VsZik7XG4gICAgICByZXR1cm4gZ3Vlc3RUb0hvc3QuaGFzKGczKTtcbiAgICB9LFxuICAgIGhhc0hvc3QoaCkge1xuICAgICAgY29uc3QgeyBzZWxmIH0gPSB0aGlzO1xuICAgICAgY29uc3QgaG9zdFRvR3Vlc3QgPSBoMmcuZm9yKHNlbGYpO1xuICAgICAgcmV0dXJuIGhvc3RUb0d1ZXN0LmhhcyhoKTtcbiAgICB9LFxuICAgIGhhcyhnMywgaCkge1xuICAgICAgaGFyZGVuKGczKTtcbiAgICAgIGNvbnN0IHsgc2VsZiB9ID0gdGhpcztcbiAgICAgIGNvbnN0IGd1ZXN0VG9Ib3N0ID0gZzJoLmZvcihzZWxmKTtcbiAgICAgIGNvbnN0IGhvc3RUb0d1ZXN0ID0gaDJnLmZvcihzZWxmKTtcbiAgICAgIGlmIChndWVzdFRvSG9zdC5oYXMoZzMpKSB7XG4gICAgICAgIHRvUGFzc2FibGVDYXAoZ3Vlc3RUb0hvc3QuZ2V0KGczKSkgPT09IHRvUGFzc2FibGVDYXAoaCkgfHwgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbDogZy0+aCAke2czfSAtPiAke2h9IHZzICR7Z3Vlc3RUb0hvc3QuZ2V0KGczKX1gO1xuICAgICAgICBob3N0VG9HdWVzdC5nZXQoaCkgPT09IGczIHx8IHRocm93UmVkYWN0ZWRgaW50ZXJuYWwgaC0+ZzogJHtofSAtPiAke2czfSB2cyAke2hvc3RUb0d1ZXN0LmdldChoKX1gO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICFob3N0VG9HdWVzdC5oYXMoaCkgfHwgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbDogdW5leHBlY3RlZCBoLT5nICR7aH0gLT4gJHtob3N0VG9HdWVzdC5nZXQoaCl9YDtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ3Vlc3RUb0hvc3QoZzMpIHtcbiAgICAgIGhhcmRlbihnMyk7XG4gICAgICBjb25zdCB7IHNlbGYgfSA9IHRoaXM7XG4gICAgICBjb25zdCBndWVzdFRvSG9zdCA9IGcyaC5mb3Ioc2VsZik7XG4gICAgICByZXR1cm4gZ3Vlc3RUb0hvc3QuZ2V0KGczKTtcbiAgICB9LFxuICAgIGhvc3RUb0d1ZXN0KGgpIHtcbiAgICAgIGNvbnN0IHsgc2VsZiB9ID0gdGhpcztcbiAgICAgIGNvbnN0IGhvc3RUb0d1ZXN0ID0gaDJnLmZvcihzZWxmKTtcbiAgICAgIHJldHVybiBob3N0VG9HdWVzdC5nZXQoaCk7XG4gICAgfVxuICB9KTtcbn07XG5oYXJkZW4ocHJlcGFyZUJpamVjdGlvbik7XG5cbi8qIC4uL2FzeW5jLWZsb3cvc3JjL2VuZG93bWVudHMuanMqL1xudmFyIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I0LFxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOCxcbiAgY3JlYXRlOiBjcmVhdGU3LFxuICBmcm9tRW50cmllczogZnJvbUVudHJpZXMxNCxcbiAgZW50cmllczogZW50cmllczksXG4gIHByb3RvdHlwZTogb2JqZWN0UHJvdG90eXBlNlxufSA9IE9iamVjdDtcbnZhciB7IG93bktleXM6IG93bktleXMyMiB9ID0gUmVmbGVjdDtcbnZhciBGdW5jdGlvbldyYXBwZXJJID0gTS5pbnRlcmZhY2UoXCJGdW5jdGlvbldyYXBwZXJcIiwge1xuICBhcHBseTogTS5jYWxsKE0uYXJyYXkoKSkucmV0dXJucyhNLmFueSgpKVxufSk7XG52YXIgU3RhdGVBY2Nlc3NvckkgPSBNLmludGVyZmFjZShcIlN0YXRlQWNjZXNzb3JcIiwge1xuICBnZXQ6IE0uY2FsbChQcm9wZXJ0eUtleVNoYXBlKS5yZXR1cm5zKE0uYW55KCkpLFxuICBzZXQ6IE0uY2FsbChQcm9wZXJ0eUtleVNoYXBlLCBNLmFueSgpKS5yZXR1cm5zKClcbn0pO1xudmFyIFVud3JhcHBlckkgPSBNLmludGVyZmFjZShcIlVud3JhcHBlclwiLCB7XG4gIHVud3JhcDogTS5jYWxsKE0ucmVtb3RhYmxlKFwiZ3Vlc3RXcmFwcGVkXCIpKS5yZXR1cm5zKE0ucmF3KCkpXG59KTtcbnZhciBmb3J3YXJkaW5nTWV0aG9kcyA9IChyZW0pID0+IHtcbiAgY29uc3Qga2V5czggPSByZW1bR0VUX01FVEhPRF9OQU1FU10oKTtcbiAgY29uc3QgbWFrZU1ldGhvZEVudHJ5ID0gKGtleSkgPT4gZW50cmllczkoe1xuICAgIFtrZXldKC4uLmFyZ3MpIHtcbiAgICAgIHJldHVybiByZW1ba2V5XSguLi5hcmdzKTtcbiAgICB9XG4gIH0pWzBdO1xuICByZXR1cm4gZnJvbUVudHJpZXMxNChrZXlzOC5tYXAobWFrZU1ldGhvZEVudHJ5KSk7XG59O1xudmFyIHByZXBhcmVFbmRvd21lbnRUb29scyA9IChvdXRlclpvbmUsIG91dGVyT3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IHsgdm93VG9vbHMgPSBwcmVwYXJlU3dpbmdzZXRWb3dUb29scyhvdXRlclpvbmUpIH0gPSBvdXRlck9wdGlvbnM7XG4gIGNvbnN0IHsgbWFrZVZvd0tpdCB9ID0gdm93VG9vbHM7XG4gIGNvbnN0IGZ1bmN0aW9uVW53cmFwcGVyID0gb3V0ZXJab25lLmV4byhcIkZ1bmN0aW9uVW53cmFwcGVyXCIsIFVud3JhcHBlckksIHtcbiAgICB1bndyYXAoZ3Vlc3RXcmFwcGVkKSB7XG4gICAgICByZXR1cm4gRmFyKFwiVW53cmFwcGVkRnVuY3Rpb25cIiwgKC4uLmFyZ3MpID0+IGd1ZXN0V3JhcHBlZC5hcHBseShhcmdzKSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgbWFrZVN0YXRlVW53cmFwcGVyID0gb3V0ZXJab25lLmV4b0NsYXNzKFxuICAgIFwiU3RhdGVVbndyYXBwZXJcIixcbiAgICBVbndyYXBwZXJJLFxuICAgIChrZXlzOCkgPT4gKHsga2V5czoga2V5czggfSksXG4gICAge1xuICAgICAgdW53cmFwKGd1ZXN0V3JhcHBlZCkge1xuICAgICAgICBjb25zdCB7IHN0YXRlIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGtleXM6IGtleXM4IH0gPSBzdGF0ZTtcbiAgICAgICAgcmV0dXJuIGhhcmRlbihcbiAgICAgICAgICBjcmVhdGU3KFxuICAgICAgICAgICAgb2JqZWN0UHJvdG90eXBlNixcbiAgICAgICAgICAgIGZyb21FbnRyaWVzMTQoXG4gICAgICAgICAgICAgIGtleXM4LmZsYXRNYXAoXG4gICAgICAgICAgICAgICAgKGtleSkgPT4gZW50cmllczkoXG4gICAgICAgICAgICAgICAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOCh7XG4gICAgICAgICAgICAgICAgICAgIGdldCBba2V5XSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ3Vlc3RXcmFwcGVkLmdldChrZXkpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzZXQgW2tleV0obmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBndWVzdFdyYXBwZWQuc2V0KGtleSwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIGNvbnN0IGVuZG93bWVudEtpbmRPZiA9IChlMikgPT4ge1xuICAgIGhhcmRlbihlMik7XG4gICAgaWYgKGlzUHJvbWlzZShlMikpIHtcbiAgICAgIHJldHVybiBcInByb21pc2VcIjtcbiAgICB9IGVsc2UgaWYgKG91dGVyWm9uZS5pc1N0b3JhYmxlKGUyKSkge1xuICAgICAgcmV0dXJuIFwic3RvcmFibGVcIjtcbiAgICB9IGVsc2UgaWYgKGlzUGFzc2FibGUoZTIpICYmIGlzUmVtb3RhYmxlKGUyKSkge1xuICAgICAgcmV0dXJuIFwiZmFyXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZTIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuIFwiZnVuY3Rpb25cIjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlMiA9PT0gXCJvYmplY3RcIikge1xuICAgICAgaWYgKGUyID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgaW50ZXJuYWw6IG51bGwgaXMgYWx3YXlzIHN0b3JhYmxlYDtcbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGUyKSkge1xuICAgICAgICByZXR1cm4gXCJhcnJheVwiO1xuICAgICAgfVxuICAgICAgY29uc3Qga2V5czggPSBvd25LZXlzMjIoZTIpO1xuICAgICAga2V5czgubGVuZ3RoID49IDEgfHwgdGhyb3dSZWRhY3RlZGBlbXB0eSByZWNvcmQgc2hvdWxkIGJlIHN0b3JhYmxlICR7ZTJ9YDtcbiAgICAgIGNvbnN0IGRlc2MgPSAoXG4gICAgICAgIC8qKiBAdHlwZSB7UHJvcGVydHlEZXNjcmlwdG9yfSAqL1xuICAgICAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I0KGUyLCBrZXlzOFswXSlcbiAgICAgICk7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHtcbiAgICAgICAgcmV0dXJuIFwicmVjb3JkXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBcImdldFwiIGluIGRlc2MgfHwgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbDogdW5leHBlY3RlZCBkZXNjcmlwdG9yICR7ZGVzY31gO1xuICAgICAgICByZXR1cm4gXCJzdGF0ZVwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYHVuZXhwZWN0ZWQgZW5kb3dtZW50ICR7ZTJ9YDtcbiAgICB9XG4gIH07XG4gIGhhcmRlbihlbmRvd21lbnRLaW5kT2YpO1xuICBjb25zdCB1bndyYXBNYXAgPSBvdXRlclpvbmUud2Vha01hcFN0b3JlKFwidW53cmFwTWFwXCIsIHtcbiAgICBrZXlTaGFwZTogTS5yZW1vdGFibGUoXCJ3cmFwcGVkXCIpLFxuICAgIHZhbHVlU2hhcGU6IE0ucmVtb3RhYmxlKFwidW53cmFwcGVyXCIpXG4gIH0pO1xuICBjb25zdCB1bndyYXBNYXBIYXMgPSAoaykgPT4ge1xuICAgIGlmIChpc1ZvdyhrKSB8fCBpc1JlbW90YWJsZShrKSkge1xuICAgICAgcmV0dXJuIHVud3JhcE1hcC5oYXModG9QYXNzYWJsZUNhcChrKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHVud3JhcE1hcEdldCA9IChrKSA9PiB1bndyYXBNYXAuZ2V0KHRvUGFzc2FibGVDYXAoaykpO1xuICBjb25zdCB1bndyYXBNYXBTZXQgPSAoaywgdjIpID0+IHtcbiAgICBjb25zdCBrMiA9IHRvUGFzc2FibGVDYXAoayk7XG4gICAgaWYgKHVud3JhcE1hcEhhcyhrKSkge1xuICAgICAgdW53cmFwTWFwLnNldChrMiwgdjIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1bndyYXBNYXAuaW5pdChrMiwgdjIpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcHJlcGFyZUVuZG93bWVudCA9ICh6b25lLCB0YWcsIGUyKSA9PiB7XG4gICAgY29uc3QgZUtpbmQgPSBlbmRvd21lbnRLaW5kT2YoZTIpO1xuICAgIHN3aXRjaCAoZUtpbmQpIHtcbiAgICAgIGNhc2UgXCJwcm9taXNlXCI6IHtcbiAgICAgICAgY29uc3QgcDMgPSAoXG4gICAgICAgICAgLyoqIEB0eXBlIHtQcm9taXNlfSAqL1xuICAgICAgICAgIGUyXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHsgdm93LCByZXNvbHZlciB9ID0gbWFrZVZvd0tpdCgpO1xuICAgICAgICB2b2lkIEUud2hlbihcbiAgICAgICAgICBwMyxcbiAgICAgICAgICAodjIpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmVyLnJlc29sdmUodjIpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgKHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgaWYgKCFpc1VwZ3JhZGVEaXNjb25uZWN0aW9uKHJlYXNvbikpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZXIucmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gdm93O1xuICAgICAgfVxuICAgICAgY2FzZSBcInN0b3JhYmxlXCI6IHtcbiAgICAgICAgcmV0dXJuIGUyO1xuICAgICAgfVxuICAgICAgY2FzZSBcImZhclwiOiB7XG4gICAgICAgIGNvbnN0IHI2ID0gKFxuICAgICAgICAgIC8qKiBAdHlwZSB7UmVtb3RhYmxlT2JqZWN0fSAqL1xuICAgICAgICAgIGUyXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IG1ldGhvZHMgPSBmb3J3YXJkaW5nTWV0aG9kcyhyNik7XG4gICAgICAgIHJldHVybiB6b25lLmV4byhcbiAgICAgICAgICB0YWcsXG4gICAgICAgICAgTS5pbnRlcmZhY2UoXCJGYXJXcmFwcGVkXCIsIHt9LCB7IGRlZmF1bHRHdWFyZHM6IFwicmF3XCIgfSksXG4gICAgICAgICAgbWV0aG9kc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6IHtcbiAgICAgICAgY29uc3QgZjIgPSAoXG4gICAgICAgICAgLyoqIEB0eXBlIHtDYWxsYWJsZX0gKi9cbiAgICAgICAgICBlMlxuICAgICAgICApO1xuICAgICAgICBjb25zdCB3cmFwcGVkID0gem9uZS5leG8odGFnLCBGdW5jdGlvbldyYXBwZXJJLCB7XG4gICAgICAgICAgYXBwbHkoYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIGYyKC4uLmFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHVud3JhcE1hcFNldCh3cmFwcGVkLCBmdW5jdGlvblVud3JhcHBlcik7XG4gICAgICAgIHJldHVybiB3cmFwcGVkO1xuICAgICAgfVxuICAgICAgY2FzZSBcImFycmF5XCI6IHtcbiAgICAgICAgY29uc3QgYTIgPSAoXG4gICAgICAgICAgLyoqIEB0eXBlIHt1bmtub3duW119ICovXG4gICAgICAgICAgZTJcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3Qgc3ViWm9uZSA9IHpvbmUuc3ViWm9uZSh0YWcpO1xuICAgICAgICByZXR1cm4gYTIubWFwKChzdWJFLCBpMykgPT4gcHJlcGFyZUVuZG93bWVudChzdWJab25lLCBgJHtpM31gLCBzdWJFKSk7XG4gICAgICB9XG4gICAgICBjYXNlIFwicmVjb3JkXCI6IHtcbiAgICAgICAgY29uc3QgcjYgPSAoXG4gICAgICAgICAgLyoqIEB0eXBlIHtSZWNvcmQ8UHJvcGVydHlLZXksIHVua25vd24+fSAqL1xuICAgICAgICAgIGUyXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHN1YlpvbmUgPSB6b25lLnN1YlpvbmUodGFnKTtcbiAgICAgICAgcmV0dXJuIG9iamVjdE1hcChcbiAgICAgICAgICByNixcbiAgICAgICAgICAoc3ViRSwgaykgPT4gcHJlcGFyZUVuZG93bWVudChzdWJab25lLCBTdHJpbmcoayksIHN1YkUpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjYXNlIFwic3RhdGVcIjoge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IChcbiAgICAgICAgICAvKiogQHR5cGUge1JlY29yZDxQcm9wZXJ0eUtleSwgdW5rbm93bj59ICovXG4gICAgICAgICAgZTJcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3Qga2V5czggPSBoYXJkZW4ob3duS2V5czIyKHN0YXRlKSk7XG4gICAgICAgIGNvbnN0IHdyYXBwZWQgPSB6b25lLmV4byh0YWcsIFN0YXRlQWNjZXNzb3JJLCB7XG4gICAgICAgICAgZ2V0KGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlW2tleV07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQoa2V5LCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgc3RhdGVba2V5XSA9IG5ld1ZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHN0YXRlVW53cmFwcGVyID0gbWFrZVN0YXRlVW53cmFwcGVyKGtleXM4KTtcbiAgICAgICAgdW53cmFwTWFwU2V0KHdyYXBwZWQsIHN0YXRlVW53cmFwcGVyKTtcbiAgICAgICAgcmV0dXJuIHdyYXBwZWQ7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgdW5leHBlY3RlZCBlbmRvd21lbnQgJHtlMn1gO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgdW53cmFwID0gKHdyYXBwZWQsIGd1ZXN0V3JhcHBlZCkgPT4ge1xuICAgIGlmICh1bndyYXBNYXBIYXMod3JhcHBlZCkpIHtcbiAgICAgIGNvbnN0IHVud3JhcHBlciA9IHVud3JhcE1hcEdldCh3cmFwcGVkKTtcbiAgICAgIHJldHVybiB1bndyYXBwZXIudW53cmFwKGd1ZXN0V3JhcHBlZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBndWVzdFdyYXBwZWQ7XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGFyZGVuKHsgcHJlcGFyZUVuZG93bWVudCwgdW53cmFwIH0pO1xufTtcbmhhcmRlbihwcmVwYXJlRW5kb3dtZW50VG9vbHMpO1xuXG4vKiAuLi9hc3luYy1mbG93L3NyYy9hc3luYy1mbG93LmpzKi9cbnZhciB7IGRlZmluZVByb3BlcnRpZXM6IGRlZmluZVByb3BlcnRpZXM2IH0gPSBPYmplY3Q7XG52YXIgQXN5bmNGbG93SUtpdCA9IGhhcmRlbih7XG4gIGZsb3c6IE0uaW50ZXJmYWNlKFwiRmxvd1wiLCB7XG4gICAgZ2V0Rmxvd1N0YXRlOiBNLmNhbGwoKS5yZXR1cm5zKEZsb3dTdGF0ZVNoYXBlKSxcbiAgICByZXN0YXJ0OiBNLmNhbGwoKS5vcHRpb25hbChNLmJvb2xlYW4oKSkucmV0dXJucygpLFxuICAgIHdha2U6IE0uY2FsbCgpLnJldHVybnMoKSxcbiAgICBnZXRPdXRjb21lOiBNLmNhbGwoKS5yZXR1cm5zKFZvd1NoYXBlKSxcbiAgICBkdW1wOiBNLmNhbGwoKS5yZXR1cm5zKE0uYXJyYXlPZihMb2dFbnRyeVNoYXBlKSksXG4gICAgZ2V0T3B0RmF0YWxQcm9ibGVtOiBNLmNhbGwoKS5yZXR1cm5zKE0ub3B0KE0uZXJyb3IoKSkpXG4gIH0pLFxuICBhZG1pbjogTS5pbnRlcmZhY2UoXCJGbG93QWRtaW5cIiwge1xuICAgIHJlc2V0OiBNLmNhbGwoKS5yZXR1cm5zKCksXG4gICAgY29tcGxldGU6IE0uY2FsbCgpLnJldHVybnMoKSxcbiAgICBwYW5pYzogTS5jYWxsKE0uZXJyb3IoKSkucmV0dXJucyhNLm5vdChNLmFueSgpKSlcbiAgICAvKiBvbmx5IHRocm93cyovXG4gIH0pLFxuICB3YWtlV2F0Y2hlcjogUHJvbWlzZVdhdGNoZXJJXG59KTtcbnZhciBBZG1pbkFzeW5jRmxvd0kgPSBNLmludGVyZmFjZShcIkFzeW5jRmxvd0FkbWluXCIsIHtcbiAgZ2V0RmFpbHVyZXM6IE0uY2FsbCgpLnJldHVybnMoTS5tYXBPZihNLnJlbW90YWJsZShcImFzeW5jRmxvd1wiKSwgTS5lcnJvcigpKSksXG4gIHdha2VBbGw6IE0uY2FsbCgpLnJldHVybnMoKSxcbiAgZ2V0Rmxvd0Zvck91dGNvbWVWb3c6IE0uY2FsbChWb3dTaGFwZSkucmV0dXJucyhNLm9wdChNLnJlbW90YWJsZShcImZsb3dcIikpKVxufSk7XG52YXIgcHJlcGFyZUFzeW5jRmxvd1Rvb2xzID0gKG91dGVyWm9uZSwgb3V0ZXJPcHRpb25zID0ge30pID0+IHtcbiAgY29uc3Qge1xuICAgIHZvd1Rvb2xzID0gcHJlcGFyZVN3aW5nc2V0Vm93VG9vbHMob3V0ZXJab25lKSxcbiAgICBtYWtlTG9nU3RvcmUgPSBwcmVwYXJlTG9nU3RvcmUob3V0ZXJab25lKSxcbiAgICBlbmRvd21lbnRUb29sczogeyBwcmVwYXJlRW5kb3dtZW50LCB1bndyYXAgfSA9IHByZXBhcmVFbmRvd21lbnRUb29scyhcbiAgICAgIG91dGVyWm9uZSxcbiAgICAgIHsgdm93VG9vbHMgfVxuICAgICksXG4gICAgbWFrZUJpamVjdGlvbiA9IHByZXBhcmVCaWplY3Rpb24ob3V0ZXJab25lLCB1bndyYXApLFxuICAgIHBhbmljSGFuZGxlciA9IChlcnIpID0+IHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH0gPSBvdXRlck9wdGlvbnM7XG4gIGNvbnN0IHsgd2F0Y2gsIG1ha2VWb3dLaXQgfSA9IHZvd1Rvb2xzO1xuICBjb25zdCBmYWlsdXJlcyA9IG91dGVyWm9uZS5tYXBTdG9yZShcImFzeW5jRnVuY0ZhaWx1cmVzXCIsIHtcbiAgICBrZXlTaGFwZTogTS5yZW1vdGFibGUoXCJmbG93XCIpLFxuICAgIC8qIGZsb3dTdGF0ZSA9PT0gJ0ZhaWxlZCcqL1xuICAgIHZhbHVlU2hhcGU6IE0uZXJyb3IoKVxuICB9KTtcbiAgY29uc3QgZWFnZXJXYWtlcnMgPSBvdXRlclpvbmUuc2V0U3RvcmUoYGFzeW5jRnVuY0VhZ2VyV2FrZXJzYCwge1xuICAgIGtleVNoYXBlOiBNLnJlbW90YWJsZShcImZsb3dcIilcbiAgICAvKiBmbG93U3RhdGUgIT09ICdEb25lJyovXG4gIH0pO1xuICBjb25zdCBtZW1icmFuZU1hcCA9IG1ha2VTY2FsYXJXZWFrTWFwU3RvcmUoXCJtZW1icmFuZUZvclwiLCB7XG4gICAga2V5U2hhcGU6IE0ucmVtb3RhYmxlKFwiZmxvd1wiKSxcbiAgICB2YWx1ZVNoYXBlOiBNLnJlbW90YWJsZShcIm1lbWJyYW5lXCIpXG4gIH0pO1xuICBjb25zdCBoYXNNZW1icmFuZSA9IChmbG93KSA9PiBtZW1icmFuZU1hcC5oYXMoZmxvdyk7XG4gIGNvbnN0IGdldE1lbWJyYW5lID0gKGZsb3cpID0+IG1lbWJyYW5lTWFwLmdldChmbG93KTtcbiAgY29uc3QgaW5pdE1lbWJyYW5lID0gKGZsb3csIG1lbWJyYW5lKSA9PiBtZW1icmFuZU1hcC5pbml0KGZsb3csIG1lbWJyYW5lKTtcbiAgY29uc3QgZGVsZXRlTWVtYnJhbmUgPSAoZmxvdykgPT4gbWVtYnJhbmVNYXAuZGVsZXRlKGZsb3cpO1xuICBjb25zdCBmbG93Rm9yT3V0Y29tZVZvd0tleSA9IG91dGVyWm9uZS5tYXBTdG9yZShcImZsb3dGb3JPdXRjb21lVm93XCIsIHtcbiAgICBrZXlTaGFwZTogTS5yZW1vdGFibGUoXCJ0b1Bhc3NhYmxlQ2FwXCIpLFxuICAgIHZhbHVlU2hhcGU6IE0ucmVtb3RhYmxlKFwiZmxvd1wiKVxuICAgIC8qIGZsb3dTdGF0ZSAhPT0gJ0RvbmUnKi9cbiAgfSk7XG4gIGNvbnN0IHByZXBhcmVBc3luY0Zsb3dLaXQgPSAoem9uZSwgdGFnLCBndWVzdEFzeW5jRnVuYywgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgdHlwZW9mIGd1ZXN0QXN5bmNGdW5jID09PSBcImZ1bmN0aW9uXCIgfHwgdGhyb3dSZWRhY3RlZGBndWVzdEFzeW5jRnVuYyBtdXN0IGJlIGEgY2FsbGFibGUgZnVuY3Rpb24gJHtndWVzdEFzeW5jRnVuY31gO1xuICAgIGNvbnN0IHtcbiAgICAgIC8qIE1heSBjaGFuZ2UgZGVmYXVsdCB0byBmYWxzZSwgb25jZSBpbnN0YW5jZXMgcmVsaWFibHkgd2FrZSB1cCovXG4gICAgICBzdGFydEVhZ2VyID0gdHJ1ZVxuICAgIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGludGVybmFsTWFrZUFzeW5jRmxvd0tpdCA9IHpvbmUuZXhvQ2xhc3NLaXQoXG4gICAgICB0YWcsXG4gICAgICBBc3luY0Zsb3dJS2l0LFxuICAgICAgKGFjdGl2YXRpb25BcmdzKSA9PiB7XG4gICAgICAgIGhhcmRlbihhY3RpdmF0aW9uQXJncyk7XG4gICAgICAgIGNvbnN0IGxvZyA9IG1ha2VMb2dTdG9yZSgpO1xuICAgICAgICBjb25zdCBiaWplY3Rpb24gPSBtYWtlQmlqZWN0aW9uKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYWN0aXZhdGlvbkFyZ3MsXG4gICAgICAgICAgLyogcmVwbGF5IHN0YXJ0cyBieSByZWFjdGl2YXRpbmcgd2l0aCB0aGVzZSovXG4gICAgICAgICAgbG9nLFxuICAgICAgICAgIC8qIGxvZyB0byBiZSBhY2N1bXVsYXRlZCBvciByZXBsYXllZCovXG4gICAgICAgICAgYmlqZWN0aW9uLFxuICAgICAgICAgIC8qIG1lbWJyYW5lJ3MgZ3Vlc3QtaG9zdCBtYXBwaW5nKi9cbiAgICAgICAgICBvdXRjb21lS2l0OiBtYWtlVm93S2l0KCksXG4gICAgICAgICAgLyogb3V0Y29tZSBvZiBhY3RpdmF0aW9uIGFzIGhvc3Qgdm93Ki9cbiAgICAgICAgICBpc0RvbmU6IGZhbHNlXG4gICAgICAgICAgLyogcGVyc2lzdGVudGx5IGRvbmUqL1xuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZmxvdzoge1xuICAgICAgICAgIC8qKlxuICogQHJldHVybnMge0Zsb3dTdGF0ZX1cbiAqL1xuICAgICAgICAgIGdldEZsb3dTdGF0ZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgc3RhdGUsIGZhY2V0cyB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IHsgbG9nLCBvdXRjb21lS2l0LCBpc0RvbmUgfSA9IHN0YXRlO1xuICAgICAgICAgICAgY29uc3QgeyBmbG93IH0gPSBmYWNldHM7XG4gICAgICAgICAgICBpZiAoaXNEb25lKSB7XG4gICAgICAgICAgICAgICFoYXNNZW1icmFuZShmbG93KSB8fCB0aHJvd1JlZGFjdGVkYERvbmUgZmxvdyBtdXN0IGRyb3AgbWVtYnJhbmUgJHtmbG93fSAke2dldE1lbWJyYW5lKGZsb3cpfWA7XG4gICAgICAgICAgICAgICFmYWlsdXJlcy5oYXMoZmxvdykgfHwgdGhyb3dSZWRhY3RlZGBEb25lIGZsb3cgbXVzdCBub3QgYmUgaW4gZmFpbHVyZXMgJHtmbG93fSAke2ZhaWx1cmVzLmdldChmbG93KX1gO1xuICAgICAgICAgICAgICAhZWFnZXJXYWtlcnMuaGFzKGZsb3cpIHx8IHRocm93UmVkYWN0ZWRgRG9uZSBmbG93IG11c3Qgbm90IGJlIGluIGVhZ2VyV2FrZXJzICR7Zmxvd31gO1xuICAgICAgICAgICAgICAhZmxvd0Zvck91dGNvbWVWb3dLZXkuaGFzKG91dGNvbWVLaXQudm93KSB8fCB0aHJvd1JlZGFjdGVkYERvbmUgZmxvdyBtdXN0IGRyb3AgZmxvdyBsb29rdXAgZnJvbSB2b3cgJHtvdXRjb21lS2l0LnZvd31gO1xuICAgICAgICAgICAgICBsb2cuZ2V0SW5kZXgoKSA9PT0gMCAmJiBsb2cuZ2V0TGVuZ3RoKCkgPT09IDAgfHwgdGhyb3dSZWRhY3RlZGBEb25lIGZsb3cgbXVzdCBlbXB0eSBsb2cgJHtmbG93fSAke2xvZ31gO1xuICAgICAgICAgICAgICByZXR1cm4gXCJEb25lXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmFpbHVyZXMuaGFzKGZsb3cpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBcIkZhaWxlZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFoYXNNZW1icmFuZShmbG93KSkge1xuICAgICAgICAgICAgICBsb2cuZ2V0SW5kZXgoKSA9PT0gMCB8fCB0aHJvd1JlZGFjdGVkYFNsZWVwaW5nIGZsb3cgbXVzdCBwbGF5IGZyb20gbG9nIHN0YXJ0ICR7Zmxvd30gJHtsb2cuZ2V0SW5kZXgoKX1gO1xuICAgICAgICAgICAgICByZXR1cm4gXCJTbGVlcGluZ1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxvZy5pc1JlcGxheWluZygpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBcIlJlcGxheWluZ1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFwiUnVubmluZ1wiO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgLyoqXG4gKiBDYWxscyB0aGUgZ3Vlc3QgZnVuY3Rpb24sIGVpdGhlciBmb3IgdGhlIGluaXRpYWwgcnVuIG9yIGF0IHRoZVxuICogc3RhcnQgb2YgYSByZXBsYXkuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSBbZWFnZXJdXG4gKi9cbiAgICAgICAgICByZXN0YXJ0KGVhZ2VyID0gc3RhcnRFYWdlcikge1xuICAgICAgICAgICAgY29uc3QgeyBzdGF0ZSwgZmFjZXRzIH0gPSB0aGlzO1xuICAgICAgICAgICAgY29uc3QgeyBhY3RpdmF0aW9uQXJncywgbG9nLCBiaWplY3Rpb24sIG91dGNvbWVLaXQgfSA9IHN0YXRlO1xuICAgICAgICAgICAgY29uc3QgeyBmbG93LCBhZG1pbiwgd2FrZVdhdGNoZXIgfSA9IGZhY2V0cztcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0Rmxvd1N0YXRlID0gZmxvdy5nZXRGbG93U3RhdGUoKTtcbiAgICAgICAgICAgIHN0YXJ0Rmxvd1N0YXRlICE9PSBcIkRvbmVcIiB8fCAvKiBzZXBhcmF0ZSBsaW5lIHNvIEkgY2FuIHNldCBhIGJyZWFrcG9pbnQqL1xuICAgICAgICAgICAgdGhyb3dSZWRhY3RlZGBDYW5ub3QgcmVzdGFydCBhIGRvbmUgZmxvdyAke2Zsb3d9YDtcbiAgICAgICAgICAgIGFkbWluLnJlc2V0KCk7XG4gICAgICAgICAgICBpZiAoZWFnZXIpIHtcbiAgICAgICAgICAgICAgZWFnZXJXYWtlcnMuYWRkKGZsb3cpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlYWdlcldha2Vycy5oYXMoZmxvdykpIHtcbiAgICAgICAgICAgICAgZWFnZXJXYWtlcnMuZGVsZXRlKGZsb3cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgd2F0Y2hXYWtlID0gKHZvd2lzaCkgPT4ge1xuICAgICAgICAgICAgICB6b25lLmlzU3RvcmFibGUodm93aXNoKSB8fCB0aHJvd1JlZGFjdGVkYHZvd2lzaCBtdXN0IGJlIHN0b3JhYmxlIGluIHRoaXMgem9uZSAodXN1YWxseSwgbXVzdCBiZSBkdXJhYmxlKTogJHt2b3dpc2h9YDtcbiAgICAgICAgICAgICAgem9uZS5pc1N0b3JhYmxlKHdha2VXYXRjaGVyKSB8fCB0aHJvd1JlZGFjdGVkYHdha2VXYXRjaGVyIG11c3QgYmUgc3RvcmFibGUgaW4gdGhpcyB6b25lICh1c3VhbGx5LCBtdXN0IGJlIGR1cmFibGUpOiAke3dha2VXYXRjaGVyfWA7XG4gICAgICAgICAgICAgIHdhdGNoKHZvd2lzaCwgd2FrZVdhdGNoZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHBhbmljID0gKGVycikgPT4gYWRtaW4ucGFuaWMoZXJyKTtcbiAgICAgICAgICAgIGNvbnN0IG1lbWJyYW5lID0gbWFrZVJlcGxheU1lbWJyYW5lKHtcbiAgICAgICAgICAgICAgbG9nLFxuICAgICAgICAgICAgICBiaWplY3Rpb24sXG4gICAgICAgICAgICAgIHZvd1Rvb2xzLFxuICAgICAgICAgICAgICB3YXRjaFdha2UsXG4gICAgICAgICAgICAgIHBhbmljXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGluaXRNZW1icmFuZShmbG93LCBtZW1icmFuZSk7XG4gICAgICAgICAgICBjb25zdCBndWVzdEFyZ3MgPSBtZW1icmFuZS5ob3N0VG9HdWVzdChhY3RpdmF0aW9uQXJncyk7XG4gICAgICAgICAgICBjb25zdCBmbG93U3RhdGUgPSBmbG93LmdldEZsb3dTdGF0ZSgpO1xuICAgICAgICAgICAgZmxvd1N0YXRlID09PSBcIlJ1bm5pbmdcIiB8fCBmbG93U3RhdGUgPT09IFwiUmVwbGF5aW5nXCIgfHwgdGhyb3dSZWRhY3RlZGBSZXN0YXJ0ZWQgZmxvdyBtdXN0IGJlIFJ1bm5pbmcgb3IgUmVwbGF5aW5nICR7Zmxvd31gO1xuICAgICAgICAgICAgbWVtYnJhbmUud2FrZSgpO1xuICAgICAgICAgICAgY29uc3QgZ3Vlc3RSZXN1bHRQID0gKGFzeW5jICgpID0+IChcbiAgICAgICAgICAgICAgLyogYXN5bmMgSUZGRSBlbnN1cmVzIGd1ZXN0UmVzdWx0UCBpcyBhIGZyZXNoIHByb21pc2UqL1xuICAgICAgICAgICAgICBndWVzdEFzeW5jRnVuYyguLi5ndWVzdEFyZ3MpXG4gICAgICAgICAgICApKSgpO1xuICAgICAgICAgICAgaWYgKGZsb3cuZ2V0Rmxvd1N0YXRlKCkgIT09IFwiRmFpbGVkXCIpIHtcbiAgICAgICAgICAgICAgY29uc3QgZzMgPSBiaWplY3Rpb24udW53cmFwSW5pdChndWVzdFJlc3VsdFAsIG91dGNvbWVLaXQudm93KTtcbiAgICAgICAgICAgICAgZzMgPT09IGd1ZXN0UmVzdWx0UCB8fCB0aHJvd1JlZGFjdGVkYGludGVybmFsOiBwcm9taXNlcyBzaG91bGQgbm90IGJlIHVud3JhcHBlZCAke2czfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2b2lkIEUud2hlbihcbiAgICAgICAgICAgICAgZ3Vlc3RSZXN1bHRQLFxuICAgICAgICAgICAgICAoZ0Z1bGZpbGxtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGJpamVjdGlvbi5oYXNHdWVzdChndWVzdFJlc3VsdFApKSB7XG4gICAgICAgICAgICAgICAgICAhbG9nLmlzUmVwbGF5aW5nKCkgfHwgcGFuaWMoXG4gICAgICAgICAgICAgICAgICAgIG1ha2VFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICByZWRhY3RlZGBndWVzdCBmdWxmaWxsZWQgd2l0aCAke2dGdWxmaWxsbWVudH0gYmVmb3JlIGZpbmlzaGluZyByZXBsYXlgXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBvdXRjb21lS2l0LnJlc29sdmVyLnJlc29sdmUoXG4gICAgICAgICAgICAgICAgICAgIG1lbWJyYW5lLmd1ZXN0VG9Ib3N0KGdGdWxmaWxsbWVudClcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBhZG1pbi5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgKGd1ZXN0UmVhc29uKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGJpamVjdGlvbi5oYXNHdWVzdChndWVzdFJlc3VsdFApKSB7XG4gICAgICAgICAgICAgICAgICAhbG9nLmlzUmVwbGF5aW5nKCkgfHwgcGFuaWMoXG4gICAgICAgICAgICAgICAgICAgIG1ha2VFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICByZWRhY3RlZGBndWVzdCByZWplY3RlZCB3aXRoICR7Z3Vlc3RSZWFzb259IGJlZm9yZSBmaW5pc2hpbmcgcmVwbGF5YFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgb3V0Y29tZUtpdC5yZXNvbHZlci5yZWplY3QobWVtYnJhbmUuZ3Vlc3RUb0hvc3QoZ3Vlc3RSZWFzb24pKTtcbiAgICAgICAgICAgICAgICAgIGFkbWluLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLnRoZW4oXG4gICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZmxvdy5nZXRGbG93U3RhdGUoKSA9PT0gXCJGYWlsZWRcIikge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgZmxvdy5nZXRPcHRGYXRhbFByb2JsZW0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIChtYXliZVBhbmljUmVhc29uKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGZsb3cuZ2V0Rmxvd1N0YXRlKCkgPT09IFwiRmFpbGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGVycjIgPSBmbG93LmdldE9wdEZhdGFsUHJvYmxlbSgpO1xuICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyID0gbWFrZUVycm9yKFxuICAgICAgICAgICAgICAgICAgcmVkYWN0ZWRgaW50ZXJuYWw6IHVuZXhwZWN0ZWQgZXJyb3IgaW4gZ3Vlc3QgY29tcGxldGlvbiBoYW5kbGluZyAke21heWJlUGFuaWNSZWFzb259YFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHBhbmljKGVycik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoX2UpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICkuY2F0Y2gocGFuaWNIYW5kbGVyKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHdha2UoKSB7XG4gICAgICAgICAgICBjb25zdCB7IGZhY2V0cyB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IHsgZmxvdyB9ID0gZmFjZXRzO1xuICAgICAgICAgICAgY29uc3QgZmxvd1N0YXRlID0gZmxvdy5nZXRGbG93U3RhdGUoKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZmxvd1N0YXRlKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJEb25lXCI6XG4gICAgICAgICAgICAgIGNhc2UgXCJGYWlsZWRcIjoge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXNlIFwiUnVubmluZ1wiOlxuICAgICAgICAgICAgICBjYXNlIFwiUmVwbGF5aW5nXCI6IHtcbiAgICAgICAgICAgICAgICBnZXRNZW1icmFuZShmbG93KS53YWtlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgXCJTbGVlcGluZ1wiOiB7XG4gICAgICAgICAgICAgICAgZmxvdy5yZXN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYHVuZXhwZWN0ZWQgZmxvd1N0YXRlICR7cXVvdGUoZmxvd1N0YXRlKX1gO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZXRPdXRjb21lKCkge1xuICAgICAgICAgICAgY29uc3QgeyBzdGF0ZSB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IHsgb3V0Y29tZUtpdCB9ID0gc3RhdGU7XG4gICAgICAgICAgICByZXR1cm4gb3V0Y29tZUtpdC52b3c7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBkdW1wKCkge1xuICAgICAgICAgICAgY29uc3QgeyBzdGF0ZSB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IHsgbG9nIH0gPSBzdGF0ZTtcbiAgICAgICAgICAgIHJldHVybiBsb2cuZHVtcCgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2V0T3B0RmF0YWxQcm9ibGVtKCkge1xuICAgICAgICAgICAgY29uc3QgeyBmYWNldHMgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IGZsb3cgfSA9IGZhY2V0cztcbiAgICAgICAgICAgIHJldHVybiBmYWlsdXJlcy5oYXMoZmxvdykgPyBmYWlsdXJlcy5nZXQoZmxvdykgOiB2b2lkIDA7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhZG1pbjoge1xuICAgICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgICAgY29uc3QgeyBzdGF0ZSwgZmFjZXRzIH0gPSB0aGlzO1xuICAgICAgICAgICAgY29uc3QgeyBiaWplY3Rpb24sIGxvZyB9ID0gc3RhdGU7XG4gICAgICAgICAgICBjb25zdCB7IGZsb3cgfSA9IGZhY2V0cztcbiAgICAgICAgICAgICFzdGF0ZS5pc0RvbmUgfHwgdGhyb3dSZWRhY3RlZGBDYW5ub3QgcmVzZXQgYSBkb25lIGZsb3dgO1xuICAgICAgICAgICAgaWYgKGZhaWx1cmVzLmhhcyhmbG93KSkge1xuICAgICAgICAgICAgICBmYWlsdXJlcy5kZWxldGUoZmxvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaGFzTWVtYnJhbmUoZmxvdykpIHtcbiAgICAgICAgICAgICAgZ2V0TWVtYnJhbmUoZmxvdykuc3RvcCgpO1xuICAgICAgICAgICAgICBkZWxldGVNZW1icmFuZShmbG93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZy5yZXNldCgpO1xuICAgICAgICAgICAgYmlqZWN0aW9uLnJlc2V0KCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb21wbGV0ZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgc3RhdGUsIGZhY2V0cyB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IHsgbG9nIH0gPSBzdGF0ZTtcbiAgICAgICAgICAgIGNvbnN0IHsgZmxvdywgYWRtaW4gfSA9IGZhY2V0cztcbiAgICAgICAgICAgIGFkbWluLnJlc2V0KCk7XG4gICAgICAgICAgICBpZiAoZWFnZXJXYWtlcnMuaGFzKGZsb3cpKSB7XG4gICAgICAgICAgICAgIGVhZ2VyV2FrZXJzLmRlbGV0ZShmbG93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZsb3dGb3JPdXRjb21lVm93S2V5LmRlbGV0ZSh0b1Bhc3NhYmxlQ2FwKGZsb3cuZ2V0T3V0Y29tZSgpKSk7XG4gICAgICAgICAgICBzdGF0ZS5pc0RvbmUgPSB0cnVlO1xuICAgICAgICAgICAgbG9nLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIGZsb3cuZ2V0Rmxvd1N0YXRlKCkgPT09IFwiRG9uZVwiIHx8IHRocm93UmVkYWN0ZWRgQ29tcGxldGUgZmxvdyBtdXN0IGJlIERvbmUgJHtmbG93fWA7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwYW5pYyhmYXRhbFByb2JsZW0pIHtcbiAgICAgICAgICAgIGNvbnN0IHsgc3RhdGUsIGZhY2V0cyB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IHsgYmlqZWN0aW9uLCBsb2cgfSA9IHN0YXRlO1xuICAgICAgICAgICAgY29uc3QgeyBmbG93IH0gPSBmYWNldHM7XG4gICAgICAgICAgICBpZiAoZmFpbHVyZXMuaGFzKGZsb3cpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHByZXZFcnIgPSBmYWlsdXJlcy5nZXQoZmxvdyk7XG4gICAgICAgICAgICAgIG5vdGUoXG4gICAgICAgICAgICAgICAgcHJldkVycixcbiAgICAgICAgICAgICAgICByZWRhY3RlZGBkb3VibHkgZmFpbGVkIHNvbWVob3cgd2l0aCAke2ZhdGFsUHJvYmxlbX1gXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGZhdGFsUHJvYmxlbSA9IHByZXZFcnI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmYWlsdXJlcy5pbml0KGZsb3csIGZhdGFsUHJvYmxlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaGFzTWVtYnJhbmUoZmxvdykpIHtcbiAgICAgICAgICAgICAgZ2V0TWVtYnJhbmUoZmxvdykuc3RvcCgpO1xuICAgICAgICAgICAgICBkZWxldGVNZW1icmFuZShmbG93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvZy5yZXNldCgpO1xuICAgICAgICAgICAgYmlqZWN0aW9uLnJlc2V0KCk7XG4gICAgICAgICAgICBmbG93LmdldEZsb3dTdGF0ZSgpID09PSBcIkZhaWxlZFwiIHx8IHRocm93UmVkYWN0ZWRgUGFuaWNrZWQgZmxvdyBtdXN0IGJlIEZhaWxlZCAke2Zsb3d9YDtcbiAgICAgICAgICAgIGNvbnN0IGVyciA9IG1ha2VFcnJvcihcbiAgICAgICAgICAgICAgcmVkYWN0ZWRgSW4gYSBGYWlsZWQgc3RhdGU6IHNlZSBnZXRGYWlsdXJlcygpIG9yIGdldE9wdEZhdGFsUHJvYmxlbSgpIGZvciBtb3JlIGluZm9ybWF0aW9uYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG5vdGUoZXJyLCByZWRhY3RlZGBkdWUgdG8gJHtmYXRhbFByb2JsZW19YCk7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3YWtlV2F0Y2hlcjoge1xuICAgICAgICAgIG9uRnVsZmlsbGVkKF9mdWxmaWxsbWVudCkge1xuICAgICAgICAgICAgY29uc3QgeyBmYWNldHMgfSA9IHRoaXM7XG4gICAgICAgICAgICBmYWNldHMuZmxvdy53YWtlKCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvblJlamVjdGVkKF9mdWxmaWxsbWVudCkge1xuICAgICAgICAgICAgY29uc3QgeyBmYWNldHMgfSA9IHRoaXM7XG4gICAgICAgICAgICBmYWNldHMuZmxvdy53YWtlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcbiAgICBjb25zdCBtYWtlQXN5bmNGbG93S2l0ID0gKGFjdGl2YXRpb25BcmdzKSA9PiB7XG4gICAgICBjb25zdCBhc3luY0Zsb3dLaXQgPSBpbnRlcm5hbE1ha2VBc3luY0Zsb3dLaXQoYWN0aXZhdGlvbkFyZ3MpO1xuICAgICAgY29uc3QgeyBmbG93IH0gPSBhc3luY0Zsb3dLaXQ7XG4gICAgICBjb25zdCB2b3cgPSBmbG93LmdldE91dGNvbWUoKTtcbiAgICAgIGZsb3dGb3JPdXRjb21lVm93S2V5LmluaXQodG9QYXNzYWJsZUNhcCh2b3cpLCBmbG93KTtcbiAgICAgIGZsb3cucmVzdGFydCgpO1xuICAgICAgcmV0dXJuIGFzeW5jRmxvd0tpdDtcbiAgICB9O1xuICAgIHJldHVybiBoYXJkZW4obWFrZUFzeW5jRmxvd0tpdCk7XG4gIH07XG4gIGNvbnN0IGFzeW5jRmxvdyA9ICh6b25lLCB0YWcsIGd1ZXN0RnVuYywgb3B0aW9ucyA9IHZvaWQgMCkgPT4ge1xuICAgIGNvbnN0IG1ha2VBc3luY0Zsb3dLaXQgPSBwcmVwYXJlQXN5bmNGbG93S2l0KHpvbmUsIHRhZywgZ3Vlc3RGdW5jLCBvcHRpb25zKTtcbiAgICBjb25zdCBob3N0RnVuY05hbWUgPSBgJHt0YWd9X2hvc3RGbG93YDtcbiAgICBjb25zdCB3cmFwcGVyRnVuYyA9IChcbiAgICAgIC8qKiBAdHlwZSB7SG9zdE9mPEY+fSAqL1xuICAgICAge1xuICAgICAgICBbaG9zdEZ1bmNOYW1lXSguLi5hcmdzKSB7XG4gICAgICAgICAgY29uc3QgeyBmbG93IH0gPSBtYWtlQXN5bmNGbG93S2l0KGFyZ3MpO1xuICAgICAgICAgIHJldHVybiBmbG93LmdldE91dGNvbWUoKTtcbiAgICAgICAgfVxuICAgICAgfVtob3N0RnVuY05hbWVdXG4gICAgKTtcbiAgICBkZWZpbmVQcm9wZXJ0aWVzNih3cmFwcGVyRnVuYywge1xuICAgICAgbGVuZ3RoOiB7IHZhbHVlOiBndWVzdEZ1bmMubGVuZ3RoIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaGFyZGVuKHdyYXBwZXJGdW5jKTtcbiAgfTtcbiAgY29uc3QgYWRtaW5Bc3luY0Zsb3cgPSBvdXRlclpvbmUuZXhvKFwiQWRtaW5Bc3luY0Zsb3dcIiwgQWRtaW5Bc3luY0Zsb3dJLCB7XG4gICAgZ2V0RmFpbHVyZXMoKSB7XG4gICAgICByZXR1cm4gZmFpbHVyZXMuc25hcHNob3QoKTtcbiAgICB9LFxuICAgIHdha2VBbGwoKSB7XG4gICAgICBjb25zdCBmYWlsdXJlc1RvUmVzdGFydCA9IFsuLi5mYWlsdXJlcy5rZXlzKCldO1xuICAgICAgY29uc3QgZmxvd3NUb1dha2UgPSBbLi4uZWFnZXJXYWtlcnMua2V5cygpXTtcbiAgICAgIGZvciAoY29uc3QgZmxvdyBvZiBmYWlsdXJlc1RvUmVzdGFydCkge1xuICAgICAgICBmbG93LnJlc3RhcnQoKTtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgZmxvdyBvZiBmbG93c1RvV2FrZSkge1xuICAgICAgICBmbG93Lndha2UoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldEZsb3dGb3JPdXRjb21lVm93KG91dGNvbWVWb3cpIHtcbiAgICAgIHJldHVybiBmbG93Rm9yT3V0Y29tZVZvd0tleS5nZXQodG9QYXNzYWJsZUNhcChvdXRjb21lVm93KSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgYWxsV29rZW5QID0gRS53aGVuKG51bGwsICgpID0+IGFkbWluQXN5bmNGbG93Lndha2VBbGwoKSk7XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIHByZXBhcmVBc3luY0Zsb3dLaXQsXG4gICAgYXN5bmNGbG93LFxuICAgIGFkbWluQXN5bmNGbG93LFxuICAgIGFsbFdva2VuUCxcbiAgICBwcmVwYXJlRW5kb3dtZW50XG4gIH0pO1xufTtcbmhhcmRlbihwcmVwYXJlQXN5bmNGbG93VG9vbHMpO1xuXG4vKiAuLi9ub3RpZmllci9zcmMvcHVibGlzaC1raXQuanMqL1xudmFyIHNpbmszID0gKCkgPT4ge1xufTtcbnZhciBtYWtlUXVpZXRSZWplY3Rpb24gPSAocmVhc29uKSA9PiB7XG4gIGNvbnN0IHJlamVjdGlvbiA9IGhhcmRlbihQcm9taXNlLnJlamVjdChyZWFzb24pKTtcbiAgdm9pZCBFLndoZW4ocmVqZWN0aW9uLCBzaW5rMywgc2luazMpO1xuICByZXR1cm4gcmVqZWN0aW9uO1xufTtcbnZhciB0b29GYXJSZWplY3Rpb24gPSBtYWtlUXVpZXRSZWplY3Rpb24oXG4gIGhhcmRlbihFcnJvcihcIkNhbm5vdCByZWFkIHBhc3QgZW5kIG9mIGl0ZXJhdGlvbi5cIikpXG4pO1xudmFyIFB1Ymxpc2hlckkgPSBNLmludGVyZmFjZShcIlB1Ymxpc2hlclwiLCB7XG4gIHB1Ymxpc2g6IE0uY2FsbChNLmFueSgpKS5yZXR1cm5zKCksXG4gIGZpbmlzaDogTS5jYWxsKE0uYW55KCkpLnJldHVybnMoKSxcbiAgZmFpbDogTS5jYWxsKE0uYW55KCkpLnJldHVybnMoKVxufSk7XG52YXIgVXBkYXRlQ291bnRTaGFwZSA9IE0ub3IoTS5iaWdpbnQoKSwgTS5udW1iZXIoKSk7XG52YXIgU3Vic2NyaWJlckkgPSBNLmludGVyZmFjZShcIlN1YnNjcmliZXJcIiwge1xuICBzdWJzY3JpYmVBZnRlcjogTS5jYWxsKCkub3B0aW9uYWwoTS5iaWdpbnQoKSkucmV0dXJucyhNLnByb21pc2UoKSksXG4gIGdldFVwZGF0ZVNpbmNlOiBNLmNhbGwoKS5vcHRpb25hbChVcGRhdGVDb3VudFNoYXBlKS5yZXR1cm5zKE0ucHJvbWlzZSgpKVxufSk7XG52YXIgcHVibGlzaEtpdElLaXQgPSBoYXJkZW4oe1xuICBwdWJsaXNoZXI6IFB1Ymxpc2hlckksXG4gIHN1YnNjcmliZXI6IFN1YnNjcmliZXJJXG59KTtcbnZhciBGb3JrYWJsZUFzeW5jSXRlcmFibGVJdGVyYXRvclNoYXBlID0gTS5pbnRlcmZhY2UoXG4gIFwiRm9ya2FibGVBc3luY0l0ZXJhYmxlSXRlcmF0b3JcIixcbiAge1xuICAgIGZvcms6IE0uY2FsbCgpLnJldHVybnMoTS5hbnkoKSksXG4gICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTogTS5jYWxsKCkucmV0dXJucyhNLmFueSgpKSxcbiAgICAvKiBvb3BzOiByZWN1cnNpdmUgdHlwZSovXG4gICAgbmV4dDogTS5jYWxsV2hlbigpLnJldHVybnMoTS5hbnkoKSlcbiAgfVxuKTtcbnZhciBJdGVyYWJsZUVhY2hUb3BpY0kgPSBNLmludGVyZmFjZShcIkl0ZXJhYmxlRWFjaFRvcGljXCIsIHtcbiAgc3Vic2NyaWJlQWZ0ZXI6IGdldEludGVyZmFjZUd1YXJkUGF5bG9hZChTdWJzY3JpYmVySSkubWV0aG9kR3VhcmRzLnN1YnNjcmliZUFmdGVyLFxuICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdOiBNLmNhbGwoKS5yZXR1cm5zKFxuICAgIE0ucmVtb3RhYmxlKFwiRm9ya2FibGVBc3luY0l0ZXJhYmxlSXRlcmF0b3JcIilcbiAgKVxufSk7XG52YXIgSXRlcmFibGVMYXRlc3RUb3BpY0kgPSBNLmludGVyZmFjZShcIkl0ZXJhYmxlTGF0ZXN0VG9waWNcIiwge1xuICBnZXRVcGRhdGVTaW5jZTogZ2V0SW50ZXJmYWNlR3VhcmRQYXlsb2FkKFN1YnNjcmliZXJJKS5tZXRob2RHdWFyZHMuZ2V0VXBkYXRlU2luY2UsXG4gIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl06IE0uY2FsbCgpLnJldHVybnMoXG4gICAgTS5yZW1vdGFibGUoXCJGb3JrYWJsZUFzeW5jSXRlcmFibGVJdGVyYXRvclwiKVxuICApXG59KTtcbnZhciB3ZWFrTWVtb2l6ZVVuYXJ5ID0gKGZuKSA9PiB7XG4gIGNvbnN0IGNhY2hlID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG4gIHJldHVybiAoYXJnKSA9PiB7XG4gICAgY29uc3Qgb2FyZyA9IGFyZztcbiAgICBpZiAoY2FjaGUuaGFzKG9hcmcpKSB7XG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KG9hcmcpO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBmbihhcmcpO1xuICAgIGNhY2hlLnNldChvYXJnLCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xudmFyIG1ha2VVcGRhdGVSZWNvcmRGcm9tUHVibGljYXRpb25SZWNvcmQgPSAocmVjb3JkKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBoZWFkOiB7IHZhbHVlLCBkb25lIH0sXG4gICAgcHVibGlzaENvdW50XG4gIH0gPSByZWNvcmQ7XG4gIGlmIChkb25lKSB7XG4gICAgcmV0dXJuIGhhcmRlbih7IHZhbHVlLCB1cGRhdGVDb3VudDogdm9pZCAwIH0pO1xuICB9XG4gIHJldHVybiBoYXJkZW4oeyB2YWx1ZSwgdXBkYXRlQ291bnQ6IHB1Ymxpc2hDb3VudCB9KTtcbn07XG52YXIgbWFrZVB1Ymxpc2hLaXQgPSAoKSA9PiB7XG4gIGxldCB0YWlsUDtcbiAgbGV0IHRhaWxSO1xuICAoeyBwcm9taXNlOiB0YWlsUCwgcmVzb2x2ZTogdGFpbFIgfSA9IG1ha2VQcm9taXNlS2l0KCkpO1xuICBsZXQgY3VycmVudFB1Ymxpc2hDb3VudCA9IDBuO1xuICBsZXQgY3VycmVudFAgPSB0YWlsUDtcbiAgY29uc3QgYWR2YW5jZUN1cnJlbnQgPSAoZG9uZSwgdmFsdWUsIHJlamVjdGlvbikgPT4ge1xuICAgIGlmICh0YWlsUiA9PT0gdm9pZCAwKSB7XG4gICAgICB0aHJvdyBFcnJvcihcIkNhbm5vdCB1cGRhdGUgc3RhdGUgYWZ0ZXIgdGVybWluYXRpb24uXCIpO1xuICAgIH1cbiAgICBjdXJyZW50UHVibGlzaENvdW50ICs9IDFuO1xuICAgIGN1cnJlbnRQID0gdGFpbFA7XG4gICAgY29uc3QgcmVzb2x2ZUN1cnJlbnQgPSB0YWlsUjtcbiAgICBpZiAoZG9uZSkge1xuICAgICAgdGFpbFAgPSB0b29GYXJSZWplY3Rpb247XG4gICAgICB0YWlsUiA9IHZvaWQgMDtcbiAgICB9IGVsc2Uge1xuICAgICAgKHsgcHJvbWlzZTogdGFpbFAsIHJlc29sdmU6IHRhaWxSIH0gPSBtYWtlUHJvbWlzZUtpdCgpKTtcbiAgICB9XG4gICAgaWYgKHJlamVjdGlvbikge1xuICAgICAgcmVzb2x2ZUN1cnJlbnQocmVqZWN0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzb2x2ZUN1cnJlbnQoXG4gICAgICAgIGhhcmRlbih7XG4gICAgICAgICAgaGVhZDogeyB2YWx1ZSwgZG9uZSB9LFxuICAgICAgICAgIHB1Ymxpc2hDb3VudDogY3VycmVudFB1Ymxpc2hDb3VudCxcbiAgICAgICAgICB0YWlsOiB0YWlsUFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG1ha2VNZW1vaXplZFVwZGF0ZVJlY29yZCA9IHdlYWtNZW1vaXplVW5hcnkoXG4gICAgbWFrZVVwZGF0ZVJlY29yZEZyb21QdWJsaWNhdGlvblJlY29yZFxuICApO1xuICBjb25zdCBzdWJzY3JpYmVyID0gRmFyKFwiU3Vic2NyaWJlclwiLCB7XG4gICAgc3Vic2NyaWJlQWZ0ZXI6IChwdWJsaXNoQ291bnQgPSAtMW4pID0+IHtcbiAgICAgIGFzc2VydC50eXBlb2YocHVibGlzaENvdW50LCBcImJpZ2ludFwiKTtcbiAgICAgIGlmIChwdWJsaXNoQ291bnQgPT09IGN1cnJlbnRQdWJsaXNoQ291bnQpIHtcbiAgICAgICAgcmV0dXJuIHRhaWxQO1xuICAgICAgfSBlbHNlIGlmIChwdWJsaXNoQ291bnQgPCBjdXJyZW50UHVibGlzaENvdW50KSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50UDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgIFwic3Vic2NyaWJlQWZ0ZXIgYXJndW1lbnQgbXVzdCBiZSBhIHByZXZpb3VzbHktaXNzdWVkIHB1Ymxpc2hDb3VudC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0VXBkYXRlU2luY2U6ICh1cGRhdGVDb3VudCkgPT4ge1xuICAgICAgaWYgKHVwZGF0ZUNvdW50ID09PSB2b2lkIDApIHtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXIuc3Vic2NyaWJlQWZ0ZXIoKS50aGVuKG1ha2VNZW1vaXplZFVwZGF0ZVJlY29yZCk7XG4gICAgICB9XG4gICAgICB1cGRhdGVDb3VudCA9IEJpZ0ludCh1cGRhdGVDb3VudCk7XG4gICAgICByZXR1cm4gc3Vic2NyaWJlci5zdWJzY3JpYmVBZnRlcih1cGRhdGVDb3VudCkudGhlbigoKSA9PiBzdWJzY3JpYmVyLmdldFVwZGF0ZVNpbmNlKCkpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHB1Ymxpc2hlciA9IEZhcihcIlB1Ymxpc2hlclwiLCB7XG4gICAgcHVibGlzaDogKHZhbHVlKSA9PiB7XG4gICAgICBhZHZhbmNlQ3VycmVudChmYWxzZSwgdmFsdWUpO1xuICAgIH0sXG4gICAgZmluaXNoOiAoZmluYWxWYWx1ZSkgPT4ge1xuICAgICAgYWR2YW5jZUN1cnJlbnQodHJ1ZSwgZmluYWxWYWx1ZSk7XG4gICAgfSxcbiAgICBmYWlsOiAocmVhc29uKSA9PiB7XG4gICAgICBhZHZhbmNlQ3VycmVudCh0cnVlLCB2b2lkIDAsIG1ha2VRdWlldFJlamVjdGlvbihyZWFzb24pKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gaGFyZGVuKHsgcHVibGlzaGVyLCBzdWJzY3JpYmVyIH0pO1xufTtcbmhhcmRlbihtYWtlUHVibGlzaEtpdCk7XG52YXIgRHVyYWJsZVB1Ymxpc2hLaXRTdGF0ZVNoYXBlID0gaGFyZGVuKHtcbiAgdmFsdWVEdXJhYmlsaXR5OiBNLmFueSgpLFxuICBwdWJsaXNoQ291bnQ6IE0uYW55KCksXG4gIHN0YXR1czogTS5hbnkoKSxcbiAgaGFzVmFsdWU6IE0uYW55KCksXG4gIHZhbHVlOiBNLmFueSgpXG59KTtcbnZhciBpbml0RHVyYWJsZVB1Ymxpc2hLaXRTdGF0ZSA9IChvcHRpb25zID0ge30pID0+IHtcbiAgY29uc3QgeyB2YWx1ZUR1cmFiaWxpdHkgPSBcIm1hbmRhdG9yeVwiIH0gPSBvcHRpb25zO1xuICBhc3NlcnQuZXF1YWwodmFsdWVEdXJhYmlsaXR5LCBcIm1hbmRhdG9yeVwiKTtcbiAgcmV0dXJuIHtcbiAgICAvKiBjb25maWd1cmF0aW9uKi9cbiAgICB2YWx1ZUR1cmFiaWxpdHksXG4gICAgLyogbGlmZWN5Y2xlIHByb2dyZXNzKi9cbiAgICBwdWJsaXNoQ291bnQ6IDBuLFxuICAgIHN0YXR1czogXCJsaXZlXCIsXG4gICAgLyogfCAnZmluaXNoZWQnIHwgJ2ZhaWxlZCcqL1xuICAgIC8qIHBlcnNpc3RlZCByZXN1bHQgZGF0YSovXG4gICAgLyogTm90ZSB0aGF0IGluIGFkZGl0aW9uIHRvIG5vbi10ZXJtaW5hbCB2YWx1ZXMgZnJvbSBgcHVibGlzaGAsKi9cbiAgICAvKiB2YWx1ZSBhbHNvIGhvbGRzIHRoZSB0ZXJtaW5hbCB2YWx1ZSBmcm9tIGBmaW5pc2hgIG9yIGBmYWlsYC4qL1xuICAgIGhhc1ZhbHVlOiBmYWxzZSxcbiAgICB2YWx1ZTogdm9pZCAwXG4gIH07XG59O1xudmFyIGdldEVwaGVtZXJhbEtleSA9IChmYWNldHMpID0+IGZhY2V0cy5wdWJsaXNoZXI7XG52YXIgZHVyYWJsZVB1Ymxpc2hLaXRFcGhlbWVyYWxEYXRhID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG52YXIgcHJvdmlkZUN1cnJlbnRQID0gKHN0YXRlLCBmYWNldHMsIHRhaWwpID0+IHtcbiAgY29uc3QgZXBoZW1lcmFsS2V5ID0gZ2V0RXBoZW1lcmFsS2V5KGZhY2V0cyk7XG4gIGNvbnN0IGZvdW5kRGF0YSA9IGR1cmFibGVQdWJsaXNoS2l0RXBoZW1lcmFsRGF0YS5nZXQoZXBoZW1lcmFsS2V5KTtcbiAgY29uc3QgY3VycmVudFAgPSBmb3VuZERhdGEgJiYgZm91bmREYXRhLmN1cnJlbnRQO1xuICBpZiAoY3VycmVudFApIHtcbiAgICByZXR1cm4gY3VycmVudFA7XG4gIH1cbiAgY29uc3QgeyBwdWJsaXNoQ291bnQsIHN0YXR1cywgaGFzVmFsdWUsIHZhbHVlIH0gPSBzdGF0ZTtcbiAgaWYgKCFoYXNWYWx1ZSkge1xuICAgIGFzc2VydChzdGF0dXMgPT09IFwibGl2ZVwiKTtcbiAgICByZXR1cm4gdGFpbDtcbiAgfVxuICBpZiAoc3RhdHVzID09PSBcImxpdmVcIiB8fCBzdGF0dXMgPT09IFwiZmluaXNoZWRcIikge1xuICAgIGNvbnN0IGNlbGwgPSBoYXJkZW4oe1xuICAgICAgaGVhZDogeyB2YWx1ZSwgZG9uZTogc3RhdHVzICE9PSBcImxpdmVcIiB9LFxuICAgICAgcHVibGlzaENvdW50LFxuICAgICAgdGFpbFxuICAgIH0pO1xuICAgIHJldHVybiBFLnJlc29sdmUoY2VsbCk7XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSBcImZhaWxlZFwiKSB7XG4gICAgcmV0dXJuIG1ha2VRdWlldFJlamVjdGlvbih2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBJbnZhbGlkIGR1cmFibGUgcHJvbWlzZSBraXQgc3RhdHVzOiAke3F1b3RlKHN0YXR1cyl9YDtcbiAgfVxufTtcbnZhciBwcm92aWRlRHVyYWJsZVB1Ymxpc2hLaXRFcGhlbWVyYWxEYXRhID0gKHN0YXRlLCBmYWNldHMpID0+IHtcbiAgY29uc3QgZXBoZW1lcmFsS2V5ID0gZ2V0RXBoZW1lcmFsS2V5KGZhY2V0cyk7XG4gIGNvbnN0IGZvdW5kRGF0YSA9IGR1cmFibGVQdWJsaXNoS2l0RXBoZW1lcmFsRGF0YS5nZXQoZXBoZW1lcmFsS2V5KTtcbiAgaWYgKGZvdW5kRGF0YSkge1xuICAgIHJldHVybiBmb3VuZERhdGE7XG4gIH1cbiAgY29uc3QgeyBzdGF0dXMgfSA9IHN0YXRlO1xuICBsZXQgdGFpbFA7XG4gIGxldCB0YWlsUjtcbiAgaWYgKHN0YXR1cyA9PT0gXCJsaXZlXCIpIHtcbiAgICAoeyBwcm9taXNlOiB0YWlsUCwgcmVzb2x2ZTogdGFpbFIgfSA9IG1ha2VQcm9taXNlS2l0KCkpO1xuICAgIHZvaWQgRS53aGVuKHRhaWxQLCBzaW5rMywgc2luazMpO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gXCJmaW5pc2hlZFwiIHx8IHN0YXR1cyA9PT0gXCJmYWlsZWRcIikge1xuICAgIHRhaWxQID0gdG9vRmFyUmVqZWN0aW9uO1xuICB9IGVsc2Uge1xuICAgIHRocm93IHRocm93UmVkYWN0ZWRgSW52YWxpZCBkdXJhYmxlIHByb21pc2Uga2l0IHN0YXR1czogJHtxdW90ZShzdGF0dXMpfWA7XG4gIH1cbiAgY29uc3Qgb2JqID0gaGFyZGVuKHsgY3VycmVudFA6IHZvaWQgMCwgdGFpbFAsIHRhaWxSIH0pO1xuICBkdXJhYmxlUHVibGlzaEtpdEVwaGVtZXJhbERhdGEuc2V0KGVwaGVtZXJhbEtleSwgb2JqKTtcbiAgcmV0dXJuIG9iajtcbn07XG52YXIgYWR2YW5jZUR1cmFibGVQdWJsaXNoS2l0ID0gKGNvbnRleHQsIHZhbHVlLCB0YXJnZXRTdGF0dXMgPSBcImxpdmVcIikgPT4ge1xuICBjb25zdCB7IHN0YXRlLCBmYWNldHMgfSA9IGNvbnRleHQ7XG4gIGNvbnN0IHsgdmFsdWVEdXJhYmlsaXR5LCBzdGF0dXMgfSA9IHN0YXRlO1xuICBpZiAoc3RhdHVzICE9PSBcImxpdmVcIikge1xuICAgIHRocm93IEVycm9yKFwiQ2Fubm90IHVwZGF0ZSBzdGF0ZSBhZnRlciB0ZXJtaW5hdGlvbi5cIik7XG4gIH1cbiAgY29uc3QgZG9uZSA9IHRhcmdldFN0YXR1cyAhPT0gXCJsaXZlXCI7XG4gIGlmIChkb25lIHx8IHZhbHVlRHVyYWJpbGl0eSA9PT0gXCJtYW5kYXRvcnlcIikge1xuICAgIGNhbkJlRHVyYWJsZSh2YWx1ZSkgfHwgdGhyb3dSZWRhY3RlZGBDYW5ub3QgYWNjZXB0IG5vbi1kdXJhYmxlIHZhbHVlOiAke3ZhbHVlfWA7XG4gIH1cbiAgY29uc3QgeyB0YWlsUDogb2xkVGFpbFAsIHRhaWxSOiByZXNvbHZlT2xkVGFpbCB9ID0gcHJvdmlkZUR1cmFibGVQdWJsaXNoS2l0RXBoZW1lcmFsRGF0YShzdGF0ZSwgZmFjZXRzKTtcbiAgYXNzZXJ0LnR5cGVvZihyZXNvbHZlT2xkVGFpbCwgXCJmdW5jdGlvblwiKTtcbiAgY29uc3QgcHVibGlzaENvdW50ID0gc3RhdGUucHVibGlzaENvdW50ICsgMW47XG4gIHN0YXRlLnB1Ymxpc2hDb3VudCA9IHB1Ymxpc2hDb3VudDtcbiAgbGV0IHRhaWxQO1xuICBsZXQgdGFpbFI7XG4gIGlmIChkb25lKSB7XG4gICAgc3RhdGUuc3RhdHVzID0gdGFyZ2V0U3RhdHVzO1xuICAgIHRhaWxQID0gdG9vRmFyUmVqZWN0aW9uO1xuICAgIHRhaWxSID0gdm9pZCAwO1xuICB9IGVsc2Uge1xuICAgICh7IHByb21pc2U6IHRhaWxQLCByZXNvbHZlOiB0YWlsUiB9ID0gbWFrZVByb21pc2VLaXQoKSk7XG4gICAgdm9pZCBFLndoZW4odGFpbFAsIHNpbmszLCBzaW5rMyk7XG4gIH1cbiAgbGV0IGN1cnJlbnRQO1xuICBpZiAodGFyZ2V0U3RhdHVzID09PSBcImZhaWxlZFwiKSB7XG4gICAgc3RhdGUuaGFzVmFsdWUgPSB0cnVlO1xuICAgIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gICAgY29uc3QgcmVqZWN0aW9uID0gbWFrZVF1aWV0UmVqZWN0aW9uKHZhbHVlKTtcbiAgICByZXNvbHZlT2xkVGFpbChyZWplY3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIGlmIChkb25lIHx8IHZhbHVlRHVyYWJpbGl0eSAhPT0gXCJpZ25vcmVkXCIgJiYgY2FuQmVEdXJhYmxlKHZhbHVlKSkge1xuICAgICAgc3RhdGUuaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgIHN0YXRlLnZhbHVlID0gdm9pZCAwO1xuICAgICAgY3VycmVudFAgPSBvbGRUYWlsUDtcbiAgICB9XG4gICAgcmVzb2x2ZU9sZFRhaWwoXG4gICAgICBoYXJkZW4oe1xuICAgICAgICBoZWFkOiB7IHZhbHVlLCBkb25lIH0sXG4gICAgICAgIHB1Ymxpc2hDb3VudCxcbiAgICAgICAgdGFpbDogdGFpbFBcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuICBkdXJhYmxlUHVibGlzaEtpdEVwaGVtZXJhbERhdGEuc2V0KFxuICAgIGdldEVwaGVtZXJhbEtleShmYWNldHMpLFxuICAgIGhhcmRlbih7IGN1cnJlbnRQLCB0YWlsUCwgdGFpbFIgfSlcbiAgKTtcbn07XG52YXIgcHJlcGFyZUR1cmFibGVQdWJsaXNoS2l0ID0gKGJhZ2dhZ2UsIGtpbmROYW1lKSA9PiB7XG4gIGNvbnN0IG1ha2VNZW1vaXplZFVwZGF0ZVJlY29yZCA9IG1ha2VVcGRhdGVSZWNvcmRGcm9tUHVibGljYXRpb25SZWNvcmQ7XG4gIHJldHVybiBwcmVwYXJlRXhvQ2xhc3NLaXQoXG4gICAgYmFnZ2FnZSxcbiAgICBraW5kTmFtZSxcbiAgICBwdWJsaXNoS2l0SUtpdCxcbiAgICBpbml0RHVyYWJsZVB1Ymxpc2hLaXRTdGF0ZSxcbiAgICB7XG4gICAgICAvKiBUaGUgcHVibGlzaGVyIGZhY2V0IG9mIGEgZHVyYWJsZSBwdWJsaXNoIGtpdCovXG4gICAgICAvKiBhY2NlcHRzIG5ldyB2YWx1ZXMuKi9cbiAgICAgIHB1Ymxpc2hlcjoge1xuICAgICAgICBwdWJsaXNoKHZhbHVlKSB7XG4gICAgICAgICAgYWR2YW5jZUR1cmFibGVQdWJsaXNoS2l0KHRoaXMsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZmluaXNoKGZpbmFsVmFsdWUpIHtcbiAgICAgICAgICBhZHZhbmNlRHVyYWJsZVB1Ymxpc2hLaXQodGhpcywgZmluYWxWYWx1ZSwgXCJmaW5pc2hlZFwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgZmFpbChyZWFzb24pIHtcbiAgICAgICAgICBhZHZhbmNlRHVyYWJsZVB1Ymxpc2hLaXQodGhpcywgcmVhc29uLCBcImZhaWxlZFwiKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8qIFRoZSBzdWJzY3JpYmVyIGZhY2V0IG9mIGEgZHVyYWJsZSBwdWJsaXNoIGtpdCovXG4gICAgICAvKiBwcm9wYWdhdGVzIHZhbHVlcy4qL1xuICAgICAgc3Vic2NyaWJlcjoge1xuICAgICAgICBzdWJzY3JpYmVBZnRlcihwdWJsaXNoQ291bnQgPSAtMW4pIHtcbiAgICAgICAgICBjb25zdCB7IHN0YXRlLCBmYWNldHMgfSA9IHRoaXM7XG4gICAgICAgICAgY29uc3QgeyBwdWJsaXNoQ291bnQ6IGN1cnJlbnRQdWJsaXNoQ291bnQgfSA9IHN0YXRlO1xuICAgICAgICAgIGNvbnN0IHsgY3VycmVudFAsIHRhaWxQIH0gPSBwcm92aWRlRHVyYWJsZVB1Ymxpc2hLaXRFcGhlbWVyYWxEYXRhKFxuICAgICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgICBmYWNldHNcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChwdWJsaXNoQ291bnQgPT09IGN1cnJlbnRQdWJsaXNoQ291bnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0YWlsUDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHB1Ymxpc2hDb3VudCA8IGN1cnJlbnRQdWJsaXNoQ291bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50UCB8fCBwcm92aWRlQ3VycmVudFAoc3RhdGUsIGZhY2V0cywgdGFpbFApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICAgICAgXCJzdWJzY3JpYmVBZnRlciBhcmd1bWVudCBtdXN0IGJlIGEgcHJldmlvdXNseS1pc3N1ZWQgcHVibGlzaENvdW50LlwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0VXBkYXRlU2luY2UodXBkYXRlQ291bnQpIHtcbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBmYWNldHM6IHsgc3Vic2NyaWJlciB9XG4gICAgICAgICAgfSA9IHRoaXM7XG4gICAgICAgICAgaWYgKHVwZGF0ZUNvdW50ID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVyLnN1YnNjcmliZUFmdGVyKCkudGhlbihtYWtlTWVtb2l6ZWRVcGRhdGVSZWNvcmQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB1cGRhdGVDb3VudCA9IEJpZ0ludCh1cGRhdGVDb3VudCk7XG4gICAgICAgICAgcmV0dXJuIHN1YnNjcmliZXIuc3Vic2NyaWJlQWZ0ZXIodXBkYXRlQ291bnQpLnRoZW4oKCkgPT4gc3Vic2NyaWJlci5nZXRVcGRhdGVTaW5jZSgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgc3RhdGVTaGFwZTogRHVyYWJsZVB1Ymxpc2hLaXRTdGF0ZVNoYXBlXG4gICAgfVxuICApO1xufTtcbmhhcmRlbihwcmVwYXJlRHVyYWJsZVB1Ymxpc2hLaXQpO1xudmFyIFN1YnNjcmliZXJTaGFwZSA9IE0ucmVtb3RhYmxlKFwiU3Vic2NyaWJlclwiKTtcblxuLyogLi4vbm90aWZpZXIvc3JjL3N1YnNjcmliZS5qcyovXG52YXIgc2luazQgPSAoKSA9PiB7XG59O1xudmFyIHJlY29ubmVjdEFzTmVlZGVkID0gYXN5bmMgKGdldHRlciwgc2VlZCA9IFtdKSA9PiB7XG4gIGxldCBkaXNjb25uZWN0aW9uO1xuICBsZXQgbGFzdFZlcnNpb24gPSAtSW5maW5pdHk7XG4gIGF3YWl0IG51bGw7XG4gIGZvciAobGV0IGkzID0gMDsgOyBpMyArPSAxKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdFAgPSBpMyA8IHNlZWQubGVuZ3RoID8gc2VlZFtpM10gOiBnZXR0ZXIoKTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3VsdFA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGlzVXBncmFkZURpc2Nvbm5lY3Rpb24oZXJyKSkge1xuICAgICAgICBpZiAoIWRpc2Nvbm5lY3Rpb24pIHtcbiAgICAgICAgICBkaXNjb25uZWN0aW9uID0gZXJyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgaW5jYXJuYXRpb25OdW1iZXI6IHZlcnNpb24gfSA9IGVycjtcbiAgICAgICAgaWYgKHZlcnNpb24gPiBsYXN0VmVyc2lvbikge1xuICAgICAgICAgIGxhc3RWZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFpc1ByaW1pdGl2ZTIoZXJyKSAmJiBkaXNjb25uZWN0aW9uICYmIGRpc2Nvbm5lY3Rpb24gIT09IGVycikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG5vdGUoXG4gICAgICAgICAgICBlcnIsXG4gICAgICAgICAgICByZWRhY3RlZGBBdHRlbXB0aW5nIHRvIHJlY292ZXIgZnJvbSBkaXNjb25uZWN0aW9uOiAke2Rpc2Nvbm5lY3Rpb259YFxuICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKF9lcnIpIHtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxufTtcbnZhciBtYWtlRWFjaEl0ZXJhdG9yID0gKHRvcGljLCBuZXh0Q2VsbFApID0+IHtcbiAgY29uc3Qgc2VsZiA9IEZhcihcIkVhY2hJdGVyYXRvclwiLCB7XG4gICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTogKCkgPT4gc2VsZixcbiAgICBuZXh0OiAoKSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGhlYWQ6IHJlc3VsdFAsXG4gICAgICAgIHB1Ymxpc2hDb3VudDogcHVibGlzaENvdW50UCxcbiAgICAgICAgdGFpbDogdGFpbFBcbiAgICAgIH0gPSBFLmdldChuZXh0Q2VsbFApO1xuICAgICAgY29uc3QgZ2V0U3VjY2Vzc29yID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBwdWJsaXNoQ291bnQgPSBhd2FpdCBwdWJsaXNoQ291bnRQO1xuICAgICAgICBhc3NlcnQudHlwZW9mKHB1Ymxpc2hDb3VudCwgXCJiaWdpbnRcIik7XG4gICAgICAgIGNvbnN0IHN1Y2Nlc3NvciA9IGF3YWl0IEUodG9waWMpLnN1YnNjcmliZUFmdGVyKHB1Ymxpc2hDb3VudCk7XG4gICAgICAgIGNvbnN0IG5ld1B1Ymxpc2hDb3VudCA9IHN1Y2Nlc3Nvci5wdWJsaXNoQ291bnQ7XG4gICAgICAgIGlmIChuZXdQdWJsaXNoQ291bnQgIT09IHB1Ymxpc2hDb3VudCArIDFuKSB7XG4gICAgICAgICAgdGhyb3dSZWRhY3RlZGBlYWNoSXRlcmF0b3IgYnJva2VuIGJ5IGdhcCBmcm9tIHB1Ymxpc2hDb3VudCAke3B1Ymxpc2hDb3VudH0gdG8gJHtuZXdQdWJsaXNoQ291bnR9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VjY2Vzc29yO1xuICAgICAgfTtcbiAgICAgIG5leHRDZWxsUCA9IHJlY29ubmVjdEFzTmVlZGVkKGdldFN1Y2Nlc3NvciwgW3RhaWxQXSk7XG4gICAgICB2b2lkIEUud2hlbihwdWJsaXNoQ291bnRQLCBzaW5rNCwgc2luazQpO1xuICAgICAgdm9pZCBFLndoZW4obmV4dENlbGxQLCBzaW5rNCwgc2luazQpO1xuICAgICAgcmV0dXJuIHJlc3VsdFA7XG4gICAgfSxcbiAgICBmb3JrOiAoKSA9PiBtYWtlRWFjaEl0ZXJhdG9yKHRvcGljLCBuZXh0Q2VsbFApXG4gIH0pO1xuICByZXR1cm4gc2VsZjtcbn07XG52YXIgc3Vic2NyaWJlRWFjaCA9ICh0b3BpYykgPT4ge1xuICBjb25zdCBpdGVyYWJsZSA9IEZhcihcIkVhY2hJdGVyYWJsZVwiLCB7XG4gICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTogKCkgPT4ge1xuICAgICAgY29uc3QgZmlyc3RDZWxsUCA9IHJlY29ubmVjdEFzTmVlZGVkKCgpID0+IEUodG9waWMpLnN1YnNjcmliZUFmdGVyKCkpO1xuICAgICAgcmV0dXJuIG1ha2VFYWNoSXRlcmF0b3IodG9waWMsIGZpcnN0Q2VsbFApO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBpdGVyYWJsZTtcbn07XG5oYXJkZW4oc3Vic2NyaWJlRWFjaCk7XG52YXIgY2xvbmVMYXRlc3RJdGVyYXRvciA9ICh0b3BpYywgbG9jYWxVcGRhdGVDb3VudCwgdGVybWluYWxSZXN1bHQpID0+IHtcbiAgbGV0IG11dGV4ID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIGNvbnN0IG1heWJlUmVxdWVzdE5leHRSZXN1bHQgPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKHRlcm1pbmFsUmVzdWx0KSB7XG4gICAgICByZXR1cm4gdGVybWluYWxSZXN1bHQ7XG4gICAgfVxuICAgIGNvbnN0IHsgdmFsdWUsIHVwZGF0ZUNvdW50IH0gPSBhd2FpdCByZWNvbm5lY3RBc05lZWRlZChcbiAgICAgICgpID0+IEUodG9waWMpLmdldFVwZGF0ZVNpbmNlKGxvY2FsVXBkYXRlQ291bnQpXG4gICAgKTtcbiAgICBsb2NhbFVwZGF0ZUNvdW50ID0gdXBkYXRlQ291bnQ7XG4gICAgaWYgKHVwZGF0ZUNvdW50ID09PSB2b2lkIDApIHtcbiAgICAgIHRlcm1pbmFsUmVzdWx0ID0gaGFyZGVuKHsgZG9uZTogdHJ1ZSwgdmFsdWUgfSk7XG4gICAgICByZXR1cm4gdGVybWluYWxSZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBoYXJkZW4oeyBkb25lOiBmYWxzZSwgdmFsdWUgfSk7XG4gIH07XG4gIGNvbnN0IHNlbGYgPSBGYXIoXCJMYXRlc3RJdGVyYXRvclwiLCB7XG4gICAgZm9yazogKCkgPT4gY2xvbmVMYXRlc3RJdGVyYXRvcih0b3BpYywgbG9jYWxVcGRhdGVDb3VudCwgdGVybWluYWxSZXN1bHQpLFxuICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl06ICgpID0+IHNlbGYsXG4gICAgbmV4dDogYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKHRlcm1pbmFsUmVzdWx0KSB7XG4gICAgICAgIHJldHVybiB0ZXJtaW5hbFJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5leHRSZXN1bHQgPSBtdXRleC50aGVuKG1heWJlUmVxdWVzdE5leHRSZXN1bHQpO1xuICAgICAgbXV0ZXggPSBuZXh0UmVzdWx0LnRoZW4oc2luazQsIHNpbms0KTtcbiAgICAgIHJldHVybiBuZXh0UmVzdWx0O1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzZWxmO1xufTtcbnZhciBtYWtlTGF0ZXN0SXRlcmF0b3IgPSAodG9waWMpID0+IGNsb25lTGF0ZXN0SXRlcmF0b3IodG9waWMpO1xudmFyIHN1YnNjcmliZUxhdGVzdCA9ICh0b3BpYykgPT4ge1xuICBjb25zdCBpdGVyYWJsZSA9IEZhcihcIkxhdGVzdEl0ZXJhYmxlXCIsIHtcbiAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdOiAoKSA9PiBtYWtlTGF0ZXN0SXRlcmF0b3IodG9waWMpXG4gIH0pO1xuICByZXR1cm4gaXRlcmFibGU7XG59O1xuaGFyZGVuKHN1YnNjcmliZUxhdGVzdCk7XG5cbi8qIC4uL25vdGlmaWVyL3NyYy9ub3RpZmllci5qcyovXG52YXIgbWFrZU5vdGlmaWVyID0gKHNoYXJhYmxlSW50ZXJuYWxzUCkgPT4ge1xuICBjb25zdCBub3RpZmllciA9IEZhcihcIm5vdGlmaWVyXCIsIHtcbiAgICAuLi5zdWJzY3JpYmVMYXRlc3Qoc2hhcmFibGVJbnRlcm5hbHNQKSxcbiAgICBnZXRVcGRhdGVTaW5jZTogYXN5bmMgKHVwZGF0ZUNvdW50KSA9PiBFKHNoYXJhYmxlSW50ZXJuYWxzUCkuZ2V0VXBkYXRlU2luY2UodXBkYXRlQ291bnQpLFxuICAgIC8qKlxuICogVXNlIHRoaXMgdG8gZGlzdHJpYnV0ZSBhIE5vdGlmaWVyIGVmZmljaWVudGx5IG92ZXIgdGhlIG5ldHdvcmssXG4gKiBieSBvYnRhaW5pbmcgdGhpcyBmcm9tIHRoZSBOb3RpZmllciB0byBiZSByZXBsaWNhdGVkLCBhbmQgYXBwbHlpbmdcbiAqIGBtYWtlTm90aWZpZXJgIHRvIGl0IGF0IHRoZSBuZXcgc2l0ZSB0byBnZXQgYW4gZXF1aXZhbGVudCBsb2NhbFxuICogTm90aWZpZXIgYXQgdGhhdCBzaXRlLlxuICovXG4gICAgZ2V0U2hhcmFibGVOb3RpZmllckludGVybmFsczogYXN5bmMgKCkgPT4gc2hhcmFibGVJbnRlcm5hbHNQLFxuICAgIC8qKlxuICogQGRlcHJlY2F0ZWRcbiAqIFVzZWQgb25seSBieSBgbWFrZUNhc3RpbmdTcGVjRnJvbVJlZmAuICBJbnN0ZWFkIHRoYXQgZnVuY3Rpb24gc2hvdWxkIHVzZVxuICogdGhlIGBTdG9yZWRGYWNldGAgQVBJLlxuICovXG4gICAgZ2V0U3RvcmVLZXk6ICgpID0+IGhhcmRlbih7IG5vdGlmaWVyIH0pXG4gIH0pO1xuICByZXR1cm4gbm90aWZpZXI7XG59O1xudmFyIG1ha2VOb3RpZmllckZyb21TdWJzY3JpYmVyID0gKHN1YnNjcmliZXIpID0+IHtcbiAgY29uc3QgYmFzZU5vdGlmaWVyID0gaGFyZGVuKHtcbiAgICBnZXRVcGRhdGVTaW5jZTogKHVwZGF0ZUNvdW50ID0gdm9pZCAwKSA9PiBFKHN1YnNjcmliZXIpLmdldFVwZGF0ZVNpbmNlKHVwZGF0ZUNvdW50KVxuICB9KTtcbiAgY29uc3Qgbm90aWZpZXIgPSBGYXIoXCJub3RpZmllclwiLCB7XG4gICAgLi4ubWFrZU5vdGlmaWVyKGJhc2VOb3RpZmllciksXG4gICAgLi4uYmFzZU5vdGlmaWVyXG4gIH0pO1xuICByZXR1cm4gbm90aWZpZXI7XG59O1xuaGFyZGVuKG1ha2VOb3RpZmllckZyb21TdWJzY3JpYmVyKTtcbnZhciBtYWtlTm90aWZpZXJLaXQgPSAoLi4uaW5pdGlhbFN0YXRlQXJyKSA9PiB7XG4gIGNvbnN0IHsgcHVibGlzaGVyLCBzdWJzY3JpYmVyIH0gPSBtYWtlUHVibGlzaEtpdCgpO1xuICBjb25zdCBub3RpZmllciA9IG1ha2VOb3RpZmllckZyb21TdWJzY3JpYmVyKHN1YnNjcmliZXIpO1xuICBjb25zdCB1cGRhdGVyID0gRmFyKFwidXBkYXRlclwiLCB7XG4gICAgdXBkYXRlU3RhdGU6IChzdGF0ZSkgPT4gcHVibGlzaGVyLnB1Ymxpc2goc3RhdGUpLFxuICAgIGZpbmlzaDogKGNvbXBsZXRpb24pID0+IHB1Ymxpc2hlci5maW5pc2goY29tcGxldGlvbiksXG4gICAgZmFpbDogKHJlYXNvbikgPT4gcHVibGlzaGVyLmZhaWwocmVhc29uKVxuICB9KTtcbiAgYXNzZXJ0Mihpbml0aWFsU3RhdGVBcnIubGVuZ3RoIDw9IDEsIFwidG9vIG1hbnkgYXJndW1lbnRzXCIpO1xuICBpZiAoaW5pdGlhbFN0YXRlQXJyLmxlbmd0aCA9PT0gMSkge1xuICAgIHVwZGF0ZXIudXBkYXRlU3RhdGUoaW5pdGlhbFN0YXRlQXJyWzBdKTtcbiAgfVxuICByZXR1cm4gaGFyZGVuKHsgbm90aWZpZXIsIHVwZGF0ZXIgfSk7XG59O1xudmFyIG1ha2VOb3RpZmllckZyb21Bc3luY0l0ZXJhYmxlID0gKGFzeW5jSXRlcmFibGVQKSA9PiB7XG4gIGNvbnN0IGl0ZXJhdG9yUCA9IEUoYXN5bmNJdGVyYWJsZVApW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICBsZXQgb3B0TmV4dFByb21pc2U7XG4gIGxldCBjdXJyZW50VXBkYXRlQ291bnQgPSAwbjtcbiAgbGV0IGN1cnJlbnRSZXNwb25zZTtcbiAgbGV0IGZpbmFsID0gZmFsc2U7XG4gIGNvbnN0IGJhc2VOb3RpZmllciA9IEZhcihcImJhc2VOb3RpZmllclwiLCB7XG4gICAgZ2V0VXBkYXRlU2luY2UodXBkYXRlQ291bnQgPSAtMW4pIHtcbiAgICAgIGlmICh1cGRhdGVDb3VudCA8IGN1cnJlbnRVcGRhdGVDb3VudCkge1xuICAgICAgICBpZiAoY3VycmVudFJlc3BvbnNlKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjdXJyZW50UmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHVwZGF0ZUNvdW50ICE9PSBjdXJyZW50VXBkYXRlQ291bnQpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgXCJnZXRVcGRhdGVTaW5jZSBhcmd1bWVudCBtdXN0IGJlIGEgcHJldmlvdXNseS1pc3N1ZWQgdXBkYXRlQ291bnQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChmaW5hbCkge1xuICAgICAgICBhc3NlcnQyKGN1cnJlbnRSZXNwb25zZSAhPT0gdm9pZCAwKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjdXJyZW50UmVzcG9uc2UpO1xuICAgICAgfVxuICAgICAgaWYgKCFvcHROZXh0UHJvbWlzZSkge1xuICAgICAgICBjb25zdCBuZXh0SXRlclJlc3VsdFAgPSBFKGl0ZXJhdG9yUCkubmV4dCgpO1xuICAgICAgICBvcHROZXh0UHJvbWlzZSA9IEUud2hlbihcbiAgICAgICAgICBuZXh0SXRlclJlc3VsdFAsXG4gICAgICAgICAgKHsgZG9uZSwgdmFsdWUgfSkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0MighZmluYWwpO1xuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgZmluYWwgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudFVwZGF0ZUNvdW50ICs9IDFuO1xuICAgICAgICAgICAgY3VycmVudFJlc3BvbnNlID0gaGFyZGVuKHtcbiAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgIHVwZGF0ZUNvdW50OiBkb25lID8gdm9pZCAwIDogY3VycmVudFVwZGF0ZUNvdW50XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG9wdE5leHRQcm9taXNlID0gdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRSZXNwb25zZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIChfcmVhc29uKSA9PiB7XG4gICAgICAgICAgICBmaW5hbCA9IHRydWU7XG4gICAgICAgICAgICBjdXJyZW50UmVzcG9uc2UgPSAvKiogQHR5cGUge1Byb21pc2U8VXBkYXRlUmVjb3JkPFQ+Pn0gKi9cbiAgICAgICAgICAgIG5leHRJdGVyUmVzdWx0UDtcbiAgICAgICAgICAgIG9wdE5leHRQcm9taXNlID0gdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRSZXNwb25zZTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3B0TmV4dFByb21pc2U7XG4gICAgfVxuICB9KTtcbiAgY29uc3Qgbm90aWZpZXIgPSBGYXIoXCJub3RpZmllclwiLCB7XG4gICAgLyogRG9uJ3QgbGVhayB0aGUgb3JpZ2luYWwgYXN5bmNJdGVyYWJsZVAgc2luY2UgaXQgbWF5IGJlIHJlbW90ZSBhbmQgd2UgYWxzbyovXG4gICAgLyogd2FudCB0aGUgc2FtZSBzZW1hbnRpY3MgZm9yIHRoaXMgZXhwb3NlZCBpdGVyYWJsZSBhbmQgdGhlIGJhc2VOb3RpZmllci4qL1xuICAgIC4uLm1ha2VOb3RpZmllcihiYXNlTm90aWZpZXIpLFxuICAgIC4uLmJhc2VOb3RpZmllclxuICB9KTtcbiAgcmV0dXJuIG5vdGlmaWVyO1xufTtcbmhhcmRlbihtYWtlTm90aWZpZXJGcm9tQXN5bmNJdGVyYWJsZSk7XG5cbi8qIC4uL25vdGlmaWVyL3NyYy90b3BpYy5qcyovXG52YXIgbWFrZVBpbm5lZEhpc3RvcnlUb3BpYyA9ICh0b3BpYykgPT4ge1xuICBjb25zdCBwaW5uZWRQdWJMaXN0ID0gdG9waWMuc3Vic2NyaWJlQWZ0ZXIoKTtcbiAgcmV0dXJuIEZhcihcIlBpbm5lZEhpc3RvcnlUb3BpY1wiLCB7XG4gICAgc3Vic2NyaWJlQWZ0ZXI6IGFzeW5jIChwdWJsaXNoQ291bnQgPSAtMW4pID0+IHtcbiAgICAgIGlmIChwdWJsaXNoQ291bnQgPT09IC0xbikge1xuICAgICAgICByZXR1cm4gcGlubmVkUHViTGlzdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0b3BpYy5zdWJzY3JpYmVBZnRlcihwdWJsaXNoQ291bnQpO1xuICAgIH0sXG4gICAgZ2V0VXBkYXRlU2luY2U6IGFzeW5jICh1cGRhdGVDb3VudCA9IHZvaWQgMCkgPT4ge1xuICAgICAgcmV0dXJuIHRvcGljLmdldFVwZGF0ZVNpbmNlKHVwZGF0ZUNvdW50KTtcbiAgICB9XG4gIH0pO1xufTtcbmhhcmRlbihtYWtlUGlubmVkSGlzdG9yeVRvcGljKTtcblxuLyogLi4vbm90aWZpZXIvc3JjL3N1YnNjcmliZXIuanMqL1xudmFyIG1ha2VTdWJzY3JpcHRpb24gPSAodG9waWMpID0+IHtcbiAgY29uc3Qgc3Vic2NyaXB0aW9uID0gRmFyKFwiU3Vic2NyaXB0aW9uXCIsIHtcbiAgICAuLi5zdWJzY3JpYmVFYWNoKHRvcGljKSxcbiAgICBzdWJzY3JpYmVBZnRlcjogYXN5bmMgKHB1Ymxpc2hDb3VudCkgPT4gRSh0b3BpYykuc3Vic2NyaWJlQWZ0ZXIocHVibGlzaENvdW50KSxcbiAgICAvKipcbiAqIFVzZSB0aGlzIHRvIGRpc3RyaWJ1dGUgYSBTdWJzY3JpcHRpb24gZWZmaWNpZW50bHkgb3ZlciB0aGUgbmV0d29yayxcbiAqIGJ5IG9idGFpbmluZyB0aGlzIGZyb20gdGhlIFN1YnNjcmlwdGlvbiB0byBiZSByZXBsaWNhdGVkLCBhbmQgYXBwbHlpbmdcbiAqIGBtYWtlU3Vic2NyaXB0aW9uYCB0byBpdCBhdCB0aGUgbmV3IHNpdGUgdG8gZ2V0IGFuIGVxdWl2YWxlbnQgbG9jYWxcbiAqIFN1YnNjcmlwdGlvbiBhdCB0aGF0IHNpdGUuXG4gKi9cbiAgICBnZXRTaGFyYWJsZVN1YnNjcmlwdGlvbkludGVybmFsczogYXN5bmMgKCkgPT4gdG9waWMsXG4gICAgZ2V0U3RvcmVLZXk6ICgpID0+IGhhcmRlbih7IHN1YnNjcmlwdGlvbiB9KVxuICB9KTtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbn07XG5oYXJkZW4obWFrZVN1YnNjcmlwdGlvbik7XG52YXIgbWFrZVN1YnNjcmlwdGlvbktpdCA9ICgpID0+IHtcbiAgY29uc3QgeyBwdWJsaXNoZXIsIHN1YnNjcmliZXIgfSA9IG1ha2VQdWJsaXNoS2l0KCk7XG4gIGNvbnN0IHBpbm5lZEhpc3RvcnlUb3BpYyA9IG1ha2VQaW5uZWRIaXN0b3J5VG9waWMoc3Vic2NyaWJlcik7XG4gIGNvbnN0IHN1YnNjcmlwdGlvbiA9IG1ha2VTdWJzY3JpcHRpb24ocGlubmVkSGlzdG9yeVRvcGljKTtcbiAgY29uc3QgcHVibGljYXRpb24gPSBGYXIoXCJwdWJsaWNhdGlvblwiLCB7XG4gICAgdXBkYXRlU3RhdGU6IChub25GaW5hbFZhbHVlKSA9PiBwdWJsaXNoZXIucHVibGlzaChub25GaW5hbFZhbHVlKSxcbiAgICBmaW5pc2g6IChjb21wbGV0aW9uKSA9PiBwdWJsaXNoZXIuZmluaXNoKGNvbXBsZXRpb24pLFxuICAgIGZhaWw6IChyZWFzb24pID0+IHB1Ymxpc2hlci5mYWlsKHJlYXNvbilcbiAgfSk7XG4gIHJldHVybiBoYXJkZW4oeyBwdWJsaWNhdGlvbiwgc3Vic2NyaXB0aW9uIH0pO1xufTtcbmhhcmRlbihtYWtlU3Vic2NyaXB0aW9uS2l0KTtcblxuLyogLi4vbm90aWZpZXIvc3JjL2FzeW5jSXRlcmFibGVBZGFwdG9yLmpzKi9cbnZhciBvYnNlcnZlSXRlcmF0b3IgPSAoYXN5bmNJdGVyYXRvclAsIGl0ZXJhdGlvbk9ic2VydmVyKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgoYWNrLCBvYnNlcnZlckVycm9yKSA9PiB7XG4gICAgY29uc3QgcmVjdXIgPSAoKSA9PiB7XG4gICAgICBFLndoZW4oXG4gICAgICAgIEUoYXN5bmNJdGVyYXRvclApLm5leHQoKSxcbiAgICAgICAgKHsgdmFsdWUsIGRvbmUgfSkgPT4ge1xuICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICBpdGVyYXRpb25PYnNlcnZlci5maW5pc2ggJiYgaXRlcmF0aW9uT2JzZXJ2ZXIuZmluaXNoKHZhbHVlKTtcbiAgICAgICAgICAgIGFjayh2b2lkIDApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpdGVyYXRpb25PYnNlcnZlci51cGRhdGVTdGF0ZSAmJiBpdGVyYXRpb25PYnNlcnZlci51cGRhdGVTdGF0ZSh2YWx1ZSk7XG4gICAgICAgICAgICByZWN1cigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgKHJlYXNvbikgPT4ge1xuICAgICAgICAgIGl0ZXJhdGlvbk9ic2VydmVyLmZhaWwgJiYgaXRlcmF0aW9uT2JzZXJ2ZXIuZmFpbChyZWFzb24pO1xuICAgICAgICAgIGFjayh2b2lkIDApO1xuICAgICAgICB9XG4gICAgICApLmNhdGNoKG9ic2VydmVyRXJyb3IpO1xuICAgIH07XG4gICAgcmVjdXIoKTtcbiAgfSk7XG59O1xudmFyIG9ic2VydmVJdGVyYXRpb24gPSAoYXN5bmNJdGVyYWJsZVAsIGl0ZXJhdGlvbk9ic2VydmVyKSA9PiB7XG4gIGNvbnN0IGl0ZXJhdG9yUCA9IEUoYXN5bmNJdGVyYWJsZVApW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICByZXR1cm4gb2JzZXJ2ZUl0ZXJhdG9yKGl0ZXJhdG9yUCwgaXRlcmF0aW9uT2JzZXJ2ZXIpO1xufTtcblxuLyogLi4vbm90aWZpZXIvc3JjL3N0b3Jlc3ViLmpzKi9cbnZhciBmb3JFYWNoUHVibGljYXRpb25SZWNvcmQgPSBhc3luYyAoc3Vic2NyaWJlciwgY29uc3VtZVZhbHVlKSA9PiB7XG4gIGNvbnN0IGl0ZXJhdG9yID0gc3Vic2NyaWJlRWFjaChzdWJzY3JpYmVyKVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgbGV0IGZpbmlzaGVkID0gZmFsc2U7XG4gIGF3YWl0IG51bGw7XG4gIHdoaWxlICghZmluaXNoZWQpIHtcbiAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBhd2FpdCBpdGVyYXRvci5uZXh0KCk7XG4gICAgYXdhaXQgY29uc3VtZVZhbHVlKHZhbHVlKTtcbiAgICBmaW5pc2hlZCA9ICEhZG9uZTtcbiAgfVxufTtcbnZhciBtYWtlU3RvcmVkU3Vic2NyaWJlciA9IChzdWJzY3JpYmVyLCBzdG9yYWdlTm9kZSwgbWFyc2hhbGxlcikgPT4ge1xuICBhc3NlcnRBbGxEZWZpbmVkKHsgc3Vic2NyaWJlciwgc3RvcmFnZU5vZGUsIG1hcnNoYWxsZXIgfSk7XG4gIGNvbnN0IG1hcnNoYWxsVG9TdG9yYWdlID0gbWFrZVNlcmlhbGl6ZVRvU3RvcmFnZShzdG9yYWdlTm9kZSwgbWFyc2hhbGxlcik7XG4gIGZvckVhY2hQdWJsaWNhdGlvblJlY29yZChzdWJzY3JpYmVyLCBtYXJzaGFsbFRvU3RvcmFnZSkuY2F0Y2goKGVycikgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJTdG9yZWRTdWJzY3JpYmVyIGZhaWxlZCB0byBpdGVyYXRlXCIsIGVycik7XG4gIH0pO1xuICBjb25zdCB1bnNlcmlhbGl6ZXIgPSBGYXIoXCJ1bnNlcmlhbGl6ZXJcIiwge1xuICAgIGZyb21DYXBEYXRhOiAoZGF0YSkgPT4gRShtYXJzaGFsbGVyKS5mcm9tQ2FwRGF0YShkYXRhKSxcbiAgICB1bnNlcmlhbGl6ZTogKGRhdGEpID0+IEUobWFyc2hhbGxlcikuZnJvbUNhcERhdGEoZGF0YSlcbiAgfSk7XG4gIGNvbnN0IHN0b3Jlc3ViID0gRmFyKFwiU3RvcmVkU3Vic2NyaWJlclwiLCB7XG4gICAgc3Vic2NyaWJlQWZ0ZXI6IChwdWJsaXNoQ291bnQpID0+IHN1YnNjcmliZXIuc3Vic2NyaWJlQWZ0ZXIocHVibGlzaENvdW50KSxcbiAgICBnZXRVcGRhdGVTaW5jZTogKHVwZGF0ZUNvdW50KSA9PiBzdWJzY3JpYmVyLmdldFVwZGF0ZVNpbmNlKHVwZGF0ZUNvdW50KSxcbiAgICBnZXRQYXRoOiAoKSA9PiBFKHN0b3JhZ2VOb2RlKS5nZXRQYXRoKCksXG4gICAgZ2V0U3RvcmVLZXk6ICgpID0+IEUoc3RvcmFnZU5vZGUpLmdldFN0b3JlS2V5KCksXG4gICAgZ2V0VW5zZXJpYWxpemVyOiAoKSA9PiB1bnNlcmlhbGl6ZXJcbiAgfSk7XG4gIHJldHVybiBzdG9yZXN1Yjtcbn07XG52YXIgbWFrZVN0b3JlZFN1YnNjcmlwdGlvbiA9IChzdWJzY3JpcHRpb24sIHN0b3JhZ2VOb2RlLCBtYXJzaGFsbGVyID0gbWFrZU1hcnNoYWwodm9pZCAwLCB2b2lkIDAsIHtcbiAgbWFyc2hhbFNhdmVFcnJvcjogKCkgPT4ge1xuICB9LFxuICBzZXJpYWxpemVCb2R5Rm9ybWF0OiBcInNtYWxsY2Fwc1wiXG59KSkgPT4ge1xuICBjb25zdCB1bnNlcmlhbGl6ZXIgPSBGYXIoXCJ1bnNlcmlhbGl6ZXJcIiwge1xuICAgIGZyb21DYXBEYXRhOiAoZGF0YSkgPT4gRShtYXJzaGFsbGVyKS5mcm9tQ2FwRGF0YShkYXRhKSxcbiAgICB1bnNlcmlhbGl6ZTogKGRhdGEpID0+IEUobWFyc2hhbGxlcikuZnJvbUNhcERhdGEoZGF0YSlcbiAgfSk7XG4gIGxldCBwdWJsaXNoRmFpbGVkID0gZmFsc2U7XG4gIGxldCBwdWJsaXNoRXhjZXB0aW9uO1xuICBjb25zdCBmYWlsID0gKGVycikgPT4ge1xuICAgIHB1Ymxpc2hGYWlsZWQgPSB0cnVlO1xuICAgIHB1Ymxpc2hFeGNlcHRpb24gPSBlcnI7XG4gIH07XG4gIGNvbnN0IHB1Ymxpc2hWYWx1ZSA9IChvYmopID0+IHtcbiAgICBhc3NlcnQoc3RvcmFnZU5vZGUpO1xuICAgIGlmIChwdWJsaXNoRmFpbGVkKSB7XG4gICAgICB0aHJvdyBwdWJsaXNoRXhjZXB0aW9uO1xuICAgIH1cbiAgICBFKG1hcnNoYWxsZXIpLnRvQ2FwRGF0YShvYmopLnRoZW4oKHNlcmlhbGl6ZWQpID0+IHtcbiAgICAgIGNvbnN0IGVuY29kZWQgPSBKU09OLnN0cmluZ2lmeShzZXJpYWxpemVkKTtcbiAgICAgIHJldHVybiBFKHN0b3JhZ2VOb2RlKS5zZXRWYWx1ZShlbmNvZGVkKTtcbiAgICB9KS5jYXRjaChmYWlsKTtcbiAgfTtcbiAgaWYgKHN0b3JhZ2VOb2RlKSB7XG4gICAgb2JzZXJ2ZUl0ZXJhdGlvbihzdWJzY3JpcHRpb24sIHtcbiAgICAgIHVwZGF0ZVN0YXRlOiBwdWJsaXNoVmFsdWUsXG4gICAgICBmaW5pc2g6IHB1Ymxpc2hWYWx1ZVxuICAgIH0pLmNhdGNoKGZhaWwpO1xuICB9XG4gIGNvbnN0IHN0b3Jlc3ViID0gRmFyKFwiU3RvcmVkU3Vic2NyaXB0aW9uXCIsIHtcbiAgICAvKiBAdHMtZXhwZWN0LWVycm9yIGdldFN0b3JlS2V5IHR5cGUgZG9lcyBub3QgaGF2ZSBgc3Vic2NyaXB0aW9uYCovXG4gICAgZ2V0U3RvcmVLZXk6IGFzeW5jICgpID0+IHtcbiAgICAgIGlmICghc3RvcmFnZU5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGhhcmRlbih7IHN1YnNjcmlwdGlvbiB9KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0b3JlS2V5ID0gYXdhaXQgRShzdG9yYWdlTm9kZSkuZ2V0U3RvcmVLZXkoKTtcbiAgICAgIHJldHVybiBoYXJkZW4oeyAuLi5zdG9yZUtleSwgc3Vic2NyaXB0aW9uIH0pO1xuICAgIH0sXG4gICAgZ2V0VW5zZXJpYWxpemVyOiAoKSA9PiB1bnNlcmlhbGl6ZXIsXG4gICAgZ2V0U2hhcmFibGVTdWJzY3JpcHRpb25JbnRlcm5hbHM6ICgpID0+IHN1YnNjcmlwdGlvbi5nZXRTaGFyYWJsZVN1YnNjcmlwdGlvbkludGVybmFscygpLFxuICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl06ICgpID0+IHN1YnNjcmlwdGlvbltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSxcbiAgICBzdWJzY3JpYmVBZnRlcjogKHB1Ymxpc2hDb3VudCkgPT4gc3Vic2NyaXB0aW9uLnN1YnNjcmliZUFmdGVyKHB1Ymxpc2hDb3VudClcbiAgfSk7XG4gIHJldHVybiBzdG9yZXN1Yjtcbn07XG5oYXJkZW4obWFrZVN0b3JlZFN1YnNjcmlwdGlvbik7XG52YXIgbWFrZVN0b3JlZFB1Ymxpc2hLaXQgPSAoc3RvcmFnZU5vZGUsIG1hcnNoYWxsZXIpID0+IHtcbiAgY29uc3QgeyBwdWJsaXNoZXIsIHN1YnNjcmliZXIgfSA9IG1ha2VQdWJsaXNoS2l0KCk7XG4gIHJldHVybiB7XG4gICAgcHVibGlzaGVyLFxuICAgIC8qIHdyYXAgdGhlIHN1YnNjcmliZXIgdG8gdGVlIGV2ZW50cyB0byBzdG9yYWdlKi9cbiAgICBzdWJzY3JpYmVyOiBtYWtlU3RvcmVkU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBzdG9yYWdlTm9kZSwgbWFyc2hhbGxlcilcbiAgfTtcbn07XG5oYXJkZW4obWFrZVN0b3JlZFB1Ymxpc2hLaXQpO1xuXG4vKiAuLi9pbnRlcm5hbC9zcmMvdGVzdGluZy11dGlscy5qcyovXG52YXIgZXZlbnRMb29wSXRlcmF0aW9uID0gYXN5bmMgKCkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUyKSA9PiBzZXRJbW1lZGlhdGUocmVzb2x2ZTIpKTtcbmhhcmRlbihldmVudExvb3BJdGVyYXRpb24pO1xudmFyIHN0cmluZ09yVGFnID0gKHZhbHVlKSA9PiB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZVtTeW1ib2wudG9TdHJpbmdUYWddO1xuICB9XG4gIHJldHVybiBTdHJpbmcodmFsdWUpO1xufTtcbnZhciBpbnNwZWN0TWFwU3RvcmUgPSAoc3RvcmUpID0+IHtcbiAgY29uc3Qgb2JqID0ge307XG4gIGZvciAoY29uc3Qga2V5IG9mIHN0b3JlLmtleXMoKSkge1xuICAgIGNvbnN0IHZhbHVlID0gc3RvcmUuZ2V0KGtleSk7XG4gICAgY29uc3QgaGFzS2V5cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiBcImtleXNcIiBpbiB2YWx1ZTtcbiAgICBjb25zdCBpbmRleCA9IHN0cmluZ09yVGFnKGtleSk7XG4gICAgaWYgKGhhc0tleXMgJiYgXCJnZXRcIiBpbiB2YWx1ZSkge1xuICAgICAgb2JqW2luZGV4XSA9IGluc3BlY3RNYXBTdG9yZSh2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChoYXNLZXlzKSB7XG4gICAgICBvYmpbaW5kZXhdID0gQXJyYXkuZnJvbSh2YWx1ZS5rZXlzKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmpbaW5kZXhdID0gdmFsdWUgaW5zdGFuY2VvZiBPYmplY3QgJiYgU3ltYm9sLnRvU3RyaW5nVGFnIGluIHZhbHVlID8gdmFsdWVbU3ltYm9sLnRvU3RyaW5nVGFnXSA6IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbmhhcmRlbihpbnNwZWN0TWFwU3RvcmUpO1xuXG4vKiAuLi9ub3RpZmllci90b29scy90ZXN0U3VwcG9ydHMuanMqL1xudmFyIG1ha2VGYWtlU3RvcmFnZSA9IChwYXRoLCBwdWJsaWNhdGlvbikgPT4ge1xuICBsZXQgc2V0VmFsdWVDYWxscyA9IDA7XG4gIGNvbnN0IGZ1bGxQYXRoID0gYHB1Ymxpc2guJHtwYXRofWA7XG4gIGNvbnN0IHN0b3JlS2V5ID0gaGFyZGVuKHtcbiAgICBzdG9yZU5hbWU6IFwic3dpbmdzZXRcIixcbiAgICBzdG9yZVN1YmtleTogYHN3aW5nc2V0L2RhdGE6JHtmdWxsUGF0aH1gLFxuICAgIGRhdGFQcmVmaXhCeXRlczogXCJcIlxuICB9KTtcbiAgY29uc3Qgc3RvcmFnZSA9IEZhcihcIlN0b3JhZ2VOb2RlXCIsIHtcbiAgICBnZXRQYXRoOiAoKSA9PiBwYXRoLFxuICAgIGdldFN0b3JlS2V5OiBhc3luYyAoKSA9PiBzdG9yZUtleSxcbiAgICBzZXRWYWx1ZTogYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICBzZXRWYWx1ZUNhbGxzICs9IDE7XG4gICAgICBhc3NlcnQudHlwZW9mKHZhbHVlLCBcInN0cmluZ1wiKTtcbiAgICAgIGlmIChwdWJsaWNhdGlvbikge1xuICAgICAgICBwdWJsaWNhdGlvbi51cGRhdGVTdGF0ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBtYWtlQ2hpbGROb2RlOiAoKSA9PiBzdG9yYWdlLFxuICAgIGNvdW50U2V0VmFsdWVDYWxsczogKCkgPT4gc2V0VmFsdWVDYWxsc1xuICB9KTtcbiAgcmV0dXJuIHN0b3JhZ2U7XG59O1xuaGFyZGVuKG1ha2VGYWtlU3RvcmFnZSk7XG52YXIgbWFrZUZha2VNYXJzaGFsbGVyID0gKCkgPT4gbWFrZU1hcnNoYWwodm9pZCAwLCB2b2lkIDAsIHtcbiAgbWFyc2hhbFNhdmVFcnJvcjogKCkgPT4ge1xuICB9XG59KTtcbmhhcmRlbihtYWtlRmFrZU1hcnNoYWxsZXIpO1xuXG4vKiAuLi96b2Uvc3JjL2NvbnRyYWN0U3VwcG9ydC9yZWNvcmRlci5qcyovXG52YXIgcHJlcGFyZVJlY29yZGVyID0gKGJhZ2dhZ2UsIG1hcnNoYWxsZXIpID0+IHtcbiAgY29uc3QgbWFrZVJlY29yZGVyID0gcHJlcGFyZUV4b0NsYXNzKFxuICAgIGJhZ2dhZ2UsXG4gICAgXCJSZWNvcmRlclwiLFxuICAgIE0uaW50ZXJmYWNlKFwiUmVjb3JkZXJcIiwge1xuICAgICAgZ2V0U3RvcmFnZU5vZGU6IE0uY2FsbCgpLnJldHVybnMoU3RvcmFnZU5vZGVTaGFwZSksXG4gICAgICBnZXRTdG9yYWdlUGF0aDogTS5jYWxsKCkucmV0dXJucyhNLnByb21pc2UoXG4gICAgICAgIC8qIHN0cmluZyAqL1xuICAgICAgKSksXG4gICAgICB3cml0ZTogTS5jYWxsKE0uYW55KCkpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICAgICAgd3JpdGVGaW5hbDogTS5jYWxsKE0uYW55KCkpLnJldHVybnMoTS5wcm9taXNlKCkpXG4gICAgfSksXG4gICAgLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtQdWJsaXNoS2l0PFQ+WydwdWJsaXNoZXInXX0gcHVibGlzaGVyXG4gKiBAcGFyYW0ge0F3YWl0ZWQ8SU1QT1JUKCdAZW5kby9mYXInKS5GYXJSZWY8U3RvcmFnZU5vZGU+Pn0gc3RvcmFnZU5vZGVcbiAqIEBwYXJhbSB7VHlwZWRQYXR0ZXJuPGFueT59IFt2YWx1ZVNoYXBlXVxuICovXG4gICAgKHB1Ymxpc2hlciwgc3RvcmFnZU5vZGUsIHZhbHVlU2hhcGUgPSAoXG4gICAgICAvKiogQHR5cGUge1R5cGVkUGF0dGVybjxhbnk+fSAqL1xuICAgICAgTS5hbnkoKVxuICAgICkpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNsb3NlZDogZmFsc2UsXG4gICAgICAgIHB1Ymxpc2hlcixcbiAgICAgICAgc3RvcmFnZU5vZGUsXG4gICAgICAgIHN0b3JhZ2VQYXRoOiAoXG4gICAgICAgICAgLyoqIEB0eXBlIHtzdHJpbmcgfCB1bmRlZmluZWR9ICovXG4gICAgICAgICAgdm9pZCAwXG4gICAgICAgICksXG4gICAgICAgIHZhbHVlU2hhcGVcbiAgICAgIH07XG4gICAgfSxcbiAgICB7XG4gICAgICBnZXRTdG9yYWdlTm9kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuc3RvcmFnZU5vZGU7XG4gICAgICB9LFxuICAgICAgLyoqXG4gKiBNZW1vaXplcyB0aGUgcmVtb3RlIGNhbGwgdG8gdGhlIHN0b3JhZ2Ugbm9kZVxuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XG4gKi9cbiAgICAgIGFzeW5jIGdldFN0b3JhZ2VQYXRoKCkge1xuICAgICAgICBjb25zdCB7IHN0b3JhZ2VQYXRoOiBoZWxkUGF0aCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgYXdhaXQgbnVsbDtcbiAgICAgICAgaWYgKGhlbGRQYXRoICE9PSB2b2lkIDApIHtcbiAgICAgICAgICByZXR1cm4gaGVsZFBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF0aCA9IGF3YWl0IEUodGhpcy5zdGF0ZS5zdG9yYWdlTm9kZSkuZ2V0UGF0aCgpO1xuICAgICAgICB0aGlzLnN0YXRlLnN0b3JhZ2VQYXRoID0gcGF0aDtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9LFxuICAgICAgLyoqXG4gKiBNYXJzaGFsbHMgYmVmb3JlIHdyaXRpbmcgdG8gc3RvcmFnZSBvciBwdWJsaXNoZXIgdG8gaGVscCBlbnN1cmUgdGhlIHR3byBzdHJlYW1zIG1hdGNoLlxuICpcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gKi9cbiAgICAgIGFzeW5jIHdyaXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHsgY2xvc2VkLCBwdWJsaXNoZXIsIHN0b3JhZ2VOb2RlLCB2YWx1ZVNoYXBlIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAhY2xvc2VkIHx8IHRocm93UmVkYWN0ZWRgY2Fubm90IHdyaXRlIHRvIGNsb3NlZCByZWNvcmRlcmA7XG4gICAgICAgIG11c3RNYXRjaDIodmFsdWUsIHZhbHVlU2hhcGUpO1xuICAgICAgICBjb25zdCBlbmNvZGVkID0gYXdhaXQgRShtYXJzaGFsbGVyKS50b0NhcERhdGEodmFsdWUpO1xuICAgICAgICBjb25zdCBzZXJpYWxpemVkID0gSlNPTi5zdHJpbmdpZnkoZW5jb2RlZCk7XG4gICAgICAgIGF3YWl0IEUoc3RvcmFnZU5vZGUpLnNldFZhbHVlKHNlcmlhbGl6ZWQpO1xuICAgICAgICByZXR1cm4gcHVibGlzaGVyLnB1Ymxpc2godmFsdWUpO1xuICAgICAgfSxcbiAgICAgIC8qKlxuICogTGlrZSBgd3JpdGVgIGJ1dCBwcmV2ZW50cyBmdXR1cmUgd3JpdGVzIGFuZCB0ZXJtaW5hdGVzIHRoZSBwdWJsaXNoZXIuXG4gKlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAqL1xuICAgICAgYXN5bmMgd3JpdGVGaW5hbCh2YWx1ZSkge1xuICAgICAgICBjb25zdCB7IGNsb3NlZCwgcHVibGlzaGVyLCBzdG9yYWdlTm9kZSwgdmFsdWVTaGFwZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgIWNsb3NlZCB8fCB0aHJvd1JlZGFjdGVkYGNhbm5vdCB3cml0ZSB0byBjbG9zZWQgcmVjb3JkZXJgO1xuICAgICAgICBtdXN0TWF0Y2gyKHZhbHVlLCB2YWx1ZVNoYXBlKTtcbiAgICAgICAgY29uc3QgZW5jb2RlZCA9IGF3YWl0IEUobWFyc2hhbGxlcikudG9DYXBEYXRhKHZhbHVlKTtcbiAgICAgICAgY29uc3Qgc2VyaWFsaXplZCA9IEpTT04uc3RyaW5naWZ5KGVuY29kZWQpO1xuICAgICAgICBhd2FpdCBFKHN0b3JhZ2VOb2RlKS5zZXRWYWx1ZShzZXJpYWxpemVkKTtcbiAgICAgICAgdGhpcy5zdGF0ZS5jbG9zZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gcHVibGlzaGVyLmZpbmlzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICApO1xuICByZXR1cm4gbWFrZVJlY29yZGVyO1xufTtcbmhhcmRlbihwcmVwYXJlUmVjb3JkZXIpO1xudmFyIGRlZmluZVJlY29yZGVyS2l0ID0gKHsgbWFrZVJlY29yZGVyLCBtYWtlRHVyYWJsZVB1Ymxpc2hLaXQgfSkgPT4ge1xuICBjb25zdCBtYWtlUmVjb3JkZXJLaXQgPSAoc3RvcmFnZU5vZGUsIHZhbHVlU2hhcGUpID0+IHtcbiAgICBjb25zdCB7IHN1YnNjcmliZXIsIHB1Ymxpc2hlciB9ID0gbWFrZUR1cmFibGVQdWJsaXNoS2l0KCk7XG4gICAgY29uc3QgcmVjb3JkZXIgPSBtYWtlUmVjb3JkZXIoXG4gICAgICBwdWJsaXNoZXIsXG4gICAgICAvKiogQHR5cGUgeyBBd2FpdGVkPElNUE9SVCgnQGVuZG8vZmFyJykuRmFyUmVmPFN0b3JhZ2VOb2RlPj4gfSAqL1xuICAgICAgc3RvcmFnZU5vZGUsXG4gICAgICB2YWx1ZVNoYXBlXG4gICAgKTtcbiAgICByZXR1cm4gaGFyZGVuKHsgc3Vic2NyaWJlciwgcmVjb3JkZXIgfSk7XG4gIH07XG4gIHJldHVybiBtYWtlUmVjb3JkZXJLaXQ7XG59O1xudmFyIGRlZmluZUVSZWNvcmRlcktpdCA9ICh7IG1ha2VSZWNvcmRlciwgbWFrZUR1cmFibGVQdWJsaXNoS2l0IH0pID0+IHtcbiAgY29uc3QgbWFrZUVSZWNvcmRlcktpdCA9IChzdG9yYWdlTm9kZVAsIHZhbHVlU2hhcGUpID0+IHtcbiAgICBjb25zdCB7IHB1Ymxpc2hlciwgc3Vic2NyaWJlciB9ID0gbWFrZUR1cmFibGVQdWJsaXNoS2l0KCk7XG4gICAgY29uc3QgcmVjb3JkZXJQID0gRS53aGVuKFxuICAgICAgc3RvcmFnZU5vZGVQLFxuICAgICAgKHN0b3JhZ2VOb2RlKSA9PiBtYWtlUmVjb3JkZXIoXG4gICAgICAgIHB1Ymxpc2hlcixcbiAgICAgICAgLyogQHRzLWV4cGVjdC1lcnJvciBDYXN0aW5nIGJlY2F1c2UgaXQncyByZW1vdGUqL1xuICAgICAgICAvKiogQHR5cGUgeyBJTVBPUlQoJ0BlbmRvL2ZhcicpLkZhclJlZjxTdG9yYWdlTm9kZT4gfSAqL1xuICAgICAgICBzdG9yYWdlTm9kZSxcbiAgICAgICAgdmFsdWVTaGFwZVxuICAgICAgKVxuICAgICk7XG4gICAgcmV0dXJuIHsgc3Vic2NyaWJlciwgcmVjb3JkZXJQIH07XG4gIH07XG4gIHJldHVybiBtYWtlRVJlY29yZGVyS2l0O1xufTtcbmhhcmRlbihkZWZpbmVFUmVjb3JkZXJLaXQpO1xudmFyIHByZXBhcmVSZWNvcmRlcktpdE1ha2VycyA9IChiYWdnYWdlLCBtYXJzaGFsbGVyKSA9PiB7XG4gIGNvbnN0IG1ha2VEdXJhYmxlUHVibGlzaEtpdCA9IHByZXBhcmVEdXJhYmxlUHVibGlzaEtpdChcbiAgICBiYWdnYWdlLFxuICAgIFwiRHVyYWJsZSBQdWJsaXNoIEtpdFwiXG4gICk7XG4gIGNvbnN0IG1ha2VSZWNvcmRlciA9IHByZXBhcmVSZWNvcmRlcihiYWdnYWdlLCBtYXJzaGFsbGVyKTtcbiAgY29uc3QgbWFrZVJlY29yZGVyS2l0ID0gZGVmaW5lUmVjb3JkZXJLaXQoe1xuICAgIG1ha2VSZWNvcmRlcixcbiAgICBtYWtlRHVyYWJsZVB1Ymxpc2hLaXRcbiAgfSk7XG4gIGNvbnN0IG1ha2VFUmVjb3JkZXJLaXQgPSBkZWZpbmVFUmVjb3JkZXJLaXQoe1xuICAgIG1ha2VSZWNvcmRlcixcbiAgICBtYWtlRHVyYWJsZVB1Ymxpc2hLaXRcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgbWFrZUR1cmFibGVQdWJsaXNoS2l0LFxuICAgIG1ha2VSZWNvcmRlcixcbiAgICBtYWtlUmVjb3JkZXJLaXQsXG4gICAgbWFrZUVSZWNvcmRlcktpdFxuICB9O1xufTtcbnZhciBSZWNvcmRlcktpdFNoYXBlID0ge1xuICByZWNvcmRlcjogTS5yZW1vdGFibGUoKSxcbiAgc3Vic2NyaWJlcjogTS5yZW1vdGFibGUoKVxufTtcbmhhcmRlbihSZWNvcmRlcktpdFNoYXBlKTtcblxuLyogLi4vem9uZS9zcmMvZHVyYWJsZS5qcyovXG52YXIgaXNTdG9yYWJsZSA9IChzcGVjaW1lbikgPT4gaXNQYXNzYWJsZShzcGVjaW1lbikgJiYgY2FuQmVEdXJhYmxlKHNwZWNpbWVuKTtcbmhhcmRlbihpc1N0b3JhYmxlKTtcbnZhciBhdHRhY2hEdXJhYmxlU3RvcmVzID0gKGdldEJhZ2dhZ2UpID0+IHtcbiAgY29uc3QgbWFwU3RvcmUgPSAobGFiZWwsIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBiYWdnYWdlID0gZ2V0QmFnZ2FnZSgpO1xuICAgIGNvbnN0IHJldCA9IHByb3ZpZGVEdXJhYmxlTWFwU3RvcmUoYmFnZ2FnZSwgbGFiZWwsIG9wdGlvbnMpO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG4gIGNvbnN0IHNldFN0b3JlID0gKGxhYmVsLCBvcHRpb25zKSA9PiBwcm92aWRlRHVyYWJsZVNldFN0b3JlKGdldEJhZ2dhZ2UoKSwgbGFiZWwsIG9wdGlvbnMpO1xuICBjb25zdCB3ZWFrU2V0U3RvcmUgPSAobGFiZWwsIG9wdGlvbnMpID0+IHByb3ZpZGVEdXJhYmxlV2Vha1NldFN0b3JlKGdldEJhZ2dhZ2UoKSwgbGFiZWwsIG9wdGlvbnMpO1xuICBjb25zdCB3ZWFrTWFwU3RvcmUgPSAobGFiZWwsIG9wdGlvbnMpID0+IHByb3ZpZGVEdXJhYmxlV2Vha01hcFN0b3JlKGdldEJhZ2dhZ2UoKSwgbGFiZWwsIG9wdGlvbnMpO1xuICByZXR1cm4gRmFyKFwiZHVyYWJsZVN0b3Jlc1wiLCB7XG4gICAgZGV0YWNoZWQ6ICgpID0+IGRldGFjaGVkRHVyYWJsZVN0b3JlcyxcbiAgICBpc1N0b3JhYmxlLFxuICAgIG1hcFN0b3JlLFxuICAgIHNldFN0b3JlLFxuICAgIHdlYWtNYXBTdG9yZSxcbiAgICB3ZWFrU2V0U3RvcmVcbiAgfSk7XG59O1xudmFyIGRldGFjaGVkRHVyYWJsZVN0b3JlcyA9IGF0dGFjaER1cmFibGVTdG9yZXMoXG4gICgpID0+IG1ha2VTY2FsYXJNYXBTdG9yZShcImRldGFjaGVkXCIpXG4pO1xudmFyIG1ha2VEdXJhYmxlWm9uZSA9IChiYWdnYWdlLCBiYXNlTGFiZWwgPSBcImR1cmFibGVab25lXCIpID0+IHtcbiAgYmFnZ2FnZSB8fCB0aHJvd1JlZGFjdGVkYGJhZ2dhZ2UgcmVxdWlyZWRgO1xuICBjb25zdCBhdHRhY2hlZFN0b3JlcyA9IGF0dGFjaER1cmFibGVTdG9yZXMoKCkgPT4gYmFnZ2FnZSk7XG4gIGNvbnN0IHsgbWFrZU9uY2UsIHdyYXBQcm92aWRlciB9ID0gbWFrZU9uY2VLaXQoXG4gICAgYmFzZUxhYmVsLFxuICAgIGF0dGFjaGVkU3RvcmVzLFxuICAgIGJhZ2dhZ2VcbiAgKTtcbiAgY29uc3QgZXhvQ2xhc3MgPSAoLi4uYXJncykgPT4gcHJlcGFyZUV4b0NsYXNzKGJhZ2dhZ2UsIC4uLmFyZ3MpO1xuICBjb25zdCBleG9DbGFzc0tpdCA9ICguLi5hcmdzKSA9PiBwcmVwYXJlRXhvQ2xhc3NLaXQoYmFnZ2FnZSwgLi4uYXJncyk7XG4gIGNvbnN0IGV4byA9ICguLi5hcmdzKSA9PiBwcmVwYXJlRXhvKGJhZ2dhZ2UsIC4uLmFyZ3MpO1xuICBjb25zdCBzdWJab25lU3RvcmUgPSB3cmFwUHJvdmlkZXIoYXR0YWNoZWRTdG9yZXMubWFwU3RvcmUsIGFnb3JpY1ZhdERhdGFLZXlzLnpvbmUpO1xuICBjb25zdCBzdWJab25lID0gKGxhYmVsLCBvcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCBzdWJCYWdnYWdlID0gc3ViWm9uZVN0b3JlKGxhYmVsLCBvcHRpb25zKTtcbiAgICByZXR1cm4gbWFrZUR1cmFibGVab25lKHN1YkJhZ2dhZ2UsIGAke2Jhc2VMYWJlbH0uJHtsYWJlbH1gKTtcbiAgfTtcbiAgcmV0dXJuIEZhcihcImR1cmFibGVab25lXCIsIHtcbiAgICBleG86IHdyYXBQcm92aWRlcihleG8sIGFnb3JpY1ZhdERhdGFLZXlzLmV4byksXG4gICAgZXhvQ2xhc3M6IHdyYXBQcm92aWRlcihleG9DbGFzcywgYWdvcmljVmF0RGF0YUtleXMuZXhvQ2xhc3MpLFxuICAgIGV4b0NsYXNzS2l0OiB3cmFwUHJvdmlkZXIoZXhvQ2xhc3NLaXQsIGFnb3JpY1ZhdERhdGFLZXlzLmV4b0NsYXNzS2l0KSxcbiAgICBzdWJab25lLFxuICAgIG1ha2VPbmNlLFxuICAgIHdhdGNoUHJvbWlzZTogd2F0Y2hQcm9taXNlMixcbiAgICBkZXRhY2hlZDogYXR0YWNoZWRTdG9yZXMuZGV0YWNoZWQsXG4gICAgaXNTdG9yYWJsZTogYXR0YWNoZWRTdG9yZXMuaXNTdG9yYWJsZSxcbiAgICBtYXBTdG9yZTogd3JhcFByb3ZpZGVyKGF0dGFjaGVkU3RvcmVzLm1hcFN0b3JlLCBhZ29yaWNWYXREYXRhS2V5cy5zdG9yZSksXG4gICAgc2V0U3RvcmU6IHdyYXBQcm92aWRlcihhdHRhY2hlZFN0b3Jlcy5zZXRTdG9yZSwgYWdvcmljVmF0RGF0YUtleXMuc3RvcmUpLFxuICAgIHdlYWtNYXBTdG9yZTogd3JhcFByb3ZpZGVyKGF0dGFjaGVkU3RvcmVzLndlYWtNYXBTdG9yZSwgYWdvcmljVmF0RGF0YUtleXMuc3RvcmUpLFxuICAgIHdlYWtTZXRTdG9yZTogd3JhcFByb3ZpZGVyKGF0dGFjaGVkU3RvcmVzLndlYWtTZXRTdG9yZSwgYWdvcmljVmF0RGF0YUtleXMuc3RvcmUpXG4gIH0pO1xufTtcbmhhcmRlbihtYWtlRHVyYWJsZVpvbmUpO1xuXG4vKiAuLi9vcmNoZXN0cmF0aW9uL3NyYy91dGlscy9jaGFpbi1pbmZvLmpzKi9cbnZhciBjYWlwSWRGcm9tSW5mbyA9IChpbmZvKSA9PiB7XG4gIHJldHVybiBgJHtpbmZvLm5hbWVzcGFjZX06JHtpbmZvLnJlZmVyZW5jZX1gO1xufTtcblxuLyogLi4vb3JjaGVzdHJhdGlvbi9zcmMvZXhvcy9jaGFpbi1odWIuanMqL1xudmFyIFBGTV9SRUNFSVZFUiA9IChcbiAgLyoqIEB0eXBlIHtjb25zdH0gKi9cbiAgXCJwZm1cIlxuKTtcbnZhciBIdWJOYW1lID0gKFxuICAvKiogQHR5cGUge2NvbnN0fSAqL1xuICB7XG4gICAgLyoqIGFnb3JpY05hbWVzIGtleSBmb3IgQ2hhaW5JbmZvIGh1YiAqL1xuICAgIENoYWluOiBcImNoYWluXCIsXG4gICAgLyoqIG5hbWVodWIgZm9yIGFzc2V0cyBpbmZvICovXG4gICAgQ2hhaW5Bc3NldHM6IFwiY2hhaW5Bc3NldHNcIixcbiAgICAvKiogbmFtZWh1YiBmb3IgY29ubmVjdGlvbiBpbmZvICovXG4gICAgQ2hhaW5Db25uZWN0aW9uOiBcImNoYWluQ29ubmVjdGlvblwiXG4gIH1cbik7XG5oYXJkZW4oSHViTmFtZSk7XG52YXIgQ0hBSU5fS0VZID0gSHViTmFtZS5DaGFpbjtcbnZhciBDT05ORUNUSU9OU19LRVkgPSBIdWJOYW1lLkNoYWluQ29ubmVjdGlvbjtcbnZhciBBU1NFVFNfS0VZID0gSHViTmFtZS5DaGFpbkFzc2V0cztcbnZhciBDSEFJTl9JRF9TRVBBUkFUT1IgPSBcIl9cIjtcbnZhciBlbmNvZGVDaGFpbklkID0gKGNoYWluSWQpID0+IGNoYWluSWQucmVwbGFjZUFsbChcbiAgQ0hBSU5fSURfU0VQQVJBVE9SLFxuICBgJHtDSEFJTl9JRF9TRVBBUkFUT1J9JHtDSEFJTl9JRF9TRVBBUkFUT1J9YFxuKTtcbnZhciBjb25uZWN0aW9uS2V5ID0gKGNoYWluSWQxLCBjaGFpbklkMikgPT4ge1xuICBjb25zdCBjaGFpbklkMVNhbml0aXplZCA9IGVuY29kZUNoYWluSWQoY2hhaW5JZDEpO1xuICBjb25zdCBjaGFpbklkMlNhbml0aXplZCA9IGVuY29kZUNoYWluSWQoY2hhaW5JZDIpO1xuICByZXR1cm4gKFxuICAgIC8qKiBAdHlwZSB7SWJjQ29ubmVjdGlvbktleX0gKi9cbiAgICBbY2hhaW5JZDFTYW5pdGl6ZWQsIGNoYWluSWQyU2FuaXRpemVkXS5zb3J0KCkuam9pbihDSEFJTl9JRF9TRVBBUkFUT1IpXG4gICk7XG59O1xudmFyIHJldmVyc2VDb25uSW5mbyA9IChjb25uSW5mbykgPT4ge1xuICBjb25zdCB7IHRyYW5zZmVyQ2hhbm5lbCB9ID0gY29ubkluZm87XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIGlkOiBjb25uSW5mby5jb3VudGVycGFydHkuY29ubmVjdGlvbl9pZCxcbiAgICBjbGllbnRfaWQ6IGNvbm5JbmZvLmNvdW50ZXJwYXJ0eS5jbGllbnRfaWQsXG4gICAgY291bnRlcnBhcnR5OiB7XG4gICAgICBjbGllbnRfaWQ6IGNvbm5JbmZvLmNsaWVudF9pZCxcbiAgICAgIGNvbm5lY3Rpb25faWQ6IGNvbm5JbmZvLmlkXG4gICAgfSxcbiAgICBzdGF0ZTogY29ubkluZm8uc3RhdGUsXG4gICAgdHJhbnNmZXJDaGFubmVsOiB7XG4gICAgICAuLi50cmFuc2ZlckNoYW5uZWwsXG4gICAgICBjaGFubmVsSWQ6IHRyYW5zZmVyQ2hhbm5lbC5jb3VudGVyUGFydHlDaGFubmVsSWQsXG4gICAgICBjb3VudGVyUGFydHlDaGFubmVsSWQ6IHRyYW5zZmVyQ2hhbm5lbC5jaGFubmVsSWQsXG4gICAgICBwb3J0SWQ6IHRyYW5zZmVyQ2hhbm5lbC5jb3VudGVyUGFydHlQb3J0SWQsXG4gICAgICBjb3VudGVyUGFydHlQb3J0SWQ6IHRyYW5zZmVyQ2hhbm5lbC5wb3J0SWRcbiAgICB9XG4gIH0pO1xufTtcbnZhciBub3JtYWxpemVDb25uZWN0aW9uSW5mbyA9IChwcmltYXJ5Q2hhaW5JZCwgY291bnRlckNoYWluSWQsIGRpcmVjdGVkKSA9PiB7XG4gIGNvbnN0IGtleSA9IGNvbm5lY3Rpb25LZXkocHJpbWFyeUNoYWluSWQsIGNvdW50ZXJDaGFpbklkKTtcbiAgaWYgKHByaW1hcnlDaGFpbklkIDwgY291bnRlckNoYWluSWQpIHtcbiAgICByZXR1cm4gW2tleSwgZGlyZWN0ZWRdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBba2V5LCByZXZlcnNlQ29ubkluZm8oZGlyZWN0ZWQpXTtcbiAgfVxufTtcbnZhciBkZW5vcm1hbGl6ZUNvbm5lY3Rpb25JbmZvID0gKHByaW1hcnlDaGFpbklkLCBjb3VudGVyQ2hhaW5JZCwgbm9ybWFsaXplZCkgPT4ge1xuICBpZiAocHJpbWFyeUNoYWluSWQgPCBjb3VudGVyQ2hhaW5JZCkge1xuICAgIHJldHVybiBub3JtYWxpemVkO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXZlcnNlQ29ubkluZm8obm9ybWFsaXplZCk7XG4gIH1cbn07XG52YXIgQ2hhaW5JZEFyZ1NoYXBlID0gTS5vcihcbiAgTS5zdHJpbmcoKSxcbiAgTS5zcGxpdFJlY29yZChcbiAgICB7XG4gICAgICBjaGFpbklkOiBNLnN0cmluZygpXG4gICAgfSxcbiAgICB2b2lkIDAsXG4gICAgTS5hbnkoKVxuICApXG4pO1xudmFyIERlZmF1bHRQZm1UaW1lb3V0T3B0cyA9IGhhcmRlbihcbiAgLyoqIEB0eXBlIHtjb25zdH0gKi9cbiAge1xuICAgIHJldHJpZXM6IDMsXG4gICAgdGltZW91dDogKFxuICAgICAgLyoqIEB0eXBlIHtjb25zdH0gKi9cbiAgICAgIFwiMTBtXCJcbiAgICApXG4gIH1cbik7XG52YXIgVHJhbnNmZXJSb3V0ZVNoYXBlID0gTS5zcGxpdFJlY29yZChcbiAge1xuICAgIHNvdXJjZVBvcnQ6IE0uc3RyaW5nKCksXG4gICAgc291cmNlQ2hhbm5lbDogSUJDQ2hhbm5lbElEU2hhcGUsXG4gICAgdG9rZW46IENvaW5TaGFwZSxcbiAgICByZWNlaXZlcjogTS5zdHJpbmcoKVxuICB9LFxuICB7IGZvcndhcmRJbmZvOiBGb3J3YXJkSW5mb1NoYXBlIH0sXG4gIHt9XG4pO1xudmFyIENoYWluSHViSSA9IE0uaW50ZXJmYWNlKFwiQ2hhaW5IdWJcIiwge1xuICByZWdpc3RlckNoYWluOiBNLmNhbGwoTS5zdHJpbmcoKSwgQ2hhaW5JbmZvU2hhcGUpLnJldHVybnMoKSxcbiAgdXBkYXRlQ2hhaW46IE0uY2FsbChNLnN0cmluZygpLCBDaGFpbkluZm9TaGFwZSkucmV0dXJucygpLFxuICBnZXRDaGFpbkluZm86IE0uY2FsbChNLnN0cmluZygpKS5yZXR1cm5zKFZvd1NoYXBlKSxcbiAgZ2V0Q2hhaW5JbmZvQnlDaGFpbklkOiBNLmNhbGwoTS5zdHJpbmcoKSkucmV0dXJucyhDaGFpbkluZm9TaGFwZSksXG4gIHJlZ2lzdGVyQ29ubmVjdGlvbjogTS5jYWxsKFxuICAgIE0uc3RyaW5nKCksXG4gICAgTS5zdHJpbmcoKSxcbiAgICBJQkNDb25uZWN0aW9uSW5mb1NoYXBlXG4gICkucmV0dXJucygpLFxuICB1cGRhdGVDb25uZWN0aW9uOiBNLmNhbGwoXG4gICAgTS5zdHJpbmcoKSxcbiAgICBNLnN0cmluZygpLFxuICAgIElCQ0Nvbm5lY3Rpb25JbmZvU2hhcGVcbiAgKS5yZXR1cm5zKCksXG4gIGdldENvbm5lY3Rpb25JbmZvOiBNLmNhbGwoQ2hhaW5JZEFyZ1NoYXBlLCBDaGFpbklkQXJnU2hhcGUpLnJldHVybnMoVm93U2hhcGUpLFxuICBnZXRDaGFpbnNBbmRDb25uZWN0aW9uOiBNLmNhbGwoTS5zdHJpbmcoKSwgTS5zdHJpbmcoKSkucmV0dXJucyhWb3dTaGFwZSksXG4gIHJlZ2lzdGVyQXNzZXQ6IE0uY2FsbChNLnN0cmluZygpLCBEZW5vbURldGFpbFNoYXBlKS5yZXR1cm5zKCksXG4gIHVwZGF0ZUFzc2V0OiBNLmNhbGwoTS5zdHJpbmcoKSwgRGVub21EZXRhaWxTaGFwZSkucmV0dXJucygpLFxuICBnZXRBc3NldDogTS5jYWxsKE0uc3RyaW5nKCksIE0uc3RyaW5nKCkpLnJldHVybnMoXG4gICAgTS5vcihEZW5vbURldGFpbFNoYXBlLCBNLnVuZGVmaW5lZCgpKVxuICApLFxuICBnZXREZW5vbTogTS5jYWxsKEJyYW5kU2hhcGUpLnJldHVybnMoTS5vcihNLnN0cmluZygpLCBNLnVuZGVmaW5lZCgpKSksXG4gIGNvZXJjZUNvc21vc0FkZHJlc3M6IE0uY2FsbChBY2NvdW50SWRBcmdTaGFwZSkucmV0dXJucyhcbiAgICBDb3Ntb3NDaGFpbkFkZHJlc3NTaGFwZVxuICApLFxuICByZXNvbHZlQWNjb3VudElkOiBNLmNhbGwoTS5zdHJpbmcoKSkucmV0dXJucyhNLnN0cmluZygpKSxcbiAgbWFrZVRyYW5zZmVyUm91dGU6IE0uY2FsbChBY2NvdW50SWRBcmdTaGFwZSwgRGVub21BbW91bnRTaGFwZSwgTS5zdHJpbmcoKSkub3B0aW9uYWwoRm9yd2FyZE9wdHNTaGFwZSkucmV0dXJucyhNLm9yKE0udW5kZWZpbmVkKCksIFRyYW5zZmVyUm91dGVTaGFwZSkpLFxuICBpc0VtcHR5OiBNLmNhbGwoKS5yZXR1cm5zKE0uYm9vbGVhbigpKVxufSk7XG52YXIgbWFrZUNoYWluSHViID0gKHpvbmUsIGFnb3JpY05hbWVzLCB2b3dUb29scywgeyBjaGFpbkluZm9WYWx1ZVNoYXBlID0gKFxuICAvKiogQHR5cGUge1BhdHRlcm59ICovXG4gIENoYWluSW5mb1NoYXBlXG4pIH0gPSB7fSkgPT4ge1xuICBjb25zdCBjaGFpbkluZm9zID0gem9uZS5tYXBTdG9yZShcImNoYWluSW5mb3NcIiwge1xuICAgIGtleVNoYXBlOiBNLnN0cmluZygpLFxuICAgIHZhbHVlU2hhcGU6IGNoYWluSW5mb1ZhbHVlU2hhcGVcbiAgfSk7XG4gIGNvbnN0IGNvbm5lY3Rpb25JbmZvcyA9IHpvbmUubWFwU3RvcmUoXCJjb25uZWN0aW9uSW5mb3NcIiwge1xuICAgIGtleVNoYXBlOiBNLnN0cmluZygpLFxuICAgIHZhbHVlU2hhcGU6IElCQ0Nvbm5lY3Rpb25JbmZvU2hhcGVcbiAgfSk7XG4gIGNvbnN0IGRlbm9tRGV0YWlscyA9IHpvbmUubWFwU3RvcmUoXCJkZW5vbVwiLCB7XG4gICAga2V5U2hhcGU6IE0uc3RyaW5nKCksXG4gICAgdmFsdWVTaGFwZTogRGVub21EZXRhaWxTaGFwZVxuICB9KTtcbiAgY29uc3QgYnJhbmREZW5vbXMgPSB6b25lLm1hcFN0b3JlKFwiYnJhbmREZW5vbVwiLCB7XG4gICAga2V5U2hhcGU6IEJyYW5kU2hhcGUsXG4gICAgdmFsdWVTaGFwZTogTS5zdHJpbmcoKVxuICB9KTtcbiAgY29uc3QgYmVjaDMyUHJlZml4VG9DaGFpbk5hbWUgPSB6b25lLm1hcFN0b3JlKFwiYmVjaDMyUHJlZml4VG9DaGFpbk5hbWVcIiwge1xuICAgIGtleVNoYXBlOiBNLnN0cmluZygpLFxuICAgIHZhbHVlU2hhcGU6IE0uc3RyaW5nKClcbiAgfSk7XG4gIGNvbnN0IGNoYWluSWRUb0NoYWluTmFtZSA9IHpvbmUubWFwU3RvcmUoXCJjaGFpbklkVG9DaGFpbk5hbWVcIiwge1xuICAgIGtleVNoYXBlOiBNLnN0cmluZygpLFxuICAgIHZhbHVlU2hhcGU6IE0uc3RyaW5nKClcbiAgfSk7XG4gIGNvbnN0IG1ha2VEZW5vbUtleSA9IChkZW5vbSwgc3JjQ2hhaW5OYW1lKSA9PiBgJHtzcmNDaGFpbk5hbWV9OiR7ZGVub219YDtcbiAgY29uc3QgcmVzb2x2ZUNvc21vc0NoYWluSWQgPSAoYWRkcmVzcykgPT4ge1xuICAgIGNvbnN0IHByZWZpeCA9IGdldEJlY2gzMlByZWZpeChhZGRyZXNzKTtcbiAgICBpZiAoIWJlY2gzMlByZWZpeFRvQ2hhaW5OYW1lLmhhcyhwcmVmaXgpKSB7XG4gICAgICB0aHJvdyBtYWtlRXJyb3IoYENoYWluIGluZm8gbm90IGZvdW5kIGZvciBiZWNoMzJQcmVmaXggJHtxdW90ZShwcmVmaXgpfWApO1xuICAgIH1cbiAgICBjb25zdCBjaGFpbk5hbWUgPSBiZWNoMzJQcmVmaXhUb0NoYWluTmFtZS5nZXQocHJlZml4KTtcbiAgICBjb25zdCB7IGNoYWluSWQgfSA9IChcbiAgICAgIC8qKiBAdHlwZSB7Q29zbW9zQ2hhaW5JbmZvfSAqL1xuICAgICAgY2hhaW5JbmZvcy5nZXQoY2hhaW5OYW1lKVxuICAgICk7XG4gICAgcmV0dXJuIGNoYWluSWQ7XG4gIH07XG4gIGNvbnN0IGxvb2t1cENoYWluSW5mbyA9IHZvd1Rvb2xzLnJldHJ5YWJsZShcbiAgICB6b25lLFxuICAgIFwibG9va3VwQ2hhaW5JbmZvXCIsXG4gICAgLyoqIEBwYXJhbSB7c3RyaW5nfSBjaGFpbk5hbWUgKi9cbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXggLS0gVE9ETyBtb3JlIGV4YWN0IHJ1bGVzIGZvciB2b3cgYmVzdCBwcmFjdGljZXMqL1xuICAgIGFzeW5jIChjaGFpbk5hbWUpID0+IHtcbiAgICAgIGF3YWl0IG51bGw7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBjaGFpbkluZm8gPSBhd2FpdCBFKGFnb3JpY05hbWVzKS5sb29rdXAoSHViTmFtZS5DaGFpbiwgY2hhaW5OYW1lKTtcbiAgICAgICAgaWYgKCFjaGFpbkluZm9zLmhhcyhjaGFpbk5hbWUpKSB7XG4gICAgICAgICAgY2hhaW5JbmZvcy5pbml0KGNoYWluTmFtZSwgY2hhaW5JbmZvKTtcbiAgICAgICAgICBjaGFpbklkVG9DaGFpbk5hbWUuaW5pdChjYWlwSWRGcm9tSW5mbyhjaGFpbkluZm8pLCBjaGFpbk5hbWUpO1xuICAgICAgICAgIGlmIChjaGFpbkluZm8uYmVjaDMyUHJlZml4KSB7XG4gICAgICAgICAgICBiZWNoMzJQcmVmaXhUb0NoYWluTmFtZS5pbml0KGNoYWluSW5mby5iZWNoMzJQcmVmaXgsIGNoYWluTmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGFpbkluZm87XG4gICAgICB9IGNhdGNoIChlMikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwibG9va3VwQ2hhaW5JbmZvXCIsIGNoYWluTmFtZSwgXCJlcnJvclwiLCBlMik7XG4gICAgICAgIHRocm93IG1ha2VFcnJvcihgY2hhaW4gbm90IGZvdW5kOiR7Y2hhaW5OYW1lfWApO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbiAgY29uc3QgbG9va3VwQ29ubmVjdGlvbkluZm8gPSB2b3dUb29scy5yZXRyeWFibGUoXG4gICAgem9uZSxcbiAgICBcImxvb2t1cENvbm5lY3Rpb25JbmZvXCIsXG4gICAgLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY2hhaW5JZDFcbiAqIEBwYXJhbSB7c3RyaW5nfSBjaGFpbklkMlxuICovXG4gICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4IC0tIFRPRE8gbW9yZSBleGFjdCBydWxlcyBmb3Igdm93IGJlc3QgcHJhY3RpY2VzKi9cbiAgICBhc3luYyAoY2hhaW5JZDEsIGNoYWluSWQyKSA9PiB7XG4gICAgICBhd2FpdCBudWxsO1xuICAgICAgY29uc3Qga2V5ID0gY29ubmVjdGlvbktleShjaGFpbklkMSwgY2hhaW5JZDIpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29ubmVjdGlvbkluZm8gPSBhd2FpdCBFKGFnb3JpY05hbWVzKS5sb29rdXAoXG4gICAgICAgICAgSHViTmFtZS5DaGFpbkNvbm5lY3Rpb24sXG4gICAgICAgICAga2V5XG4gICAgICAgICk7XG4gICAgICAgIGlmICghY29ubmVjdGlvbkluZm9zLmhhcyhrZXkpKSB7XG4gICAgICAgICAgY29ubmVjdGlvbkluZm9zLmluaXQoa2V5LCBjb25uZWN0aW9uSW5mbyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlbm9ybWFsaXplQ29ubmVjdGlvbkluZm8oY2hhaW5JZDEsIGNoYWluSWQyLCBjb25uZWN0aW9uSW5mbyk7XG4gICAgICB9IGNhdGNoIChlMikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwibG9va3VwQ29ubmVjdGlvbkluZm9cIiwgY2hhaW5JZDEsIGNoYWluSWQyLCBcImVycm9yXCIsIGUyKTtcbiAgICAgICAgdGhyb3cgbWFrZUVycm9yKGBjb25uZWN0aW9uIG5vdCBmb3VuZDogJHtjaGFpbklkMX08LT4ke2NoYWluSWQyfWApO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbiAgY29uc3QgbG9va3VwQ2hhaW5zQW5kQ29ubmVjdGlvbiA9IHZvd1Rvb2xzLnJldHJ5YWJsZShcbiAgICB6b25lLFxuICAgIFwibG9va3VwQ2hhaW5zQW5kQ29ubmVjdGlvblwiLFxuICAgIC8qKlxuICogQHRlbXBsYXRlIHtzdHJpbmd9IEMxXG4gKiBAdGVtcGxhdGUge3N0cmluZ30gQzJcbiAqIEBwYXJhbSB7QzF9IHByaW1hcnlOYW1lXG4gKiBAcGFyYW0ge0MyfSBjb3VudGVyTmFtZVxuICogQHJldHVybnMge1Byb21pc2U8XG4gKiAgIFtcbiAqICAgICBBY3R1YWxDaGFpbkluZm88QzE+LFxuICogICAgIEFjdHVhbENoYWluSW5mbzxDMj4sXG4gKiAgICAgSUJDQ29ubmVjdGlvbkluZm8gfCB1bmRlZmluZWQsXG4gKiAgIF1cbiAqID59XG4gKi9cbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXggLS0gVE9ETyBtb3JlIGV4YWN0IHJ1bGVzIGZvciB2b3cgYmVzdCBwcmFjdGljZXMqL1xuICAgIGFzeW5jIChwcmltYXJ5TmFtZSwgY291bnRlck5hbWUpID0+IHtcbiAgICAgIGNvbnN0IFtwcmltYXJ5LCBjb3VudGVyXSA9IGF3YWl0IHZvd1Rvb2xzLmFzUHJvbWlzZShcbiAgICAgICAgdm93VG9vbHMuYWxsVm93cyhbXG4gICAgICAgICAgY2hhaW5IdWIuZ2V0Q2hhaW5JbmZvKHByaW1hcnlOYW1lKSxcbiAgICAgICAgICBjaGFpbkh1Yi5nZXRDaGFpbkluZm8oY291bnRlck5hbWUpXG4gICAgICAgIF0pXG4gICAgICApO1xuICAgICAgY29uc3QgY29ubmVjdGlvbkluZm8gPSBwcmltYXJ5Lm5hbWVzcGFjZSA9PT0gXCJjb3Ntb3NcIiAmJiBjb3VudGVyLm5hbWVzcGFjZSA9PT0gXCJjb3Ntb3NcIiA/IGF3YWl0IHZvd1Rvb2xzLmFzUHJvbWlzZShcbiAgICAgICAgY2hhaW5IdWIuZ2V0Q29ubmVjdGlvbkluZm8ocHJpbWFyeSwgY291bnRlcilcbiAgICAgICkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAvKipcbiAqIEB0eXBlIHtbXG4gKiAgIEFjdHVhbENoYWluSW5mbzxDMT4sXG4gKiAgIEFjdHVhbENoYWluSW5mbzxDMj4sXG4gKiAgIElCQ0Nvbm5lY3Rpb25JbmZvIHwgdW5kZWZpbmVkLFxuICogXX1cbiAqL1xuICAgICAgICBbcHJpbWFyeSwgY291bnRlciwgY29ubmVjdGlvbkluZm9dXG4gICAgICApO1xuICAgIH1cbiAgKTtcbiAgY29uc3QgY2hhaW5IdWIgPSB6b25lLmV4byhcIkNoYWluSHViXCIsIENoYWluSHViSSwge1xuICAgIC8qKlxuICogUmVnaXN0ZXIgYSBuZXcgY2hhaW4uIFRoZSBuYW1lIHdpbGwgb3ZlcnJpZGUgYSBuYW1lIGluIHdlbGwga25vd24gY2hhaW5cbiAqIG5hbWVzLlxuICpcbiAqIElmIGEgZHVyYWJsZSB6b25lIHdhcyBub3QgcHJvdmlkZWQsIHJlZ2lzdHJhdGlvbiB3aWxsIG5vdCBzdXJ2aXZlIGFcbiAqIHJlaW5jYXJuYXRpb24gb2YgdGhlIHZhdC4gVGhlbiBpZiB0aGUgY2hhaW4gaXMgbm90IHlldCBpbiB0aGUgd2VsbCBrbm93blxuICogbmFtZXMgYXQgdGhhdCBwb2ludCwgaXQgd2lsbCBoYXZlIHRvIGJlIHJlZ2lzdGVyZWQgYWdhaW4uIEluIGFuIHVuY2hhbmdlZFxuICogY29udHJhY3QgYHN0YXJ0YCB0aGUgY2FsbCB3aWxsIGhhcHBlbiBhZ2FpbiBuYXR1cmFsbHkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7Q2hhaW5JbmZvfSBjaGFpbkluZm9cbiAqL1xuICAgIHJlZ2lzdGVyQ2hhaW4obmFtZSwgY2hhaW5JbmZvKSB7XG4gICAgICBjaGFpbkluZm9zLmluaXQobmFtZSwgY2hhaW5JbmZvKTtcbiAgICAgIGNoYWluSWRUb0NoYWluTmFtZS5pbml0KGNhaXBJZEZyb21JbmZvKGNoYWluSW5mbyksIG5hbWUpO1xuICAgICAgaWYgKGNoYWluSW5mby5uYW1lc3BhY2UgPT09IFwiY29zbW9zXCIgJiYgY2hhaW5JbmZvLmJlY2gzMlByZWZpeCkge1xuICAgICAgICBiZWNoMzJQcmVmaXhUb0NoYWluTmFtZS5pbml0KGNoYWluSW5mby5iZWNoMzJQcmVmaXgsIG5hbWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gKiBVcGRhdGUgY2hhaW4gaW5mbyBieSBjb21wbGV0ZWx5IHJlcGxhY2luZyBleGlzdGluZyBlbnRyeVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjaGFpbk5hbWUgLSBOYW1lIG9mIHRoZSBjaGFpbiB0byB1cGRhdGVcbiAqIEBwYXJhbSB7Q2hhaW5JbmZvfSBjaGFpbkluZm8gLSBOZXcgY2hhaW4gaW5mb1xuICogQHRocm93cyB7RXJyb3J9IElmIGNoYWluIG5vdCByZWdpc3RlcmVkXG4gKi9cbiAgICB1cGRhdGVDaGFpbihjaGFpbk5hbWUsIGNoYWluSW5mbykge1xuICAgICAgaWYgKCFjaGFpbkluZm9zLmhhcyhjaGFpbk5hbWUpKSB7XG4gICAgICAgIHRocm93IG1ha2VFcnJvcihgQ2hhaW4gJHtxdW90ZShjaGFpbk5hbWUpfSBub3QgcmVnaXN0ZXJlZGApO1xuICAgICAgfVxuICAgICAgY29uc3Qgb2xkSW5mbyA9IGNoYWluSW5mb3MuZ2V0KGNoYWluTmFtZSk7XG4gICAgICBpZiAoY2hhaW5JZFRvQ2hhaW5OYW1lLmhhcyhjYWlwSWRGcm9tSW5mbyhvbGRJbmZvKSkpIHtcbiAgICAgICAgY2hhaW5JZFRvQ2hhaW5OYW1lLmRlbGV0ZShjYWlwSWRGcm9tSW5mbyhvbGRJbmZvKSk7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIC8qKiBAdHlwZSB7Q29zbW9zQ2hhaW5JbmZvfSAqL1xuICAgICAgICBvbGRJbmZvLmJlY2gzMlByZWZpeFxuICAgICAgKSB7XG4gICAgICAgIGJlY2gzMlByZWZpeFRvQ2hhaW5OYW1lLmRlbGV0ZShcbiAgICAgICAgICAvKiogQHR5cGUge0Nvc21vc0NoYWluSW5mb30gKi9cbiAgICAgICAgICBvbGRJbmZvLmJlY2gzMlByZWZpeFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY2hhaW5JbmZvcy5zZXQoY2hhaW5OYW1lLCBjaGFpbkluZm8pO1xuICAgICAgY2hhaW5JZFRvQ2hhaW5OYW1lLmluaXQoY2FpcElkRnJvbUluZm8oY2hhaW5JbmZvKSwgY2hhaW5OYW1lKTtcbiAgICAgIGlmIChcbiAgICAgICAgLyoqIEB0eXBlIHtDb3Ntb3NDaGFpbkluZm99ICovXG4gICAgICAgIGNoYWluSW5mby5iZWNoMzJQcmVmaXhcbiAgICAgICkge1xuICAgICAgICBiZWNoMzJQcmVmaXhUb0NoYWluTmFtZS5pbml0KFxuICAgICAgICAgIC8qKiBAdHlwZSB7Q29zbW9zQ2hhaW5JbmZvfSAqL1xuICAgICAgICAgIGNoYWluSW5mby5iZWNoMzJQcmVmaXgsXG4gICAgICAgICAgY2hhaW5OYW1lXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAqIEB0ZW1wbGF0ZSB7c3RyaW5nfSBLXG4gKiBAcGFyYW0ge0t9IGNoYWluTmFtZVxuICogQHJldHVybnMge1ZvdzxBY3R1YWxDaGFpbkluZm88Sz4+fVxuICovXG4gICAgZ2V0Q2hhaW5JbmZvKGNoYWluTmFtZSkge1xuICAgICAgY2hhaW5OYW1lLmluY2x1ZGVzKFwiOlwiKSAmJiB0aHJvd1JlZGFjdGVkYCR7Y2hhaW5OYW1lfSBtdXN0IGJlIGEgYmFyZSBjaGFpbiBuYW1lLiBNYXliZSB0cnkgZ2V0Q2hhaW5JbmZvQnlDaGFpbklkKClgO1xuICAgICAgaWYgKGNoYWluSW5mb3MuaGFzKGNoYWluTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAvKiogQHR5cGUge1ZvdzxBY3R1YWxDaGFpbkluZm88Sz4+fSAqL1xuICAgICAgICAgIHZvd1Rvb2xzLmFzVm93KFxuICAgICAgICAgICAgKCkgPT4gKFxuICAgICAgICAgICAgICAvKiBAdHMtZXhwZWN0LWVycm9yIFR5cGUgJ0NoYWluSW5mbycgaXMgbm90IGFzc2lnbmFibGUgdG8gdHlwZSAnQ29zbW9zQ2hhaW5JbmZvIHwgVm93PENvc21vc0NoYWluSW5mbz4gfCBQcm9taXNlVm93PENvc21vc0NoYWluSW5mbz4nLiovXG4gICAgICAgICAgICAgIGNoYWluSW5mb3MuZ2V0KGNoYWluTmFtZSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG9va3VwQ2hhaW5JbmZvKGNoYWluTmFtZSk7XG4gICAgfSxcbiAgICAvKipcbiAqIEBwYXJhbSB7Q2FpcENoYWluSWR9IGNoYWluSWRcbiAqIEByZXR1cm5zIHtDaGFpbkluZm99XG4gKi9cbiAgICBnZXRDaGFpbkluZm9CeUNoYWluSWQoY2hhaW5JZCkge1xuICAgICAgY2hhaW5JZFRvQ2hhaW5OYW1lLmhhcyhjaGFpbklkKSB8fCB0aHJvd1JlZGFjdGVkYENoYWluIG5hbWUgbm90IGZvdW5kIGZvciAke3F1b3RlKGNoYWluSWQpfWA7XG4gICAgICBjb25zdCBjaGFpbk5hbWUgPSBjaGFpbklkVG9DaGFpbk5hbWUuZ2V0KGNoYWluSWQpO1xuICAgICAgY2hhaW5JbmZvcy5oYXMoY2hhaW5OYW1lKSB8fCB0aHJvd1JlZGFjdGVkYENoYWluIEluZm8gbm90IGZvdW5kIGZvciAke3F1b3RlKGNoYWluSWQpfWA7XG4gICAgICByZXR1cm4gY2hhaW5JbmZvcy5nZXQoY2hhaW5OYW1lKTtcbiAgICB9LFxuICAgIC8qKlxuICogUmVnaXN0ZXIgaW5mb3JtYXRpb24gZm9yIGEgQ29zbW9zIGNoYWluXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHByaW1hcnlDaGFpbklkXG4gKiBAcGFyYW0ge3N0cmluZ30gY291bnRlcnBhcnR5Q2hhaW5JZFxuICogQHBhcmFtIHtJQkNDb25uZWN0aW9uSW5mb30gY29ubmVjdGlvbkluZm8gZnJvbSBwcmltYXJ5IHRvIGNvdW50ZXJwYXJ0eVxuICovXG4gICAgcmVnaXN0ZXJDb25uZWN0aW9uKHByaW1hcnlDaGFpbklkLCBjb3VudGVycGFydHlDaGFpbklkLCBjb25uZWN0aW9uSW5mbykge1xuICAgICAgY29uc3QgW2tleSwgbm9ybWFsaXplZF0gPSBub3JtYWxpemVDb25uZWN0aW9uSW5mbyhcbiAgICAgICAgcHJpbWFyeUNoYWluSWQsXG4gICAgICAgIGNvdW50ZXJwYXJ0eUNoYWluSWQsXG4gICAgICAgIGNvbm5lY3Rpb25JbmZvXG4gICAgICApO1xuICAgICAgY29ubmVjdGlvbkluZm9zLmluaXQoa2V5LCBub3JtYWxpemVkKTtcbiAgICB9LFxuICAgIC8qKlxuICogVXBkYXRlIGNvbm5lY3Rpb24gaW5mbyBieSBjb21wbGV0ZWx5IHJlcGxhY2luZyBleGlzdGluZyBlbnRyeVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwcmltYXJ5Q2hhaW5JZCAtIENvc21vcyBjaGFpbklkIG9mIHByaW1hcnkgY2hhaW5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb3VudGVycGFydHlDaGFpbklkIC0gQ29zbW9zIGNoYWluSWQgb2YgY291bnRlcnBhcnR5XG4gKiAgIGNoYWluXG4gKiBAcGFyYW0ge0lCQ0Nvbm5lY3Rpb25JbmZvfSBjb25uZWN0aW9uSW5mbyAtIE5ldyBjb25uZWN0aW9uIGluZm9cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBjb25uZWN0aW9uIG5vdCByZWdpc3RlcmVkXG4gKi9cbiAgICB1cGRhdGVDb25uZWN0aW9uKHByaW1hcnlDaGFpbklkLCBjb3VudGVycGFydHlDaGFpbklkLCBjb25uZWN0aW9uSW5mbykge1xuICAgICAgY29uc3Qga2V5ID0gY29ubmVjdGlvbktleShwcmltYXJ5Q2hhaW5JZCwgY291bnRlcnBhcnR5Q2hhaW5JZCk7XG4gICAgICBpZiAoIWNvbm5lY3Rpb25JbmZvcy5oYXMoa2V5KSkge1xuICAgICAgICB0aHJvdyBtYWtlRXJyb3IoXG4gICAgICAgICAgYENvbm5lY3Rpb24gJHtxdW90ZShwcmltYXJ5Q2hhaW5JZCl9PC0+JHtxdW90ZShjb3VudGVycGFydHlDaGFpbklkKX0gbm90IHJlZ2lzdGVyZWRgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCBbXywgbm9ybWFsaXplZEluZm9dID0gbm9ybWFsaXplQ29ubmVjdGlvbkluZm8oXG4gICAgICAgIHByaW1hcnlDaGFpbklkLFxuICAgICAgICBjb3VudGVycGFydHlDaGFpbklkLFxuICAgICAgICBjb25uZWN0aW9uSW5mb1xuICAgICAgKTtcbiAgICAgIGNvbm5lY3Rpb25JbmZvcy5zZXQoa2V5LCBub3JtYWxpemVkSW5mbyk7XG4gICAgfSxcbiAgICAvKipcbiAqIEBwYXJhbSB7c3RyaW5nIHwgeyBjaGFpbklkOiBzdHJpbmcgfX0gcHJpbWFyeSB0aGUgcHJpbWFyeSBjaGFpblxuICogQHBhcmFtIHtzdHJpbmcgfCB7IGNoYWluSWQ6IHN0cmluZyB9fSBjb3VudGVyIHRoZSBjb3VudGVycGFydHkgY2hhaW5cbiAqIEByZXR1cm5zIHtWb3c8SUJDQ29ubmVjdGlvbkluZm8+fVxuICovXG4gICAgZ2V0Q29ubmVjdGlvbkluZm8ocHJpbWFyeSwgY291bnRlcikge1xuICAgICAgY29uc3QgcHJpbWFyeUlkID0gdHlwZW9mIHByaW1hcnkgPT09IFwic3RyaW5nXCIgPyBwcmltYXJ5IDogcHJpbWFyeS5jaGFpbklkO1xuICAgICAgY29uc3QgY291bnRlcklkID0gdHlwZW9mIGNvdW50ZXIgPT09IFwic3RyaW5nXCIgPyBjb3VudGVyIDogY291bnRlci5jaGFpbklkO1xuICAgICAgY29uc3Qga2V5ID0gY29ubmVjdGlvbktleShwcmltYXJ5SWQsIGNvdW50ZXJJZCk7XG4gICAgICBpZiAoY29ubmVjdGlvbkluZm9zLmhhcyhrZXkpKSB7XG4gICAgICAgIHJldHVybiB2b3dUb29scy5hc1ZvdyhcbiAgICAgICAgICAoKSA9PiBkZW5vcm1hbGl6ZUNvbm5lY3Rpb25JbmZvKFxuICAgICAgICAgICAgcHJpbWFyeUlkLFxuICAgICAgICAgICAgY291bnRlcklkLFxuICAgICAgICAgICAgY29ubmVjdGlvbkluZm9zLmdldChrZXkpXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvb2t1cENvbm5lY3Rpb25JbmZvKHByaW1hcnlJZCwgY291bnRlcklkKTtcbiAgICB9LFxuICAgIC8qKlxuICogQHRlbXBsYXRlIHtzdHJpbmd9IEMxXG4gKiBAdGVtcGxhdGUge3N0cmluZ30gQzJcbiAqIEBwYXJhbSB7QzF9IHByaW1hcnlOYW1lIHRoZSBwcmltYXJ5IGNoYWluIG5hbWVcbiAqIEBwYXJhbSB7QzJ9IGNvdW50ZXJOYW1lIHRoZSBjb3VudGVycGFydHkgY2hhaW4gbmFtZVxuICogQHJldHVybnMge1ZvdzxcbiAqICAgW0FjdHVhbENoYWluSW5mbzxDMT4sIEFjdHVhbENoYWluSW5mbzxDMj4sIElCQ0Nvbm5lY3Rpb25JbmZvXVxuICogPn1cbiAqL1xuICAgIGdldENoYWluc0FuZENvbm5lY3Rpb24ocHJpbWFyeU5hbWUsIGNvdW50ZXJOYW1lKSB7XG4gICAgICByZXR1cm4gbG9va3VwQ2hhaW5zQW5kQ29ubmVjdGlvbihwcmltYXJ5TmFtZSwgY291bnRlck5hbWUpO1xuICAgIH0sXG4gICAgLyoqXG4gKiBSZWdpc3RlciBhbiBhc3NldCB0aGF0IG1heSBiZSBoZWxkIG9uIGEgY2hhaW4gb3RoZXIgdGhhbiB0aGUgaXNzdWluZ1xuICogY2hhaW4uXG4gKlxuICogQHBhcmFtIHtEZW5vbX0gZGVub20gLSBvbiB0aGUgaG9sZGluZyBjaGFpbiwgd2hvc2UgbmFtZSBpcyBnaXZlbiBpblxuICogICBgZGV0YWlsLmNoYWluTmFtZWBcbiAqIEBwYXJhbSB7RGVub21EZXRhaWx9IGRldGFpbCAtIGNoYWluTmFtZSBhbmQgYmFzZU5hbWUgbXVzdCBiZSByZWdpc3RlcmVkXG4gKi9cbiAgICByZWdpc3RlckFzc2V0KGRlbm9tLCBkZXRhaWwpIHtcbiAgICAgIGNvbnN0IHsgY2hhaW5OYW1lLCBiYXNlTmFtZSB9ID0gZGV0YWlsO1xuICAgICAgY2hhaW5JbmZvcy5oYXMoY2hhaW5OYW1lKSB8fCB0aHJvd1JlZGFjdGVkYG11c3QgcmVnaXN0ZXIgY2hhaW4gJHtxdW90ZShjaGFpbk5hbWUpfSBmaXJzdGA7XG4gICAgICBjaGFpbkluZm9zLmhhcyhiYXNlTmFtZSkgfHwgdGhyb3dSZWRhY3RlZGBtdXN0IHJlZ2lzdGVyIGNoYWluICR7cXVvdGUoYmFzZU5hbWUpfSBmaXJzdGA7XG4gICAgICBjb25zdCBkZW5vbUtleSA9IG1ha2VEZW5vbUtleShkZW5vbSwgZGV0YWlsLmNoYWluTmFtZSk7XG4gICAgICBkZW5vbURldGFpbHMuaGFzKGRlbm9tS2V5KSAmJiB0aHJvd1JlZGFjdGVkYGFscmVhZHkgcmVnaXN0ZXJlZCAke3F1b3RlKGRlbm9tKX0gb24gJHtxdW90ZShjaGFpbk5hbWUpfWA7XG4gICAgICBkZW5vbURldGFpbHMuaW5pdChkZW5vbUtleSwgZGV0YWlsKTtcbiAgICAgIGlmIChkZXRhaWwuYnJhbmQpIHtcbiAgICAgICAgY2hhaW5OYW1lID09PSBcImFnb3JpY1wiIHx8IHRocm93UmVkYWN0ZWRgYnJhbmRzIG9ubHkgcmVnaXN0ZXJhYmxlIGZvciBhZ29yaWMtaGVsZCBhc3NldHNgO1xuICAgICAgICBicmFuZERlbm9tcy5pbml0KGRldGFpbC5icmFuZCwgZGVub20pO1xuICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gKiBVcGRhdGUgYXNzZXQgaW5mbyBieSBjb21wbGV0ZWx5IHJlcGxhY2luZyBleGlzdGluZyBlbnRyeVxuICpcbiAqIEBwYXJhbSB7RGVub219IGRlbm9tIC0gRGVub20gb24gdGhlIGhvbGRpbmcgY2hhaW5cbiAqIEBwYXJhbSB7RGVub21EZXRhaWx9IGRldGFpbCAtIE5ldyBhc3NldCBkZXRhaWxzXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgYXNzZXQgbm90IHJlZ2lzdGVyZWQgb3IgcmVmZXJlbmNlZCBjaGFpbnMgbm90XG4gKiAgIHJlZ2lzdGVyZWRcbiAqL1xuICAgIHVwZGF0ZUFzc2V0KGRlbm9tLCBkZXRhaWwpIHtcbiAgICAgIGNvbnN0IHsgYmFzZU5hbWUsIGJyYW5kLCBjaGFpbk5hbWUgfSA9IGRldGFpbDtcbiAgICAgIGNvbnN0IGRlbm9tS2V5ID0gbWFrZURlbm9tS2V5KGRlbm9tLCBjaGFpbk5hbWUpO1xuICAgICAgaWYgKCFkZW5vbURldGFpbHMuaGFzKGRlbm9tS2V5KSkge1xuICAgICAgICB0aHJvdyBtYWtlRXJyb3IoYEFzc2V0ICR7cXVvdGUoZGVub20pfSBvbiAke3F1b3RlKGNoYWluTmFtZSl9IG5vdCByZWdpc3RlcmVkYCk7XG4gICAgICB9XG4gICAgICBpZiAoIWNoYWluSW5mb3MuaGFzKGNoYWluTmFtZSkpIHtcbiAgICAgICAgdGhyb3cgbWFrZUVycm9yKGBDaGFpbiAke3F1b3RlKGNoYWluTmFtZSl9IG5vdCByZWdpc3RlcmVkYCk7XG4gICAgICB9XG4gICAgICBpZiAoIWNoYWluSW5mb3MuaGFzKGJhc2VOYW1lKSkge1xuICAgICAgICB0aHJvdyBtYWtlRXJyb3IoYENoYWluICR7cXVvdGUoYmFzZU5hbWUpfSBub3QgcmVnaXN0ZXJlZGApO1xuICAgICAgfVxuICAgICAgaWYgKGJyYW5kKSB7XG4gICAgICAgIGlmIChjaGFpbk5hbWUgIT09IFwiYWdvcmljXCIpIHtcbiAgICAgICAgICB0aHJvdyBtYWtlRXJyb3IoXCJCcmFuZHMgb25seSByZWdpc3RlcmFibGUgZm9yIGFnb3JpYy1oZWxkIGFzc2V0c1wiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3Qgb2xkRGV0YWlsID0gZGVub21EZXRhaWxzLmdldChkZW5vbUtleSk7XG4gICAgICBpZiAob2xkRGV0YWlsLmJyYW5kKSB7XG4gICAgICAgIGJyYW5kRGVub21zLmRlbGV0ZShvbGREZXRhaWwuYnJhbmQpO1xuICAgICAgfVxuICAgICAgZGVub21EZXRhaWxzLnNldChkZW5vbUtleSwgZGV0YWlsKTtcbiAgICAgIGlmIChicmFuZCkge1xuICAgICAgICBicmFuZERlbm9tcy5pbml0KGJyYW5kLCBkZW5vbSk7XG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAqIFJldHJpZXZlIGhvbGRpbmcsIGlzc3VpbmcgY2hhaW4gbmFtZXMgZXRjLiBmb3IgYSBkZW5vbS5cbiAqXG4gKiBAcGFyYW0ge0Rlbm9tfSBkZW5vbVxuICogQHBhcmFtIHtzdHJpbmd9IHNyY0NoYWluTmFtZSAtIHRoZSBjaGFpbk5hbWUgdGhlIGRlbm9tIGlzIGhlbGQgb25cbiAqIEByZXR1cm5zIHtEZW5vbURldGFpbCB8IHVuZGVmaW5lZH1cbiAqL1xuICAgIGdldEFzc2V0KGRlbm9tLCBzcmNDaGFpbk5hbWUpIHtcbiAgICAgIGNvbnN0IGRlbm9tS2V5ID0gbWFrZURlbm9tS2V5KGRlbm9tLCBzcmNDaGFpbk5hbWUpO1xuICAgICAgaWYgKGRlbm9tRGV0YWlscy5oYXMoZGVub21LZXkpKSB7XG4gICAgICAgIHJldHVybiBkZW5vbURldGFpbHMuZ2V0KGRlbm9tS2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfSxcbiAgICAvKipcbiAqIFJldHJpZXZlIGRlbm9tIChzdHJpbmcpIGZvciBhIEJyYW5kLlxuICpcbiAqIEBwYXJhbSB7QnJhbmR9IGJyYW5kXG4gKiBAcmV0dXJucyB7RGVub20gfCB1bmRlZmluZWR9XG4gKi9cbiAgICBnZXREZW5vbShicmFuZCkge1xuICAgICAgaWYgKGJyYW5kRGVub21zLmhhcyhicmFuZCkpIHtcbiAgICAgICAgcmV0dXJuIGJyYW5kRGVub21zLmdldChicmFuZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH0sXG4gICAgLyoqXG4gKiBAcGFyYW0ge0FjY291bnRJZCB8IEJlY2gzMkFkZHJlc3N9IHBhcnRpYWxJZCBDQUlQLTEwIGFjY291bnQgSUQgb3IgYVxuICogICBDb3Ntb3MgYmVjaDMyIGFkZHJlc3NcbiAqIEByZXR1cm5zIHtBY2NvdW50SWR9XG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgY2hhaW4gaW5mbyBub3QgZm91bmQgZm9yIGJlY2gzMlByZWZpeFxuICovXG4gICAgcmVzb2x2ZUFjY291bnRJZChwYXJ0aWFsSWQpIHtcbiAgICAgIGlmIChwYXJ0aWFsSWQuc3BsaXQoXCI6XCIpLmxlbmd0aCA9PT0gMykge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIC8qKiBAdHlwZSB7QWNjb3VudElkfSAqL1xuICAgICAgICAgIHBhcnRpYWxJZFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY29uc3QgY29zbW9zQ2hhaW5JZCA9IHJlc29sdmVDb3Ntb3NDaGFpbklkKFxuICAgICAgICAvKiogQHR5cGUge0JlY2gzMkFkZHJlc3N9ICovXG4gICAgICAgIHBhcnRpYWxJZFxuICAgICAgKTtcbiAgICAgIHJldHVybiBgY29zbW9zOiR7Y29zbW9zQ2hhaW5JZH06JHtwYXJ0aWFsSWR9YDtcbiAgICB9LFxuICAgIC8qKlxuICogTGlrZSB7QHNlZSByZXNvbHZlQWNjb3VudElkfSBidXQgYWx3YXlzIHJldHVybnMgYSBDb3Ntb3NDaGFpbkFkZHJlc3MuXG4gKlxuICogQHBhcmFtIHtBY2NvdW50SWRBcmcgfCBCZWNoMzJBZGRyZXNzfSBwYXJ0aWFsSWQgQ0FJUC0xMCBhY2NvdW50IElEIG9yIGFcbiAqICAgQ29zbW9zIGJlY2gzMiBhZGRyZXNzXG4gKiBAcmV0dXJucyB7Q29zbW9zQ2hhaW5BZGRyZXNzfVxuICogQHRocm93cyB7RXJyb3J9IGlmIGNoYWluIGluZm8gbm90IGZvdW5kIGZvciBiZWNoMzJQcmVmaXhcbiAqL1xuICAgIGNvZXJjZUNvc21vc0FkZHJlc3MocGFydGlhbElkKSB7XG4gICAgICBpZiAodHlwZW9mIHBhcnRpYWxJZCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gcGFydGlhbElkO1xuICAgICAgfVxuICAgICAgY29uc3QgcGFydHMgPSBwYXJ0aWFsSWQuc3BsaXQoXCI6XCIpO1xuICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICBhc3NlcnQuZXF1YWwocGFydHNbMF0sIFwiY29zbW9zXCIpO1xuICAgICAgICByZXR1cm4gaGFyZGVuKHtcbiAgICAgICAgICBjaGFpbklkOiBwYXJ0c1sxXSxcbiAgICAgICAgICBlbmNvZGluZzogXCJiZWNoMzJcIixcbiAgICAgICAgICB2YWx1ZTogKFxuICAgICAgICAgICAgLyoqIEB0eXBlIHtCZWNoMzJBZGRyZXNzfSAqL1xuICAgICAgICAgICAgcGFydHNbMl1cbiAgICAgICAgICApXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgYXNzZXJ0LmVxdWFsKHBhcnRzLmxlbmd0aCwgMSk7XG4gICAgICBjb25zdCB2YWx1ZSA9IChcbiAgICAgICAgLyoqIEB0eXBlIHtCZWNoMzJBZGRyZXNzfSAqL1xuICAgICAgICBwYXJ0aWFsSWRcbiAgICAgICk7XG4gICAgICBjb25zdCBjb3Ntb3NDaGFpbklkID0gcmVzb2x2ZUNvc21vc0NoYWluSWQodmFsdWUpO1xuICAgICAgcmV0dXJuIGhhcmRlbih7XG4gICAgICAgIGNoYWluSWQ6IGNvc21vc0NoYWluSWQsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBlbmNvZGluZzogKFxuICAgICAgICAgIC8qKiBAdHlwZSB7Y29uc3R9ICovXG4gICAgICAgICAgXCJiZWNoMzJcIlxuICAgICAgICApXG4gICAgICB9KTtcbiAgICB9LFxuICAgIC8qKlxuICogRGV0ZXJtaW5lIHRoZSBJQkMgdHJhbnNmZXIgcm91dGUgZm9yIGEgZGVzdGluYXRpb24gYW5kIGFtb3VudCBnaXZlbiB0aGVcbiAqIGN1cnJlbnQgaG9sZGluZyBjaGFpbi5cbiAqXG4gKiBEb2VzIG5vdCBhY2NvdW50IGZvciByb3V0ZXMgd2l0aCBtb3JlIHRoYW4gMSBpbnRlcm1lZGlhcnkgaG9wIC0gdGhhdCBpcyxcbiAqIGl0IGNhbid0IHVud3JhcCBkZW5vbXMgdGhhdCB3ZXJlIGluY29ycmVjdGx5IHJvdXRlZC5cbiAqXG4gKiBYWFggY29uc2lkZXIgYWNjZXB0aW5nIEFtb3VudEFyZyAjMTA0NDlcbiAqXG4gKiBAcGFyYW0ge0FjY291bnRJZEFyZyB8IEJlY2gzMkFkZHJlc3N9IGRlc3RpbmF0aW9uXG4gKiBAcGFyYW0ge0Rlbm9tQW1vdW50fSBkZW5vbUFtb3VudFxuICogQHBhcmFtIHtzdHJpbmd9IHNyY0NoYWluTmFtZVxuICogQHBhcmFtIHtJQkNNc2dUcmFuc2Zlck9wdGlvbnNbJ2ZvcndhcmRPcHRzJ119IFtmb3J3YXJkT3B0c11cbiAqIEByZXR1cm5zIHtUcmFuc2ZlclJvdXRlfSBzaW5nbGUgaG9wLCBtdWx0aSBob3BcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiB1bmFibGUgdG8gZGV0ZXJtaW5lIHJvdXRlXG4gKi9cbiAgICBtYWtlVHJhbnNmZXJSb3V0ZShkZXN0aW5hdGlvbiwgZGVub21BbW91bnQsIHNyY0NoYWluTmFtZSwgZm9yd2FyZE9wdHMpIHtcbiAgICAgIGNoYWluSW5mb3MuaGFzKHNyY0NoYWluTmFtZSkgfHwgdGhyb3dSZWRhY3RlZGBjaGFpbiBpbmZvIG5vdCBmb3VuZCBmb3IgaG9sZGluZyBjaGFpbjogJHtxdW90ZShzcmNDaGFpbk5hbWUpfWA7XG4gICAgICBjb25zdCBkZW5vbURldGFpbCA9IGNoYWluSHViLmdldEFzc2V0KGRlbm9tQW1vdW50LmRlbm9tLCBzcmNDaGFpbk5hbWUpO1xuICAgICAgZGVub21EZXRhaWwgfHwgdGhyb3dSZWRhY3RlZGBubyBkZW5vbSBkZXRhaWwgZm9yOiAke3F1b3RlKGRlbm9tQW1vdW50LmRlbm9tKX0gb24gJHtxdW90ZShzcmNDaGFpbk5hbWUpfS4gZW5zdXJlIGl0IGlzIHJlZ2lzdGVyZWQgaW4gY2hhaW5IdWIuYDtcbiAgICAgIGNvbnN0IHsgYmFzZU5hbWUsIGNoYWluTmFtZSB9ID0gKFxuICAgICAgICAvKiogQHR5cGUge0Rlbm9tRGV0YWlsfSAqL1xuICAgICAgICBkZW5vbURldGFpbFxuICAgICAgKTtcbiAgICAgIGNoYWluTmFtZSA9PT0gc3JjQ2hhaW5OYW1lIHx8IHRocm93UmVkYWN0ZWRgY2Fubm90IHRyYW5zZmVyIGFzc2V0ICR7cXVvdGUoZGVub21BbW91bnQuZGVub20pfS4gaGVsZCBvbiAke3F1b3RlKGNoYWluTmFtZSl9IG5vdCAke3F1b3RlKHNyY0NoYWluTmFtZSl9LmA7XG4gICAgICBjaGFpbkluZm9zLmhhcyhiYXNlTmFtZSkgfHwgdGhyb3dSZWRhY3RlZGBjaGFpbiBpbmZvIG5vdCBmb3VuZCBmb3IgaXNzdWluZyBjaGFpbjogJHtxdW90ZShiYXNlTmFtZSl9YDtcbiAgICAgIGNvbnN0IGJhc2VDaGFpbkluZm8gPSBjaGFpbkluZm9zLmdldChiYXNlTmFtZSk7XG4gICAgICBpZiAoYmFzZUNoYWluSW5mby5uYW1lc3BhY2UgIT09IFwiY29zbW9zXCIpXG4gICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgT25seSBjb3Ntb3Mgc3VwcG9ydGVkOyBnb3QgJHtxdW90ZShiYXNlQ2hhaW5JbmZvLm5hbWVzcGFjZSl9YDtcbiAgICAgIGNvbnN0IHsgY2hhaW5JZDogYmFzZUNoYWluSWQsIHBmbUVuYWJsZWQgfSA9IGJhc2VDaGFpbkluZm87XG4gICAgICBjb25zdCBob2xkaW5nQ2hhaW5JbmZvID0gY2hhaW5JbmZvcy5nZXQoc3JjQ2hhaW5OYW1lKTtcbiAgICAgIGlmIChob2xkaW5nQ2hhaW5JbmZvLm5hbWVzcGFjZSAhPT0gXCJjb3Ntb3NcIikge1xuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYE9ubHkgY29zbW9zIHN1cHBvcnRlZDsgZ290ICR7cXVvdGUoaG9sZGluZ0NoYWluSW5mby5uYW1lc3BhY2UpfWA7XG4gICAgICB9XG4gICAgICBjb25zdCB7IGNoYWluSWQ6IGhvbGRpbmdDaGFpbklkIH0gPSBob2xkaW5nQ2hhaW5JbmZvO1xuICAgICAgY29uc3QgY29zbW9zRGVzdCA9IGNoYWluSHViLmNvZXJjZUNvc21vc0FkZHJlc3MoZGVzdGluYXRpb24pO1xuICAgICAgaWYgKGJhc2VDaGFpbklkID09PSBjb3Ntb3NEZXN0LmNoYWluSWQgfHwgYmFzZU5hbWUgPT09IHNyY0NoYWluTmFtZSkge1xuICAgICAgICBjb25zdCBjb25uS2V5ID0gY29ubmVjdGlvbktleShob2xkaW5nQ2hhaW5JZCwgY29zbW9zRGVzdC5jaGFpbklkKTtcbiAgICAgICAgY29ubmVjdGlvbkluZm9zLmhhcyhjb25uS2V5KSB8fCB0aHJvd1JlZGFjdGVkYG5vIGNvbm5lY3Rpb24gaW5mbyBmb3VuZCBmb3IgJHtob2xkaW5nQ2hhaW5JZH08LT4ke2Nvc21vc0Rlc3QuY2hhaW5JZH1gO1xuICAgICAgICBjb25zdCB7IHRyYW5zZmVyQ2hhbm5lbCB9ID0gZGVub3JtYWxpemVDb25uZWN0aW9uSW5mbyhcbiAgICAgICAgICBob2xkaW5nQ2hhaW5JZCxcbiAgICAgICAgICAvKiBmcm9tIGNoYWluIChwcmltYXJ5KSovXG4gICAgICAgICAgY29zbW9zRGVzdC5jaGFpbklkLFxuICAgICAgICAgIC8qIHRvIGNoYWluIChjb3VudGVycGFydHkpKi9cbiAgICAgICAgICBjb25uZWN0aW9uSW5mb3MuZ2V0KGNvbm5LZXkpXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBoYXJkZW4oe1xuICAgICAgICAgIHNvdXJjZVBvcnQ6IHRyYW5zZmVyQ2hhbm5lbC5wb3J0SWQsXG4gICAgICAgICAgc291cmNlQ2hhbm5lbDogdHJhbnNmZXJDaGFubmVsLmNoYW5uZWxJZCxcbiAgICAgICAgICB0b2tlbjoge1xuICAgICAgICAgICAgYW1vdW50OiBTdHJpbmcoZGVub21BbW91bnQudmFsdWUpLFxuICAgICAgICAgICAgZGVub206IGRlbm9tQW1vdW50LmRlbm9tXG4gICAgICAgICAgfSxcbiAgICAgICAgICByZWNlaXZlcjogY29zbW9zRGVzdC52YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHBmbUVuYWJsZWQgfHwgdGhyb3dSZWRhY3RlZGBwZm0gbm90IGVuYWJsZWQgb24gaXNzdWluZyBjaGFpbjogJHtxdW90ZShiYXNlTmFtZSl9YDtcbiAgICAgIGNvbnN0IGN1cnJUb0lzc3VlcktleSA9IGNvbm5lY3Rpb25LZXkoaG9sZGluZ0NoYWluSWQsIGJhc2VDaGFpbklkKTtcbiAgICAgIGNvbm5lY3Rpb25JbmZvcy5oYXMoY3VyclRvSXNzdWVyS2V5KSB8fCB0aHJvd1JlZGFjdGVkYG5vIGNvbm5lY3Rpb24gaW5mbyBmb3VuZCBmb3IgJHtob2xkaW5nQ2hhaW5JZH08LT4ke2Jhc2VDaGFpbklkfWA7XG4gICAgICBjb25zdCBpc3N1ZXJUb0Rlc3RLZXkgPSBjb25uZWN0aW9uS2V5KGJhc2VDaGFpbklkLCBjb3Ntb3NEZXN0LmNoYWluSWQpO1xuICAgICAgY29ubmVjdGlvbkluZm9zLmhhcyhpc3N1ZXJUb0Rlc3RLZXkpIHx8IHRocm93UmVkYWN0ZWRgbm8gY29ubmVjdGlvbiBpbmZvIGZvdW5kIGZvciAke2Jhc2VDaGFpbklkfTwtPiR7Y29zbW9zRGVzdC5jaGFpbklkfWA7XG4gICAgICBjb25zdCBjdXJyVG9Jc3N1ZXIgPSBkZW5vcm1hbGl6ZUNvbm5lY3Rpb25JbmZvKFxuICAgICAgICBob2xkaW5nQ2hhaW5JZCxcbiAgICAgICAgYmFzZUNoYWluSWQsXG4gICAgICAgIGNvbm5lY3Rpb25JbmZvcy5nZXQoY3VyclRvSXNzdWVyS2V5KVxuICAgICAgKTtcbiAgICAgIGNvbnN0IGlzc3VlclRvRGVzdCA9IGRlbm9ybWFsaXplQ29ubmVjdGlvbkluZm8oXG4gICAgICAgIGJhc2VDaGFpbklkLFxuICAgICAgICBjb3Ntb3NEZXN0LmNoYWluSWQsXG4gICAgICAgIGNvbm5lY3Rpb25JbmZvcy5nZXQoaXNzdWVyVG9EZXN0S2V5KVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHsgaW50ZXJtZWRpYXRlUmVjaXBpZW50LCAuLi5yZXN0IH0gPSBmb3J3YXJkT3B0cyA/PyB7fTtcbiAgICAgIGNvbnN0IGZvcndhcmRJbmZvID0gaGFyZGVuKHtcbiAgICAgICAgZm9yd2FyZDoge1xuICAgICAgICAgIHJlY2VpdmVyOiBjb3Ntb3NEZXN0LnZhbHVlLFxuICAgICAgICAgIHBvcnQ6IGlzc3VlclRvRGVzdC50cmFuc2ZlckNoYW5uZWwucG9ydElkLFxuICAgICAgICAgIGNoYW5uZWw6IGlzc3VlclRvRGVzdC50cmFuc2ZlckNoYW5uZWwuY2hhbm5lbElkLFxuICAgICAgICAgIC4uLkRlZmF1bHRQZm1UaW1lb3V0T3B0cyxcbiAgICAgICAgICAuLi4vKiogQHR5cGUge0ZvcndhcmRJbmZvfSAqL1xuICAgICAgICAgIHJlc3RcbiAgICAgICAgICAvKiB0aW1lb3V0IGFuZCByZXRyaWVzKi9cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gaGFyZGVuKHtcbiAgICAgICAgc291cmNlUG9ydDogY3VyclRvSXNzdWVyLnRyYW5zZmVyQ2hhbm5lbC5wb3J0SWQsXG4gICAgICAgIHNvdXJjZUNoYW5uZWw6IGN1cnJUb0lzc3Vlci50cmFuc2ZlckNoYW5uZWwuY2hhbm5lbElkLFxuICAgICAgICB0b2tlbjoge1xuICAgICAgICAgIGFtb3VudDogU3RyaW5nKGRlbm9tQW1vdW50LnZhbHVlKSxcbiAgICAgICAgICBkZW5vbTogZGVub21BbW91bnQuZGVub21cbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gKiBwdXJwb3NlbHkgdXNpbmcgaW52YWxpZCBiZWNoMzJcbiAqIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vY29zbW9zL2liYy1hcHBzL2Jsb2IvMjZmM2FkOGY1OGU0ZmZjNzc2OWM2NzY2Y2I0MmI5NTQxODFkYzEwMC9taWRkbGV3YXJlL3BhY2tldC1mb3J3YXJkLW1pZGRsZXdhcmUvUkVBRE1FLm1kI21pbmltYWwtZXhhbXBsZS0tLWNoYWluLWZvcndhcmQtYS1iLWN9XG4gKi9cbiAgICAgICAgcmVjZWl2ZXI6IGludGVybWVkaWF0ZVJlY2lwaWVudD8udmFsdWUgfHwgUEZNX1JFQ0VJVkVSLFxuICAgICAgICBmb3J3YXJkSW5mb1xuICAgICAgfSk7XG4gICAgfSxcbiAgICAvKipcbiAqIENoZWNrIGlmIHRoZSBDaGFpbkh1YiBpcyBlbXB0eSAobm8gY2hhaW5zLCBjb25uZWN0aW9ucywgb3IgYXNzZXRzXG4gKiByZWdpc3RlcmVkKVxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG4gICAgaXNFbXB0eSgpIHtcbiAgICAgIHJldHVybiBjaGFpbkluZm9zLmdldFNpemUoKSA9PT0gMCAmJiBjb25uZWN0aW9uSW5mb3MuZ2V0U2l6ZSgpID09PSAwICYmIGRlbm9tRGV0YWlscy5nZXRTaXplKCkgPT09IDA7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNoYWluSHViO1xufTtcblxuLyogLi4vY29zbWljLXByb3RvL2Rpc3QvY29kZWdlbi9jaXJjbGUvY2N0cC92MS90eC5qcyovXG5mdW5jdGlvbiByMygpIHtcbiAgcmV0dXJuIHsgZnJvbTogXCJcIiwgYW1vdW50OiBcIlwiLCBkZXN0aW5hdGlvbkRvbWFpbjogMCwgbWludFJlY2lwaWVudDogbmV3IFVpbnQ4QXJyYXkoKSwgYnVyblRva2VuOiBcIlwiIH07XG59XG52YXIgTXNnRGVwb3NpdEZvckJ1cm4gPSB7IHR5cGVVcmw6IFwiL2NpcmNsZS5jY3RwLnYxLk1zZ0RlcG9zaXRGb3JCdXJuXCIsIGVuY29kZTogKG4yLCBlMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKFwiXCIgIT09IG4yLmZyb20gJiYgZTIudWludDMyKDEwKS5zdHJpbmcobjIuZnJvbSksIFwiXCIgIT09IG4yLmFtb3VudCAmJiBlMi51aW50MzIoMTgpLnN0cmluZyhuMi5hbW91bnQpLCAwICE9PSBuMi5kZXN0aW5hdGlvbkRvbWFpbiAmJiBlMi51aW50MzIoMjQpLnVpbnQzMihuMi5kZXN0aW5hdGlvbkRvbWFpbiksIDAgIT09IG4yLm1pbnRSZWNpcGllbnQubGVuZ3RoICYmIGUyLnVpbnQzMigzNCkuYnl0ZXMobjIubWludFJlY2lwaWVudCksIFwiXCIgIT09IG4yLmJ1cm5Ub2tlbiAmJiBlMi51aW50MzIoNDIpLnN0cmluZyhuMi5idXJuVG9rZW4pLCBlMiksIGRlY29kZSh0NSwgZTIpIHtcbiAgY29uc3QgbzIgPSB0NSBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IHQ1IDogbmV3IEJpbmFyeVJlYWRlcih0NSk7XG4gIGxldCBpMyA9IHZvaWQgMCA9PT0gZTIgPyBvMi5sZW4gOiBvMi5wb3MgKyBlMjtcbiAgY29uc3QgczMgPSByMygpO1xuICBmb3IgKDsgbzIucG9zIDwgaTM7ICkge1xuICAgIGNvbnN0IG4yID0gbzIudWludDMyKCk7XG4gICAgc3dpdGNoIChuMiA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBzMy5mcm9tID0gbzIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBzMy5hbW91bnQgPSBvMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHMzLmRlc3RpbmF0aW9uRG9tYWluID0gbzIudWludDMyKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICBzMy5taW50UmVjaXBpZW50ID0gbzIuYnl0ZXMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDU6XG4gICAgICAgIHMzLmJ1cm5Ub2tlbiA9IG8yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG8yLnNraXBUeXBlKDcgJiBuMik7XG4gICAgfVxuICB9XG4gIHJldHVybiBzMztcbn0sIGZyb21KU09OOiAobjIpID0+ICh7IGZyb206IGlzU2V0KG4yLmZyb20pID8gU3RyaW5nKG4yLmZyb20pIDogXCJcIiwgYW1vdW50OiBpc1NldChuMi5hbW91bnQpID8gU3RyaW5nKG4yLmFtb3VudCkgOiBcIlwiLCBkZXN0aW5hdGlvbkRvbWFpbjogaXNTZXQobjIuZGVzdGluYXRpb25Eb21haW4pID8gTnVtYmVyKG4yLmRlc3RpbmF0aW9uRG9tYWluKSA6IDAsIG1pbnRSZWNpcGllbnQ6IGlzU2V0KG4yLm1pbnRSZWNpcGllbnQpID8gZGVjb2RlQmFzZTY0KG4yLm1pbnRSZWNpcGllbnQpIDogbmV3IFVpbnQ4QXJyYXkoKSwgYnVyblRva2VuOiBpc1NldChuMi5idXJuVG9rZW4pID8gU3RyaW5nKG4yLmJ1cm5Ub2tlbikgOiBcIlwiIH0pLCB0b0pTT04objIpIHtcbiAgY29uc3QgdDUgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gbjIuZnJvbSAmJiAodDUuZnJvbSA9IG4yLmZyb20pLCB2b2lkIDAgIT09IG4yLmFtb3VudCAmJiAodDUuYW1vdW50ID0gbjIuYW1vdW50KSwgdm9pZCAwICE9PSBuMi5kZXN0aW5hdGlvbkRvbWFpbiAmJiAodDUuZGVzdGluYXRpb25Eb21haW4gPSBNYXRoLnJvdW5kKG4yLmRlc3RpbmF0aW9uRG9tYWluKSksIHZvaWQgMCAhPT0gbjIubWludFJlY2lwaWVudCAmJiAodDUubWludFJlY2lwaWVudCA9IGVuY29kZUJhc2U2NCh2b2lkIDAgIT09IG4yLm1pbnRSZWNpcGllbnQgPyBuMi5taW50UmVjaXBpZW50IDogbmV3IFVpbnQ4QXJyYXkoKSkpLCB2b2lkIDAgIT09IG4yLmJ1cm5Ub2tlbiAmJiAodDUuYnVyblRva2VuID0gbjIuYnVyblRva2VuKSwgdDU7XG59LCBmcm9tUGFydGlhbChuMikge1xuICBjb25zdCB0NSA9IHIzKCk7XG4gIHJldHVybiB0NS5mcm9tID0gbjIuZnJvbSA/PyBcIlwiLCB0NS5hbW91bnQgPSBuMi5hbW91bnQgPz8gXCJcIiwgdDUuZGVzdGluYXRpb25Eb21haW4gPSBuMi5kZXN0aW5hdGlvbkRvbWFpbiA/PyAwLCB0NS5taW50UmVjaXBpZW50ID0gbjIubWludFJlY2lwaWVudCA/PyBuZXcgVWludDhBcnJheSgpLCB0NS5idXJuVG9rZW4gPSBuMi5idXJuVG9rZW4gPz8gXCJcIiwgdDU7XG59LCBmcm9tUHJvdG9Nc2c6IChuMikgPT4gTXNnRGVwb3NpdEZvckJ1cm4uZGVjb2RlKG4yLnZhbHVlKSwgdG9Qcm90bzogKG4yKSA9PiBNc2dEZXBvc2l0Rm9yQnVybi5lbmNvZGUobjIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAobjIpID0+ICh7IHR5cGVVcmw6IFwiL2NpcmNsZS5jY3RwLnYxLk1zZ0RlcG9zaXRGb3JCdXJuXCIsIHZhbHVlOiBNc2dEZXBvc2l0Rm9yQnVybi5lbmNvZGUobjIpLmZpbmlzaCgpIH0pIH07XG5mdW5jdGlvbiBhKCkge1xuICByZXR1cm4geyBmcm9tOiBcIlwiLCBhbW91bnQ6IFwiXCIsIGRlc3RpbmF0aW9uRG9tYWluOiAwLCBtaW50UmVjaXBpZW50OiBuZXcgVWludDhBcnJheSgpLCBidXJuVG9rZW46IFwiXCIsIGRlc3RpbmF0aW9uQ2FsbGVyOiBuZXcgVWludDhBcnJheSgpIH07XG59XG52YXIgTXNnRGVwb3NpdEZvckJ1cm5XaXRoQ2FsbGVyID0geyB0eXBlVXJsOiBcIi9jaXJjbGUuY2N0cC52MS5Nc2dEZXBvc2l0Rm9yQnVybldpdGhDYWxsZXJcIiwgZW5jb2RlOiAobjIsIGUyID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAoXCJcIiAhPT0gbjIuZnJvbSAmJiBlMi51aW50MzIoMTApLnN0cmluZyhuMi5mcm9tKSwgXCJcIiAhPT0gbjIuYW1vdW50ICYmIGUyLnVpbnQzMigxOCkuc3RyaW5nKG4yLmFtb3VudCksIDAgIT09IG4yLmRlc3RpbmF0aW9uRG9tYWluICYmIGUyLnVpbnQzMigyNCkudWludDMyKG4yLmRlc3RpbmF0aW9uRG9tYWluKSwgMCAhPT0gbjIubWludFJlY2lwaWVudC5sZW5ndGggJiYgZTIudWludDMyKDM0KS5ieXRlcyhuMi5taW50UmVjaXBpZW50KSwgXCJcIiAhPT0gbjIuYnVyblRva2VuICYmIGUyLnVpbnQzMig0Mikuc3RyaW5nKG4yLmJ1cm5Ub2tlbiksIDAgIT09IG4yLmRlc3RpbmF0aW9uQ2FsbGVyLmxlbmd0aCAmJiBlMi51aW50MzIoNTApLmJ5dGVzKG4yLmRlc3RpbmF0aW9uQ2FsbGVyKSwgZTIpLCBkZWNvZGUodDUsIGUyKSB7XG4gIGNvbnN0IG8yID0gdDUgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyB0NSA6IG5ldyBCaW5hcnlSZWFkZXIodDUpO1xuICBsZXQgaTMgPSB2b2lkIDAgPT09IGUyID8gbzIubGVuIDogbzIucG9zICsgZTI7XG4gIGNvbnN0IHI2ID0gYSgpO1xuICBmb3IgKDsgbzIucG9zIDwgaTM7ICkge1xuICAgIGNvbnN0IG4yID0gbzIudWludDMyKCk7XG4gICAgc3dpdGNoIChuMiA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByNi5mcm9tID0gbzIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByNi5hbW91bnQgPSBvMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHI2LmRlc3RpbmF0aW9uRG9tYWluID0gbzIudWludDMyKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICByNi5taW50UmVjaXBpZW50ID0gbzIuYnl0ZXMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDU6XG4gICAgICAgIHI2LmJ1cm5Ub2tlbiA9IG8yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNjpcbiAgICAgICAgcjYuZGVzdGluYXRpb25DYWxsZXIgPSBvMi5ieXRlcygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG8yLnNraXBUeXBlKDcgJiBuMik7XG4gICAgfVxuICB9XG4gIHJldHVybiByNjtcbn0sIGZyb21KU09OOiAobjIpID0+ICh7IGZyb206IGlzU2V0KG4yLmZyb20pID8gU3RyaW5nKG4yLmZyb20pIDogXCJcIiwgYW1vdW50OiBpc1NldChuMi5hbW91bnQpID8gU3RyaW5nKG4yLmFtb3VudCkgOiBcIlwiLCBkZXN0aW5hdGlvbkRvbWFpbjogaXNTZXQobjIuZGVzdGluYXRpb25Eb21haW4pID8gTnVtYmVyKG4yLmRlc3RpbmF0aW9uRG9tYWluKSA6IDAsIG1pbnRSZWNpcGllbnQ6IGlzU2V0KG4yLm1pbnRSZWNpcGllbnQpID8gZGVjb2RlQmFzZTY0KG4yLm1pbnRSZWNpcGllbnQpIDogbmV3IFVpbnQ4QXJyYXkoKSwgYnVyblRva2VuOiBpc1NldChuMi5idXJuVG9rZW4pID8gU3RyaW5nKG4yLmJ1cm5Ub2tlbikgOiBcIlwiLCBkZXN0aW5hdGlvbkNhbGxlcjogaXNTZXQobjIuZGVzdGluYXRpb25DYWxsZXIpID8gZGVjb2RlQmFzZTY0KG4yLmRlc3RpbmF0aW9uQ2FsbGVyKSA6IG5ldyBVaW50OEFycmF5KCkgfSksIHRvSlNPTihuMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBuMi5mcm9tICYmICh0NS5mcm9tID0gbjIuZnJvbSksIHZvaWQgMCAhPT0gbjIuYW1vdW50ICYmICh0NS5hbW91bnQgPSBuMi5hbW91bnQpLCB2b2lkIDAgIT09IG4yLmRlc3RpbmF0aW9uRG9tYWluICYmICh0NS5kZXN0aW5hdGlvbkRvbWFpbiA9IE1hdGgucm91bmQobjIuZGVzdGluYXRpb25Eb21haW4pKSwgdm9pZCAwICE9PSBuMi5taW50UmVjaXBpZW50ICYmICh0NS5taW50UmVjaXBpZW50ID0gZW5jb2RlQmFzZTY0KHZvaWQgMCAhPT0gbjIubWludFJlY2lwaWVudCA/IG4yLm1pbnRSZWNpcGllbnQgOiBuZXcgVWludDhBcnJheSgpKSksIHZvaWQgMCAhPT0gbjIuYnVyblRva2VuICYmICh0NS5idXJuVG9rZW4gPSBuMi5idXJuVG9rZW4pLCB2b2lkIDAgIT09IG4yLmRlc3RpbmF0aW9uQ2FsbGVyICYmICh0NS5kZXN0aW5hdGlvbkNhbGxlciA9IGVuY29kZUJhc2U2NCh2b2lkIDAgIT09IG4yLmRlc3RpbmF0aW9uQ2FsbGVyID8gbjIuZGVzdGluYXRpb25DYWxsZXIgOiBuZXcgVWludDhBcnJheSgpKSksIHQ1O1xufSwgZnJvbVBhcnRpYWwobjIpIHtcbiAgY29uc3QgdDUgPSBhKCk7XG4gIHJldHVybiB0NS5mcm9tID0gbjIuZnJvbSA/PyBcIlwiLCB0NS5hbW91bnQgPSBuMi5hbW91bnQgPz8gXCJcIiwgdDUuZGVzdGluYXRpb25Eb21haW4gPSBuMi5kZXN0aW5hdGlvbkRvbWFpbiA/PyAwLCB0NS5taW50UmVjaXBpZW50ID0gbjIubWludFJlY2lwaWVudCA/PyBuZXcgVWludDhBcnJheSgpLCB0NS5idXJuVG9rZW4gPSBuMi5idXJuVG9rZW4gPz8gXCJcIiwgdDUuZGVzdGluYXRpb25DYWxsZXIgPSBuMi5kZXN0aW5hdGlvbkNhbGxlciA/PyBuZXcgVWludDhBcnJheSgpLCB0NTtcbn0sIGZyb21Qcm90b01zZzogKG4yKSA9PiBNc2dEZXBvc2l0Rm9yQnVybldpdGhDYWxsZXIuZGVjb2RlKG4yLnZhbHVlKSwgdG9Qcm90bzogKG4yKSA9PiBNc2dEZXBvc2l0Rm9yQnVybldpdGhDYWxsZXIuZW5jb2RlKG4yKS5maW5pc2goKSwgdG9Qcm90b01zZzogKG4yKSA9PiAoeyB0eXBlVXJsOiBcIi9jaXJjbGUuY2N0cC52MS5Nc2dEZXBvc2l0Rm9yQnVybldpdGhDYWxsZXJcIiwgdmFsdWU6IE1zZ0RlcG9zaXRGb3JCdXJuV2l0aENhbGxlci5lbmNvZGUobjIpLmZpbmlzaCgpIH0pIH07XG5cbi8qIC4uL2Nvc21pYy1wcm90by9kaXN0L2NvZGVnZW4vY29zbW9zL2Jhc2UvcXVlcnkvdjFiZXRhMS9wYWdpbmF0aW9uLmpzKi9cbmZ1bmN0aW9uIHI0KCkge1xuICByZXR1cm4geyBrZXk6IG5ldyBVaW50OEFycmF5KCksIG9mZnNldDogQmlnSW50KDApLCBsaW1pdDogQmlnSW50KDApLCBjb3VudFRvdGFsOiBmYWxzZSwgcmV2ZXJzZTogZmFsc2UgfTtcbn1cbnZhciBQYWdlUmVxdWVzdCA9IHsgdHlwZVVybDogXCIvY29zbW9zLmJhc2UucXVlcnkudjFiZXRhMS5QYWdlUmVxdWVzdFwiLCBlbmNvZGU6IChlMiwgbzIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+ICgwICE9PSBlMi5rZXkubGVuZ3RoICYmIG8yLnVpbnQzMigxMCkuYnl0ZXMoZTIua2V5KSwgZTIub2Zmc2V0ICE9PSBCaWdJbnQoMCkgJiYgbzIudWludDMyKDE2KS51aW50NjQoZTIub2Zmc2V0KSwgZTIubGltaXQgIT09IEJpZ0ludCgwKSAmJiBvMi51aW50MzIoMjQpLnVpbnQ2NChlMi5saW1pdCksIHRydWUgPT09IGUyLmNvdW50VG90YWwgJiYgbzIudWludDMyKDMyKS5ib29sKGUyLmNvdW50VG90YWwpLCB0cnVlID09PSBlMi5yZXZlcnNlICYmIG8yLnVpbnQzMig0MCkuYm9vbChlMi5yZXZlcnNlKSwgbzIpLCBkZWNvZGUodDUsIG8yKSB7XG4gIGNvbnN0IG4yID0gdDUgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyB0NSA6IG5ldyBCaW5hcnlSZWFkZXIodDUpO1xuICBsZXQgaTMgPSB2b2lkIDAgPT09IG8yID8gbjIubGVuIDogbjIucG9zICsgbzI7XG4gIGNvbnN0IHMzID0gcjQoKTtcbiAgZm9yICg7IG4yLnBvcyA8IGkzOyApIHtcbiAgICBjb25zdCBlMiA9IG4yLnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTIgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgczMua2V5ID0gbjIuYnl0ZXMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHMzLm9mZnNldCA9IG4yLnVpbnQ2NCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgczMubGltaXQgPSBuMi51aW50NjQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHMzLmNvdW50VG90YWwgPSBuMi5ib29sKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA1OlxuICAgICAgICBzMy5yZXZlcnNlID0gbjIuYm9vbCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG4yLnNraXBUeXBlKDcgJiBlMik7XG4gICAgfVxuICB9XG4gIHJldHVybiBzMztcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IGtleTogaXNTZXQoZTIua2V5KSA/IGRlY29kZUJhc2U2NChlMi5rZXkpIDogbmV3IFVpbnQ4QXJyYXkoKSwgb2Zmc2V0OiBpc1NldChlMi5vZmZzZXQpID8gQmlnSW50KGUyLm9mZnNldC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgbGltaXQ6IGlzU2V0KGUyLmxpbWl0KSA/IEJpZ0ludChlMi5saW1pdC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgY291bnRUb3RhbDogISFpc1NldChlMi5jb3VudFRvdGFsKSAmJiBCb29sZWFuKGUyLmNvdW50VG90YWwpLCByZXZlcnNlOiAhIWlzU2V0KGUyLnJldmVyc2UpICYmIEJvb2xlYW4oZTIucmV2ZXJzZSkgfSksIHRvSlNPTihlMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5rZXkgJiYgKHQ1LmtleSA9IGVuY29kZUJhc2U2NCh2b2lkIDAgIT09IGUyLmtleSA/IGUyLmtleSA6IG5ldyBVaW50OEFycmF5KCkpKSwgdm9pZCAwICE9PSBlMi5vZmZzZXQgJiYgKHQ1Lm9mZnNldCA9IChlMi5vZmZzZXQgfHwgQmlnSW50KDApKS50b1N0cmluZygpKSwgdm9pZCAwICE9PSBlMi5saW1pdCAmJiAodDUubGltaXQgPSAoZTIubGltaXQgfHwgQmlnSW50KDApKS50b1N0cmluZygpKSwgdm9pZCAwICE9PSBlMi5jb3VudFRvdGFsICYmICh0NS5jb3VudFRvdGFsID0gZTIuY291bnRUb3RhbCksIHZvaWQgMCAhPT0gZTIucmV2ZXJzZSAmJiAodDUucmV2ZXJzZSA9IGUyLnJldmVyc2UpLCB0NTtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IHQ1ID0gcjQoKTtcbiAgcmV0dXJuIHQ1LmtleSA9IGUyLmtleSA/PyBuZXcgVWludDhBcnJheSgpLCB0NS5vZmZzZXQgPSB2b2lkIDAgIT09IGUyLm9mZnNldCAmJiBudWxsICE9PSBlMi5vZmZzZXQgPyBCaWdJbnQoZTIub2Zmc2V0LnRvU3RyaW5nKCkpIDogQmlnSW50KDApLCB0NS5saW1pdCA9IHZvaWQgMCAhPT0gZTIubGltaXQgJiYgbnVsbCAhPT0gZTIubGltaXQgPyBCaWdJbnQoZTIubGltaXQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIHQ1LmNvdW50VG90YWwgPSBlMi5jb3VudFRvdGFsID8/IGZhbHNlLCB0NS5yZXZlcnNlID0gZTIucmV2ZXJzZSA/PyBmYWxzZSwgdDU7XG59LCBmcm9tUHJvdG9Nc2c6IChlMikgPT4gUGFnZVJlcXVlc3QuZGVjb2RlKGUyLnZhbHVlKSwgdG9Qcm90bzogKGUyKSA9PiBQYWdlUmVxdWVzdC5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5iYXNlLnF1ZXJ5LnYxYmV0YTEuUGFnZVJlcXVlc3RcIiwgdmFsdWU6IFBhZ2VSZXF1ZXN0LmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcbmZ1bmN0aW9uIHMyKCkge1xuICByZXR1cm4geyBuZXh0S2V5OiBuZXcgVWludDhBcnJheSgpLCB0b3RhbDogQmlnSW50KDApIH07XG59XG52YXIgUGFnZVJlc3BvbnNlID0geyB0eXBlVXJsOiBcIi9jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXNwb25zZVwiLCBlbmNvZGU6IChlMiwgbzIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+ICgwICE9PSBlMi5uZXh0S2V5Lmxlbmd0aCAmJiBvMi51aW50MzIoMTApLmJ5dGVzKGUyLm5leHRLZXkpLCBlMi50b3RhbCAhPT0gQmlnSW50KDApICYmIG8yLnVpbnQzMigxNikudWludDY0KGUyLnRvdGFsKSwgbzIpLCBkZWNvZGUodDUsIG8yKSB7XG4gIGNvbnN0IG4yID0gdDUgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyB0NSA6IG5ldyBCaW5hcnlSZWFkZXIodDUpO1xuICBsZXQgaTMgPSB2b2lkIDAgPT09IG8yID8gbjIubGVuIDogbjIucG9zICsgbzI7XG4gIGNvbnN0IHI2ID0gczIoKTtcbiAgZm9yICg7IG4yLnBvcyA8IGkzOyApIHtcbiAgICBjb25zdCBlMiA9IG4yLnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTIgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcjYubmV4dEtleSA9IG4yLmJ5dGVzKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByNi50b3RhbCA9IG4yLnVpbnQ2NCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG4yLnNraXBUeXBlKDcgJiBlMik7XG4gICAgfVxuICB9XG4gIHJldHVybiByNjtcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IG5leHRLZXk6IGlzU2V0KGUyLm5leHRLZXkpID8gZGVjb2RlQmFzZTY0KGUyLm5leHRLZXkpIDogbmV3IFVpbnQ4QXJyYXkoKSwgdG90YWw6IGlzU2V0KGUyLnRvdGFsKSA/IEJpZ0ludChlMi50b3RhbC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IHQ1ID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLm5leHRLZXkgJiYgKHQ1Lm5leHRLZXkgPSBlbmNvZGVCYXNlNjQodm9pZCAwICE9PSBlMi5uZXh0S2V5ID8gZTIubmV4dEtleSA6IG5ldyBVaW50OEFycmF5KCkpKSwgdm9pZCAwICE9PSBlMi50b3RhbCAmJiAodDUudG90YWwgPSAoZTIudG90YWwgfHwgQmlnSW50KDApKS50b1N0cmluZygpKSwgdDU7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCB0NSA9IHMyKCk7XG4gIHJldHVybiB0NS5uZXh0S2V5ID0gZTIubmV4dEtleSA/PyBuZXcgVWludDhBcnJheSgpLCB0NS50b3RhbCA9IHZvaWQgMCAhPT0gZTIudG90YWwgJiYgbnVsbCAhPT0gZTIudG90YWwgPyBCaWdJbnQoZTIudG90YWwudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIHQ1O1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IFBhZ2VSZXNwb25zZS5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IFBhZ2VSZXNwb25zZS5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5iYXNlLnF1ZXJ5LnYxYmV0YTEuUGFnZVJlc3BvbnNlXCIsIHZhbHVlOiBQYWdlUmVzcG9uc2UuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xuXG4vKiAuLi9jb3NtaWMtcHJvdG8vZGlzdC9jb2RlZ2VuL2Nvc21vcy9iYW5rL3YxYmV0YTEvcXVlcnkuanMqL1xudmFyIFF1ZXJ5QmFsYW5jZVJlcXVlc3QgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5iYW5rLnYxYmV0YTEuUXVlcnlCYWxhbmNlUmVxdWVzdFwiLCBlbmNvZGU6IChlMiwgbzIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+IChcIlwiICE9PSBlMi5hZGRyZXNzICYmIG8yLnVpbnQzMigxMCkuc3RyaW5nKGUyLmFkZHJlc3MpLCBcIlwiICE9PSBlMi5kZW5vbSAmJiBvMi51aW50MzIoMTgpLnN0cmluZyhlMi5kZW5vbSksIG8yKSwgZGVjb2RlKGUyLCBvMikge1xuICBjb25zdCBuMiA9IGUyIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gZTIgOiBuZXcgQmluYXJ5UmVhZGVyKGUyKTtcbiAgbGV0IGEyID0gdm9pZCAwID09PSBvMiA/IG4yLmxlbiA6IG4yLnBvcyArIG8yO1xuICBjb25zdCB0NSA9IHsgYWRkcmVzczogXCJcIiwgZGVub206IFwiXCIgfTtcbiAgZm9yICg7IG4yLnBvcyA8IGEyOyApIHtcbiAgICBjb25zdCBlMyA9IG4yLnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgdDUuYWRkcmVzcyA9IG4yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgdDUuZGVub20gPSBuMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBuMi5za2lwVHlwZSg3ICYgZTMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdDU7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyBhZGRyZXNzOiBpc1NldChlMi5hZGRyZXNzKSA/IFN0cmluZyhlMi5hZGRyZXNzKSA6IFwiXCIsIGRlbm9tOiBpc1NldChlMi5kZW5vbSkgPyBTdHJpbmcoZTIuZGVub20pIDogXCJcIiB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IG8yID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLmFkZHJlc3MgJiYgKG8yLmFkZHJlc3MgPSBlMi5hZGRyZXNzKSwgdm9pZCAwICE9PSBlMi5kZW5vbSAmJiAobzIuZGVub20gPSBlMi5kZW5vbSksIG8yO1xufSwgZnJvbVBhcnRpYWwoZTIpIHtcbiAgY29uc3QgbzIgPSB7IGFkZHJlc3M6IFwiXCIsIGRlbm9tOiBcIlwiIH07XG4gIHJldHVybiBvMi5hZGRyZXNzID0gZTIuYWRkcmVzcyA/PyBcIlwiLCBvMi5kZW5vbSA9IGUyLmRlbm9tID8/IFwiXCIsIG8yO1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IFF1ZXJ5QmFsYW5jZVJlcXVlc3QuZGVjb2RlKGUyLnZhbHVlKSwgdG9Qcm90bzogKGUyKSA9PiBRdWVyeUJhbGFuY2VSZXF1ZXN0LmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLmJhbmsudjFiZXRhMS5RdWVyeUJhbGFuY2VSZXF1ZXN0XCIsIHZhbHVlOiBRdWVyeUJhbGFuY2VSZXF1ZXN0LmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcbnZhciBRdWVyeUJhbGFuY2VSZXNwb25zZSA9IHsgdHlwZVVybDogXCIvY29zbW9zLmJhbmsudjFiZXRhMS5RdWVyeUJhbGFuY2VSZXNwb25zZVwiLCBlbmNvZGU6IChlMiwgbzIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+ICh2b2lkIDAgIT09IGUyLmJhbGFuY2UgJiYgQ29pbi5lbmNvZGUoZTIuYmFsYW5jZSwgbzIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLCBvMiksIGRlY29kZShlMiwgbzIpIHtcbiAgY29uc3QgYTIgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCB0NSA9IHZvaWQgMCA9PT0gbzIgPyBhMi5sZW4gOiBhMi5wb3MgKyBvMjtcbiAgY29uc3QgczMgPSB7IGJhbGFuY2U6IHZvaWQgMCB9O1xuICBmb3IgKDsgYTIucG9zIDwgdDU7ICkge1xuICAgIGNvbnN0IGUzID0gYTIudWludDMyKCk7XG4gICAgaWYgKGUzID4+PiAzID09IDEpIHMzLmJhbGFuY2UgPSBDb2luLmRlY29kZShhMiwgYTIudWludDMyKCkpO1xuICAgIGVsc2UgYTIuc2tpcFR5cGUoNyAmIGUzKTtcbiAgfVxuICByZXR1cm4gczM7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyBiYWxhbmNlOiBpc1NldChlMi5iYWxhbmNlKSA/IENvaW4uZnJvbUpTT04oZTIuYmFsYW5jZSkgOiB2b2lkIDAgfSksIHRvSlNPTihlMikge1xuICBjb25zdCBvMiA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5iYWxhbmNlICYmIChvMi5iYWxhbmNlID0gZTIuYmFsYW5jZSA/IENvaW4udG9KU09OKGUyLmJhbGFuY2UpIDogdm9pZCAwKSwgbzI7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCBvMiA9IHsgYmFsYW5jZTogdm9pZCAwIH07XG4gIHJldHVybiBvMi5iYWxhbmNlID0gdm9pZCAwICE9PSBlMi5iYWxhbmNlICYmIG51bGwgIT09IGUyLmJhbGFuY2UgPyBDb2luLmZyb21QYXJ0aWFsKGUyLmJhbGFuY2UpIDogdm9pZCAwLCBvMjtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBRdWVyeUJhbGFuY2VSZXNwb25zZS5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IFF1ZXJ5QmFsYW5jZVJlc3BvbnNlLmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLmJhbmsudjFiZXRhMS5RdWVyeUJhbGFuY2VSZXNwb25zZVwiLCB2YWx1ZTogUXVlcnlCYWxhbmNlUmVzcG9uc2UuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xudmFyIFF1ZXJ5QWxsQmFsYW5jZXNSZXF1ZXN0ID0geyB0eXBlVXJsOiBcIi9jb3Ntb3MuYmFuay52MWJldGExLlF1ZXJ5QWxsQmFsYW5jZXNSZXF1ZXN0XCIsIGVuY29kZTogKG8yLCBuMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKFwiXCIgIT09IG8yLmFkZHJlc3MgJiYgbjIudWludDMyKDEwKS5zdHJpbmcobzIuYWRkcmVzcyksIHZvaWQgMCAhPT0gbzIucGFnaW5hdGlvbiAmJiBQYWdlUmVxdWVzdC5lbmNvZGUobzIucGFnaW5hdGlvbiwgbjIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpLCB0cnVlID09PSBvMi5yZXNvbHZlRGVub20gJiYgbjIudWludDMyKDI0KS5ib29sKG8yLnJlc29sdmVEZW5vbSksIG4yKSwgZGVjb2RlKG8yLCBuMikge1xuICBjb25zdCBhMiA9IG8yIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gbzIgOiBuZXcgQmluYXJ5UmVhZGVyKG8yKTtcbiAgbGV0IHQ1ID0gdm9pZCAwID09PSBuMiA/IGEyLmxlbiA6IGEyLnBvcyArIG4yO1xuICBjb25zdCBzMyA9IHsgYWRkcmVzczogXCJcIiwgcGFnaW5hdGlvbjogdm9pZCAwLCByZXNvbHZlRGVub206IGZhbHNlIH07XG4gIGZvciAoOyBhMi5wb3MgPCB0NTsgKSB7XG4gICAgY29uc3QgbzMgPSBhMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKG8zID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHMzLmFkZHJlc3MgPSBhMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHMzLnBhZ2luYXRpb24gPSBQYWdlUmVxdWVzdC5kZWNvZGUoYTIsIGEyLnVpbnQzMigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHMzLnJlc29sdmVEZW5vbSA9IGEyLmJvb2woKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhMi5za2lwVHlwZSg3ICYgbzMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gczM7XG59LCBmcm9tSlNPTjogKG8yKSA9PiAoeyBhZGRyZXNzOiBpc1NldChvMi5hZGRyZXNzKSA/IFN0cmluZyhvMi5hZGRyZXNzKSA6IFwiXCIsIHBhZ2luYXRpb246IGlzU2V0KG8yLnBhZ2luYXRpb24pID8gUGFnZVJlcXVlc3QuZnJvbUpTT04obzIucGFnaW5hdGlvbikgOiB2b2lkIDAsIHJlc29sdmVEZW5vbTogISFpc1NldChvMi5yZXNvbHZlRGVub20pICYmIEJvb2xlYW4obzIucmVzb2x2ZURlbm9tKSB9KSwgdG9KU09OKG8yKSB7XG4gIGNvbnN0IG4yID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IG8yLmFkZHJlc3MgJiYgKG4yLmFkZHJlc3MgPSBvMi5hZGRyZXNzKSwgdm9pZCAwICE9PSBvMi5wYWdpbmF0aW9uICYmIChuMi5wYWdpbmF0aW9uID0gbzIucGFnaW5hdGlvbiA/IFBhZ2VSZXF1ZXN0LnRvSlNPTihvMi5wYWdpbmF0aW9uKSA6IHZvaWQgMCksIHZvaWQgMCAhPT0gbzIucmVzb2x2ZURlbm9tICYmIChuMi5yZXNvbHZlRGVub20gPSBvMi5yZXNvbHZlRGVub20pLCBuMjtcbn0sIGZyb21QYXJ0aWFsKG8yKSB7XG4gIGNvbnN0IG4yID0geyBhZGRyZXNzOiBcIlwiLCBwYWdpbmF0aW9uOiB2b2lkIDAsIHJlc29sdmVEZW5vbTogZmFsc2UgfTtcbiAgcmV0dXJuIG4yLmFkZHJlc3MgPSBvMi5hZGRyZXNzID8/IFwiXCIsIG4yLnBhZ2luYXRpb24gPSB2b2lkIDAgIT09IG8yLnBhZ2luYXRpb24gJiYgbnVsbCAhPT0gbzIucGFnaW5hdGlvbiA/IFBhZ2VSZXF1ZXN0LmZyb21QYXJ0aWFsKG8yLnBhZ2luYXRpb24pIDogdm9pZCAwLCBuMi5yZXNvbHZlRGVub20gPSBvMi5yZXNvbHZlRGVub20gPz8gZmFsc2UsIG4yO1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IFF1ZXJ5QWxsQmFsYW5jZXNSZXF1ZXN0LmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gUXVlcnlBbGxCYWxhbmNlc1JlcXVlc3QuZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3MuYmFuay52MWJldGExLlF1ZXJ5QWxsQmFsYW5jZXNSZXF1ZXN0XCIsIHZhbHVlOiBRdWVyeUFsbEJhbGFuY2VzUmVxdWVzdC5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG52YXIgUXVlcnlBbGxCYWxhbmNlc1Jlc3BvbnNlID0geyB0eXBlVXJsOiBcIi9jb3Ntb3MuYmFuay52MWJldGExLlF1ZXJ5QWxsQmFsYW5jZXNSZXNwb25zZVwiLCBlbmNvZGUoZTIsIGEyID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSB7XG4gIGZvciAoY29uc3QgbzIgb2YgZTIuYmFsYW5jZXMpIENvaW4uZW5jb2RlKG8yLCBhMi51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLnBhZ2luYXRpb24gJiYgUGFnZVJlc3BvbnNlLmVuY29kZShlMi5wYWdpbmF0aW9uLCBhMi51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCksIGEyO1xufSwgZGVjb2RlKGUyLCBhMikge1xuICBjb25zdCB0NSA9IGUyIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gZTIgOiBuZXcgQmluYXJ5UmVhZGVyKGUyKTtcbiAgbGV0IHMzID0gdm9pZCAwID09PSBhMiA/IHQ1LmxlbiA6IHQ1LnBvcyArIGEyO1xuICBjb25zdCBpMyA9IHsgYmFsYW5jZXM6IFtdLCBwYWdpbmF0aW9uOiB2b2lkIDAgfTtcbiAgZm9yICg7IHQ1LnBvcyA8IHMzOyApIHtcbiAgICBjb25zdCBlMyA9IHQ1LnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaTMuYmFsYW5jZXMucHVzaChDb2luLmRlY29kZSh0NSwgdDUudWludDMyKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGkzLnBhZ2luYXRpb24gPSBQYWdlUmVzcG9uc2UuZGVjb2RlKHQ1LCB0NS51aW50MzIoKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdDUuc2tpcFR5cGUoNyAmIGUzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkzO1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgYmFsYW5jZXM6IEFycmF5LmlzQXJyYXkoZTI/LmJhbGFuY2VzKSA/IGUyLmJhbGFuY2VzLm1hcCgoKGUzKSA9PiBDb2luLmZyb21KU09OKGUzKSkpIDogW10sIHBhZ2luYXRpb246IGlzU2V0KGUyLnBhZ2luYXRpb24pID8gUGFnZVJlc3BvbnNlLmZyb21KU09OKGUyLnBhZ2luYXRpb24pIDogdm9pZCAwIH0pLCB0b0pTT04oZTIpIHtcbiAgY29uc3QgYTIgPSB7fTtcbiAgcmV0dXJuIGUyLmJhbGFuY2VzID8gYTIuYmFsYW5jZXMgPSBlMi5iYWxhbmNlcy5tYXAoKChlMykgPT4gZTMgPyBDb2luLnRvSlNPTihlMykgOiB2b2lkIDApKSA6IGEyLmJhbGFuY2VzID0gW10sIHZvaWQgMCAhPT0gZTIucGFnaW5hdGlvbiAmJiAoYTIucGFnaW5hdGlvbiA9IGUyLnBhZ2luYXRpb24gPyBQYWdlUmVzcG9uc2UudG9KU09OKGUyLnBhZ2luYXRpb24pIDogdm9pZCAwKSwgYTI7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCBhMiA9IHsgYmFsYW5jZXM6IFtdLCBwYWdpbmF0aW9uOiB2b2lkIDAgfTtcbiAgcmV0dXJuIGEyLmJhbGFuY2VzID0gZTIuYmFsYW5jZXM/Lm1hcCgoKGUzKSA9PiBDb2luLmZyb21QYXJ0aWFsKGUzKSkpIHx8IFtdLCBhMi5wYWdpbmF0aW9uID0gdm9pZCAwICE9PSBlMi5wYWdpbmF0aW9uICYmIG51bGwgIT09IGUyLnBhZ2luYXRpb24gPyBQYWdlUmVzcG9uc2UuZnJvbVBhcnRpYWwoZTIucGFnaW5hdGlvbikgOiB2b2lkIDAsIGEyO1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IFF1ZXJ5QWxsQmFsYW5jZXNSZXNwb25zZS5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IFF1ZXJ5QWxsQmFsYW5jZXNSZXNwb25zZS5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5iYW5rLnYxYmV0YTEuUXVlcnlBbGxCYWxhbmNlc1Jlc3BvbnNlXCIsIHZhbHVlOiBRdWVyeUFsbEJhbGFuY2VzUmVzcG9uc2UuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xuXG4vKiAuLi9jb3NtaWMtcHJvdG8vZGlzdC9jb2RlZ2VuL2Nvc21vcy9iYW5rL3YxYmV0YTEvdHguanMqL1xudmFyIE1zZ1NlbmQgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5iYW5rLnYxYmV0YTEuTXNnU2VuZFwiLCBlbmNvZGUobzIsIHQ1ID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSB7XG4gIFwiXCIgIT09IG8yLmZyb21BZGRyZXNzICYmIHQ1LnVpbnQzMigxMCkuc3RyaW5nKG8yLmZyb21BZGRyZXNzKSwgXCJcIiAhPT0gbzIudG9BZGRyZXNzICYmIHQ1LnVpbnQzMigxOCkuc3RyaW5nKG8yLnRvQWRkcmVzcyk7XG4gIGZvciAoY29uc3QgczMgb2YgbzIuYW1vdW50KSBDb2luLmVuY29kZShzMywgdDUudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICByZXR1cm4gdDU7XG59LCBkZWNvZGUobzIsIHQ1KSB7XG4gIGNvbnN0IHMzID0gbzIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBvMiA6IG5ldyBCaW5hcnlSZWFkZXIobzIpO1xuICBsZXQgbjIgPSB2b2lkIDAgPT09IHQ1ID8gczMubGVuIDogczMucG9zICsgdDU7XG4gIGNvbnN0IGEyID0geyBmcm9tQWRkcmVzczogXCJcIiwgdG9BZGRyZXNzOiBcIlwiLCBhbW91bnQ6IFtdIH07XG4gIGZvciAoOyBzMy5wb3MgPCBuMjsgKSB7XG4gICAgY29uc3QgbzMgPSBzMy51aW50MzIoKTtcbiAgICBzd2l0Y2ggKG8zID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGEyLmZyb21BZGRyZXNzID0gczMuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBhMi50b0FkZHJlc3MgPSBzMy5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGEyLmFtb3VudC5wdXNoKENvaW4uZGVjb2RlKHMzLCBzMy51aW50MzIoKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHMzLnNraXBUeXBlKDcgJiBvMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhMjtcbn0sIGZyb21KU09OOiAobzIpID0+ICh7IGZyb21BZGRyZXNzOiBpc1NldChvMi5mcm9tQWRkcmVzcykgPyBTdHJpbmcobzIuZnJvbUFkZHJlc3MpIDogXCJcIiwgdG9BZGRyZXNzOiBpc1NldChvMi50b0FkZHJlc3MpID8gU3RyaW5nKG8yLnRvQWRkcmVzcykgOiBcIlwiLCBhbW91bnQ6IEFycmF5LmlzQXJyYXkobzI/LmFtb3VudCkgPyBvMi5hbW91bnQubWFwKCgobzMpID0+IENvaW4uZnJvbUpTT04obzMpKSkgOiBbXSB9KSwgdG9KU09OKG8yKSB7XG4gIGNvbnN0IHQ1ID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IG8yLmZyb21BZGRyZXNzICYmICh0NS5mcm9tQWRkcmVzcyA9IG8yLmZyb21BZGRyZXNzKSwgdm9pZCAwICE9PSBvMi50b0FkZHJlc3MgJiYgKHQ1LnRvQWRkcmVzcyA9IG8yLnRvQWRkcmVzcyksIG8yLmFtb3VudCA/IHQ1LmFtb3VudCA9IG8yLmFtb3VudC5tYXAoKChvMykgPT4gbzMgPyBDb2luLnRvSlNPTihvMykgOiB2b2lkIDApKSA6IHQ1LmFtb3VudCA9IFtdLCB0NTtcbn0sIGZyb21QYXJ0aWFsKG8yKSB7XG4gIGNvbnN0IHQ1ID0geyBmcm9tQWRkcmVzczogXCJcIiwgdG9BZGRyZXNzOiBcIlwiLCBhbW91bnQ6IFtdIH07XG4gIHJldHVybiB0NS5mcm9tQWRkcmVzcyA9IG8yLmZyb21BZGRyZXNzID8/IFwiXCIsIHQ1LnRvQWRkcmVzcyA9IG8yLnRvQWRkcmVzcyA/PyBcIlwiLCB0NS5hbW91bnQgPSBvMi5hbW91bnQ/Lm1hcCgoKG8zKSA9PiBDb2luLmZyb21QYXJ0aWFsKG8zKSkpIHx8IFtdLCB0NTtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBNc2dTZW5kLmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gTXNnU2VuZC5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5iYW5rLnYxYmV0YTEuTXNnU2VuZFwiLCB2YWx1ZTogTXNnU2VuZC5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG5cbi8qIC4uL2Nvc21pYy1wcm90by9kaXN0L2NvZGVnZW4vY29zbW9zL2Rpc3RyaWJ1dGlvbi92MWJldGExL2Rpc3RyaWJ1dGlvbi5qcyovXG52YXIgRGVsZWdhdGlvbkRlbGVnYXRvclJld2FyZCA9IHsgdHlwZVVybDogXCIvY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLkRlbGVnYXRpb25EZWxlZ2F0b3JSZXdhcmRcIiwgZW5jb2RlKHQ1LCBlMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkge1xuICBcIlwiICE9PSB0NS52YWxpZGF0b3JBZGRyZXNzICYmIGUyLnVpbnQzMigxMCkuc3RyaW5nKHQ1LnZhbGlkYXRvckFkZHJlc3MpO1xuICBmb3IgKGNvbnN0IHI2IG9mIHQ1LnJld2FyZCkgRGVjQ29pbi5lbmNvZGUocjYsIGUyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgcmV0dXJuIGUyO1xufSwgZGVjb2RlKHQ1LCByNikge1xuICBjb25zdCBpMyA9IHQ1IGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gdDUgOiBuZXcgQmluYXJ5UmVhZGVyKHQ1KTtcbiAgbGV0IG4yID0gdm9pZCAwID09PSByNiA/IGkzLmxlbiA6IGkzLnBvcyArIHI2O1xuICBjb25zdCBhMiA9IHsgdmFsaWRhdG9yQWRkcmVzczogXCJcIiwgcmV3YXJkOiBbXSB9O1xuICBmb3IgKDsgaTMucG9zIDwgbjI7ICkge1xuICAgIGNvbnN0IHQ2ID0gaTMudWludDMyKCk7XG4gICAgc3dpdGNoICh0NiA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBhMi52YWxpZGF0b3JBZGRyZXNzID0gaTMuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBhMi5yZXdhcmQucHVzaChEZWNDb2luLmRlY29kZShpMywgaTMudWludDMyKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpMy5za2lwVHlwZSg3ICYgdDYpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYTI7XG59LCBmcm9tSlNPTjogKHQ1KSA9PiAoeyB2YWxpZGF0b3JBZGRyZXNzOiBpc1NldCh0NS52YWxpZGF0b3JBZGRyZXNzKSA/IFN0cmluZyh0NS52YWxpZGF0b3JBZGRyZXNzKSA6IFwiXCIsIHJld2FyZDogQXJyYXkuaXNBcnJheSh0NT8ucmV3YXJkKSA/IHQ1LnJld2FyZC5tYXAoKCh0NikgPT4gRGVjQ29pbi5mcm9tSlNPTih0NikpKSA6IFtdIH0pLCB0b0pTT04odDUpIHtcbiAgY29uc3QgZTIgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gdDUudmFsaWRhdG9yQWRkcmVzcyAmJiAoZTIudmFsaWRhdG9yQWRkcmVzcyA9IHQ1LnZhbGlkYXRvckFkZHJlc3MpLCB0NS5yZXdhcmQgPyBlMi5yZXdhcmQgPSB0NS5yZXdhcmQubWFwKCgodDYpID0+IHQ2ID8gRGVjQ29pbi50b0pTT04odDYpIDogdm9pZCAwKSkgOiBlMi5yZXdhcmQgPSBbXSwgZTI7XG59LCBmcm9tUGFydGlhbCh0NSkge1xuICBjb25zdCBlMiA9IHsgdmFsaWRhdG9yQWRkcmVzczogXCJcIiwgcmV3YXJkOiBbXSB9O1xuICByZXR1cm4gZTIudmFsaWRhdG9yQWRkcmVzcyA9IHQ1LnZhbGlkYXRvckFkZHJlc3MgPz8gXCJcIiwgZTIucmV3YXJkID0gdDUucmV3YXJkPy5tYXAoKCh0NikgPT4gRGVjQ29pbi5mcm9tUGFydGlhbCh0NikpKSB8fCBbXSwgZTI7XG59LCBmcm9tUHJvdG9Nc2c6IChvMikgPT4gRGVsZWdhdGlvbkRlbGVnYXRvclJld2FyZC5kZWNvZGUobzIudmFsdWUpLCB0b1Byb3RvOiAobzIpID0+IERlbGVnYXRpb25EZWxlZ2F0b3JSZXdhcmQuZW5jb2RlKG8yKS5maW5pc2goKSwgdG9Qcm90b01zZzogKG8yKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3MuZGlzdHJpYnV0aW9uLnYxYmV0YTEuRGVsZWdhdGlvbkRlbGVnYXRvclJld2FyZFwiLCB2YWx1ZTogRGVsZWdhdGlvbkRlbGVnYXRvclJld2FyZC5lbmNvZGUobzIpLmZpbmlzaCgpIH0pIH07XG5cbi8qIC4uL2Nvc21pYy1wcm90by9kaXN0L2NvZGVnZW4vY29zbW9zL2Rpc3RyaWJ1dGlvbi92MWJldGExL3F1ZXJ5LmpzKi9cbnZhciBRdWVyeURlbGVnYXRpb25SZXdhcmRzUmVxdWVzdCA9IHsgdHlwZVVybDogXCIvY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLlF1ZXJ5RGVsZWdhdGlvblJld2FyZHNSZXF1ZXN0XCIsIGVuY29kZTogKGUyLCBvMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKFwiXCIgIT09IGUyLmRlbGVnYXRvckFkZHJlc3MgJiYgbzIudWludDMyKDEwKS5zdHJpbmcoZTIuZGVsZWdhdG9yQWRkcmVzcyksIFwiXCIgIT09IGUyLnZhbGlkYXRvckFkZHJlc3MgJiYgbzIudWludDMyKDE4KS5zdHJpbmcoZTIudmFsaWRhdG9yQWRkcmVzcyksIG8yKSwgZGVjb2RlKGUyLCBvMikge1xuICBjb25zdCBzMyA9IGUyIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gZTIgOiBuZXcgQmluYXJ5UmVhZGVyKGUyKTtcbiAgbGV0IHI2ID0gdm9pZCAwID09PSBvMiA/IHMzLmxlbiA6IHMzLnBvcyArIG8yO1xuICBjb25zdCB0NSA9IHsgZGVsZWdhdG9yQWRkcmVzczogXCJcIiwgdmFsaWRhdG9yQWRkcmVzczogXCJcIiB9O1xuICBmb3IgKDsgczMucG9zIDwgcjY7ICkge1xuICAgIGNvbnN0IGUzID0gczMudWludDMyKCk7XG4gICAgc3dpdGNoIChlMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICB0NS5kZWxlZ2F0b3JBZGRyZXNzID0gczMuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICB0NS52YWxpZGF0b3JBZGRyZXNzID0gczMuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgczMuc2tpcFR5cGUoNyAmIGUzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHQ1O1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgZGVsZWdhdG9yQWRkcmVzczogaXNTZXQoZTIuZGVsZWdhdG9yQWRkcmVzcykgPyBTdHJpbmcoZTIuZGVsZWdhdG9yQWRkcmVzcykgOiBcIlwiLCB2YWxpZGF0b3JBZGRyZXNzOiBpc1NldChlMi52YWxpZGF0b3JBZGRyZXNzKSA/IFN0cmluZyhlMi52YWxpZGF0b3JBZGRyZXNzKSA6IFwiXCIgfSksIHRvSlNPTihlMikge1xuICBjb25zdCBvMiA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5kZWxlZ2F0b3JBZGRyZXNzICYmIChvMi5kZWxlZ2F0b3JBZGRyZXNzID0gZTIuZGVsZWdhdG9yQWRkcmVzcyksIHZvaWQgMCAhPT0gZTIudmFsaWRhdG9yQWRkcmVzcyAmJiAobzIudmFsaWRhdG9yQWRkcmVzcyA9IGUyLnZhbGlkYXRvckFkZHJlc3MpLCBvMjtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IG8yID0geyBkZWxlZ2F0b3JBZGRyZXNzOiBcIlwiLCB2YWxpZGF0b3JBZGRyZXNzOiBcIlwiIH07XG4gIHJldHVybiBvMi5kZWxlZ2F0b3JBZGRyZXNzID0gZTIuZGVsZWdhdG9yQWRkcmVzcyA/PyBcIlwiLCBvMi52YWxpZGF0b3JBZGRyZXNzID0gZTIudmFsaWRhdG9yQWRkcmVzcyA/PyBcIlwiLCBvMjtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBRdWVyeURlbGVnYXRpb25SZXdhcmRzUmVxdWVzdC5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IFF1ZXJ5RGVsZWdhdGlvblJld2FyZHNSZXF1ZXN0LmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLlF1ZXJ5RGVsZWdhdGlvblJld2FyZHNSZXF1ZXN0XCIsIHZhbHVlOiBRdWVyeURlbGVnYXRpb25SZXdhcmRzUmVxdWVzdC5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG52YXIgUXVlcnlEZWxlZ2F0aW9uUmV3YXJkc1Jlc3BvbnNlID0geyB0eXBlVXJsOiBcIi9jb3Ntb3MuZGlzdHJpYnV0aW9uLnYxYmV0YTEuUXVlcnlEZWxlZ2F0aW9uUmV3YXJkc1Jlc3BvbnNlXCIsIGVuY29kZShlMiwgbzIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpIHtcbiAgZm9yIChjb25zdCBzMyBvZiBlMi5yZXdhcmRzKSBEZWNDb2luLmVuY29kZShzMywgbzIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICByZXR1cm4gbzI7XG59LCBkZWNvZGUoZTIsIG8yKSB7XG4gIGNvbnN0IHMzID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgcjYgPSB2b2lkIDAgPT09IG8yID8gczMubGVuIDogczMucG9zICsgbzI7XG4gIGNvbnN0IHQ1ID0geyByZXdhcmRzOiBbXSB9O1xuICBmb3IgKDsgczMucG9zIDwgcjY7ICkge1xuICAgIGNvbnN0IGUzID0gczMudWludDMyKCk7XG4gICAgaWYgKGUzID4+PiAzID09IDEpIHQ1LnJld2FyZHMucHVzaChEZWNDb2luLmRlY29kZShzMywgczMudWludDMyKCkpKTtcbiAgICBlbHNlIHMzLnNraXBUeXBlKDcgJiBlMyk7XG4gIH1cbiAgcmV0dXJuIHQ1O1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgcmV3YXJkczogQXJyYXkuaXNBcnJheShlMj8ucmV3YXJkcykgPyBlMi5yZXdhcmRzLm1hcCgoKGUzKSA9PiBEZWNDb2luLmZyb21KU09OKGUzKSkpIDogW10gfSksIHRvSlNPTihlMikge1xuICBjb25zdCBvMiA9IHt9O1xuICByZXR1cm4gZTIucmV3YXJkcyA/IG8yLnJld2FyZHMgPSBlMi5yZXdhcmRzLm1hcCgoKGUzKSA9PiBlMyA/IERlY0NvaW4udG9KU09OKGUzKSA6IHZvaWQgMCkpIDogbzIucmV3YXJkcyA9IFtdLCBvMjtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IG8yID0geyByZXdhcmRzOiBbXSB9O1xuICByZXR1cm4gbzIucmV3YXJkcyA9IGUyLnJld2FyZHM/Lm1hcCgoKGUzKSA9PiBEZWNDb2luLmZyb21QYXJ0aWFsKGUzKSkpIHx8IFtdLCBvMjtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBRdWVyeURlbGVnYXRpb25SZXdhcmRzUmVzcG9uc2UuZGVjb2RlKGUyLnZhbHVlKSwgdG9Qcm90bzogKGUyKSA9PiBRdWVyeURlbGVnYXRpb25SZXdhcmRzUmVzcG9uc2UuZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3MuZGlzdHJpYnV0aW9uLnYxYmV0YTEuUXVlcnlEZWxlZ2F0aW9uUmV3YXJkc1Jlc3BvbnNlXCIsIHZhbHVlOiBRdWVyeURlbGVnYXRpb25SZXdhcmRzUmVzcG9uc2UuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xudmFyIFF1ZXJ5RGVsZWdhdGlvblRvdGFsUmV3YXJkc1JlcXVlc3QgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5kaXN0cmlidXRpb24udjFiZXRhMS5RdWVyeURlbGVnYXRpb25Ub3RhbFJld2FyZHNSZXF1ZXN0XCIsIGVuY29kZTogKGUyLCBvMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKFwiXCIgIT09IGUyLmRlbGVnYXRvckFkZHJlc3MgJiYgbzIudWludDMyKDEwKS5zdHJpbmcoZTIuZGVsZWdhdG9yQWRkcmVzcyksIG8yKSwgZGVjb2RlKGUyLCBvMikge1xuICBjb25zdCBzMyA9IGUyIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gZTIgOiBuZXcgQmluYXJ5UmVhZGVyKGUyKTtcbiAgbGV0IHI2ID0gdm9pZCAwID09PSBvMiA/IHMzLmxlbiA6IHMzLnBvcyArIG8yO1xuICBjb25zdCB0NSA9IHsgZGVsZWdhdG9yQWRkcmVzczogXCJcIiB9O1xuICBmb3IgKDsgczMucG9zIDwgcjY7ICkge1xuICAgIGNvbnN0IGUzID0gczMudWludDMyKCk7XG4gICAgaWYgKGUzID4+PiAzID09IDEpIHQ1LmRlbGVnYXRvckFkZHJlc3MgPSBzMy5zdHJpbmcoKTtcbiAgICBlbHNlIHMzLnNraXBUeXBlKDcgJiBlMyk7XG4gIH1cbiAgcmV0dXJuIHQ1O1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgZGVsZWdhdG9yQWRkcmVzczogaXNTZXQoZTIuZGVsZWdhdG9yQWRkcmVzcykgPyBTdHJpbmcoZTIuZGVsZWdhdG9yQWRkcmVzcykgOiBcIlwiIH0pLCB0b0pTT04oZTIpIHtcbiAgY29uc3QgbzIgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gZTIuZGVsZWdhdG9yQWRkcmVzcyAmJiAobzIuZGVsZWdhdG9yQWRkcmVzcyA9IGUyLmRlbGVnYXRvckFkZHJlc3MpLCBvMjtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IG8yID0geyBkZWxlZ2F0b3JBZGRyZXNzOiBcIlwiIH07XG4gIHJldHVybiBvMi5kZWxlZ2F0b3JBZGRyZXNzID0gZTIuZGVsZWdhdG9yQWRkcmVzcyA/PyBcIlwiLCBvMjtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBRdWVyeURlbGVnYXRpb25Ub3RhbFJld2FyZHNSZXF1ZXN0LmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gUXVlcnlEZWxlZ2F0aW9uVG90YWxSZXdhcmRzUmVxdWVzdC5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5kaXN0cmlidXRpb24udjFiZXRhMS5RdWVyeURlbGVnYXRpb25Ub3RhbFJld2FyZHNSZXF1ZXN0XCIsIHZhbHVlOiBRdWVyeURlbGVnYXRpb25Ub3RhbFJld2FyZHNSZXF1ZXN0LmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcbnZhciBRdWVyeURlbGVnYXRpb25Ub3RhbFJld2FyZHNSZXNwb25zZSA9IHsgdHlwZVVybDogXCIvY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLlF1ZXJ5RGVsZWdhdGlvblRvdGFsUmV3YXJkc1Jlc3BvbnNlXCIsIGVuY29kZShlMiwgbzIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpIHtcbiAgZm9yIChjb25zdCBzMyBvZiBlMi5yZXdhcmRzKSBEZWxlZ2F0aW9uRGVsZWdhdG9yUmV3YXJkLmVuY29kZShzMywgbzIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICBmb3IgKGNvbnN0IHMzIG9mIGUyLnRvdGFsKSBEZWNDb2luLmVuY29kZShzMywgbzIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICByZXR1cm4gbzI7XG59LCBkZWNvZGUoZTIsIG8yKSB7XG4gIGNvbnN0IHMzID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgcjYgPSB2b2lkIDAgPT09IG8yID8gczMubGVuIDogczMucG9zICsgbzI7XG4gIGNvbnN0IHQ1ID0geyByZXdhcmRzOiBbXSwgdG90YWw6IFtdIH07XG4gIGZvciAoOyBzMy5wb3MgPCByNjsgKSB7XG4gICAgY29uc3QgZTMgPSBzMy51aW50MzIoKTtcbiAgICBzd2l0Y2ggKGUzID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHQ1LnJld2FyZHMucHVzaChEZWxlZ2F0aW9uRGVsZWdhdG9yUmV3YXJkLmRlY29kZShzMywgczMudWludDMyKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHQ1LnRvdGFsLnB1c2goRGVjQ29pbi5kZWNvZGUoczMsIHMzLnVpbnQzMigpKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgczMuc2tpcFR5cGUoNyAmIGUzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHQ1O1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgcmV3YXJkczogQXJyYXkuaXNBcnJheShlMj8ucmV3YXJkcykgPyBlMi5yZXdhcmRzLm1hcCgoKGUzKSA9PiBEZWxlZ2F0aW9uRGVsZWdhdG9yUmV3YXJkLmZyb21KU09OKGUzKSkpIDogW10sIHRvdGFsOiBBcnJheS5pc0FycmF5KGUyPy50b3RhbCkgPyBlMi50b3RhbC5tYXAoKChlMykgPT4gRGVjQ29pbi5mcm9tSlNPTihlMykpKSA6IFtdIH0pLCB0b0pTT04oZTIpIHtcbiAgY29uc3QgbzIgPSB7fTtcbiAgcmV0dXJuIGUyLnJld2FyZHMgPyBvMi5yZXdhcmRzID0gZTIucmV3YXJkcy5tYXAoKChlMykgPT4gZTMgPyBEZWxlZ2F0aW9uRGVsZWdhdG9yUmV3YXJkLnRvSlNPTihlMykgOiB2b2lkIDApKSA6IG8yLnJld2FyZHMgPSBbXSwgZTIudG90YWwgPyBvMi50b3RhbCA9IGUyLnRvdGFsLm1hcCgoKGUzKSA9PiBlMyA/IERlY0NvaW4udG9KU09OKGUzKSA6IHZvaWQgMCkpIDogbzIudG90YWwgPSBbXSwgbzI7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCBvMiA9IHsgcmV3YXJkczogW10sIHRvdGFsOiBbXSB9O1xuICByZXR1cm4gbzIucmV3YXJkcyA9IGUyLnJld2FyZHM/Lm1hcCgoKGUzKSA9PiBEZWxlZ2F0aW9uRGVsZWdhdG9yUmV3YXJkLmZyb21QYXJ0aWFsKGUzKSkpIHx8IFtdLCBvMi50b3RhbCA9IGUyLnRvdGFsPy5tYXAoKChlMykgPT4gRGVjQ29pbi5mcm9tUGFydGlhbChlMykpKSB8fCBbXSwgbzI7XG59LCBmcm9tUHJvdG9Nc2c6IChlMikgPT4gUXVlcnlEZWxlZ2F0aW9uVG90YWxSZXdhcmRzUmVzcG9uc2UuZGVjb2RlKGUyLnZhbHVlKSwgdG9Qcm90bzogKGUyKSA9PiBRdWVyeURlbGVnYXRpb25Ub3RhbFJld2FyZHNSZXNwb25zZS5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5kaXN0cmlidXRpb24udjFiZXRhMS5RdWVyeURlbGVnYXRpb25Ub3RhbFJld2FyZHNSZXNwb25zZVwiLCB2YWx1ZTogUXVlcnlEZWxlZ2F0aW9uVG90YWxSZXdhcmRzUmVzcG9uc2UuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xuXG4vKiAuLi9jb3NtaWMtcHJvdG8vZGlzdC9jb2RlZ2VuL2Nvc21vcy9kaXN0cmlidXRpb24vdjFiZXRhMS90eC5qcyovXG52YXIgTXNnV2l0aGRyYXdEZWxlZ2F0b3JSZXdhcmQgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5kaXN0cmlidXRpb24udjFiZXRhMS5Nc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZFwiLCBlbmNvZGU6IChvMiwgdDUgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+IChcIlwiICE9PSBvMi5kZWxlZ2F0b3JBZGRyZXNzICYmIHQ1LnVpbnQzMigxMCkuc3RyaW5nKG8yLmRlbGVnYXRvckFkZHJlc3MpLCBcIlwiICE9PSBvMi52YWxpZGF0b3JBZGRyZXNzICYmIHQ1LnVpbnQzMigxOCkuc3RyaW5nKG8yLnZhbGlkYXRvckFkZHJlc3MpLCB0NSksIGRlY29kZShvMiwgdDUpIHtcbiAgY29uc3QgczMgPSBvMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IG8yIDogbmV3IEJpbmFyeVJlYWRlcihvMik7XG4gIGxldCByNiA9IHZvaWQgMCA9PT0gdDUgPyBzMy5sZW4gOiBzMy5wb3MgKyB0NTtcbiAgY29uc3QgZCA9IHsgZGVsZWdhdG9yQWRkcmVzczogXCJcIiwgdmFsaWRhdG9yQWRkcmVzczogXCJcIiB9O1xuICBmb3IgKDsgczMucG9zIDwgcjY7ICkge1xuICAgIGNvbnN0IG8zID0gczMudWludDMyKCk7XG4gICAgc3dpdGNoIChvMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBkLmRlbGVnYXRvckFkZHJlc3MgPSBzMy5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGQudmFsaWRhdG9yQWRkcmVzcyA9IHMzLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHMzLnNraXBUeXBlKDcgJiBvMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkO1xufSwgZnJvbUpTT046IChvMikgPT4gKHsgZGVsZWdhdG9yQWRkcmVzczogaXNTZXQobzIuZGVsZWdhdG9yQWRkcmVzcykgPyBTdHJpbmcobzIuZGVsZWdhdG9yQWRkcmVzcykgOiBcIlwiLCB2YWxpZGF0b3JBZGRyZXNzOiBpc1NldChvMi52YWxpZGF0b3JBZGRyZXNzKSA/IFN0cmluZyhvMi52YWxpZGF0b3JBZGRyZXNzKSA6IFwiXCIgfSksIHRvSlNPTihvMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBvMi5kZWxlZ2F0b3JBZGRyZXNzICYmICh0NS5kZWxlZ2F0b3JBZGRyZXNzID0gbzIuZGVsZWdhdG9yQWRkcmVzcyksIHZvaWQgMCAhPT0gbzIudmFsaWRhdG9yQWRkcmVzcyAmJiAodDUudmFsaWRhdG9yQWRkcmVzcyA9IG8yLnZhbGlkYXRvckFkZHJlc3MpLCB0NTtcbn0sIGZyb21QYXJ0aWFsKG8yKSB7XG4gIGNvbnN0IHQ1ID0geyBkZWxlZ2F0b3JBZGRyZXNzOiBcIlwiLCB2YWxpZGF0b3JBZGRyZXNzOiBcIlwiIH07XG4gIHJldHVybiB0NS5kZWxlZ2F0b3JBZGRyZXNzID0gbzIuZGVsZWdhdG9yQWRkcmVzcyA/PyBcIlwiLCB0NS52YWxpZGF0b3JBZGRyZXNzID0gbzIudmFsaWRhdG9yQWRkcmVzcyA/PyBcIlwiLCB0NTtcbn0sIGZyb21Qcm90b01zZzogKG8yKSA9PiBNc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZC5kZWNvZGUobzIudmFsdWUpLCB0b1Byb3RvOiAobzIpID0+IE1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkLmVuY29kZShvMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChvMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLk1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkXCIsIHZhbHVlOiBNc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZC5lbmNvZGUobzIpLmZpbmlzaCgpIH0pIH07XG52YXIgTXNnV2l0aGRyYXdEZWxlZ2F0b3JSZXdhcmRSZXNwb25zZSA9IHsgdHlwZVVybDogXCIvY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLk1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkUmVzcG9uc2VcIiwgZW5jb2RlKHQ1LCBlMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkge1xuICBmb3IgKGNvbnN0IHMzIG9mIHQ1LmFtb3VudCkgQ29pbi5lbmNvZGUoczMsIGUyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgcmV0dXJuIGUyO1xufSwgZGVjb2RlKHQ1LCBzMykge1xuICBjb25zdCByNiA9IHQ1IGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gdDUgOiBuZXcgQmluYXJ5UmVhZGVyKHQ1KTtcbiAgbGV0IGQgPSB2b2lkIDAgPT09IHMzID8gcjYubGVuIDogcjYucG9zICsgczM7XG4gIGNvbnN0IGEyID0geyBhbW91bnQ6IFtdIH07XG4gIGZvciAoOyByNi5wb3MgPCBkOyApIHtcbiAgICBjb25zdCB0NiA9IHI2LnVpbnQzMigpO1xuICAgIGlmICh0NiA+Pj4gMyA9PSAxKSBhMi5hbW91bnQucHVzaChDb2luLmRlY29kZShyNiwgcjYudWludDMyKCkpKTtcbiAgICBlbHNlIHI2LnNraXBUeXBlKDcgJiB0Nik7XG4gIH1cbiAgcmV0dXJuIGEyO1xufSwgZnJvbUpTT046ICh0NSkgPT4gKHsgYW1vdW50OiBBcnJheS5pc0FycmF5KHQ1Py5hbW91bnQpID8gdDUuYW1vdW50Lm1hcCgoKHQ2KSA9PiBDb2luLmZyb21KU09OKHQ2KSkpIDogW10gfSksIHRvSlNPTih0NSkge1xuICBjb25zdCBlMiA9IHt9O1xuICByZXR1cm4gdDUuYW1vdW50ID8gZTIuYW1vdW50ID0gdDUuYW1vdW50Lm1hcCgoKHQ2KSA9PiB0NiA/IENvaW4udG9KU09OKHQ2KSA6IHZvaWQgMCkpIDogZTIuYW1vdW50ID0gW10sIGUyO1xufSwgZnJvbVBhcnRpYWwodDUpIHtcbiAgY29uc3QgZTIgPSB7IGFtb3VudDogW10gfTtcbiAgcmV0dXJuIGUyLmFtb3VudCA9IHQ1LmFtb3VudD8ubWFwKCgodDYpID0+IENvaW4uZnJvbVBhcnRpYWwodDYpKSkgfHwgW10sIGUyO1xufSwgZnJvbVByb3RvTXNnOiAobzIpID0+IE1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkUmVzcG9uc2UuZGVjb2RlKG8yLnZhbHVlKSwgdG9Qcm90bzogKG8yKSA9PiBNc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZFJlc3BvbnNlLmVuY29kZShvMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChvMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLk1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkUmVzcG9uc2VcIiwgdmFsdWU6IE1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkUmVzcG9uc2UuZW5jb2RlKG8yKS5maW5pc2goKSB9KSB9O1xuXG4vKiAuLi9jb3NtaWMtcHJvdG8vZGlzdC9jb2RlZ2VuL3RlbmRlcm1pbnQvdHlwZXMvdHlwZXMuanMqL1xudmFyIFNpZ25lZE1zZ1R5cGU7XG4hKGZ1bmN0aW9uKGUyKSB7XG4gIGUyW2UyLlNJR05FRF9NU0dfVFlQRV9VTktOT1dOID0gMF0gPSBcIlNJR05FRF9NU0dfVFlQRV9VTktOT1dOXCIsIGUyW2UyLlNJR05FRF9NU0dfVFlQRV9QUkVWT1RFID0gMV0gPSBcIlNJR05FRF9NU0dfVFlQRV9QUkVWT1RFXCIsIGUyW2UyLlNJR05FRF9NU0dfVFlQRV9QUkVDT01NSVQgPSAyXSA9IFwiU0lHTkVEX01TR19UWVBFX1BSRUNPTU1JVFwiLCBlMltlMi5TSUdORURfTVNHX1RZUEVfUFJPUE9TQUwgPSAzMl0gPSBcIlNJR05FRF9NU0dfVFlQRV9QUk9QT1NBTFwiLCBlMltlMi5VTlJFQ09HTklaRUQgPSAtMV0gPSBcIlVOUkVDT0dOSVpFRFwiO1xufSkoU2lnbmVkTXNnVHlwZSB8fCAoU2lnbmVkTXNnVHlwZSA9IHt9KSk7XG5cbi8qIC4uL2Nvc21pYy1wcm90by9kaXN0L2NvZGVnZW4vY29zbW9zL3N0YWtpbmcvdjFiZXRhMS9zdGFraW5nLmpzKi9cbnZhciBCb25kU3RhdHVzO1xuIShmdW5jdGlvbihlMikge1xuICBlMltlMi5CT05EX1NUQVRVU19VTlNQRUNJRklFRCA9IDBdID0gXCJCT05EX1NUQVRVU19VTlNQRUNJRklFRFwiLCBlMltlMi5CT05EX1NUQVRVU19VTkJPTkRFRCA9IDFdID0gXCJCT05EX1NUQVRVU19VTkJPTkRFRFwiLCBlMltlMi5CT05EX1NUQVRVU19VTkJPTkRJTkcgPSAyXSA9IFwiQk9ORF9TVEFUVVNfVU5CT05ESU5HXCIsIGUyW2UyLkJPTkRfU1RBVFVTX0JPTkRFRCA9IDNdID0gXCJCT05EX1NUQVRVU19CT05ERURcIiwgZTJbZTIuVU5SRUNPR05JWkVEID0gLTFdID0gXCJVTlJFQ09HTklaRURcIjtcbn0pKEJvbmRTdGF0dXMgfHwgKEJvbmRTdGF0dXMgPSB7fSkpO1xudmFyIEluZnJhY3Rpb247XG4hKGZ1bmN0aW9uKGUyKSB7XG4gIGUyW2UyLklORlJBQ1RJT05fVU5TUEVDSUZJRUQgPSAwXSA9IFwiSU5GUkFDVElPTl9VTlNQRUNJRklFRFwiLCBlMltlMi5JTkZSQUNUSU9OX0RPVUJMRV9TSUdOID0gMV0gPSBcIklORlJBQ1RJT05fRE9VQkxFX1NJR05cIiwgZTJbZTIuSU5GUkFDVElPTl9ET1dOVElNRSA9IDJdID0gXCJJTkZSQUNUSU9OX0RPV05USU1FXCIsIGUyW2UyLlVOUkVDT0dOSVpFRCA9IC0xXSA9IFwiVU5SRUNPR05JWkVEXCI7XG59KShJbmZyYWN0aW9uIHx8IChJbmZyYWN0aW9uID0ge30pKTtcbnZhciBEZWxlZ2F0aW9uID0geyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLkRlbGVnYXRpb25cIiwgZW5jb2RlOiAoZTIsIHQ1ID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAoXCJcIiAhPT0gZTIuZGVsZWdhdG9yQWRkcmVzcyAmJiB0NS51aW50MzIoMTApLnN0cmluZyhlMi5kZWxlZ2F0b3JBZGRyZXNzKSwgXCJcIiAhPT0gZTIudmFsaWRhdG9yQWRkcmVzcyAmJiB0NS51aW50MzIoMTgpLnN0cmluZyhlMi52YWxpZGF0b3JBZGRyZXNzKSwgXCJcIiAhPT0gZTIuc2hhcmVzICYmIHQ1LnVpbnQzMigyNikuc3RyaW5nKERlY2ltYWwuZnJvbVVzZXJJbnB1dChlMi5zaGFyZXMsIDE4KS5hdG9taWNzKSwgdDUpLCBkZWNvZGUoZTIsIHQ1KSB7XG4gIGNvbnN0IG8yID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgbjIgPSB2b2lkIDAgPT09IHQ1ID8gbzIubGVuIDogbzIucG9zICsgdDU7XG4gIGNvbnN0IGkzID0geyBkZWxlZ2F0b3JBZGRyZXNzOiBcIlwiLCB2YWxpZGF0b3JBZGRyZXNzOiBcIlwiLCBzaGFyZXM6IFwiXCIgfTtcbiAgZm9yICg7IG8yLnBvcyA8IG4yOyApIHtcbiAgICBjb25zdCBlMyA9IG8yLnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaTMuZGVsZWdhdG9yQWRkcmVzcyA9IG8yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaTMudmFsaWRhdG9yQWRkcmVzcyA9IG8yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaTMuc2hhcmVzID0gRGVjaW1hbC5mcm9tQXRvbWljcyhvMi5zdHJpbmcoKSwgMTgpLnRvU3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbzIuc2tpcFR5cGUoNyAmIGUzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkzO1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgZGVsZWdhdG9yQWRkcmVzczogaXNTZXQoZTIuZGVsZWdhdG9yQWRkcmVzcykgPyBTdHJpbmcoZTIuZGVsZWdhdG9yQWRkcmVzcykgOiBcIlwiLCB2YWxpZGF0b3JBZGRyZXNzOiBpc1NldChlMi52YWxpZGF0b3JBZGRyZXNzKSA/IFN0cmluZyhlMi52YWxpZGF0b3JBZGRyZXNzKSA6IFwiXCIsIHNoYXJlczogaXNTZXQoZTIuc2hhcmVzKSA/IFN0cmluZyhlMi5zaGFyZXMpIDogXCJcIiB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IHQ1ID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLmRlbGVnYXRvckFkZHJlc3MgJiYgKHQ1LmRlbGVnYXRvckFkZHJlc3MgPSBlMi5kZWxlZ2F0b3JBZGRyZXNzKSwgdm9pZCAwICE9PSBlMi52YWxpZGF0b3JBZGRyZXNzICYmICh0NS52YWxpZGF0b3JBZGRyZXNzID0gZTIudmFsaWRhdG9yQWRkcmVzcyksIHZvaWQgMCAhPT0gZTIuc2hhcmVzICYmICh0NS5zaGFyZXMgPSBlMi5zaGFyZXMpLCB0NTtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IHQ1ID0geyBkZWxlZ2F0b3JBZGRyZXNzOiBcIlwiLCB2YWxpZGF0b3JBZGRyZXNzOiBcIlwiLCBzaGFyZXM6IFwiXCIgfTtcbiAgcmV0dXJuIHQ1LmRlbGVnYXRvckFkZHJlc3MgPSBlMi5kZWxlZ2F0b3JBZGRyZXNzID8/IFwiXCIsIHQ1LnZhbGlkYXRvckFkZHJlc3MgPSBlMi52YWxpZGF0b3JBZGRyZXNzID8/IFwiXCIsIHQ1LnNoYXJlcyA9IGUyLnNoYXJlcyA/PyBcIlwiLCB0NTtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBEZWxlZ2F0aW9uLmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gRGVsZWdhdGlvbi5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuRGVsZWdhdGlvblwiLCB2YWx1ZTogRGVsZWdhdGlvbi5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG52YXIgVW5ib25kaW5nRGVsZWdhdGlvbiA9IHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5VbmJvbmRpbmdEZWxlZ2F0aW9uXCIsIGVuY29kZShlMiwgdDUgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpIHtcbiAgXCJcIiAhPT0gZTIuZGVsZWdhdG9yQWRkcmVzcyAmJiB0NS51aW50MzIoMTApLnN0cmluZyhlMi5kZWxlZ2F0b3JBZGRyZXNzKSwgXCJcIiAhPT0gZTIudmFsaWRhdG9yQWRkcmVzcyAmJiB0NS51aW50MzIoMTgpLnN0cmluZyhlMi52YWxpZGF0b3JBZGRyZXNzKTtcbiAgZm9yIChjb25zdCBvMiBvZiBlMi5lbnRyaWVzKSBVbmJvbmRpbmdEZWxlZ2F0aW9uRW50cnkuZW5jb2RlKG8yLCB0NS51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7XG4gIHJldHVybiB0NTtcbn0sIGRlY29kZShlMiwgdDUpIHtcbiAgY29uc3QgbzIgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCBuMiA9IHZvaWQgMCA9PT0gdDUgPyBvMi5sZW4gOiBvMi5wb3MgKyB0NTtcbiAgY29uc3QgaTMgPSB7IGRlbGVnYXRvckFkZHJlc3M6IFwiXCIsIHZhbGlkYXRvckFkZHJlc3M6IFwiXCIsIGVudHJpZXM6IFtdIH07XG4gIGZvciAoOyBvMi5wb3MgPCBuMjsgKSB7XG4gICAgY29uc3QgZTMgPSBvMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKGUzID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGkzLmRlbGVnYXRvckFkZHJlc3MgPSBvMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGkzLnZhbGlkYXRvckFkZHJlc3MgPSBvMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGkzLmVudHJpZXMucHVzaChVbmJvbmRpbmdEZWxlZ2F0aW9uRW50cnkuZGVjb2RlKG8yLCBvMi51aW50MzIoKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG8yLnNraXBUeXBlKDcgJiBlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpMztcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IGRlbGVnYXRvckFkZHJlc3M6IGlzU2V0KGUyLmRlbGVnYXRvckFkZHJlc3MpID8gU3RyaW5nKGUyLmRlbGVnYXRvckFkZHJlc3MpIDogXCJcIiwgdmFsaWRhdG9yQWRkcmVzczogaXNTZXQoZTIudmFsaWRhdG9yQWRkcmVzcykgPyBTdHJpbmcoZTIudmFsaWRhdG9yQWRkcmVzcykgOiBcIlwiLCBlbnRyaWVzOiBBcnJheS5pc0FycmF5KGUyPy5lbnRyaWVzKSA/IGUyLmVudHJpZXMubWFwKCgoZTMpID0+IFVuYm9uZGluZ0RlbGVnYXRpb25FbnRyeS5mcm9tSlNPTihlMykpKSA6IFtdIH0pLCB0b0pTT04oZTIpIHtcbiAgY29uc3QgdDUgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gZTIuZGVsZWdhdG9yQWRkcmVzcyAmJiAodDUuZGVsZWdhdG9yQWRkcmVzcyA9IGUyLmRlbGVnYXRvckFkZHJlc3MpLCB2b2lkIDAgIT09IGUyLnZhbGlkYXRvckFkZHJlc3MgJiYgKHQ1LnZhbGlkYXRvckFkZHJlc3MgPSBlMi52YWxpZGF0b3JBZGRyZXNzKSwgZTIuZW50cmllcyA/IHQ1LmVudHJpZXMgPSBlMi5lbnRyaWVzLm1hcCgoKGUzKSA9PiBlMyA/IFVuYm9uZGluZ0RlbGVnYXRpb25FbnRyeS50b0pTT04oZTMpIDogdm9pZCAwKSkgOiB0NS5lbnRyaWVzID0gW10sIHQ1O1xufSwgZnJvbVBhcnRpYWwoZTIpIHtcbiAgY29uc3QgdDUgPSB7IGRlbGVnYXRvckFkZHJlc3M6IFwiXCIsIHZhbGlkYXRvckFkZHJlc3M6IFwiXCIsIGVudHJpZXM6IFtdIH07XG4gIHJldHVybiB0NS5kZWxlZ2F0b3JBZGRyZXNzID0gZTIuZGVsZWdhdG9yQWRkcmVzcyA/PyBcIlwiLCB0NS52YWxpZGF0b3JBZGRyZXNzID0gZTIudmFsaWRhdG9yQWRkcmVzcyA/PyBcIlwiLCB0NS5lbnRyaWVzID0gZTIuZW50cmllcz8ubWFwKCgoZTMpID0+IFVuYm9uZGluZ0RlbGVnYXRpb25FbnRyeS5mcm9tUGFydGlhbChlMykpKSB8fCBbXSwgdDU7XG59LCBmcm9tUHJvdG9Nc2c6IChlMikgPT4gVW5ib25kaW5nRGVsZWdhdGlvbi5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IFVuYm9uZGluZ0RlbGVnYXRpb24uZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlVuYm9uZGluZ0RlbGVnYXRpb25cIiwgdmFsdWU6IFVuYm9uZGluZ0RlbGVnYXRpb24uZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xuZnVuY3Rpb24gZigpIHtcbiAgcmV0dXJuIHsgY3JlYXRpb25IZWlnaHQ6IEJpZ0ludCgwKSwgY29tcGxldGlvblRpbWU6IFRpbWVzdGFtcC5mcm9tUGFydGlhbCh7fSksIGluaXRpYWxCYWxhbmNlOiBcIlwiLCBiYWxhbmNlOiBcIlwiLCB1bmJvbmRpbmdJZDogQmlnSW50KDApLCB1bmJvbmRpbmdPbkhvbGRSZWZDb3VudDogQmlnSW50KDApIH07XG59XG52YXIgVW5ib25kaW5nRGVsZWdhdGlvbkVudHJ5ID0geyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlVuYm9uZGluZ0RlbGVnYXRpb25FbnRyeVwiLCBlbmNvZGU6IChlMiwgbzIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+IChlMi5jcmVhdGlvbkhlaWdodCAhPT0gQmlnSW50KDApICYmIG8yLnVpbnQzMig4KS5pbnQ2NChlMi5jcmVhdGlvbkhlaWdodCksIHZvaWQgMCAhPT0gZTIuY29tcGxldGlvblRpbWUgJiYgVGltZXN0YW1wLmVuY29kZShlMi5jb21wbGV0aW9uVGltZSwgbzIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpLCBcIlwiICE9PSBlMi5pbml0aWFsQmFsYW5jZSAmJiBvMi51aW50MzIoMjYpLnN0cmluZyhlMi5pbml0aWFsQmFsYW5jZSksIFwiXCIgIT09IGUyLmJhbGFuY2UgJiYgbzIudWludDMyKDM0KS5zdHJpbmcoZTIuYmFsYW5jZSksIGUyLnVuYm9uZGluZ0lkICE9PSBCaWdJbnQoMCkgJiYgbzIudWludDMyKDQwKS51aW50NjQoZTIudW5ib25kaW5nSWQpLCBlMi51bmJvbmRpbmdPbkhvbGRSZWZDb3VudCAhPT0gQmlnSW50KDApICYmIG8yLnVpbnQzMig0OCkuaW50NjQoZTIudW5ib25kaW5nT25Ib2xkUmVmQ291bnQpLCBvMiksIGRlY29kZShlMiwgbzIpIHtcbiAgY29uc3QgbjIgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCBpMyA9IHZvaWQgMCA9PT0gbzIgPyBuMi5sZW4gOiBuMi5wb3MgKyBvMjtcbiAgY29uc3QgczMgPSBmKCk7XG4gIGZvciAoOyBuMi5wb3MgPCBpMzsgKSB7XG4gICAgY29uc3QgZTMgPSBuMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKGUzID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHMzLmNyZWF0aW9uSGVpZ2h0ID0gbjIuaW50NjQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHMzLmNvbXBsZXRpb25UaW1lID0gVGltZXN0YW1wLmRlY29kZShuMiwgbjIudWludDMyKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgczMuaW5pdGlhbEJhbGFuY2UgPSBuMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHMzLmJhbGFuY2UgPSBuMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDU6XG4gICAgICAgIHMzLnVuYm9uZGluZ0lkID0gbjIudWludDY0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA2OlxuICAgICAgICBzMy51bmJvbmRpbmdPbkhvbGRSZWZDb3VudCA9IG4yLmludDY0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbjIuc2tpcFR5cGUoNyAmIGUzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHMzO1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgY3JlYXRpb25IZWlnaHQ6IGlzU2V0KGUyLmNyZWF0aW9uSGVpZ2h0KSA/IEJpZ0ludChlMi5jcmVhdGlvbkhlaWdodC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgY29tcGxldGlvblRpbWU6IGlzU2V0KGUyLmNvbXBsZXRpb25UaW1lKSA/IGZyb21Kc29uVGltZXN0YW1wKGUyLmNvbXBsZXRpb25UaW1lKSA6IHZvaWQgMCwgaW5pdGlhbEJhbGFuY2U6IGlzU2V0KGUyLmluaXRpYWxCYWxhbmNlKSA/IFN0cmluZyhlMi5pbml0aWFsQmFsYW5jZSkgOiBcIlwiLCBiYWxhbmNlOiBpc1NldChlMi5iYWxhbmNlKSA/IFN0cmluZyhlMi5iYWxhbmNlKSA6IFwiXCIsIHVuYm9uZGluZ0lkOiBpc1NldChlMi51bmJvbmRpbmdJZCkgPyBCaWdJbnQoZTIudW5ib25kaW5nSWQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIHVuYm9uZGluZ09uSG9sZFJlZkNvdW50OiBpc1NldChlMi51bmJvbmRpbmdPbkhvbGRSZWZDb3VudCkgPyBCaWdJbnQoZTIudW5ib25kaW5nT25Ib2xkUmVmQ291bnQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCkgfSksIHRvSlNPTihlMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5jcmVhdGlvbkhlaWdodCAmJiAodDUuY3JlYXRpb25IZWlnaHQgPSAoZTIuY3JlYXRpb25IZWlnaHQgfHwgQmlnSW50KDApKS50b1N0cmluZygpKSwgdm9pZCAwICE9PSBlMi5jb21wbGV0aW9uVGltZSAmJiAodDUuY29tcGxldGlvblRpbWUgPSBmcm9tVGltZXN0YW1wKGUyLmNvbXBsZXRpb25UaW1lKS50b0lTT1N0cmluZygpKSwgdm9pZCAwICE9PSBlMi5pbml0aWFsQmFsYW5jZSAmJiAodDUuaW5pdGlhbEJhbGFuY2UgPSBlMi5pbml0aWFsQmFsYW5jZSksIHZvaWQgMCAhPT0gZTIuYmFsYW5jZSAmJiAodDUuYmFsYW5jZSA9IGUyLmJhbGFuY2UpLCB2b2lkIDAgIT09IGUyLnVuYm9uZGluZ0lkICYmICh0NS51bmJvbmRpbmdJZCA9IChlMi51bmJvbmRpbmdJZCB8fCBCaWdJbnQoMCkpLnRvU3RyaW5nKCkpLCB2b2lkIDAgIT09IGUyLnVuYm9uZGluZ09uSG9sZFJlZkNvdW50ICYmICh0NS51bmJvbmRpbmdPbkhvbGRSZWZDb3VudCA9IChlMi51bmJvbmRpbmdPbkhvbGRSZWZDb3VudCB8fCBCaWdJbnQoMCkpLnRvU3RyaW5nKCkpLCB0NTtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IG8yID0gZigpO1xuICByZXR1cm4gbzIuY3JlYXRpb25IZWlnaHQgPSB2b2lkIDAgIT09IGUyLmNyZWF0aW9uSGVpZ2h0ICYmIG51bGwgIT09IGUyLmNyZWF0aW9uSGVpZ2h0ID8gQmlnSW50KGUyLmNyZWF0aW9uSGVpZ2h0LnRvU3RyaW5nKCkpIDogQmlnSW50KDApLCBvMi5jb21wbGV0aW9uVGltZSA9IHZvaWQgMCAhPT0gZTIuY29tcGxldGlvblRpbWUgJiYgbnVsbCAhPT0gZTIuY29tcGxldGlvblRpbWUgPyBUaW1lc3RhbXAuZnJvbVBhcnRpYWwoZTIuY29tcGxldGlvblRpbWUpIDogdm9pZCAwLCBvMi5pbml0aWFsQmFsYW5jZSA9IGUyLmluaXRpYWxCYWxhbmNlID8/IFwiXCIsIG8yLmJhbGFuY2UgPSBlMi5iYWxhbmNlID8/IFwiXCIsIG8yLnVuYm9uZGluZ0lkID0gdm9pZCAwICE9PSBlMi51bmJvbmRpbmdJZCAmJiBudWxsICE9PSBlMi51bmJvbmRpbmdJZCA/IEJpZ0ludChlMi51bmJvbmRpbmdJZC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgbzIudW5ib25kaW5nT25Ib2xkUmVmQ291bnQgPSB2b2lkIDAgIT09IGUyLnVuYm9uZGluZ09uSG9sZFJlZkNvdW50ICYmIG51bGwgIT09IGUyLnVuYm9uZGluZ09uSG9sZFJlZkNvdW50ID8gQmlnSW50KGUyLnVuYm9uZGluZ09uSG9sZFJlZkNvdW50LnRvU3RyaW5nKCkpIDogQmlnSW50KDApLCBvMjtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBVbmJvbmRpbmdEZWxlZ2F0aW9uRW50cnkuZGVjb2RlKGUyLnZhbHVlKSwgdG9Qcm90bzogKGUyKSA9PiBVbmJvbmRpbmdEZWxlZ2F0aW9uRW50cnkuZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlVuYm9uZGluZ0RlbGVnYXRpb25FbnRyeVwiLCB2YWx1ZTogVW5ib25kaW5nRGVsZWdhdGlvbkVudHJ5LmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcbmZ1bmN0aW9uIGIyKCkge1xuICByZXR1cm4geyBjcmVhdGlvbkhlaWdodDogQmlnSW50KDApLCBjb21wbGV0aW9uVGltZTogVGltZXN0YW1wLmZyb21QYXJ0aWFsKHt9KSwgaW5pdGlhbEJhbGFuY2U6IFwiXCIsIHNoYXJlc0RzdDogXCJcIiwgdW5ib25kaW5nSWQ6IEJpZ0ludCgwKSwgdW5ib25kaW5nT25Ib2xkUmVmQ291bnQ6IEJpZ0ludCgwKSB9O1xufVxudmFyIFJlZGVsZWdhdGlvbkVudHJ5ID0geyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlJlZGVsZWdhdGlvbkVudHJ5XCIsIGVuY29kZTogKGUyLCBvMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKGUyLmNyZWF0aW9uSGVpZ2h0ICE9PSBCaWdJbnQoMCkgJiYgbzIudWludDMyKDgpLmludDY0KGUyLmNyZWF0aW9uSGVpZ2h0KSwgdm9pZCAwICE9PSBlMi5jb21wbGV0aW9uVGltZSAmJiBUaW1lc3RhbXAuZW5jb2RlKGUyLmNvbXBsZXRpb25UaW1lLCBvMi51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCksIFwiXCIgIT09IGUyLmluaXRpYWxCYWxhbmNlICYmIG8yLnVpbnQzMigyNikuc3RyaW5nKGUyLmluaXRpYWxCYWxhbmNlKSwgXCJcIiAhPT0gZTIuc2hhcmVzRHN0ICYmIG8yLnVpbnQzMigzNCkuc3RyaW5nKERlY2ltYWwuZnJvbVVzZXJJbnB1dChlMi5zaGFyZXNEc3QsIDE4KS5hdG9taWNzKSwgZTIudW5ib25kaW5nSWQgIT09IEJpZ0ludCgwKSAmJiBvMi51aW50MzIoNDApLnVpbnQ2NChlMi51bmJvbmRpbmdJZCksIGUyLnVuYm9uZGluZ09uSG9sZFJlZkNvdW50ICE9PSBCaWdJbnQoMCkgJiYgbzIudWludDMyKDQ4KS5pbnQ2NChlMi51bmJvbmRpbmdPbkhvbGRSZWZDb3VudCksIG8yKSwgZGVjb2RlKGUyLCBvMikge1xuICBjb25zdCBuMiA9IGUyIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gZTIgOiBuZXcgQmluYXJ5UmVhZGVyKGUyKTtcbiAgbGV0IGkzID0gdm9pZCAwID09PSBvMiA/IG4yLmxlbiA6IG4yLnBvcyArIG8yO1xuICBjb25zdCBzMyA9IGIyKCk7XG4gIGZvciAoOyBuMi5wb3MgPCBpMzsgKSB7XG4gICAgY29uc3QgZTMgPSBuMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKGUzID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHMzLmNyZWF0aW9uSGVpZ2h0ID0gbjIuaW50NjQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHMzLmNvbXBsZXRpb25UaW1lID0gVGltZXN0YW1wLmRlY29kZShuMiwgbjIudWludDMyKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgczMuaW5pdGlhbEJhbGFuY2UgPSBuMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHMzLnNoYXJlc0RzdCA9IERlY2ltYWwuZnJvbUF0b21pY3MobjIuc3RyaW5nKCksIDE4KS50b1N0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNTpcbiAgICAgICAgczMudW5ib25kaW5nSWQgPSBuMi51aW50NjQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDY6XG4gICAgICAgIHMzLnVuYm9uZGluZ09uSG9sZFJlZkNvdW50ID0gbjIuaW50NjQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBuMi5za2lwVHlwZSg3ICYgZTMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gczM7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyBjcmVhdGlvbkhlaWdodDogaXNTZXQoZTIuY3JlYXRpb25IZWlnaHQpID8gQmlnSW50KGUyLmNyZWF0aW9uSGVpZ2h0LnRvU3RyaW5nKCkpIDogQmlnSW50KDApLCBjb21wbGV0aW9uVGltZTogaXNTZXQoZTIuY29tcGxldGlvblRpbWUpID8gZnJvbUpzb25UaW1lc3RhbXAoZTIuY29tcGxldGlvblRpbWUpIDogdm9pZCAwLCBpbml0aWFsQmFsYW5jZTogaXNTZXQoZTIuaW5pdGlhbEJhbGFuY2UpID8gU3RyaW5nKGUyLmluaXRpYWxCYWxhbmNlKSA6IFwiXCIsIHNoYXJlc0RzdDogaXNTZXQoZTIuc2hhcmVzRHN0KSA/IFN0cmluZyhlMi5zaGFyZXNEc3QpIDogXCJcIiwgdW5ib25kaW5nSWQ6IGlzU2V0KGUyLnVuYm9uZGluZ0lkKSA/IEJpZ0ludChlMi51bmJvbmRpbmdJZC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgdW5ib25kaW5nT25Ib2xkUmVmQ291bnQ6IGlzU2V0KGUyLnVuYm9uZGluZ09uSG9sZFJlZkNvdW50KSA/IEJpZ0ludChlMi51bmJvbmRpbmdPbkhvbGRSZWZDb3VudC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IHQ1ID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLmNyZWF0aW9uSGVpZ2h0ICYmICh0NS5jcmVhdGlvbkhlaWdodCA9IChlMi5jcmVhdGlvbkhlaWdodCB8fCBCaWdJbnQoMCkpLnRvU3RyaW5nKCkpLCB2b2lkIDAgIT09IGUyLmNvbXBsZXRpb25UaW1lICYmICh0NS5jb21wbGV0aW9uVGltZSA9IGZyb21UaW1lc3RhbXAoZTIuY29tcGxldGlvblRpbWUpLnRvSVNPU3RyaW5nKCkpLCB2b2lkIDAgIT09IGUyLmluaXRpYWxCYWxhbmNlICYmICh0NS5pbml0aWFsQmFsYW5jZSA9IGUyLmluaXRpYWxCYWxhbmNlKSwgdm9pZCAwICE9PSBlMi5zaGFyZXNEc3QgJiYgKHQ1LnNoYXJlc0RzdCA9IGUyLnNoYXJlc0RzdCksIHZvaWQgMCAhPT0gZTIudW5ib25kaW5nSWQgJiYgKHQ1LnVuYm9uZGluZ0lkID0gKGUyLnVuYm9uZGluZ0lkIHx8IEJpZ0ludCgwKSkudG9TdHJpbmcoKSksIHZvaWQgMCAhPT0gZTIudW5ib25kaW5nT25Ib2xkUmVmQ291bnQgJiYgKHQ1LnVuYm9uZGluZ09uSG9sZFJlZkNvdW50ID0gKGUyLnVuYm9uZGluZ09uSG9sZFJlZkNvdW50IHx8IEJpZ0ludCgwKSkudG9TdHJpbmcoKSksIHQ1O1xufSwgZnJvbVBhcnRpYWwoZTIpIHtcbiAgY29uc3QgbzIgPSBiMigpO1xuICByZXR1cm4gbzIuY3JlYXRpb25IZWlnaHQgPSB2b2lkIDAgIT09IGUyLmNyZWF0aW9uSGVpZ2h0ICYmIG51bGwgIT09IGUyLmNyZWF0aW9uSGVpZ2h0ID8gQmlnSW50KGUyLmNyZWF0aW9uSGVpZ2h0LnRvU3RyaW5nKCkpIDogQmlnSW50KDApLCBvMi5jb21wbGV0aW9uVGltZSA9IHZvaWQgMCAhPT0gZTIuY29tcGxldGlvblRpbWUgJiYgbnVsbCAhPT0gZTIuY29tcGxldGlvblRpbWUgPyBUaW1lc3RhbXAuZnJvbVBhcnRpYWwoZTIuY29tcGxldGlvblRpbWUpIDogdm9pZCAwLCBvMi5pbml0aWFsQmFsYW5jZSA9IGUyLmluaXRpYWxCYWxhbmNlID8/IFwiXCIsIG8yLnNoYXJlc0RzdCA9IGUyLnNoYXJlc0RzdCA/PyBcIlwiLCBvMi51bmJvbmRpbmdJZCA9IHZvaWQgMCAhPT0gZTIudW5ib25kaW5nSWQgJiYgbnVsbCAhPT0gZTIudW5ib25kaW5nSWQgPyBCaWdJbnQoZTIudW5ib25kaW5nSWQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIG8yLnVuYm9uZGluZ09uSG9sZFJlZkNvdW50ID0gdm9pZCAwICE9PSBlMi51bmJvbmRpbmdPbkhvbGRSZWZDb3VudCAmJiBudWxsICE9PSBlMi51bmJvbmRpbmdPbkhvbGRSZWZDb3VudCA/IEJpZ0ludChlMi51bmJvbmRpbmdPbkhvbGRSZWZDb3VudC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgbzI7XG59LCBmcm9tUHJvdG9Nc2c6IChlMikgPT4gUmVkZWxlZ2F0aW9uRW50cnkuZGVjb2RlKGUyLnZhbHVlKSwgdG9Qcm90bzogKGUyKSA9PiBSZWRlbGVnYXRpb25FbnRyeS5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUmVkZWxlZ2F0aW9uRW50cnlcIiwgdmFsdWU6IFJlZGVsZWdhdGlvbkVudHJ5LmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcbnZhciBSZWRlbGVnYXRpb24gPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUmVkZWxlZ2F0aW9uXCIsIGVuY29kZShlMiwgdDUgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpIHtcbiAgXCJcIiAhPT0gZTIuZGVsZWdhdG9yQWRkcmVzcyAmJiB0NS51aW50MzIoMTApLnN0cmluZyhlMi5kZWxlZ2F0b3JBZGRyZXNzKSwgXCJcIiAhPT0gZTIudmFsaWRhdG9yU3JjQWRkcmVzcyAmJiB0NS51aW50MzIoMTgpLnN0cmluZyhlMi52YWxpZGF0b3JTcmNBZGRyZXNzKSwgXCJcIiAhPT0gZTIudmFsaWRhdG9yRHN0QWRkcmVzcyAmJiB0NS51aW50MzIoMjYpLnN0cmluZyhlMi52YWxpZGF0b3JEc3RBZGRyZXNzKTtcbiAgZm9yIChjb25zdCBvMiBvZiBlMi5lbnRyaWVzKSBSZWRlbGVnYXRpb25FbnRyeS5lbmNvZGUobzIsIHQ1LnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgcmV0dXJuIHQ1O1xufSwgZGVjb2RlKGUyLCB0NSkge1xuICBjb25zdCBvMiA9IGUyIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gZTIgOiBuZXcgQmluYXJ5UmVhZGVyKGUyKTtcbiAgbGV0IG4yID0gdm9pZCAwID09PSB0NSA/IG8yLmxlbiA6IG8yLnBvcyArIHQ1O1xuICBjb25zdCBpMyA9IHsgZGVsZWdhdG9yQWRkcmVzczogXCJcIiwgdmFsaWRhdG9yU3JjQWRkcmVzczogXCJcIiwgdmFsaWRhdG9yRHN0QWRkcmVzczogXCJcIiwgZW50cmllczogW10gfTtcbiAgZm9yICg7IG8yLnBvcyA8IG4yOyApIHtcbiAgICBjb25zdCBlMyA9IG8yLnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaTMuZGVsZWdhdG9yQWRkcmVzcyA9IG8yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaTMudmFsaWRhdG9yU3JjQWRkcmVzcyA9IG8yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaTMudmFsaWRhdG9yRHN0QWRkcmVzcyA9IG8yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgaTMuZW50cmllcy5wdXNoKFJlZGVsZWdhdGlvbkVudHJ5LmRlY29kZShvMiwgbzIudWludDMyKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBvMi5za2lwVHlwZSg3ICYgZTMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTM7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyBkZWxlZ2F0b3JBZGRyZXNzOiBpc1NldChlMi5kZWxlZ2F0b3JBZGRyZXNzKSA/IFN0cmluZyhlMi5kZWxlZ2F0b3JBZGRyZXNzKSA6IFwiXCIsIHZhbGlkYXRvclNyY0FkZHJlc3M6IGlzU2V0KGUyLnZhbGlkYXRvclNyY0FkZHJlc3MpID8gU3RyaW5nKGUyLnZhbGlkYXRvclNyY0FkZHJlc3MpIDogXCJcIiwgdmFsaWRhdG9yRHN0QWRkcmVzczogaXNTZXQoZTIudmFsaWRhdG9yRHN0QWRkcmVzcykgPyBTdHJpbmcoZTIudmFsaWRhdG9yRHN0QWRkcmVzcykgOiBcIlwiLCBlbnRyaWVzOiBBcnJheS5pc0FycmF5KGUyPy5lbnRyaWVzKSA/IGUyLmVudHJpZXMubWFwKCgoZTMpID0+IFJlZGVsZWdhdGlvbkVudHJ5LmZyb21KU09OKGUzKSkpIDogW10gfSksIHRvSlNPTihlMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5kZWxlZ2F0b3JBZGRyZXNzICYmICh0NS5kZWxlZ2F0b3JBZGRyZXNzID0gZTIuZGVsZWdhdG9yQWRkcmVzcyksIHZvaWQgMCAhPT0gZTIudmFsaWRhdG9yU3JjQWRkcmVzcyAmJiAodDUudmFsaWRhdG9yU3JjQWRkcmVzcyA9IGUyLnZhbGlkYXRvclNyY0FkZHJlc3MpLCB2b2lkIDAgIT09IGUyLnZhbGlkYXRvckRzdEFkZHJlc3MgJiYgKHQ1LnZhbGlkYXRvckRzdEFkZHJlc3MgPSBlMi52YWxpZGF0b3JEc3RBZGRyZXNzKSwgZTIuZW50cmllcyA/IHQ1LmVudHJpZXMgPSBlMi5lbnRyaWVzLm1hcCgoKGUzKSA9PiBlMyA/IFJlZGVsZWdhdGlvbkVudHJ5LnRvSlNPTihlMykgOiB2b2lkIDApKSA6IHQ1LmVudHJpZXMgPSBbXSwgdDU7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCB0NSA9IHsgZGVsZWdhdG9yQWRkcmVzczogXCJcIiwgdmFsaWRhdG9yU3JjQWRkcmVzczogXCJcIiwgdmFsaWRhdG9yRHN0QWRkcmVzczogXCJcIiwgZW50cmllczogW10gfTtcbiAgcmV0dXJuIHQ1LmRlbGVnYXRvckFkZHJlc3MgPSBlMi5kZWxlZ2F0b3JBZGRyZXNzID8/IFwiXCIsIHQ1LnZhbGlkYXRvclNyY0FkZHJlc3MgPSBlMi52YWxpZGF0b3JTcmNBZGRyZXNzID8/IFwiXCIsIHQ1LnZhbGlkYXRvckRzdEFkZHJlc3MgPSBlMi52YWxpZGF0b3JEc3RBZGRyZXNzID8/IFwiXCIsIHQ1LmVudHJpZXMgPSBlMi5lbnRyaWVzPy5tYXAoKChlMykgPT4gUmVkZWxlZ2F0aW9uRW50cnkuZnJvbVBhcnRpYWwoZTMpKSkgfHwgW10sIHQ1O1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IFJlZGVsZWdhdGlvbi5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IFJlZGVsZWdhdGlvbi5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUmVkZWxlZ2F0aW9uXCIsIHZhbHVlOiBSZWRlbGVnYXRpb24uZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xuZnVuY3Rpb24gUygpIHtcbiAgcmV0dXJuIHsgZGVsZWdhdGlvbjogRGVsZWdhdGlvbi5mcm9tUGFydGlhbCh7fSksIGJhbGFuY2U6IENvaW4uZnJvbVBhcnRpYWwoe30pIH07XG59XG52YXIgRGVsZWdhdGlvblJlc3BvbnNlID0geyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLkRlbGVnYXRpb25SZXNwb25zZVwiLCBlbmNvZGU6IChlMiwgdDUgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+ICh2b2lkIDAgIT09IGUyLmRlbGVnYXRpb24gJiYgRGVsZWdhdGlvbi5lbmNvZGUoZTIuZGVsZWdhdGlvbiwgdDUudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLCB2b2lkIDAgIT09IGUyLmJhbGFuY2UgJiYgQ29pbi5lbmNvZGUoZTIuYmFsYW5jZSwgdDUudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpLCB0NSksIGRlY29kZShlMiwgdDUpIHtcbiAgY29uc3QgbzIgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCBuMiA9IHZvaWQgMCA9PT0gdDUgPyBvMi5sZW4gOiBvMi5wb3MgKyB0NTtcbiAgY29uc3QgczMgPSBTKCk7XG4gIGZvciAoOyBvMi5wb3MgPCBuMjsgKSB7XG4gICAgY29uc3QgZTMgPSBvMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKGUzID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHMzLmRlbGVnYXRpb24gPSBEZWxlZ2F0aW9uLmRlY29kZShvMiwgbzIudWludDMyKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgczMuYmFsYW5jZSA9IENvaW4uZGVjb2RlKG8yLCBvMi51aW50MzIoKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbzIuc2tpcFR5cGUoNyAmIGUzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHMzO1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgZGVsZWdhdGlvbjogaXNTZXQoZTIuZGVsZWdhdGlvbikgPyBEZWxlZ2F0aW9uLmZyb21KU09OKGUyLmRlbGVnYXRpb24pIDogdm9pZCAwLCBiYWxhbmNlOiBpc1NldChlMi5iYWxhbmNlKSA/IENvaW4uZnJvbUpTT04oZTIuYmFsYW5jZSkgOiB2b2lkIDAgfSksIHRvSlNPTihlMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5kZWxlZ2F0aW9uICYmICh0NS5kZWxlZ2F0aW9uID0gZTIuZGVsZWdhdGlvbiA/IERlbGVnYXRpb24udG9KU09OKGUyLmRlbGVnYXRpb24pIDogdm9pZCAwKSwgdm9pZCAwICE9PSBlMi5iYWxhbmNlICYmICh0NS5iYWxhbmNlID0gZTIuYmFsYW5jZSA/IENvaW4udG9KU09OKGUyLmJhbGFuY2UpIDogdm9pZCAwKSwgdDU7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCB0NSA9IFMoKTtcbiAgcmV0dXJuIHQ1LmRlbGVnYXRpb24gPSB2b2lkIDAgIT09IGUyLmRlbGVnYXRpb24gJiYgbnVsbCAhPT0gZTIuZGVsZWdhdGlvbiA/IERlbGVnYXRpb24uZnJvbVBhcnRpYWwoZTIuZGVsZWdhdGlvbikgOiB2b2lkIDAsIHQ1LmJhbGFuY2UgPSB2b2lkIDAgIT09IGUyLmJhbGFuY2UgJiYgbnVsbCAhPT0gZTIuYmFsYW5jZSA/IENvaW4uZnJvbVBhcnRpYWwoZTIuYmFsYW5jZSkgOiB2b2lkIDAsIHQ1O1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IERlbGVnYXRpb25SZXNwb25zZS5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IERlbGVnYXRpb25SZXNwb25zZS5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuRGVsZWdhdGlvblJlc3BvbnNlXCIsIHZhbHVlOiBEZWxlZ2F0aW9uUmVzcG9uc2UuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xuZnVuY3Rpb24gQSgpIHtcbiAgcmV0dXJuIHsgcmVkZWxlZ2F0aW9uRW50cnk6IFJlZGVsZWdhdGlvbkVudHJ5LmZyb21QYXJ0aWFsKHt9KSwgYmFsYW5jZTogXCJcIiB9O1xufVxudmFyIFJlZGVsZWdhdGlvbkVudHJ5UmVzcG9uc2UgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUmVkZWxlZ2F0aW9uRW50cnlSZXNwb25zZVwiLCBlbmNvZGU6IChlMiwgdDUgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+ICh2b2lkIDAgIT09IGUyLnJlZGVsZWdhdGlvbkVudHJ5ICYmIFJlZGVsZWdhdGlvbkVudHJ5LmVuY29kZShlMi5yZWRlbGVnYXRpb25FbnRyeSwgdDUudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLCBcIlwiICE9PSBlMi5iYWxhbmNlICYmIHQ1LnVpbnQzMigzNCkuc3RyaW5nKGUyLmJhbGFuY2UpLCB0NSksIGRlY29kZShlMiwgdDUpIHtcbiAgY29uc3QgbzIgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCBuMiA9IHZvaWQgMCA9PT0gdDUgPyBvMi5sZW4gOiBvMi5wb3MgKyB0NTtcbiAgY29uc3QgaTMgPSBBKCk7XG4gIGZvciAoOyBvMi5wb3MgPCBuMjsgKSB7XG4gICAgY29uc3QgZTMgPSBvMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKGUzID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGkzLnJlZGVsZWdhdGlvbkVudHJ5ID0gUmVkZWxlZ2F0aW9uRW50cnkuZGVjb2RlKG8yLCBvMi51aW50MzIoKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICBpMy5iYWxhbmNlID0gbzIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbzIuc2tpcFR5cGUoNyAmIGUzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkzO1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgcmVkZWxlZ2F0aW9uRW50cnk6IGlzU2V0KGUyLnJlZGVsZWdhdGlvbkVudHJ5KSA/IFJlZGVsZWdhdGlvbkVudHJ5LmZyb21KU09OKGUyLnJlZGVsZWdhdGlvbkVudHJ5KSA6IHZvaWQgMCwgYmFsYW5jZTogaXNTZXQoZTIuYmFsYW5jZSkgPyBTdHJpbmcoZTIuYmFsYW5jZSkgOiBcIlwiIH0pLCB0b0pTT04oZTIpIHtcbiAgY29uc3QgdDUgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gZTIucmVkZWxlZ2F0aW9uRW50cnkgJiYgKHQ1LnJlZGVsZWdhdGlvbkVudHJ5ID0gZTIucmVkZWxlZ2F0aW9uRW50cnkgPyBSZWRlbGVnYXRpb25FbnRyeS50b0pTT04oZTIucmVkZWxlZ2F0aW9uRW50cnkpIDogdm9pZCAwKSwgdm9pZCAwICE9PSBlMi5iYWxhbmNlICYmICh0NS5iYWxhbmNlID0gZTIuYmFsYW5jZSksIHQ1O1xufSwgZnJvbVBhcnRpYWwoZTIpIHtcbiAgY29uc3QgdDUgPSBBKCk7XG4gIHJldHVybiB0NS5yZWRlbGVnYXRpb25FbnRyeSA9IHZvaWQgMCAhPT0gZTIucmVkZWxlZ2F0aW9uRW50cnkgJiYgbnVsbCAhPT0gZTIucmVkZWxlZ2F0aW9uRW50cnkgPyBSZWRlbGVnYXRpb25FbnRyeS5mcm9tUGFydGlhbChlMi5yZWRlbGVnYXRpb25FbnRyeSkgOiB2b2lkIDAsIHQ1LmJhbGFuY2UgPSBlMi5iYWxhbmNlID8/IFwiXCIsIHQ1O1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IFJlZGVsZWdhdGlvbkVudHJ5UmVzcG9uc2UuZGVjb2RlKGUyLnZhbHVlKSwgdG9Qcm90bzogKGUyKSA9PiBSZWRlbGVnYXRpb25FbnRyeVJlc3BvbnNlLmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5SZWRlbGVnYXRpb25FbnRyeVJlc3BvbnNlXCIsIHZhbHVlOiBSZWRlbGVnYXRpb25FbnRyeVJlc3BvbnNlLmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcbmZ1bmN0aW9uIEQoKSB7XG4gIHJldHVybiB7IHJlZGVsZWdhdGlvbjogUmVkZWxlZ2F0aW9uLmZyb21QYXJ0aWFsKHt9KSwgZW50cmllczogW10gfTtcbn1cbnZhciBSZWRlbGVnYXRpb25SZXNwb25zZSA9IHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5SZWRlbGVnYXRpb25SZXNwb25zZVwiLCBlbmNvZGUoZTIsIHQ1ID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSB7XG4gIHZvaWQgMCAhPT0gZTIucmVkZWxlZ2F0aW9uICYmIFJlZGVsZWdhdGlvbi5lbmNvZGUoZTIucmVkZWxlZ2F0aW9uLCB0NS51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gIGZvciAoY29uc3QgbzIgb2YgZTIuZW50cmllcykgUmVkZWxlZ2F0aW9uRW50cnlSZXNwb25zZS5lbmNvZGUobzIsIHQ1LnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgcmV0dXJuIHQ1O1xufSwgZGVjb2RlKGUyLCB0NSkge1xuICBjb25zdCBvMiA9IGUyIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gZTIgOiBuZXcgQmluYXJ5UmVhZGVyKGUyKTtcbiAgbGV0IG4yID0gdm9pZCAwID09PSB0NSA/IG8yLmxlbiA6IG8yLnBvcyArIHQ1O1xuICBjb25zdCBpMyA9IEQoKTtcbiAgZm9yICg7IG8yLnBvcyA8IG4yOyApIHtcbiAgICBjb25zdCBlMyA9IG8yLnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaTMucmVkZWxlZ2F0aW9uID0gUmVkZWxlZ2F0aW9uLmRlY29kZShvMiwgbzIudWludDMyKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaTMuZW50cmllcy5wdXNoKFJlZGVsZWdhdGlvbkVudHJ5UmVzcG9uc2UuZGVjb2RlKG8yLCBvMi51aW50MzIoKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG8yLnNraXBUeXBlKDcgJiBlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpMztcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IHJlZGVsZWdhdGlvbjogaXNTZXQoZTIucmVkZWxlZ2F0aW9uKSA/IFJlZGVsZWdhdGlvbi5mcm9tSlNPTihlMi5yZWRlbGVnYXRpb24pIDogdm9pZCAwLCBlbnRyaWVzOiBBcnJheS5pc0FycmF5KGUyPy5lbnRyaWVzKSA/IGUyLmVudHJpZXMubWFwKCgoZTMpID0+IFJlZGVsZWdhdGlvbkVudHJ5UmVzcG9uc2UuZnJvbUpTT04oZTMpKSkgOiBbXSB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IHQ1ID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLnJlZGVsZWdhdGlvbiAmJiAodDUucmVkZWxlZ2F0aW9uID0gZTIucmVkZWxlZ2F0aW9uID8gUmVkZWxlZ2F0aW9uLnRvSlNPTihlMi5yZWRlbGVnYXRpb24pIDogdm9pZCAwKSwgZTIuZW50cmllcyA/IHQ1LmVudHJpZXMgPSBlMi5lbnRyaWVzLm1hcCgoKGUzKSA9PiBlMyA/IFJlZGVsZWdhdGlvbkVudHJ5UmVzcG9uc2UudG9KU09OKGUzKSA6IHZvaWQgMCkpIDogdDUuZW50cmllcyA9IFtdLCB0NTtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IHQ1ID0gRCgpO1xuICByZXR1cm4gdDUucmVkZWxlZ2F0aW9uID0gdm9pZCAwICE9PSBlMi5yZWRlbGVnYXRpb24gJiYgbnVsbCAhPT0gZTIucmVkZWxlZ2F0aW9uID8gUmVkZWxlZ2F0aW9uLmZyb21QYXJ0aWFsKGUyLnJlZGVsZWdhdGlvbikgOiB2b2lkIDAsIHQ1LmVudHJpZXMgPSBlMi5lbnRyaWVzPy5tYXAoKChlMykgPT4gUmVkZWxlZ2F0aW9uRW50cnlSZXNwb25zZS5mcm9tUGFydGlhbChlMykpKSB8fCBbXSwgdDU7XG59LCBmcm9tUHJvdG9Nc2c6IChlMikgPT4gUmVkZWxlZ2F0aW9uUmVzcG9uc2UuZGVjb2RlKGUyLnZhbHVlKSwgdG9Qcm90bzogKGUyKSA9PiBSZWRlbGVnYXRpb25SZXNwb25zZS5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUmVkZWxlZ2F0aW9uUmVzcG9uc2VcIiwgdmFsdWU6IFJlZGVsZWdhdGlvblJlc3BvbnNlLmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcblxuLyogLi4vY29zbWljLXByb3RvL2Rpc3QvY29kZWdlbi9jb3Ntb3Mvc3Rha2luZy92MWJldGExL3F1ZXJ5LmpzKi9cbnZhciBRdWVyeURlbGVnYXRpb25SZXF1ZXN0ID0geyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlF1ZXJ5RGVsZWdhdGlvblJlcXVlc3RcIiwgZW5jb2RlOiAobzIsIGUyID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAoXCJcIiAhPT0gbzIuZGVsZWdhdG9yQWRkciAmJiBlMi51aW50MzIoMTApLnN0cmluZyhvMi5kZWxlZ2F0b3JBZGRyKSwgXCJcIiAhPT0gbzIudmFsaWRhdG9yQWRkciAmJiBlMi51aW50MzIoMTgpLnN0cmluZyhvMi52YWxpZGF0b3JBZGRyKSwgZTIpLCBkZWNvZGUobzIsIGUyKSB7XG4gIGNvbnN0IHQ1ID0gbzIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBvMiA6IG5ldyBCaW5hcnlSZWFkZXIobzIpO1xuICBsZXQgbjIgPSB2b2lkIDAgPT09IGUyID8gdDUubGVuIDogdDUucG9zICsgZTI7XG4gIGNvbnN0IGEyID0geyBkZWxlZ2F0b3JBZGRyOiBcIlwiLCB2YWxpZGF0b3JBZGRyOiBcIlwiIH07XG4gIGZvciAoOyB0NS5wb3MgPCBuMjsgKSB7XG4gICAgY29uc3QgbzMgPSB0NS51aW50MzIoKTtcbiAgICBzd2l0Y2ggKG8zID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGEyLmRlbGVnYXRvckFkZHIgPSB0NS5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGEyLnZhbGlkYXRvckFkZHIgPSB0NS5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0NS5za2lwVHlwZSg3ICYgbzMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYTI7XG59LCBmcm9tSlNPTjogKG8yKSA9PiAoeyBkZWxlZ2F0b3JBZGRyOiBpc1NldChvMi5kZWxlZ2F0b3JBZGRyKSA/IFN0cmluZyhvMi5kZWxlZ2F0b3JBZGRyKSA6IFwiXCIsIHZhbGlkYXRvckFkZHI6IGlzU2V0KG8yLnZhbGlkYXRvckFkZHIpID8gU3RyaW5nKG8yLnZhbGlkYXRvckFkZHIpIDogXCJcIiB9KSwgdG9KU09OKG8yKSB7XG4gIGNvbnN0IGUyID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IG8yLmRlbGVnYXRvckFkZHIgJiYgKGUyLmRlbGVnYXRvckFkZHIgPSBvMi5kZWxlZ2F0b3JBZGRyKSwgdm9pZCAwICE9PSBvMi52YWxpZGF0b3JBZGRyICYmIChlMi52YWxpZGF0b3JBZGRyID0gbzIudmFsaWRhdG9yQWRkciksIGUyO1xufSwgZnJvbVBhcnRpYWwobzIpIHtcbiAgY29uc3QgZTIgPSB7IGRlbGVnYXRvckFkZHI6IFwiXCIsIHZhbGlkYXRvckFkZHI6IFwiXCIgfTtcbiAgcmV0dXJuIGUyLmRlbGVnYXRvckFkZHIgPSBvMi5kZWxlZ2F0b3JBZGRyID8/IFwiXCIsIGUyLnZhbGlkYXRvckFkZHIgPSBvMi52YWxpZGF0b3JBZGRyID8/IFwiXCIsIGUyO1xufSwgZnJvbVByb3RvTXNnOiAobzIpID0+IFF1ZXJ5RGVsZWdhdGlvblJlcXVlc3QuZGVjb2RlKG8yLnZhbHVlKSwgdG9Qcm90bzogKG8yKSA9PiBRdWVyeURlbGVnYXRpb25SZXF1ZXN0LmVuY29kZShvMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChvMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5RdWVyeURlbGVnYXRpb25SZXF1ZXN0XCIsIHZhbHVlOiBRdWVyeURlbGVnYXRpb25SZXF1ZXN0LmVuY29kZShvMikuZmluaXNoKCkgfSkgfTtcbnZhciBRdWVyeURlbGVnYXRpb25SZXNwb25zZSA9IHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5RdWVyeURlbGVnYXRpb25SZXNwb25zZVwiLCBlbmNvZGU6IChvMiwgZTIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+ICh2b2lkIDAgIT09IG8yLmRlbGVnYXRpb25SZXNwb25zZSAmJiBEZWxlZ2F0aW9uUmVzcG9uc2UuZW5jb2RlKG8yLmRlbGVnYXRpb25SZXNwb25zZSwgZTIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLCBlMiksIGRlY29kZShvMiwgZTIpIHtcbiAgY29uc3QgdDUgPSBvMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IG8yIDogbmV3IEJpbmFyeVJlYWRlcihvMik7XG4gIGxldCBhMiA9IHZvaWQgMCA9PT0gZTIgPyB0NS5sZW4gOiB0NS5wb3MgKyBlMjtcbiAgY29uc3QgaTMgPSB7IGRlbGVnYXRpb25SZXNwb25zZTogdm9pZCAwIH07XG4gIGZvciAoOyB0NS5wb3MgPCBhMjsgKSB7XG4gICAgY29uc3QgbzMgPSB0NS51aW50MzIoKTtcbiAgICBpZiAobzMgPj4+IDMgPT0gMSkgaTMuZGVsZWdhdGlvblJlc3BvbnNlID0gRGVsZWdhdGlvblJlc3BvbnNlLmRlY29kZSh0NSwgdDUudWludDMyKCkpO1xuICAgIGVsc2UgdDUuc2tpcFR5cGUoNyAmIG8zKTtcbiAgfVxuICByZXR1cm4gaTM7XG59LCBmcm9tSlNPTjogKG8yKSA9PiAoeyBkZWxlZ2F0aW9uUmVzcG9uc2U6IGlzU2V0KG8yLmRlbGVnYXRpb25SZXNwb25zZSkgPyBEZWxlZ2F0aW9uUmVzcG9uc2UuZnJvbUpTT04obzIuZGVsZWdhdGlvblJlc3BvbnNlKSA6IHZvaWQgMCB9KSwgdG9KU09OKG8yKSB7XG4gIGNvbnN0IGUyID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IG8yLmRlbGVnYXRpb25SZXNwb25zZSAmJiAoZTIuZGVsZWdhdGlvblJlc3BvbnNlID0gbzIuZGVsZWdhdGlvblJlc3BvbnNlID8gRGVsZWdhdGlvblJlc3BvbnNlLnRvSlNPTihvMi5kZWxlZ2F0aW9uUmVzcG9uc2UpIDogdm9pZCAwKSwgZTI7XG59LCBmcm9tUGFydGlhbChvMikge1xuICBjb25zdCBlMiA9IHsgZGVsZWdhdGlvblJlc3BvbnNlOiB2b2lkIDAgfTtcbiAgcmV0dXJuIGUyLmRlbGVnYXRpb25SZXNwb25zZSA9IHZvaWQgMCAhPT0gbzIuZGVsZWdhdGlvblJlc3BvbnNlICYmIG51bGwgIT09IG8yLmRlbGVnYXRpb25SZXNwb25zZSA/IERlbGVnYXRpb25SZXNwb25zZS5mcm9tUGFydGlhbChvMi5kZWxlZ2F0aW9uUmVzcG9uc2UpIDogdm9pZCAwLCBlMjtcbn0sIGZyb21Qcm90b01zZzogKG8yKSA9PiBRdWVyeURlbGVnYXRpb25SZXNwb25zZS5kZWNvZGUobzIudmFsdWUpLCB0b1Byb3RvOiAobzIpID0+IFF1ZXJ5RGVsZWdhdGlvblJlc3BvbnNlLmVuY29kZShvMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChvMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5RdWVyeURlbGVnYXRpb25SZXNwb25zZVwiLCB2YWx1ZTogUXVlcnlEZWxlZ2F0aW9uUmVzcG9uc2UuZW5jb2RlKG8yKS5maW5pc2goKSB9KSB9O1xudmFyIFF1ZXJ5VW5ib25kaW5nRGVsZWdhdGlvblJlcXVlc3QgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUXVlcnlVbmJvbmRpbmdEZWxlZ2F0aW9uUmVxdWVzdFwiLCBlbmNvZGU6IChvMiwgZTIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+IChcIlwiICE9PSBvMi5kZWxlZ2F0b3JBZGRyICYmIGUyLnVpbnQzMigxMCkuc3RyaW5nKG8yLmRlbGVnYXRvckFkZHIpLCBcIlwiICE9PSBvMi52YWxpZGF0b3JBZGRyICYmIGUyLnVpbnQzMigxOCkuc3RyaW5nKG8yLnZhbGlkYXRvckFkZHIpLCBlMiksIGRlY29kZShvMiwgZTIpIHtcbiAgY29uc3QgdDUgPSBvMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IG8yIDogbmV3IEJpbmFyeVJlYWRlcihvMik7XG4gIGxldCBuMiA9IHZvaWQgMCA9PT0gZTIgPyB0NS5sZW4gOiB0NS5wb3MgKyBlMjtcbiAgY29uc3QgYTIgPSB7IGRlbGVnYXRvckFkZHI6IFwiXCIsIHZhbGlkYXRvckFkZHI6IFwiXCIgfTtcbiAgZm9yICg7IHQ1LnBvcyA8IG4yOyApIHtcbiAgICBjb25zdCBvMyA9IHQ1LnVpbnQzMigpO1xuICAgIHN3aXRjaCAobzMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgYTIuZGVsZWdhdG9yQWRkciA9IHQ1LnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgYTIudmFsaWRhdG9yQWRkciA9IHQ1LnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHQ1LnNraXBUeXBlKDcgJiBvMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhMjtcbn0sIGZyb21KU09OOiAobzIpID0+ICh7IGRlbGVnYXRvckFkZHI6IGlzU2V0KG8yLmRlbGVnYXRvckFkZHIpID8gU3RyaW5nKG8yLmRlbGVnYXRvckFkZHIpIDogXCJcIiwgdmFsaWRhdG9yQWRkcjogaXNTZXQobzIudmFsaWRhdG9yQWRkcikgPyBTdHJpbmcobzIudmFsaWRhdG9yQWRkcikgOiBcIlwiIH0pLCB0b0pTT04obzIpIHtcbiAgY29uc3QgZTIgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gbzIuZGVsZWdhdG9yQWRkciAmJiAoZTIuZGVsZWdhdG9yQWRkciA9IG8yLmRlbGVnYXRvckFkZHIpLCB2b2lkIDAgIT09IG8yLnZhbGlkYXRvckFkZHIgJiYgKGUyLnZhbGlkYXRvckFkZHIgPSBvMi52YWxpZGF0b3JBZGRyKSwgZTI7XG59LCBmcm9tUGFydGlhbChvMikge1xuICBjb25zdCBlMiA9IHsgZGVsZWdhdG9yQWRkcjogXCJcIiwgdmFsaWRhdG9yQWRkcjogXCJcIiB9O1xuICByZXR1cm4gZTIuZGVsZWdhdG9yQWRkciA9IG8yLmRlbGVnYXRvckFkZHIgPz8gXCJcIiwgZTIudmFsaWRhdG9yQWRkciA9IG8yLnZhbGlkYXRvckFkZHIgPz8gXCJcIiwgZTI7XG59LCBmcm9tUHJvdG9Nc2c6IChvMikgPT4gUXVlcnlVbmJvbmRpbmdEZWxlZ2F0aW9uUmVxdWVzdC5kZWNvZGUobzIudmFsdWUpLCB0b1Byb3RvOiAobzIpID0+IFF1ZXJ5VW5ib25kaW5nRGVsZWdhdGlvblJlcXVlc3QuZW5jb2RlKG8yKS5maW5pc2goKSwgdG9Qcm90b01zZzogKG8yKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlF1ZXJ5VW5ib25kaW5nRGVsZWdhdGlvblJlcXVlc3RcIiwgdmFsdWU6IFF1ZXJ5VW5ib25kaW5nRGVsZWdhdGlvblJlcXVlc3QuZW5jb2RlKG8yKS5maW5pc2goKSB9KSB9O1xuZnVuY3Rpb24gYygpIHtcbiAgcmV0dXJuIHsgdW5ib25kOiBVbmJvbmRpbmdEZWxlZ2F0aW9uLmZyb21QYXJ0aWFsKHt9KSB9O1xufVxudmFyIFF1ZXJ5VW5ib25kaW5nRGVsZWdhdGlvblJlc3BvbnNlID0geyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlF1ZXJ5VW5ib25kaW5nRGVsZWdhdGlvblJlc3BvbnNlXCIsIGVuY29kZTogKG8yLCBlMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKHZvaWQgMCAhPT0gbzIudW5ib25kICYmIFVuYm9uZGluZ0RlbGVnYXRpb24uZW5jb2RlKG8yLnVuYm9uZCwgZTIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLCBlMiksIGRlY29kZShvMiwgZTIpIHtcbiAgY29uc3QgdDUgPSBvMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IG8yIDogbmV3IEJpbmFyeVJlYWRlcihvMik7XG4gIGxldCBuMiA9IHZvaWQgMCA9PT0gZTIgPyB0NS5sZW4gOiB0NS5wb3MgKyBlMjtcbiAgY29uc3QgaTMgPSBjKCk7XG4gIGZvciAoOyB0NS5wb3MgPCBuMjsgKSB7XG4gICAgY29uc3QgbzMgPSB0NS51aW50MzIoKTtcbiAgICBpZiAobzMgPj4+IDMgPT0gMSkgaTMudW5ib25kID0gVW5ib25kaW5nRGVsZWdhdGlvbi5kZWNvZGUodDUsIHQ1LnVpbnQzMigpKTtcbiAgICBlbHNlIHQ1LnNraXBUeXBlKDcgJiBvMyk7XG4gIH1cbiAgcmV0dXJuIGkzO1xufSwgZnJvbUpTT046IChvMikgPT4gKHsgdW5ib25kOiBpc1NldChvMi51bmJvbmQpID8gVW5ib25kaW5nRGVsZWdhdGlvbi5mcm9tSlNPTihvMi51bmJvbmQpIDogdm9pZCAwIH0pLCB0b0pTT04obzIpIHtcbiAgY29uc3QgZTIgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gbzIudW5ib25kICYmIChlMi51bmJvbmQgPSBvMi51bmJvbmQgPyBVbmJvbmRpbmdEZWxlZ2F0aW9uLnRvSlNPTihvMi51bmJvbmQpIDogdm9pZCAwKSwgZTI7XG59LCBmcm9tUGFydGlhbChvMikge1xuICBjb25zdCBlMiA9IGMoKTtcbiAgcmV0dXJuIGUyLnVuYm9uZCA9IHZvaWQgMCAhPT0gbzIudW5ib25kICYmIG51bGwgIT09IG8yLnVuYm9uZCA/IFVuYm9uZGluZ0RlbGVnYXRpb24uZnJvbVBhcnRpYWwobzIudW5ib25kKSA6IHZvaWQgMCwgZTI7XG59LCBmcm9tUHJvdG9Nc2c6IChvMikgPT4gUXVlcnlVbmJvbmRpbmdEZWxlZ2F0aW9uUmVzcG9uc2UuZGVjb2RlKG8yLnZhbHVlKSwgdG9Qcm90bzogKG8yKSA9PiBRdWVyeVVuYm9uZGluZ0RlbGVnYXRpb25SZXNwb25zZS5lbmNvZGUobzIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAobzIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUXVlcnlVbmJvbmRpbmdEZWxlZ2F0aW9uUmVzcG9uc2VcIiwgdmFsdWU6IFF1ZXJ5VW5ib25kaW5nRGVsZWdhdGlvblJlc3BvbnNlLmVuY29kZShvMikuZmluaXNoKCkgfSkgfTtcbnZhciBRdWVyeURlbGVnYXRvckRlbGVnYXRpb25zUmVxdWVzdCA9IHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5RdWVyeURlbGVnYXRvckRlbGVnYXRpb25zUmVxdWVzdFwiLCBlbmNvZGU6IChlMiwgdDUgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+IChcIlwiICE9PSBlMi5kZWxlZ2F0b3JBZGRyICYmIHQ1LnVpbnQzMigxMCkuc3RyaW5nKGUyLmRlbGVnYXRvckFkZHIpLCB2b2lkIDAgIT09IGUyLnBhZ2luYXRpb24gJiYgUGFnZVJlcXVlc3QuZW5jb2RlKGUyLnBhZ2luYXRpb24sIHQ1LnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKSwgdDUpLCBkZWNvZGUoZTIsIHQ1KSB7XG4gIGNvbnN0IG4yID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgYTIgPSB2b2lkIDAgPT09IHQ1ID8gbjIubGVuIDogbjIucG9zICsgdDU7XG4gIGNvbnN0IGkzID0geyBkZWxlZ2F0b3JBZGRyOiBcIlwiLCBwYWdpbmF0aW9uOiB2b2lkIDAgfTtcbiAgZm9yICg7IG4yLnBvcyA8IGEyOyApIHtcbiAgICBjb25zdCBlMyA9IG4yLnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaTMuZGVsZWdhdG9yQWRkciA9IG4yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaTMucGFnaW5hdGlvbiA9IFBhZ2VSZXF1ZXN0LmRlY29kZShuMiwgbjIudWludDMyKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG4yLnNraXBUeXBlKDcgJiBlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpMztcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IGRlbGVnYXRvckFkZHI6IGlzU2V0KGUyLmRlbGVnYXRvckFkZHIpID8gU3RyaW5nKGUyLmRlbGVnYXRvckFkZHIpIDogXCJcIiwgcGFnaW5hdGlvbjogaXNTZXQoZTIucGFnaW5hdGlvbikgPyBQYWdlUmVxdWVzdC5mcm9tSlNPTihlMi5wYWdpbmF0aW9uKSA6IHZvaWQgMCB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IHQ1ID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLmRlbGVnYXRvckFkZHIgJiYgKHQ1LmRlbGVnYXRvckFkZHIgPSBlMi5kZWxlZ2F0b3JBZGRyKSwgdm9pZCAwICE9PSBlMi5wYWdpbmF0aW9uICYmICh0NS5wYWdpbmF0aW9uID0gZTIucGFnaW5hdGlvbiA/IFBhZ2VSZXF1ZXN0LnRvSlNPTihlMi5wYWdpbmF0aW9uKSA6IHZvaWQgMCksIHQ1O1xufSwgZnJvbVBhcnRpYWwoZTIpIHtcbiAgY29uc3QgdDUgPSB7IGRlbGVnYXRvckFkZHI6IFwiXCIsIHBhZ2luYXRpb246IHZvaWQgMCB9O1xuICByZXR1cm4gdDUuZGVsZWdhdG9yQWRkciA9IGUyLmRlbGVnYXRvckFkZHIgPz8gXCJcIiwgdDUucGFnaW5hdGlvbiA9IHZvaWQgMCAhPT0gZTIucGFnaW5hdGlvbiAmJiBudWxsICE9PSBlMi5wYWdpbmF0aW9uID8gUGFnZVJlcXVlc3QuZnJvbVBhcnRpYWwoZTIucGFnaW5hdGlvbikgOiB2b2lkIDAsIHQ1O1xufSwgZnJvbVByb3RvTXNnOiAobzIpID0+IFF1ZXJ5RGVsZWdhdG9yRGVsZWdhdGlvbnNSZXF1ZXN0LmRlY29kZShvMi52YWx1ZSksIHRvUHJvdG86IChvMikgPT4gUXVlcnlEZWxlZ2F0b3JEZWxlZ2F0aW9uc1JlcXVlc3QuZW5jb2RlKG8yKS5maW5pc2goKSwgdG9Qcm90b01zZzogKG8yKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlF1ZXJ5RGVsZWdhdG9yRGVsZWdhdGlvbnNSZXF1ZXN0XCIsIHZhbHVlOiBRdWVyeURlbGVnYXRvckRlbGVnYXRpb25zUmVxdWVzdC5lbmNvZGUobzIpLmZpbmlzaCgpIH0pIH07XG52YXIgUXVlcnlEZWxlZ2F0b3JEZWxlZ2F0aW9uc1Jlc3BvbnNlID0geyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlF1ZXJ5RGVsZWdhdG9yRGVsZWdhdGlvbnNSZXNwb25zZVwiLCBlbmNvZGUobzIsIHQ1ID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSB7XG4gIGZvciAoY29uc3QgZTIgb2YgbzIuZGVsZWdhdGlvblJlc3BvbnNlcykgRGVsZWdhdGlvblJlc3BvbnNlLmVuY29kZShlMiwgdDUudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICByZXR1cm4gdm9pZCAwICE9PSBvMi5wYWdpbmF0aW9uICYmIFBhZ2VSZXNwb25zZS5lbmNvZGUobzIucGFnaW5hdGlvbiwgdDUudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpLCB0NTtcbn0sIGRlY29kZShvMiwgdDUpIHtcbiAgY29uc3QgYTIgPSBvMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IG8yIDogbmV3IEJpbmFyeVJlYWRlcihvMik7XG4gIGxldCBpMyA9IHZvaWQgMCA9PT0gdDUgPyBhMi5sZW4gOiBhMi5wb3MgKyB0NTtcbiAgY29uc3QgcjYgPSB7IGRlbGVnYXRpb25SZXNwb25zZXM6IFtdLCBwYWdpbmF0aW9uOiB2b2lkIDAgfTtcbiAgZm9yICg7IGEyLnBvcyA8IGkzOyApIHtcbiAgICBjb25zdCBvMyA9IGEyLnVpbnQzMigpO1xuICAgIHN3aXRjaCAobzMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcjYuZGVsZWdhdGlvblJlc3BvbnNlcy5wdXNoKERlbGVnYXRpb25SZXNwb25zZS5kZWNvZGUoYTIsIGEyLnVpbnQzMigpKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByNi5wYWdpbmF0aW9uID0gUGFnZVJlc3BvbnNlLmRlY29kZShhMiwgYTIudWludDMyKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGEyLnNraXBUeXBlKDcgJiBvMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiByNjtcbn0sIGZyb21KU09OOiAobzIpID0+ICh7IGRlbGVnYXRpb25SZXNwb25zZXM6IEFycmF5LmlzQXJyYXkobzI/LmRlbGVnYXRpb25SZXNwb25zZXMpID8gbzIuZGVsZWdhdGlvblJlc3BvbnNlcy5tYXAoKChvMykgPT4gRGVsZWdhdGlvblJlc3BvbnNlLmZyb21KU09OKG8zKSkpIDogW10sIHBhZ2luYXRpb246IGlzU2V0KG8yLnBhZ2luYXRpb24pID8gUGFnZVJlc3BvbnNlLmZyb21KU09OKG8yLnBhZ2luYXRpb24pIDogdm9pZCAwIH0pLCB0b0pTT04obzIpIHtcbiAgY29uc3QgdDUgPSB7fTtcbiAgcmV0dXJuIG8yLmRlbGVnYXRpb25SZXNwb25zZXMgPyB0NS5kZWxlZ2F0aW9uUmVzcG9uc2VzID0gbzIuZGVsZWdhdGlvblJlc3BvbnNlcy5tYXAoKChvMykgPT4gbzMgPyBEZWxlZ2F0aW9uUmVzcG9uc2UudG9KU09OKG8zKSA6IHZvaWQgMCkpIDogdDUuZGVsZWdhdGlvblJlc3BvbnNlcyA9IFtdLCB2b2lkIDAgIT09IG8yLnBhZ2luYXRpb24gJiYgKHQ1LnBhZ2luYXRpb24gPSBvMi5wYWdpbmF0aW9uID8gUGFnZVJlc3BvbnNlLnRvSlNPTihvMi5wYWdpbmF0aW9uKSA6IHZvaWQgMCksIHQ1O1xufSwgZnJvbVBhcnRpYWwobzIpIHtcbiAgY29uc3QgdDUgPSB7IGRlbGVnYXRpb25SZXNwb25zZXM6IFtdLCBwYWdpbmF0aW9uOiB2b2lkIDAgfTtcbiAgcmV0dXJuIHQ1LmRlbGVnYXRpb25SZXNwb25zZXMgPSBvMi5kZWxlZ2F0aW9uUmVzcG9uc2VzPy5tYXAoKChvMykgPT4gRGVsZWdhdGlvblJlc3BvbnNlLmZyb21QYXJ0aWFsKG8zKSkpIHx8IFtdLCB0NS5wYWdpbmF0aW9uID0gdm9pZCAwICE9PSBvMi5wYWdpbmF0aW9uICYmIG51bGwgIT09IG8yLnBhZ2luYXRpb24gPyBQYWdlUmVzcG9uc2UuZnJvbVBhcnRpYWwobzIucGFnaW5hdGlvbikgOiB2b2lkIDAsIHQ1O1xufSwgZnJvbVByb3RvTXNnOiAobzIpID0+IFF1ZXJ5RGVsZWdhdG9yRGVsZWdhdGlvbnNSZXNwb25zZS5kZWNvZGUobzIudmFsdWUpLCB0b1Byb3RvOiAobzIpID0+IFF1ZXJ5RGVsZWdhdG9yRGVsZWdhdGlvbnNSZXNwb25zZS5lbmNvZGUobzIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAobzIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUXVlcnlEZWxlZ2F0b3JEZWxlZ2F0aW9uc1Jlc3BvbnNlXCIsIHZhbHVlOiBRdWVyeURlbGVnYXRvckRlbGVnYXRpb25zUmVzcG9uc2UuZW5jb2RlKG8yKS5maW5pc2goKSB9KSB9O1xudmFyIFF1ZXJ5RGVsZWdhdG9yVW5ib25kaW5nRGVsZWdhdGlvbnNSZXF1ZXN0ID0geyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlF1ZXJ5RGVsZWdhdG9yVW5ib25kaW5nRGVsZWdhdGlvbnNSZXF1ZXN0XCIsIGVuY29kZTogKGUyLCB0NSA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKFwiXCIgIT09IGUyLmRlbGVnYXRvckFkZHIgJiYgdDUudWludDMyKDEwKS5zdHJpbmcoZTIuZGVsZWdhdG9yQWRkciksIHZvaWQgMCAhPT0gZTIucGFnaW5hdGlvbiAmJiBQYWdlUmVxdWVzdC5lbmNvZGUoZTIucGFnaW5hdGlvbiwgdDUudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpLCB0NSksIGRlY29kZShlMiwgdDUpIHtcbiAgY29uc3QgbjIgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCBhMiA9IHZvaWQgMCA9PT0gdDUgPyBuMi5sZW4gOiBuMi5wb3MgKyB0NTtcbiAgY29uc3QgaTMgPSB7IGRlbGVnYXRvckFkZHI6IFwiXCIsIHBhZ2luYXRpb246IHZvaWQgMCB9O1xuICBmb3IgKDsgbjIucG9zIDwgYTI7ICkge1xuICAgIGNvbnN0IGUzID0gbjIudWludDMyKCk7XG4gICAgc3dpdGNoIChlMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBpMy5kZWxlZ2F0b3JBZGRyID0gbjIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBpMy5wYWdpbmF0aW9uID0gUGFnZVJlcXVlc3QuZGVjb2RlKG4yLCBuMi51aW50MzIoKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbjIuc2tpcFR5cGUoNyAmIGUzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkzO1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgZGVsZWdhdG9yQWRkcjogaXNTZXQoZTIuZGVsZWdhdG9yQWRkcikgPyBTdHJpbmcoZTIuZGVsZWdhdG9yQWRkcikgOiBcIlwiLCBwYWdpbmF0aW9uOiBpc1NldChlMi5wYWdpbmF0aW9uKSA/IFBhZ2VSZXF1ZXN0LmZyb21KU09OKGUyLnBhZ2luYXRpb24pIDogdm9pZCAwIH0pLCB0b0pTT04oZTIpIHtcbiAgY29uc3QgdDUgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gZTIuZGVsZWdhdG9yQWRkciAmJiAodDUuZGVsZWdhdG9yQWRkciA9IGUyLmRlbGVnYXRvckFkZHIpLCB2b2lkIDAgIT09IGUyLnBhZ2luYXRpb24gJiYgKHQ1LnBhZ2luYXRpb24gPSBlMi5wYWdpbmF0aW9uID8gUGFnZVJlcXVlc3QudG9KU09OKGUyLnBhZ2luYXRpb24pIDogdm9pZCAwKSwgdDU7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCB0NSA9IHsgZGVsZWdhdG9yQWRkcjogXCJcIiwgcGFnaW5hdGlvbjogdm9pZCAwIH07XG4gIHJldHVybiB0NS5kZWxlZ2F0b3JBZGRyID0gZTIuZGVsZWdhdG9yQWRkciA/PyBcIlwiLCB0NS5wYWdpbmF0aW9uID0gdm9pZCAwICE9PSBlMi5wYWdpbmF0aW9uICYmIG51bGwgIT09IGUyLnBhZ2luYXRpb24gPyBQYWdlUmVxdWVzdC5mcm9tUGFydGlhbChlMi5wYWdpbmF0aW9uKSA6IHZvaWQgMCwgdDU7XG59LCBmcm9tUHJvdG9Nc2c6IChvMikgPT4gUXVlcnlEZWxlZ2F0b3JVbmJvbmRpbmdEZWxlZ2F0aW9uc1JlcXVlc3QuZGVjb2RlKG8yLnZhbHVlKSwgdG9Qcm90bzogKG8yKSA9PiBRdWVyeURlbGVnYXRvclVuYm9uZGluZ0RlbGVnYXRpb25zUmVxdWVzdC5lbmNvZGUobzIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAobzIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUXVlcnlEZWxlZ2F0b3JVbmJvbmRpbmdEZWxlZ2F0aW9uc1JlcXVlc3RcIiwgdmFsdWU6IFF1ZXJ5RGVsZWdhdG9yVW5ib25kaW5nRGVsZWdhdGlvbnNSZXF1ZXN0LmVuY29kZShvMikuZmluaXNoKCkgfSkgfTtcbnZhciBRdWVyeURlbGVnYXRvclVuYm9uZGluZ0RlbGVnYXRpb25zUmVzcG9uc2UgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUXVlcnlEZWxlZ2F0b3JVbmJvbmRpbmdEZWxlZ2F0aW9uc1Jlc3BvbnNlXCIsIGVuY29kZShvMiwgdDUgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpIHtcbiAgZm9yIChjb25zdCBlMiBvZiBvMi51bmJvbmRpbmdSZXNwb25zZXMpIFVuYm9uZGluZ0RlbGVnYXRpb24uZW5jb2RlKGUyLCB0NS51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gIHJldHVybiB2b2lkIDAgIT09IG8yLnBhZ2luYXRpb24gJiYgUGFnZVJlc3BvbnNlLmVuY29kZShvMi5wYWdpbmF0aW9uLCB0NS51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCksIHQ1O1xufSwgZGVjb2RlKG8yLCB0NSkge1xuICBjb25zdCBuMiA9IG8yIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gbzIgOiBuZXcgQmluYXJ5UmVhZGVyKG8yKTtcbiAgbGV0IGkzID0gdm9pZCAwID09PSB0NSA/IG4yLmxlbiA6IG4yLnBvcyArIHQ1O1xuICBjb25zdCByNiA9IHsgdW5ib25kaW5nUmVzcG9uc2VzOiBbXSwgcGFnaW5hdGlvbjogdm9pZCAwIH07XG4gIGZvciAoOyBuMi5wb3MgPCBpMzsgKSB7XG4gICAgY29uc3QgbzMgPSBuMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKG8zID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHI2LnVuYm9uZGluZ1Jlc3BvbnNlcy5wdXNoKFVuYm9uZGluZ0RlbGVnYXRpb24uZGVjb2RlKG4yLCBuMi51aW50MzIoKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcjYucGFnaW5hdGlvbiA9IFBhZ2VSZXNwb25zZS5kZWNvZGUobjIsIG4yLnVpbnQzMigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBuMi5za2lwVHlwZSg3ICYgbzMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcjY7XG59LCBmcm9tSlNPTjogKG8yKSA9PiAoeyB1bmJvbmRpbmdSZXNwb25zZXM6IEFycmF5LmlzQXJyYXkobzI/LnVuYm9uZGluZ1Jlc3BvbnNlcykgPyBvMi51bmJvbmRpbmdSZXNwb25zZXMubWFwKCgobzMpID0+IFVuYm9uZGluZ0RlbGVnYXRpb24uZnJvbUpTT04obzMpKSkgOiBbXSwgcGFnaW5hdGlvbjogaXNTZXQobzIucGFnaW5hdGlvbikgPyBQYWdlUmVzcG9uc2UuZnJvbUpTT04obzIucGFnaW5hdGlvbikgOiB2b2lkIDAgfSksIHRvSlNPTihvMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gbzIudW5ib25kaW5nUmVzcG9uc2VzID8gdDUudW5ib25kaW5nUmVzcG9uc2VzID0gbzIudW5ib25kaW5nUmVzcG9uc2VzLm1hcCgoKG8zKSA9PiBvMyA/IFVuYm9uZGluZ0RlbGVnYXRpb24udG9KU09OKG8zKSA6IHZvaWQgMCkpIDogdDUudW5ib25kaW5nUmVzcG9uc2VzID0gW10sIHZvaWQgMCAhPT0gbzIucGFnaW5hdGlvbiAmJiAodDUucGFnaW5hdGlvbiA9IG8yLnBhZ2luYXRpb24gPyBQYWdlUmVzcG9uc2UudG9KU09OKG8yLnBhZ2luYXRpb24pIDogdm9pZCAwKSwgdDU7XG59LCBmcm9tUGFydGlhbChvMikge1xuICBjb25zdCB0NSA9IHsgdW5ib25kaW5nUmVzcG9uc2VzOiBbXSwgcGFnaW5hdGlvbjogdm9pZCAwIH07XG4gIHJldHVybiB0NS51bmJvbmRpbmdSZXNwb25zZXMgPSBvMi51bmJvbmRpbmdSZXNwb25zZXM/Lm1hcCgoKG8zKSA9PiBVbmJvbmRpbmdEZWxlZ2F0aW9uLmZyb21QYXJ0aWFsKG8zKSkpIHx8IFtdLCB0NS5wYWdpbmF0aW9uID0gdm9pZCAwICE9PSBvMi5wYWdpbmF0aW9uICYmIG51bGwgIT09IG8yLnBhZ2luYXRpb24gPyBQYWdlUmVzcG9uc2UuZnJvbVBhcnRpYWwobzIucGFnaW5hdGlvbikgOiB2b2lkIDAsIHQ1O1xufSwgZnJvbVByb3RvTXNnOiAobzIpID0+IFF1ZXJ5RGVsZWdhdG9yVW5ib25kaW5nRGVsZWdhdGlvbnNSZXNwb25zZS5kZWNvZGUobzIudmFsdWUpLCB0b1Byb3RvOiAobzIpID0+IFF1ZXJ5RGVsZWdhdG9yVW5ib25kaW5nRGVsZWdhdGlvbnNSZXNwb25zZS5lbmNvZGUobzIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAobzIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUXVlcnlEZWxlZ2F0b3JVbmJvbmRpbmdEZWxlZ2F0aW9uc1Jlc3BvbnNlXCIsIHZhbHVlOiBRdWVyeURlbGVnYXRvclVuYm9uZGluZ0RlbGVnYXRpb25zUmVzcG9uc2UuZW5jb2RlKG8yKS5maW5pc2goKSB9KSB9O1xudmFyIFF1ZXJ5UmVkZWxlZ2F0aW9uc1JlcXVlc3QgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUXVlcnlSZWRlbGVnYXRpb25zUmVxdWVzdFwiLCBlbmNvZGU6IChlMiwgdDUgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+IChcIlwiICE9PSBlMi5kZWxlZ2F0b3JBZGRyICYmIHQ1LnVpbnQzMigxMCkuc3RyaW5nKGUyLmRlbGVnYXRvckFkZHIpLCBcIlwiICE9PSBlMi5zcmNWYWxpZGF0b3JBZGRyICYmIHQ1LnVpbnQzMigxOCkuc3RyaW5nKGUyLnNyY1ZhbGlkYXRvckFkZHIpLCBcIlwiICE9PSBlMi5kc3RWYWxpZGF0b3JBZGRyICYmIHQ1LnVpbnQzMigyNikuc3RyaW5nKGUyLmRzdFZhbGlkYXRvckFkZHIpLCB2b2lkIDAgIT09IGUyLnBhZ2luYXRpb24gJiYgUGFnZVJlcXVlc3QuZW5jb2RlKGUyLnBhZ2luYXRpb24sIHQ1LnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKSwgdDUpLCBkZWNvZGUoZTIsIHQ1KSB7XG4gIGNvbnN0IG4yID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgYTIgPSB2b2lkIDAgPT09IHQ1ID8gbjIubGVuIDogbjIucG9zICsgdDU7XG4gIGNvbnN0IGkzID0geyBkZWxlZ2F0b3JBZGRyOiBcIlwiLCBzcmNWYWxpZGF0b3JBZGRyOiBcIlwiLCBkc3RWYWxpZGF0b3JBZGRyOiBcIlwiLCBwYWdpbmF0aW9uOiB2b2lkIDAgfTtcbiAgZm9yICg7IG4yLnBvcyA8IGEyOyApIHtcbiAgICBjb25zdCBlMyA9IG4yLnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaTMuZGVsZWdhdG9yQWRkciA9IG4yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaTMuc3JjVmFsaWRhdG9yQWRkciA9IG4yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaTMuZHN0VmFsaWRhdG9yQWRkciA9IG4yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgaTMucGFnaW5hdGlvbiA9IFBhZ2VSZXF1ZXN0LmRlY29kZShuMiwgbjIudWludDMyKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG4yLnNraXBUeXBlKDcgJiBlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpMztcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IGRlbGVnYXRvckFkZHI6IGlzU2V0KGUyLmRlbGVnYXRvckFkZHIpID8gU3RyaW5nKGUyLmRlbGVnYXRvckFkZHIpIDogXCJcIiwgc3JjVmFsaWRhdG9yQWRkcjogaXNTZXQoZTIuc3JjVmFsaWRhdG9yQWRkcikgPyBTdHJpbmcoZTIuc3JjVmFsaWRhdG9yQWRkcikgOiBcIlwiLCBkc3RWYWxpZGF0b3JBZGRyOiBpc1NldChlMi5kc3RWYWxpZGF0b3JBZGRyKSA/IFN0cmluZyhlMi5kc3RWYWxpZGF0b3JBZGRyKSA6IFwiXCIsIHBhZ2luYXRpb246IGlzU2V0KGUyLnBhZ2luYXRpb24pID8gUGFnZVJlcXVlc3QuZnJvbUpTT04oZTIucGFnaW5hdGlvbikgOiB2b2lkIDAgfSksIHRvSlNPTihlMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5kZWxlZ2F0b3JBZGRyICYmICh0NS5kZWxlZ2F0b3JBZGRyID0gZTIuZGVsZWdhdG9yQWRkciksIHZvaWQgMCAhPT0gZTIuc3JjVmFsaWRhdG9yQWRkciAmJiAodDUuc3JjVmFsaWRhdG9yQWRkciA9IGUyLnNyY1ZhbGlkYXRvckFkZHIpLCB2b2lkIDAgIT09IGUyLmRzdFZhbGlkYXRvckFkZHIgJiYgKHQ1LmRzdFZhbGlkYXRvckFkZHIgPSBlMi5kc3RWYWxpZGF0b3JBZGRyKSwgdm9pZCAwICE9PSBlMi5wYWdpbmF0aW9uICYmICh0NS5wYWdpbmF0aW9uID0gZTIucGFnaW5hdGlvbiA/IFBhZ2VSZXF1ZXN0LnRvSlNPTihlMi5wYWdpbmF0aW9uKSA6IHZvaWQgMCksIHQ1O1xufSwgZnJvbVBhcnRpYWwoZTIpIHtcbiAgY29uc3QgdDUgPSB7IGRlbGVnYXRvckFkZHI6IFwiXCIsIHNyY1ZhbGlkYXRvckFkZHI6IFwiXCIsIGRzdFZhbGlkYXRvckFkZHI6IFwiXCIsIHBhZ2luYXRpb246IHZvaWQgMCB9O1xuICByZXR1cm4gdDUuZGVsZWdhdG9yQWRkciA9IGUyLmRlbGVnYXRvckFkZHIgPz8gXCJcIiwgdDUuc3JjVmFsaWRhdG9yQWRkciA9IGUyLnNyY1ZhbGlkYXRvckFkZHIgPz8gXCJcIiwgdDUuZHN0VmFsaWRhdG9yQWRkciA9IGUyLmRzdFZhbGlkYXRvckFkZHIgPz8gXCJcIiwgdDUucGFnaW5hdGlvbiA9IHZvaWQgMCAhPT0gZTIucGFnaW5hdGlvbiAmJiBudWxsICE9PSBlMi5wYWdpbmF0aW9uID8gUGFnZVJlcXVlc3QuZnJvbVBhcnRpYWwoZTIucGFnaW5hdGlvbikgOiB2b2lkIDAsIHQ1O1xufSwgZnJvbVByb3RvTXNnOiAobzIpID0+IFF1ZXJ5UmVkZWxlZ2F0aW9uc1JlcXVlc3QuZGVjb2RlKG8yLnZhbHVlKSwgdG9Qcm90bzogKG8yKSA9PiBRdWVyeVJlZGVsZWdhdGlvbnNSZXF1ZXN0LmVuY29kZShvMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChvMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5RdWVyeVJlZGVsZWdhdGlvbnNSZXF1ZXN0XCIsIHZhbHVlOiBRdWVyeVJlZGVsZWdhdGlvbnNSZXF1ZXN0LmVuY29kZShvMikuZmluaXNoKCkgfSkgfTtcbnZhciBRdWVyeVJlZGVsZWdhdGlvbnNSZXNwb25zZSA9IHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5RdWVyeVJlZGVsZWdhdGlvbnNSZXNwb25zZVwiLCBlbmNvZGUobzIsIHQ1ID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSB7XG4gIGZvciAoY29uc3QgZTIgb2YgbzIucmVkZWxlZ2F0aW9uUmVzcG9uc2VzKSBSZWRlbGVnYXRpb25SZXNwb25zZS5lbmNvZGUoZTIsIHQ1LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gbzIucGFnaW5hdGlvbiAmJiBQYWdlUmVzcG9uc2UuZW5jb2RlKG8yLnBhZ2luYXRpb24sIHQ1LnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKSwgdDU7XG59LCBkZWNvZGUobzIsIHQ1KSB7XG4gIGNvbnN0IG4yID0gbzIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBvMiA6IG5ldyBCaW5hcnlSZWFkZXIobzIpO1xuICBsZXQgYTIgPSB2b2lkIDAgPT09IHQ1ID8gbjIubGVuIDogbjIucG9zICsgdDU7XG4gIGNvbnN0IHI2ID0geyByZWRlbGVnYXRpb25SZXNwb25zZXM6IFtdLCBwYWdpbmF0aW9uOiB2b2lkIDAgfTtcbiAgZm9yICg7IG4yLnBvcyA8IGEyOyApIHtcbiAgICBjb25zdCBvMyA9IG4yLnVpbnQzMigpO1xuICAgIHN3aXRjaCAobzMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcjYucmVkZWxlZ2F0aW9uUmVzcG9uc2VzLnB1c2goUmVkZWxlZ2F0aW9uUmVzcG9uc2UuZGVjb2RlKG4yLCBuMi51aW50MzIoKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcjYucGFnaW5hdGlvbiA9IFBhZ2VSZXNwb25zZS5kZWNvZGUobjIsIG4yLnVpbnQzMigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBuMi5za2lwVHlwZSg3ICYgbzMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcjY7XG59LCBmcm9tSlNPTjogKG8yKSA9PiAoeyByZWRlbGVnYXRpb25SZXNwb25zZXM6IEFycmF5LmlzQXJyYXkobzI/LnJlZGVsZWdhdGlvblJlc3BvbnNlcykgPyBvMi5yZWRlbGVnYXRpb25SZXNwb25zZXMubWFwKCgobzMpID0+IFJlZGVsZWdhdGlvblJlc3BvbnNlLmZyb21KU09OKG8zKSkpIDogW10sIHBhZ2luYXRpb246IGlzU2V0KG8yLnBhZ2luYXRpb24pID8gUGFnZVJlc3BvbnNlLmZyb21KU09OKG8yLnBhZ2luYXRpb24pIDogdm9pZCAwIH0pLCB0b0pTT04obzIpIHtcbiAgY29uc3QgdDUgPSB7fTtcbiAgcmV0dXJuIG8yLnJlZGVsZWdhdGlvblJlc3BvbnNlcyA/IHQ1LnJlZGVsZWdhdGlvblJlc3BvbnNlcyA9IG8yLnJlZGVsZWdhdGlvblJlc3BvbnNlcy5tYXAoKChvMykgPT4gbzMgPyBSZWRlbGVnYXRpb25SZXNwb25zZS50b0pTT04obzMpIDogdm9pZCAwKSkgOiB0NS5yZWRlbGVnYXRpb25SZXNwb25zZXMgPSBbXSwgdm9pZCAwICE9PSBvMi5wYWdpbmF0aW9uICYmICh0NS5wYWdpbmF0aW9uID0gbzIucGFnaW5hdGlvbiA/IFBhZ2VSZXNwb25zZS50b0pTT04obzIucGFnaW5hdGlvbikgOiB2b2lkIDApLCB0NTtcbn0sIGZyb21QYXJ0aWFsKG8yKSB7XG4gIGNvbnN0IHQ1ID0geyByZWRlbGVnYXRpb25SZXNwb25zZXM6IFtdLCBwYWdpbmF0aW9uOiB2b2lkIDAgfTtcbiAgcmV0dXJuIHQ1LnJlZGVsZWdhdGlvblJlc3BvbnNlcyA9IG8yLnJlZGVsZWdhdGlvblJlc3BvbnNlcz8ubWFwKCgobzMpID0+IFJlZGVsZWdhdGlvblJlc3BvbnNlLmZyb21QYXJ0aWFsKG8zKSkpIHx8IFtdLCB0NS5wYWdpbmF0aW9uID0gdm9pZCAwICE9PSBvMi5wYWdpbmF0aW9uICYmIG51bGwgIT09IG8yLnBhZ2luYXRpb24gPyBQYWdlUmVzcG9uc2UuZnJvbVBhcnRpYWwobzIucGFnaW5hdGlvbikgOiB2b2lkIDAsIHQ1O1xufSwgZnJvbVByb3RvTXNnOiAobzIpID0+IFF1ZXJ5UmVkZWxlZ2F0aW9uc1Jlc3BvbnNlLmRlY29kZShvMi52YWx1ZSksIHRvUHJvdG86IChvMikgPT4gUXVlcnlSZWRlbGVnYXRpb25zUmVzcG9uc2UuZW5jb2RlKG8yKS5maW5pc2goKSwgdG9Qcm90b01zZzogKG8yKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlF1ZXJ5UmVkZWxlZ2F0aW9uc1Jlc3BvbnNlXCIsIHZhbHVlOiBRdWVyeVJlZGVsZWdhdGlvbnNSZXNwb25zZS5lbmNvZGUobzIpLmZpbmlzaCgpIH0pIH07XG5cbi8qIC4uL2Nvc21pYy1wcm90by9kaXN0L2NvZGVnZW4vY29zbW9zL3N0YWtpbmcvdjFiZXRhMS90eC5qcyovXG5mdW5jdGlvbiB2KCkge1xuICByZXR1cm4geyBkZWxlZ2F0b3JBZGRyZXNzOiBcIlwiLCB2YWxpZGF0b3JBZGRyZXNzOiBcIlwiLCBhbW91bnQ6IENvaW4uZnJvbVBhcnRpYWwoe30pIH07XG59XG52YXIgTXNnRGVsZWdhdGUgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuTXNnRGVsZWdhdGVcIiwgZW5jb2RlOiAoZTIsIG8yID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAoXCJcIiAhPT0gZTIuZGVsZWdhdG9yQWRkcmVzcyAmJiBvMi51aW50MzIoMTApLnN0cmluZyhlMi5kZWxlZ2F0b3JBZGRyZXNzKSwgXCJcIiAhPT0gZTIudmFsaWRhdG9yQWRkcmVzcyAmJiBvMi51aW50MzIoMTgpLnN0cmluZyhlMi52YWxpZGF0b3JBZGRyZXNzKSwgdm9pZCAwICE9PSBlMi5hbW91bnQgJiYgQ29pbi5lbmNvZGUoZTIuYW1vdW50LCBvMi51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCksIG8yKSwgZGVjb2RlKGUyLCBvMikge1xuICBjb25zdCB0NSA9IGUyIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gZTIgOiBuZXcgQmluYXJ5UmVhZGVyKGUyKTtcbiAgbGV0IHMzID0gdm9pZCAwID09PSBvMiA/IHQ1LmxlbiA6IHQ1LnBvcyArIG8yO1xuICBjb25zdCBpMyA9IHYoKTtcbiAgZm9yICg7IHQ1LnBvcyA8IHMzOyApIHtcbiAgICBjb25zdCBlMyA9IHQ1LnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaTMuZGVsZWdhdG9yQWRkcmVzcyA9IHQ1LnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaTMudmFsaWRhdG9yQWRkcmVzcyA9IHQ1LnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaTMuYW1vdW50ID0gQ29pbi5kZWNvZGUodDUsIHQ1LnVpbnQzMigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0NS5za2lwVHlwZSg3ICYgZTMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTM7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyBkZWxlZ2F0b3JBZGRyZXNzOiBpc1NldChlMi5kZWxlZ2F0b3JBZGRyZXNzKSA/IFN0cmluZyhlMi5kZWxlZ2F0b3JBZGRyZXNzKSA6IFwiXCIsIHZhbGlkYXRvckFkZHJlc3M6IGlzU2V0KGUyLnZhbGlkYXRvckFkZHJlc3MpID8gU3RyaW5nKGUyLnZhbGlkYXRvckFkZHJlc3MpIDogXCJcIiwgYW1vdW50OiBpc1NldChlMi5hbW91bnQpID8gQ29pbi5mcm9tSlNPTihlMi5hbW91bnQpIDogdm9pZCAwIH0pLCB0b0pTT04oZTIpIHtcbiAgY29uc3QgbzIgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gZTIuZGVsZWdhdG9yQWRkcmVzcyAmJiAobzIuZGVsZWdhdG9yQWRkcmVzcyA9IGUyLmRlbGVnYXRvckFkZHJlc3MpLCB2b2lkIDAgIT09IGUyLnZhbGlkYXRvckFkZHJlc3MgJiYgKG8yLnZhbGlkYXRvckFkZHJlc3MgPSBlMi52YWxpZGF0b3JBZGRyZXNzKSwgdm9pZCAwICE9PSBlMi5hbW91bnQgJiYgKG8yLmFtb3VudCA9IGUyLmFtb3VudCA/IENvaW4udG9KU09OKGUyLmFtb3VudCkgOiB2b2lkIDApLCBvMjtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IG8yID0gdigpO1xuICByZXR1cm4gbzIuZGVsZWdhdG9yQWRkcmVzcyA9IGUyLmRlbGVnYXRvckFkZHJlc3MgPz8gXCJcIiwgbzIudmFsaWRhdG9yQWRkcmVzcyA9IGUyLnZhbGlkYXRvckFkZHJlc3MgPz8gXCJcIiwgbzIuYW1vdW50ID0gdm9pZCAwICE9PSBlMi5hbW91bnQgJiYgbnVsbCAhPT0gZTIuYW1vdW50ID8gQ29pbi5mcm9tUGFydGlhbChlMi5hbW91bnQpIDogdm9pZCAwLCBvMjtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBNc2dEZWxlZ2F0ZS5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IE1zZ0RlbGVnYXRlLmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5Nc2dEZWxlZ2F0ZVwiLCB2YWx1ZTogTXNnRGVsZWdhdGUuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xuZnVuY3Rpb24gcCgpIHtcbiAgcmV0dXJuIHsgZGVsZWdhdG9yQWRkcmVzczogXCJcIiwgdmFsaWRhdG9yU3JjQWRkcmVzczogXCJcIiwgdmFsaWRhdG9yRHN0QWRkcmVzczogXCJcIiwgYW1vdW50OiBDb2luLmZyb21QYXJ0aWFsKHt9KSB9O1xufVxudmFyIE1zZ0JlZ2luUmVkZWxlZ2F0ZSA9IHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5Nc2dCZWdpblJlZGVsZWdhdGVcIiwgZW5jb2RlOiAoZTIsIG8yID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAoXCJcIiAhPT0gZTIuZGVsZWdhdG9yQWRkcmVzcyAmJiBvMi51aW50MzIoMTApLnN0cmluZyhlMi5kZWxlZ2F0b3JBZGRyZXNzKSwgXCJcIiAhPT0gZTIudmFsaWRhdG9yU3JjQWRkcmVzcyAmJiBvMi51aW50MzIoMTgpLnN0cmluZyhlMi52YWxpZGF0b3JTcmNBZGRyZXNzKSwgXCJcIiAhPT0gZTIudmFsaWRhdG9yRHN0QWRkcmVzcyAmJiBvMi51aW50MzIoMjYpLnN0cmluZyhlMi52YWxpZGF0b3JEc3RBZGRyZXNzKSwgdm9pZCAwICE9PSBlMi5hbW91bnQgJiYgQ29pbi5lbmNvZGUoZTIuYW1vdW50LCBvMi51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCksIG8yKSwgZGVjb2RlKGUyLCBvMikge1xuICBjb25zdCB0NSA9IGUyIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gZTIgOiBuZXcgQmluYXJ5UmVhZGVyKGUyKTtcbiAgbGV0IHMzID0gdm9pZCAwID09PSBvMiA/IHQ1LmxlbiA6IHQ1LnBvcyArIG8yO1xuICBjb25zdCBpMyA9IHAoKTtcbiAgZm9yICg7IHQ1LnBvcyA8IHMzOyApIHtcbiAgICBjb25zdCBlMyA9IHQ1LnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaTMuZGVsZWdhdG9yQWRkcmVzcyA9IHQ1LnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaTMudmFsaWRhdG9yU3JjQWRkcmVzcyA9IHQ1LnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaTMudmFsaWRhdG9yRHN0QWRkcmVzcyA9IHQ1LnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgaTMuYW1vdW50ID0gQ29pbi5kZWNvZGUodDUsIHQ1LnVpbnQzMigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0NS5za2lwVHlwZSg3ICYgZTMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTM7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyBkZWxlZ2F0b3JBZGRyZXNzOiBpc1NldChlMi5kZWxlZ2F0b3JBZGRyZXNzKSA/IFN0cmluZyhlMi5kZWxlZ2F0b3JBZGRyZXNzKSA6IFwiXCIsIHZhbGlkYXRvclNyY0FkZHJlc3M6IGlzU2V0KGUyLnZhbGlkYXRvclNyY0FkZHJlc3MpID8gU3RyaW5nKGUyLnZhbGlkYXRvclNyY0FkZHJlc3MpIDogXCJcIiwgdmFsaWRhdG9yRHN0QWRkcmVzczogaXNTZXQoZTIudmFsaWRhdG9yRHN0QWRkcmVzcykgPyBTdHJpbmcoZTIudmFsaWRhdG9yRHN0QWRkcmVzcykgOiBcIlwiLCBhbW91bnQ6IGlzU2V0KGUyLmFtb3VudCkgPyBDb2luLmZyb21KU09OKGUyLmFtb3VudCkgOiB2b2lkIDAgfSksIHRvSlNPTihlMikge1xuICBjb25zdCBvMiA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5kZWxlZ2F0b3JBZGRyZXNzICYmIChvMi5kZWxlZ2F0b3JBZGRyZXNzID0gZTIuZGVsZWdhdG9yQWRkcmVzcyksIHZvaWQgMCAhPT0gZTIudmFsaWRhdG9yU3JjQWRkcmVzcyAmJiAobzIudmFsaWRhdG9yU3JjQWRkcmVzcyA9IGUyLnZhbGlkYXRvclNyY0FkZHJlc3MpLCB2b2lkIDAgIT09IGUyLnZhbGlkYXRvckRzdEFkZHJlc3MgJiYgKG8yLnZhbGlkYXRvckRzdEFkZHJlc3MgPSBlMi52YWxpZGF0b3JEc3RBZGRyZXNzKSwgdm9pZCAwICE9PSBlMi5hbW91bnQgJiYgKG8yLmFtb3VudCA9IGUyLmFtb3VudCA/IENvaW4udG9KU09OKGUyLmFtb3VudCkgOiB2b2lkIDApLCBvMjtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IG8yID0gcCgpO1xuICByZXR1cm4gbzIuZGVsZWdhdG9yQWRkcmVzcyA9IGUyLmRlbGVnYXRvckFkZHJlc3MgPz8gXCJcIiwgbzIudmFsaWRhdG9yU3JjQWRkcmVzcyA9IGUyLnZhbGlkYXRvclNyY0FkZHJlc3MgPz8gXCJcIiwgbzIudmFsaWRhdG9yRHN0QWRkcmVzcyA9IGUyLnZhbGlkYXRvckRzdEFkZHJlc3MgPz8gXCJcIiwgbzIuYW1vdW50ID0gdm9pZCAwICE9PSBlMi5hbW91bnQgJiYgbnVsbCAhPT0gZTIuYW1vdW50ID8gQ29pbi5mcm9tUGFydGlhbChlMi5hbW91bnQpIDogdm9pZCAwLCBvMjtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBNc2dCZWdpblJlZGVsZWdhdGUuZGVjb2RlKGUyLnZhbHVlKSwgdG9Qcm90bzogKGUyKSA9PiBNc2dCZWdpblJlZGVsZWdhdGUuZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLk1zZ0JlZ2luUmVkZWxlZ2F0ZVwiLCB2YWx1ZTogTXNnQmVnaW5SZWRlbGVnYXRlLmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcbmZ1bmN0aW9uIEEyKCkge1xuICByZXR1cm4geyBkZWxlZ2F0b3JBZGRyZXNzOiBcIlwiLCB2YWxpZGF0b3JBZGRyZXNzOiBcIlwiLCBhbW91bnQ6IENvaW4uZnJvbVBhcnRpYWwoe30pIH07XG59XG52YXIgTXNnVW5kZWxlZ2F0ZSA9IHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5Nc2dVbmRlbGVnYXRlXCIsIGVuY29kZTogKGUyLCBvMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKFwiXCIgIT09IGUyLmRlbGVnYXRvckFkZHJlc3MgJiYgbzIudWludDMyKDEwKS5zdHJpbmcoZTIuZGVsZWdhdG9yQWRkcmVzcyksIFwiXCIgIT09IGUyLnZhbGlkYXRvckFkZHJlc3MgJiYgbzIudWludDMyKDE4KS5zdHJpbmcoZTIudmFsaWRhdG9yQWRkcmVzcyksIHZvaWQgMCAhPT0gZTIuYW1vdW50ICYmIENvaW4uZW5jb2RlKGUyLmFtb3VudCwgbzIudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpLCBvMiksIGRlY29kZShlMiwgbzIpIHtcbiAgY29uc3QgdDUgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCBzMyA9IHZvaWQgMCA9PT0gbzIgPyB0NS5sZW4gOiB0NS5wb3MgKyBvMjtcbiAgY29uc3QgaTMgPSBBMigpO1xuICBmb3IgKDsgdDUucG9zIDwgczM7ICkge1xuICAgIGNvbnN0IGUzID0gdDUudWludDMyKCk7XG4gICAgc3dpdGNoIChlMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBpMy5kZWxlZ2F0b3JBZGRyZXNzID0gdDUuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBpMy52YWxpZGF0b3JBZGRyZXNzID0gdDUuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBpMy5hbW91bnQgPSBDb2luLmRlY29kZSh0NSwgdDUudWludDMyKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHQ1LnNraXBUeXBlKDcgJiBlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpMztcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IGRlbGVnYXRvckFkZHJlc3M6IGlzU2V0KGUyLmRlbGVnYXRvckFkZHJlc3MpID8gU3RyaW5nKGUyLmRlbGVnYXRvckFkZHJlc3MpIDogXCJcIiwgdmFsaWRhdG9yQWRkcmVzczogaXNTZXQoZTIudmFsaWRhdG9yQWRkcmVzcykgPyBTdHJpbmcoZTIudmFsaWRhdG9yQWRkcmVzcykgOiBcIlwiLCBhbW91bnQ6IGlzU2V0KGUyLmFtb3VudCkgPyBDb2luLmZyb21KU09OKGUyLmFtb3VudCkgOiB2b2lkIDAgfSksIHRvSlNPTihlMikge1xuICBjb25zdCBvMiA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5kZWxlZ2F0b3JBZGRyZXNzICYmIChvMi5kZWxlZ2F0b3JBZGRyZXNzID0gZTIuZGVsZWdhdG9yQWRkcmVzcyksIHZvaWQgMCAhPT0gZTIudmFsaWRhdG9yQWRkcmVzcyAmJiAobzIudmFsaWRhdG9yQWRkcmVzcyA9IGUyLnZhbGlkYXRvckFkZHJlc3MpLCB2b2lkIDAgIT09IGUyLmFtb3VudCAmJiAobzIuYW1vdW50ID0gZTIuYW1vdW50ID8gQ29pbi50b0pTT04oZTIuYW1vdW50KSA6IHZvaWQgMCksIG8yO1xufSwgZnJvbVBhcnRpYWwoZTIpIHtcbiAgY29uc3QgbzIgPSBBMigpO1xuICByZXR1cm4gbzIuZGVsZWdhdG9yQWRkcmVzcyA9IGUyLmRlbGVnYXRvckFkZHJlc3MgPz8gXCJcIiwgbzIudmFsaWRhdG9yQWRkcmVzcyA9IGUyLnZhbGlkYXRvckFkZHJlc3MgPz8gXCJcIiwgbzIuYW1vdW50ID0gdm9pZCAwICE9PSBlMi5hbW91bnQgJiYgbnVsbCAhPT0gZTIuYW1vdW50ID8gQ29pbi5mcm9tUGFydGlhbChlMi5hbW91bnQpIDogdm9pZCAwLCBvMjtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBNc2dVbmRlbGVnYXRlLmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gTXNnVW5kZWxlZ2F0ZS5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuTXNnVW5kZWxlZ2F0ZVwiLCB2YWx1ZTogTXNnVW5kZWxlZ2F0ZS5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG5mdW5jdGlvbiBNMigpIHtcbiAgcmV0dXJuIHsgY29tcGxldGlvblRpbWU6IFRpbWVzdGFtcC5mcm9tUGFydGlhbCh7fSksIGFtb3VudDogQ29pbi5mcm9tUGFydGlhbCh7fSkgfTtcbn1cbnZhciBNc2dVbmRlbGVnYXRlUmVzcG9uc2UgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuTXNnVW5kZWxlZ2F0ZVJlc3BvbnNlXCIsIGVuY29kZTogKGUyLCBvMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKHZvaWQgMCAhPT0gZTIuY29tcGxldGlvblRpbWUgJiYgVGltZXN0YW1wLmVuY29kZShlMi5jb21wbGV0aW9uVGltZSwgbzIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpLCB2b2lkIDAgIT09IGUyLmFtb3VudCAmJiBDb2luLmVuY29kZShlMi5hbW91bnQsIG8yLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKSwgbzIpLCBkZWNvZGUoZTIsIG8yKSB7XG4gIGNvbnN0IHQ1ID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgczMgPSB2b2lkIDAgPT09IG8yID8gdDUubGVuIDogdDUucG9zICsgbzI7XG4gIGNvbnN0IGQgPSBNMigpO1xuICBmb3IgKDsgdDUucG9zIDwgczM7ICkge1xuICAgIGNvbnN0IGUzID0gdDUudWludDMyKCk7XG4gICAgc3dpdGNoIChlMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBkLmNvbXBsZXRpb25UaW1lID0gVGltZXN0YW1wLmRlY29kZSh0NSwgdDUudWludDMyKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgZC5hbW91bnQgPSBDb2luLmRlY29kZSh0NSwgdDUudWludDMyKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHQ1LnNraXBUeXBlKDcgJiBlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkO1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgY29tcGxldGlvblRpbWU6IGlzU2V0KGUyLmNvbXBsZXRpb25UaW1lKSA/IGZyb21Kc29uVGltZXN0YW1wKGUyLmNvbXBsZXRpb25UaW1lKSA6IHZvaWQgMCwgYW1vdW50OiBpc1NldChlMi5hbW91bnQpID8gQ29pbi5mcm9tSlNPTihlMi5hbW91bnQpIDogdm9pZCAwIH0pLCB0b0pTT04oZTIpIHtcbiAgY29uc3QgbzIgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gZTIuY29tcGxldGlvblRpbWUgJiYgKG8yLmNvbXBsZXRpb25UaW1lID0gZnJvbVRpbWVzdGFtcChlMi5jb21wbGV0aW9uVGltZSkudG9JU09TdHJpbmcoKSksIHZvaWQgMCAhPT0gZTIuYW1vdW50ICYmIChvMi5hbW91bnQgPSBlMi5hbW91bnQgPyBDb2luLnRvSlNPTihlMi5hbW91bnQpIDogdm9pZCAwKSwgbzI7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCBvMiA9IE0yKCk7XG4gIHJldHVybiBvMi5jb21wbGV0aW9uVGltZSA9IHZvaWQgMCAhPT0gZTIuY29tcGxldGlvblRpbWUgJiYgbnVsbCAhPT0gZTIuY29tcGxldGlvblRpbWUgPyBUaW1lc3RhbXAuZnJvbVBhcnRpYWwoZTIuY29tcGxldGlvblRpbWUpIDogdm9pZCAwLCBvMi5hbW91bnQgPSB2b2lkIDAgIT09IGUyLmFtb3VudCAmJiBudWxsICE9PSBlMi5hbW91bnQgPyBDb2luLmZyb21QYXJ0aWFsKGUyLmFtb3VudCkgOiB2b2lkIDAsIG8yO1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IE1zZ1VuZGVsZWdhdGVSZXNwb25zZS5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IE1zZ1VuZGVsZWdhdGVSZXNwb25zZS5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuTXNnVW5kZWxlZ2F0ZVJlc3BvbnNlXCIsIHZhbHVlOiBNc2dVbmRlbGVnYXRlUmVzcG9uc2UuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xuXG4vKiAuLi9jb3NtaWMtcHJvdG8vZGlzdC9jb2RlZ2VuL2liYy9jb3JlL2NsaWVudC92MS9jbGllbnQuanMqL1xuZnVuY3Rpb24gcjUoKSB7XG4gIHJldHVybiB7IHJldmlzaW9uTnVtYmVyOiBCaWdJbnQoMCksIHJldmlzaW9uSGVpZ2h0OiBCaWdJbnQoMCkgfTtcbn1cbnZhciBIZWlnaHQgPSB7IHR5cGVVcmw6IFwiL2liYy5jb3JlLmNsaWVudC52MS5IZWlnaHRcIiwgZW5jb2RlOiAodDUsIGUyID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAodDUucmV2aXNpb25OdW1iZXIgIT09IEJpZ0ludCgwKSAmJiBlMi51aW50MzIoOCkudWludDY0KHQ1LnJldmlzaW9uTnVtYmVyKSwgdDUucmV2aXNpb25IZWlnaHQgIT09IEJpZ0ludCgwKSAmJiBlMi51aW50MzIoMTYpLnVpbnQ2NCh0NS5yZXZpc2lvbkhlaWdodCksIGUyKSwgZGVjb2RlKHQ1LCBlMikge1xuICBjb25zdCBuMiA9IHQ1IGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gdDUgOiBuZXcgQmluYXJ5UmVhZGVyKHQ1KTtcbiAgbGV0IG8yID0gdm9pZCAwID09PSBlMiA/IG4yLmxlbiA6IG4yLnBvcyArIGUyO1xuICBjb25zdCBzMyA9IHI1KCk7XG4gIGZvciAoOyBuMi5wb3MgPCBvMjsgKSB7XG4gICAgY29uc3QgdDYgPSBuMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKHQ2ID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHMzLnJldmlzaW9uTnVtYmVyID0gbjIudWludDY0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBzMy5yZXZpc2lvbkhlaWdodCA9IG4yLnVpbnQ2NCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG4yLnNraXBUeXBlKDcgJiB0Nik7XG4gICAgfVxuICB9XG4gIHJldHVybiBzMztcbn0sIGZyb21KU09OOiAodDUpID0+ICh7IHJldmlzaW9uTnVtYmVyOiBpc1NldCh0NS5yZXZpc2lvbk51bWJlcikgPyBCaWdJbnQodDUucmV2aXNpb25OdW1iZXIudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIHJldmlzaW9uSGVpZ2h0OiBpc1NldCh0NS5yZXZpc2lvbkhlaWdodCkgPyBCaWdJbnQodDUucmV2aXNpb25IZWlnaHQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCkgfSksIHRvSlNPTih0NSkge1xuICBjb25zdCBlMiA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSB0NS5yZXZpc2lvbk51bWJlciAmJiAoZTIucmV2aXNpb25OdW1iZXIgPSAodDUucmV2aXNpb25OdW1iZXIgfHwgQmlnSW50KDApKS50b1N0cmluZygpKSwgdm9pZCAwICE9PSB0NS5yZXZpc2lvbkhlaWdodCAmJiAoZTIucmV2aXNpb25IZWlnaHQgPSAodDUucmV2aXNpb25IZWlnaHQgfHwgQmlnSW50KDApKS50b1N0cmluZygpKSwgZTI7XG59LCBmcm9tUGFydGlhbCh0NSkge1xuICBjb25zdCBlMiA9IHI1KCk7XG4gIHJldHVybiBlMi5yZXZpc2lvbk51bWJlciA9IHZvaWQgMCAhPT0gdDUucmV2aXNpb25OdW1iZXIgJiYgbnVsbCAhPT0gdDUucmV2aXNpb25OdW1iZXIgPyBCaWdJbnQodDUucmV2aXNpb25OdW1iZXIudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIGUyLnJldmlzaW9uSGVpZ2h0ID0gdm9pZCAwICE9PSB0NS5yZXZpc2lvbkhlaWdodCAmJiBudWxsICE9PSB0NS5yZXZpc2lvbkhlaWdodCA/IEJpZ0ludCh0NS5yZXZpc2lvbkhlaWdodC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgZTI7XG59LCBmcm9tUHJvdG9Nc2c6ICh0NSkgPT4gSGVpZ2h0LmRlY29kZSh0NS52YWx1ZSksIHRvUHJvdG86ICh0NSkgPT4gSGVpZ2h0LmVuY29kZSh0NSkuZmluaXNoKCksIHRvUHJvdG9Nc2c6ICh0NSkgPT4gKHsgdHlwZVVybDogXCIvaWJjLmNvcmUuY2xpZW50LnYxLkhlaWdodFwiLCB2YWx1ZTogSGVpZ2h0LmVuY29kZSh0NSkuZmluaXNoKCkgfSkgfTtcblxuLyogLi4vY29zbWljLXByb3RvL2Rpc3QvY29kZWdlbi9pYmMvYXBwbGljYXRpb25zL3RyYW5zZmVyL3YxL3R4LmpzKi9cbmZ1bmN0aW9uIGkoKSB7XG4gIHJldHVybiB7IHNvdXJjZVBvcnQ6IFwiXCIsIHNvdXJjZUNoYW5uZWw6IFwiXCIsIHRva2VuOiBDb2luLmZyb21QYXJ0aWFsKHt9KSwgc2VuZGVyOiBcIlwiLCByZWNlaXZlcjogXCJcIiwgdGltZW91dEhlaWdodDogSGVpZ2h0LmZyb21QYXJ0aWFsKHt9KSwgdGltZW91dFRpbWVzdGFtcDogQmlnSW50KDApLCBtZW1vOiBcIlwiIH07XG59XG52YXIgTXNnVHJhbnNmZXIgPSB7IHR5cGVVcmw6IFwiL2liYy5hcHBsaWNhdGlvbnMudHJhbnNmZXIudjEuTXNnVHJhbnNmZXJcIiwgZW5jb2RlOiAobzIsIHI2ID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAoXCJcIiAhPT0gbzIuc291cmNlUG9ydCAmJiByNi51aW50MzIoMTApLnN0cmluZyhvMi5zb3VyY2VQb3J0KSwgXCJcIiAhPT0gbzIuc291cmNlQ2hhbm5lbCAmJiByNi51aW50MzIoMTgpLnN0cmluZyhvMi5zb3VyY2VDaGFubmVsKSwgdm9pZCAwICE9PSBvMi50b2tlbiAmJiBDb2luLmVuY29kZShvMi50b2tlbiwgcjYudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpLCBcIlwiICE9PSBvMi5zZW5kZXIgJiYgcjYudWludDMyKDM0KS5zdHJpbmcobzIuc2VuZGVyKSwgXCJcIiAhPT0gbzIucmVjZWl2ZXIgJiYgcjYudWludDMyKDQyKS5zdHJpbmcobzIucmVjZWl2ZXIpLCB2b2lkIDAgIT09IG8yLnRpbWVvdXRIZWlnaHQgJiYgSGVpZ2h0LmVuY29kZShvMi50aW1lb3V0SGVpZ2h0LCByNi51aW50MzIoNTApLmZvcmsoKSkubGRlbGltKCksIG8yLnRpbWVvdXRUaW1lc3RhbXAgIT09IEJpZ0ludCgwKSAmJiByNi51aW50MzIoNTYpLnVpbnQ2NChvMi50aW1lb3V0VGltZXN0YW1wKSwgXCJcIiAhPT0gbzIubWVtbyAmJiByNi51aW50MzIoNjYpLnN0cmluZyhvMi5tZW1vKSwgcjYpLCBkZWNvZGUobzIsIHMzKSB7XG4gIGNvbnN0IG4yID0gbzIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBvMiA6IG5ldyBCaW5hcnlSZWFkZXIobzIpO1xuICBsZXQgYTIgPSB2b2lkIDAgPT09IHMzID8gbjIubGVuIDogbjIucG9zICsgczM7XG4gIGNvbnN0IG0yID0gaSgpO1xuICBmb3IgKDsgbjIucG9zIDwgYTI7ICkge1xuICAgIGNvbnN0IG8zID0gbjIudWludDMyKCk7XG4gICAgc3dpdGNoIChvMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBtMi5zb3VyY2VQb3J0ID0gbjIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBtMi5zb3VyY2VDaGFubmVsID0gbjIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBtMi50b2tlbiA9IENvaW4uZGVjb2RlKG4yLCBuMi51aW50MzIoKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICBtMi5zZW5kZXIgPSBuMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDU6XG4gICAgICAgIG0yLnJlY2VpdmVyID0gbjIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA2OlxuICAgICAgICBtMi50aW1lb3V0SGVpZ2h0ID0gSGVpZ2h0LmRlY29kZShuMiwgbjIudWludDMyKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNzpcbiAgICAgICAgbTIudGltZW91dFRpbWVzdGFtcCA9IG4yLnVpbnQ2NCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgODpcbiAgICAgICAgbTIubWVtbyA9IG4yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG4yLnNraXBUeXBlKDcgJiBvMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtMjtcbn0sIGZyb21KU09OOiAobzIpID0+ICh7IHNvdXJjZVBvcnQ6IGlzU2V0KG8yLnNvdXJjZVBvcnQpID8gU3RyaW5nKG8yLnNvdXJjZVBvcnQpIDogXCJcIiwgc291cmNlQ2hhbm5lbDogaXNTZXQobzIuc291cmNlQ2hhbm5lbCkgPyBTdHJpbmcobzIuc291cmNlQ2hhbm5lbCkgOiBcIlwiLCB0b2tlbjogaXNTZXQobzIudG9rZW4pID8gQ29pbi5mcm9tSlNPTihvMi50b2tlbikgOiB2b2lkIDAsIHNlbmRlcjogaXNTZXQobzIuc2VuZGVyKSA/IFN0cmluZyhvMi5zZW5kZXIpIDogXCJcIiwgcmVjZWl2ZXI6IGlzU2V0KG8yLnJlY2VpdmVyKSA/IFN0cmluZyhvMi5yZWNlaXZlcikgOiBcIlwiLCB0aW1lb3V0SGVpZ2h0OiBpc1NldChvMi50aW1lb3V0SGVpZ2h0KSA/IEhlaWdodC5mcm9tSlNPTihvMi50aW1lb3V0SGVpZ2h0KSA6IHZvaWQgMCwgdGltZW91dFRpbWVzdGFtcDogaXNTZXQobzIudGltZW91dFRpbWVzdGFtcCkgPyBCaWdJbnQobzIudGltZW91dFRpbWVzdGFtcC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgbWVtbzogaXNTZXQobzIubWVtbykgPyBTdHJpbmcobzIubWVtbykgOiBcIlwiIH0pLCB0b0pTT04obzIpIHtcbiAgY29uc3QgcjYgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gbzIuc291cmNlUG9ydCAmJiAocjYuc291cmNlUG9ydCA9IG8yLnNvdXJjZVBvcnQpLCB2b2lkIDAgIT09IG8yLnNvdXJjZUNoYW5uZWwgJiYgKHI2LnNvdXJjZUNoYW5uZWwgPSBvMi5zb3VyY2VDaGFubmVsKSwgdm9pZCAwICE9PSBvMi50b2tlbiAmJiAocjYudG9rZW4gPSBvMi50b2tlbiA/IENvaW4udG9KU09OKG8yLnRva2VuKSA6IHZvaWQgMCksIHZvaWQgMCAhPT0gbzIuc2VuZGVyICYmIChyNi5zZW5kZXIgPSBvMi5zZW5kZXIpLCB2b2lkIDAgIT09IG8yLnJlY2VpdmVyICYmIChyNi5yZWNlaXZlciA9IG8yLnJlY2VpdmVyKSwgdm9pZCAwICE9PSBvMi50aW1lb3V0SGVpZ2h0ICYmIChyNi50aW1lb3V0SGVpZ2h0ID0gbzIudGltZW91dEhlaWdodCA/IEhlaWdodC50b0pTT04obzIudGltZW91dEhlaWdodCkgOiB2b2lkIDApLCB2b2lkIDAgIT09IG8yLnRpbWVvdXRUaW1lc3RhbXAgJiYgKHI2LnRpbWVvdXRUaW1lc3RhbXAgPSAobzIudGltZW91dFRpbWVzdGFtcCB8fCBCaWdJbnQoMCkpLnRvU3RyaW5nKCkpLCB2b2lkIDAgIT09IG8yLm1lbW8gJiYgKHI2Lm1lbW8gPSBvMi5tZW1vKSwgcjY7XG59LCBmcm9tUGFydGlhbChvMikge1xuICBjb25zdCByNiA9IGkoKTtcbiAgcmV0dXJuIHI2LnNvdXJjZVBvcnQgPSBvMi5zb3VyY2VQb3J0ID8/IFwiXCIsIHI2LnNvdXJjZUNoYW5uZWwgPSBvMi5zb3VyY2VDaGFubmVsID8/IFwiXCIsIHI2LnRva2VuID0gdm9pZCAwICE9PSBvMi50b2tlbiAmJiBudWxsICE9PSBvMi50b2tlbiA/IENvaW4uZnJvbVBhcnRpYWwobzIudG9rZW4pIDogdm9pZCAwLCByNi5zZW5kZXIgPSBvMi5zZW5kZXIgPz8gXCJcIiwgcjYucmVjZWl2ZXIgPSBvMi5yZWNlaXZlciA/PyBcIlwiLCByNi50aW1lb3V0SGVpZ2h0ID0gdm9pZCAwICE9PSBvMi50aW1lb3V0SGVpZ2h0ICYmIG51bGwgIT09IG8yLnRpbWVvdXRIZWlnaHQgPyBIZWlnaHQuZnJvbVBhcnRpYWwobzIudGltZW91dEhlaWdodCkgOiB2b2lkIDAsIHI2LnRpbWVvdXRUaW1lc3RhbXAgPSB2b2lkIDAgIT09IG8yLnRpbWVvdXRUaW1lc3RhbXAgJiYgbnVsbCAhPT0gbzIudGltZW91dFRpbWVzdGFtcCA/IEJpZ0ludChvMi50aW1lb3V0VGltZXN0YW1wLnRvU3RyaW5nKCkpIDogQmlnSW50KDApLCByNi5tZW1vID0gbzIubWVtbyA/PyBcIlwiLCByNjtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBNc2dUcmFuc2Zlci5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IE1zZ1RyYW5zZmVyLmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvaWJjLmFwcGxpY2F0aW9ucy50cmFuc2Zlci52MS5Nc2dUcmFuc2ZlclwiLCB2YWx1ZTogTXNnVHJhbnNmZXIuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xuXG4vKiAuLi9vcmNoZXN0cmF0aW9uL3NyYy91dGlscy9hbW91bnRzLmpzKi9cbnZhciBjb2VyY2VEZW5vbSA9IChjaGFpbkh1YiwgZGVub21BcmcpID0+IHtcbiAgaWYgKHR5cGVvZiBkZW5vbUFyZyA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBkZW5vbUFyZztcbiAgfVxuICBjb25zdCBkZW5vbSA9IGNoYWluSHViLmdldERlbm9tKGRlbm9tQXJnKTtcbiAgaWYgKCFkZW5vbSkge1xuICAgIHRocm93IG1ha2VFcnJvcihgTm8gZGVub20gZm9yIGJyYW5kICR7ZGVub21Bcmd9YCk7XG4gIH1cbiAgcmV0dXJuIGRlbm9tO1xufTtcbnZhciBjb2VyY2VEZW5vbUFtb3VudCA9IChjaGFpbkh1YiwgYW1vdW50KSA9PiB7XG4gIGlmIChcImRlbm9tXCIgaW4gYW1vdW50KSB7XG4gICAgcmV0dXJuIGFtb3VudDtcbiAgfVxuICBjb25zdCBkZW5vbSA9IGNvZXJjZURlbm9tKGNoYWluSHViLCBhbW91bnQuYnJhbmQpO1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICBkZW5vbSxcbiAgICB2YWx1ZTogYW1vdW50LnZhbHVlXG4gIH0pO1xufTtcbnZhciBjb2VyY2VDb2luID0gKGNoYWluSHViLCBhbW91bnQpID0+IHtcbiAgY29uc3QgZGVub20gPSBcImRlbm9tXCIgaW4gYW1vdW50ID8gYW1vdW50LmRlbm9tIDogY29lcmNlRGVub20oY2hhaW5IdWIsIGFtb3VudC5icmFuZCk7XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIGRlbm9tLFxuICAgIGFtb3VudDogU3RyaW5nKGFtb3VudC52YWx1ZSlcbiAgfSk7XG59O1xuXG4vKiAuLi9vcmNoZXN0cmF0aW9uL3NyYy91dGlscy9jb3Ntb3MuanMqL1xudmFyIG1heENsb2NrU2tldyA9IDEwbiAqIDYwbjtcbnZhciB0cnlEZWNvZGVSZXNwb25zZSA9IChhY2tTdHIsIGZyb21Qcm90b01zZykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGFueSA9IEFueS5kZWNvZGUoZGVjb2RlQmFzZTY0KGFja1N0cikpO1xuICAgIGNvbnN0IHByb3RvTXNnID0gQW55LmRlY29kZShhbnkudmFsdWUpO1xuICAgIGNvbnN0IG1zZyA9IGZyb21Qcm90b01zZyhwcm90b01zZyk7XG4gICAgcmV0dXJuIG1zZztcbiAgfSBjYXRjaCAoY2F1c2UpIHtcbiAgICB0aHJvdyBtYWtlRXJyb3IoYGJhZCByZXNwb25zZTogJHthY2tTdHJ9YCwgdm9pZCAwLCB7IGNhdXNlIH0pO1xuICB9XG59O1xudmFyIHRvRGVub21BbW91bnQgPSAoYzIpID0+ICh7IGRlbm9tOiBjMi5kZW5vbSwgdmFsdWU6IEJpZ0ludChjMi5hbW91bnQpIH0pO1xudmFyIHRvVHJ1bmNhdGVkRGVub21BbW91bnQgPSAoYzIpID0+ICh7XG4gIGRlbm9tOiBjMi5kZW5vbSxcbiAgdmFsdWU6IEJpZ0ludChjMi5hbW91bnQuc3BsaXQoXCIuXCIpWzBdKVxufSk7XG52YXIgdG9Db3Ntb3NWYWxpZGF0b3JBZGRyZXNzID0gKHI2LCBjaGFpbklkKSA9PiAoe1xuICBlbmNvZGluZzogXCJiZWNoMzJcIixcbiAgdmFsdWU6IChcbiAgICAvKiogQHR5cGUge0Nvc21vc1ZhbGlkYXRvckFkZHJlc3NbJ3ZhbHVlJ119ICovXG4gICAgcjYudmFsaWRhdG9yQWRkcmVzc1xuICApLFxuICBjaGFpbklkXG59KTtcbnZhciB0b0Nvc21vc0RlbGVnYXRpb25SZXNwb25zZSA9ICh7IGNoYWluSWQgfSwgcjYpID0+ICh7XG4gIGRlbGVnYXRvcjoge1xuICAgIGNoYWluSWQsXG4gICAgZW5jb2Rpbmc6IFwiYmVjaDMyXCIsXG4gICAgdmFsdWU6IChcbiAgICAgIC8qKiBAdHlwZSB7QmVjaDMyQWRkcmVzc30gKi9cbiAgICAgIHI2LmRlbGVnYXRpb24uZGVsZWdhdG9yQWRkcmVzc1xuICAgIClcbiAgfSxcbiAgdmFsaWRhdG9yOiB0b0Nvc21vc1ZhbGlkYXRvckFkZHJlc3MocjYuZGVsZWdhdGlvbiwgY2hhaW5JZCksXG4gIGFtb3VudDogdG9EZW5vbUFtb3VudChyNi5iYWxhbmNlKVxufSk7XG5cbi8qIC4uL0VSVFAvc3JjL21hdGhIZWxwZXJzL25hdE1hdGhIZWxwZXJzLmpzKi9cbnZhciBlbXB0eSA9IDBuO1xudmFyIG5hdE1hdGhIZWxwZXJzID0gaGFyZGVuKHtcbiAgZG9Db2VyY2U6IChuYXQpID0+IHtcbiAgICBhc3NlcnQudHlwZW9mKG5hdCwgXCJiaWdpbnRcIik7XG4gICAgaXNOYXQobmF0KSB8fCB0aHJvd1JlZGFjdGVkYHZhbHVlICR7bmF0fSBtdXN0IGJlIGEgbmF0dXJhbCBudW1iZXJgO1xuICAgIHJldHVybiBOYXQobmF0KTtcbiAgfSxcbiAgZG9NYWtlRW1wdHk6ICgpID0+IGVtcHR5LFxuICBkb0lzRW1wdHk6IChuYXQpID0+IG5hdCA9PT0gZW1wdHksXG4gIGRvSXNHVEU6IChsZWZ0LCByaWdodCkgPT4gbGVmdCA+PSByaWdodCxcbiAgZG9Jc0VxdWFsOiAobGVmdCwgcmlnaHQpID0+IGxlZnQgPT09IHJpZ2h0LFxuICAvKiBCaWdJbnRzIGRvbid0IG9ic2VydmFibHkgb3ZlcmZsb3cqL1xuICBkb0FkZDogKGxlZnQsIHJpZ2h0KSA9PiBsZWZ0ICsgcmlnaHQsXG4gIGRvU3VidHJhY3Q6IChsZWZ0LCByaWdodCkgPT4gTmF0KGxlZnQgLSByaWdodClcbn0pO1xuXG4vKiAuLi9FUlRQL3NyYy9tYXRoSGVscGVycy9zZXRNYXRoSGVscGVycy5qcyovXG52YXIgZW1wdHkyID0gaGFyZGVuKFtdKTtcbnZhciBzZXRNYXRoSGVscGVycyA9IGhhcmRlbih7XG4gIGRvQ29lcmNlOiAobGlzdCkgPT4ge1xuICAgIGxpc3QgPSBjb2VyY2VUb0VsZW1lbnRzKGxpc3QpO1xuICAgIGFzc2VydEtleShsaXN0KTtcbiAgICByZXR1cm4gbGlzdDtcbiAgfSxcbiAgZG9NYWtlRW1wdHk6ICgpID0+IGVtcHR5MixcbiAgZG9Jc0VtcHR5OiAobGlzdCkgPT4gcGFzc1N0eWxlT2YobGlzdCkgPT09IFwiY29weUFycmF5XCIgJiYgbGlzdC5sZW5ndGggPT09IDAsXG4gIGRvSXNHVEU6IGVsZW1lbnRzSXNTdXBlcnNldCxcbiAgZG9Jc0VxdWFsOiAoeCwgeSkgPT4gZWxlbWVudHNDb21wYXJlKHgsIHkpID09PSAwLFxuICBkb0FkZDogZWxlbWVudHNEaXNqb2ludFVuaW9uLFxuICBkb1N1YnRyYWN0OiBlbGVtZW50c0Rpc2pvaW50U3VidHJhY3Rcbn0pO1xuXG4vKiAuLi9FUlRQL3NyYy9tYXRoSGVscGVycy9jb3B5U2V0TWF0aEhlbHBlcnMuanMqL1xudmFyIGVtcHR5MyA9IG1ha2VDb3B5U2V0KFtdKTtcbnZhciBjb3B5U2V0TWF0aEhlbHBlcnMgPSBoYXJkZW4oe1xuICBkb0NvZXJjZTogKHNldCkgPT4ge1xuICAgIG11c3RNYXRjaDIoc2V0LCBNLnNldCgpLCBcInNldCBvZiBhbW91bnRcIik7XG4gICAgcmV0dXJuIHNldDtcbiAgfSxcbiAgZG9NYWtlRW1wdHk6ICgpID0+IGVtcHR5MyxcbiAgZG9Jc0VtcHR5OiAoc2V0KSA9PiBnZXRDb3B5U2V0S2V5cyhzZXQpLmxlbmd0aCA9PT0gMCxcbiAgZG9Jc0dURTogc2V0SXNTdXBlcnNldCxcbiAgZG9Jc0VxdWFsOiBrZXlFUSxcbiAgZG9BZGQ6IHNldERpc2pvaW50VW5pb24sXG4gIGRvU3VidHJhY3Q6IHNldERpc2pvaW50U3VidHJhY3Rcbn0pO1xuXG4vKiAuLi9FUlRQL3NyYy9tYXRoSGVscGVycy9jb3B5QmFnTWF0aEhlbHBlcnMuanMqL1xudmFyIGVtcHR5NCA9IG1ha2VDb3B5QmFnKFtdKTtcbnZhciBjb3B5QmFnTWF0aEhlbHBlcnMgPSBoYXJkZW4oe1xuICBkb0NvZXJjZTogKGJhZykgPT4ge1xuICAgIG11c3RNYXRjaDIoYmFnLCBNLmJhZygpLCBcImJhZyBvZiBhbW91bnRcIik7XG4gICAgcmV0dXJuIGJhZztcbiAgfSxcbiAgZG9NYWtlRW1wdHk6ICgpID0+IGVtcHR5NCxcbiAgZG9Jc0VtcHR5OiAoYmFnKSA9PiBnZXRDb3B5QmFnRW50cmllcyhiYWcpLmxlbmd0aCA9PT0gMCxcbiAgZG9Jc0dURTogYmFnSXNTdXBlcmJhZyxcbiAgZG9Jc0VxdWFsOiBrZXlFUSxcbiAgZG9BZGQ6IGJhZ1VuaW9uLFxuICBkb1N1YnRyYWN0OiBiYWdEaXNqb2ludFN1YnRyYWN0XG59KTtcblxuLyogLi4vRVJUUC9zcmMvYW1vdW50TWF0aC5qcyovXG52YXIgQXNzZXRLaW5kID0gKFxuICAvKiogQHR5cGUge2NvbnN0fSAqL1xuICB7XG4gICAgTkFUOiBcIm5hdFwiLFxuICAgIFNFVDogXCJzZXRcIixcbiAgICBDT1BZX1NFVDogXCJjb3B5U2V0XCIsXG4gICAgQ09QWV9CQUc6IFwiY29weUJhZ1wiXG4gIH1cbik7XG5oYXJkZW4oQXNzZXRLaW5kKTtcbnZhciBhc3NldEtpbmROYW1lcyA9IGhhcmRlbihPYmplY3QudmFsdWVzKEFzc2V0S2luZCkuc29ydCgpKTtcbnZhciBhc3NlcnRBc3NldEtpbmQgPSAoYWxsZWdlZEFLKSA9PiB7XG4gIGFzc2V0S2luZE5hbWVzLmluY2x1ZGVzKGFsbGVnZWRBSykgfHwgdGhyb3dSZWRhY3RlZGBUaGUgYXNzZXRLaW5kICR7YWxsZWdlZEFLfSBtdXN0IGJlIG9uZSBvZiAke3F1b3RlKGFzc2V0S2luZE5hbWVzKX1gO1xufTtcbmhhcmRlbihhc3NlcnRBc3NldEtpbmQpO1xudmFyIGhlbHBlcnMgPSB7XG4gIG5hdDogbmF0TWF0aEhlbHBlcnMsXG4gIHNldDogc2V0TWF0aEhlbHBlcnMsXG4gIGNvcHlTZXQ6IGNvcHlTZXRNYXRoSGVscGVycyxcbiAgY29weUJhZzogY29weUJhZ01hdGhIZWxwZXJzXG59O1xudmFyIGFzc2VydFZhbHVlR2V0QXNzZXRLaW5kID0gKHZhbHVlKSA9PiB7XG4gIGNvbnN0IHBhc3NTdHlsZSA9IHBhc3NTdHlsZU9mKHZhbHVlKTtcbiAgaWYgKHBhc3NTdHlsZSA9PT0gXCJiaWdpbnRcIikge1xuICAgIHJldHVybiBcIm5hdFwiO1xuICB9XG4gIGlmIChwYXNzU3R5bGUgPT09IFwiY29weUFycmF5XCIpIHtcbiAgICByZXR1cm4gXCJzZXRcIjtcbiAgfVxuICBpZiAobWF0Y2hlcyh2YWx1ZSwgTS5zZXQoKSkpIHtcbiAgICByZXR1cm4gXCJjb3B5U2V0XCI7XG4gIH1cbiAgaWYgKG1hdGNoZXModmFsdWUsIE0uYmFnKCkpKSB7XG4gICAgcmV0dXJuIFwiY29weUJhZ1wiO1xuICB9XG4gIHRocm93IHRocm93UmVkYWN0ZWRgdmFsdWUgJHt2YWx1ZX0gbXVzdCBiZSBhIGJpZ2ludCwgY29weVNldCwgY29weUJhZywgb3IgYW4gYXJyYXksIG5vdCAke3F1b3RlKFxuICAgIHBhc3NTdHlsZVxuICApfWA7XG59O1xudmFyIGFzc2VydFZhbHVlR2V0SGVscGVycyA9ICh2YWx1ZSkgPT4gKFxuICAvKiBAdHMtZXhwZWN0LWVycm9yIGNhc3QqL1xuICBoZWxwZXJzW2Fzc2VydFZhbHVlR2V0QXNzZXRLaW5kKHZhbHVlKV1cbik7XG52YXIgb3B0aW9uYWxCcmFuZENoZWNrID0gKGFsbGVnZWRCcmFuZCwgYnJhbmQpID0+IHtcbiAgaWYgKGJyYW5kICE9PSB2b2lkIDApIHtcbiAgICBhc3NlcnRSZW1vdGFibGUoYnJhbmQsIFwiYnJhbmRcIik7XG4gICAgYWxsZWdlZEJyYW5kID09PSBicmFuZCB8fCB0aHJvd1JlZGFjdGVkYGFtb3VudCdzIGJyYW5kICR7cXVvdGUoYWxsZWdlZEJyYW5kKX0gZGlkIG5vdCBtYXRjaCBleHBlY3RlZCBicmFuZCAke3F1b3RlKFxuICAgICAgYnJhbmRcbiAgICApfWA7XG4gIH1cbn07XG52YXIgY2hlY2tMUkFuZEdldEhlbHBlcnMgPSAobGVmdEFtb3VudCwgcmlnaHRBbW91bnQsIGJyYW5kID0gdm9pZCAwKSA9PiB7XG4gIGFzc2VydFJlY29yZChsZWZ0QW1vdW50LCBcImxlZnRBbW91bnRcIik7XG4gIGFzc2VydFJlY29yZChyaWdodEFtb3VudCwgXCJyaWdodEFtb3VudFwiKTtcbiAgY29uc3QgeyB2YWx1ZTogbGVmdFZhbHVlLCBicmFuZDogbGVmdEJyYW5kIH0gPSBsZWZ0QW1vdW50O1xuICBjb25zdCB7IHZhbHVlOiByaWdodFZhbHVlLCBicmFuZDogcmlnaHRCcmFuZCB9ID0gcmlnaHRBbW91bnQ7XG4gIGFzc2VydFJlbW90YWJsZShsZWZ0QnJhbmQsIFwibGVmdEJyYW5kXCIpO1xuICBhc3NlcnRSZW1vdGFibGUocmlnaHRCcmFuZCwgXCJyaWdodEJyYW5kXCIpO1xuICBvcHRpb25hbEJyYW5kQ2hlY2sobGVmdEJyYW5kLCBicmFuZCk7XG4gIG9wdGlvbmFsQnJhbmRDaGVjayhyaWdodEJyYW5kLCBicmFuZCk7XG4gIGxlZnRCcmFuZCA9PT0gcmlnaHRCcmFuZCB8fCB0aHJvd1JlZGFjdGVkYEJyYW5kcyBpbiBsZWZ0ICR7cXVvdGUobGVmdEJyYW5kKX0gYW5kIHJpZ2h0ICR7cXVvdGUoXG4gICAgcmlnaHRCcmFuZFxuICApfSBzaG91bGQgbWF0Y2ggYnV0IGRvIG5vdGA7XG4gIGNvbnN0IGxlZnRIZWxwZXJzID0gYXNzZXJ0VmFsdWVHZXRIZWxwZXJzKGxlZnRWYWx1ZSk7XG4gIGNvbnN0IHJpZ2h0SGVscGVycyA9IGFzc2VydFZhbHVlR2V0SGVscGVycyhyaWdodFZhbHVlKTtcbiAgbGVmdEhlbHBlcnMgPT09IHJpZ2h0SGVscGVycyB8fCB0aHJvd1JlZGFjdGVkYFRoZSBsZWZ0ICR7bGVmdEFtb3VudH0gYW5kIHJpZ2h0IGFtb3VudCAke3JpZ2h0QW1vdW50fSBoYWQgZGlmZmVyZW50IGFzc2V0S2luZHNgO1xuICByZXR1cm4gbGVmdEhlbHBlcnM7XG59O1xudmFyIGNvZXJjZUxSID0gKGgsIGxlZnRBbW91bnQsIHJpZ2h0QW1vdW50KSA9PiB7XG4gIHJldHVybiBbaC5kb0NvZXJjZShsZWZ0QW1vdW50LnZhbHVlKSwgaC5kb0NvZXJjZShyaWdodEFtb3VudC52YWx1ZSldO1xufTtcbnZhciBpc0dURSA9IChsZWZ0QW1vdW50LCByaWdodEFtb3VudCwgYnJhbmQgPSB2b2lkIDApID0+IHtcbiAgY29uc3QgaCA9IGNoZWNrTFJBbmRHZXRIZWxwZXJzKGxlZnRBbW91bnQsIHJpZ2h0QW1vdW50LCBicmFuZCk7XG4gIHJldHVybiBoLmRvSXNHVEUoLi4uY29lcmNlTFIoaCwgbGVmdEFtb3VudCwgcmlnaHRBbW91bnQpKTtcbn07XG52YXIgQW1vdW50TWF0aCA9IHtcbiAgLyogVE9ETyB1c2Ugb3ZlcmxvYWRpbmcgdG8gaGFuZGxlIHdoZW4gQnJhbmQgaGFzIGFuIEFzc2V0S2luZCBhbmQgd2hlbiBpdCBkb2Vzbid0LiovXG4gIC8qIGEgQW1vdW50Rm9yVmFsdWUgdXRpbGl0eSBjb3VsZCBoZWxwIERSWSB0aG9zZSBjYXNlcy4qL1xuICAvKipcbiAqIE1ha2UgYW4gYW1vdW50IGZyb20gYSB2YWx1ZSBieSBhZGRpbmcgdGhlIGJyYW5kLlxuICpcbiAqIERvZXMgbm90IHZlcmlmeSB0aGF0IHRoZSBCcmFuZCdzIEFzc2V0S2luZCBtYXRjaGVzIHRoZSB2YWx1ZSdzLlxuICpcbiAqIEB0ZW1wbGF0ZSB7QnJhbmQ8YW55Pn0gQlxuICogQHRlbXBsYXRlIHtOYXRWYWx1ZSB8IENvcHlTZXQgfCBDb3B5QmFnIHwgU2V0VmFsdWV9IFZcbiAqIEBwYXJhbSB7Qn0gYnJhbmRcbiAqIEBwYXJhbSB7Vn0gYWxsZWdlZFZhbHVlXG4gKiBAcmV0dXJucyB7QiBleHRlbmRzIEJyYW5kPCduYXQnPlxuICogICAgID8gTmF0QW1vdW50XG4gKiAgICAgOiBWIGV4dGVuZHMgTmF0VmFsdWVcbiAqICAgICAgID8gTmF0QW1vdW50XG4gKiAgICAgICA6IFYgZXh0ZW5kcyBDb3B5U2V0XG4gKiAgICAgICAgID8gQ29weVNldEFtb3VudDxWWydwYXlsb2FkJ11bMF0+XG4gKiAgICAgICAgIDogViBleHRlbmRzIENvcHlCYWdcbiAqICAgICAgICAgICA/IENvcHlCYWdBbW91bnQ8VlsncGF5bG9hZCddWzBdWzBdPlxuICogICAgICAgICAgIDogViBleHRlbmRzIFNldFZhbHVlXG4gKiAgICAgICAgICAgICA/IFNldEFtb3VudDxWWzBdPlxuICogICAgICAgICAgICAgOiBuZXZlcn1cbiAqL1xuICBtYWtlOiAoYnJhbmQsIGFsbGVnZWRWYWx1ZSkgPT4ge1xuICAgIGFzc2VydFJlbW90YWJsZShicmFuZCwgXCJicmFuZFwiKTtcbiAgICBjb25zdCBoID0gYXNzZXJ0VmFsdWVHZXRIZWxwZXJzKGFsbGVnZWRWYWx1ZSk7XG4gICAgY29uc3QgdmFsdWUgPSBoLmRvQ29lcmNlKGFsbGVnZWRWYWx1ZSk7XG4gICAgcmV0dXJuIGhhcmRlbih7IGJyYW5kLCB2YWx1ZSB9KTtcbiAgfSxcbiAgLyoqXG4gKiBNYWtlIHN1cmUgdGhpcyBhbW91bnQgaXMgdmFsaWQgZW5vdWdoLCBhbmQgcmV0dXJuIGEgY29ycmVzcG9uZGluZyB2YWxpZFxuICogYW1vdW50IGlmIHNvLlxuICpcbiAqIEB0ZW1wbGF0ZSB7QW1vdW50fSBBXG4gKiBAcGFyYW0ge0JyYW5kfSBicmFuZFxuICogQHBhcmFtIHtBfSBhbGxlZ2VkQW1vdW50XG4gKiBAcmV0dXJucyB7QX1cbiAqL1xuICBjb2VyY2U6IChicmFuZCwgYWxsZWdlZEFtb3VudCkgPT4ge1xuICAgIGFzc2VydFJlbW90YWJsZShicmFuZCwgXCJicmFuZFwiKTtcbiAgICBhc3NlcnRSZWNvcmQoYWxsZWdlZEFtb3VudCwgXCJhbW91bnRcIik7XG4gICAgY29uc3QgeyBicmFuZDogYWxsZWdlZEJyYW5kLCB2YWx1ZTogYWxsZWdlZFZhbHVlIH0gPSBhbGxlZ2VkQW1vdW50O1xuICAgIGJyYW5kID09PSBhbGxlZ2VkQnJhbmQgfHwgdGhyb3dSZWRhY3RlZGBUaGUgYnJhbmQgaW4gdGhlIGFsbGVnZWRBbW91bnQgJHthbGxlZ2VkQW1vdW50fSBpbiAnY29lcmNlJyBkaWRuJ3QgbWF0Y2ggdGhlIHNwZWNpZmllZCBicmFuZCAke2JyYW5kfS5gO1xuICAgIHJldHVybiBBbW91bnRNYXRoLm1ha2UoYnJhbmQsIGFsbGVnZWRWYWx1ZSk7XG4gIH0sXG4gIC8qKlxuICogRXh0cmFjdCBhbmQgcmV0dXJuIHRoZSB2YWx1ZS5cbiAqXG4gKiBAdGVtcGxhdGUge0Ftb3VudH0gQVxuICogQHBhcmFtIHtCcmFuZH0gYnJhbmRcbiAqIEBwYXJhbSB7QX0gYW1vdW50XG4gKiBAcmV0dXJucyB7QVsndmFsdWUnXX1cbiAqL1xuICBnZXRWYWx1ZTogKGJyYW5kLCBhbW91bnQpID0+IEFtb3VudE1hdGguY29lcmNlKGJyYW5kLCBhbW91bnQpLnZhbHVlLFxuICAvKipcbiAqIFJldHVybiB0aGUgYW1vdW50IHJlcHJlc2VudGluZyBhbiBlbXB0eSBhbW91bnQuIFRoaXMgaXMgdGhlIGlkZW50aXR5XG4gKiBlbGVtZW50IGZvciBNYXRoSGVscGVycy5hZGQgYW5kIE1hdEhlbHBlcnMuc3VidHJhY3QuXG4gKlxuICogQHR5cGUge3tcbiAqICAgKGJyYW5kOiBCcmFuZCk6IEFtb3VudDwnbmF0Jz47XG4gKiAgIDxLIGV4dGVuZHMgQXNzZXRLaW5kPihicmFuZDogQnJhbmQ8Sz4sIGFzc2V0S2luZDogSyk6IEFtb3VudDxLPjtcbiAqIH19XG4gKi9cbiAgbWFrZUVtcHR5OiAoYnJhbmQsIGFzc2V0S2luZCA9IChcbiAgICAvKiogQHR5cGUge2NvbnN0fSAqL1xuICAgIFwibmF0XCJcbiAgKSkgPT4ge1xuICAgIGFzc2VydFJlbW90YWJsZShicmFuZCwgXCJicmFuZFwiKTtcbiAgICBhc3NlcnRBc3NldEtpbmQoYXNzZXRLaW5kKTtcbiAgICBjb25zdCB2YWx1ZSA9IGhlbHBlcnNbYXNzZXRLaW5kXS5kb01ha2VFbXB0eSgpO1xuICAgIHJldHVybiBoYXJkZW4oeyBicmFuZCwgdmFsdWUgfSk7XG4gIH0sXG4gIC8qKlxuICogUmV0dXJuIHRoZSBhbW91bnQgcmVwcmVzZW50aW5nIGFuIGVtcHR5IGFtb3VudCwgdXNpbmcgYW5vdGhlciBhbW91bnQgYXMgdGhlXG4gKiB0ZW1wbGF0ZSBmb3IgdGhlIGJyYW5kIGFuZCBhc3NldEtpbmQuXG4gKlxuICogQHRlbXBsYXRlIHtBbW91bnR9IEFcbiAqIEBwYXJhbSB7QX0gYW1vdW50XG4gKiBAcmV0dXJucyB7QX1cbiAqL1xuICBtYWtlRW1wdHlGcm9tQW1vdW50OiAoYW1vdW50KSA9PiB7XG4gICAgYXNzZXJ0UmVjb3JkKGFtb3VudCwgXCJhbW91bnRcIik7XG4gICAgY29uc3QgeyBicmFuZCwgdmFsdWUgfSA9IGFtb3VudDtcbiAgICBjb25zdCBhc3NldEtpbmQgPSBhc3NlcnRWYWx1ZUdldEFzc2V0S2luZCh2YWx1ZSk7XG4gICAgcmV0dXJuIEFtb3VudE1hdGgubWFrZUVtcHR5KGJyYW5kLCBhc3NldEtpbmQpO1xuICB9LFxuICAvKipcbiAqIFJldHVybiB0cnVlIGlmIHRoZSBBbW91bnQgaXMgZW1wdHkuIE90aGVyd2lzZSBmYWxzZS5cbiAqXG4gKiBAcGFyYW0ge0Ftb3VudH0gYW1vdW50XG4gKiBAcGFyYW0ge0JyYW5kfSBbYnJhbmRdXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuICBpc0VtcHR5OiAoYW1vdW50LCBicmFuZCA9IHZvaWQgMCkgPT4ge1xuICAgIGFzc2VydFJlY29yZChhbW91bnQsIFwiYW1vdW50XCIpO1xuICAgIGNvbnN0IHsgYnJhbmQ6IGFsbGVnZWRCcmFuZCwgdmFsdWUgfSA9IGFtb3VudDtcbiAgICBhc3NlcnRSZW1vdGFibGUoYWxsZWdlZEJyYW5kLCBcImJyYW5kXCIpO1xuICAgIG9wdGlvbmFsQnJhbmRDaGVjayhhbGxlZ2VkQnJhbmQsIGJyYW5kKTtcbiAgICBjb25zdCBoID0gYXNzZXJ0VmFsdWVHZXRIZWxwZXJzKHZhbHVlKTtcbiAgICByZXR1cm4gaC5kb0lzRW1wdHkoaC5kb0NvZXJjZSh2YWx1ZSkpO1xuICB9LFxuICBpc0dURSxcbiAgLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGxlZnRBbW91bnQgZXF1YWxzIHRoZSByaWdodEFtb3VudC4gV2UgYXNzdW1lIHRoYXQgaWZcbiAqIGlzR1RFIGlzIHRydWUgaW4gYm90aCBkaXJlY3Rpb25zLCBpc0VxdWFsIGlzIGFsc28gdHJ1ZVxuICpcbiAqIEB0ZW1wbGF0ZSB7QW1vdW50fSBBXG4gKiBAcGFyYW0ge0F9IGxlZnRBbW91bnRcbiAqIEBwYXJhbSB7QX0gcmlnaHRBbW91bnRcbiAqIEBwYXJhbSB7QnJhbmR9IFticmFuZF1cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG4gIGlzRXF1YWw6IChsZWZ0QW1vdW50LCByaWdodEFtb3VudCwgYnJhbmQgPSB2b2lkIDApID0+IHtcbiAgICBjb25zdCBoID0gY2hlY2tMUkFuZEdldEhlbHBlcnMobGVmdEFtb3VudCwgcmlnaHRBbW91bnQsIGJyYW5kKTtcbiAgICByZXR1cm4gaC5kb0lzRXF1YWwoLi4uY29lcmNlTFIoaCwgbGVmdEFtb3VudCwgcmlnaHRBbW91bnQpKTtcbiAgfSxcbiAgLyoqXG4gKiBSZXR1cm5zIGEgbmV3IGFtb3VudCB0aGF0IGlzIHRoZSB1bmlvbiBvZiBib3RoIGxlZnRBbW91bnQgYW5kIHJpZ2h0QW1vdW50LlxuICpcbiAqIEZvciBmdW5naWJsZSBhbW91bnQgdGhpcyBtZWFucyBhZGRpbmcgdGhlIHZhbHVlcy4gRm9yIG90aGVyIGtpbmRzIG9mXG4gKiBhbW91bnQsIGl0IHVzdWFsbHkgbWVhbnMgaW5jbHVkaW5nIGFsbCBvZiB0aGUgZWxlbWVudHMgZnJvbSBib3RoIGxlZnQgYW5kXG4gKiByaWdodC5cbiAqXG4gKiBAdHlwZSB7e1xuICogICA8QSBleHRlbmRzIENvcHlCYWcsIEIgZXh0ZW5kcyBDb3B5QmFnPihcbiAqICAgICBsZWZ0QW1vdW50OiBDb3B5QmFnQW1vdW50PEE+LFxuICogICAgIHJpZ2h0QW1vdW50OiBDb3B5QmFnQW1vdW50PEI+LFxuICogICAgIGJyYW5kPzogQnJhbmQsXG4gKiAgICk6IENvcHlCYWdBbW91bnQ8QSB8IEI+O1xuICogICA8QSBleHRlbmRzIEFtb3VudD4obGVmdEFtb3VudDogQSwgcmlnaHRBbW91bnQ6IEEsIGJyYW5kPzogQnJhbmQpOiBBO1xuICogfX1cbiAqL1xuICBhZGQ6IChsZWZ0QW1vdW50LCByaWdodEFtb3VudCwgYnJhbmQgPSB2b2lkIDApID0+IHtcbiAgICBjb25zdCBoID0gY2hlY2tMUkFuZEdldEhlbHBlcnMobGVmdEFtb3VudCwgcmlnaHRBbW91bnQsIGJyYW5kKTtcbiAgICBjb25zdCB2YWx1ZSA9IGguZG9BZGQoLi4uY29lcmNlTFIoaCwgbGVmdEFtb3VudCwgcmlnaHRBbW91bnQpKTtcbiAgICByZXR1cm4gaGFyZGVuKHsgYnJhbmQ6IGxlZnRBbW91bnQuYnJhbmQsIHZhbHVlIH0pO1xuICB9LFxuICAvKipcbiAqIFJldHVybnMgYSBuZXcgYW1vdW50IHRoYXQgaXMgdGhlIGxlZnRBbW91bnQgbWludXMgdGhlIHJpZ2h0QW1vdW50IChpLmUuXG4gKiBldmVyeXRoaW5nIGluIHRoZSBsZWZ0QW1vdW50IHRoYXQgaXMgbm90IGluIHRoZSByaWdodEFtb3VudCkuIElmIGxlZnRBbW91bnRcbiAqIGRvZXNuJ3QgaW5jbHVkZSByaWdodEFtb3VudCAoc3VidHJhY3Rpb24gcmVzdWx0cyBpbiBhIG5lZ2F0aXZlKSwgdGhyb3cgYW5cbiAqIGVycm9yLiBCZWNhdXNlIHRoZSBsZWZ0IGFtb3VudCBtdXN0IGluY2x1ZGUgdGhlIHJpZ2h0IGFtb3VudCwgdGhpcyBpcyBOT1RcbiAqIGVxdWl2YWxlbnQgdG8gc2V0IHN1YnRyYWN0aW9uLlxuICpcbiAqIEB0ZW1wbGF0ZSB7QW1vdW50fSBMXG4gKiBAdGVtcGxhdGUge0Ftb3VudH0gUlxuICogQHBhcmFtIHtMfSBsZWZ0QW1vdW50XG4gKiBAcGFyYW0ge1J9IHJpZ2h0QW1vdW50XG4gKiBAcGFyYW0ge0JyYW5kfSBbYnJhbmRdXG4gKiBAcmV0dXJucyB7TCBleHRlbmRzIFIgPyBMIDogbmV2ZXJ9XG4gKi9cbiAgc3VidHJhY3Q6IChsZWZ0QW1vdW50LCByaWdodEFtb3VudCwgYnJhbmQgPSB2b2lkIDApID0+IHtcbiAgICBjb25zdCBoID0gY2hlY2tMUkFuZEdldEhlbHBlcnMobGVmdEFtb3VudCwgcmlnaHRBbW91bnQsIGJyYW5kKTtcbiAgICBjb25zdCB2YWx1ZSA9IGguZG9TdWJ0cmFjdCguLi5jb2VyY2VMUihoLCBsZWZ0QW1vdW50LCByaWdodEFtb3VudCkpO1xuICAgIHJldHVybiBoYXJkZW4oeyBicmFuZDogbGVmdEFtb3VudC5icmFuZCwgdmFsdWUgfSk7XG4gIH0sXG4gIC8qKlxuICogUmV0dXJucyB0aGUgbWluIHZhbHVlIGJldHdlZW4geCBhbmQgeSB1c2luZyBpc0dURVxuICpcbiAqIEB0ZW1wbGF0ZSB7QW1vdW50fSBBXG4gKiBAcGFyYW0ge0F9IHhcbiAqIEBwYXJhbSB7QX0geVxuICogQHBhcmFtIHtCcmFuZH0gW2JyYW5kXVxuICogQHJldHVybnMge0F9XG4gKi9cbiAgbWluOiAoeCwgeSwgYnJhbmQgPSB2b2lkIDApID0+IChcbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnkqL1xuICAgIGlzR1RFKHgsIHksIGJyYW5kKSA/IHkgOiBpc0dURSh5LCB4LCBicmFuZCkgPyB4IDogdGhyb3dSZWRhY3RlZGAke3h9IGFuZCAke3l9IGFyZSBpbmNvbXBhcmFibGVgXG4gICksXG4gIC8qKlxuICogUmV0dXJucyB0aGUgbWF4IHZhbHVlIGJldHdlZW4geCBhbmQgeSB1c2luZyBpc0dURVxuICpcbiAqIEB0ZW1wbGF0ZSB7QW1vdW50fSBBXG4gKiBAcGFyYW0ge0F9IHhcbiAqIEBwYXJhbSB7QX0geVxuICogQHBhcmFtIHtCcmFuZH0gW2JyYW5kXVxuICogQHJldHVybnMge0F9XG4gKi9cbiAgbWF4OiAoeCwgeSwgYnJhbmQgPSB2b2lkIDApID0+IChcbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnkqL1xuICAgIGlzR1RFKHgsIHksIGJyYW5kKSA/IHggOiBpc0dURSh5LCB4KSA/IHkgOiB0aHJvd1JlZGFjdGVkYCR7eH0gYW5kICR7eX0gYXJlIGluY29tcGFyYWJsZWBcbiAgKVxufTtcbmhhcmRlbihBbW91bnRNYXRoKTtcbnZhciBnZXRBc3NldEtpbmQgPSAoYW1vdW50KSA9PiB7XG4gIGFzc2VydFJlY29yZChhbW91bnQsIFwiYW1vdW50XCIpO1xuICBjb25zdCB7IHZhbHVlIH0gPSBhbW91bnQ7XG4gIHJldHVybiBhc3NlcnRWYWx1ZUdldEFzc2V0S2luZCh2YWx1ZSk7XG59O1xuaGFyZGVuKGdldEFzc2V0S2luZCk7XG5cbi8qIC4uL0VSVFAvc3JjL2Rpc3BsYXlJbmZvLmpzKi9cbnZhciBjb2VyY2VEaXNwbGF5SW5mbyA9IChhbGxlZ2VkRGlzcGxheUluZm8sIGFzc2V0S2luZCkgPT4ge1xuICBtdXN0TWF0Y2gyKGFsbGVnZWREaXNwbGF5SW5mbywgRGlzcGxheUluZm9TaGFwZSwgXCJkaXNwbGF5SW5mb1wiKTtcbiAgaWYgKGFsbGVnZWREaXNwbGF5SW5mby5hc3NldEtpbmQgIT09IHZvaWQgMCkge1xuICAgIGFsbGVnZWREaXNwbGF5SW5mby5hc3NldEtpbmQgPT09IGFzc2V0S2luZCB8fCB0aHJvd1JlZGFjdGVkYGRpc3BsYXlJbmZvLmFzc2V0S2luZCB3YXMgcHJlc2VudCAoJHthbGxlZ2VkRGlzcGxheUluZm8uYXNzZXRLaW5kfSkgYW5kIGRpZCBub3QgbWF0Y2ggdGhlIGFzc2V0S2luZCBhcmd1bWVudCAoJHthc3NldEtpbmR9KWA7XG4gIH1cbiAgY29uc3QgZGlzcGxheUluZm8gPSBoYXJkZW4oeyAuLi5hbGxlZ2VkRGlzcGxheUluZm8sIGFzc2V0S2luZCB9KTtcbiAgaWYgKGRpc3BsYXlJbmZvLmRlY2ltYWxQbGFjZXMgIT09IHZvaWQgMCkge1xuICAgIE51bWJlci5pc1NhZmVJbnRlZ2VyKGRpc3BsYXlJbmZvLmRlY2ltYWxQbGFjZXMpIHx8IHRocm93UmVkYWN0ZWRgZGVjaW1hbFBsYWNlcyAke2Rpc3BsYXlJbmZvLmRlY2ltYWxQbGFjZXN9IGlzIG5vdCBhIHNhZmUgaW50ZWdlcmA7XG4gIH1cbiAgcmV0dXJuIGRpc3BsYXlJbmZvO1xufTtcblxuLyogLi4vRVJUUC9zcmMvcGF5bWVudC5qcyovXG52YXIgcHJlcGFyZVBheW1lbnRLaW5kID0gKGlzc3VlclpvbmUsIG5hbWUsIGJyYW5kLCBQYXltZW50SSkgPT4ge1xuICBjb25zdCBtYWtlUGF5bWVudCA9IGlzc3VlclpvbmUuZXhvQ2xhc3MoXG4gICAgYCR7bmFtZX0gcGF5bWVudGAsXG4gICAgUGF5bWVudEksXG4gICAgaW5pdEVtcHR5LFxuICAgIHtcbiAgICAgIGdldEFsbGVnZWRCcmFuZCgpIHtcbiAgICAgICAgcmV0dXJuIGJyYW5kO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbiAgcmV0dXJuIG1ha2VQYXltZW50O1xufTtcbmhhcmRlbihwcmVwYXJlUGF5bWVudEtpbmQpO1xuXG4vKiAuLi9FUlRQL3NyYy90cmFuc2llbnROb3RpZmllci5qcyovXG52YXIgbWFrZVRyYW5zaWVudE5vdGlmaWVyS2l0ID0gKCkgPT4ge1xuICBjb25zdCB0cmFuc2llbnROb3RpZmVyS2l0cyA9IG1ha2VTY2FsYXJCaWdXZWFrTWFwU3RvcmUoXG4gICAgXCJ0cmFuc2llbnROb3RpZmVyS2l0c1wiXG4gICk7XG4gIGNvbnN0IHByb3ZpZGVOb3RpZmllcktpdCA9IChrZXkpID0+IHByb3ZpZGVMYXp5KFxuICAgIHRyYW5zaWVudE5vdGlmZXJLaXRzLFxuICAgIGtleSxcbiAgICAoKSA9PiBtYWtlTm90aWZpZXJLaXQoa2V5LmdldEN1cnJlbnRBbW91bnQoKSlcbiAgKTtcbiAgY29uc3QgcHJvdmlkZU5vdGlmaWVyID0gKGtleSkgPT4gcHJvdmlkZU5vdGlmaWVyS2l0KGtleSkubm90aWZpZXI7XG4gIGNvbnN0IHVwZGF0ZSA9IChrZXksIG5ld1ZhbHVlKSA9PiB7XG4gICAgaWYgKHRyYW5zaWVudE5vdGlmZXJLaXRzLmhhcyhrZXkpKSB7XG4gICAgICBjb25zdCB7IHVwZGF0ZXIgfSA9IHRyYW5zaWVudE5vdGlmZXJLaXRzLmdldChrZXkpO1xuICAgICAgdXBkYXRlci51cGRhdGVTdGF0ZShuZXdWYWx1ZSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4geyBwcm92aWRlTm90aWZpZXIsIHVwZGF0ZSB9O1xufTtcbmhhcmRlbihtYWtlVHJhbnNpZW50Tm90aWZpZXJLaXQpO1xuXG4vKiAuLi9FUlRQL3NyYy9hbW91bnRTdG9yZS5qcyovXG52YXIgbWFrZUFtb3VudFN0b3JlID0gKHN0YXRlLCBrZXkpID0+IHtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgZ2V0QW1vdW50OiAoKSA9PiBzdGF0ZVtrZXldLFxuICAgIGluY3JlbWVudDogKGRlbHRhKSA9PiB7XG4gICAgICBzdGF0ZVtrZXldID0gQW1vdW50TWF0aC5hZGQoc3RhdGVba2V5XSwgZGVsdGEpO1xuICAgIH0sXG4gICAgZGVjcmVtZW50OiAoZGVsdGEpID0+IHtcbiAgICAgIGlmIChBbW91bnRNYXRoLmlzR1RFKHN0YXRlW2tleV0sIGRlbHRhKSkge1xuICAgICAgICBzdGF0ZVtrZXldID0gQW1vdW50TWF0aC5zdWJ0cmFjdChzdGF0ZVtrZXldLCBkZWx0YSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSk7XG59O1xuaGFyZGVuKG1ha2VBbW91bnRTdG9yZSk7XG5cbi8qIC4uL0VSVFAvc3JjL3B1cnNlLmpzKi9cbnZhciBFTVBUWV9DT1BZX1NFVCA9IG1ha2VDb3B5U2V0KFtdKTtcbnZhciBwcmVwYXJlUHVyc2VLaW5kID0gKGlzc3VlclpvbmUsIG5hbWUsIGFzc2V0S2luZCwgYnJhbmQsIFB1cnNlSUtpdCwgcHVyc2VNZXRob2RzLCByZWNvdmVyeVNldHNTdGF0ZSwgcGF5bWVudFJlY292ZXJ5U2V0cykgPT4ge1xuICBjb25zdCBhbW91bnRTaGFwZSA9IGJyYW5kLmdldEFtb3VudFNoYXBlKCk7XG4gIGNvbnN0IHsgcHJvdmlkZU5vdGlmaWVyLCB1cGRhdGU6IHVwZGF0ZUJhbGFuY2UgfSA9IG1ha2VUcmFuc2llbnROb3RpZmllcktpdCgpO1xuICBjb25zdCBtYXliZVJlY292ZXJ5U2V0ID0gKHN0YXRlKSA9PiB7XG4gICAgY29uc3QgeyByZWNvdmVyeVNldCB9ID0gc3RhdGU7XG4gICAgaWYgKHJlY292ZXJ5U2V0c1N0YXRlID09PSBcImhhc1JlY292ZXJ5U2V0c1wiKSB7XG4gICAgICByZXR1cm4gcmVjb3ZlcnlTZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlY292ZXJ5U2V0c1N0YXRlID09PSBcIm5vUmVjb3ZlcnlTZXRzXCIgfHwgdGhyb3dSZWRhY3RlZGByZWNvdmVyU2V0c1N0YXRlIG11c3QgYmUgbm9SZWNvdmVyeVNldHMgaWYgaXQgaXNuJ3QgaGFzUmVjb3ZlclNldHNgO1xuICAgICAgcGF5bWVudFJlY292ZXJ5U2V0cyAhPT0gdm9pZCAwIHx8IHRocm93UmVkYWN0ZWRgcGF5bWVudFJlY292ZXJ5U2V0cyBtdXN0IGFsd2F5cyBiZSBkZWZpbmVkYDtcbiAgICAgIHJlY292ZXJ5U2V0LmdldFNpemUoKSA9PT0gMCB8fCB0aHJvd1JlZGFjdGVkYFdpdGggbm9SZWNvdmVyeVNldHMsIHJlY292ZXJ5U2V0IG11c3QgYmUgZW1wdHlgO1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHsgZGVwb3NpdEludGVybmFsLCB3aXRoZHJhd0ludGVybmFsIH0gPSBwdXJzZU1ldGhvZHM7XG4gIGNvbnN0IG1ha2VQdXJzZUtpdCA9IGlzc3VlclpvbmUuZXhvQ2xhc3NLaXQoXG4gICAgYCR7bmFtZX0gUHVyc2VgLFxuICAgIFB1cnNlSUtpdCxcbiAgICAoKSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW50QmFsYW5jZSA9IEFtb3VudE1hdGgubWFrZUVtcHR5KGJyYW5kLCBhc3NldEtpbmQpO1xuICAgICAgY29uc3QgcmVjb3ZlcnlTZXQgPSBpc3N1ZXJab25lLmRldGFjaGVkKCkuc2V0U3RvcmUoXCJyZWNvdmVyeSBzZXRcIik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjdXJyZW50QmFsYW5jZSxcbiAgICAgICAgcmVjb3ZlcnlTZXRcbiAgICAgIH07XG4gICAgfSxcbiAgICB7XG4gICAgICBwdXJzZToge1xuICAgICAgICBkZXBvc2l0KHNyY1BheW1lbnQsIG9wdEFtb3VudFNoYXBlID0gdm9pZCAwKSB7XG4gICAgICAgICAgY29uc3QgeyBzdGF0ZSB9ID0gdGhpcztcbiAgICAgICAgICBjb25zdCB7IHB1cnNlIH0gPSB0aGlzLmZhY2V0cztcbiAgICAgICAgICBjb25zdCBiYWxhbmNlU3RvcmUgPSBtYWtlQW1vdW50U3RvcmUoc3RhdGUsIFwiY3VycmVudEJhbGFuY2VcIik7XG4gICAgICAgICAgY29uc3Qgc3JjUGF5bWVudEJhbGFuY2UgPSBkZXBvc2l0SW50ZXJuYWwoXG4gICAgICAgICAgICBiYWxhbmNlU3RvcmUsXG4gICAgICAgICAgICBzcmNQYXltZW50LFxuICAgICAgICAgICAgb3B0QW1vdW50U2hhcGVcbiAgICAgICAgICApO1xuICAgICAgICAgIHVwZGF0ZUJhbGFuY2UocHVyc2UsIGJhbGFuY2VTdG9yZS5nZXRBbW91bnQoKSk7XG4gICAgICAgICAgcmV0dXJuIHNyY1BheW1lbnRCYWxhbmNlO1xuICAgICAgICB9LFxuICAgICAgICB3aXRoZHJhdyhhbW91bnQpIHtcbiAgICAgICAgICBjb25zdCB7IHN0YXRlIH0gPSB0aGlzO1xuICAgICAgICAgIGNvbnN0IHsgcHVyc2UgfSA9IHRoaXMuZmFjZXRzO1xuICAgICAgICAgIGNvbnN0IG9wdFJlY292ZXJ5U2V0ID0gbWF5YmVSZWNvdmVyeVNldChzdGF0ZSk7XG4gICAgICAgICAgY29uc3QgYmFsYW5jZVN0b3JlID0gbWFrZUFtb3VudFN0b3JlKHN0YXRlLCBcImN1cnJlbnRCYWxhbmNlXCIpO1xuICAgICAgICAgIGNvbnN0IHBheW1lbnQgPSB3aXRoZHJhd0ludGVybmFsKFxuICAgICAgICAgICAgYmFsYW5jZVN0b3JlLFxuICAgICAgICAgICAgYW1vdW50LFxuICAgICAgICAgICAgb3B0UmVjb3ZlcnlTZXRcbiAgICAgICAgICApO1xuICAgICAgICAgIHVwZGF0ZUJhbGFuY2UocHVyc2UsIGJhbGFuY2VTdG9yZS5nZXRBbW91bnQoKSk7XG4gICAgICAgICAgcmV0dXJuIHBheW1lbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEN1cnJlbnRBbW91bnQoKSB7XG4gICAgICAgICAgY29uc3QgeyBzdGF0ZSB9ID0gdGhpcztcbiAgICAgICAgICBjb25zdCBiYWxhbmNlU3RvcmUgPSBtYWtlQW1vdW50U3RvcmUoc3RhdGUsIFwiY3VycmVudEJhbGFuY2VcIik7XG4gICAgICAgICAgcmV0dXJuIGJhbGFuY2VTdG9yZS5nZXRBbW91bnQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0Q3VycmVudEFtb3VudE5vdGlmaWVyKCkge1xuICAgICAgICAgIHJldHVybiBwcm92aWRlTm90aWZpZXIodGhpcy5mYWNldHMucHVyc2UpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRBbGxlZ2VkQnJhbmQoKSB7XG4gICAgICAgICAgcmV0dXJuIGJyYW5kO1xuICAgICAgICB9LFxuICAgICAgICBnZXREZXBvc2l0RmFjZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmFjZXRzLmRlcG9zaXRGYWNldDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0UmVjb3ZlcnlTZXQoKSB7XG4gICAgICAgICAgY29uc3QgeyBzdGF0ZSB9ID0gdGhpcztcbiAgICAgICAgICBjb25zdCBvcHRSZWNvdmVyeVNldCA9IG1heWJlUmVjb3ZlcnlTZXQoc3RhdGUpO1xuICAgICAgICAgIGlmIChvcHRSZWNvdmVyeVNldCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gRU1QVFlfQ09QWV9TRVQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBvcHRSZWNvdmVyeVNldC5zbmFwc2hvdCgpO1xuICAgICAgICB9LFxuICAgICAgICByZWNvdmVyQWxsKCkge1xuICAgICAgICAgIGNvbnN0IHsgc3RhdGUsIGZhY2V0cyB9ID0gdGhpcztcbiAgICAgICAgICBsZXQgYW1vdW50ID0gQW1vdW50TWF0aC5tYWtlRW1wdHkoYnJhbmQsIGFzc2V0S2luZCk7XG4gICAgICAgICAgY29uc3Qgb3B0UmVjb3ZlcnlTZXQgPSBtYXliZVJlY292ZXJ5U2V0KHN0YXRlKTtcbiAgICAgICAgICBpZiAob3B0UmVjb3ZlcnlTZXQgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgcmV0dXJuIGFtb3VudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChjb25zdCBwYXltZW50IG9mIG9wdFJlY292ZXJ5U2V0LmtleXMoKSkge1xuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSBmYWNldHMucHVyc2UuZGVwb3NpdChwYXltZW50KTtcbiAgICAgICAgICAgIGFtb3VudCA9IEFtb3VudE1hdGguYWRkKGFtb3VudCwgZGVsdGEsIGJyYW5kKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3B0UmVjb3ZlcnlTZXQuZ2V0U2l6ZSgpID09PSAwIHx8IHRocm93UmVkYWN0ZWRgaW50ZXJuYWw6IFJlbWFpbmluZyB1bnJlY292ZXJlZCBwYXltZW50czogJHtmYWNldHMucHVyc2UuZ2V0UmVjb3ZlcnlTZXQoKX1gO1xuICAgICAgICAgIHJldHVybiBhbW91bnQ7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZXBvc2l0RmFjZXQ6IHtcbiAgICAgICAgcmVjZWl2ZSguLi5hcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmFjZXRzLnB1cnNlLmRlcG9zaXQoLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIHN0YXRlU2hhcGU6IHtcbiAgICAgICAgY3VycmVudEJhbGFuY2U6IGFtb3VudFNoYXBlLFxuICAgICAgICByZWNvdmVyeVNldDogTS5yZW1vdGFibGUoXCJyZWNvdmVyeVNldFwiKVxuICAgICAgfVxuICAgIH1cbiAgKTtcbiAgcmV0dXJuICgpID0+IG1ha2VQdXJzZUtpdCgpLnB1cnNlO1xufTtcbmhhcmRlbihwcmVwYXJlUHVyc2VLaW5kKTtcblxuLyogLi4vRVJUUC9zcmMvcGF5bWVudExlZGdlci5qcyovXG52YXIgYW1vdW50U2hhcGVGcm9tRWxlbWVudFNoYXBlID0gKGJyYW5kLCBhc3NldEtpbmQsIGVsZW1lbnRTaGFwZSkgPT4ge1xuICBsZXQgdmFsdWVTaGFwZTtcbiAgc3dpdGNoIChhc3NldEtpbmQpIHtcbiAgICBjYXNlIFwibmF0XCI6IHtcbiAgICAgIHZhbHVlU2hhcGUgPSBNLm5hdCgpO1xuICAgICAgZWxlbWVudFNoYXBlID09PSB2b2lkIDAgfHwgdGhyb3dSZWRhY3RlZGBGdW5naWJsZSBhc3NldHMgY2Fubm90IGhhdmUgYW4gZWxlbWVudFNoYXBlOiAke3F1b3RlKGVsZW1lbnRTaGFwZSl9YDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwic2V0XCI6IHtcbiAgICAgIGlmIChlbGVtZW50U2hhcGUgPT09IHZvaWQgMCkge1xuICAgICAgICB2YWx1ZVNoYXBlID0gTS5hcnJheU9mKE0ua2V5KCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVTaGFwZSA9IE0uYXJyYXlPZihNLmFuZChNLmtleSgpLCBlbGVtZW50U2hhcGUpKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIFwiY29weVNldFwiOiB7XG4gICAgICBpZiAoZWxlbWVudFNoYXBlID09PSB2b2lkIDApIHtcbiAgICAgICAgdmFsdWVTaGFwZSA9IE0uc2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZVNoYXBlID0gTS5zZXRPZihlbGVtZW50U2hhcGUpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJjb3B5QmFnXCI6IHtcbiAgICAgIGlmIChlbGVtZW50U2hhcGUgPT09IHZvaWQgMCkge1xuICAgICAgICB2YWx1ZVNoYXBlID0gTS5iYWcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlU2hhcGUgPSBNLmJhZ09mKGVsZW1lbnRTaGFwZSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgdGhyb3dSZWRhY3RlZGB1bmV4cGVjdGVkIGFzc2V0IGtpbmQgJHtxdW90ZShhc3NldEtpbmQpfWA7XG4gICAgfVxuICB9XG4gIGNvbnN0IGFtb3VudFNoYXBlID0gaGFyZGVuKHtcbiAgICBicmFuZCxcbiAgICAvKiBtYXRjaGVzIG9ubHkgdGhpcyBleGFjdCBicmFuZCovXG4gICAgdmFsdWU6IHZhbHVlU2hhcGVcbiAgfSk7XG4gIHJldHVybiBhbW91bnRTaGFwZTtcbn07XG52YXIgcHJlcGFyZVBheW1lbnRMZWRnZXIgPSAoaXNzdWVyWm9uZSwgbmFtZSwgYXNzZXRLaW5kLCBkaXNwbGF5SW5mbywgZWxlbWVudFNoYXBlLCByZWNvdmVyeVNldHNTdGF0ZSwgb3B0U2h1dGRvd25XaXRoRmFpbHVyZSA9IHZvaWQgMCkgPT4ge1xuICBjb25zdCBicmFuZCA9IGlzc3VlclpvbmUuZXhvKGAke25hbWV9IGJyYW5kYCwgQnJhbmRJLCB7XG4gICAgaXNNeUlzc3VlcihhbGxlZ2VkSXNzdWVyKSB7XG4gICAgICByZXR1cm4gYWxsZWdlZElzc3VlciA9PT0gaXNzdWVyO1xuICAgIH0sXG4gICAgZ2V0QWxsZWdlZE5hbWUoKSB7XG4gICAgICByZXR1cm4gbmFtZTtcbiAgICB9LFxuICAgIC8qIEdpdmUgaW5mb3JtYXRpb24gdG8gVUkgb24gaG93IHRvIGRpc3BsYXkgdGhlIGFtb3VudC4qL1xuICAgIGdldERpc3BsYXlJbmZvKCkge1xuICAgICAgcmV0dXJuIGRpc3BsYXlJbmZvO1xuICAgIH0sXG4gICAgZ2V0QW1vdW50U2hhcGUoKSB7XG4gICAgICByZXR1cm4gYW1vdW50U2hhcGU7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgYW1vdW50U2hhcGUgPSBhbW91bnRTaGFwZUZyb21FbGVtZW50U2hhcGUoXG4gICAgYnJhbmQsXG4gICAgYXNzZXRLaW5kLFxuICAgIGVsZW1lbnRTaGFwZVxuICApO1xuICBjb25zdCB7IElzc3VlckksIE1pbnRJLCBQYXltZW50SSwgUHVyc2VJS2l0IH0gPSBtYWtlSXNzdWVySW50ZXJmYWNlcyhcbiAgICBicmFuZCxcbiAgICBhc3NldEtpbmQsXG4gICAgYW1vdW50U2hhcGVcbiAgKTtcbiAgY29uc3QgbWFrZVBheW1lbnQgPSBwcmVwYXJlUGF5bWVudEtpbmQoaXNzdWVyWm9uZSwgbmFtZSwgYnJhbmQsIFBheW1lbnRJKTtcbiAgY29uc3Qgc2h1dGRvd25MZWRnZXJXaXRoRmFpbHVyZSA9IChyZWFzb24pID0+IHtcbiAgICBpZiAob3B0U2h1dGRvd25XaXRoRmFpbHVyZSAhPT0gdm9pZCAwKSB7XG4gICAgICB0cnkge1xuICAgICAgICBvcHRTaHV0ZG93bldpdGhGYWlsdXJlKHJlYXNvbik7XG4gICAgICB9IGNhdGNoIChlcnJJblNodXRkb3duKSB7XG4gICAgICAgIG5vdGUoZXJySW5TaHV0ZG93biwgcmVkYWN0ZWRgQ2F1c2VkIGJ5OiAke3JlYXNvbn1gKTtcbiAgICAgICAgdGhyb3cgZXJySW5TaHV0ZG93bjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgcmVhc29uO1xuICB9O1xuICBjb25zdCBwYXltZW50TGVkZ2VyID0gaXNzdWVyWm9uZS53ZWFrTWFwU3RvcmUoXCJwYXltZW50TGVkZ2VyXCIsIHtcbiAgICB2YWx1ZVNoYXBlOiBhbW91bnRTaGFwZVxuICB9KTtcbiAgY29uc3QgcGF5bWVudFJlY292ZXJ5U2V0cyA9IGlzc3VlclpvbmUud2Vha01hcFN0b3JlKFwicGF5bWVudFJlY292ZXJ5U2V0c1wiKTtcbiAgY29uc3QgaW5pdFBheW1lbnQgPSAocGF5bWVudCwgYW1vdW50LCBvcHRSZWNvdmVyeVNldCA9IHZvaWQgMCkgPT4ge1xuICAgIGlmIChyZWNvdmVyeVNldHNTdGF0ZSA9PT0gXCJub1JlY292ZXJ5U2V0c1wiKSB7XG4gICAgICBvcHRSZWNvdmVyeVNldCA9PT0gdm9pZCAwIHx8IHRocm93UmVkYWN0ZWRgd2hlbiByZWNvdmVyU2V0c1N0YXRlID09PSAnbm9SZWNvdmVyeVNldHMnLCBvcHRSZWNvdmVyeVNldCBtdXN0IGJlIGVtcHR5YDtcbiAgICB9XG4gICAgaWYgKG9wdFJlY292ZXJ5U2V0ICE9PSB2b2lkIDAgJiYgIUFtb3VudE1hdGguaXNFbXB0eShhbW91bnQpKSB7XG4gICAgICBvcHRSZWNvdmVyeVNldC5hZGQocGF5bWVudCk7XG4gICAgICBwYXltZW50UmVjb3ZlcnlTZXRzLmluaXQocGF5bWVudCwgb3B0UmVjb3ZlcnlTZXQpO1xuICAgIH1cbiAgICBwYXltZW50TGVkZ2VyLmluaXQocGF5bWVudCwgYW1vdW50KTtcbiAgfTtcbiAgY29uc3QgZGVsZXRlUGF5bWVudCA9IChwYXltZW50KSA9PiB7XG4gICAgcGF5bWVudExlZGdlci5kZWxldGUocGF5bWVudCk7XG4gICAgaWYgKHBheW1lbnRSZWNvdmVyeVNldHMuaGFzKHBheW1lbnQpKSB7XG4gICAgICBjb25zdCByZWNvdmVyeVNldCA9IHBheW1lbnRSZWNvdmVyeVNldHMuZ2V0KHBheW1lbnQpO1xuICAgICAgcGF5bWVudFJlY292ZXJ5U2V0cy5kZWxldGUocGF5bWVudCk7XG4gICAgICByZWNvdmVyeVNldC5kZWxldGUocGF5bWVudCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBjb2VyY2UgPSAoYWxsZWdlZEFtb3VudCkgPT4gQW1vdW50TWF0aC5jb2VyY2UoYnJhbmQsIGFsbGVnZWRBbW91bnQpO1xuICBjb25zdCBhc3NlcnRBbW91bnRDb25zaXN0ZW50ID0gKHBheW1lbnRCYWxhbmNlLCBvcHRBbW91bnRTaGFwZSkgPT4ge1xuICAgIGlmIChvcHRBbW91bnRTaGFwZSAhPT0gdm9pZCAwKSB7XG4gICAgICBtdXN0TWF0Y2gocGF5bWVudEJhbGFuY2UsIG9wdEFtb3VudFNoYXBlLCBcImFtb3VudFwiKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGFzc2VydExpdmVQYXltZW50ID0gKHBheW1lbnQpID0+IHtcbiAgICBwYXltZW50TGVkZ2VyLmhhcyhwYXltZW50KSB8fCB0aHJvd1JlZGFjdGVkYCR7cGF5bWVudH0gd2FzIG5vdCBhIGxpdmUgcGF5bWVudCBmb3IgYnJhbmQgJHtxdW90ZShcbiAgICAgIGJyYW5kXG4gICAgKX0uIEl0IGNvdWxkIGJlIGEgdXNlZC11cCBwYXltZW50LCBhIHBheW1lbnQgZm9yIGFub3RoZXIgYnJhbmQsIG9yIGl0IG1pZ2h0IG5vdCBiZSBhIHBheW1lbnQgYXQgYWxsLmA7XG4gIH07XG4gIGNvbnN0IGRlcG9zaXRJbnRlcm5hbCA9IChiYWxhbmNlU3RvcmUsIHNyY1BheW1lbnQsIG9wdEFtb3VudFNoYXBlID0gdm9pZCAwKSA9PiB7XG4gICAgIWlzUHJvbWlzZShzcmNQYXltZW50KSB8fCBhc3NlcnQuZmFpbChcbiAgICAgIGBkZXBvc2l0IGRvZXMgbm90IGFjY2VwdCBwcm9taXNlcyBhcyBmaXJzdCBhcmd1bWVudC4gSW5zdGVhZCBvZiBwYXNzaW5nIHRoZSBwcm9taXNlIChkZXBvc2l0KHBheW1lbnRQcm9taXNlKSksIGNvbnNpZGVyIHVud3JhcHBpbmcgdGhlIHByb21pc2UgZmlyc3Q6IEUud2hlbihwYXltZW50UHJvbWlzZSwgKGFjdHVhbFBheW1lbnQgPT4gZGVwb3NpdChhY3R1YWxQYXltZW50KSlgLFxuICAgICAgVHlwZUVycm9yXG4gICAgKTtcbiAgICBhc3NlcnRMaXZlUGF5bWVudChzcmNQYXltZW50KTtcbiAgICBjb25zdCBzcmNQYXltZW50QmFsYW5jZSA9IHBheW1lbnRMZWRnZXIuZ2V0KHNyY1BheW1lbnQpO1xuICAgIGFzc2VydEFtb3VudENvbnNpc3RlbnQoc3JjUGF5bWVudEJhbGFuY2UsIG9wdEFtb3VudFNoYXBlKTtcbiAgICB0cnkge1xuICAgICAgZGVsZXRlUGF5bWVudChzcmNQYXltZW50KTtcbiAgICAgIGJhbGFuY2VTdG9yZS5pbmNyZW1lbnQoc3JjUGF5bWVudEJhbGFuY2UpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgc2h1dGRvd25MZWRnZXJXaXRoRmFpbHVyZShlcnIpO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICByZXR1cm4gc3JjUGF5bWVudEJhbGFuY2U7XG4gIH07XG4gIGNvbnN0IHdpdGhkcmF3SW50ZXJuYWwgPSAoYmFsYW5jZVN0b3JlLCBhbW91bnQsIHJlY292ZXJ5U2V0ID0gdm9pZCAwKSA9PiB7XG4gICAgYW1vdW50ID0gY29lcmNlKGFtb3VudCk7XG4gICAgY29uc3QgcGF5bWVudCA9IG1ha2VQYXltZW50KCk7XG4gICAgYmFsYW5jZVN0b3JlLmRlY3JlbWVudChhbW91bnQpIHx8IHRocm93UmVkYWN0ZWRgV2l0aGRyYXdhbCBvZiAke2Ftb3VudH0gZmFpbGVkIGJlY2F1c2UgdGhlIHB1cnNlIG9ubHkgY29udGFpbmVkICR7YmFsYW5jZVN0b3JlLmdldEFtb3VudCgpfWA7XG4gICAgdHJ5IHtcbiAgICAgIGluaXRQYXltZW50KHBheW1lbnQsIGFtb3VudCwgcmVjb3ZlcnlTZXQpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgc2h1dGRvd25MZWRnZXJXaXRoRmFpbHVyZShlcnIpO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICByZXR1cm4gcGF5bWVudDtcbiAgfTtcbiAgY29uc3QgbWFrZUVtcHR5UHVyc2UgPSBwcmVwYXJlUHVyc2VLaW5kKFxuICAgIGlzc3VlclpvbmUsXG4gICAgbmFtZSxcbiAgICBhc3NldEtpbmQsXG4gICAgYnJhbmQsXG4gICAgUHVyc2VJS2l0LFxuICAgIGhhcmRlbih7XG4gICAgICBkZXBvc2l0SW50ZXJuYWwsXG4gICAgICB3aXRoZHJhd0ludGVybmFsXG4gICAgfSksXG4gICAgcmVjb3ZlcnlTZXRzU3RhdGUsXG4gICAgcGF5bWVudFJlY292ZXJ5U2V0c1xuICApO1xuICBjb25zdCBpc3N1ZXIgPSBpc3N1ZXJab25lLmV4byhgJHtuYW1lfSBpc3N1ZXJgLCBJc3N1ZXJJLCB7XG4gICAgZ2V0QnJhbmQoKSB7XG4gICAgICByZXR1cm4gYnJhbmQ7XG4gICAgfSxcbiAgICBnZXRBbGxlZ2VkTmFtZSgpIHtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH0sXG4gICAgZ2V0QXNzZXRLaW5kKCkge1xuICAgICAgcmV0dXJuIGFzc2V0S2luZDtcbiAgICB9LFxuICAgIGdldERpc3BsYXlJbmZvKCkge1xuICAgICAgcmV0dXJuIGRpc3BsYXlJbmZvO1xuICAgIH0sXG4gICAgbWFrZUVtcHR5UHVyc2UoKSB7XG4gICAgICByZXR1cm4gbWFrZUVtcHR5UHVyc2UoKTtcbiAgICB9LFxuICAgIC8qKiBAcGFyYW0ge1BheW1lbnR9IHBheW1lbnQgYXdhaXRlZCBieSBjYWxsV2hlbiAqL1xuICAgIGlzTGl2ZShwYXltZW50KSB7XG4gICAgICByZXR1cm4gcGF5bWVudExlZGdlci5oYXMocGF5bWVudCk7XG4gICAgfSxcbiAgICAvKiogQHBhcmFtIHtQYXltZW50fSBwYXltZW50IGF3YWl0ZWQgYnkgY2FsbFdoZW4gKi9cbiAgICBnZXRBbW91bnRPZihwYXltZW50KSB7XG4gICAgICBhc3NlcnRMaXZlUGF5bWVudChwYXltZW50KTtcbiAgICAgIHJldHVybiBwYXltZW50TGVkZ2VyLmdldChwYXltZW50KTtcbiAgICB9LFxuICAgIC8qKlxuICogQHBhcmFtIHtQYXltZW50fSBwYXltZW50IGF3YWl0ZWQgYnkgY2FsbFdoZW5cbiAqIEBwYXJhbSB7UGF0dGVybn0gb3B0QW1vdW50U2hhcGVcbiAqL1xuICAgIGJ1cm4ocGF5bWVudCwgb3B0QW1vdW50U2hhcGUgPSB2b2lkIDApIHtcbiAgICAgIGFzc2VydExpdmVQYXltZW50KHBheW1lbnQpO1xuICAgICAgY29uc3QgcGF5bWVudEJhbGFuY2UgPSBwYXltZW50TGVkZ2VyLmdldChwYXltZW50KTtcbiAgICAgIGFzc2VydEFtb3VudENvbnNpc3RlbnQocGF5bWVudEJhbGFuY2UsIG9wdEFtb3VudFNoYXBlKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRlbGV0ZVBheW1lbnQocGF5bWVudCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgc2h1dGRvd25MZWRnZXJXaXRoRmFpbHVyZShlcnIpO1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGF5bWVudEJhbGFuY2U7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgbWludFJlY292ZXJ5UHVyc2UgPSAoXG4gICAgLyoqIEB0eXBlIHtQdXJzZTxLPn0gKi9cbiAgICBpc3N1ZXJab25lLm1ha2VPbmNlKFwibWludFJlY292ZXJ5UHVyc2VcIiwgKCkgPT4gbWFrZUVtcHR5UHVyc2UoKSlcbiAgKTtcbiAgY29uc3QgbWludCA9IGlzc3VlclpvbmUuZXhvKGAke25hbWV9IG1pbnRgLCBNaW50SSwge1xuICAgIGdldElzc3VlcigpIHtcbiAgICAgIHJldHVybiBpc3N1ZXI7XG4gICAgfSxcbiAgICBtaW50UGF5bWVudChuZXdBbW91bnQpIHtcbiAgICAgIG5ld0Ftb3VudCA9IGNvZXJjZShuZXdBbW91bnQpO1xuICAgICAgbXVzdE1hdGNoKG5ld0Ftb3VudCwgYW1vdW50U2hhcGUsIFwibWludGVkIGFtb3VudFwiKTtcbiAgICAgIGNvbnN0IHJhd1BheW1lbnQgPSBtYWtlUGF5bWVudCgpO1xuICAgICAgaW5pdFBheW1lbnQocmF3UGF5bWVudCwgbmV3QW1vdW50LCB2b2lkIDApO1xuICAgICAgY29uc3QgbWludFJlY292ZXJ5UHVyc2VCZWZvcmUgPSBtaW50UmVjb3ZlcnlQdXJzZS5nZXRDdXJyZW50QW1vdW50KCk7XG4gICAgICBtaW50UmVjb3ZlcnlQdXJzZS5kZXBvc2l0KHJhd1BheW1lbnQsIG5ld0Ftb3VudCk7XG4gICAgICBjb25zdCBwYXltZW50ID0gbWludFJlY292ZXJ5UHVyc2Uud2l0aGRyYXcobmV3QW1vdW50KTtcbiAgICAgIGNvbnN0IG1pbnRSZWNvdmVyeVB1cnNlQWZ0ZXIgPSBtaW50UmVjb3ZlcnlQdXJzZS5nZXRDdXJyZW50QW1vdW50KCk7XG4gICAgICBhc3NlcnQoa2V5RVEobWludFJlY292ZXJ5UHVyc2VCZWZvcmUsIG1pbnRSZWNvdmVyeVB1cnNlQWZ0ZXIpKTtcbiAgICAgIHJldHVybiBwYXltZW50O1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGlzc3VlcktpdCA9IGhhcmRlbih7IGlzc3VlciwgbWludCwgYnJhbmQsIG1pbnRSZWNvdmVyeVB1cnNlIH0pO1xuICByZXR1cm4gaXNzdWVyS2l0O1xufTtcbmhhcmRlbihwcmVwYXJlUGF5bWVudExlZGdlcik7XG5cbi8qIC4uL0VSVFAvc3JjL2lzc3VlcktpdC5qcyovXG52YXIgc2V0dXBJc3N1ZXJLaXQgPSAoeyBuYW1lLCBhc3NldEtpbmQsIGRpc3BsYXlJbmZvLCBlbGVtZW50U2hhcGUgfSwgaXNzdWVyWm9uZSwgcmVjb3ZlcnlTZXRzU3RhdGUsIG9wdFNodXRkb3duV2l0aEZhaWx1cmUgPSB2b2lkIDApID0+IHtcbiAgYXNzZXJ0Mi50eXBlb2YobmFtZSwgXCJzdHJpbmdcIik7XG4gIGFzc2VydEFzc2V0S2luZChhc3NldEtpbmQpO1xuICBjb25zdCBjbGVhbkRpc3BsYXlJbmZvID0gY29lcmNlRGlzcGxheUluZm8oZGlzcGxheUluZm8sIGFzc2V0S2luZCk7XG4gIGlmIChvcHRTaHV0ZG93bldpdGhGYWlsdXJlICE9PSB2b2lkIDApIHtcbiAgICBhc3NlcnQyLnR5cGVvZihvcHRTaHV0ZG93bldpdGhGYWlsdXJlLCBcImZ1bmN0aW9uXCIpO1xuICB9XG4gIGlmIChlbGVtZW50U2hhcGUgIT09IHZvaWQgMCkge1xuICAgIGFzc2VydFBhdHRlcm4oZWxlbWVudFNoYXBlKTtcbiAgfVxuICBjb25zdCB7IGlzc3VlciwgbWludCwgYnJhbmQsIG1pbnRSZWNvdmVyeVB1cnNlIH0gPSBwcmVwYXJlUGF5bWVudExlZGdlcihcbiAgICBpc3N1ZXJab25lLFxuICAgIG5hbWUsXG4gICAgYXNzZXRLaW5kLFxuICAgIGNsZWFuRGlzcGxheUluZm8sXG4gICAgZWxlbWVudFNoYXBlLFxuICAgIHJlY292ZXJ5U2V0c1N0YXRlLFxuICAgIG9wdFNodXRkb3duV2l0aEZhaWx1cmVcbiAgKTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgYnJhbmQsXG4gICAgaXNzdWVyLFxuICAgIG1pbnQsXG4gICAgbWludFJlY292ZXJ5UHVyc2UsXG4gICAgZGlzcGxheUluZm86IGNsZWFuRGlzcGxheUluZm9cbiAgfSk7XG59O1xuaGFyZGVuKHNldHVwSXNzdWVyS2l0KTtcbnZhciBJTlNUQU5DRV9LRVkgPSBcImlzc3VlclwiO1xudmFyIFJFQ09WRVJZX1NFVFNfU1RBVEUgPSBcInJlY292ZXJ5U2V0c1N0YXRlXCI7XG52YXIgdXBncmFkZUlzc3VlcktpdCA9IChpc3N1ZXJCYWdnYWdlLCBvcHRTaHV0ZG93bldpdGhGYWlsdXJlID0gdm9pZCAwLCByZWNvdmVyeVNldHNPcHRpb24gPSB2b2lkIDApID0+IHtcbiAgY29uc3QgaXNzdWVyUmVjb3JkID0gaXNzdWVyQmFnZ2FnZS5nZXQoSU5TVEFOQ0VfS0VZKTtcbiAgY29uc3QgaXNzdWVyWm9uZSA9IG1ha2VEdXJhYmxlWm9uZShpc3N1ZXJCYWdnYWdlKTtcbiAgY29uc3Qgb2xkUmVjb3ZlcnlTZXRzU3RhdGUgPSBpc3N1ZXJCYWdnYWdlLmhhcyhSRUNPVkVSWV9TRVRTX1NUQVRFKSA/IGlzc3VlckJhZ2dhZ2UuZ2V0KFJFQ09WRVJZX1NFVFNfU1RBVEUpIDogXCJoYXNSZWNvdmVyeVNldHNcIjtcbiAgaWYgKG9sZFJlY292ZXJ5U2V0c1N0YXRlID09PSBcIm5vUmVjb3ZlcnlTZXRzXCIgJiYgcmVjb3ZlcnlTZXRzT3B0aW9uID09PSBcImhhc1JlY292ZXJ5U2V0c1wiKSB7XG4gICAgdGhyb3dSZWRhY3RlZGBDYW5ub3QgKHlldD8pIHVwZ3JhZGUgZnJvbSAnbm9SZWNvdmVyeVNldHMnIHRvICdoYXNSZWNvdmVyeVNldHMnYDtcbiAgfVxuICBjb25zdCByZWNvdmVyeVNldHNTdGF0ZSA9IHJlY292ZXJ5U2V0c09wdGlvbiB8fCBvbGRSZWNvdmVyeVNldHNTdGF0ZTtcbiAgcmV0dXJuIHNldHVwSXNzdWVyS2l0KFxuICAgIGlzc3VlclJlY29yZCxcbiAgICBpc3N1ZXJab25lLFxuICAgIHJlY292ZXJ5U2V0c1N0YXRlLFxuICAgIG9wdFNodXRkb3duV2l0aEZhaWx1cmVcbiAgKTtcbn07XG5oYXJkZW4odXBncmFkZUlzc3VlcktpdCk7XG52YXIgaGFzSXNzdWVyID0gKGJhZ2dhZ2UpID0+IGJhZ2dhZ2UuaGFzKElOU1RBTkNFX0tFWSk7XG52YXIgbWFrZUR1cmFibGVJc3N1ZXJLaXQgPSAoaXNzdWVyQmFnZ2FnZSwgbmFtZSwgYXNzZXRLaW5kID0gQXNzZXRLaW5kLk5BVCwgZGlzcGxheUluZm8gPSBoYXJkZW4oe30pLCBvcHRTaHV0ZG93bldpdGhGYWlsdXJlID0gdm9pZCAwLCB7IGVsZW1lbnRTaGFwZSA9IHZvaWQgMCwgcmVjb3ZlcnlTZXRzT3B0aW9uID0gdm9pZCAwIH0gPSB7fSkgPT4ge1xuICBjb25zdCBpc3N1ZXJEYXRhID0gaGFyZGVuKHtcbiAgICBuYW1lLFxuICAgIGFzc2V0S2luZCxcbiAgICBkaXNwbGF5SW5mbyxcbiAgICBlbGVtZW50U2hhcGVcbiAgfSk7XG4gIGlzc3VlckJhZ2dhZ2UuaW5pdChJTlNUQU5DRV9LRVksIGlzc3VlckRhdGEpO1xuICBjb25zdCBpc3N1ZXJab25lID0gbWFrZUR1cmFibGVab25lKGlzc3VlckJhZ2dhZ2UpO1xuICBjb25zdCByZWNvdmVyeVNldHNTdGF0ZSA9IHJlY292ZXJ5U2V0c09wdGlvbiB8fCBcImhhc1JlY292ZXJ5U2V0c1wiO1xuICBpc3N1ZXJCYWdnYWdlLmluaXQoUkVDT1ZFUllfU0VUU19TVEFURSwgcmVjb3ZlcnlTZXRzU3RhdGUpO1xuICByZXR1cm4gc2V0dXBJc3N1ZXJLaXQoXG4gICAgaXNzdWVyRGF0YSxcbiAgICBpc3N1ZXJab25lLFxuICAgIHJlY292ZXJ5U2V0c1N0YXRlLFxuICAgIG9wdFNodXRkb3duV2l0aEZhaWx1cmVcbiAgKTtcbn07XG5oYXJkZW4obWFrZUR1cmFibGVJc3N1ZXJLaXQpO1xudmFyIHByZXBhcmVJc3N1ZXJLaXQgPSAoaXNzdWVyQmFnZ2FnZSwgbmFtZSwgYXNzZXRLaW5kID0gQXNzZXRLaW5kLk5BVCwgZGlzcGxheUluZm8gPSBoYXJkZW4oe30pLCBvcHRTaHV0ZG93bldpdGhGYWlsdXJlID0gdm9pZCAwLCBvcHRpb25zID0ge30pID0+IHtcbiAgaWYgKGhhc0lzc3Vlcihpc3N1ZXJCYWdnYWdlKSkge1xuICAgIGNvbnN0IHsgZWxlbWVudFNoYXBlOiBfID0gdm9pZCAwLCByZWNvdmVyeVNldHNPcHRpb24gPSB2b2lkIDAgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgaXNzdWVyS2l0ID0gdXBncmFkZUlzc3VlcktpdChcbiAgICAgIGlzc3VlckJhZ2dhZ2UsXG4gICAgICBvcHRTaHV0ZG93bldpdGhGYWlsdXJlLFxuICAgICAgcmVjb3ZlcnlTZXRzT3B0aW9uXG4gICAgKTtcbiAgICByZXR1cm4gaXNzdWVyS2l0O1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGlzc3VlcktpdCA9IG1ha2VEdXJhYmxlSXNzdWVyS2l0KFxuICAgICAgaXNzdWVyQmFnZ2FnZSxcbiAgICAgIG5hbWUsXG4gICAgICBhc3NldEtpbmQsXG4gICAgICBkaXNwbGF5SW5mbyxcbiAgICAgIG9wdFNodXRkb3duV2l0aEZhaWx1cmUsXG4gICAgICBvcHRpb25zXG4gICAgKTtcbiAgICByZXR1cm4gaXNzdWVyS2l0O1xuICB9XG59O1xuaGFyZGVuKHByZXBhcmVJc3N1ZXJLaXQpO1xudmFyIG1ha2VJc3N1ZXJLaXQgPSAobmFtZSwgYXNzZXRLaW5kID0gQXNzZXRLaW5kLk5BVCwgZGlzcGxheUluZm8gPSBoYXJkZW4oe30pLCBvcHRTaHV0ZG93bldpdGhGYWlsdXJlID0gdm9pZCAwLCB7IGVsZW1lbnRTaGFwZSA9IHZvaWQgMCwgcmVjb3ZlcnlTZXRzT3B0aW9uID0gdm9pZCAwIH0gPSB7fSkgPT4gKFxuICAvKiBAdHMtZXhwZWN0LWVycm9yIGNhc3QqL1xuICBtYWtlRHVyYWJsZUlzc3VlcktpdChcbiAgICBtYWtlU2NhbGFyQmlnTWFwU3RvcmUoXCJkcm9wcGVkIGlzc3VlciBraXRcIiwgeyBkdXJhYmxlOiB0cnVlIH0pLFxuICAgIG5hbWUsXG4gICAgYXNzZXRLaW5kLFxuICAgIGRpc3BsYXlJbmZvLFxuICAgIG9wdFNodXRkb3duV2l0aEZhaWx1cmUsXG4gICAgeyBlbGVtZW50U2hhcGUsIHJlY292ZXJ5U2V0c09wdGlvbiB9XG4gIClcbik7XG5oYXJkZW4obWFrZUlzc3VlcktpdCk7XG5cbi8qIC4uL3pvZS9zcmMvY29udHJhY3RTdXBwb3J0L3RvcGljcy5qcyovXG52YXIgUHVibGljVG9waWNTaGFwZSA9IE0uc3BsaXRSZWNvcmQoXG4gIHtcbiAgICBzdWJzY3JpYmVyOiBTdWJzY3JpYmVyU2hhcGUsXG4gICAgc3RvcmFnZVBhdGg6IE0ub3IoTS5wcm9taXNlKFxuICAgICAgLyogc3RyaW5nICovXG4gICAgKSwgTS5zdHJpbmcoKSlcbiAgfSxcbiAgeyBkZXNjcmlwdGlvbjogTS5zdHJpbmcoKSB9XG4pO1xudmFyIFRvcGljc1JlY29yZFNoYXBlID0gTS5yZWNvcmRPZihNLnN0cmluZygpLCBQdWJsaWNUb3BpY1NoYXBlKTtcblxuLyogLi4vb3JjaGVzdHJhdGlvbi9zcmMvdXRpbHMvb3JjaGVzdHJhdGlvbkFjY291bnQuanMqL1xudmFyIHsgVm93JDogVm93JDIgfSA9IFNoYXBlO1xudmFyIG9yY2hlc3RyYXRpb25BY2NvdW50TWV0aG9kcyA9IHtcbiAgZ2V0QWRkcmVzczogTS5jYWxsKCkucmV0dXJucyhDb3Ntb3NDaGFpbkFkZHJlc3NTaGFwZSksXG4gIGdldEJhbGFuY2U6IE0uY2FsbChNLm9yKEJyYW5kU2hhcGUsIE0uc3RyaW5nKCkpKS5yZXR1cm5zKFxuICAgIFZvdyQyKERlbm9tQW1vdW50U2hhcGUpXG4gICksXG4gIGdldEJhbGFuY2VzOiBNLmNhbGwoKS5yZXR1cm5zKFZvdyQyKE0uYXJyYXlPZihEZW5vbUFtb3VudFNoYXBlKSkpLFxuICBzZW5kOiBNLmNhbGwoQWNjb3VudElkQXJnU2hhcGUsIEFtb3VudEFyZ1NoYXBlKS5yZXR1cm5zKFZvd1NoYXBlKSxcbiAgc2VuZEFsbDogTS5jYWxsKENvc21vc0NoYWluQWRkcmVzc1NoYXBlLCBNLmFycmF5T2YoQW1vdW50QXJnU2hhcGUpKS5yZXR1cm5zKFxuICAgIFZvd1NoYXBlXG4gICksXG4gIHRyYW5zZmVyOiBNLmNhbGwoQWNjb3VudElkQXJnU2hhcGUsIEFtb3VudEFyZ1NoYXBlKS5vcHRpb25hbChJQkNUcmFuc2Zlck9wdGlvbnNTaGFwZSkucmV0dXJucyhWb3dTaGFwZSksXG4gIHRyYW5zZmVyU3RlcHM6IE0uY2FsbChBbW91bnRBcmdTaGFwZSwgTS5hbnkoKSkucmV0dXJucyhWb3dTaGFwZSksXG4gIGFzQ29udGludWluZ09mZmVyOiBNLmNhbGwoKS5yZXR1cm5zKFxuICAgIFZvdyQyKHtcbiAgICAgIHB1YmxpY1N1YnNjcmliZXJzOiBUb3BpY3NSZWNvcmRTaGFwZSxcbiAgICAgIGludml0YXRpb25NYWtlcnM6IE0uYW55KCksXG4gICAgICBob2xkZXI6IE0ucmVtb3RhYmxlKClcbiAgICB9KVxuICApLFxuICBnZXRQdWJsaWNUb3BpY3M6IE0uY2FsbCgpLnJldHVybnMoVm93JDIoVG9waWNzUmVjb3JkU2hhcGUpKVxufTtcblxuLyogLi4vdGltZS9zcmMvdHlwZUd1YXJkcy5qcyovXG52YXIgVGltZXJCcmFuZFNoYXBlID0gTS5yZW1vdGFibGUoXCJUaW1lckJyYW5kXCIpO1xudmFyIFRpbWVzdGFtcFZhbHVlU2hhcGUgPSBNLm5hdCgpO1xudmFyIFJlbGF0aXZlVGltZVZhbHVlU2hhcGUgPSBNLm5hdCgpO1xudmFyIFRpbWVzdGFtcFJlY29yZFNoYXBlID0ge1xuICB0aW1lckJyYW5kOiBUaW1lckJyYW5kU2hhcGUsXG4gIGFic1ZhbHVlOiBUaW1lc3RhbXBWYWx1ZVNoYXBlXG59O1xuaGFyZGVuKFRpbWVzdGFtcFJlY29yZFNoYXBlKTtcbnZhciBSZWxhdGl2ZVRpbWVSZWNvcmRTaGFwZSA9IHtcbiAgdGltZXJCcmFuZDogVGltZXJCcmFuZFNoYXBlLFxuICByZWxWYWx1ZTogUmVsYXRpdmVUaW1lVmFsdWVTaGFwZVxufTtcbmhhcmRlbihSZWxhdGl2ZVRpbWVSZWNvcmRTaGFwZSk7XG52YXIgVGltZXN0YW1wU2hhcGUgPSBNLm9yKFRpbWVzdGFtcFJlY29yZFNoYXBlLCBUaW1lc3RhbXBWYWx1ZVNoYXBlKTtcbnZhciBSZWxhdGl2ZVRpbWVTaGFwZSA9IE0ub3IoXG4gIFJlbGF0aXZlVGltZVJlY29yZFNoYXBlLFxuICBSZWxhdGl2ZVRpbWVWYWx1ZVNoYXBlXG4pO1xudmFyIFRpbWVyU2VydmljZVNoYXBlID0gTS5yZW1vdGFibGUoXCJUaW1lclNlcnZpY2VcIik7XG5cbi8qIC4uL3RpbWUvc3JjL3RpbWVNYXRoLmpzKi9cbnZhciBhZ3JlZWRUaW1lckJyYW5kID0gKGxlZnRCcmFuZCwgcmlnaHRCcmFuZCkgPT4ge1xuICBpZiAobGVmdEJyYW5kID09PSB2b2lkIDApIHtcbiAgICBpZiAocmlnaHRCcmFuZCA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmlnaHRCcmFuZDtcbiAgICB9XG4gIH0gZWxzZSBpZiAocmlnaHRCcmFuZCA9PT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIGxlZnRCcmFuZDtcbiAgfSBlbHNlIHtcbiAgICBsZWZ0QnJhbmQgPT09IHJpZ2h0QnJhbmQgfHwgdGhyb3dSZWRhY3RlZGBUaW1lckJyYW5kcyBtdXN0IG1hdGNoOiAke3F1b3RlKGxlZnRCcmFuZCl9IHZzICR7cXVvdGUocmlnaHRCcmFuZCl9YDtcbiAgICByZXR1cm4gbGVmdEJyYW5kO1xuICB9XG59O1xudmFyIHNoYXJlZFRpbWVyQnJhbmQgPSAobGVmdCwgcmlnaHQpID0+IHtcbiAgY29uc3QgbGVmdEJyYW5kID0gdHlwZW9mIGxlZnQgPT09IFwiYmlnaW50XCIgPyB2b2lkIDAgOiBsZWZ0LnRpbWVyQnJhbmQ7XG4gIGNvbnN0IHJpZ2h0QnJhbmQgPSB0eXBlb2YgcmlnaHQgPT09IFwiYmlnaW50XCIgPyB2b2lkIDAgOiByaWdodC50aW1lckJyYW5kO1xuICByZXR1cm4gYWdyZWVkVGltZXJCcmFuZChsZWZ0QnJhbmQsIHJpZ2h0QnJhbmQpO1xufTtcbnZhciBhYnNMaWtlID0gKGxlZnQsIHJpZ2h0LCBhYnNWYWx1ZTIpID0+IHtcbiAgTmF0KGFic1ZhbHVlMik7XG4gIGNvbnN0IHRpbWVyQnJhbmQgPSBzaGFyZWRUaW1lckJyYW5kKGxlZnQsIHJpZ2h0KTtcbiAgaWYgKHRpbWVyQnJhbmQpIHtcbiAgICByZXR1cm4gaGFyZGVuKHtcbiAgICAgIHRpbWVyQnJhbmQsXG4gICAgICBhYnNWYWx1ZTogYWJzVmFsdWUyXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGFic1ZhbHVlMjtcbiAgfVxufTtcbnZhciByZWxMaWtlID0gKGxlZnQsIHJpZ2h0LCByZWxWYWx1ZTIpID0+IHtcbiAgTmF0KHJlbFZhbHVlMik7XG4gIGNvbnN0IHRpbWVyQnJhbmQgPSBzaGFyZWRUaW1lckJyYW5kKGxlZnQsIHJpZ2h0KTtcbiAgaWYgKHRpbWVyQnJhbmQpIHtcbiAgICByZXR1cm4gaGFyZGVuKHtcbiAgICAgIHRpbWVyQnJhbmQsXG4gICAgICByZWxWYWx1ZTogcmVsVmFsdWUyXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlbFZhbHVlMjtcbiAgfVxufTtcbnZhciBhYnNWYWx1ZSA9IChhYnMpID0+IHtcbiAgaWYgKHR5cGVvZiBhYnMgPT09IFwiYmlnaW50XCIpIHtcbiAgICByZXR1cm4gTmF0KGFicyk7XG4gIH1cbiAgbXVzdE1hdGNoMihhYnMsIFRpbWVzdGFtcFJlY29yZFNoYXBlLCBcInRpbWVzdGFtcFwiKTtcbiAgcmV0dXJuIE5hdChhYnMuYWJzVmFsdWUpO1xufTtcbnZhciByZWxWYWx1ZSA9IChyZWwpID0+IHtcbiAgaWYgKHR5cGVvZiByZWwgPT09IFwiYmlnaW50XCIpIHtcbiAgICByZXR1cm4gTmF0KHJlbCk7XG4gIH1cbiAgbXVzdE1hdGNoMihyZWwsIFJlbGF0aXZlVGltZVJlY29yZFNoYXBlLCBcInJlbGF0aXZlXCIpO1xuICByZXR1cm4gTmF0KHJlbC5yZWxWYWx1ZSk7XG59O1xudmFyIG1ha2VUaW1lc3RhbXBSZWNvcmQgPSAoYWJzLCB0aW1lckJyYW5kKSA9PiBoYXJkZW4oeyBhYnNWYWx1ZTogYWJzLCB0aW1lckJyYW5kIH0pO1xudmFyIG1ha2VSZWxhdGl2ZVRpbWVSZWNvcmQgPSAocmVsLCB0aW1lckJyYW5kKSA9PiBoYXJkZW4oeyByZWxWYWx1ZTogcmVsLCB0aW1lckJyYW5kIH0pO1xudmFyIGNvZXJjZVRpbWVzdGFtcFJlY29yZCA9ICh0cywgYnJhbmQpID0+IHtcbiAgYnJhbmQgfHwgdGhyb3dSZWRhY3RlZGBtdXN0IGhhdmUgYSBicmFuZGA7XG4gIGlmICh0eXBlb2YgdHMgPT09IFwibnVtYmVyXCIpIHtcbiAgICB0cyA9IE5hdCh0cyk7XG4gIH1cbiAgaWYgKHR5cGVvZiB0cyA9PT0gXCJiaWdpbnRcIikge1xuICAgIHJldHVybiBtYWtlVGltZXN0YW1wUmVjb3JkKHRzLCBicmFuZCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgeyB0aW1lckJyYW5kIH0gPSB0cztcbiAgICBtdXN0TWF0Y2gyKHRzLCBUaW1lc3RhbXBSZWNvcmRTaGFwZSwgXCJ0aW1lc3RhbXBcIik7XG4gICAgYWdyZWVkVGltZXJCcmFuZCh0aW1lckJyYW5kLCBicmFuZCk7XG4gICAgcmV0dXJuIHRzO1xuICB9XG59O1xudmFyIGNvZXJjZVJlbGF0aXZlVGltZVJlY29yZCA9IChydCwgYnJhbmQpID0+IHtcbiAgYnJhbmQgfHwgdGhyb3dSZWRhY3RlZGBtdXN0IGhhdmUgYSBicmFuZGA7XG4gIGlmICh0eXBlb2YgcnQgPT09IFwibnVtYmVyXCIpIHtcbiAgICBydCA9IE5hdChydCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBydCA9PT0gXCJiaWdpbnRcIikge1xuICAgIHJldHVybiBtYWtlUmVsYXRpdmVUaW1lUmVjb3JkKHJ0LCBicmFuZCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgeyB0aW1lckJyYW5kIH0gPSBydDtcbiAgICBtdXN0TWF0Y2gyKHJ0LCBSZWxhdGl2ZVRpbWVSZWNvcmRTaGFwZSwgXCJyZWxhdGl2ZVRpbWVcIik7XG4gICAgYWdyZWVkVGltZXJCcmFuZCh0aW1lckJyYW5kLCBicmFuZCk7XG4gICAgcmV0dXJuIHJ0O1xuICB9XG59O1xudmFyIGFkZEFic1JlbCA9IChhYnMsIHJlbCkgPT4gYWJzTGlrZShhYnMsIHJlbCwgYWJzVmFsdWUoYWJzKSArIHJlbFZhbHVlKHJlbCkpO1xudmFyIGFkZFJlbFJlbCA9IChyZWwxLCByZWwyKSA9PiByZWxMaWtlKHJlbDEsIHJlbDIsIHJlbFZhbHVlKHJlbDEpICsgcmVsVmFsdWUocmVsMikpO1xudmFyIHN1YnRyYWN0QWJzQWJzID0gKGFiczEsIGFiczIpID0+IHJlbExpa2UoYWJzMSwgYWJzMiwgYWJzVmFsdWUoYWJzMSkgLSBhYnNWYWx1ZShhYnMyKSk7XG52YXIgY2xhbXBlZFN1YnRyYWN0QWJzQWJzID0gKGFiczEsIGFiczIpID0+IHtcbiAgY29uc3QgdmFsMSA9IGFic1ZhbHVlKGFiczEpO1xuICBjb25zdCB2YWwyID0gYWJzVmFsdWUoYWJzMik7XG4gIHJldHVybiByZWxMaWtlKGFiczEsIGFiczIsIHZhbDEgPiB2YWwyID8gdmFsMSAtIHZhbDIgOiAwbik7XG59O1xudmFyIHN1YnRyYWN0QWJzUmVsID0gKGFicywgcmVsKSA9PiBhYnNMaWtlKGFicywgcmVsLCBhYnNWYWx1ZShhYnMpIC0gcmVsVmFsdWUocmVsKSk7XG52YXIgc3VidHJhY3RSZWxSZWwgPSAocmVsMSwgcmVsMikgPT4gcmVsTGlrZShyZWwxLCByZWwyLCByZWxWYWx1ZShyZWwxKSAtIHJlbFZhbHVlKHJlbDIpKTtcbnZhciBpc1JlbFplcm8gPSAocmVsKSA9PiByZWxWYWx1ZShyZWwpID09PSAwbjtcbnZhciBtdWx0aXBseVJlbE5hdCA9IChyZWwsIG5hdCkgPT4gcmVsTGlrZShyZWwsIG5hdCwgcmVsVmFsdWUocmVsKSAqIG5hdCk7XG52YXIgZGl2aWRlUmVsTmF0ID0gKHJlbCwgbmF0KSA9PiByZWxMaWtlKHJlbCwgbmF0LCByZWxWYWx1ZShyZWwpIC8gbmF0KTtcbnZhciBkaXZpZGVSZWxSZWwgPSAocmVsMSwgcmVsMikgPT4ge1xuICBzaGFyZWRUaW1lckJyYW5kKHJlbDEsIHJlbDIpO1xuICByZXR1cm4gcmVsVmFsdWUocmVsMSkgLyByZWxWYWx1ZShyZWwyKTtcbn07XG52YXIgbW9kQWJzUmVsID0gKGFicywgc3RlcCkgPT4gcmVsTGlrZShhYnMsIHN0ZXAsIGFic1ZhbHVlKGFicykgJSByZWxWYWx1ZShzdGVwKSk7XG52YXIgbW9kUmVsUmVsID0gKHJlbCwgc3RlcCkgPT4gcmVsTGlrZShyZWwsIHN0ZXAsIHJlbFZhbHVlKHJlbCkgJSByZWxWYWx1ZShzdGVwKSk7XG52YXIgY29tcGFyZVZhbHVlcyA9IChsZWZ0LCByaWdodCwgdjEsIHYyKSA9PiB7XG4gIHNoYXJlZFRpbWVyQnJhbmQobGVmdCwgcmlnaHQpO1xuICBpZiAodjEgPCB2Mikge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIGlmICh2MSA9PT0gdjIpIHtcbiAgICByZXR1cm4gMDtcbiAgfSBlbHNlIHtcbiAgICBhc3NlcnQodjEgPiB2Mik7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn07XG52YXIgVGltZU1hdGggPSBoYXJkZW4oe1xuICBhYnNWYWx1ZSxcbiAgcmVsVmFsdWUsXG4gIGNvZXJjZVRpbWVzdGFtcFJlY29yZCxcbiAgY29lcmNlUmVsYXRpdmVUaW1lUmVjb3JkLFxuICAvKiBAdHMtZXhwZWN0LWVycm9yIHh4eCBkeW5hbWljIHR5cGluZyovXG4gIGFkZEFic1JlbCxcbiAgLyogQHRzLWV4cGVjdC1lcnJvciB4eHggZHluYW1pYyB0eXBpbmcqL1xuICBhZGRSZWxSZWwsXG4gIHN1YnRyYWN0QWJzQWJzLFxuICBjbGFtcGVkU3VidHJhY3RBYnNBYnMsXG4gIHN1YnRyYWN0QWJzUmVsLFxuICBzdWJ0cmFjdFJlbFJlbCxcbiAgaXNSZWxaZXJvLFxuICBtdWx0aXBseVJlbE5hdCxcbiAgZGl2aWRlUmVsTmF0LFxuICBkaXZpZGVSZWxSZWwsXG4gIG1vZEFic1JlbCxcbiAgbW9kUmVsUmVsLFxuICBjb21wYXJlQWJzOiAoYWJzMSwgYWJzMikgPT4gY29tcGFyZVZhbHVlcyhhYnMxLCBhYnMyLCBhYnNWYWx1ZShhYnMxKSwgYWJzVmFsdWUoYWJzMikpLFxuICBjb21wYXJlUmVsOiAocmVsMSwgcmVsMikgPT4gY29tcGFyZVZhbHVlcyhyZWwxLCByZWwyLCByZWxWYWx1ZShyZWwxKSwgcmVsVmFsdWUocmVsMikpXG59KTtcblxuLyogLi4vb3JjaGVzdHJhdGlvbi9zcmMvdXRpbHMvdGltZS5qcyovXG52YXIgU0VDT05EU19QRVJfTUlOVVRFID0gNjBuO1xudmFyIE5BTk9TRUNPTkRTX1BFUl9TRUNPTkQgPSAxMDAwMDAwMDAwbjtcbmZ1bmN0aW9uIG1ha2VUaW1lc3RhbXBIZWxwZXIodGltZXIpIHtcbiAgY29uc3Qgc2VsZiA9IGhhcmRlbih7XG4gICAgLyoqXG4gKiBYWFggZG8gdGhpcyBuZWVkIHRvIGJlIHJlc3VtYWJsZSAvIHVzZSBWb3dzP1xuICpcbiAqIFRha2VzIHRoZSBjdXJyZW50IHRpbWUgZnJvbSBDaGFpblRpbWVyU2VydmljZSBhbmQgYWRkcyBhIHJlbGF0aXZlIHRpbWVcbiAqIChgc2Vjb25kc0luRnV0dXJlYCkgdG8gZGV0ZXJtaW5lIGEgdGltZW91dCB0aW1lc3RhbXAgaW4gbmFub3NlY29uZHMuXG4gKiBVc2VmdWwgZm9yIHtAbGluayBNc2dUcmFuc2Zlci50aW1lb3V0VGltZXN0YW1wfS5cbiAqXG4gKiBAcGFyYW0ge2JpZ2ludH0gW3NlY29uZHNJbkZ1dHVyZV0gZGVmYXVsdHMgdG8gMzAwbiAoNSBtaW51dGVzKVxuICogQHJldHVybnMge1Byb21pc2U8YmlnaW50Pn0gVGltZW91dCB0aW1lc3RhbXAgaW4gYWJzb2x1dGUgbmFub3NlY29uZHNcbiAqICAgc2luY2UgdW5peCBlcG9jaFxuICovXG4gICAgYXN5bmMgZ2V0VGltZW91dFRpbWVzdGFtcE5TKHNlY29uZHNJbkZ1dHVyZSA9IFNFQ09ORFNfUEVSX01JTlVURSAqIDVuKSB7XG4gICAgICBjb25zdCBjdXJyZW50VGltZSA9IGF3YWl0IEUodGltZXIpLmdldEN1cnJlbnRUaW1lc3RhbXAoKTtcbiAgICAgIGNvbnN0IHRpbWVvdXQgPSBUaW1lTWF0aC5jb2VyY2VSZWxhdGl2ZVRpbWVSZWNvcmQoXG4gICAgICAgIHNlY29uZHNJbkZ1dHVyZSxcbiAgICAgICAgY3VycmVudFRpbWUudGltZXJCcmFuZFxuICAgICAgKTtcbiAgICAgIHJldHVybiBUaW1lTWF0aC5hZGRBYnNSZWwoY3VycmVudFRpbWUsIHRpbWVvdXQpLmFic1ZhbHVlICogTkFOT1NFQ09ORFNfUEVSX1NFQ09ORDtcbiAgICB9LFxuICAgIC8qKiBAcGFyYW0ge0lCQ01zZ1RyYW5zZmVyT3B0aW9uc30gW29wdHNdICovXG4gICAgdm93T3JWYWx1ZUZyb21PcHRzKG9wdHMpIHtcbiAgICAgIGlmIChvcHRzICYmIFwidGltZW91dFRpbWVzdGFtcFwiIGluIG9wdHMpIHJldHVybiBvcHRzLnRpbWVvdXRUaW1lc3RhbXA7XG4gICAgICBpZiAob3B0cyAmJiBcInRpbWVvdXRIZWlnaHRcIiBpbiBvcHRzKSByZXR1cm4gMG47XG4gICAgICByZXR1cm4gc2VsZi5nZXRUaW1lb3V0VGltZXN0YW1wTlMoXG4gICAgICAgIG9wdHMgJiYgXCJ0aW1lb3V0UmVsYXRpdmVTZWNvbmRzXCIgaW4gb3B0cyA/IG9wdHMudGltZW91dFJlbGF0aXZlU2Vjb25kcyA6IHZvaWQgMFxuICAgICAgKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc2VsZjtcbn1cblxuLyogLi4vb3JjaGVzdHJhdGlvbi9zcmMvZXhvcy9jb3Ntb3Mtb3JjaGVzdHJhdGlvbi1hY2NvdW50LmpzKi9cbnZhciBNc2dEZXBvc2l0Rm9yQnVybjIgPSBDb2RlY0hlbHBlcihNc2dEZXBvc2l0Rm9yQnVybik7XG52YXIgTXNnRGVwb3NpdEZvckJ1cm5XaXRoQ2FsbGVyMiA9IENvZGVjSGVscGVyKFxuICBNc2dEZXBvc2l0Rm9yQnVybldpdGhDYWxsZXJcbik7XG52YXIgUXVlcnlBbGxCYWxhbmNlc1JlcXVlc3QyID0gQ29kZWNIZWxwZXIoUXVlcnlBbGxCYWxhbmNlc1JlcXVlc3QpO1xudmFyIFF1ZXJ5QWxsQmFsYW5jZXNSZXNwb25zZTIgPSBDb2RlY0hlbHBlcihRdWVyeUFsbEJhbGFuY2VzUmVzcG9uc2UpO1xudmFyIFF1ZXJ5QmFsYW5jZVJlcXVlc3QyID0gQ29kZWNIZWxwZXIoUXVlcnlCYWxhbmNlUmVxdWVzdCk7XG52YXIgUXVlcnlCYWxhbmNlUmVzcG9uc2UyID0gQ29kZWNIZWxwZXIoUXVlcnlCYWxhbmNlUmVzcG9uc2UpO1xudmFyIE1zZ1NlbmQyID0gQ29kZWNIZWxwZXIoTXNnU2VuZCk7XG52YXIgUXVlcnlEZWxlZ2F0aW9uUmV3YXJkc1JlcXVlc3QyID0gQ29kZWNIZWxwZXIoXG4gIFF1ZXJ5RGVsZWdhdGlvblJld2FyZHNSZXF1ZXN0XG4pO1xudmFyIFF1ZXJ5RGVsZWdhdGlvblJld2FyZHNSZXNwb25zZTIgPSBDb2RlY0hlbHBlcihcbiAgUXVlcnlEZWxlZ2F0aW9uUmV3YXJkc1Jlc3BvbnNlXG4pO1xudmFyIFF1ZXJ5RGVsZWdhdGlvblRvdGFsUmV3YXJkc1JlcXVlc3QyID0gQ29kZWNIZWxwZXIoXG4gIFF1ZXJ5RGVsZWdhdGlvblRvdGFsUmV3YXJkc1JlcXVlc3Rcbik7XG52YXIgUXVlcnlEZWxlZ2F0aW9uVG90YWxSZXdhcmRzUmVzcG9uc2UyID0gQ29kZWNIZWxwZXIoXG4gIFF1ZXJ5RGVsZWdhdGlvblRvdGFsUmV3YXJkc1Jlc3BvbnNlXG4pO1xudmFyIE1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkMiA9IENvZGVjSGVscGVyKE1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkKTtcbnZhciBNc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZFJlc3BvbnNlMiA9IENvZGVjSGVscGVyKFxuICBNc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZFJlc3BvbnNlXG4pO1xudmFyIFF1ZXJ5RGVsZWdhdGlvblJlcXVlc3QyID0gQ29kZWNIZWxwZXIoUXVlcnlEZWxlZ2F0aW9uUmVxdWVzdCk7XG52YXIgUXVlcnlEZWxlZ2F0aW9uUmVzcG9uc2UyID0gQ29kZWNIZWxwZXIoUXVlcnlEZWxlZ2F0aW9uUmVzcG9uc2UpO1xudmFyIFF1ZXJ5RGVsZWdhdG9yRGVsZWdhdGlvbnNSZXF1ZXN0MiA9IENvZGVjSGVscGVyKFxuICBRdWVyeURlbGVnYXRvckRlbGVnYXRpb25zUmVxdWVzdFxuKTtcbnZhciBRdWVyeURlbGVnYXRvckRlbGVnYXRpb25zUmVzcG9uc2UyID0gQ29kZWNIZWxwZXIoXG4gIFF1ZXJ5RGVsZWdhdG9yRGVsZWdhdGlvbnNSZXNwb25zZVxuKTtcbnZhciBRdWVyeURlbGVnYXRvclVuYm9uZGluZ0RlbGVnYXRpb25zUmVxdWVzdDIgPSBDb2RlY0hlbHBlcihcbiAgUXVlcnlEZWxlZ2F0b3JVbmJvbmRpbmdEZWxlZ2F0aW9uc1JlcXVlc3Rcbik7XG52YXIgUXVlcnlEZWxlZ2F0b3JVbmJvbmRpbmdEZWxlZ2F0aW9uc1Jlc3BvbnNlMiA9IENvZGVjSGVscGVyKFxuICBRdWVyeURlbGVnYXRvclVuYm9uZGluZ0RlbGVnYXRpb25zUmVzcG9uc2Vcbik7XG52YXIgUXVlcnlSZWRlbGVnYXRpb25zUmVxdWVzdDIgPSBDb2RlY0hlbHBlcihRdWVyeVJlZGVsZWdhdGlvbnNSZXF1ZXN0KTtcbnZhciBRdWVyeVJlZGVsZWdhdGlvbnNSZXNwb25zZTIgPSBDb2RlY0hlbHBlcihRdWVyeVJlZGVsZWdhdGlvbnNSZXNwb25zZSk7XG52YXIgUXVlcnlVbmJvbmRpbmdEZWxlZ2F0aW9uUmVxdWVzdDIgPSBDb2RlY0hlbHBlcihcbiAgUXVlcnlVbmJvbmRpbmdEZWxlZ2F0aW9uUmVxdWVzdFxuKTtcbnZhciBRdWVyeVVuYm9uZGluZ0RlbGVnYXRpb25SZXNwb25zZTIgPSBDb2RlY0hlbHBlcihcbiAgUXVlcnlVbmJvbmRpbmdEZWxlZ2F0aW9uUmVzcG9uc2Vcbik7XG52YXIgTXNnQmVnaW5SZWRlbGVnYXRlMiA9IENvZGVjSGVscGVyKE1zZ0JlZ2luUmVkZWxlZ2F0ZSk7XG52YXIgTXNnRGVsZWdhdGUyID0gQ29kZWNIZWxwZXIoTXNnRGVsZWdhdGUpO1xudmFyIE1zZ1VuZGVsZWdhdGUyID0gQ29kZWNIZWxwZXIoTXNnVW5kZWxlZ2F0ZSk7XG52YXIgTXNnVW5kZWxlZ2F0ZVJlc3BvbnNlMiA9IENvZGVjSGVscGVyKE1zZ1VuZGVsZWdhdGVSZXNwb25zZSk7XG52YXIgQW55MyA9IENvZGVjSGVscGVyKEFueSk7XG52YXIgTXNnVHJhbnNmZXIyID0gQ29kZWNIZWxwZXIoTXNnVHJhbnNmZXIpO1xudmFyIHRyYWNlMyA9IG1ha2VUcmFjZXIoXCJDb3Ntb3NPcmNoQWNjb3VudFwiKTtcbnZhciB7IFZvdyQ6IFZvdyQzIH0gPSBTaGFwZTtcbnZhciBkZWNvZGVJY3FSZXN1bHQgPSAoY29kZWMsIHJlc3VsdCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGJ5dGVzMiA9IGRlY29kZUJhc2U2NChyZXN1bHQua2V5IHx8IHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNvZGVjLmRlY29kZShieXRlczIpO1xuICB9IGNhdGNoIChjYXVzZSkge1xuICAgIHRocm93IG1ha2VFcnJvcihcbiAgICAgIGBGYWlsZWQgdG8gcGFyc2UgJHtjb2RlYy50eXBlVXJsfSBmcm9tIHJlc3VsdCAke3F1b3RlKHJlc3VsdCl9YCxcbiAgICAgIHZvaWQgMCxcbiAgICAgIHsgY2F1c2UgfVxuICAgICk7XG4gIH1cbn07XG52YXIgc3Rha2luZ0FjY291bnRBY3Rpb25zTWV0aG9kcyA9IHtcbiAgZGVsZWdhdGU6IE0uY2FsbChDb3Ntb3NDaGFpbkFkZHJlc3NTaGFwZSwgQW1vdW50QXJnU2hhcGUpLnJldHVybnMoVm93U2hhcGUpLFxuICByZWRlbGVnYXRlOiBNLmNhbGwoXG4gICAgQ29zbW9zQ2hhaW5BZGRyZXNzU2hhcGUsXG4gICAgQ29zbW9zQ2hhaW5BZGRyZXNzU2hhcGUsXG4gICAgQW1vdW50QXJnU2hhcGVcbiAgKS5yZXR1cm5zKFZvd1NoYXBlKSxcbiAgdW5kZWxlZ2F0ZTogTS5jYWxsKE0uYXJyYXlPZihEZWxlZ2F0aW9uU2hhcGUpKS5yZXR1cm5zKFZvd1NoYXBlKSxcbiAgd2l0aGRyYXdSZXdhcmQ6IE0uY2FsbChDb3Ntb3NDaGFpbkFkZHJlc3NTaGFwZSkucmV0dXJucyhcbiAgICBWb3ckMyhNLmFycmF5T2YoRGVub21BbW91bnRTaGFwZSkpXG4gICksXG4gIHdpdGhkcmF3UmV3YXJkczogTS5jYWxsKCkucmV0dXJucyhWb3ckMyhNLmFycmF5T2YoRGVub21BbW91bnRTaGFwZSkpKVxufTtcbnZhciBzdGFraW5nQWNjb3VudFF1ZXJpZXNNZXRob2RzID0ge1xuICBnZXREZWxlZ2F0aW9uOiBNLmNhbGwoQ29zbW9zQ2hhaW5BZGRyZXNzU2hhcGUpLnJldHVybnMoVm93U2hhcGUpLFxuICBnZXREZWxlZ2F0aW9uczogTS5jYWxsKCkucmV0dXJucyhWb3dTaGFwZSksXG4gIGdldFVuYm9uZGluZ0RlbGVnYXRpb246IE0uY2FsbChDb3Ntb3NDaGFpbkFkZHJlc3NTaGFwZSkucmV0dXJucyhWb3dTaGFwZSksXG4gIGdldFVuYm9uZGluZ0RlbGVnYXRpb25zOiBNLmNhbGwoKS5yZXR1cm5zKFZvd1NoYXBlKSxcbiAgZ2V0UmVkZWxlZ2F0aW9uczogTS5jYWxsKCkucmV0dXJucyhWb3dTaGFwZSksXG4gIGdldFJld2FyZDogTS5jYWxsKENvc21vc0NoYWluQWRkcmVzc1NoYXBlKS5yZXR1cm5zKFZvd1NoYXBlKSxcbiAgZ2V0UmV3YXJkczogTS5jYWxsKCkucmV0dXJucyhWb3dTaGFwZSlcbn07XG52YXIgbm9ibGVNZXRob2RzID0ge1xuICBkZXBvc2l0Rm9yQnVybjogTS5jYWxsKE0uc3RyaW5nKCksIEFtb3VudEFyZ1NoYXBlKS5vcHRpb25hbChNLnN0cmluZygpKS5yZXR1cm5zKFZvd1NoYXBlKVxufTtcbnZhciBJY2FBY2NvdW50SG9sZGVySSA9IE0uaW50ZXJmYWNlKFwiSWNhQWNjb3VudEhvbGRlclwiLCB7XG4gIC4uLm5vYmxlTWV0aG9kcyxcbiAgLi4ub3JjaGVzdHJhdGlvbkFjY291bnRNZXRob2RzLFxuICAuLi5zdGFraW5nQWNjb3VudEFjdGlvbnNNZXRob2RzLFxuICAuLi5zdGFraW5nQWNjb3VudFF1ZXJpZXNNZXRob2RzLFxuICBkZWFjdGl2YXRlOiBNLmNhbGwoKS5yZXR1cm5zKFZvd1NoYXBlKSxcbiAgcmVhY3RpdmF0ZTogTS5jYWxsKCkucmV0dXJucyhWb3dTaGFwZSksXG4gIGV4ZWN1dGVFbmNvZGVkVHg6IE0uY2FsbChNLmFycmF5T2YoUHJvdG8zU2hhcGUpKS5vcHRpb25hbChFeGVjdXRlSUNBVHhPcHRzU2hhcGUpLnJldHVybnMoVm93U2hhcGUpXG59KTtcbnZhciBQVUJMSUNfVE9QSUNTID0ge1xuICBhY2NvdW50OiBbXCJTdGFraW5nIEFjY291bnQgaG9sZGVyIHN0YXR1c1wiLCBNLmFueSgpXVxufTtcbnZhciBDb3Ntb3NPcmNoZXN0cmF0aW9uSW52aXRhdGlvbk1ha2Vyc0kgPSBNLmludGVyZmFjZShcbiAgXCJpbnZpdGF0aW9uTWFrZXJzXCIsXG4gIHtcbiAgICBEZWxlZ2F0ZTogTS5jYWxsKENvc21vc0NoYWluQWRkcmVzc1NoYXBlLCBBbW91bnRBcmdTaGFwZSkucmV0dXJucyhcbiAgICAgIE0ucHJvbWlzZSgpXG4gICAgKSxcbiAgICBSZWRlbGVnYXRlOiBNLmNhbGwoXG4gICAgICBDb3Ntb3NDaGFpbkFkZHJlc3NTaGFwZSxcbiAgICAgIENvc21vc0NoYWluQWRkcmVzc1NoYXBlLFxuICAgICAgQW1vdW50QXJnU2hhcGVcbiAgICApLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICAgIFdpdGhkcmF3UmV3YXJkOiBNLmNhbGwoQ29zbW9zQ2hhaW5BZGRyZXNzU2hhcGUpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICAgIFVuZGVsZWdhdGU6IE0uY2FsbChNLmFycmF5T2YoRGVsZWdhdGlvblNoYXBlKSkucmV0dXJucyhNLnByb21pc2UoKSksXG4gICAgRGVhY3RpdmF0ZUFjY291bnQ6IE0uY2FsbCgpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICAgIFJlYWN0aXZhdGVBY2NvdW50OiBNLmNhbGwoKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgICBUcmFuc2ZlckFjY291bnQ6IE0uY2FsbCgpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICAgIFNlbmQ6IE0uY2FsbCgpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICAgIFNlbmRBbGw6IE0uY2FsbCgpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICAgIFRyYW5zZmVyOiBNLmNhbGwoKS5yZXR1cm5zKE0ucHJvbWlzZSgpKVxuICB9XG4pO1xuaGFyZGVuKENvc21vc09yY2hlc3RyYXRpb25JbnZpdGF0aW9uTWFrZXJzSSk7XG52YXIgcHJlcGFyZUNvc21vc09yY2hlc3RyYXRpb25BY2NvdW50S2l0ID0gKHpvbmUsIHtcbiAgY2hhaW5IdWIsXG4gIG1ha2VSZWNvcmRlcktpdCxcbiAgdGltZXJTZXJ2aWNlLFxuICB2b3dUb29sczogeyB3YXRjaCwgYXNWb3csIHdoZW4sIGFsbFZvd3MgfSxcbiAgemNmXG59KSA9PiB7XG4gIGNvbnN0IHRpbWVzdGFtcEhlbHBlciA9IG1ha2VUaW1lc3RhbXBIZWxwZXIodGltZXJTZXJ2aWNlKTtcbiAgY29uc3QgbWFrZUNvc21vc09yY2hlc3RyYXRpb25BY2NvdW50S2l0ID0gem9uZS5leG9DbGFzc0tpdChcbiAgICBcIkNvc21vcyBPcmNoZXN0cmF0aW9uIEFjY291bnQgSG9sZGVyXCIsXG4gICAge1xuICAgICAgaGVscGVyOiBNLmludGVyZmFjZShcImhlbHBlclwiLCB7XG4gICAgICAgIG93bmVkOiBNLmNhbGwoKS5yZXR1cm5zKE0ucmVtb3RhYmxlKCkpLFxuICAgICAgICBnZXRVcGRhdGVyOiBNLmNhbGwoKS5yZXR1cm5zKE0ucmVtb3RhYmxlKCkpLFxuICAgICAgICBhbW91bnRUb0NvaW46IE0uY2FsbChBbW91bnRBcmdTaGFwZSkucmV0dXJucyhNLnJlY29yZCgpKVxuICAgICAgfSksXG4gICAgICByZXR1cm5Wb2lkV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJyZXR1cm5Wb2lkV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hbnkoKSkub3B0aW9uYWwoTS5hcnJheU9mKE0udW5kZWZpbmVkKCkpKS5yZXR1cm5zKE0udW5kZWZpbmVkKCkpXG4gICAgICB9KSxcbiAgICAgIGJhbGFuY2VRdWVyeVdhdGNoZXI6IE0uaW50ZXJmYWNlKFwiYmFsYW5jZVF1ZXJ5V2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hcnJheU9mKE0ucmVjb3JkKCkpKS5vcHRpb25hbChNLmFycmF5T2YoTS51bmRlZmluZWQoKSkpLnJldHVybnMoTS5vcihNLnJlY29yZCgpLCBNLnVuZGVmaW5lZCgpKSlcbiAgICAgIH0pLFxuICAgICAgYWxsQmFsYW5jZXNRdWVyeVdhdGNoZXI6IE0uaW50ZXJmYWNlKFwiYWxsQmFsYW5jZXNRdWVyeVdhdGNoZXJcIiwge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uYXJyYXlPZihNLnJlY29yZCgpKSkucmV0dXJucyhcbiAgICAgICAgICBNLmFycmF5T2YoTS5yZWNvcmQoKSlcbiAgICAgICAgKVxuICAgICAgfSksXG4gICAgICB1bmRlbGVnYXRlV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJ1bmRlbGVnYXRlV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5zdHJpbmcoKSkub3B0aW9uYWwoTS5hcnJheU9mKE0udW5kZWZpbmVkKCkpKS5yZXR1cm5zKFZvdyQzKE0ucHJvbWlzZSgpKSlcbiAgICAgIH0pLFxuICAgICAgd2l0aGRyYXdSZXdhcmRXYXRjaGVyOiBNLmludGVyZmFjZShcIndpdGhkcmF3UmV3YXJkV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5zdHJpbmcoKSkub3B0aW9uYWwoTS5hcnJheU9mKE0udW5kZWZpbmVkKCkpKS5yZXR1cm5zKE0uYXJyYXlPZihEZW5vbUFtb3VudFNoYXBlKSlcbiAgICAgIH0pLFxuICAgICAgdHJhbnNmZXJXYXRjaGVyOiBNLmludGVyZmFjZShcInRyYW5zZmVyV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoW00ucmVjb3JkKCksIE0ubmF0KCldKS5vcHRpb25hbCh7XG4gICAgICAgICAgZGVzdGluYXRpb246IENvc21vc0NoYWluQWRkcmVzc1NoYXBlLFxuICAgICAgICAgIG9wdHM6IE0ub3IoTS51bmRlZmluZWQoKSwgSUJDVHJhbnNmZXJPcHRpb25zU2hhcGUpLFxuICAgICAgICAgIHRva2VuOiB7XG4gICAgICAgICAgICBkZW5vbTogTS5zdHJpbmcoKSxcbiAgICAgICAgICAgIGFtb3VudDogTS5zdHJpbmcoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSkucmV0dXJucyhWb3ckMyhNLnJlY29yZCgpKSlcbiAgICAgIH0pLFxuICAgICAgZGVsZWdhdGlvblF1ZXJ5V2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJkZWxlZ2F0aW9uUXVlcnlXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFycmF5T2YoTS5yZWNvcmQoKSkpLnJldHVybnMoTS5yZWNvcmQoKSlcbiAgICAgIH0pLFxuICAgICAgZGVsZWdhdGlvbnNRdWVyeVdhdGNoZXI6IE0uaW50ZXJmYWNlKFwiZGVsZWdhdGlvbnNRdWVyeVdhdGNoZXJcIiwge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uYXJyYXlPZihNLnJlY29yZCgpKSkucmV0dXJucyhcbiAgICAgICAgICBNLmFycmF5T2YoTS5yZWNvcmQoKSlcbiAgICAgICAgKVxuICAgICAgfSksXG4gICAgICB1bmJvbmRpbmdEZWxlZ2F0aW9uUXVlcnlXYXRjaGVyOiBNLmludGVyZmFjZShcbiAgICAgICAgXCJ1bmJvbmRpbmdEZWxlZ2F0aW9uUXVlcnlXYXRjaGVyXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uYXJyYXlPZihNLnJlY29yZCgpKSkucmV0dXJucyhNLnJlY29yZCgpKVxuICAgICAgICB9XG4gICAgICApLFxuICAgICAgdW5ib25kaW5nRGVsZWdhdGlvbnNRdWVyeVdhdGNoZXI6IE0uaW50ZXJmYWNlKFxuICAgICAgICBcInVuYm9uZGluZ0RlbGVnYXRpb25zUXVlcnlXYXRjaGVyXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uYXJyYXlPZihNLnJlY29yZCgpKSkucmV0dXJucyhcbiAgICAgICAgICAgIE0uYXJyYXlPZihNLnJlY29yZCgpKVxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgKSxcbiAgICAgIHJlZGVsZWdhdGlvblF1ZXJ5V2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJyZWRlbGVnYXRpb25RdWVyeVdhdGNoZXJcIiwge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uYXJyYXlPZihNLnJlY29yZCgpKSkucmV0dXJucyhcbiAgICAgICAgICBNLmFycmF5T2YoTS5yZWNvcmQoKSlcbiAgICAgICAgKVxuICAgICAgfSksXG4gICAgICByZWRlbGVnYXRpb25zUXVlcnlXYXRjaGVyOiBNLmludGVyZmFjZShcInJlZGVsZWdhdGlvbnNRdWVyeVdhdGNoZXJcIiwge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uYXJyYXlPZihNLnJlY29yZCgpKSkucmV0dXJucyhcbiAgICAgICAgICBNLmFycmF5T2YoTS5yZWNvcmQoKSlcbiAgICAgICAgKVxuICAgICAgfSksXG4gICAgICByZXdhcmRRdWVyeVdhdGNoZXI6IE0uaW50ZXJmYWNlKFwicmV3YXJkUXVlcnlXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFycmF5T2YoTS5yZWNvcmQoKSkpLnJldHVybnMoXG4gICAgICAgICAgTS5hcnJheU9mKE0ucmVjb3JkKCkpXG4gICAgICAgIClcbiAgICAgIH0pLFxuICAgICAgcmV3YXJkc1F1ZXJ5V2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJyZXdhcmRzUXVlcnlXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFycmF5T2YoTS5yZWNvcmQoKSkpLnJldHVybnMoTS5yZWNvcmQoKSlcbiAgICAgIH0pLFxuICAgICAgaG9sZGVyOiBJY2FBY2NvdW50SG9sZGVySSxcbiAgICAgIGludml0YXRpb25NYWtlcnM6IENvc21vc09yY2hlc3RyYXRpb25JbnZpdGF0aW9uTWFrZXJzSVxuICAgIH0sXG4gICAgLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gaW5mb1xuICogQHBhcmFtIHtDb3Ntb3NDaGFpbkFkZHJlc3N9IGluZm8uY2hhaW5BZGRyZXNzXG4gKiBAcGFyYW0ge0xvY2FsSWJjQWRkcmVzc30gaW5mby5sb2NhbEFkZHJlc3NcbiAqIEBwYXJhbSB7UmVtb3RlSWJjQWRkcmVzc30gaW5mby5yZW1vdGVBZGRyZXNzXG4gKiBAcGFyYW0ge29iamVjdH0gaW9cbiAqIEBwYXJhbSB7SWNhQWNjb3VudH0gaW8uYWNjb3VudFxuICogQHBhcmFtIHtSZW1vdGU8U3RvcmFnZU5vZGU+fSBbaW8uc3RvcmFnZU5vZGVdXG4gKiBAcGFyYW0ge0lDUUNvbm5lY3Rpb259IFtpby5pY3FDb25uZWN0aW9uXVxuICogQHBhcmFtIHtSZW1vdGU8VGltZXJTZXJ2aWNlPn0gaW8udGltZXJcbiAqIEByZXR1cm5zIHtTdGF0ZX1cbiAqL1xuICAgICh7IGNoYWluQWRkcmVzcywgbG9jYWxBZGRyZXNzLCByZW1vdGVBZGRyZXNzIH0sIGlvKSA9PiB7XG4gICAgICB0cmFjZTMoXCJjb3Ntb3Mgb3JjaCBhY2N0IGluaXRcIiwge1xuICAgICAgICBjaGFpbkFkZHJlc3MsXG4gICAgICAgIGxvY2FsQWRkcmVzcyxcbiAgICAgICAgcmVtb3RlQWRkcmVzc1xuICAgICAgfSk7XG4gICAgICBjb25zdCB7IHN0b3JhZ2VOb2RlIH0gPSBpbztcbiAgICAgIGNvbnN0IHRvcGljS2l0ID0gc3RvcmFnZU5vZGUgPyBtYWtlUmVjb3JkZXJLaXQoc3RvcmFnZU5vZGUsIFBVQkxJQ19UT1BJQ1MuYWNjb3VudFsxXSkgOiB2b2lkIDA7XG4gICAgICBpZiAodG9waWNLaXQpIHtcbiAgICAgICAgdm9pZCBFKHRvcGljS2l0LnJlY29yZGVyKS53cml0ZShcbiAgICAgICAgICAvKiogQHR5cGUge0Nvc21vc09yY2hlc3RyYXRpb25BY2NvdW50U3RvcmFnZVN0YXRlfSAqL1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGxvY2FsQWRkcmVzcyxcbiAgICAgICAgICAgIHJlbW90ZUFkZHJlc3NcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCB7IGFjY291bnQsIGljcUNvbm5lY3Rpb24sIHRpbWVyIH0gPSBpbztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFjY291bnQsXG4gICAgICAgIGNoYWluQWRkcmVzcyxcbiAgICAgICAgaWNxQ29ubmVjdGlvbixcbiAgICAgICAgbG9jYWxBZGRyZXNzLFxuICAgICAgICByZW1vdGVBZGRyZXNzLFxuICAgICAgICB0aW1lcixcbiAgICAgICAgdG9waWNLaXRcbiAgICAgIH07XG4gICAgfSxcbiAgICB7XG4gICAgICBoZWxwZXI6IHtcbiAgICAgICAgLyoqIEB0aHJvd3MgaWYgdGhpcyBob2xkZXIgbm8gbG9uZ2VyIG93bnMgdGhlIGFjY291bnQgKi9cbiAgICAgICAgb3duZWQoKSB7XG4gICAgICAgICAgY29uc3QgeyBhY2NvdW50IH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIGlmICghYWNjb3VudCkge1xuICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBVc2luZyBhY2NvdW50IGhvbGRlciBhZnRlciB0cmFuc2ZlcmA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBhY2NvdW50O1xuICAgICAgICB9LFxuICAgICAgICBnZXRVcGRhdGVyKCkge1xuICAgICAgICAgIGlmICghdGhpcy5zdGF0ZS50b3BpY0tpdCkgdGhyb3cgdGhyb3dSZWRhY3RlZGBubyB0b3BpY0tpdGA7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUudG9waWNLaXQucmVjb3JkZXI7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICogQHBhcmFtIHtBbW91bnRBcmd9IGFtb3VudFxuICogQHJldHVybnMge0NvaW59XG4gKi9cbiAgICAgICAgYW1vdW50VG9Db2luKGFtb3VudCkge1xuICAgICAgICAgICEoXCJicmFuZFwiIGluIGFtb3VudCkgfHwgdGhyb3dSZWRhY3RlZGAnYW1vdW50VG9Db2luJyBub3Qgd29ya2luZyBmb3IgJHtxdW90ZShhbW91bnQuYnJhbmQpfSB1bnRpbCAjMTA0NDk7IHVzZSAnRGVub21BbW91bnQnIGZvciBub3dgO1xuICAgICAgICAgIHJldHVybiBjb2VyY2VDb2luKGNoYWluSHViLCBhbW91bnQpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYmFsYW5jZVF1ZXJ5V2F0Y2hlcjoge1xuICAgICAgICAvKipcbiAqIEBwYXJhbSB7SnNvblNhZmU8UmVzcG9uc2VRdWVyeT5bXX0gcmVzdWx0c1xuICovXG4gICAgICAgIG9uRnVsZmlsbGVkKFtyZXN1bHRdKSB7XG4gICAgICAgICAgY29uc3QgeyBiYWxhbmNlIH0gPSBkZWNvZGVJY3FSZXN1bHQoUXVlcnlCYWxhbmNlUmVzcG9uc2UyLCByZXN1bHQpO1xuICAgICAgICAgIGlmICghYmFsYW5jZSkgdGhyb3cgdGhyb3dSZWRhY3RlZGBSZXN1bHQgbGFja2VkIGJhbGFuY2Uga2V5OiAke3Jlc3VsdH1gO1xuICAgICAgICAgIHJldHVybiBoYXJkZW4odG9EZW5vbUFtb3VudChiYWxhbmNlKSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZWxlZ2F0aW9uUXVlcnlXYXRjaGVyOiB7XG4gICAgICAgIC8qKlxuICogQHBhcmFtIHtKc29uU2FmZTxSZXNwb25zZVF1ZXJ5PltdfSByZXN1bHRzXG4gKiBAcmV0dXJucyB7Q29zbW9zRGVsZWdhdGlvblJlc3BvbnNlfVxuICovXG4gICAgICAgIG9uRnVsZmlsbGVkKFtyZXN1bHRdKSB7XG4gICAgICAgICAgY29uc3QgeyBkZWxlZ2F0aW9uUmVzcG9uc2UgfSA9IGRlY29kZUljcVJlc3VsdChcbiAgICAgICAgICAgIFF1ZXJ5RGVsZWdhdGlvblJlc3BvbnNlMixcbiAgICAgICAgICAgIHJlc3VsdFxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKCFkZWxlZ2F0aW9uUmVzcG9uc2UpXG4gICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFJlc3VsdCBsYWNrZWQgZGVsZWdhdGlvblJlc3BvbnNlIGtleTogJHtyZXN1bHR9YDtcbiAgICAgICAgICBjb25zdCB7IGNoYWluQWRkcmVzcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICByZXR1cm4gaGFyZGVuKFxuICAgICAgICAgICAgdG9Db3Ntb3NEZWxlZ2F0aW9uUmVzcG9uc2UoY2hhaW5BZGRyZXNzLCBkZWxlZ2F0aW9uUmVzcG9uc2UpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlbGVnYXRpb25zUXVlcnlXYXRjaGVyOiB7XG4gICAgICAgIC8qKlxuICogQHBhcmFtIHtKc29uU2FmZTxSZXNwb25zZVF1ZXJ5PltdfSByZXN1bHRzXG4gKiBAcmV0dXJucyB7Q29zbW9zRGVsZWdhdGlvblJlc3BvbnNlW119XG4gKi9cbiAgICAgICAgb25GdWxmaWxsZWQoW3Jlc3VsdF0pIHtcbiAgICAgICAgICBjb25zdCB7IGRlbGVnYXRpb25SZXNwb25zZXMgfSA9IGRlY29kZUljcVJlc3VsdChcbiAgICAgICAgICAgIFF1ZXJ5RGVsZWdhdG9yRGVsZWdhdGlvbnNSZXNwb25zZTIsXG4gICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmICghZGVsZWdhdGlvblJlc3BvbnNlcylcbiAgICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgUmVzdWx0IGxhY2tlZCBkZWxlZ2F0aW9uUmVzcG9uc2VzIGtleTogJHtyZXN1bHR9YDtcbiAgICAgICAgICBjb25zdCB7IGNoYWluQWRkcmVzcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICByZXR1cm4gaGFyZGVuKFxuICAgICAgICAgICAgZGVsZWdhdGlvblJlc3BvbnNlcy5tYXAoXG4gICAgICAgICAgICAgIChyNikgPT4gdG9Db3Ntb3NEZWxlZ2F0aW9uUmVzcG9uc2UoY2hhaW5BZGRyZXNzLCByNilcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdW5ib25kaW5nRGVsZWdhdGlvblF1ZXJ5V2F0Y2hlcjoge1xuICAgICAgICAvKipcbiAqIEBwYXJhbSB7SnNvblNhZmU8UmVzcG9uc2VRdWVyeT5bXX0gcmVzdWx0c1xuICovXG4gICAgICAgIG9uRnVsZmlsbGVkKFtyZXN1bHRdKSB7XG4gICAgICAgICAgY29uc3QgeyB1bmJvbmQgfSA9IGRlY29kZUljcVJlc3VsdChcbiAgICAgICAgICAgIFF1ZXJ5VW5ib25kaW5nRGVsZWdhdGlvblJlc3BvbnNlMixcbiAgICAgICAgICAgIHJlc3VsdFxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKCF1bmJvbmQpIHRocm93IHRocm93UmVkYWN0ZWRgUmVzdWx0IGxhY2tlZCB1bmJvbmQga2V5OiAke3Jlc3VsdH1gO1xuICAgICAgICAgIHJldHVybiBoYXJkZW4odW5ib25kKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHVuYm9uZGluZ0RlbGVnYXRpb25zUXVlcnlXYXRjaGVyOiB7XG4gICAgICAgIC8qKlxuICogQHBhcmFtIHtKc29uU2FmZTxSZXNwb25zZVF1ZXJ5PltdfSByZXN1bHRzXG4gKi9cbiAgICAgICAgb25GdWxmaWxsZWQoW3Jlc3VsdF0pIHtcbiAgICAgICAgICBjb25zdCB7IHVuYm9uZGluZ1Jlc3BvbnNlcyB9ID0gZGVjb2RlSWNxUmVzdWx0KFxuICAgICAgICAgICAgUXVlcnlEZWxlZ2F0b3JVbmJvbmRpbmdEZWxlZ2F0aW9uc1Jlc3BvbnNlMixcbiAgICAgICAgICAgIHJlc3VsdFxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKCF1bmJvbmRpbmdSZXNwb25zZXMpXG4gICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFJlc3VsdCBsYWNrZWQgdW5ib25kaW5nUmVzcG9uc2VzIGtleTogJHtyZXN1bHR9YDtcbiAgICAgICAgICByZXR1cm4gaGFyZGVuKHVuYm9uZGluZ1Jlc3BvbnNlcyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZWRlbGVnYXRpb25RdWVyeVdhdGNoZXI6IHtcbiAgICAgICAgLyoqXG4gKiBAcGFyYW0ge0pzb25TYWZlPFJlc3BvbnNlUXVlcnk+W119IHJlc3VsdHNcbiAqL1xuICAgICAgICBvbkZ1bGZpbGxlZChbcmVzdWx0XSkge1xuICAgICAgICAgIGNvbnN0IHsgcmVkZWxlZ2F0aW9uUmVzcG9uc2VzIH0gPSBkZWNvZGVJY3FSZXN1bHQoXG4gICAgICAgICAgICBRdWVyeVJlZGVsZWdhdGlvbnNSZXNwb25zZTIsXG4gICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmICghcmVkZWxlZ2F0aW9uUmVzcG9uc2VzKVxuICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBSZXN1bHQgbGFja2VkIHJlZGVsZWdhdGlvblJlc3BvbnNlcyBrZXk6ICR7cmVzdWx0fWA7XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbihyZWRlbGVnYXRpb25SZXNwb25zZXMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVkZWxlZ2F0aW9uc1F1ZXJ5V2F0Y2hlcjoge1xuICAgICAgICAvKipcbiAqIEBwYXJhbSB7SnNvblNhZmU8UmVzcG9uc2VRdWVyeT5bXX0gcmVzdWx0c1xuICovXG4gICAgICAgIG9uRnVsZmlsbGVkKFtyZXN1bHRdKSB7XG4gICAgICAgICAgY29uc3QgeyByZWRlbGVnYXRpb25SZXNwb25zZXMgfSA9IGRlY29kZUljcVJlc3VsdChcbiAgICAgICAgICAgIFF1ZXJ5UmVkZWxlZ2F0aW9uc1Jlc3BvbnNlMixcbiAgICAgICAgICAgIHJlc3VsdFxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKCFyZWRlbGVnYXRpb25SZXNwb25zZXMpXG4gICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFJlc3VsdCBsYWNrZWQgcmVkZWxlZ2F0aW9uUmVzcG9uc2VzIGtleTogJHtyZXN1bHR9YDtcbiAgICAgICAgICByZXR1cm4gaGFyZGVuKHJlZGVsZWdhdGlvblJlc3BvbnNlcyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZXdhcmRRdWVyeVdhdGNoZXI6IHtcbiAgICAgICAgLyoqXG4gKiBAcGFyYW0ge0pzb25TYWZlPFJlc3BvbnNlUXVlcnk+W119IHJlc3VsdHNcbiAqL1xuICAgICAgICBvbkZ1bGZpbGxlZChbcmVzdWx0XSkge1xuICAgICAgICAgIGNvbnN0IHsgcmV3YXJkcyB9ID0gZGVjb2RlSWNxUmVzdWx0KFxuICAgICAgICAgICAgUXVlcnlEZWxlZ2F0aW9uUmV3YXJkc1Jlc3BvbnNlMixcbiAgICAgICAgICAgIHJlc3VsdFxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKCFyZXdhcmRzKSB0aHJvdyB0aHJvd1JlZGFjdGVkYFJlc3VsdCBsYWNrZWQgcmV3YXJkcyBrZXk6ICR7cmVzdWx0fWA7XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbihyZXdhcmRzLm1hcCh0b1RydW5jYXRlZERlbm9tQW1vdW50KSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZXdhcmRzUXVlcnlXYXRjaGVyOiB7XG4gICAgICAgIC8qKlxuICogQHBhcmFtIHtKc29uU2FmZTxSZXNwb25zZVF1ZXJ5PltdfSByZXN1bHRzXG4gKiBAcmV0dXJucyB7Q29zbW9zUmV3YXJkc1Jlc3BvbnNlfVxuICovXG4gICAgICAgIG9uRnVsZmlsbGVkKFtyZXN1bHRdKSB7XG4gICAgICAgICAgY29uc3QgeyByZXdhcmRzLCB0b3RhbCB9ID0gZGVjb2RlSWNxUmVzdWx0KFxuICAgICAgICAgICAgUXVlcnlEZWxlZ2F0aW9uVG90YWxSZXdhcmRzUmVzcG9uc2UyLFxuICAgICAgICAgICAgcmVzdWx0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoIXJld2FyZHMgfHwgIXRvdGFsKVxuICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBSZXN1bHQgbGFja2VkIHJld2FyZHMgb3IgdG90YWwga2V5OiAke3Jlc3VsdH1gO1xuICAgICAgICAgIGNvbnN0IHsgY2hhaW5BZGRyZXNzIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIHJldHVybiBoYXJkZW4oe1xuICAgICAgICAgICAgcmV3YXJkczogcmV3YXJkcy5tYXAoKHJld2FyZCkgPT4gKHtcbiAgICAgICAgICAgICAgdmFsaWRhdG9yOiB0b0Nvc21vc1ZhbGlkYXRvckFkZHJlc3MocmV3YXJkLCBjaGFpbkFkZHJlc3MuY2hhaW5JZCksXG4gICAgICAgICAgICAgIHJld2FyZDogcmV3YXJkLnJld2FyZC5tYXAodG9UcnVuY2F0ZWREZW5vbUFtb3VudClcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIHRvdGFsOiB0b3RhbC5tYXAodG9UcnVuY2F0ZWREZW5vbUFtb3VudClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGFsbEJhbGFuY2VzUXVlcnlXYXRjaGVyOiB7XG4gICAgICAgIC8qKlxuICogQHBhcmFtIHtKc29uU2FmZTxSZXNwb25zZVF1ZXJ5PltdfSByZXN1bHRzXG4gKi9cbiAgICAgICAgb25GdWxmaWxsZWQoW3Jlc3VsdF0pIHtcbiAgICAgICAgICBjb25zdCB7IGJhbGFuY2VzIH0gPSBkZWNvZGVJY3FSZXN1bHQoXG4gICAgICAgICAgICBRdWVyeUFsbEJhbGFuY2VzUmVzcG9uc2UyLFxuICAgICAgICAgICAgcmVzdWx0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoIWJhbGFuY2VzKSB0aHJvdyB0aHJvd1JlZGFjdGVkYFJlc3VsdCBsYWNrZWQgYmFsYW5jZXMga2V5OiAke3F1b3RlKHJlc3VsdCl9YDtcbiAgICAgICAgICByZXR1cm4gaGFyZGVuKGJhbGFuY2VzLm1hcCgoY29pbikgPT4gdG9EZW5vbUFtb3VudChjb2luKSkpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdW5kZWxlZ2F0ZVdhdGNoZXI6IHtcbiAgICAgICAgLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVzdWx0XG4gKi9cbiAgICAgICAgb25GdWxmaWxsZWQocmVzdWx0KSB7XG4gICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB0cnlEZWNvZGVSZXNwb25zZShcbiAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgIE1zZ1VuZGVsZWdhdGVSZXNwb25zZTIuZnJvbVByb3RvTXNnXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0cmFjZTMoXCJ1bmRlbGVnYXRlIHJlc3BvbnNlXCIsIHJlc3BvbnNlKTtcbiAgICAgICAgICBjb25zdCB7IGNvbXBsZXRpb25UaW1lIH0gPSByZXNwb25zZTtcbiAgICAgICAgICBjb21wbGV0aW9uVGltZSB8fCB0aHJvd1JlZGFjdGVkYE5vIGNvbXBsZXRpb24gdGltZSByZXN1bHQgJHtyZXN1bHR9YDtcbiAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICAvKiBpZ25vcmUgbmFub3NlY29uZHMgYW5kIGp1c3QgdXNlIHNlY29uZHMgZnJvbSBUaW1lc3RhbXAqL1xuICAgICAgICAgICAgRSh0aGlzLnN0YXRlLnRpbWVyKS53YWtlQXQoY29tcGxldGlvblRpbWUuc2Vjb25kcyArIG1heENsb2NrU2tldylcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLyoqXG4gKiB0YWtlcyBhbiBhcnJheSBvZiByZXN1bHRzIChmcm9tIGBleGVjdXRlRW5jb2RlZFR4YCkgYW5kIHJldHVybnMgdm9pZFxuICogc2luY2Ugd2UgYXJlIG5vdCBpbnRlcmVzdGVkIGluIHRoZSByZXN1bHRcbiAqL1xuICAgICAgcmV0dXJuVm9pZFdhdGNoZXI6IHtcbiAgICAgICAgLyoqIEBwYXJhbSB7c3RyaW5nIHwgUmVjb3JkPHN0cmluZywgdW5rbm93bj59IHJlc3VsdCAqL1xuICAgICAgICBvbkZ1bGZpbGxlZChyZXN1bHQpIHtcbiAgICAgICAgICB0cmFjZTMoXCJSZXN1bHRcIiwgcmVzdWx0KTtcbiAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgd2l0aGRyYXdSZXdhcmRXYXRjaGVyOiB7XG4gICAgICAgIC8qKiBAcGFyYW0ge3N0cmluZ30gcmVzdWx0ICovXG4gICAgICAgIG9uRnVsZmlsbGVkKHJlc3VsdCkge1xuICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gdHJ5RGVjb2RlUmVzcG9uc2UoXG4gICAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgICBNc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZFJlc3BvbnNlMi5mcm9tUHJvdG9Nc2dcbiAgICAgICAgICApO1xuICAgICAgICAgIHRyYWNlMyhcIndpdGhkcmF3UmV3YXJkIHJlc3BvbnNlXCIsIHJlc3BvbnNlKTtcbiAgICAgICAgICBjb25zdCB7IGFtb3VudDogY29pbnMgfSA9IHJlc3BvbnNlO1xuICAgICAgICAgIHJldHVybiBoYXJkZW4oY29pbnMubWFwKHRvRGVub21BbW91bnQpKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRyYW5zZmVyV2F0Y2hlcjoge1xuICAgICAgICAvKipcbiAqIEBwYXJhbSB7W1xuICogICB7IHRyYW5zZmVyQ2hhbm5lbDogSUJDQ29ubmVjdGlvbkluZm9bJ3RyYW5zZmVyQ2hhbm5lbCddIH0sXG4gKiAgIGJpZ2ludCxcbiAqIF19IHJlc3VsdHNcbiAqIEBwYXJhbSB7e1xuICogICBkZXN0aW5hdGlvbjogQ29zbW9zQ2hhaW5BZGRyZXNzO1xuICogICBvcHRzPzogSUJDTXNnVHJhbnNmZXJPcHRpb25zO1xuICogICB0b2tlbjogQ29pbjtcbiAqIH19IGN0eFxuICovXG4gICAgICAgIG9uRnVsZmlsbGVkKFt7IHRyYW5zZmVyQ2hhbm5lbCB9LCB0aW1lb3V0VGltZXN0YW1wXSwgeyBvcHRzLCB0b2tlbiwgZGVzdGluYXRpb24gfSkge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBFKHRoaXMuZmFjZXRzLmhlbHBlci5vd25lZCgpKS5leGVjdXRlRW5jb2RlZFR4KFtcbiAgICAgICAgICAgIEFueTMudG9KU09OKFxuICAgICAgICAgICAgICBNc2dUcmFuc2ZlcjIudG9Qcm90b01zZyh7XG4gICAgICAgICAgICAgICAgc291cmNlUG9ydDogdHJhbnNmZXJDaGFubmVsLnBvcnRJZCxcbiAgICAgICAgICAgICAgICBzb3VyY2VDaGFubmVsOiB0cmFuc2ZlckNoYW5uZWwuY2hhbm5lbElkLFxuICAgICAgICAgICAgICAgIHRva2VuLFxuICAgICAgICAgICAgICAgIHNlbmRlcjogdGhpcy5zdGF0ZS5jaGFpbkFkZHJlc3MudmFsdWUsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZXI6IGRlc3RpbmF0aW9uLnZhbHVlLFxuICAgICAgICAgICAgICAgIHRpbWVvdXRIZWlnaHQ6IG9wdHM/LnRpbWVvdXRIZWlnaHQsXG4gICAgICAgICAgICAgICAgdGltZW91dFRpbWVzdGFtcCxcbiAgICAgICAgICAgICAgICBtZW1vOiBvcHRzPy5tZW1vXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG4gICAgICAgICAgcmV0dXJuIHdhdGNoKHJlc3VsdHMsIHRoaXMuZmFjZXRzLnJldHVyblZvaWRXYXRjaGVyKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGludml0YXRpb25NYWtlcnM6IHtcbiAgICAgICAgLyoqXG4gKiBAcGFyYW0ge0Nvc21vc1ZhbGlkYXRvckFkZHJlc3N9IHZhbGlkYXRvclxuICogQHBhcmFtIHtBbW91bnRBcmd9IGFtb3VudFxuICovXG4gICAgICAgIERlbGVnYXRlKHZhbGlkYXRvciwgYW1vdW50KSB7XG4gICAgICAgICAgdHJhY2UzKFwiRGVsZWdhdGVcIiwgdmFsaWRhdG9yLCBhbW91bnQpO1xuICAgICAgICAgIHJldHVybiB6Y2YubWFrZUludml0YXRpb24oKHNlYXQpID0+IHtcbiAgICAgICAgICAgIHNlYXQuZXhpdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKHRoaXMuZmFjZXRzLmhvbGRlci5kZWxlZ2F0ZSh2YWxpZGF0b3IsIGFtb3VudCkpO1xuICAgICAgICAgIH0sIFwiRGVsZWdhdGVcIik7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICogQHBhcmFtIHtDb3Ntb3NWYWxpZGF0b3JBZGRyZXNzfSBzcmNWYWxpZGF0b3JcbiAqIEBwYXJhbSB7Q29zbW9zVmFsaWRhdG9yQWRkcmVzc30gZHN0VmFsaWRhdG9yXG4gKiBAcGFyYW0ge0Ftb3VudEFyZ30gYW1vdW50XG4gKi9cbiAgICAgICAgUmVkZWxlZ2F0ZShzcmNWYWxpZGF0b3IsIGRzdFZhbGlkYXRvciwgYW1vdW50KSB7XG4gICAgICAgICAgdHJhY2UzKFwiUmVkZWxlZ2F0ZVwiLCBzcmNWYWxpZGF0b3IsIGRzdFZhbGlkYXRvciwgYW1vdW50KTtcbiAgICAgICAgICByZXR1cm4gemNmLm1ha2VJbnZpdGF0aW9uKChzZWF0KSA9PiB7XG4gICAgICAgICAgICBzZWF0LmV4aXQoKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICAgICAgdGhpcy5mYWNldHMuaG9sZGVyLnJlZGVsZWdhdGUoc3JjVmFsaWRhdG9yLCBkc3RWYWxpZGF0b3IsIGFtb3VudClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSwgXCJSZWRlbGVnYXRlXCIpO1xuICAgICAgICB9LFxuICAgICAgICAvKiogQHBhcmFtIHtDb3Ntb3NWYWxpZGF0b3JBZGRyZXNzfSB2YWxpZGF0b3IgKi9cbiAgICAgICAgV2l0aGRyYXdSZXdhcmQodmFsaWRhdG9yKSB7XG4gICAgICAgICAgdHJhY2UzKFwiV2l0aGRyYXdSZXdhcmRcIiwgdmFsaWRhdG9yKTtcbiAgICAgICAgICByZXR1cm4gemNmLm1ha2VJbnZpdGF0aW9uKChzZWF0KSA9PiB7XG4gICAgICAgICAgICBzZWF0LmV4aXQoKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaCh0aGlzLmZhY2V0cy5ob2xkZXIud2l0aGRyYXdSZXdhcmQodmFsaWRhdG9yKSk7XG4gICAgICAgICAgfSwgXCJXaXRoZHJhd1Jld2FyZFwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gKiBAcGFyYW0ge3tcbiAqICAgYW1vdW50OiBBbW91bnRBcmc7XG4gKiAgIHZhbGlkYXRvcjogQ29zbW9zVmFsaWRhdG9yQWRkcmVzcztcbiAqIH1bXX0gZGVsZWdhdGlvbnNcbiAqL1xuICAgICAgICBVbmRlbGVnYXRlKGRlbGVnYXRpb25zKSB7XG4gICAgICAgICAgdHJhY2UzKFwiVW5kZWxlZ2F0ZVwiLCBkZWxlZ2F0aW9ucyk7XG4gICAgICAgICAgcmV0dXJuIHpjZi5tYWtlSW52aXRhdGlvbigoc2VhdCkgPT4ge1xuICAgICAgICAgICAgc2VhdC5leGl0KCk7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2godGhpcy5mYWNldHMuaG9sZGVyLnVuZGVsZWdhdGUoZGVsZWdhdGlvbnMpKTtcbiAgICAgICAgICB9LCBcIlVuZGVsZWdhdGVcIik7XG4gICAgICAgIH0sXG4gICAgICAgIERlYWN0aXZhdGVBY2NvdW50KCkge1xuICAgICAgICAgIHJldHVybiB6Y2YubWFrZUludml0YXRpb24oKHNlYXQpID0+IHtcbiAgICAgICAgICAgIHNlYXQuZXhpdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKHRoaXMuZmFjZXRzLmhvbGRlci5kZWFjdGl2YXRlKCkpO1xuICAgICAgICAgIH0sIFwiRGVhY3RpdmF0ZUFjY291bnRcIik7XG4gICAgICAgIH0sXG4gICAgICAgIFJlYWN0aXZhdGVBY2NvdW50KCkge1xuICAgICAgICAgIHJldHVybiB6Y2YubWFrZUludml0YXRpb24oKHNlYXQpID0+IHtcbiAgICAgICAgICAgIHNlYXQuZXhpdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKHRoaXMuZmFjZXRzLmhvbGRlci5yZWFjdGl2YXRlKCkpO1xuICAgICAgICAgIH0sIFwiUmVhY3RpdmF0ZUFjY291bnRcIik7XG4gICAgICAgIH0sXG4gICAgICAgIFNlbmQoKSB7XG4gICAgICAgICAgY29uc3Qgb2ZmZXJIYW5kbGVyID0gKHNlYXQsIHsgdG9BY2NvdW50LCBhbW91bnQgfSkgPT4ge1xuICAgICAgICAgICAgc2VhdC5leGl0KCk7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2godGhpcy5mYWNldHMuaG9sZGVyLnNlbmQodG9BY2NvdW50LCBhbW91bnQpKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiB6Y2YubWFrZUludml0YXRpb24ob2ZmZXJIYW5kbGVyLCBcIlNlbmRcIik7XG4gICAgICAgIH0sXG4gICAgICAgIFNlbmRBbGwoKSB7XG4gICAgICAgICAgY29uc3Qgb2ZmZXJIYW5kbGVyID0gKHNlYXQsIHsgdG9BY2NvdW50LCBhbW91bnRzIH0pID0+IHtcbiAgICAgICAgICAgIHNlYXQuZXhpdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKHRoaXMuZmFjZXRzLmhvbGRlci5zZW5kQWxsKHRvQWNjb3VudCwgYW1vdW50cykpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIHpjZi5tYWtlSW52aXRhdGlvbihvZmZlckhhbmRsZXIsIFwiU2VuZEFsbFwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gKiBTdGFydGluZyBhIHRyYW5zZmVyIHJldm9rZXMgdGhlIGFjY291bnQgaG9sZGVyLiBUaGUgYXNzb2NpYXRlZFxuICogdXBkYXRlciB3aWxsIGdldCBhIHNwZWNpYWwgbm90aWZpY2F0aW9uIHRoYXQgdGhlIGFjY291bnQgaXMgYmVpbmdcbiAqIHRyYW5zZmVycmVkLlxuICovXG4gICAgICAgIFRyYW5zZmVyQWNjb3VudCgpIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcihcIm5vdCB5ZXQgaW1wbGVtZW50ZWRcIik7XG4gICAgICAgIH0sXG4gICAgICAgIFRyYW5zZmVyKCkge1xuICAgICAgICAgIGNvbnN0IG9mZmVySGFuZGxlciA9IChzZWF0LCB7IGFtb3VudCwgZGVzdGluYXRpb24sIG9wdHMgfSkgPT4ge1xuICAgICAgICAgICAgc2VhdC5leGl0KCk7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICAgIHRoaXMuZmFjZXRzLmhvbGRlci50cmFuc2ZlcihkZXN0aW5hdGlvbiwgYW1vdW50LCBvcHRzKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiB6Y2YubWFrZUludml0YXRpb24ob2ZmZXJIYW5kbGVyLCBcIlRyYW5zZmVyXCIpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaG9sZGVyOiB7XG4gICAgICAgIC8qKiBAdHlwZSB7SG9zdE9mPE9yY2hlc3RyYXRpb25BY2NvdW50Q29tbW9uWydhc0NvbnRpbnVpbmdPZmZlciddPn0gKi9cbiAgICAgICAgYXNDb250aW51aW5nT2ZmZXIoKSB7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IG51bGw7XG4gICAgICAgICAgICBjb25zdCB7IGhvbGRlciwgaW52aXRhdGlvbk1ha2VyczogaW0gfSA9IHRoaXMuZmFjZXRzO1xuICAgICAgICAgICAgY29uc3QgaW52aXRhdGlvbk1ha2VycyA9IChcbiAgICAgICAgICAgICAgLyoqIEB0eXBlIHtJbnZpdGF0aW9uTWFrZXJzfSAqL1xuICAgICAgICAgICAgICAvKiogQHR5cGUge3Vua25vd259ICovXG4gICAgICAgICAgICAgIGltXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIGhhcmRlbih7XG4gICAgICAgICAgICAgIC8qIGdldFB1YmxpY1RvcGljcyByZXR1cm5zIGEgdm93LCBmb3IgbWVtYnJhbmUgY29tcGF0aWJpbGl0eS4qL1xuICAgICAgICAgICAgICAvKiBpdCdzIHNhZmUgdG8gdW53cmFwIHRvIGEgcHJvbWlzZSBhbmQgZ2V0IHRoZSByZXN1bHQgYXMgd2UqL1xuICAgICAgICAgICAgICAvKiBleHBlY3QgdGhpcyBjb21wbGV0ZSBpbiB0aGUgc2FtZSBydW4qL1xuICAgICAgICAgICAgICBwdWJsaWNTdWJzY3JpYmVyczogYXdhaXQgd2hlbihob2xkZXIuZ2V0UHVibGljVG9waWNzKCkpLFxuICAgICAgICAgICAgICBpbnZpdGF0aW9uTWFrZXJzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIEB0eXBlIHtIb3N0T2Y8T3JjaGVzdHJhdGlvbkFjY291bnRDb21tb25bJ2dldFB1YmxpY1RvcGljcyddPn0gKi9cbiAgICAgICAgZ2V0UHVibGljVG9waWNzKCkge1xuICAgICAgICAgIHJldHVybiBhc1Zvdyhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBhd2FpdCBudWxsO1xuICAgICAgICAgICAgY29uc3QgeyB0b3BpY0tpdCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIGlmICghdG9waWNLaXQpIHRocm93IHRocm93UmVkYWN0ZWRgTm8gdG9waWNLaXQ7IHN0b3JhZ2VOb2RlIG5vdCBwcm92aWRlZGA7XG4gICAgICAgICAgICByZXR1cm4gaGFyZGVuKHtcbiAgICAgICAgICAgICAgYWNjb3VudDoge1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBQVUJMSUNfVE9QSUNTLmFjY291bnRbMF0sXG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlcjogdG9waWNLaXQuc3Vic2NyaWJlcixcbiAgICAgICAgICAgICAgICBzdG9yYWdlUGF0aDogYXdhaXQgdG9waWNLaXQucmVjb3JkZXIuZ2V0U3RvcmFnZVBhdGgoKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIEB0eXBlIHtIb3N0T2Y8T3JjaGVzdHJhdGlvbkFjY291bnRDb21tb25bJ2dldEFkZHJlc3MnXT59ICovXG4gICAgICAgIGdldEFkZHJlc3MoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuY2hhaW5BZGRyZXNzO1xuICAgICAgICB9LFxuICAgICAgICAvKiogQHR5cGUge0hvc3RPZjxTdGFraW5nQWNjb3VudEFjdGlvbnNbJ2RlbGVnYXRlJ10+fSAqL1xuICAgICAgICBkZWxlZ2F0ZSh2YWxpZGF0b3IsIGFtb3VudCkge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICB0cmFjZTMoXCJkZWxlZ2F0ZVwiLCB2YWxpZGF0b3IsIGFtb3VudCk7XG4gICAgICAgICAgICBjb25zdCB7IGhlbHBlciB9ID0gdGhpcy5mYWNldHM7XG4gICAgICAgICAgICBjb25zdCB7IGNoYWluQWRkcmVzcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIGNvbnN0IGFtb3VudEFzQ29pbiA9IGhlbHBlci5hbW91bnRUb0NvaW4oYW1vdW50KTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBFKGhlbHBlci5vd25lZCgpKS5leGVjdXRlRW5jb2RlZFR4KFtcbiAgICAgICAgICAgICAgQW55My50b0pTT04oXG4gICAgICAgICAgICAgICAgTXNnRGVsZWdhdGUyLnRvUHJvdG9Nc2coe1xuICAgICAgICAgICAgICAgICAgZGVsZWdhdG9yQWRkcmVzczogY2hhaW5BZGRyZXNzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yQWRkcmVzczogdmFsaWRhdG9yLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgYW1vdW50OiBhbW91bnRBc0NvaW5cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaChyZXN1bHRzLCB0aGlzLmZhY2V0cy5yZXR1cm5Wb2lkV2F0Y2hlcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBAdHlwZSB7SG9zdE9mPFN0YWtpbmdBY2NvdW50QWN0aW9uc1sncmVkZWxlZ2F0ZSddPn0gKi9cbiAgICAgICAgcmVkZWxlZ2F0ZShzcmNWYWxpZGF0b3IsIGRzdFZhbGlkYXRvciwgYW1vdW50KSB7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICAgIHRyYWNlMyhcInJlZGVsZWdhdGVcIiwgc3JjVmFsaWRhdG9yLCBkc3RWYWxpZGF0b3IsIGFtb3VudCk7XG4gICAgICAgICAgICBjb25zdCB7IGhlbHBlciB9ID0gdGhpcy5mYWNldHM7XG4gICAgICAgICAgICBjb25zdCB7IGNoYWluQWRkcmVzcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBFKGhlbHBlci5vd25lZCgpKS5leGVjdXRlRW5jb2RlZFR4KFtcbiAgICAgICAgICAgICAgQW55My50b0pTT04oXG4gICAgICAgICAgICAgICAgTXNnQmVnaW5SZWRlbGVnYXRlMi50b1Byb3RvTXNnKHtcbiAgICAgICAgICAgICAgICAgIGRlbGVnYXRvckFkZHJlc3M6IGNoYWluQWRkcmVzcy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgIHZhbGlkYXRvclNyY0FkZHJlc3M6IHNyY1ZhbGlkYXRvci52YWx1ZSxcbiAgICAgICAgICAgICAgICAgIHZhbGlkYXRvckRzdEFkZHJlc3M6IGRzdFZhbGlkYXRvci52YWx1ZSxcbiAgICAgICAgICAgICAgICAgIGFtb3VudDogaGVscGVyLmFtb3VudFRvQ29pbihhbW91bnQpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICAgIHJlc3VsdHMsXG4gICAgICAgICAgICAgIC8qIE5PVEU6IHJlc3BvbnNlLCBpbmNsdWRpbmcgY29tcGxldGlvblRpbWUsIGlzIGN1cnJlbnRseSBkaXNjYXJkZWQuKi9cbiAgICAgICAgICAgICAgdGhpcy5mYWNldHMucmV0dXJuVm9pZFdhdGNoZXJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBAdHlwZSB7SG9zdE9mPFN0YWtpbmdBY2NvdW50QWN0aW9uc1snd2l0aGRyYXdSZXdhcmQnXT59ICovXG4gICAgICAgIHdpdGhkcmF3UmV3YXJkKHZhbGlkYXRvcikge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICB0cmFjZTMoXCJ3aXRoZHJhd1Jld2FyZFwiLCB2YWxpZGF0b3IpO1xuICAgICAgICAgICAgY29uc3QgeyBoZWxwZXIgfSA9IHRoaXMuZmFjZXRzO1xuICAgICAgICAgICAgY29uc3QgeyBjaGFpbkFkZHJlc3MgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBNc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZDIudG9Qcm90b01zZyh7XG4gICAgICAgICAgICAgIGRlbGVnYXRvckFkZHJlc3M6IGNoYWluQWRkcmVzcy52YWx1ZSxcbiAgICAgICAgICAgICAgdmFsaWRhdG9yQWRkcmVzczogdmFsaWRhdG9yLnZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGFjY291bnQgPSBoZWxwZXIub3duZWQoKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBFKGFjY291bnQpLmV4ZWN1dGVFbmNvZGVkVHgoW0FueTMudG9KU09OKG1zZyldKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaChyZXN1bHRzLCB0aGlzLmZhY2V0cy53aXRoZHJhd1Jld2FyZFdhdGNoZXIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKiogQHR5cGUge0hvc3RPZjxPcmNoZXN0cmF0aW9uQWNjb3VudENvbW1vblsnZ2V0QmFsYW5jZSddPn0gKi9cbiAgICAgICAgZ2V0QmFsYW5jZShkZW5vbSkge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGNoYWluQWRkcmVzcywgaWNxQ29ubmVjdGlvbiB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIGlmICghaWNxQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFF1ZXJpZXMgbm90IGF2YWlsYWJsZSBmb3IgY2hhaW4gJHtxdW90ZShjaGFpbkFkZHJlc3MuY2hhaW5JZCl9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBFKGljcUNvbm5lY3Rpb24pLnF1ZXJ5KFtcbiAgICAgICAgICAgICAgdG9SZXF1ZXN0UXVlcnlKc29uKFxuICAgICAgICAgICAgICAgIFF1ZXJ5QmFsYW5jZVJlcXVlc3QyLnRvUHJvdG9Nc2coe1xuICAgICAgICAgICAgICAgICAgYWRkcmVzczogY2hhaW5BZGRyZXNzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgZGVub206IGNvZXJjZURlbm9tKGNoYWluSHViLCBkZW5vbSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaChyZXN1bHRzLCB0aGlzLmZhY2V0cy5iYWxhbmNlUXVlcnlXYXRjaGVyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIEB0eXBlIHtIb3N0T2Y8T3JjaGVzdHJhdGlvbkFjY291bnRDb21tb25bJ2dldEJhbGFuY2VzJ10+fSAqL1xuICAgICAgICBnZXRCYWxhbmNlcygpIHtcbiAgICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBjaGFpbkFkZHJlc3MsIGljcUNvbm5lY3Rpb24gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICBpZiAoIWljcUNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBRdWVyaWVzIG5vdCBhdmFpbGFibGUgZm9yIGNoYWluICR7cXVvdGUoY2hhaW5BZGRyZXNzLmNoYWluSWQpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXN1bHRzID0gRShpY3FDb25uZWN0aW9uKS5xdWVyeShbXG4gICAgICAgICAgICAgIHRvUmVxdWVzdFF1ZXJ5SnNvbihcbiAgICAgICAgICAgICAgICBRdWVyeUFsbEJhbGFuY2VzUmVxdWVzdDIudG9Qcm90b01zZyh7XG4gICAgICAgICAgICAgICAgICBhZGRyZXNzOiBjaGFpbkFkZHJlc3MudmFsdWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaChyZXN1bHRzLCB0aGlzLmZhY2V0cy5hbGxCYWxhbmNlc1F1ZXJ5V2F0Y2hlcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBAdHlwZSB7SG9zdE9mPE9yY2hlc3RyYXRpb25BY2NvdW50Q29tbW9uWydzZW5kJ10+fSAqL1xuICAgICAgICBzZW5kKHRvQWNjb3VudCwgYW1vdW50KSB7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICAgIHRyYWNlMyhcInNlbmRcIiwgdG9BY2NvdW50LCBhbW91bnQpO1xuICAgICAgICAgICAgY29uc3QgY29zbW9zRGVzdCA9IGNoYWluSHViLmNvZXJjZUNvc21vc0FkZHJlc3ModG9BY2NvdW50KTtcbiAgICAgICAgICAgIGNvbnN0IHsgY2hhaW5BZGRyZXNzIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgICAgY29zbW9zRGVzdC5jaGFpbklkID09PSBjaGFpbkFkZHJlc3MuY2hhaW5JZCB8fCB0aHJvd1JlZGFjdGVkYGJhbmsvc2VuZCBjYW5ub3Qgc2VuZCB0byBhIGRpZmZlcmVudCBjaGFpbiAke3F1b3RlKGNvc21vc0Rlc3QuY2hhaW5JZCl9YDtcbiAgICAgICAgICAgIGNvbnN0IHsgaGVscGVyIH0gPSB0aGlzLmZhY2V0cztcbiAgICAgICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICAgICAgRShoZWxwZXIub3duZWQoKSkuZXhlY3V0ZUVuY29kZWRUeChbXG4gICAgICAgICAgICAgICAgQW55My50b0pTT04oXG4gICAgICAgICAgICAgICAgICBNc2dTZW5kMi50b1Byb3RvTXNnKHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbUFkZHJlc3M6IGNoYWluQWRkcmVzcy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgdG9BZGRyZXNzOiBjb3Ntb3NEZXN0LnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IFtoZWxwZXIuYW1vdW50VG9Db2luKGFtb3VudCldXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIHRoaXMuZmFjZXRzLnJldHVyblZvaWRXYXRjaGVyXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKiogQHR5cGUge0hvc3RPZjxPcmNoZXN0cmF0aW9uQWNjb3VudENvbW1vblsnc2VuZEFsbCddPn0gKi9cbiAgICAgICAgc2VuZEFsbCh0b0FjY291bnQsIGFtb3VudHMpIHtcbiAgICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgICAgdHJhY2UzKFwic2VuZEFsbFwiLCB0b0FjY291bnQsIGFtb3VudHMpO1xuICAgICAgICAgICAgY29uc3QgeyBoZWxwZXIgfSA9IHRoaXMuZmFjZXRzO1xuICAgICAgICAgICAgY29uc3QgeyBjaGFpbkFkZHJlc3MgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICAgIEUoaGVscGVyLm93bmVkKCkpLmV4ZWN1dGVFbmNvZGVkVHgoW1xuICAgICAgICAgICAgICAgIEFueTMudG9KU09OKFxuICAgICAgICAgICAgICAgICAgTXNnU2VuZDIudG9Qcm90b01zZyh7XG4gICAgICAgICAgICAgICAgICAgIGZyb21BZGRyZXNzOiBjaGFpbkFkZHJlc3MudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHRvQWRkcmVzczogdG9BY2NvdW50LnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGFtb3VudHMubWFwKCh4KSA9PiBoZWxwZXIuYW1vdW50VG9Db2luKHgpKVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICB0aGlzLmZhY2V0cy5yZXR1cm5Wb2lkV2F0Y2hlclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIEB0eXBlIHtIb3N0T2Y8T3JjaGVzdHJhdGlvbkFjY291bnRDb21tb25bJ3RyYW5zZmVyJ10+fSAqL1xuICAgICAgICB0cmFuc2ZlcihkZXN0aW5hdGlvbiwgYW1vdW50LCBvcHRzKSB7XG4gICAgICAgICAgdHJhY2UzKFwidHJhbnNmZXJcIiwgZGVzdGluYXRpb24sIGFtb3VudCwgb3B0cyk7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvc21vc0Rlc3QgPSBjaGFpbkh1Yi5jb2VyY2VDb3Ntb3NBZGRyZXNzKGRlc3RpbmF0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IHsgaGVscGVyIH0gPSB0aGlzLmZhY2V0cztcbiAgICAgICAgICAgIGNvbnN0IHRva2VuID0gaGVscGVyLmFtb3VudFRvQ29pbihhbW91bnQpO1xuICAgICAgICAgICAgY29uc3QgY29ubmVjdGlvbkluZm9WID0gd2F0Y2goXG4gICAgICAgICAgICAgIGNoYWluSHViLmdldENvbm5lY3Rpb25JbmZvKFxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuY2hhaW5BZGRyZXNzLmNoYWluSWQsXG4gICAgICAgICAgICAgICAgY29zbW9zRGVzdC5jaGFpbklkXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICAgIGFsbFZvd3MoW1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25JbmZvVixcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXBIZWxwZXIudm93T3JWYWx1ZUZyb21PcHRzKG9wdHMpXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICB0aGlzLmZhY2V0cy50cmFuc2ZlcldhdGNoZXIsXG4gICAgICAgICAgICAgIHsgb3B0cywgdG9rZW4sIGRlc3RpbmF0aW9uOiBjb3Ntb3NEZXN0IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBAdHlwZSB7SG9zdE9mPE9yY2hlc3RyYXRpb25BY2NvdW50Q29tbW9uWyd0cmFuc2ZlclN0ZXBzJ10+fSAqL1xuICAgICAgICB0cmFuc2ZlclN0ZXBzKGFtb3VudCwgbXNnKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJ0cmFuc2ZlclN0ZXBzIGdvdFwiLCBhbW91bnQsIG1zZyk7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHRocm93UmVkYWN0ZWRgbm90IHlldCBpbXBsZW1lbnRlZGApO1xuICAgICAgICB9LFxuICAgICAgICAvKiogQHR5cGUge0hvc3RPZjxTdGFraW5nQWNjb3VudEFjdGlvbnNbJ3dpdGhkcmF3UmV3YXJkcyddPn0gKi9cbiAgICAgICAgd2l0aGRyYXdSZXdhcmRzKCkge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB0aHJvd1JlZGFjdGVkYE5vdCBJbXBsZW1lbnRlZC4gVHJ5IHVzaW5nIHdpdGhkcmF3UmV3YXJkLmApO1xuICAgICAgICB9LFxuICAgICAgICAvKiogQHR5cGUge0hvc3RPZjxTdGFraW5nQWNjb3VudEFjdGlvbnNbJ3VuZGVsZWdhdGUnXT59ICovXG4gICAgICAgIHVuZGVsZWdhdGUoZGVsZWdhdGlvbnMpIHtcbiAgICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgICAgdHJhY2UzKFwidW5kZWxlZ2F0ZVwiLCBkZWxlZ2F0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCB7IGhlbHBlciB9ID0gdGhpcy5mYWNldHM7XG4gICAgICAgICAgICBjb25zdCB7IGNoYWluQWRkcmVzcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIGRlbGVnYXRpb25zLmV2ZXJ5KFxuICAgICAgICAgICAgICAoZCkgPT4gZC5kZWxlZ2F0b3IgPyBkLmRlbGVnYXRvci52YWx1ZSA9PT0gY2hhaW5BZGRyZXNzLnZhbHVlIDogdHJ1ZVxuICAgICAgICAgICAgKSB8fCB0aHJvd1JlZGFjdGVkYFNvbWUgZGVsZWdhdGlvbiByZWNvcmQgaXMgZm9yIGFub3RoZXIgZGVsZWdhdG9yYDtcbiAgICAgICAgICAgIGNvbnN0IHVuZGVsZWdhdGVWID0gd2F0Y2goXG4gICAgICAgICAgICAgIEUoaGVscGVyLm93bmVkKCkpLmV4ZWN1dGVFbmNvZGVkVHgoXG4gICAgICAgICAgICAgICAgZGVsZWdhdGlvbnMubWFwKFxuICAgICAgICAgICAgICAgICAgKHsgdmFsaWRhdG9yLCBhbW91bnQgfSkgPT4gQW55My50b0pTT04oXG4gICAgICAgICAgICAgICAgICAgIE1zZ1VuZGVsZWdhdGUyLnRvUHJvdG9Nc2coe1xuICAgICAgICAgICAgICAgICAgICAgIGRlbGVnYXRvckFkZHJlc3M6IGNoYWluQWRkcmVzcy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3JBZGRyZXNzOiB2YWxpZGF0b3IudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBjb2VyY2VDb2luKGNoYWluSHViLCBhbW91bnQpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICB0aGlzLmZhY2V0cy51bmRlbGVnYXRlV2F0Y2hlclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaCh1bmRlbGVnYXRlViwgdGhpcy5mYWNldHMucmV0dXJuVm9pZFdhdGNoZXIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKiogQHR5cGUge0hvc3RPZjxJY2FBY2NvdW50WydkZWFjdGl2YXRlJ10+fSAqL1xuICAgICAgICBkZWFjdGl2YXRlKCkge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB3YXRjaChFKHRoaXMuZmFjZXRzLmhlbHBlci5vd25lZCgpKS5kZWFjdGl2YXRlKCkpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIEB0eXBlIHtIb3N0T2Y8SWNhQWNjb3VudFsncmVhY3RpdmF0ZSddPn0gKi9cbiAgICAgICAgcmVhY3RpdmF0ZSgpIHtcbiAgICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4gd2F0Y2goRSh0aGlzLmZhY2V0cy5oZWxwZXIub3duZWQoKSkucmVhY3RpdmF0ZSgpKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBAdHlwZSB7SG9zdE9mPFN0YWtpbmdBY2NvdW50UXVlcmllc1snZ2V0RGVsZWdhdGlvbiddPn0gKi9cbiAgICAgICAgZ2V0RGVsZWdhdGlvbih2YWxpZGF0b3IpIHtcbiAgICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgICAgdHJhY2UzKFwiZ2V0RGVsZWdhdGlvblwiLCB2YWxpZGF0b3IpO1xuICAgICAgICAgICAgY29uc3QgeyBjaGFpbkFkZHJlc3MsIGljcUNvbm5lY3Rpb24gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICBpZiAoIWljcUNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBRdWVyaWVzIG5vdCBhdmFpbGFibGUgZm9yIGNoYWluICR7cXVvdGUoY2hhaW5BZGRyZXNzLmNoYWluSWQpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXN1bHRzID0gRShpY3FDb25uZWN0aW9uKS5xdWVyeShbXG4gICAgICAgICAgICAgIHRvUmVxdWVzdFF1ZXJ5SnNvbihcbiAgICAgICAgICAgICAgICBRdWVyeURlbGVnYXRpb25SZXF1ZXN0Mi50b1Byb3RvTXNnKHtcbiAgICAgICAgICAgICAgICAgIGRlbGVnYXRvckFkZHI6IGNoYWluQWRkcmVzcy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgIHZhbGlkYXRvckFkZHI6IHZhbGlkYXRvci52YWx1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKHJlc3VsdHMsIHRoaXMuZmFjZXRzLmRlbGVnYXRpb25RdWVyeVdhdGNoZXIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKiogQHR5cGUge0hvc3RPZjxTdGFraW5nQWNjb3VudFF1ZXJpZXNbJ2dldERlbGVnYXRpb25zJ10+fSAqL1xuICAgICAgICBnZXREZWxlZ2F0aW9ucygpIHtcbiAgICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgICAgdHJhY2UzKFwiZ2V0RGVsZWdhdGlvbnNcIik7XG4gICAgICAgICAgICBjb25zdCB7IGNoYWluQWRkcmVzcywgaWNxQ29ubmVjdGlvbiB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIGlmICghaWNxQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFF1ZXJpZXMgbm90IGF2YWlsYWJsZSBmb3IgY2hhaW4gJHtxdW90ZShjaGFpbkFkZHJlc3MuY2hhaW5JZCl9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBFKGljcUNvbm5lY3Rpb24pLnF1ZXJ5KFtcbiAgICAgICAgICAgICAgdG9SZXF1ZXN0UXVlcnlKc29uKFxuICAgICAgICAgICAgICAgIFF1ZXJ5RGVsZWdhdG9yRGVsZWdhdGlvbnNSZXF1ZXN0Mi50b1Byb3RvTXNnKHtcbiAgICAgICAgICAgICAgICAgIGRlbGVnYXRvckFkZHI6IGNoYWluQWRkcmVzcy52YWx1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKHJlc3VsdHMsIHRoaXMuZmFjZXRzLmRlbGVnYXRpb25zUXVlcnlXYXRjaGVyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIEB0eXBlIHtIb3N0T2Y8U3Rha2luZ0FjY291bnRRdWVyaWVzWydnZXRVbmJvbmRpbmdEZWxlZ2F0aW9uJ10+fSAqL1xuICAgICAgICBnZXRVbmJvbmRpbmdEZWxlZ2F0aW9uKHZhbGlkYXRvcikge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICB0cmFjZTMoXCJnZXRVbmJvbmRpbmdEZWxlZ2F0aW9uXCIsIHZhbGlkYXRvcik7XG4gICAgICAgICAgICBjb25zdCB7IGNoYWluQWRkcmVzcywgaWNxQ29ubmVjdGlvbiB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIGlmICghaWNxQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFF1ZXJpZXMgbm90IGF2YWlsYWJsZSBmb3IgY2hhaW4gJHtxdW90ZShjaGFpbkFkZHJlc3MuY2hhaW5JZCl9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBFKGljcUNvbm5lY3Rpb24pLnF1ZXJ5KFtcbiAgICAgICAgICAgICAgdG9SZXF1ZXN0UXVlcnlKc29uKFxuICAgICAgICAgICAgICAgIFF1ZXJ5VW5ib25kaW5nRGVsZWdhdGlvblJlcXVlc3QyLnRvUHJvdG9Nc2coe1xuICAgICAgICAgICAgICAgICAgZGVsZWdhdG9yQWRkcjogY2hhaW5BZGRyZXNzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yQWRkcjogdmFsaWRhdG9yLnZhbHVlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2gocmVzdWx0cywgdGhpcy5mYWNldHMudW5ib25kaW5nRGVsZWdhdGlvblF1ZXJ5V2F0Y2hlcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBAdHlwZSB7SG9zdE9mPFN0YWtpbmdBY2NvdW50UXVlcmllc1snZ2V0VW5ib25kaW5nRGVsZWdhdGlvbnMnXT59ICovXG4gICAgICAgIGdldFVuYm9uZGluZ0RlbGVnYXRpb25zKCkge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICB0cmFjZTMoXCJnZXRVbmJvbmRpbmdEZWxlZ2F0aW9uc1wiKTtcbiAgICAgICAgICAgIGNvbnN0IHsgY2hhaW5BZGRyZXNzLCBpY3FDb25uZWN0aW9uIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgICAgaWYgKCFpY3FDb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgUXVlcmllcyBub3QgYXZhaWxhYmxlIGZvciBjaGFpbiAke3F1b3RlKGNoYWluQWRkcmVzcy5jaGFpbklkKX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzdWx0cyA9IEUoaWNxQ29ubmVjdGlvbikucXVlcnkoW1xuICAgICAgICAgICAgICB0b1JlcXVlc3RRdWVyeUpzb24oXG4gICAgICAgICAgICAgICAgUXVlcnlEZWxlZ2F0b3JVbmJvbmRpbmdEZWxlZ2F0aW9uc1JlcXVlc3QyLnRvUHJvdG9Nc2coe1xuICAgICAgICAgICAgICAgICAgZGVsZWdhdG9yQWRkcjogY2hhaW5BZGRyZXNzLnZhbHVlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2gocmVzdWx0cywgdGhpcy5mYWNldHMudW5ib25kaW5nRGVsZWdhdGlvbnNRdWVyeVdhdGNoZXIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKiogQHR5cGUge0hvc3RPZjxTdGFraW5nQWNjb3VudFF1ZXJpZXNbJ2dldFJlZGVsZWdhdGlvbnMnXT59ICovXG4gICAgICAgIGdldFJlZGVsZWdhdGlvbnMoKSB7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICAgIHRyYWNlMyhcImdldFJlZGVsZWdhdGlvbnNcIik7XG4gICAgICAgICAgICBjb25zdCB7IGNoYWluQWRkcmVzcywgaWNxQ29ubmVjdGlvbiB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIGlmICghaWNxQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFF1ZXJpZXMgbm90IGF2YWlsYWJsZSBmb3IgY2hhaW4gJHtxdW90ZShjaGFpbkFkZHJlc3MuY2hhaW5JZCl9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBFKGljcUNvbm5lY3Rpb24pLnF1ZXJ5KFtcbiAgICAgICAgICAgICAgdG9SZXF1ZXN0UXVlcnlKc29uKFxuICAgICAgICAgICAgICAgIFF1ZXJ5UmVkZWxlZ2F0aW9uc1JlcXVlc3QyLnRvUHJvdG9Nc2coe1xuICAgICAgICAgICAgICAgICAgZGVsZWdhdG9yQWRkcjogY2hhaW5BZGRyZXNzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgLyogVGhlc2UgYXJlIG9wdGlvbmFsIGJ1dCB0aGUgcHJvdG9idWZzIHJlcXVpcmUgdmFsdWVzIHRvIGJlIHNldCovXG4gICAgICAgICAgICAgICAgICBkc3RWYWxpZGF0b3JBZGRyOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgc3JjVmFsaWRhdG9yQWRkcjogXCJcIlxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKHJlc3VsdHMsIHRoaXMuZmFjZXRzLnJlZGVsZWdhdGlvbnNRdWVyeVdhdGNoZXIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKiogQHR5cGUge0hvc3RPZjxTdGFraW5nQWNjb3VudFF1ZXJpZXNbJ2dldFJld2FyZCddPn0gKi9cbiAgICAgICAgZ2V0UmV3YXJkKHZhbGlkYXRvcikge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICB0cmFjZTMoXCJnZXRSZXdhcmRcIiwgdmFsaWRhdG9yKTtcbiAgICAgICAgICAgIGNvbnN0IHsgY2hhaW5BZGRyZXNzLCBpY3FDb25uZWN0aW9uIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgICAgaWYgKCFpY3FDb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgUXVlcmllcyBub3QgYXZhaWxhYmxlIGZvciBjaGFpbiAke3F1b3RlKGNoYWluQWRkcmVzcy5jaGFpbklkKX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzdWx0cyA9IEUoaWNxQ29ubmVjdGlvbikucXVlcnkoW1xuICAgICAgICAgICAgICB0b1JlcXVlc3RRdWVyeUpzb24oXG4gICAgICAgICAgICAgICAgUXVlcnlEZWxlZ2F0aW9uUmV3YXJkc1JlcXVlc3QyLnRvUHJvdG9Nc2coe1xuICAgICAgICAgICAgICAgICAgZGVsZWdhdG9yQWRkcmVzczogY2hhaW5BZGRyZXNzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yQWRkcmVzczogdmFsaWRhdG9yLnZhbHVlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2gocmVzdWx0cywgdGhpcy5mYWNldHMucmV3YXJkUXVlcnlXYXRjaGVyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIEB0eXBlIHtIb3N0T2Y8U3Rha2luZ0FjY291bnRRdWVyaWVzWydnZXRSZXdhcmRzJ10+fSAqL1xuICAgICAgICBnZXRSZXdhcmRzKCkge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICB0cmFjZTMoXCJnZXRSZXdhcmRzXCIpO1xuICAgICAgICAgICAgY29uc3QgeyBjaGFpbkFkZHJlc3MsIGljcUNvbm5lY3Rpb24gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICBpZiAoIWljcUNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBRdWVyaWVzIG5vdCBhdmFpbGFibGUgZm9yIGNoYWluICR7cXVvdGUoY2hhaW5BZGRyZXNzLmNoYWluSWQpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXN1bHRzID0gRShpY3FDb25uZWN0aW9uKS5xdWVyeShbXG4gICAgICAgICAgICAgIHRvUmVxdWVzdFF1ZXJ5SnNvbihcbiAgICAgICAgICAgICAgICBRdWVyeURlbGVnYXRpb25Ub3RhbFJld2FyZHNSZXF1ZXN0Mi50b1Byb3RvTXNnKHtcbiAgICAgICAgICAgICAgICAgIGRlbGVnYXRvckFkZHJlc3M6IGNoYWluQWRkcmVzcy52YWx1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKHJlc3VsdHMsIHRoaXMuZmFjZXRzLnJld2FyZHNRdWVyeVdhdGNoZXIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKiogQHR5cGUge0hvc3RPZjxJY2FBY2NvdW50WydleGVjdXRlRW5jb2RlZFR4J10+fSAqL1xuICAgICAgICBleGVjdXRlRW5jb2RlZFR4KG1zZ3MsIG9wdHMpIHtcbiAgICAgICAgICByZXR1cm4gYXNWb3coXG4gICAgICAgICAgICAoKSA9PiB3YXRjaChFKHRoaXMuZmFjZXRzLmhlbHBlci5vd25lZCgpKS5leGVjdXRlRW5jb2RlZFR4KG1zZ3MsIG9wdHMpKVxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICogQHR5cGUge0hvc3RPZjxOb2JsZU1ldGhvZHNbJ2RlcG9zaXRGb3JCdXJuJ10+fVxuICovXG4gICAgICAgIGRlcG9zaXRGb3JCdXJuKGRlc3RpbmF0aW9uLCBhbW91bnQsIGNhbGxlcikge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICB0cmFjZTMoXCJkZXBvc2l0Rm9yQnVyblwiLCB7IGRlc3RpbmF0aW9uLCBhbW91bnQgfSk7XG4gICAgICAgICAgICBjb25zdCB7IGhlbHBlciB9ID0gdGhpcy5mYWNldHM7XG4gICAgICAgICAgICBjb25zdCB7IGNoYWluQWRkcmVzcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIGNvbnN0IGRlc3RQYXJ0cyA9IHBhcnNlQWNjb3VudElkKGRlc3RpbmF0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IGNoYWluSWQgPSBgJHtkZXN0UGFydHMubmFtZXNwYWNlfToke2Rlc3RQYXJ0cy5yZWZlcmVuY2V9YDtcbiAgICAgICAgICAgIGNvbnN0IHsgY2N0cERlc3RpbmF0aW9uRG9tYWluIH0gPSBjaGFpbkh1Yi5nZXRDaGFpbkluZm9CeUNoYWluSWQoY2hhaW5JZCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNjdHBEZXN0aW5hdGlvbkRvbWFpbiAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYCR7cXVvdGUoY2hhaW5JZCl9IGRvZXMgbm90IGhhdmUgXCJjY3RwRGVzdGluYXRpb25Eb21haW5cIiBzZXQgaW4gQ2hhaW5JbmZvYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGRlcG9zaXRGb3JCdXJuID0ge1xuICAgICAgICAgICAgICBhbW91bnQ6IGhlbHBlci5hbW91bnRUb0NvaW4oYW1vdW50KT8uYW1vdW50LFxuICAgICAgICAgICAgICBmcm9tOiBjaGFpbkFkZHJlc3MudmFsdWUsXG4gICAgICAgICAgICAgIGRlc3RpbmF0aW9uRG9tYWluOiBjY3RwRGVzdGluYXRpb25Eb21haW4sXG4gICAgICAgICAgICAgIG1pbnRSZWNpcGllbnQ6IGFjY291bnRJZFRvMzJCeXRlcyhkZXN0aW5hdGlvbiksXG4gICAgICAgICAgICAgIC8qIHNhZmUgdG8gaGFyZGNvZGUgc2luY2UgYHV1c2RjYCBpcyB0aGUgb25seSBhc3NldCBzdXBwb3J0ZWQgYnkgQ0NUUCovXG4gICAgICAgICAgICAgIGJ1cm5Ub2tlbjogXCJ1dXNkY1wiXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgZGVzdGluYXRpb25DYWxsZXIgPSAoKCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoIWNhbGxlcikgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgICAgICAgY29uc3QgY2FsbGVyUGFydHMgPSBwYXJzZUFjY291bnRJZChjYWxsZXIpO1xuICAgICAgICAgICAgICBjYWxsZXJQYXJ0cy5uYW1lc3BhY2UgPT09IGRlc3RQYXJ0cy5uYW1lc3BhY2UgfHwgdGhyb3dSZWRhY3RlZGBjYWxsZXIgJHtxdW90ZShjYWxsZXIpfSBtdXN0IGJlIGluIHNhbWUgbmFtZXNwYWNlIGFzIGRlc3RpbmF0aW9uICR7cXVvdGUoZGVzdGluYXRpb24pfWA7XG4gICAgICAgICAgICAgIHJldHVybiBhY2NvdW50SWRUbzMyQnl0ZXMoY2FsbGVyKTtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICAgIEUoaGVscGVyLm93bmVkKCkpLmV4ZWN1dGVFbmNvZGVkVHgoW1xuICAgICAgICAgICAgICAgIEFueTMudG9KU09OKFxuICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25DYWxsZXIgPyBNc2dEZXBvc2l0Rm9yQnVybldpdGhDYWxsZXIyLnRvUHJvdG9Nc2coe1xuICAgICAgICAgICAgICAgICAgICAuLi5kZXBvc2l0Rm9yQnVybixcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25DYWxsZXJcbiAgICAgICAgICAgICAgICAgIH0pIDogTXNnRGVwb3NpdEZvckJ1cm4yLnRvUHJvdG9Nc2coZGVwb3NpdEZvckJ1cm4pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgdGhpcy5mYWNldHMucmV0dXJuVm9pZFdhdGNoZXJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIHJldHVybiBtYWtlQ29zbW9zT3JjaGVzdHJhdGlvbkFjY291bnRLaXQ7XG59O1xudmFyIHByZXBhcmVDb3Ntb3NPcmNoZXN0cmF0aW9uQWNjb3VudCA9ICh6b25lLCB7IGNoYWluSHViLCBtYWtlUmVjb3JkZXJLaXQsIHRpbWVyU2VydmljZSwgdm93VG9vbHMsIHpjZiB9KSA9PiB7XG4gIGNvbnN0IG1ha2VLaXQgPSBwcmVwYXJlQ29zbW9zT3JjaGVzdHJhdGlvbkFjY291bnRLaXQoem9uZSwge1xuICAgIGNoYWluSHViLFxuICAgIG1ha2VSZWNvcmRlcktpdCxcbiAgICB0aW1lclNlcnZpY2UsXG4gICAgdm93VG9vbHMsXG4gICAgemNmXG4gIH0pO1xuICByZXR1cm4gKC4uLmFyZ3MpID0+IG1ha2VLaXQoLi4uYXJncykuaG9sZGVyO1xufTtcblxuLyogLi4vb3JjaGVzdHJhdGlvbi9zcmMvZXhvcy9sb2NhbC1jaGFpbi1mYWNhZGUuanMqL1xudmFyIHByZXBhcmVMb2NhbENoYWluRmFjYWRlS2l0ID0gKHpvbmUsIHtcbiAgbWFrZUxvY2FsT3JjaGVzdHJhdGlvbkFjY291bnRLaXQsXG4gIGFnb3JpY05hbWVzLFxuICBsb2NhbGNoYWluLFxuICAvKiBUT0RPIHZzdG9yYWdlIGRlc2lnbiBodHRwczovL2dpdGh1Yi5jb20vQWdvcmljL2Fnb3JpYy1zZGsvaXNzdWVzLzkwNjYqL1xuICAvKiBjb25zaWRlciBtYWtpbmcgYW4gYGFjY291bnRzYCBjaGlsZE5vZGUqL1xuICBzdG9yYWdlTm9kZSxcbiAgdm93VG9vbHM6IHsgYWxsVm93cywgd2F0Y2gsIGFzVm93IH1cbn0pID0+IHpvbmUuZXhvQ2xhc3NLaXQoXG4gIFwiTG9jYWxDaGFpbkZhY2FkZVwiLFxuICB7XG4gICAgcHVibGljOiBNLmludGVyZmFjZShcIkxvY2FsQ2hhaW5GYWNhZGVcIiwge1xuICAgICAgLi4uY2hhaW5GYWNhZGVNZXRob2RzLFxuICAgICAgcXVlcnk6IE0uY2FsbChNLmFycmF5T2YoVHlwZWRKc29uU2hhcGUpKS5yZXR1cm5zKFZvd1NoYXBlKSxcbiAgICAgIGdldFZCYW5rQXNzZXRJbmZvOiBNLmNhbGwoKS5vcHRpb25hbChNLmJvb2xlYW4oKSkucmV0dXJucyhWb3dTaGFwZSlcbiAgICB9KSxcbiAgICB2YmFua0Fzc2V0VmFsdWVzV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJ2YmFua0Fzc2V0VmFsdWVzV2F0Y2hlclwiLCB7XG4gICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uYXJyYXlPZihNLnJlY29yZCgpKSkub3B0aW9uYWwoTS5hcnJheU9mKE0udW5kZWZpbmVkKCkpKS5yZXR1cm5zKFZvd1NoYXBlKVxuICAgIH0pLFxuICAgIG1ha2VBY2NvdW50V2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJtYWtlQWNjb3VudFdhdGNoZXJcIiwge1xuICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChbTS5yZW1vdGFibGUoXCJMQ0EgQWNjb3VudFwiKSwgTS5zdHJpbmcoKV0pLm9wdGlvbmFsKE0uYXJyYXlPZihNLnVuZGVmaW5lZCgpKSkucmV0dXJucyhWb3dTaGFwZSlcbiAgICB9KSxcbiAgICBtYWtlQ2hpbGROb2RlV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJtYWtlQ2hpbGROb2RlV2F0Y2hlclwiLCB7XG4gICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0ub3IoTS5yZW1vdGFibGUoKSwgTS51bmRlZmluZWQoKSkpLm9wdGlvbmFsKHsgYWNjb3VudDogTS5yZW1vdGFibGUoKSwgYWRkcmVzczogTS5zdHJpbmcoKSB9KS5yZXR1cm5zKE0ucmVtb3RhYmxlKCkpXG4gICAgfSlcbiAgfSxcbiAgLyoqXG4gKiBAcGFyYW0ge0Nvc21vc0NoYWluSW5mb30gbG9jYWxDaGFpbkluZm9cbiAqL1xuICAobG9jYWxDaGFpbkluZm8pID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbG9jYWxDaGFpbkluZm8sXG4gICAgICB2YmFua0Fzc2V0czogKFxuICAgICAgICAvKiogQHR5cGUge0Fzc2V0SW5mb1tdIHwgdW5kZWZpbmVkfSAqL1xuICAgICAgICB2b2lkIDBcbiAgICAgIClcbiAgICB9O1xuICB9LFxuICB7XG4gICAgcHVibGljOiB7XG4gICAgICBnZXRDaGFpbkluZm8oKSB7XG4gICAgICAgIHJldHVybiB3YXRjaCh0aGlzLnN0YXRlLmxvY2FsQ2hhaW5JbmZvKTtcbiAgICAgIH0sXG4gICAgICAvKiogQHJldHVybnMge1ZvdzxMb2NhbE9yY2hlc3RyYXRpb25BY2NvdW50S2l0Wydob2xkZXInXT59ICovXG4gICAgICBtYWtlQWNjb3VudCgpIHtcbiAgICAgICAgY29uc3QgbGNhUCA9IEUobG9jYWxjaGFpbikubWFrZUFjY291bnQoKTtcbiAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgIC8qIFhYWCBtYWtlQWNjb3VudCByZXR1cm5zIGEgUHJvbWlzZSBmb3IgYW4gZXhvIGJ1dCByZXNlcnZlcyBiZWluZyBhYmxlIHRvIHJldHVybiBhIHZvdyovXG4gICAgICAgICAgLyogc28gd2UgdXNlIGhlYXBWb3dFIHRvIHNob3J0ZW4gdGhlIHByb21pc2UgcGF0aCovXG4gICAgICAgICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4IC0tIHdpbGwgcnVuIGluIG9uZSB0dXJuKi9cbiAgICAgICAgICBhbGxWb3dzKFtsY2FQLCBoZWFwVm93RShsY2FQKS5nZXRBZGRyZXNzKCldKSxcbiAgICAgICAgICB0aGlzLmZhY2V0cy5tYWtlQWNjb3VudFdhdGNoZXJcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICAvKiogQHR5cGUge0hvc3RPZjxDaGFpbjx7IGNoYWluSWQ6ICdhZ29yaWNsb2NhbCcgfT5bJ3F1ZXJ5J10+fSAqL1xuICAgICAgcXVlcnkocmVxdWVzdHMpIHtcbiAgICAgICAgcmV0dXJuIHdhdGNoKEUobG9jYWxjaGFpbikucXVlcnlNYW55KHJlcXVlc3RzKSk7XG4gICAgICB9LFxuICAgICAgLyoqIEB0eXBlIHtIb3N0T2Y8QWdvcmljQ2hhaW5NZXRob2RzWydnZXRWQmFua0Fzc2V0SW5mbyddPn0gKi9cbiAgICAgIGdldFZCYW5rQXNzZXRJbmZvKCkge1xuICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgdmJhbmtBc3NldHMgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgaWYgKHZiYW5rQXNzZXRzKSB7XG4gICAgICAgICAgICByZXR1cm4gdmJhbmtBc3NldHM7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHZiYW5rQXNzZXROYW1lSHViUCA9IEUoYWdvcmljTmFtZXMpLmxvb2t1cChcInZiYW5rQXNzZXRcIik7XG4gICAgICAgICAgY29uc3QgdmJhbmtBc3NldFZhbHVlc1AgPSBFKHZiYW5rQXNzZXROYW1lSHViUCkudmFsdWVzKCk7XG4gICAgICAgICAgY29uc3QgeyB2YmFua0Fzc2V0VmFsdWVzV2F0Y2hlciB9ID0gdGhpcy5mYWNldHM7XG4gICAgICAgICAgcmV0dXJuIHdhdGNoKHZiYW5rQXNzZXRWYWx1ZXNQLCB2YmFua0Fzc2V0VmFsdWVzV2F0Y2hlcik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmJhbmtBc3NldFZhbHVlc1dhdGNoZXI6IHtcbiAgICAgIC8qKlxuICogQHBhcmFtIHtBc3NldEluZm9bXX0gYXNzZXRzXG4gKi9cbiAgICAgIG9uRnVsZmlsbGVkKGFzc2V0cykge1xuICAgICAgICBjb25zdCB7IHN0YXRlIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgIHN0YXRlLnZiYW5rQXNzZXRzID0gYXNzZXRzO1xuICAgICAgICAgIHJldHVybiBhc3NldHM7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgbWFrZUFjY291bnRXYXRjaGVyOiB7XG4gICAgICAvKipcbiAqIEBwYXJhbSB7W0xvY2FsQ2hhaW5BY2NvdW50LCBDb3Ntb3NDaGFpbkFkZHJlc3NbJ3ZhbHVlJ11dfSByZXN1bHRzXG4gKi9cbiAgICAgIG9uRnVsZmlsbGVkKFthY2NvdW50LCBhZGRyZXNzXSkge1xuICAgICAgICBjb25zdCBvcHRpb25hbFN0b3JhZ2VOb2RlID0gc3RvcmFnZU5vZGUgPyBFKHN0b3JhZ2VOb2RlKS5tYWtlQ2hpbGROb2RlKGFkZHJlc3MpIDogdm9pZCAwO1xuICAgICAgICByZXR1cm4gd2F0Y2gob3B0aW9uYWxTdG9yYWdlTm9kZSwgdGhpcy5mYWNldHMubWFrZUNoaWxkTm9kZVdhdGNoZXIsIHtcbiAgICAgICAgICBhY2NvdW50LFxuICAgICAgICAgIGFkZHJlc3NcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBtYWtlQ2hpbGROb2RlV2F0Y2hlcjoge1xuICAgICAgLyoqXG4gKiBAcGFyYW0ge1JlbW90ZTxTdG9yYWdlTm9kZT59IGNoaWxkTm9kZVxuICogQHBhcmFtIHt7XG4gKiAgIGFjY291bnQ6IExvY2FsQ2hhaW5BY2NvdW50O1xuICogICBhZGRyZXNzOiBDb3Ntb3NDaGFpbkFkZHJlc3NbJ3ZhbHVlJ107XG4gKiB9fSBjdHhcbiAqL1xuICAgICAgb25GdWxmaWxsZWQoY2hpbGROb2RlLCB7IGFjY291bnQsIGFkZHJlc3MgfSkge1xuICAgICAgICBjb25zdCB7IGxvY2FsQ2hhaW5JbmZvIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCB7IGhvbGRlciB9ID0gbWFrZUxvY2FsT3JjaGVzdHJhdGlvbkFjY291bnRLaXQoe1xuICAgICAgICAgIGFjY291bnQsXG4gICAgICAgICAgYWRkcmVzczogaGFyZGVuKHtcbiAgICAgICAgICAgIHZhbHVlOiBhZGRyZXNzLFxuICAgICAgICAgICAgZW5jb2Rpbmc6IFwiYmVjaDMyXCIsXG4gICAgICAgICAgICBjaGFpbklkOiBsb2NhbENoYWluSW5mby5jaGFpbklkXG4gICAgICAgICAgfSksXG4gICAgICAgICAgLyogRklYTUUgc3RvcmFnZSBwYXRoIGh0dHBzOi8vZ2l0aHViLmNvbS9BZ29yaWMvYWdvcmljLXNkay9pc3N1ZXMvOTA2NiovXG4gICAgICAgICAgc3RvcmFnZU5vZGU6IGNoaWxkTm9kZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGhvbGRlcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbik7XG5oYXJkZW4ocHJlcGFyZUxvY2FsQ2hhaW5GYWNhZGVLaXQpO1xudmFyIHByZXBhcmVMb2NhbENoYWluRmFjYWRlID0gKHpvbmUsIHBvd2VycykgPT4ge1xuICBjb25zdCBtYWtlTG9jYWxDaGFpbkZhY2FkZUtpdCA9IHByZXBhcmVMb2NhbENoYWluRmFjYWRlS2l0KHpvbmUsIHBvd2Vycyk7XG4gIHJldHVybiBwaWNrRmFjZXQobWFrZUxvY2FsQ2hhaW5GYWNhZGVLaXQsIFwicHVibGljXCIpO1xufTtcbmhhcmRlbihwcmVwYXJlTG9jYWxDaGFpbkZhY2FkZSk7XG5cbi8qIC4uL2Nvc21pYy1wcm90by9kaXN0L2NvZGVnZW4vaWJjL2FwcGxpY2F0aW9ucy90cmFuc2Zlci92MS9xdWVyeS5qcyovXG52YXIgUXVlcnlEZW5vbUhhc2hSZXF1ZXN0ID0geyB0eXBlVXJsOiBcIi9pYmMuYXBwbGljYXRpb25zLnRyYW5zZmVyLnYxLlF1ZXJ5RGVub21IYXNoUmVxdWVzdFwiLCBlbmNvZGU6IChlMiwgbzIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+IChcIlwiICE9PSBlMi50cmFjZSAmJiBvMi51aW50MzIoMTApLnN0cmluZyhlMi50cmFjZSksIG8yKSwgZGVjb2RlKGUyLCBvMikge1xuICBjb25zdCByNiA9IGUyIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gZTIgOiBuZXcgQmluYXJ5UmVhZGVyKGUyKTtcbiAgbGV0IG4yID0gdm9pZCAwID09PSBvMiA/IHI2LmxlbiA6IHI2LnBvcyArIG8yO1xuICBjb25zdCBzMyA9IHsgdHJhY2U6IFwiXCIgfTtcbiAgZm9yICg7IHI2LnBvcyA8IG4yOyApIHtcbiAgICBjb25zdCBlMyA9IHI2LnVpbnQzMigpO1xuICAgIGlmIChlMyA+Pj4gMyA9PSAxKSBzMy50cmFjZSA9IHI2LnN0cmluZygpO1xuICAgIGVsc2UgcjYuc2tpcFR5cGUoNyAmIGUzKTtcbiAgfVxuICByZXR1cm4gczM7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyB0cmFjZTogaXNTZXQoZTIudHJhY2UpID8gU3RyaW5nKGUyLnRyYWNlKSA6IFwiXCIgfSksIHRvSlNPTihlMikge1xuICBjb25zdCBvMiA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi50cmFjZSAmJiAobzIudHJhY2UgPSBlMi50cmFjZSksIG8yO1xufSwgZnJvbVBhcnRpYWwoZTIpIHtcbiAgY29uc3QgbzIgPSB7IHRyYWNlOiBcIlwiIH07XG4gIHJldHVybiBvMi50cmFjZSA9IGUyLnRyYWNlID8/IFwiXCIsIG8yO1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IFF1ZXJ5RGVub21IYXNoUmVxdWVzdC5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IFF1ZXJ5RGVub21IYXNoUmVxdWVzdC5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL2liYy5hcHBsaWNhdGlvbnMudHJhbnNmZXIudjEuUXVlcnlEZW5vbUhhc2hSZXF1ZXN0XCIsIHZhbHVlOiBRdWVyeURlbm9tSGFzaFJlcXVlc3QuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xudmFyIFF1ZXJ5RGVub21IYXNoUmVzcG9uc2UgPSB7IHR5cGVVcmw6IFwiL2liYy5hcHBsaWNhdGlvbnMudHJhbnNmZXIudjEuUXVlcnlEZW5vbUhhc2hSZXNwb25zZVwiLCBlbmNvZGU6IChlMiwgbzIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+IChcIlwiICE9PSBlMi5oYXNoICYmIG8yLnVpbnQzMigxMCkuc3RyaW5nKGUyLmhhc2gpLCBvMiksIGRlY29kZShlMiwgbzIpIHtcbiAgY29uc3QgcjYgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCBuMiA9IHZvaWQgMCA9PT0gbzIgPyByNi5sZW4gOiByNi5wb3MgKyBvMjtcbiAgY29uc3QgczMgPSB7IGhhc2g6IFwiXCIgfTtcbiAgZm9yICg7IHI2LnBvcyA8IG4yOyApIHtcbiAgICBjb25zdCBlMyA9IHI2LnVpbnQzMigpO1xuICAgIGlmIChlMyA+Pj4gMyA9PSAxKSBzMy5oYXNoID0gcjYuc3RyaW5nKCk7XG4gICAgZWxzZSByNi5za2lwVHlwZSg3ICYgZTMpO1xuICB9XG4gIHJldHVybiBzMztcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IGhhc2g6IGlzU2V0KGUyLmhhc2gpID8gU3RyaW5nKGUyLmhhc2gpIDogXCJcIiB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IG8yID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLmhhc2ggJiYgKG8yLmhhc2ggPSBlMi5oYXNoKSwgbzI7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCBvMiA9IHsgaGFzaDogXCJcIiB9O1xuICByZXR1cm4gbzIuaGFzaCA9IGUyLmhhc2ggPz8gXCJcIiwgbzI7XG59LCBmcm9tUHJvdG9Nc2c6IChlMikgPT4gUXVlcnlEZW5vbUhhc2hSZXNwb25zZS5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IFF1ZXJ5RGVub21IYXNoUmVzcG9uc2UuZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9pYmMuYXBwbGljYXRpb25zLnRyYW5zZmVyLnYxLlF1ZXJ5RGVub21IYXNoUmVzcG9uc2VcIiwgdmFsdWU6IFF1ZXJ5RGVub21IYXNoUmVzcG9uc2UuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xuXG4vKiAuLi9vcmNoZXN0cmF0aW9uL3NyYy9leG9zL3BhY2tldC10b29scy5qcyovXG52YXIgdHJhY2U0ID0gbWFrZVRyYWNlcihcIlBhY2tldFRvb2xzXCIpO1xudmFyIHsgdG9DYXBEYXRhIH0gPSBtYWtlTWFyc2hhbCh2b2lkIDAsIHZvaWQgMCwge1xuICBtYXJzaGFsTmFtZTogXCJKdXN0RW5jb2RlclwiLFxuICBzZXJpYWxpemVCb2R5Rm9ybWF0OiBcImNhcGRhdGFcIlxufSk7XG52YXIganVzdCA9IChvYmopID0+IHtcbiAgY29uc3QgeyBib2R5IH0gPSB0b0NhcERhdGEob2JqKTtcbiAgcmV0dXJuIGRlY29kZVRvSnVzdGluKEpTT04ucGFyc2UoYm9keSksIGZhbHNlKTtcbn07XG52YXIgeyBWb3ckOiBWb3ckNCB9ID0gU2hhcGU7XG52YXIgRVZvdyQgPSAoc2hhcGUpID0+IE0ub3IoVm93JDQoc2hhcGUpLCBNLnByb21pc2UoXG4gIC8qIHNoYXBlICovXG4pKTtcbnZhciBzaW5rNSA9ICgpID0+IHtcbn07XG5oYXJkZW4oc2luazUpO1xudmFyIHByZXBhcmVQYWNrZXRUb29scyA9ICh6b25lLCB2b3dUb29scykgPT4ge1xuICBjb25zdCB7IGFsbFZvd3MsIG1ha2VWb3dLaXQsIHdhdGNoLCB3aGVuIH0gPSB2b3dUb29scztcbiAgY29uc3QgbWFrZVBhY2tldFRvb2xzS2l0ID0gem9uZS5leG9DbGFzc0tpdChcbiAgICBcIlBhY2tldFRvb2xzS2l0XCIsXG4gICAge1xuICAgICAgcHVibGljOiBNLmludGVyZmFjZShcIlBhY2tldFRvb2xzXCIsIHtcbiAgICAgICAgc2VuZFRoZW5XYWl0Rm9yQWNrOiBNLmNhbGwoRVZvdyQoTS5yZW1vdGFibGUoXCJQYWNrZXRTZW5kZXJcIikpKS5vcHRpb25hbChNLmFueSgpKS5yZXR1cm5zKEVWb3ckKE0uYW55KCkpKSxcbiAgICAgICAgbWF0Y2hGaXJzdFBhY2tldDogTS5jYWxsKE0uYW55KCkpLnJldHVybnMoRVZvdyQoTS5hbnkoKSkpLFxuICAgICAgICBtb25pdG9yVHJhbnNmZXJzOiBNLmNhbGwoTS5yZW1vdGFibGUoXCJUYXJnZXRBcHBcIikpLnJldHVybnMoXG4gICAgICAgICAgRVZvdyQoTS5hbnkoKSlcbiAgICAgICAgKVxuICAgICAgfSksXG4gICAgICB0YXA6IE0uaW50ZXJmYWNlKFwidGFwXCIsIHtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4Ki9cbiAgICAgICAgcmVjZWl2ZVVwY2FsbDogTS5jYWxsV2hlbihNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICB9KSxcbiAgICAgIG1vbml0b3JSZWdpc3RyYXRpb246IE0uaW50ZXJmYWNlKFwibW9uaXRvclJlZ2lzdHJhdGlvblwiLCB7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCovXG4gICAgICAgIHVwZGF0ZVRhcmdldEFwcDogTS5jYWxsV2hlbihcbiAgICAgICAgICBNLmF3YWl0KE0ucmVtb3RhYmxlKFwiVGFyZ2V0QXBwXCIpKVxuICAgICAgICApLnJldHVybnMoKSxcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4Ki9cbiAgICAgICAgcmV2b2tlOiBNLmNhbGxXaGVuKCkucmV0dXJucygpXG4gICAgICB9KSxcbiAgICAgIHdhdGNoUGFja2V0TWF0Y2g6IE0uaW50ZXJmYWNlKFwid2F0Y2hQYWNrZXRNYXRjaFwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hbnkoKSwgTS5yZWNvcmQoKSkucmV0dXJucyhNLmFueSgpKVxuICAgICAgfSksXG4gICAgICB3YXRjaFBhY2tldFBhdHRlcm46IE0uaW50ZXJmYWNlKFwid2F0Y2hQYWNrZXRQYXR0ZXJuXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFueSgpLCBNLnJlY29yZCgpKS5yZXR1cm5zKE0uYW55KCkpLFxuICAgICAgICBvblJlamVjdGVkOiBNLmNhbGwoTS5hbnkoKSwgTS5yZWNvcmQoKSkucmV0dXJucyhNLmFueSgpKVxuICAgICAgfSksXG4gICAgICB3YXRjaERlY3JQZW5kaW5nUGF0dGVybnM6IE0uaW50ZXJmYWNlKFwid2F0Y2hEZWNyUGVuZGluZ1BhdHRlcm5zXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpLFxuICAgICAgICBvblJlamVjdGVkOiBNLmNhbGwoTS5hbnkoKSkucmV0dXJucyhNLmFueSgpKVxuICAgICAgfSksXG4gICAgICBzZW5kUGFja2V0V2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJzZW5kUGFja2V0V2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoXG4gICAgICAgICAgW00ucmVjb3JkKCksIE0ucmVtb3RhYmxlKFwiUGFja2V0U2VuZGVyXCIpXSxcbiAgICAgICAgICBNLnJlY29yZCgpXG4gICAgICAgICkucmV0dXJucyhNLmFueSgpKVxuICAgICAgfSksXG4gICAgICBwYWNrZXRXYXNTZW50V2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJwYWNrZXRXYXNTZW50V2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoXG4gICAgICAgICAgeyBldmVudFBhdHRlcm46IE0ucGF0dGVybigpLCByZXN1bHRWOiBWb3ckNChNLmFueSgpKSB9LFxuICAgICAgICAgIE0ucmVjb3JkKClcbiAgICAgICAgKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICB9KSxcbiAgICAgIHV0aWxzOiBNLmludGVyZmFjZShcInV0aWxzXCIsIHtcbiAgICAgICAgc3Vic2NyaWJlVG9UcmFuc2ZlcnM6IE0uY2FsbCgpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICAgICAgICB1bnN1YnNjcmliZUZyb21UcmFuc2ZlcnM6IE0uY2FsbCgpLnJldHVybnMoTS51bmRlZmluZWQoKSksXG4gICAgICAgIGluY3JQZW5kaW5nUGF0dGVybnM6IE0uY2FsbCgpLnJldHVybnMoVm93JDQoTS51bmRlZmluZWQoKSkpLFxuICAgICAgICBkZWNyUGVuZGluZ1BhdHRlcm5zOiBNLmNhbGwoKS5yZXR1cm5zKFZvdyQ0KE0udW5kZWZpbmVkKCkpKVxuICAgICAgfSksXG4gICAgICByZWplY3RSZXNvbHZlckFuZFJldGhyb3dXYXRjaGVyOiBNLmludGVyZmFjZShcInJlamVjdFJlc29sdmVyV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uUmVqZWN0ZWQ6IE0uY2FsbChNLmFueSgpLCB7XG4gICAgICAgICAgcmVzb2x2ZXI6IE0ucmVtb3RhYmxlKFwicmVzb2x2ZXJcIilcbiAgICAgICAgfSkucmV0dXJucyhNLmFueSgpKVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qKlxuICogQHBhcmFtIHtMb2NhbENoYWluQWNjb3VudH0gbGNhXG4gKi9cbiAgICAobGNhKSA9PiB7XG4gICAgICBjb25zdCByZXNvbHZlclRvUGF0dGVybiA9IHpvbmUuZGV0YWNoZWQoKS5tYXBTdG9yZShcInJlc29sdmVyVG9QYXR0ZXJuXCIpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGNhLFxuICAgICAgICByZWc6IChcbiAgICAgICAgICAvKiogQHR5cGUge1ZvdzxUYXJnZXRSZWdpc3RyYXRpb24+IHwgbnVsbH0gKi9cbiAgICAgICAgICBudWxsXG4gICAgICAgICksXG4gICAgICAgIHJlc29sdmVyVG9QYXR0ZXJuLFxuICAgICAgICB1cGNhbGxRdWV1ZTogKFxuICAgICAgICAgIC8qKiBAdHlwZSB7YW55W10gfCBudWxsfSAqL1xuICAgICAgICAgIG51bGxcbiAgICAgICAgKSxcbiAgICAgICAgcGVuZGluZzogMCxcbiAgICAgICAgZXh0cmE6IG51bGwsXG4gICAgICAgIG1vbml0b3I6IChcbiAgICAgICAgICAvKiogQHR5cGUge1JlbW90ZTxUYXJnZXRBcHA+IHwgbnVsbH0gKi9cbiAgICAgICAgICBudWxsXG4gICAgICAgIClcbiAgICAgIH07XG4gICAgfSxcbiAgICB7XG4gICAgICBwdWJsaWM6IHtcbiAgICAgICAgLyoqXG4gKiBAcGFyYW0ge0VSZWY8VGFyZ2V0QXBwPn0gbW9uaXRvclxuICovXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCovXG4gICAgICAgIGFzeW5jIG1vbml0b3JUcmFuc2ZlcnMobW9uaXRvcikge1xuICAgICAgICAgIGNvbnN0IG1yZWcgPSB0aGlzLmZhY2V0cy5tb25pdG9yUmVnaXN0cmF0aW9uO1xuICAgICAgICAgIGF3YWl0IG1yZWcudXBkYXRlVGFyZ2V0QXBwKG1vbml0b3IpO1xuICAgICAgICAgIHJldHVybiBtcmVnO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAqIEB0eXBlIHtNYXRjaEV2ZW50fVxuICovXG4gICAgICAgIG1hdGNoRmlyc3RQYWNrZXQocGF0dGVyblApIHtcbiAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy51dGlscy5pbmNyUGVuZGluZ1BhdHRlcm5zKCksXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy53YXRjaFBhY2tldE1hdGNoLFxuICAgICAgICAgICAgeyBwYXR0ZXJuUCB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gKiBAcGFyYW0ge1JlbW90ZTxQYWNrZXRTZW5kZXI+fSBwYWNrZXRTZW5kZXJcbiAqIEBwYXJhbSB7UGFja2V0T3B0aW9uc30gW29wdHNdXG4gKiBAcmV0dXJucyB7Vm93PGFueT59XG4gKi9cbiAgICAgICAgc2VuZFRoZW5XYWl0Rm9yQWNrKHBhY2tldFNlbmRlciwgb3B0cyA9IHt9KSB7XG4gICAgICAgICAgY29uc3QgcGF0dGVybiA9IG1ha2VWb3dLaXQoKTtcbiAgICAgICAgICBjb25zdCBtYXRjaFYgPSB3YXRjaChcbiAgICAgICAgICAgIGFsbFZvd3MoW1xuICAgICAgICAgICAgICB0aGlzLmZhY2V0cy5wdWJsaWMubWF0Y2hGaXJzdFBhY2tldChwYXR0ZXJuLnZvdyksXG4gICAgICAgICAgICAgIHBhY2tldFNlbmRlclxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy5zZW5kUGFja2V0V2F0Y2hlcixcbiAgICAgICAgICAgIHsgb3B0cyB9XG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCByZXN1bHRWID0gd2F0Y2gobWF0Y2hWLCB0aGlzLmZhY2V0cy5wYWNrZXRXYXNTZW50V2F0Y2hlciwge1xuICAgICAgICAgICAgb3B0cyxcbiAgICAgICAgICAgIHBhdHRlcm5SZXNvbHZlcjogcGF0dGVybi5yZXNvbHZlclxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB3YXRjaChyZXN1bHRWLCB0aGlzLmZhY2V0cy5yZWplY3RSZXNvbHZlckFuZFJldGhyb3dXYXRjaGVyLCB7XG4gICAgICAgICAgICByZXNvbHZlcjogcGF0dGVybi5yZXNvbHZlclxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgbW9uaXRvclJlZ2lzdHJhdGlvbjoge1xuICAgICAgICAvKiogQHR5cGUge1RhcmdldFJlZ2lzdHJhdGlvblsndXBkYXRlVGFyZ2V0QXBwJ119ICovXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCovXG4gICAgICAgIGFzeW5jIHVwZGF0ZVRhcmdldEFwcCh0YXApIHtcbiAgICAgICAgICB0aGlzLnN0YXRlLm1vbml0b3IgPSBhd2FpdCB0YXA7XG4gICAgICAgICAgYXdhaXQgdGhpcy5mYWNldHMudXRpbHMuc3Vic2NyaWJlVG9UcmFuc2ZlcnMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIEB0eXBlIHtUYXJnZXRSZWdpc3RyYXRpb25bJ3Jldm9rZSddfSAqL1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgqL1xuICAgICAgICBhc3luYyByZXZva2UoKSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5tb25pdG9yID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRhcDoge1xuICAgICAgICAvKipcbiAqIEBwYXJhbSB7VlRyYW5zZmVySUJDRXZlbnR9IG9ialxuICovXG4gICAgICAgIGFzeW5jIHJlY2VpdmVVcGNhbGwob2JqKSB7XG4gICAgICAgICAgY29uc3QgeyBtb25pdG9yLCByZXNvbHZlclRvUGF0dGVybiwgdXBjYWxsUXVldWUsIHBlbmRpbmcgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgdHJhY2U0KFxuICAgICAgICAgICAgYFRyeWluZyAke3Jlc29sdmVyVG9QYXR0ZXJuLmdldFNpemUoKX0gY3VycmVudCBwYXR0ZXJucyBhbmQgJHtwZW5kaW5nfSBwZW5kaW5nIHBhdHRlcm5zIGFnYWluc3RgLFxuICAgICAgICAgICAganVzdChvYmopXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAobW9uaXRvcikge1xuICAgICAgICAgICAgdm9pZCBFKG1vbml0b3IpLnJlY2VpdmVVcGNhbGwob2JqKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChjb25zdCBbcmVzb2x2ZXIsIHBhdHRlcm5dIG9mIHJlc29sdmVyVG9QYXR0ZXJuLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgaWYgKG1hdGNoZXMob2JqLCBwYXR0ZXJuKSkge1xuICAgICAgICAgICAgICB0cmFjZTQoXCJNYXRjaGVkIHBhdHRlcm46XCIsIGp1c3QocGF0dGVybikpO1xuICAgICAgICAgICAgICByZXNvbHZlci5yZXNvbHZlKG9iaik7XG4gICAgICAgICAgICAgIHJlc29sdmVyVG9QYXR0ZXJuLmRlbGV0ZShyZXNvbHZlcik7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHVwY2FsbFF1ZXVlKSB7XG4gICAgICAgICAgICB0cmFjZTQoXCJTdGFzaGluZyBvYmplY3QgaW4gdXBjYWxsUXVldWVcIik7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnVwY2FsbFF1ZXVlID0gaGFyZGVuKHVwY2FsbFF1ZXVlLmNvbmNhdChvYmopKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJhY2U0KFwiTm8gbWF0Y2ggeWV0LlwiKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNlbmRQYWNrZXRXYXRjaGVyOiB7XG4gICAgICAgIC8qKlxuICogQHBhcmFtIHtbXG4gKiAgIHtcbiAqICAgICByZXNvbHZlcjogVm93UmVzb2x2ZXI8YW55PjtcbiAqICAgICBtYXRjaDogVm93PFxuICogICAgICAgSUJDRXZlbnQ8J2Fja25vd2xlZGdlbWVudFBhY2tldCc+IHwgSUJDRXZlbnQ8J3RpbWVvdXRQYWNrZXQnPlxuICogICAgID47XG4gKiAgIH0sXG4gKiAgIFJlbW90ZTxQYWNrZXRTZW5kZXI+LFxuICogXX0gcmVzdWx0XG4gKiBAcGFyYW0ge3sgb3B0czogUGFja2V0T3B0aW9ucyB9fSBjdHhcbiAqL1xuICAgICAgICBvbkZ1bGZpbGxlZChbeyBtYXRjaCB9LCBzZW5kZXJdLCBjdHgpIHtcbiAgICAgICAgICByZXR1cm4gd2F0Y2goRShzZW5kZXIpLnNlbmRQYWNrZXQobWF0Y2gsIGN0eC5vcHRzKSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwYWNrZXRXYXNTZW50V2F0Y2hlcjoge1xuICAgICAgICBvbkZ1bGZpbGxlZCh7IGV2ZW50UGF0dGVybiwgcmVzdWx0ViB9LCBjdHgpIHtcbiAgICAgICAgICBjb25zdCB7IHBhdHRlcm5SZXNvbHZlciB9ID0gY3R4O1xuICAgICAgICAgIHBhdHRlcm5SZXNvbHZlci5yZXNvbHZlKGV2ZW50UGF0dGVybik7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdFY7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZWplY3RSZXNvbHZlckFuZFJldGhyb3dXYXRjaGVyOiB7XG4gICAgICAgIG9uUmVqZWN0ZWQocmVqLCB7IHJlc29sdmVyIH0pIHtcbiAgICAgICAgICByZXNvbHZlci5yZWplY3QocmVqKTtcbiAgICAgICAgICB0aHJvdyByZWo7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB3YXRjaFBhY2tldE1hdGNoOiB7XG4gICAgICAgIG9uRnVsZmlsbGVkKF8sIHsgcGF0dGVyblAgfSkge1xuICAgICAgICAgIGNvbnN0IHsgdm93LCByZXNvbHZlciB9ID0gbWFrZVZvd0tpdCgpO1xuICAgICAgICAgIGNvbnN0IHBhdHRlcm5WID0gd2F0Y2goXG4gICAgICAgICAgICBwYXR0ZXJuUCxcbiAgICAgICAgICAgIHRoaXMuZmFjZXRzLndhdGNoUGFja2V0UGF0dGVybixcbiAgICAgICAgICAgIGhhcmRlbih7IHJlc29sdmVyIH0pXG4gICAgICAgICAgKTtcbiAgICAgICAgICB3YXRjaChwYXR0ZXJuViwgdGhpcy5mYWNldHMud2F0Y2hEZWNyUGVuZGluZ1BhdHRlcm5zKTtcbiAgICAgICAgICByZXR1cm4gaGFyZGVuKHsgbWF0Y2g6IHZvdywgcmVzb2x2ZXIgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB3YXRjaERlY3JQZW5kaW5nUGF0dGVybnM6IHtcbiAgICAgICAgb25GdWxmaWxsZWQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmFjZXRzLnV0aWxzLmRlY3JQZW5kaW5nUGF0dGVybnMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25SZWplY3RlZCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5mYWNldHMudXRpbHMuZGVjclBlbmRpbmdQYXR0ZXJucygpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgd2F0Y2hQYWNrZXRQYXR0ZXJuOiB7XG4gICAgICAgIG9uRnVsZmlsbGVkKHBhdHRlcm4sIHsgcmVzb2x2ZXIgfSkge1xuICAgICAgICAgIGNvbnN0IHsgcmVzb2x2ZXJUb1BhdHRlcm4sIHVwY2FsbFF1ZXVlIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIHRyYWNlNChcIndhdGNoUGFja2V0UGF0dGVybiBvbkZ1bGZpbGxlZFwiLCBqdXN0KHBhdHRlcm4pKTtcbiAgICAgICAgICBpZiAoIXVwY2FsbFF1ZXVlKSB7XG4gICAgICAgICAgICB0cmFjZTQoXCJObyB1cGNhbGwgcXVldWUgeWV0LiAgU2F2ZSB0aGUgcGF0dGVybiBmb3IgbGF0ZXIuXCIpO1xuICAgICAgICAgICAgcmVzb2x2ZXJUb1BhdHRlcm4uaW5pdChyZXNvbHZlciwgcGF0dGVybik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGkzID0gdXBjYWxsUXVldWUuZmluZEluZGV4KChvYmopID0+IG1hdGNoZXMob2JqLCBwYXR0ZXJuKSk7XG4gICAgICAgICAgaWYgKGkzID09PSAtMSkge1xuICAgICAgICAgICAgdHJhY2U0KFwiTm8gbWF0Y2ggeWV0LiBTYXZlIHRoZSBwYXR0ZXJuIGZvciBsYXRlci5cIik7XG4gICAgICAgICAgICByZXNvbHZlclRvUGF0dGVybi5pbml0KHJlc29sdmVyLCBwYXR0ZXJuKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJhY2U0KFxuICAgICAgICAgICAgXCJTdWNjZXNzISBSZW1vdmUgdGhlIG1hdGNoZWQgb2JqZWN0IGZyb20gdGhlIHF1ZXVlLlwiLFxuICAgICAgICAgICAganVzdCh1cGNhbGxRdWV1ZVtpM10pXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXNvbHZlci5yZXNvbHZlKHVwY2FsbFF1ZXVlW2kzXSk7XG4gICAgICAgICAgdGhpcy5zdGF0ZS51cGNhbGxRdWV1ZSA9IGhhcmRlbihcbiAgICAgICAgICAgIHVwY2FsbFF1ZXVlLnNsaWNlKDAsIGkzKS5jb25jYXQodXBjYWxsUXVldWUuc2xpY2UoaTMgKyAxKSlcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICBvblJlamVjdGVkKHJlYXNvbiwgeyByZXNvbHZlciB9KSB7XG4gICAgICAgICAgcmVzb2x2ZXIucmVqZWN0KHJlYXNvbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1dGlsczoge1xuICAgICAgICBpbmNyUGVuZGluZ1BhdHRlcm5zKCkge1xuICAgICAgICAgIGNvbnN0IHsgcGVuZGluZywgcmVnLCB1cGNhbGxRdWV1ZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICB0aGlzLnN0YXRlLnBlbmRpbmcgKz0gMTtcbiAgICAgICAgICBpZiAoIXVwY2FsbFF1ZXVlKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnVwY2FsbFF1ZXVlID0gaGFyZGVuKFtdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlZyB8fCBwZW5kaW5nID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKHZvaWQgMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB3YXRjaCh0aGlzLmZhY2V0cy51dGlscy5zdWJzY3JpYmVUb1RyYW5zZmVycygpKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVjclBlbmRpbmdQYXR0ZXJucygpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlLnBlbmRpbmcgLT0gMTtcbiAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5wZW5kaW5nID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnN0YXRlLnBlbmRpbmcgPSAwO1xuICAgICAgICAgIHRoaXMuc3RhdGUudXBjYWxsUXVldWUgPSBudWxsO1xuICAgICAgICAgIHJldHVybiB3YXRjaCh0aGlzLmZhY2V0cy51dGlscy51bnN1YnNjcmliZUZyb21UcmFuc2ZlcnMoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHN1YnNjcmliZVRvVHJhbnNmZXJzKCkge1xuICAgICAgICAgIGNvbnN0IHsgbGNhLCByZWc6IGNhY2hlZFJlZyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBpZiAoY2FjaGVkUmVnKSB7XG4gICAgICAgICAgICByZXR1cm4gd2hlbihjYWNoZWRSZWcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB7IHRhcCB9ID0gdGhpcy5mYWNldHM7XG4gICAgICAgICAgY29uc3QgcmVnID0gd2F0Y2goRShsY2EpLm1vbml0b3JUcmFuc2ZlcnModGFwKSk7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5yZWcgPSByZWc7XG4gICAgICAgICAgcmV0dXJuIHdoZW4ocmVnKTtcbiAgICAgICAgfSxcbiAgICAgICAgdW5zdWJzY3JpYmVGcm9tVHJhbnNmZXJzKCkge1xuICAgICAgICAgIGNvbnN0IHsgcmVnLCBtb25pdG9yIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIGlmICghcmVnIHx8IG1vbml0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBmaW5pc2goY29udGV4dCkge1xuICAgICAgICB2b2lkIGNvbnRleHQuZmFjZXRzLnV0aWxzLnN1YnNjcmliZVRvVHJhbnNmZXJzKCk7XG4gICAgICB9XG4gICAgfVxuICApO1xuICBjb25zdCBtYWtlUGFja2V0VG9vbHMgPSBwaWNrRmFjZXQobWFrZVBhY2tldFRvb2xzS2l0LCBcInB1YmxpY1wiKTtcbiAgcmV0dXJuIG1ha2VQYWNrZXRUb29scztcbn07XG5oYXJkZW4ocHJlcGFyZVBhY2tldFRvb2xzKTtcblxuLyogLi4vb3JjaGVzdHJhdGlvbi9zcmMvZXhvcy9pYmMtcGFja2V0LmpzKi9cbnZhciBJQ1MyMF9UUkFOU0ZFUl9TVUNDRVNTX1JFU1VMVCA9IFwiQVE9PVwiO1xudmFyIHRyYWNlNSA9IG1ha2VUcmFjZXIoXCJJQkNQXCIpO1xudmFyIHsgRmFpbDogRmFpbDYsIGJhcmU6IGJhcmUzIH0gPSBhc3NlcnQ7XG52YXIgeyBWb3ckOiBWb3ckNSB9ID0gU2hhcGU7XG52YXIgY3JlYXRlU2VxdWVuY2VQYXR0ZXJuID0gKHNlcXVlbmNlKSA9PiB7XG4gIGNvbnN0IHNlcXVlbmNlUGF0dGVybnMgPSBbXTtcbiAgdHJ5IHtcbiAgICBjb25zdCBiaW50U2VxdWVuY2UgPSBCaWdJbnQoc2VxdWVuY2UpO1xuICAgIGJpbnRTZXF1ZW5jZSA+IDBuICYmIHNlcXVlbmNlUGF0dGVybnMucHVzaChiaW50U2VxdWVuY2UpO1xuICB9IGNhdGNoIChlMikge1xuICB9XG4gIGNvbnN0IG51bVNlcXVlbmNlID0gTnVtYmVyKHNlcXVlbmNlKTtcbiAgbnVtU2VxdWVuY2UgPiAwICYmIE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bVNlcXVlbmNlKSAmJiBzZXF1ZW5jZVBhdHRlcm5zLnB1c2gobnVtU2VxdWVuY2UpO1xuICBjb25zdCBzdHJTZXF1ZW5jZSA9IFN0cmluZyhzZXF1ZW5jZSk7XG4gIHN0clNlcXVlbmNlICYmIHNlcXVlbmNlUGF0dGVybnMucHVzaChzdHJTZXF1ZW5jZSk7XG4gIGlmICghc2VxdWVuY2VQYXR0ZXJucy5maW5kKChzZXEpID0+IHNlcSA9PT0gc2VxdWVuY2UpKSB7XG4gICAgc2VxdWVuY2VQYXR0ZXJucy5wdXNoKHNlcXVlbmNlKTtcbiAgfVxuICBzd2l0Y2ggKHNlcXVlbmNlUGF0dGVybnMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOlxuICAgICAgdGhyb3cgRmFpbDZgc2VxdWVuY2UgJHtzZXF1ZW5jZX0gaXMgbm90IHZhbGlkYDtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gc2VxdWVuY2VQYXR0ZXJuc1swXTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIE0ub3IoLi4uc2VxdWVuY2VQYXR0ZXJucyk7XG4gIH1cbn07XG5oYXJkZW4oY3JlYXRlU2VxdWVuY2VQYXR0ZXJuKTtcbnZhciBwcmVwYXJlSUJDVHJhbnNmZXJTZW5kZXIgPSAoem9uZSwgeyB3YXRjaCwgbWFrZUlCQ1JlcGx5S2l0IH0pID0+IHtcbiAgY29uc3QgbWFrZUlCQ1RyYW5zZmVyU2VuZGVyS2l0ID0gem9uZS5leG9DbGFzc0tpdChcbiAgICBcIklCQ1RyYW5zZmVyU2VuZGVyS2l0XCIsXG4gICAge1xuICAgICAgcHVibGljOiBNLmludGVyZmFjZShcIklCQ1RyYW5zZmVyU2VuZGVyXCIsIHtcbiAgICAgICAgc2VuZFBhY2tldDogTS5jYWxsKFZvdyQ1KE0uYW55KCkpLCBNLmFueSgpKS5yZXR1cm5zKFZvdyQ1KE0ucmVjb3JkKCkpKVxuICAgICAgfSksXG4gICAgICByZXNwb25zZVdhdGNoZXI6IE0uaW50ZXJmYWNlKFwicmVzcG9uc2VXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChbTS5yZWNvcmQoKV0sIE0ucmVjb3JkKCkpLnJldHVybnMoTS5hbnkoKSlcbiAgICAgIH0pLFxuICAgICAgdmVyaWZ5VHJhbnNmZXJTdWNjZXNzOiBNLmludGVyZmFjZShcInZlcmlmeVRyYW5zZmVyU3VjY2Vzc1wiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hbnkoKSkucmV0dXJucygpXG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqXG4gKiBAcGFyYW0ge3tcbiAqICAgZXhlY3V0ZVR4OiBMb2NhbENoYWluQWNjb3VudFsnZXhlY3V0ZVR4J107XG4gKiB9fSB0eEV4ZWN1dG9yXG4gKiBAcGFyYW0ge1R5cGVkSnNvbjwnL2liYy5hcHBsaWNhdGlvbnMudHJhbnNmZXIudjEuTXNnVHJhbnNmZXInPn0gdHJhbnNmZXJNc2dcbiAqL1xuICAgICh0eEV4ZWN1dG9yLCB0cmFuc2Zlck1zZykgPT4gKHtcbiAgICAgIHR4RXhlY3V0b3IsXG4gICAgICB0cmFuc2Zlck1zZzogaGFyZGVuKHRyYW5zZmVyTXNnKVxuICAgIH0pLFxuICAgIHtcbiAgICAgIHB1YmxpYzoge1xuICAgICAgICAvKipcbiAqIEBwYXJhbSB7Vm93PFxuICogICBJQkNFdmVudDwnYWNrbm93bGVkZ2VtZW50UGFja2V0Jz4gfCBJQkNFdmVudDwndGltZW91dFBhY2tldCc+XG4gKiA+fSBtYXRjaFxuICogQHBhcmFtIHtQYWNrZXRPcHRpb25zfSBvcHRzXG4gKi9cbiAgICAgICAgc2VuZFBhY2tldChtYXRjaCwgb3B0cykge1xuICAgICAgICAgIGNvbnN0IHsgdHhFeGVjdXRvciwgdHJhbnNmZXJNc2cgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgRSh0eEV4ZWN1dG9yKS5leGVjdXRlVHgoW3RyYW5zZmVyTXNnXSksXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy5yZXNwb25zZVdhdGNoZXIsXG4gICAgICAgICAgICB7IG9wdHMsIG1hdGNoIH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVzcG9uc2VXYXRjaGVyOiB7XG4gICAgICAgIC8qKlxuICogV2FpdCBmb3Igc3VjY2Vzc2Z1bGx5IHNlbmRpbmcgdGhlIHRyYW5zZmVyIHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge1tcbiAqICAgSnNvblNhZmU8XG4gKiAgICAgUmVzcG9uc2VUbzxcbiAqICAgICAgIFR5cGVkSnNvbjwnL2liYy5hcHBsaWNhdGlvbnMudHJhbnNmZXIudjEuTXNnVHJhbnNmZXInPlxuICogICAgID5cbiAqICAgPixcbiAqIF19IHJlc3BvbnNlXG4gKiBAcGFyYW0ge3tcbiAqICAgb3B0czogUGFja2V0T3B0aW9ucztcbiAqICAgbWF0Y2g6IFZvdzxcbiAqICAgICBJQkNFdmVudDwnYWNrbm93bGVkZ2VtZW50UGFja2V0Jz4gfCBJQkNFdmVudDwndGltZW91dFBhY2tldCc+XG4gKiAgID47XG4gKiB9fSBjdHhcbiAqL1xuICAgICAgICBvbkZ1bGZpbGxlZChbeyBzZXF1ZW5jZSB9XSwgY3R4KSB7XG4gICAgICAgICAgY29uc3QgeyBtYXRjaCwgb3B0cyB9ID0gY3R4O1xuICAgICAgICAgIGNvbnN0IHsgdHJhbnNmZXJNc2cgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgdHJhY2U1KFwic2VxdWVuY2VcIiwgc2VxdWVuY2UsIHRyYW5zZmVyTXNnKTtcbiAgICAgICAgICBjb25zdCByZXBseVBhY2tldFBhdHRlcm4gPSBNLnNwbGl0UmVjb3JkKHtcbiAgICAgICAgICAgIHNvdXJjZV9wb3J0OiB0cmFuc2Zlck1zZy5zb3VyY2VQb3J0LFxuICAgICAgICAgICAgc291cmNlX2NoYW5uZWw6IHRyYW5zZmVyTXNnLnNvdXJjZUNoYW5uZWwsXG4gICAgICAgICAgICBzZXF1ZW5jZTogY3JlYXRlU2VxdWVuY2VQYXR0ZXJuKHNlcXVlbmNlKVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnN0IHsgcmVzdWx0VjogYWNrRGF0YVYsIC4uLnJlc3QgfSA9IG1ha2VJQkNSZXBseUtpdChcbiAgICAgICAgICAgIHJlcGx5UGFja2V0UGF0dGVybixcbiAgICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgICAgeyBvcE5hbWU6IFwidHJhbnNmZXJcIiwgLi4ub3B0cyB9XG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCByZXN1bHRWID0gd2F0Y2goYWNrRGF0YVYsIHRoaXMuZmFjZXRzLnZlcmlmeVRyYW5zZmVyU3VjY2Vzcyk7XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbih7IHJlc3VsdFYsIC4uLnJlc3QgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB2ZXJpZnlUcmFuc2ZlclN1Y2Nlc3M6IHtcbiAgICAgICAgb25GdWxmaWxsZWQoYWNrRGF0YSkge1xuICAgICAgICAgIGxldCBvYmo7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG9iaiA9IEpTT04ucGFyc2UoYWNrRGF0YSk7XG4gICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICBGYWlsNmBJQ1MyMC0xIHRyYW5zZmVyIGFjayBkYXRhIGlzIG5vdCBKU09OOiAke2Fja0RhdGF9YDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgeyByZXN1bHQsIGVycm9yIH0gPSBvYmo7XG4gICAgICAgICAgZXJyb3IgPT09IHZvaWQgMCB8fCBGYWlsNmBJQ1MyMC0xIHRyYW5zZmVyIGVycm9yICR7ZXJyb3J9YDtcbiAgICAgICAgICByZXN1bHQgPz8gRmFpbDZgTWlzc2luZyByZXN1bHQgaW4gSUNTMjAtMSB0cmFuc2ZlciBhY2sgJHtvYmp9YDtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSBJQ1MyMF9UUkFOU0ZFUl9TVUNDRVNTX1JFU1VMVCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBkZWNvZGVBbmRQYXJzZSA9IChiNjQpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGF0b2IoYjY0KSk7XG4gICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgRmFpbDZgRGVjb2Rpbmcgb2YgYmFzZTY0LWVuY29kZWQgYWNrIG9iaiBvYmplY3QgZmFpbGVkOiAke0pTT04uc3RyaW5naWZ5KGI2NCl9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGNvbnN0IG91dGVyRGVjb2RlZCA9IGRlY29kZUFuZFBhcnNlKHJlc3VsdCk7XG4gICAgICAgICAgY29uc3QgaWJjQWNrID0gb3V0ZXJEZWNvZGVkPy5pYmNfYWNrICYmIGRlY29kZUFuZFBhcnNlKG91dGVyRGVjb2RlZC5pYmNfYWNrKTtcbiAgICAgICAgICBpYmNBY2s/LnJlc3VsdCA9PT0gSUNTMjBfVFJBTlNGRVJfU1VDQ0VTU19SRVNVTFQgfHwgRmFpbDZgSUNTMjAtMSB0cmFuc2ZlciB1bnN1Y2Nlc3NmdWwgd2l0aCBhY2sgcmVzdWx0OiAke291dGVyRGVjb2RlZH1gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICApO1xuICByZXR1cm4gKC4uLmFyZ3MpID0+IG1ha2VJQkNUcmFuc2ZlclNlbmRlcktpdCguLi5hcmdzKS5wdWJsaWM7XG59O1xuaGFyZGVuKHByZXBhcmVJQkNUcmFuc2ZlclNlbmRlcik7XG52YXIgcHJlcGFyZUlCQ1JlcGx5S2l0ID0gKHpvbmUsIHZvd1Rvb2xzKSA9PiB7XG4gIGNvbnN0IHsgd2F0Y2ggfSA9IHZvd1Rvb2xzO1xuICBjb25zdCBpYmNXYXRjaGVyID0gem9uZS5leG8oXG4gICAgXCJpYmNSZXN1bHRXYXRjaGVyXCIsXG4gICAgTS5pbnRlcmZhY2UoXCJwcm9jZXNzSUJDV2F0Y2hlclwiLCB7XG4gICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKFxuICAgICAgICBNLnNwbGl0UmVjb3JkKHsgZXZlbnQ6IE0uc3RyaW5nKCkgfSwgeyBhY2tub3dsZWRnZW1lbnQ6IE0uc3RyaW5nKCkgfSksXG4gICAgICAgIE0uc3BsaXRSZWNvcmQoe30sIHsgb3BOYW1lOiBNLnN0cmluZygpLCB0aW1lb3V0OiBNLnJlY29yZCgpIH0pXG4gICAgICApLnJldHVybnMoVm93JDUoTS5zdHJpbmcoKSkpXG4gICAgfSksXG4gICAge1xuICAgICAgLyoqXG4gKiBAcGFyYW0ge0lCQ0V2ZW50PCdhY2tub3dsZWRnZW1lbnRQYWNrZXQnPlxuICogICB8IElCQ0V2ZW50PCd0aW1lb3V0UGFja2V0Jz59IGliY0V2ZW50XG4gKiBAcGFyYW0ge1BhY2tldE9wdGlvbnN9IGN0eFxuICovXG4gICAgICBvbkZ1bGZpbGxlZChpYmNFdmVudCwgeyBvcE5hbWUgPSBcInVua25vd25cIiB9KSB7XG4gICAgICAgIGNvbnN0IHsgZXZlbnQgfSA9IGliY0V2ZW50O1xuICAgICAgICBzd2l0Y2ggKGV2ZW50KSB7XG4gICAgICAgICAgY2FzZSBcImFja25vd2xlZGdlbWVudFBhY2tldFwiOiB7XG4gICAgICAgICAgICBjb25zdCB7IGFja25vd2xlZGdlbWVudCB9ID0gaWJjRXZlbnQ7XG4gICAgICAgICAgICBhY2tub3dsZWRnZW1lbnQgfHwgRmFpbDZgYWNrbm93bGVkZ2VtZW50UGFja2V0IG1pc3NpbmcgJ2Fja25vd2xlZGdlbWVudCdgO1xuICAgICAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoYWNrbm93bGVkZ2VtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcInRpbWVvdXRQYWNrZXRcIjpcbiAgICAgICAgICAgIHRocm93IEZhaWw2YCR7YmFyZTMob3BOYW1lKX0gb3BlcmF0aW9uIHJlY2VpdmVkIHRpbWVvdXQgcGFja2V0YDtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgRmFpbDZgVW5leHBlY3RlZCBldmVudDogJHtldmVudH1gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICApO1xuICBjb25zdCBtYWtlSUJDUmVwbHlLaXQgPSAocmVwbHlQYWNrZXRQYXR0ZXJuLCBtYXRjaFYsIG9wdHMpID0+IHtcbiAgICBjb25zdCBldmVudFBhdHRlcm4gPSBNLm9yKFxuICAgICAgTS5zcGxpdFJlY29yZCh7XG4gICAgICAgIGV2ZW50OiBcImFja25vd2xlZGdlbWVudFBhY2tldFwiLFxuICAgICAgICBwYWNrZXQ6IHJlcGx5UGFja2V0UGF0dGVybixcbiAgICAgICAgYWNrbm93bGVkZ2VtZW50OiBNLnN0cmluZygpXG4gICAgICB9KSxcbiAgICAgIE0uc3BsaXRSZWNvcmQoe1xuICAgICAgICBldmVudDogXCJ0aW1lb3V0UGFja2V0XCIsXG4gICAgICAgIHBhY2tldDogcmVwbHlQYWNrZXRQYXR0ZXJuXG4gICAgICB9KVxuICAgICk7XG4gICAgY29uc3QgcmVzdWx0ViA9IHdhdGNoKG1hdGNoViwgaWJjV2F0Y2hlciwgb3B0cyk7XG4gICAgcmV0dXJuIGhhcmRlbih7IGV2ZW50UGF0dGVybiwgcmVzdWx0ViB9KTtcbiAgfTtcbiAgcmV0dXJuIG1ha2VJQkNSZXBseUtpdDtcbn07XG5oYXJkZW4ocHJlcGFyZUlCQ1JlcGx5S2l0KTtcbnZhciBwcmVwYXJlSUJDVG9vbHMgPSAoem9uZSwgdm93VG9vbHMpID0+IHtcbiAgY29uc3QgbWFrZUlCQ1JlcGx5S2l0ID0gcHJlcGFyZUlCQ1JlcGx5S2l0KHpvbmUsIHZvd1Rvb2xzKTtcbiAgY29uc3QgbWFrZUlCQ1RyYW5zZmVyU2VuZGVyID0gcHJlcGFyZUlCQ1RyYW5zZmVyU2VuZGVyKHpvbmUsIHtcbiAgICBtYWtlSUJDUmVwbHlLaXQsXG4gICAgLi4udm93VG9vbHNcbiAgfSk7XG4gIHJldHVybiBoYXJkZW4oeyBtYWtlSUJDVHJhbnNmZXJTZW5kZXIsIG1ha2VJQkNSZXBseUtpdCB9KTtcbn07XG5oYXJkZW4ocHJlcGFyZUlCQ1Rvb2xzKTtcblxuLyogLi4vb3JjaGVzdHJhdGlvbi9zcmMvZXhvcy9sb2NhbC1vcmNoZXN0cmF0aW9uLWFjY291bnQuanMqL1xudmFyIHsgZGV0YWlsczogWDUgfSA9IGFzc2VydDtcbnZhciBNc2dUcmFuc2ZlcjMgPSBDb2RlY0hlbHBlcihNc2dUcmFuc2Zlcik7XG52YXIgUXVlcnlEZW5vbUhhc2hSZXF1ZXN0MiA9IENvZGVjSGVscGVyKFF1ZXJ5RGVub21IYXNoUmVxdWVzdCk7XG52YXIgUXVlcnlEZW5vbUhhc2hSZXNwb25zZTIgPSBDb2RlY0hlbHBlcihRdWVyeURlbm9tSGFzaFJlc3BvbnNlKTtcbnZhciBRdWVyeUFsbEJhbGFuY2VzUmVxdWVzdDMgPSBDb2RlY0hlbHBlcihRdWVyeUFsbEJhbGFuY2VzUmVxdWVzdCk7XG52YXIgUXVlcnlCYWxhbmNlUmVxdWVzdDMgPSBDb2RlY0hlbHBlcihRdWVyeUJhbGFuY2VSZXF1ZXN0KTtcbnZhciBNc2dEZWxlZ2F0ZTMgPSBDb2RlY0hlbHBlcihNc2dEZWxlZ2F0ZSk7XG52YXIgTXNnVW5kZWxlZ2F0ZTMgPSBDb2RlY0hlbHBlcihNc2dVbmRlbGVnYXRlKTtcbnZhciBNc2dTZW5kMyA9IENvZGVjSGVscGVyKE1zZ1NlbmQpO1xudmFyIHRyYWNlNiA9IG1ha2VUcmFjZXIoXCJMb2NhbE9yY2hBY2NvdW50XCIpO1xudmFyIHsgVm93JDogVm93JDYgfSA9IFNoYXBlO1xudmFyIEVWb3ckMiA9IChzaGFwZSkgPT4gTS5vcihWb3ckNihzaGFwZSksIE0ucHJvbWlzZShcbiAgLyogc2hhcGUgKi9cbikpO1xudmFyIGV4dHJhY3RGaXJzdFF1ZXJ5UmVzdWx0ID0gKHJlc3VsdCkgPT4ge1xuICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG4gICAgYXNzZXJ0KFxuICAgICAgcmVzdWx0Lmxlbmd0aCA+IDAsXG4gICAgICBYNWBFeHBlY3RlZCByZXN1bHQgdG8gYmUgYSBub25lbXB0eSBhcnJheSwgZ290ICR7cmVzdWx0fWBcbiAgICApO1xuICAgIHJldHVybiByZXN1bHRbMF07XG4gIH1cbiAgcmV0dXJuIHsgcmVwbHk6IHJlc3VsdCB9O1xufTtcbnZhciBIb2xkZXJJID0gTS5pbnRlcmZhY2UoXCJob2xkZXJcIiwge1xuICAuLi5vcmNoZXN0cmF0aW9uQWNjb3VudE1ldGhvZHMsXG4gIGRlbGVnYXRlOiBNLmNhbGwoTS5zdHJpbmcoKSwgQW1vdW50U2hhcGUpLnJldHVybnMoVm93U2hhcGUpLFxuICB1bmRlbGVnYXRlOiBNLmNhbGwoTS5zdHJpbmcoKSwgQW1vdW50U2hhcGUpLnJldHVybnMoVm93U2hhcGUpLFxuICBkZXBvc2l0OiBNLmNhbGwoUGF5bWVudFNoYXBlKS5yZXR1cm5zKFZvd1NoYXBlKSxcbiAgd2l0aGRyYXc6IE0uY2FsbChBbW91bnRTaGFwZSkucmV0dXJucyhWb3ckNihQYXltZW50U2hhcGUpKSxcbiAgZXhlY3V0ZVR4OiBNLmNhbGwoTS5hcnJheU9mKE0ucmVjb3JkKCkpKS5yZXR1cm5zKFZvdyQ2KE0ucmVjb3JkKCkpKSxcbiAgc2VuZFRoZW5XYWl0Rm9yQWNrOiBNLmNhbGwoRVZvdyQyKE0ucmVtb3RhYmxlKFwiUGFja2V0U2VuZGVyXCIpKSkub3B0aW9uYWwoTS5hbnkoKSkucmV0dXJucyhFVm93JDIoTS5zdHJpbmcoKSkpLFxuICBtYXRjaEZpcnN0UGFja2V0OiBNLmNhbGwoTS5hbnkoKSkucmV0dXJucyhFVm93JDIoTS5hbnkoKSkpLFxuICBtb25pdG9yVHJhbnNmZXJzOiBNLmNhbGwoTS5yZW1vdGFibGUoXCJUYXJnZXRBcHBcIikpLnJldHVybnMoRVZvdyQyKE0uYW55KCkpKSxcbiAgcGFyc2VJbmJvdW5kVHJhbnNmZXI6IE0uY2FsbChNLnJlY29yZE9mKE0uc3RyaW5nKCksIE0uYW55KCkpKS5yZXR1cm5zKFxuICAgIFZvdyQ2KHtcbiAgICAgIGFtb3VudDogRGVub21BbW91bnRTaGFwZSxcbiAgICAgIGZyb21BY2NvdW50OiBNLnN0cmluZygpLFxuICAgICAgdG9BY2NvdW50OiBNLnN0cmluZygpLFxuICAgICAgZXh0cmE6IE0ucmVjb3JkT2YoTS5zdHJpbmcoKSwgTS5hbnkoKSlcbiAgICB9KVxuICApXG59KTtcbnZhciBQVUJMSUNfVE9QSUNTMiA9IHtcbiAgYWNjb3VudDogW1wiQWNjb3VudCBob2xkZXIgc3RhdHVzXCIsIE0uYW55KCldXG59O1xudmFyIEVyclRyYWNlTm90Rm91bmQgPSBcImRlbm9taW5hdGlvbiB0cmFjZSBub3QgZm91bmRcIjtcbnZhciBwcmVwYXJlTG9jYWxPcmNoZXN0cmF0aW9uQWNjb3VudEtpdCA9ICh6b25lLCB7XG4gIG1ha2VSZWNvcmRlcktpdCxcbiAgemNmLFxuICB0aW1lclNlcnZpY2UsXG4gIHZvd1Rvb2xzLFxuICBjaGFpbkh1YixcbiAgbG9jYWxjaGFpbixcbiAgem9lVG9vbHNcbn0pID0+IHtcbiAgY29uc3QgeyB3YXRjaCwgYXNWb3csIHdoZW4gfSA9IHZvd1Rvb2xzO1xuICBjb25zdCB7IG1ha2VJQkNUcmFuc2ZlclNlbmRlciB9ID0gcHJlcGFyZUlCQ1Rvb2xzKFxuICAgIHpvbmUuc3ViWm9uZShcImliY1Rvb2xzXCIpLFxuICAgIHZvd1Rvb2xzXG4gICk7XG4gIGNvbnN0IG1ha2VQYWNrZXRUb29scyA9IHByZXBhcmVQYWNrZXRUb29scyhcbiAgICB6b25lLnN1YlpvbmUoXCJwYWNrZXRUb29sc1wiKSxcbiAgICB2b3dUb29sc1xuICApO1xuICBjb25zdCB0aW1lc3RhbXBIZWxwZXIgPSBtYWtlVGltZXN0YW1wSGVscGVyKHRpbWVyU2VydmljZSk7XG4gIGNvbnN0IG1ha2VMb2NhbE9yY2hlc3RyYXRpb25BY2NvdW50S2l0ID0gem9uZS5leG9DbGFzc0tpdChcbiAgICBcIkxvY2FsIE9yY2hlc3RyYXRpb24gQWNjb3VudCBLaXRcIixcbiAgICB7XG4gICAgICBoZWxwZXI6IE0uaW50ZXJmYWNlKFwiaGVscGVyXCIsIHtcbiAgICAgICAgYW1vdW50VG9Db2luOiBNLmNhbGwoQW1vdW50QXJnU2hhcGUpLnJldHVybnMoTS5yZWNvcmQoKSlcbiAgICAgIH0pLFxuICAgICAgaG9sZGVyOiBIb2xkZXJJLFxuICAgICAgdW5kZWxlZ2F0ZVdhdGNoZXI6IE0uaW50ZXJmYWNlKFwidW5kZWxlZ2F0ZVdhdGNoZXJcIiwge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKFtcbiAgICAgICAgICBNLnNwbGl0UmVjb3JkKHsgY29tcGxldGlvblRpbWU6IFRpbWVzdGFtcFByb3RvU2hhcGUgfSlcbiAgICAgICAgXSkub3B0aW9uYWwoTS5hcnJheU9mKE0udW5kZWZpbmVkKCkpKS5yZXR1cm5zKFZvd1NoYXBlKVxuICAgICAgfSksXG4gICAgICB0cmFuc2ZlcldhdGNoZXI6IE0uaW50ZXJmYWNlKFwidHJhbnNmZXJXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLm5hdCgpKS5vcHRpb25hbCh7XG4gICAgICAgICAgb3B0czogTS5vcihNLnVuZGVmaW5lZCgpLCBJQkNUcmFuc2Zlck9wdGlvbnNTaGFwZSksXG4gICAgICAgICAgcm91dGU6IFRyYW5zZmVyUm91dGVTaGFwZVxuICAgICAgICB9KS5yZXR1cm5zKFZvdyQ2KE0ucmVjb3JkKCkpKVxuICAgICAgfSksXG4gICAgICBleHRyYWN0Rmlyc3RSZXN1bHRXYXRjaGVyOiBNLmludGVyZmFjZShcImV4dHJhY3RGaXJzdFJlc3VsdFdhdGNoZXJcIiwge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKFtNLnJlY29yZCgpXSkub3B0aW9uYWwoTS5hcnJheU9mKE0udW5kZWZpbmVkKCkpKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICB9KSxcbiAgICAgIHJldHVyblZvaWRXYXRjaGVyOiBNLmludGVyZmFjZShcInJldHVyblZvaWRXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFueSgpKS5vcHRpb25hbChNLmFueSgpKS5yZXR1cm5zKE0udW5kZWZpbmVkKCkpXG4gICAgICB9KSxcbiAgICAgIHNlYXRFeGl0ZXJIYW5kbGVyOiBNLmludGVyZmFjZShcInNlYXRFeGl0ZXJIYW5kbGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLnVuZGVmaW5lZCgpLCBNLnJlbW90YWJsZSgpKS5yZXR1cm5zKFxuICAgICAgICAgIE0udW5kZWZpbmVkKClcbiAgICAgICAgKSxcbiAgICAgICAgb25SZWplY3RlZDogTS5jYWxsKE0uZXJyb3IoKSwgTS5yZW1vdGFibGUoKSkucmV0dXJucyhNLnVuZGVmaW5lZCgpKVxuICAgICAgfSksXG4gICAgICBnZXRCYWxhbmNlV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJnZXRCYWxhbmNlV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoQW1vdW50U2hhcGUsIERlbm9tU2hhcGUpLnJldHVybnMoRGVub21BbW91bnRTaGFwZSlcbiAgICAgIH0pLFxuICAgICAgcXVlcnlCYWxhbmNlV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJxdWVyeUJhbGFuY2VXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChUeXBlZEpzb25TaGFwZSkucmV0dXJucyhEZW5vbUFtb3VudFNoYXBlKVxuICAgICAgfSksXG4gICAgICBxdWVyeUJhbGFuY2VzV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJxdWVyeUJhbGFuY2VzV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoVHlwZWRKc29uU2hhcGUpLnJldHVybnMoXG4gICAgICAgICAgTS5hcnJheU9mKERlbm9tQW1vdW50U2hhcGUpXG4gICAgICAgIClcbiAgICAgIH0pLFxuICAgICAgcGFyc2VJbmJvdW5kVHJhbnNmZXJXYXRjaGVyOiBNLmludGVyZmFjZShcInBhcnNlSW5ib3VuZFRyYW5zZmVyV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hbnkoKSwgTS5yZWNvcmQoKSkucmV0dXJucyhNLnJlY29yZCgpKSxcbiAgICAgICAgb25SZWplY3RlZDogTS5jYWxsKE0uYW55KCksIE0ucmVjb3JkKCkpLnJldHVybnMoTS5yZWNvcmQoKSlcbiAgICAgIH0pLFxuICAgICAgaW52aXRhdGlvbk1ha2VyczogTS5pbnRlcmZhY2UoXCJpbnZpdGF0aW9uTWFrZXJzXCIsIHtcbiAgICAgICAgQ2xvc2VBY2NvdW50OiBNLmNhbGwoKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgICAgICAgRGVsZWdhdGU6IE0uY2FsbChNLnN0cmluZygpLCBBbW91bnRTaGFwZSkucmV0dXJucyhNLnByb21pc2UoKSksXG4gICAgICAgIERlcG9zaXQ6IE0uY2FsbCgpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICAgICAgICBTZW5kOiBNLmNhbGwoKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgICAgICAgU2VuZEFsbDogTS5jYWxsKCkucmV0dXJucyhNLnByb21pc2UoKSksXG4gICAgICAgIFRyYW5zZmVyOiBNLmNhbGwoKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgICAgICAgVW5kZWxlZ2F0ZTogTS5jYWxsKE0uc3RyaW5nKCksIEFtb3VudFNoYXBlKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgICAgICAgV2l0aGRyYXc6IE0uY2FsbCgpLnJldHVybnMoTS5wcm9taXNlKCkpXG4gICAgICB9KVxuICAgIH0sXG4gICAgLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gaW5pdFN0YXRlXG4gKiBAcGFyYW0ge0xvY2FsQ2hhaW5BY2NvdW50fSBpbml0U3RhdGUuYWNjb3VudFxuICogQHBhcmFtIHtDb3Ntb3NDaGFpbkFkZHJlc3N9IGluaXRTdGF0ZS5hZGRyZXNzXG4gKiBAcGFyYW0ge1JlbW90ZTxTdG9yYWdlTm9kZT59IFtpbml0U3RhdGUuc3RvcmFnZU5vZGVdXG4gKiBAcmV0dXJucyB7U3RhdGV9XG4gKi9cbiAgICAoeyBhY2NvdW50LCBhZGRyZXNzLCBzdG9yYWdlTm9kZSB9KSA9PiB7XG4gICAgICBjb25zdCB0b3BpY0tpdCA9IHN0b3JhZ2VOb2RlID8gbWFrZVJlY29yZGVyS2l0KHN0b3JhZ2VOb2RlLCBQVUJMSUNfVE9QSUNTMi5hY2NvdW50WzFdKSA6IHZvaWQgMDtcbiAgICAgIGlmICh0b3BpY0tpdCkge1xuICAgICAgICB2b2lkIEUodG9waWNLaXQucmVjb3JkZXIpLndyaXRlKFwiXCIpO1xuICAgICAgfVxuICAgICAgY29uc3QgcGFja2V0VG9vbHMgPSBtYWtlUGFja2V0VG9vbHMoYWNjb3VudCk7XG4gICAgICByZXR1cm4geyBhY2NvdW50LCBhZGRyZXNzLCBwYWNrZXRUb29scywgdG9waWNLaXQgfTtcbiAgICB9LFxuICAgIHtcbiAgICAgIGhlbHBlcjoge1xuICAgICAgICAvKipcbiAqIEBwYXJhbSB7QW1vdW50QXJnfSBhbW91bnRcbiAqIEByZXR1cm5zIHtDb2lufVxuICovXG4gICAgICAgIGFtb3VudFRvQ29pbihhbW91bnQpIHtcbiAgICAgICAgICByZXR1cm4gY29lcmNlQ29pbihjaGFpbkh1YiwgYW1vdW50KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGludml0YXRpb25NYWtlcnM6IHtcbiAgICAgICAgLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsaWRhdG9yQWRkcmVzc1xuICogQHBhcmFtIHtBbW91bnQ8J25hdCc+fSBlcnRwQW1vdW50XG4gKi9cbiAgICAgICAgRGVsZWdhdGUodmFsaWRhdG9yQWRkcmVzcywgZXJ0cEFtb3VudCkge1xuICAgICAgICAgIHRyYWNlNihcIkRlbGVnYXRlXCIsIHZhbGlkYXRvckFkZHJlc3MsIGVydHBBbW91bnQpO1xuICAgICAgICAgIHJldHVybiB6Y2YubWFrZUludml0YXRpb24oKHNlYXQpID0+IHtcbiAgICAgICAgICAgIHNlYXQuZXhpdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgICB0aGlzLmZhY2V0cy5ob2xkZXIuZGVsZWdhdGUodmFsaWRhdG9yQWRkcmVzcywgZXJ0cEFtb3VudClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSwgXCJEZWxlZ2F0ZVwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgRGVwb3NpdCgpIHtcbiAgICAgICAgICB0cmFjZTYoXCJEZXBvc2l0XCIpO1xuICAgICAgICAgIHJldHVybiB6Y2YubWFrZUludml0YXRpb24oXG4gICAgICAgICAgICAoc2VhdCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCB7IGdpdmUgfSA9IHNlYXQuZ2V0UHJvcG9zYWwoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgICAgIHpvZVRvb2xzLmxvY2FsVHJhbnNmZXIoXG4gICAgICAgICAgICAgICAgICBzZWF0LFxuICAgICAgICAgICAgICAgICAgLyogQHRzLWV4cGVjdC1lcnJvciBMb2NhbEFjY291bnQgdnMgTG9jYWxBY2NvdW50TWV0aG9kcyovXG4gICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmFjY291bnQsXG4gICAgICAgICAgICAgICAgICBnaXZlXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICB0aGlzLmZhY2V0cy5zZWF0RXhpdGVySGFuZGxlcixcbiAgICAgICAgICAgICAgICBzZWF0XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJEZXBvc2l0XCIsXG4gICAgICAgICAgICB2b2lkIDAsXG4gICAgICAgICAgICBNLnNwbGl0UmVjb3JkKHsgZ2l2ZTogQW55TmF0QW1vdW50c1JlY29yZCwgd2FudDoge30gfSlcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWxpZGF0b3JBZGRyZXNzXG4gKiBAcGFyYW0ge0Ftb3VudDwnbmF0Jz59IGVydHBBbW91bnRcbiAqL1xuICAgICAgICBVbmRlbGVnYXRlKHZhbGlkYXRvckFkZHJlc3MsIGVydHBBbW91bnQpIHtcbiAgICAgICAgICB0cmFjZTYoXCJVbmRlbGVnYXRlXCIsIHZhbGlkYXRvckFkZHJlc3MsIGVydHBBbW91bnQpO1xuICAgICAgICAgIHJldHVybiB6Y2YubWFrZUludml0YXRpb24oKHNlYXQpID0+IHtcbiAgICAgICAgICAgIHNlYXQuZXhpdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgICB0aGlzLmZhY2V0cy5ob2xkZXIudW5kZWxlZ2F0ZSh2YWxpZGF0b3JBZGRyZXNzLCBlcnRwQW1vdW50KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9LCBcIlVuZGVsZWdhdGVcIik7XG4gICAgICAgIH0sXG4gICAgICAgIENsb3NlQWNjb3VudCgpIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcihcIm5vdCB5ZXQgaW1wbGVtZW50ZWRcIik7XG4gICAgICAgIH0sXG4gICAgICAgIFNlbmQoKSB7XG4gICAgICAgICAgY29uc3Qgb2ZmZXJIYW5kbGVyID0gKHNlYXQsIHsgdG9BY2NvdW50LCBhbW91bnQgfSkgPT4ge1xuICAgICAgICAgICAgc2VhdC5leGl0KCk7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2godGhpcy5mYWNldHMuaG9sZGVyLnNlbmQodG9BY2NvdW50LCBhbW91bnQpKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiB6Y2YubWFrZUludml0YXRpb24ob2ZmZXJIYW5kbGVyLCBcIlNlbmRcIik7XG4gICAgICAgIH0sXG4gICAgICAgIFNlbmRBbGwoKSB7XG4gICAgICAgICAgY29uc3Qgb2ZmZXJIYW5kbGVyID0gKHNlYXQsIHsgdG9BY2NvdW50LCBhbW91bnRzIH0pID0+IHtcbiAgICAgICAgICAgIHNlYXQuZXhpdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKHRoaXMuZmFjZXRzLmhvbGRlci5zZW5kQWxsKHRvQWNjb3VudCwgYW1vdW50cykpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIHpjZi5tYWtlSW52aXRhdGlvbihvZmZlckhhbmRsZXIsIFwiU2VuZEFsbFwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgVHJhbnNmZXIoKSB7XG4gICAgICAgICAgY29uc3Qgb2ZmZXJIYW5kbGVyID0gKHNlYXQsIHsgYW1vdW50LCBkZXN0aW5hdGlvbiwgb3B0cyB9KSA9PiB7XG4gICAgICAgICAgICBzZWF0LmV4aXQoKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICAgICAgdGhpcy5mYWNldHMuaG9sZGVyLnRyYW5zZmVyKGRlc3RpbmF0aW9uLCBhbW91bnQsIG9wdHMpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIHpjZi5tYWtlSW52aXRhdGlvbihvZmZlckhhbmRsZXIsIFwiVHJhbnNmZXJcIik7XG4gICAgICAgIH0sXG4gICAgICAgIFdpdGhkcmF3KCkge1xuICAgICAgICAgIHRyYWNlNihcIldpdGhkcmF3XCIpO1xuICAgICAgICAgIHJldHVybiB6Y2YubWFrZUludml0YXRpb24oXG4gICAgICAgICAgICAoc2VhdCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCB7IHdhbnQgfSA9IHNlYXQuZ2V0UHJvcG9zYWwoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgICAgIHpvZVRvb2xzLndpdGhkcmF3VG9TZWF0KFxuICAgICAgICAgICAgICAgICAgLyogQHRzLWV4cGVjdC1lcnJvciBMb2NhbEFjY291bnQgdnMgTG9jYWxBY2NvdW50TWV0aG9kcyovXG4gICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmFjY291bnQsXG4gICAgICAgICAgICAgICAgICBzZWF0LFxuICAgICAgICAgICAgICAgICAgd2FudFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgdGhpcy5mYWNldHMuc2VhdEV4aXRlckhhbmRsZXIsXG4gICAgICAgICAgICAgICAgc2VhdFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiV2l0aGRyYXdcIixcbiAgICAgICAgICAgIHZvaWQgMCxcbiAgICAgICAgICAgIE0uc3BsaXRSZWNvcmQoeyBnaXZlOiB7fSwgd2FudDogQW55TmF0QW1vdW50c1JlY29yZCB9KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1bmRlbGVnYXRlV2F0Y2hlcjoge1xuICAgICAgICAvKipcbiAqIEBwYXJhbSB7W1xuICogICBKc29uU2FmZTxcbiAqICAgICBUeXBlZEpzb248Jy9jb3Ntb3Muc3Rha2luZy52MWJldGExLk1zZ1VuZGVsZWdhdGVSZXNwb25zZSc+XG4gKiAgID4sXG4gKiBdfSByZXNwb25zZVxuICovXG4gICAgICAgIG9uRnVsZmlsbGVkKHJlc3BvbnNlKSB7XG4gICAgICAgICAgY29uc3QgeyBjb21wbGV0aW9uVGltZSB9ID0gcmVzcG9uc2VbMF07XG4gICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgRSh0aW1lclNlcnZpY2UpLndha2VBdChcbiAgICAgICAgICAgICAgLyogaWdub3JlIG5hbm9zZWNvbmRzIGFuZCBqdXN0IHVzZSBzZWNvbmRzIGZyb20gVGltZXN0YW1wKi9cbiAgICAgICAgICAgICAgQmlnSW50KGNvbXBsZXRpb25UaW1lLnNlY29uZHMpICsgbWF4Q2xvY2tTa2V3XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgdGhpcy5mYWNldHMucmV0dXJuVm9pZFdhdGNoZXJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdHJhbnNmZXJXYXRjaGVyOiB7XG4gICAgICAgIC8qKlxuICogQHBhcmFtIHtiaWdpbnR9IHRpbWVvdXRUaW1lc3RhbXBcbiAqIEBwYXJhbSB7e1xuICogICBvcHRzPzogT21pdDxJQkNNc2dUcmFuc2Zlck9wdGlvbnMsICdmb3J3YXJkT3B0cyc+O1xuICogICByb3V0ZTogVHJhbnNmZXJSb3V0ZTtcbiAqIH19IGN0eFxuICovXG4gICAgICAgIG9uRnVsZmlsbGVkKHRpbWVvdXRUaW1lc3RhbXAsIHsgb3B0cywgcm91dGUgfSkge1xuICAgICAgICAgIGNvbnN0IHsgZm9yd2FyZEluZm8sIC4uLnRyYW5zZmVyRGV0YWlscyB9ID0gcm91dGU7XG4gICAgICAgICAgbGV0IG1lbW87XG4gICAgICAgICAgaWYgKG9wdHMgJiYgXCJtZW1vXCIgaW4gb3B0cykge1xuICAgICAgICAgICAgbWVtbyA9IG9wdHMubWVtbztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZvcndhcmRJbmZvKSB7XG4gICAgICAgICAgICBtZW1vID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICBmb3J3YXJkOiB7XG4gICAgICAgICAgICAgICAgLi4uZm9yd2FyZEluZm8uZm9yd2FyZCxcbiAgICAgICAgICAgICAgICBuZXh0OiBtZW1vXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB0cmFuc2Zlck1zZyA9IE1zZ1RyYW5zZmVyMy50eXBlZEpzb24oe1xuICAgICAgICAgICAgLi4udHJhbnNmZXJEZXRhaWxzLFxuICAgICAgICAgICAgc2VuZGVyOiB0aGlzLnN0YXRlLmFkZHJlc3MudmFsdWUsXG4gICAgICAgICAgICB0aW1lb3V0SGVpZ2h0OiBvcHRzPy50aW1lb3V0SGVpZ2h0LFxuICAgICAgICAgICAgdGltZW91dFRpbWVzdGFtcCxcbiAgICAgICAgICAgIG1lbW9cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb25zdCB7IGhvbGRlciB9ID0gdGhpcy5mYWNldHM7XG4gICAgICAgICAgY29uc3Qgc2VuZGVyID0gbWFrZUlCQ1RyYW5zZmVyU2VuZGVyKFxuICAgICAgICAgICAgLyoqIEB0eXBlIHthbnl9ICovXG4gICAgICAgICAgICBob2xkZXIsXG4gICAgICAgICAgICB0cmFuc2Zlck1zZ1xuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIGhvbGRlci5zZW5kVGhlbldhaXRGb3JBY2soc2VuZGVyKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8qKlxuICogdGFrZXMgYW4gYXJyYXkgb2YgcmVzdWx0cyAoZnJvbSBgZXhlY3V0ZUVuY29kZWRUeGApIGFuZCByZXR1cm5zIHRoZVxuICogZmlyc3QgcmVzdWx0XG4gKi9cbiAgICAgIGV4dHJhY3RGaXJzdFJlc3VsdFdhdGNoZXI6IHtcbiAgICAgICAgLyoqIEBwYXJhbSB7UmVjb3JkPHVua25vd24sIHVua25vd24+W119IHJlc3VsdHMgKi9cbiAgICAgICAgb25GdWxmaWxsZWQocmVzdWx0cykge1xuICAgICAgICAgIHJlc3VsdHMubGVuZ3RoID09PSAxIHx8IHRocm93UmVkYWN0ZWRgZXhwZWN0ZWQgZXhhY3RseSBvbmUgcmVzdWx0OyBnb3QgJHtyZXN1bHRzfWA7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdHNbMF07XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZXR1cm5Wb2lkV2F0Y2hlcjoge1xuICAgICAgICBvbkZ1bGZpbGxlZCgpIHtcbiAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLyoqXG4gKiBoYW5kbGVzIGEgcmVxdWVzdCBmb3IgYmFsYW5jZSBmcm9tIGEgYmFuayBwdXJzZSBhbmQgcmV0dXJucyB0aGUgYmFsYW5jZVxuICogYXMgYSBDaGFpbiBBbW91bnRcbiAqL1xuICAgICAgZ2V0QmFsYW5jZVdhdGNoZXI6IHtcbiAgICAgICAgLyoqXG4gKiBAcGFyYW0ge0Ftb3VudDwnbmF0Jz59IG5hdEFtb3VudFxuICogQHBhcmFtIHtEZW5vbUFtb3VudFsnZGVub20nXX0gZGVub21cbiAqIEByZXR1cm5zIHtEZW5vbUFtb3VudH1cbiAqL1xuICAgICAgICBvbkZ1bGZpbGxlZChuYXRBbW91bnQsIGRlbm9tKSB7XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbih7IGRlbm9tLCB2YWx1ZTogbmF0QW1vdW50LnZhbHVlIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLyoqIGV4aXRzIG9yIGZhaWxzIGEgc2VhdCBkZXBlbmRpbmcgdGhlIG91dGNvbWUgKi9cbiAgICAgIHNlYXRFeGl0ZXJIYW5kbGVyOiB7XG4gICAgICAgIC8qKlxuICogQHBhcmFtIHt1bmRlZmluZWR9IF9cbiAqIEBwYXJhbSB7WkNGU2VhdH0gc2VhdFxuICovXG4gICAgICAgIG9uRnVsZmlsbGVkKF8sIHNlYXQpIHtcbiAgICAgICAgICBzZWF0LmV4aXQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gKiBAcGFyYW0ge0Vycm9yfSByZWFzb25cbiAqIEBwYXJhbSB7WkNGU2VhdH0gc2VhdFxuICovXG4gICAgICAgIG9uUmVqZWN0ZWQocmVhc29uLCBzZWF0KSB7XG4gICAgICAgICAgc2VhdC5leGl0KHJlYXNvbik7XG4gICAgICAgICAgdGhyb3cgcmVhc29uO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLyoqXG4gKiBoYW5kbGVzIGEgUXVlcnlCYWxhbmNlUmVxdWVzdCBmcm9tIGxvY2FsY2hhaW4ucXVlcnkgYW5kIHJldHVybnMgdGhlXG4gKiBiYWxhbmNlIGFzIGEgRGVub21BbW91bnRcbiAqL1xuICAgICAgcXVlcnlCYWxhbmNlV2F0Y2hlcjoge1xuICAgICAgICAvKipcbiAqIEBwYXJhbSB7UmVzcG9uc2VUbzxcbiAqICAgVHlwZWRKc29uPCcvY29zbW9zLmJhbmsudjFiZXRhMS5RdWVyeUJhbGFuY2VSZXF1ZXN0Jz5cbiAqID59IHJlc3VsdFxuICogQHJldHVybnMge0Rlbm9tQW1vdW50fVxuICovXG4gICAgICAgIG9uRnVsZmlsbGVkKHJlc3VsdCkge1xuICAgICAgICAgIGNvbnN0IHsgYmFsYW5jZSB9ID0gcmVzdWx0O1xuICAgICAgICAgIGlmICghYmFsYW5jZSB8fCAhYmFsYW5jZT8uZGVub20pIHtcbiAgICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgRXhwZWN0ZWQgYmFsYW5jZSAke3F1b3RlKHJlc3VsdCl9O2A7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBoYXJkZW4odG9EZW5vbUFtb3VudChiYWxhbmNlKSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvKipcbiAqIGhhbmRsZXMgYSBRdWVyeUFsbEJhbGFuY2VzUmVxdWVzdCBmcm9tIGxvY2FsY2hhaW4ucXVlcnkgYW5kIHJldHVybnMgdGhlXG4gKiBiYWxhbmNlcyBhcyBhIERlbm9tQW1vdW50c1xuICovXG4gICAgICBxdWVyeUJhbGFuY2VzV2F0Y2hlcjoge1xuICAgICAgICAvKipcbiAqIEBwYXJhbSB7SnNvblNhZmU8XG4gKiAgIFJlc3BvbnNlVG88XG4gKiAgICAgVHlwZWRKc29uPCcvY29zbW9zLmJhbmsudjFiZXRhMS5RdWVyeUFsbEJhbGFuY2VzUmVxdWVzdCc+XG4gKiAgID5cbiAqID59IHJlc3VsdFxuICogQHJldHVybnMge0Rlbm9tQW1vdW50W119XG4gKi9cbiAgICAgICAgb25GdWxmaWxsZWQocmVzdWx0KSB7XG4gICAgICAgICAgY29uc3QgeyBiYWxhbmNlcyB9ID0gcmVzdWx0O1xuICAgICAgICAgIGlmICghYmFsYW5jZXMgfHwgIUFycmF5LmlzQXJyYXkoYmFsYW5jZXMpKSB7XG4gICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYEV4cGVjdGVkIGJhbGFuY2VzICR7cXVvdGUocmVzdWx0KX07YDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbihiYWxhbmNlcy5tYXAodG9EZW5vbUFtb3VudCkpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcGFyc2VJbmJvdW5kVHJhbnNmZXJXYXRjaGVyOiB7XG4gICAgICAgIC8qKlxuICogQHBhcmFtIHt7IGVycm9yPzogc3RyaW5nOyByZXBseTogVHlwZWRKc29uPHN0cmluZz4gfVtdXG4gKiAgIHwgVHlwZWRKc29uPHN0cmluZz59IHJlc3VsdFxuICogQHBhcmFtIHtBd2FpdGVkPFxuICogICBSZXR1cm5UeXBlPExvY2FsQWNjb3VudE1ldGhvZHNbJ3BhcnNlSW5ib3VuZFRyYW5zZmVyJ10+XG4gKiA+fSBuYWl2ZVJlc3VsdFxuICovXG4gICAgICAgIG9uRnVsZmlsbGVkKHJlc3VsdCwgbmFpdmVSZXN1bHQpIHtcbiAgICAgICAgICBjb25zdCB7IGVycm9yLCByZXBseSB9ID0gZXh0cmFjdEZpcnN0UXVlcnlSZXN1bHQocmVzdWx0KTtcbiAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvci5pbmNsdWRlcyhFcnJUcmFjZU5vdEZvdW5kKSkge1xuICAgICAgICAgICAgICByZXR1cm4gbmFpdmVSZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgSUJDIGRlbm9tIHRyYWNlIHF1ZXJ5IGZhaWxlZDogJHtlcnJvcn1gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgbG9jYWxEZW5vbUhhc2ggPSBRdWVyeURlbm9tSGFzaFJlc3BvbnNlMi5mcm9tVHlwZWQocmVwbHkpO1xuICAgICAgICAgIGNvbnN0IGxvY2FsRGVub20gPSBgaWJjLyR7bG9jYWxEZW5vbUhhc2guaGFzaH1gO1xuICAgICAgICAgIGNvbnN0IHsgYW1vdW50LCAuLi5yZXN0IH0gPSBuYWl2ZVJlc3VsdDtcbiAgICAgICAgICBjb25zdCB7IGRlbm9tOiBfLCAuLi5hbW91bnRSZXN0IH0gPSBhbW91bnQ7XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbih7XG4gICAgICAgICAgICAuLi5yZXN0LFxuICAgICAgICAgICAgYW1vdW50OiB7IC4uLmFtb3VudFJlc3QsIGRlbm9tOiBsb2NhbERlbm9tIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gKiBAcGFyYW0ge3Vua25vd259IHJlYXNvblxuICogQHBhcmFtIHtBd2FpdGVkPFxuICogICBSZXR1cm5UeXBlPExvY2FsQWNjb3VudE1ldGhvZHNbJ3BhcnNlSW5ib3VuZFRyYW5zZmVyJ10+XG4gKiA+fSBuYWl2ZVJlc3VsdFxuICovXG4gICAgICAgIG9uUmVqZWN0ZWQocmVhc29uLCBuYWl2ZVJlc3VsdCkge1xuICAgICAgICAgIGlmIChyZWFzb24gaW5zdGFuY2VvZiBFcnJvciAmJiBTdHJpbmcocmVhc29uLm1lc3NhZ2UpLmluY2x1ZGVzKEVyclRyYWNlTm90Rm91bmQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmFpdmVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IHJlYXNvbjtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGhvbGRlcjoge1xuICAgICAgICAvKiogQHR5cGUge0hvc3RPZjxPcmNoZXN0cmF0aW9uQWNjb3VudENvbW1vblsnYXNDb250aW51aW5nT2ZmZXInXT59ICovXG4gICAgICAgIGFzQ29udGludWluZ09mZmVyKCkge1xuICAgICAgICAgIHJldHVybiBhc1Zvdyhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBhd2FpdCBudWxsO1xuICAgICAgICAgICAgY29uc3QgeyBob2xkZXIsIGludml0YXRpb25NYWtlcnM6IGltIH0gPSB0aGlzLmZhY2V0cztcbiAgICAgICAgICAgIGNvbnN0IGludml0YXRpb25NYWtlcnMgPSAoXG4gICAgICAgICAgICAgIC8qKiBAdHlwZSB7SW52aXRhdGlvbk1ha2Vyc30gKi9cbiAgICAgICAgICAgICAgLyoqIEB0eXBlIHt1bmtub3dufSAqL1xuICAgICAgICAgICAgICBpbVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiBoYXJkZW4oe1xuICAgICAgICAgICAgICAvKiBnZXRQdWJsaWNUb3BpY3MgcmV0dXJucyBhIHZvdywgZm9yIG1lbWJyYW5lIGNvbXBhdGliaWxpdHkuKi9cbiAgICAgICAgICAgICAgLyogaXQncyBzYWZlIHRvIHVud3JhcCB0byBhIHByb21pc2UgYW5kIGdldCB0aGUgcmVzdWx0IGFzIHdlKi9cbiAgICAgICAgICAgICAgLyogZXhwZWN0IHRoaXMgY29tcGxldGUgaW4gdGhlIHNhbWUgcnVuKi9cbiAgICAgICAgICAgICAgcHVibGljU3Vic2NyaWJlcnM6IGF3YWl0IHdoZW4oaG9sZGVyLmdldFB1YmxpY1RvcGljcygpKSxcbiAgICAgICAgICAgICAgaW52aXRhdGlvbk1ha2Vyc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBAdHlwZSB7SG9zdE9mPE9yY2hlc3RyYXRpb25BY2NvdW50Q29tbW9uWydnZXRCYWxhbmNlJ10+fSAqL1xuICAgICAgICBnZXRCYWxhbmNlKGRlbm9tQXJnKSB7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IFticmFuZCwgZGVub21dID0gdHlwZW9mIGRlbm9tQXJnID09PSBcInN0cmluZ1wiID8gW2NoYWluSHViLmdldEFzc2V0KGRlbm9tQXJnLCBcImFnb3JpY1wiKT8uYnJhbmQsIGRlbm9tQXJnXSA6IFtkZW5vbUFyZywgY2hhaW5IdWIuZ2V0RGVub20oZGVub21BcmcpXTtcbiAgICAgICAgICAgIGlmICghZGVub20pIHtcbiAgICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBObyBkZW5vbSBmb3IgYnJhbmQ6ICR7ZGVub21Bcmd9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChicmFuZCkge1xuICAgICAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICAgICAgRSh0aGlzLnN0YXRlLmFjY291bnQpLmdldEJhbGFuY2UoYnJhbmQpLFxuICAgICAgICAgICAgICAgIHRoaXMuZmFjZXRzLmdldEJhbGFuY2VXYXRjaGVyLFxuICAgICAgICAgICAgICAgIGRlbm9tXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICAgIEUobG9jYWxjaGFpbikucXVlcnkoXG4gICAgICAgICAgICAgICAgUXVlcnlCYWxhbmNlUmVxdWVzdDMudHlwZWRKc29uKHtcbiAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IHRoaXMuc3RhdGUuYWRkcmVzcy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgIGRlbm9tXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgdGhpcy5mYWNldHMucXVlcnlCYWxhbmNlV2F0Y2hlclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIEB0eXBlIHtIb3N0T2Y8T3JjaGVzdHJhdGlvbkFjY291bnRDb21tb25bJ2dldEJhbGFuY2VzJ10+fSAqL1xuICAgICAgICBnZXRCYWxhbmNlcygpIHtcbiAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICBFKGxvY2FsY2hhaW4pLnF1ZXJ5KFxuICAgICAgICAgICAgICBRdWVyeUFsbEJhbGFuY2VzUmVxdWVzdDMudHlwZWRKc29uKHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzOiB0aGlzLnN0YXRlLmFkZHJlc3MudmFsdWVcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy5xdWVyeUJhbGFuY2VzV2F0Y2hlclxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBAdHlwZSB7SG9zdE9mPE9yY2hlc3RyYXRpb25BY2NvdW50Q29tbW9uWydnZXRQdWJsaWNUb3BpY3MnXT59ICovXG4gICAgICAgIGdldFB1YmxpY1RvcGljcygpIHtcbiAgICAgICAgICByZXR1cm4gYXNWb3coYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IHsgdG9waWNLaXQgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICBpZiAoIXRvcGljS2l0KSB0aHJvdyB0aHJvd1JlZGFjdGVkYE5vIHRvcGljS2l0OyBzdG9yYWdlTm9kZSBub3QgcHJvdmlkZWRgO1xuICAgICAgICAgICAgcmV0dXJuIGhhcmRlbih7XG4gICAgICAgICAgICAgIGFjY291bnQ6IHtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogUFVCTElDX1RPUElDUzIuYWNjb3VudFswXSxcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyOiB0b3BpY0tpdC5zdWJzY3JpYmVyLFxuICAgICAgICAgICAgICAgIHN0b3JhZ2VQYXRoOiBhd2FpdCB0b3BpY0tpdC5yZWNvcmRlci5nZXRTdG9yYWdlUGF0aCgpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKiBGSVhNRSB0YWtlIENoYWluQWRkcmVzcyB0byBtYXRjaCBPcmNoZXN0cmF0aW9uQWNjb3VudEkqL1xuICAgICAgICAvKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWxpZGF0b3JBZGRyZXNzXG4gKiBAcGFyYW0ge0Ftb3VudDwnbmF0Jz59IGVydHBBbW91bnRcbiAqL1xuICAgICAgICBkZWxlZ2F0ZSh2YWxpZGF0b3JBZGRyZXNzLCBlcnRwQW1vdW50KSB7XG4gICAgICAgICAgY29uc3QgeyBhY2NvdW50OiBsY2EgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgY29uc3QgYW1vdW50ID0gY29lcmNlQ29pbihjaGFpbkh1YiwgZXJ0cEFtb3VudCk7XG4gICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgRShsY2EpLmV4ZWN1dGVUeChbXG4gICAgICAgICAgICAgIE1zZ0RlbGVnYXRlMy50eXBlZEpzb24oe1xuICAgICAgICAgICAgICAgIGFtb3VudCxcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3JBZGRyZXNzLFxuICAgICAgICAgICAgICAgIGRlbGVnYXRvckFkZHJlc3M6IHRoaXMuc3RhdGUuYWRkcmVzcy52YWx1ZVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy5leHRyYWN0Rmlyc3RSZXN1bHRXYXRjaGVyXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyogRklYTUUgdGFrZSBDaGFpbkFkZHJlc3MgdG8gbWF0Y2ggT3JjaGVzdHJhdGlvbkFjY291bnRJKi9cbiAgICAgICAgLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsaWRhdG9yQWRkcmVzc1xuICogQHBhcmFtIHtBbW91bnQ8J25hdCc+fSBlcnRwQW1vdW50XG4gKiBAcmV0dXJucyB7Vm93PHZvaWQgfCBUaW1lc3RhbXBSZWNvcmQ+fVxuICovXG4gICAgICAgIHVuZGVsZWdhdGUodmFsaWRhdG9yQWRkcmVzcywgZXJ0cEFtb3VudCkge1xuICAgICAgICAgIGNvbnN0IGFtb3VudCA9IGNvZXJjZUNvaW4oY2hhaW5IdWIsIGVydHBBbW91bnQpO1xuICAgICAgICAgIGNvbnN0IHsgYWNjb3VudDogbGNhIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICAgIEUobGNhKS5leGVjdXRlVHgoW1xuICAgICAgICAgICAgICBNc2dVbmRlbGVnYXRlMy50eXBlZEpzb24oe1xuICAgICAgICAgICAgICAgIGFtb3VudCxcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3JBZGRyZXNzLFxuICAgICAgICAgICAgICAgIGRlbGVnYXRvckFkZHJlc3M6IHRoaXMuc3RhdGUuYWRkcmVzcy52YWx1ZVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy51bmRlbGVnYXRlV2F0Y2hlclxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICogU3RhcnRpbmcgYSB0cmFuc2ZlciByZXZva2VzIHRoZSBhY2NvdW50IGhvbGRlci4gVGhlIGFzc29jaWF0ZWRcbiAqIHVwZGF0ZXIgd2lsbCBnZXQgYSBzcGVjaWFsIG5vdGlmaWNhdGlvbiB0aGF0IHRoZSBhY2NvdW50IGlzIGJlaW5nXG4gKiB0cmFuc2ZlcnJlZC5cbiAqL1xuICAgICAgICAvKiogQHR5cGUge0hvc3RPZjxMb2NhbEFjY291bnRNZXRob2RzWydkZXBvc2l0J10+fSAqL1xuICAgICAgICBkZXBvc2l0KHBheW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICBFKHRoaXMuc3RhdGUuYWNjb3VudCkuZGVwb3NpdChwYXltZW50KSxcbiAgICAgICAgICAgIHRoaXMuZmFjZXRzLnJldHVyblZvaWRXYXRjaGVyXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIEB0eXBlIHtIb3N0T2Y8TG9jYWxBY2NvdW50TWV0aG9kc1snd2l0aGRyYXcnXT59ICovXG4gICAgICAgIHdpdGhkcmF3KGFtb3VudCkge1xuICAgICAgICAgIHJldHVybiB3YXRjaChFKHRoaXMuc3RhdGUuYWNjb3VudCkud2l0aGRyYXcoYW1vdW50KSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBAdHlwZSB7SG9zdE9mPExvY2FsQ2hhaW5BY2NvdW50WydleGVjdXRlVHgnXT59ICovXG4gICAgICAgIGV4ZWN1dGVUeChtZXNzYWdlcykge1xuICAgICAgICAgIHJldHVybiB3YXRjaChFKHRoaXMuc3RhdGUuYWNjb3VudCkuZXhlY3V0ZVR4KG1lc3NhZ2VzKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBAdHlwZSB7T3JjaGVzdHJhdGlvbkFjY291bnRDb21tb25bJ2dldEFkZHJlc3MnXX0gKi9cbiAgICAgICAgZ2V0QWRkcmVzcygpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5hZGRyZXNzO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAqIFhYWCBjb25zaWRlciB1c2luZyBFUlRQIHRvIHNlbmQgaWYgaXQncyB2YmFuayBhc3NldFxuICpcbiAqIEB0eXBlIHtIb3N0T2Y8T3JjaGVzdHJhdGlvbkFjY291bnRDb21tb25bJ3NlbmQnXT59XG4gKi9cbiAgICAgICAgc2VuZCh0b0FjY291bnQsIGFtb3VudCkge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICB0cmFjZTYoXCJzZW5kXCIsIHRvQWNjb3VudCwgYW1vdW50KTtcbiAgICAgICAgICAgIGNvbnN0IGNvc21vc0Rlc3QgPSBjaGFpbkh1Yi5jb2VyY2VDb3Ntb3NBZGRyZXNzKHRvQWNjb3VudCk7XG4gICAgICAgICAgICBjb3Ntb3NEZXN0LmNoYWluSWQgPT09IHRoaXMuc3RhdGUuYWRkcmVzcy5jaGFpbklkIHx8IHRocm93UmVkYWN0ZWRgYmFuay9zZW5kIGNhbm5vdCBzZW5kIHRvIGEgZGlmZmVyZW50IGNoYWluICR7cXVvdGUoY29zbW9zRGVzdC5jaGFpbklkKX1gO1xuICAgICAgICAgICAgY29uc3QgeyBoZWxwZXIgfSA9IHRoaXMuZmFjZXRzO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgICBFKHRoaXMuc3RhdGUuYWNjb3VudCkuZXhlY3V0ZVR4KFtcbiAgICAgICAgICAgICAgICBNc2dTZW5kMy50eXBlZEpzb24oe1xuICAgICAgICAgICAgICAgICAgYW1vdW50OiBbaGVscGVyLmFtb3VudFRvQ29pbihhbW91bnQpXSxcbiAgICAgICAgICAgICAgICAgIHRvQWRkcmVzczogY29zbW9zRGVzdC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgIGZyb21BZGRyZXNzOiB0aGlzLnN0YXRlLmFkZHJlc3MudmFsdWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgdGhpcy5mYWNldHMucmV0dXJuVm9pZFdhdGNoZXJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICogWFhYIGNvbnNpZGVyIHVzaW5nIEVSVFAgdG8gc2VuZCBpZiBpdCdzIHZiYW5rIGFzc2V0XG4gKlxuICogQHR5cGUge0hvc3RPZjxPcmNoZXN0cmF0aW9uQWNjb3VudENvbW1vblsnc2VuZEFsbCddPn1cbiAqL1xuICAgICAgICBzZW5kQWxsKHRvQWNjb3VudCwgYW1vdW50cykge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICB0cmFjZTYoXCJzZW5kQWxsXCIsIHRvQWNjb3VudCwgYW1vdW50cyk7XG4gICAgICAgICAgICBjb25zdCB7IGhlbHBlciB9ID0gdGhpcy5mYWNldHM7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICAgIEUodGhpcy5zdGF0ZS5hY2NvdW50KS5leGVjdXRlVHgoW1xuICAgICAgICAgICAgICAgIE1zZ1NlbmQzLnR5cGVkSnNvbih7XG4gICAgICAgICAgICAgICAgICBhbW91bnQ6IGFtb3VudHMubWFwKChhMikgPT4gaGVscGVyLmFtb3VudFRvQ29pbihhMikpLFxuICAgICAgICAgICAgICAgICAgdG9BZGRyZXNzOiB0b0FjY291bnQudmFsdWUsXG4gICAgICAgICAgICAgICAgICBmcm9tQWRkcmVzczogdGhpcy5zdGF0ZS5hZGRyZXNzLnZhbHVlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIHRoaXMuZmFjZXRzLnJldHVyblZvaWRXYXRjaGVyXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAqIEBwYXJhbSB7QWNjb3VudElkQXJnfSBkZXN0aW5hdGlvblxuICogQHBhcmFtIHtBbW91bnRBcmd9IGFtb3VudCBhbiBFUlRQIHtAbGluayBBbW91bnR9IG9yIGFcbiAqICAge0BsaW5rIERlbm9tQW1vdW50fVxuICogQHBhcmFtIHtJQkNNc2dUcmFuc2Zlck9wdGlvbnN9IFtvcHRzXSBpZiBlaXRoZXIgdGltZW91dEhlaWdodCBvclxuICogICB0aW1lb3V0VGltZXN0YW1wIGFyZSBub3Qgc3VwcGxpZWQsIGEgZGVmYXVsdCB0aW1lb3V0VGltZXN0YW1wIHdpbGxcbiAqICAgYmUgc2V0IGZvciA1IG1pbnV0ZXMgaW4gdGhlIGZ1dHVyZVxuICogQHJldHVybnMge1Zvdzxhbnk+fVxuICogQHRocm93cyB7RXJyb3J9IGlmIHJvdXRlIGlzIG5vdCBkZXRlcm1pbmFibGUsIGFzc2V0IGlzIG5vdFxuICogICByZWNvZ25pemVkLCBvciB0aGUgdHJhbnNmZXIgaXMgcmVqZWN0ZWQgKGluc3VmZmljaWVudCBmdW5kcyxcbiAqICAgdGltZW91dClcbiAqL1xuICAgICAgICB0cmFuc2ZlcihkZXN0aW5hdGlvbiwgYW1vdW50LCBvcHRzKSB7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICAgIHRyYWNlNihcIlRyYW5zZmVycmluZyBmdW5kcyBvdmVyIElCQ1wiKTtcbiAgICAgICAgICAgIGNvbnN0IGRlbm9tQW1vdW50ID0gY29lcmNlRGVub21BbW91bnQoY2hhaW5IdWIsIGFtb3VudCk7XG4gICAgICAgICAgICBjb25zdCB7IGZvcndhcmRPcHRzLCAuLi5yZXN0IH0gPSBvcHRzID8/IHt9O1xuICAgICAgICAgICAgY29uc3Qgcm91dGUgPSBjaGFpbkh1Yi5tYWtlVHJhbnNmZXJSb3V0ZShcbiAgICAgICAgICAgICAgZGVzdGluYXRpb24sXG4gICAgICAgICAgICAgIGRlbm9tQW1vdW50LFxuICAgICAgICAgICAgICBcImFnb3JpY1wiLFxuICAgICAgICAgICAgICBmb3J3YXJkT3B0c1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRyYWNlNihcImdvdCB0cmFuc2ZlciByb3V0ZVwiLCByb3V0ZSk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHRWID0gd2F0Y2goXG4gICAgICAgICAgICAgIHRpbWVzdGFtcEhlbHBlci52b3dPclZhbHVlRnJvbU9wdHMob3B0cyksXG4gICAgICAgICAgICAgIHRoaXMuZmFjZXRzLnRyYW5zZmVyV2F0Y2hlcixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9wdHM6IHJlc3QsXG4gICAgICAgICAgICAgICAgcm91dGVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRWO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAqIEB0eXBlIHtIb3N0T2Y8TG9jYWxBY2NvdW50TWV0aG9kc1sncGFyc2VJbmJvdW5kVHJhbnNmZXInXT59XG4gKi9cbiAgICAgICAgcGFyc2VJbmJvdW5kVHJhbnNmZXIocmVjb3JkKSB7XG4gICAgICAgICAgdHJhY2U2KFwicGFyc2VJbmJvdW5kVHJhbnNmZXJcIiwgcmVjb3JkKTtcbiAgICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFja2V0ID0gKFxuICAgICAgICAgICAgICAvKiogQHR5cGUge0lCQ0V2ZW50PCd3cml0ZUFja25vd2xlZGdlbWVudCc+WydwYWNrZXQnXX0gKi9cbiAgICAgICAgICAgICAgcmVjb3JkXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgZnRQYWNrZXREYXRhID0gSlNPTi5wYXJzZShhdG9iKHBhY2tldC5kYXRhKSk7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgIGRlbm9tOiB0cmFuc2ZlckRlbm9tLFxuICAgICAgICAgICAgICBzZW5kZXIsXG4gICAgICAgICAgICAgIHJlY2VpdmVyLFxuICAgICAgICAgICAgICBhbW91bnRcbiAgICAgICAgICAgIH0gPSBmdFBhY2tldERhdGE7XG4gICAgICAgICAgICBjb25zdCBidWlsZFJldHVyblZhbHVlID0gKGxvY2FsRGVub20pID0+IGhhcmRlbih7XG4gICAgICAgICAgICAgIGFtb3VudDogKFxuICAgICAgICAgICAgICAgIC8qKiBAdHlwZSB7RGVub21BbW91bnR9ICovXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgdmFsdWU6IEJpZ0ludChhbW91bnQpLFxuICAgICAgICAgICAgICAgICAgZGVub206IGxvY2FsRGVub21cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIGZyb21BY2NvdW50OiBzZW5kZXIsXG4gICAgICAgICAgICAgIHRvQWNjb3VudDogcmVjZWl2ZXIsXG4gICAgICAgICAgICAgIGV4dHJhOiB7XG4gICAgICAgICAgICAgICAgLi4uZnRQYWNrZXREYXRhXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IGRlbm9tT3JUcmFjZTtcbiAgICAgICAgICAgIGNvbnN0IHByZWZpeCA9IGAke3BhY2tldC5zb3VyY2VfcG9ydH0vJHtwYWNrZXQuc291cmNlX2NoYW5uZWx9L2A7XG4gICAgICAgICAgICB0cmFjZTYoeyB0cmFuc2ZlckRlbm9tLCBwcmVmaXggfSk7XG4gICAgICAgICAgICBpZiAodHJhbnNmZXJEZW5vbS5zdGFydHNXaXRoKHByZWZpeCkpIHtcbiAgICAgICAgICAgICAgZGVub21PclRyYWNlID0gdHJhbnNmZXJEZW5vbS5zbGljZShwcmVmaXgubGVuZ3RoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGRlbm9tT3JUcmFjZSA9IGAke3BhY2tldC5kZXN0aW5hdGlvbl9wb3J0fS8ke3BhY2tldC5kZXN0aW5hdGlvbl9jaGFubmVsfS8ke3RyYW5zZmVyRGVub219YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICAgICAgRShsb2NhbGNoYWluKS5xdWVyeU1hbnkoW1xuICAgICAgICAgICAgICAgIFF1ZXJ5RGVub21IYXNoUmVxdWVzdDIudHlwZWRKc29uKHtcbiAgICAgICAgICAgICAgICAgIHRyYWNlOiBkZW5vbU9yVHJhY2VcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgdGhpcy5mYWNldHMucGFyc2VJbmJvdW5kVHJhbnNmZXJXYXRjaGVyLFxuICAgICAgICAgICAgICBidWlsZFJldHVyblZhbHVlKGRlbm9tT3JUcmFjZSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBAdHlwZSB7SG9zdE9mPE9yY2hlc3RyYXRpb25BY2NvdW50Q29tbW9uWyd0cmFuc2ZlclN0ZXBzJ10+fSAqL1xuICAgICAgICB0cmFuc2ZlclN0ZXBzKGFtb3VudCwgbXNnKSB7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidHJhbnNmZXJTdGVwcyBnb3RcIiwgYW1vdW50LCBtc2cpO1xuICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBub3QgeWV0IGltcGxlbWVudGVkYDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIEB0eXBlIHtIb3N0T2Y8UGFja2V0VG9vbHNbJ3NlbmRUaGVuV2FpdEZvckFjayddPn0gKi9cbiAgICAgICAgc2VuZFRoZW5XYWl0Rm9yQWNrKHNlbmRlciwgb3B0cykge1xuICAgICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICAgIEUodGhpcy5zdGF0ZS5wYWNrZXRUb29scykuc2VuZFRoZW5XYWl0Rm9yQWNrKHNlbmRlciwgb3B0cylcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICAvKiogQHR5cGUge0hvc3RPZjxQYWNrZXRUb29sc1snbWF0Y2hGaXJzdFBhY2tldCddPn0gKi9cbiAgICAgICAgbWF0Y2hGaXJzdFBhY2tldChwYXR0ZXJuVikge1xuICAgICAgICAgIHJldHVybiB3YXRjaChFKHRoaXMuc3RhdGUucGFja2V0VG9vbHMpLm1hdGNoRmlyc3RQYWNrZXQocGF0dGVyblYpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIEB0eXBlIHtIb3N0T2Y8TG9jYWxBY2NvdW50TWV0aG9kc1snbW9uaXRvclRyYW5zZmVycyddPn0gKi9cbiAgICAgICAgbW9uaXRvclRyYW5zZmVycyh0YXApIHtcbiAgICAgICAgICByZXR1cm4gd2F0Y2goRSh0aGlzLnN0YXRlLnBhY2tldFRvb2xzKS5tb25pdG9yVHJhbnNmZXJzKHRhcCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICApO1xuICByZXR1cm4gbWFrZUxvY2FsT3JjaGVzdHJhdGlvbkFjY291bnRLaXQ7XG59O1xuXG4vKiAuLi9vcmNoZXN0cmF0aW9uL3NyYy9leG9zL29yY2hlc3RyYXRvci5qcyovXG52YXIgeyBWb3ckOiBWb3ckNyB9ID0gU2hhcGU7XG52YXIgdHJhY2U3ID0gbWFrZVRyYWNlcihcIk9yY2hlc3RyYXRvclwiKTtcbnZhciBPcmNoZXN0cmF0b3JJID0gTS5pbnRlcmZhY2UoXCJPcmNoZXN0cmF0b3JcIiwge1xuICBnZXRDaGFpbjogTS5jYWxsKE0uc3RyaW5nKCkpLnJldHVybnMoVm93JDcoTS5yZW1vdGFibGUoXCJDaGFpbkZhY2FkZVwiKSkpLFxuICBnZXREZW5vbUluZm86IE0uY2FsbChEZW5vbVNoYXBlLCBNLnN0cmluZygpKS5yZXR1cm5zKERlbm9tSW5mb1NoYXBlKSxcbiAgYXNBbW91bnQ6IE0uY2FsbChEZW5vbUFtb3VudFNoYXBlKS5yZXR1cm5zKEFtb3VudFNoYXBlKVxufSk7XG52YXIgcHJlcGFyZU9yY2hlc3RyYXRvcktpdCA9ICh6b25lLCB7XG4gIGNoYWluSHViLFxuICBtYWtlTG9jYWxDaGFpbkZhY2FkZSxcbiAgbWFrZVJlbW90ZUNoYWluRmFjYWRlLFxuICB2b3dUb29sczogeyB3YXRjaCwgYXNWb3cgfVxufSkgPT4ge1xuICBjb25zdCBjaGFpbkJ5TmFtZSA9IG1ha2VTY2FsYXJNYXBTdG9yZShcImNoYWluTmFtZVwiKTtcbiAgcmV0dXJuIHpvbmUuZXhvQ2xhc3NLaXQoXG4gICAgXCJPcmNoZXN0cmF0b3JcIixcbiAgICB7XG4gICAgICBvcmNoZXN0cmF0b3I6IE9yY2hlc3RyYXRvckksXG4gICAgICBtYWtlTG9jYWxDaGFpbkZhY2FkZVdhdGNoZXI6IE0uaW50ZXJmYWNlKFwibWFrZUxvY2FsQ2hhaW5GYWNhZGVXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLnJlY29yZCgpKS5yZXR1cm5zKE0ucmVtb3RhYmxlKCkpXG4gICAgICB9KSxcbiAgICAgIG1ha2VSZW1vdGVDaGFpbkZhY2FkZVdhdGNoZXI6IE0uaW50ZXJmYWNlKFxuICAgICAgICBcIm1ha2VSZW1vdGVDaGFpbkZhY2FkZVdhdGNoZXJcIixcbiAgICAgICAge1xuICAgICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hbnkoKSwgTS5zdHJpbmcoKSkub3B0aW9uYWwoTS5hcnJheU9mKE0udW5kZWZpbmVkKCkpKS5yZXR1cm5zKE0ucmVtb3RhYmxlKCkpXG4gICAgICAgIH1cbiAgICAgIClcbiAgICB9LFxuICAgICgpID0+IHtcbiAgICAgIHRyYWNlNyhcIm1ha2luZyBhbiBPcmNoZXN0cmF0b3JcIik7XG4gICAgICByZXR1cm4ge307XG4gICAgfSxcbiAgICB7XG4gICAgICAvKiogV2FpdHMgZm9yIGBjaGFpbkluZm9gIGFuZCByZXR1cm5zIGEgTG9jYWxDaGFpbkZhY2FkZSAqL1xuICAgICAgbWFrZUxvY2FsQ2hhaW5GYWNhZGVXYXRjaGVyOiB7XG4gICAgICAgIC8qKlxuICogQHBhcmFtIHtBY3R1YWxDaGFpbkluZm88J2Fnb3JpYyc+fSBhZ29yaWNDaGFpbkluZm9cbiAqL1xuICAgICAgICBvbkZ1bGZpbGxlZChhZ29yaWNDaGFpbkluZm8pIHtcbiAgICAgICAgICBjb25zdCBpdCA9IG1ha2VMb2NhbENoYWluRmFjYWRlKGFnb3JpY0NoYWluSW5mbyk7XG4gICAgICAgICAgY2hhaW5CeU5hbWUuc2V0KFwiYWdvcmljXCIsIGhhcmRlbih7IHZhbHVlOiBpdCwgcGVuZGluZzogZmFsc2UgfSkpO1xuICAgICAgICAgIHJldHVybiBpdDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8qKlxuICogV2FpdHMgZm9yIGBjaGFpbkluZm9gIGZvciBgYWdvcmljYCBhbmQgYSByZW1vdGUgY2hhaW4gYW5kIHJldHVybnMgYVxuICogUmVtb3RlQ2hhaW5GYWNhZGVcbiAqL1xuICAgICAgbWFrZVJlbW90ZUNoYWluRmFjYWRlV2F0Y2hlcjoge1xuICAgICAgICAvKipcbiAqIFdhaXRzIGZvciBgY2hhaW5JbmZvYCBmb3IgYGFnb3JpY2AgYW5kIGEgcmVtb3RlIGNoYWluIGFuZCByZXR1cm5zIGFcbiAqIFJlbW90ZUNoYWluRmFjYWRlXG4gKlxuICogQHBhcmFtIHtbQ2hhaW5JbmZvLCBDaGFpbkluZm8sIElCQ0Nvbm5lY3Rpb25JbmZvXX0gY2hhaW5zQW5kQ29ubmVjdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqL1xuICAgICAgICBvbkZ1bGZpbGxlZChbX2Fnb3JpY0NoYWluSW5mbywgcmVtb3RlQ2hhaW5JbmZvLCBjb25uZWN0aW9uSW5mb10sIG5hbWUpIHtcbiAgICAgICAgICBjb25zdCBpdCA9IG1ha2VSZW1vdGVDaGFpbkZhY2FkZShyZW1vdGVDaGFpbkluZm8sIGNvbm5lY3Rpb25JbmZvKTtcbiAgICAgICAgICBjaGFpbkJ5TmFtZS5zZXQobmFtZSwgaGFyZGVuKHsgdmFsdWU6IGl0LCBwZW5kaW5nOiBmYWxzZSB9KSk7XG4gICAgICAgICAgcmV0dXJuIGl0O1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb3JjaGVzdHJhdG9yOiB7XG4gICAgICAgIC8qKiBAdHlwZSB7SG9zdE9mPE9yY2hlc3RyYXRvclsnZ2V0Q2hhaW4nXT59ICovXG4gICAgICAgIGdldENoYWluKG5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNoYWluQnlOYW1lLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgICBjb25zdCBtYXliZUNoYWluID0gY2hhaW5CeU5hbWUuZ2V0KG5hbWUpO1xuICAgICAgICAgICAgICByZXR1cm4gbWF5YmVDaGFpbi5wZW5kaW5nID8gbWF5YmVDaGFpbi52b3cgOiBtYXliZUNoYWluLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgdm93ID0gbmFtZSA9PT0gXCJhZ29yaWNcIiA/IHdhdGNoKFxuICAgICAgICAgICAgICBjaGFpbkh1Yi5nZXRDaGFpbkluZm8oXCJhZ29yaWNcIiksXG4gICAgICAgICAgICAgIHRoaXMuZmFjZXRzLm1ha2VMb2NhbENoYWluRmFjYWRlV2F0Y2hlclxuICAgICAgICAgICAgKSA6IHdhdGNoKFxuICAgICAgICAgICAgICBjaGFpbkh1Yi5nZXRDaGFpbnNBbmRDb25uZWN0aW9uKFwiYWdvcmljXCIsIG5hbWUpLFxuICAgICAgICAgICAgICB0aGlzLmZhY2V0cy5tYWtlUmVtb3RlQ2hhaW5GYWNhZGVXYXRjaGVyLFxuICAgICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY2hhaW5CeU5hbWUuaW5pdChuYW1lLCBoYXJkZW4oeyB2b3csIHBlbmRpbmc6IHRydWUgfSkpO1xuICAgICAgICAgICAgcmV0dXJuIHZvdztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIEB0eXBlIHtIb3N0T2Y8T3JjaGVzdHJhdG9yWydnZXREZW5vbUluZm8nXT59ICovXG4gICAgICAgIGdldERlbm9tSW5mbyhkZW5vbSwgaG9sZGluZ0NoYWluTmFtZSkge1xuICAgICAgICAgIGNvbnN0IGRlbm9tRGV0YWlsID0gY2hhaW5IdWIuZ2V0QXNzZXQoZGVub20sIGhvbGRpbmdDaGFpbk5hbWUpO1xuICAgICAgICAgIGlmICghZGVub21EZXRhaWwpIHRocm93IHRocm93UmVkYWN0ZWRgTm8gZGVub20gZGV0YWlsIGZvciAke3F1b3RlKGRlbm9tKX1gO1xuICAgICAgICAgIGNvbnN0IHsgY2hhaW5OYW1lLCBiYXNlTmFtZSwgYmFzZURlbm9tLCBicmFuZCB9ID0gZGVub21EZXRhaWw7XG4gICAgICAgICAgY2hhaW5CeU5hbWUuaGFzKGNoYWluTmFtZSkgfHwgdGhyb3dSZWRhY3RlZGB1c2UgZ2V0Q2hhaW4oJHtxdW90ZShjaGFpbk5hbWUpfSkgYmVmb3JlIGdldERlbm9tSW5mbygke3F1b3RlKGRlbm9tKX0pYDtcbiAgICAgICAgICBjb25zdCBtYXliZUNoYWluID0gY2hhaW5CeU5hbWUuZ2V0KGNoYWluTmFtZSk7XG4gICAgICAgICAgaWYgKG1heWJlQ2hhaW4ucGVuZGluZykge1xuICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGB3YWl0IHVudGlsIGdldENoYWluKCR7cXVvdGUoY2hhaW5OYW1lKX0pIGNvbXBsZXRlcyBiZWZvcmUgZ2V0RGVub21JbmZvKCR7cXVvdGUoZGVub20pfSlgO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBjaGFpbiA9IChcbiAgICAgICAgICAgIC8qKiBAdHlwZSB7SG9zdEludGVyZmFjZTxDaGFpbjxLbm93bkNoYWluc1trZXlvZiBLbm93bkNoYWluc10+Pn0gKi9cbiAgICAgICAgICAgIG1heWJlQ2hhaW4udmFsdWVcbiAgICAgICAgICApO1xuICAgICAgICAgIGNoYWluQnlOYW1lLmhhcyhiYXNlTmFtZSkgfHwgdGhyb3dSZWRhY3RlZGB1c2UgZ2V0Q2hhaW4oJHtxdW90ZShiYXNlTmFtZSl9KSBiZWZvcmUgZ2V0RGVub21JbmZvKCR7cXVvdGUoZGVub20pfSlgO1xuICAgICAgICAgIGNvbnN0IG1heWJlQmFzZSA9IGNoYWluQnlOYW1lLmdldChiYXNlTmFtZSk7XG4gICAgICAgICAgaWYgKG1heWJlQmFzZS5wZW5kaW5nKSB7XG4gICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYHdhaXQgdW50aWwgZ2V0Q2hhaW4oJHtxdW90ZShiYXNlTmFtZSl9KSBjb21wbGV0ZXMgYmVmb3JlIGdldERlbm9tSW5mbygke3F1b3RlKGRlbm9tKX0pYDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgYmFzZTIgPSAoXG4gICAgICAgICAgICAvKiogQHR5cGUge0hvc3RJbnRlcmZhY2U8Q2hhaW48S25vd25DaGFpbnNba2V5b2YgS25vd25DaGFpbnNdPj59ICovXG4gICAgICAgICAgICBtYXliZUJhc2UudmFsdWVcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiBoYXJkZW4oeyBjaGFpbiwgYmFzZTogYmFzZTIsIGJyYW5kLCBiYXNlRGVub20gfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBAdHlwZSB7SG9zdE9mPE9yY2hlc3RyYXRvclsnYXNBbW91bnQnXT59ICovXG4gICAgICAgIGFzQW1vdW50OiAoKSA9PiB0aHJvd1JlZGFjdGVkYG5vdCB5ZXQgaW1wbGVtZW50ZWRgXG4gICAgICB9XG4gICAgfVxuICApO1xufTtcbmhhcmRlbihwcmVwYXJlT3JjaGVzdHJhdG9yS2l0KTtcbnZhciBwcmVwYXJlT3JjaGVzdHJhdG9yID0gKHpvbmUsIHBvd2VycykgPT4ge1xuICBjb25zdCBtYWtlT3JjaGVzdHJhdG9yS2l0ID0gcHJlcGFyZU9yY2hlc3RyYXRvcktpdCh6b25lLCBwb3dlcnMpO1xuICByZXR1cm4gcGlja0ZhY2V0KG1ha2VPcmNoZXN0cmF0b3JLaXQsIFwib3JjaGVzdHJhdG9yXCIpO1xufTtcblxuLyogLi4vb3JjaGVzdHJhdGlvbi9zcmMvZXhvcy9yZW1vdGUtY2hhaW4tZmFjYWRlLmpzKi9cbnZhciB0cmFjZTggPSBtYWtlVHJhY2VyKFwiUmVtb3RlQ2hhaW5GYWNhZGVcIik7XG52YXIgcHJlcGFyZVJlbW90ZUNoYWluRmFjYWRlS2l0ID0gKHpvbmUsIHtcbiAgbWFrZUNvc21vc09yY2hlc3RyYXRpb25BY2NvdW50LFxuICBvcmNoZXN0cmF0aW9uLFxuICAvKiBUT0RPIHZzdG9yYWdlIGRlc2lnbiBodHRwczovL2dpdGh1Yi5jb20vQWdvcmljL2Fnb3JpYy1zZGsvaXNzdWVzLzkwNjYqL1xuICAvKiBjb25zaWRlciBtYWtpbmcgYW4gYGFjY291bnRzYCBjaGlsZE5vZGUqL1xuICBzdG9yYWdlTm9kZSxcbiAgdGltZXIsXG4gIHZvd1Rvb2xzOiB7IGFsbFZvd3MsIGFzVm93LCB3YXRjaCB9XG59KSA9PiB6b25lLmV4b0NsYXNzS2l0KFxuICBcIlJlbW90ZUNoYWluRmFjYWRlXCIsXG4gIHtcbiAgICBwdWJsaWM6IE0uaW50ZXJmYWNlKFwiUmVtb3RlQ2hhaW5GYWNhZGVcIiwge1xuICAgICAgLi4uY2hhaW5GYWNhZGVNZXRob2RzLFxuICAgICAgcXVlcnk6IE0uY2FsbChNLmFycmF5T2YoSUNRTXNnU2hhcGUpKS5yZXR1cm5zKFZvd1NoYXBlKVxuICAgIH0pLFxuICAgIG1ha2VJQ1FDb25uZWN0aW9uUXVlcnlXYXRjaGVyOiBNLmludGVyZmFjZShcbiAgICAgIFwibWFrZUlDUUNvbm5lY3Rpb25RdWVyeVdhdGNoZXJcIixcbiAgICAgIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLnJlbW90YWJsZSgpLCBNLmFycmF5T2YoSUNRTXNnU2hhcGUpKS5yZXR1cm5zKFxuICAgICAgICAgIFZvd1NoYXBlXG4gICAgICAgIClcbiAgICAgIH1cbiAgICApLFxuICAgIG1ha2VBY2NvdW50QW5kUHJvdmlkZVF1ZXJ5Q29ubldhdGNoZXI6IE0uaW50ZXJmYWNlKFxuICAgICAgXCJtYWtlQWNjb3VudEFuZFByb3ZpZGVRdWVyeUNvbm5XYXRjaGVyXCIsXG4gICAgICB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoW1xuICAgICAgICAgIE0ucmVtb3RhYmxlKCksXG4gICAgICAgICAgTS5vcihNLnJlbW90YWJsZSgpLCBNLnVuZGVmaW5lZCgpKVxuICAgICAgICBdKS5yZXR1cm5zKFZvd1NoYXBlKVxuICAgICAgfVxuICAgICksXG4gICAgZ2V0QWRkcmVzc2VzV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJnZXRBZGRyZXNzV2F0Y2hlclwiLCB7XG4gICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKFxuICAgICAgICBbQ29zbW9zQ2hhaW5BZGRyZXNzU2hhcGUsIE0uc3RyaW5nKCksIE0uc3RyaW5nKCldLFxuICAgICAgICBNLnJlbW90YWJsZSgpXG4gICAgICApLnJldHVybnMoVm93U2hhcGUpXG4gICAgfSksXG4gICAgbWFrZUNoaWxkTm9kZVdhdGNoZXI6IE0uaW50ZXJmYWNlKFwibWFrZUNoaWxkTm9kZVdhdGNoZXJcIiwge1xuICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLm9yKE0ucmVtb3RhYmxlKCksIE0udW5kZWZpbmVkKCkpLCB7XG4gICAgICAgIGFjY291bnQ6IE0ucmVtb3RhYmxlKCksXG4gICAgICAgIGNoYWluQWRkcmVzczogQ29zbW9zQ2hhaW5BZGRyZXNzU2hhcGUsXG4gICAgICAgIGxvY2FsQWRkcmVzczogTS5zdHJpbmcoKSxcbiAgICAgICAgcmVtb3RlQWRkcmVzczogTS5zdHJpbmcoKVxuICAgICAgfSkucmV0dXJucyhNLnJlbW90YWJsZSgpKVxuICAgIH0pXG4gIH0sXG4gIC8qKlxuICogQHBhcmFtIHtDaGFpbkluZm99IHJlbW90ZUNoYWluSW5mb1xuICogQHBhcmFtIHtJQkNDb25uZWN0aW9uSW5mb30gW2Nvbm5lY3Rpb25JbmZvXVxuICovXG4gIChyZW1vdGVDaGFpbkluZm8sIGNvbm5lY3Rpb25JbmZvKSA9PiB7XG4gICAgdHJhY2U4KFwibWFraW5nIGEgUmVtb3RlQ2hhaW5GYWNhZGVcIik7XG4gICAgcmV0dXJuIChcbiAgICAgIC8qKiBAdHlwZSB7UmVtb3RlQ2hhaW5GYWNhZGVTdGF0ZX0gKi9cbiAgICAgIHtcbiAgICAgICAgcmVtb3RlQ2hhaW5JbmZvLFxuICAgICAgICBjb25uZWN0aW9uSW5mbyxcbiAgICAgICAgaWNxQ29ubmVjdGlvbjogdm9pZCAwXG4gICAgICB9XG4gICAgKTtcbiAgfSxcbiAge1xuICAgIHB1YmxpYzoge1xuICAgICAgLyoqIEB0eXBlIHtIb3N0T2Y8Q2hhaW5bJ2dldENoYWluSW5mbyddPn0gKi9cbiAgICAgIGdldENoYWluSW5mbygpIHtcbiAgICAgICAgcmV0dXJuIHdhdGNoKHRoaXMuc3RhdGUucmVtb3RlQ2hhaW5JbmZvKTtcbiAgICAgIH0sXG4gICAgICAvKiogQHR5cGUge0hvc3RPZjxDaGFpblsnbWFrZUFjY291bnQnXT59ICovXG4gICAgICBtYWtlQWNjb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICBjb25zdCB7IHJlbW90ZUNoYWluSW5mbywgY29ubmVjdGlvbkluZm8gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgaWYgKHJlbW90ZUNoYWluSW5mby5uYW1lc3BhY2UgIT09IFwiY29zbW9zXCIpIHtcbiAgICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgb25seSBzdXBwb3J0ZWQgb24gJ2Nvc21vcycgY2hhaW5zLCBub3QgJHtyZW1vdGVDaGFpbkluZm8ubmFtZXNwYWNlfWA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghY29ubmVjdGlvbkluZm8pIHRocm93IHRocm93UmVkYWN0ZWRgSUJDIGNvbm5lY3Rpb24gaW5mbyBub3QgZm91bmRgO1xuICAgICAgICAgIGNvbnN0IGljcUNvbm5PclVuZGVmaW5lZFYgPSAoXG4gICAgICAgICAgICAvKiogQHR5cGUge0Nvc21vc0NoYWluSW5mb30gKi9cbiAgICAgICAgICAgIHJlbW90ZUNoYWluSW5mbz8uaWNxRW5hYmxlZCAmJiAhdGhpcy5zdGF0ZS5pY3FDb25uZWN0aW9uID8gRShvcmNoZXN0cmF0aW9uKS5wcm92aWRlSUNRQ29ubmVjdGlvbihjb25uZWN0aW9uSW5mby5pZCkgOiB2b2lkIDBcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IG1ha2VBY2NvdW50ViA9IEUob3JjaGVzdHJhdGlvbikubWFrZUFjY291bnQoXG4gICAgICAgICAgICAvKiogQHR5cGUge0Nvc21vc0NoYWluSW5mb30gKi9cbiAgICAgICAgICAgIHJlbW90ZUNoYWluSW5mby5jaGFpbklkLFxuICAgICAgICAgICAgY29ubmVjdGlvbkluZm8uY291bnRlcnBhcnR5LmNvbm5lY3Rpb25faWQsXG4gICAgICAgICAgICBjb25uZWN0aW9uSW5mby5pZFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgYWxsVm93cyhbbWFrZUFjY291bnRWLCBpY3FDb25uT3JVbmRlZmluZWRWXSksXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy5tYWtlQWNjb3VudEFuZFByb3ZpZGVRdWVyeUNvbm5XYXRjaGVyXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgLyoqXG4gKiBAdHlwZSB7SG9zdE9mPFxuICogICBDaGFpbjxDb3Ntb3NDaGFpbkluZm8gJiB7IGljcUVuYWJsZWQ6IHRydWUgfT5bJ3F1ZXJ5J11cbiAqID59XG4gKi9cbiAgICAgIHF1ZXJ5KG1zZ3MpIHtcbiAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAvKiogQHR5cGUge0Nvc21vc0NoYWluSW5mb30gKi9cbiAgICAgICAgICAgIHJlbW90ZUNoYWluSW5mbzogeyBpY3FFbmFibGVkLCBjaGFpbklkIH0sXG4gICAgICAgICAgICAvKiogQHR5cGUge0lCQ0Nvbm5lY3Rpb25JbmZvIHwgdW5kZWZpbmVkfSAqL1xuICAgICAgICAgICAgY29ubmVjdGlvbkluZm9cbiAgICAgICAgICB9ID0gKFxuICAgICAgICAgICAgLyoqIEB0eXBlIHthbnl9ICovXG4gICAgICAgICAgICB0aGlzLnN0YXRlXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoIWljcUVuYWJsZWQpIHtcbiAgICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgUXVlcmllcyBub3QgYXZhaWxhYmxlIGZvciBjaGFpbiAke3F1b3RlKGNoYWluSWQpfWA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghY29ubmVjdGlvbkluZm8pIHRocm93IHRocm93UmVkYWN0ZWRgSUJDIGNvbm5lY3Rpb24gaW5mbyBub3QgZm91bmRgO1xuICAgICAgICAgIGlmICghdGhpcy5zdGF0ZS5pY3FDb25uZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICAgIEUob3JjaGVzdHJhdGlvbikucHJvdmlkZUlDUUNvbm5lY3Rpb24oY29ubmVjdGlvbkluZm8uaWQpLFxuICAgICAgICAgICAgICB0aGlzLmZhY2V0cy5tYWtlSUNRQ29ubmVjdGlvblF1ZXJ5V2F0Y2hlcixcbiAgICAgICAgICAgICAgbXNnc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHdhdGNoKEUodGhpcy5zdGF0ZS5pY3FDb25uZWN0aW9uKS5xdWVyeShtc2dzKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgbWFrZUFjY291bnRBbmRQcm92aWRlUXVlcnlDb25uV2F0Y2hlcjoge1xuICAgICAgLyoqXG4gKiBAcGFyYW0ge1tJY2FBY2NvdW50LCBJQ1FDb25uZWN0aW9uIHwgdW5kZWZpbmVkXX0gYWNjb3VudFxuICovXG4gICAgICBvbkZ1bGZpbGxlZChbYWNjb3VudCwgaWNxQ29ubmVjdGlvbl0pIHtcbiAgICAgICAgaWYgKGljcUNvbm5lY3Rpb24gJiYgIXRoaXMuc3RhdGUuaWNxQ29ubmVjdGlvbikge1xuICAgICAgICAgIHRoaXMuc3RhdGUuaWNxQ29ubmVjdGlvbiA9IGljcUNvbm5lY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgIGFsbFZvd3MoW1xuICAgICAgICAgICAgRShhY2NvdW50KS5nZXRBZGRyZXNzKCksXG4gICAgICAgICAgICBFKGFjY291bnQpLmdldExvY2FsQWRkcmVzcygpLFxuICAgICAgICAgICAgRShhY2NvdW50KS5nZXRSZW1vdGVBZGRyZXNzKClcbiAgICAgICAgICBdKSxcbiAgICAgICAgICB0aGlzLmZhY2V0cy5nZXRBZGRyZXNzZXNXYXRjaGVyLFxuICAgICAgICAgIGFjY291bnRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG1ha2VJQ1FDb25uZWN0aW9uUXVlcnlXYXRjaGVyOiB7XG4gICAgICAvKipcbiAqIEBwYXJhbSB7SUNRQ29ubmVjdGlvbn0gaWNxQ29ubmVjdGlvblxuICogQHBhcmFtIHtKc29uU2FmZTxSZXF1ZXN0UXVlcnk+W119IG1zZ3NcbiAqIEByZXR1cm5zIHtWb3c8SnNvblNhZmU8UmVzcG9uc2VRdWVyeT5bXT59XG4gKi9cbiAgICAgIG9uRnVsZmlsbGVkKGljcUNvbm5lY3Rpb24sIG1zZ3MpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmljcUNvbm5lY3Rpb24pIHtcbiAgICAgICAgICB0aGlzLnN0YXRlLmljcUNvbm5lY3Rpb24gPSBpY3FDb25uZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3YXRjaChFKGljcUNvbm5lY3Rpb24pLnF1ZXJ5KG1zZ3MpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldEFkZHJlc3Nlc1dhdGNoZXI6IHtcbiAgICAgIC8qKlxuICogQHBhcmFtIHtbQ29zbW9zQ2hhaW5BZGRyZXNzLCBMb2NhbEliY0FkZHJlc3MsIFJlbW90ZUliY0FkZHJlc3NdfSBjaGFpbkFkZHJlc3Nlc1xuICogQHBhcmFtIHtJY2FBY2NvdW50fSBhY2NvdW50XG4gKi9cbiAgICAgIG9uRnVsZmlsbGVkKFtjaGFpbkFkZHJlc3MsIGxvY2FsQWRkcmVzcywgcmVtb3RlQWRkcmVzc10sIGFjY291bnQpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uYWxTdG9yYWdlTm9kZSA9IHN0b3JhZ2VOb2RlID8gRShzdG9yYWdlTm9kZSkubWFrZUNoaWxkTm9kZShjaGFpbkFkZHJlc3MudmFsdWUpIDogdm9pZCAwO1xuICAgICAgICByZXR1cm4gd2F0Y2gob3B0aW9uYWxTdG9yYWdlTm9kZSwgdGhpcy5mYWNldHMubWFrZUNoaWxkTm9kZVdhdGNoZXIsIHtcbiAgICAgICAgICBhY2NvdW50LFxuICAgICAgICAgIGNoYWluQWRkcmVzcyxcbiAgICAgICAgICBsb2NhbEFkZHJlc3MsXG4gICAgICAgICAgcmVtb3RlQWRkcmVzc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG1ha2VDaGlsZE5vZGVXYXRjaGVyOiB7XG4gICAgICAvKipcbiAqIEBwYXJhbSB7UmVtb3RlPFN0b3JhZ2VOb2RlPiB8IHVuZGVmaW5lZH0gY2hpbGROb2RlXG4gKiBAcGFyYW0ge3tcbiAqICAgYWNjb3VudDogSWNhQWNjb3VudDtcbiAqICAgY2hhaW5BZGRyZXNzOiBDb3Ntb3NDaGFpbkFkZHJlc3M7XG4gKiAgIGxvY2FsQWRkcmVzczogTG9jYWxJYmNBZGRyZXNzO1xuICogICByZW1vdGVBZGRyZXNzOiBSZW1vdGVJYmNBZGRyZXNzO1xuICogfX0gY3R4XG4gKi9cbiAgICAgIG9uRnVsZmlsbGVkKGNoaWxkTm9kZSwgeyBhY2NvdW50LCBjaGFpbkFkZHJlc3MsIGxvY2FsQWRkcmVzcywgcmVtb3RlQWRkcmVzcyB9KSB7XG4gICAgICAgIGNvbnN0IHsgaWNxQ29ubmVjdGlvbiB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgcmV0dXJuIG1ha2VDb3Ntb3NPcmNoZXN0cmF0aW9uQWNjb3VudChcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjaGFpbkFkZHJlc3MsXG4gICAgICAgICAgICBsb2NhbEFkZHJlc3MsXG4gICAgICAgICAgICByZW1vdGVBZGRyZXNzXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBhY2NvdW50LFxuICAgICAgICAgICAgLyogRklYTUUgc3RvcmFnZSBwYXRoIGh0dHBzOi8vZ2l0aHViLmNvbS9BZ29yaWMvYWdvcmljLXNkay9pc3N1ZXMvOTA2NiovXG4gICAgICAgICAgICBzdG9yYWdlTm9kZTogY2hpbGROb2RlLFxuICAgICAgICAgICAgaWNxQ29ubmVjdGlvbixcbiAgICAgICAgICAgIHRpbWVyXG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuKTtcbmhhcmRlbihwcmVwYXJlUmVtb3RlQ2hhaW5GYWNhZGVLaXQpO1xudmFyIHByZXBhcmVSZW1vdGVDaGFpbkZhY2FkZSA9ICh6b25lLCBwb3dlcnMpID0+IHtcbiAgY29uc3QgbWFrZUxvY2FsQ2hhaW5GYWNhZGVLaXQgPSBwcmVwYXJlUmVtb3RlQ2hhaW5GYWNhZGVLaXQoem9uZSwgcG93ZXJzKTtcbiAgcmV0dXJuIHBpY2tGYWNldChtYWtlTG9jYWxDaGFpbkZhY2FkZUtpdCwgXCJwdWJsaWNcIik7XG59O1xuaGFyZGVuKHByZXBhcmVSZW1vdGVDaGFpbkZhY2FkZSk7XG5cbi8qIC4uL29yY2hlc3RyYXRpb24vc3JjL2ZhY2FkZS5qcyovXG52YXIgbWFrZU9yY2hlc3RyYXRpb25GYWNhZGUgPSAoe1xuICB6b25lLFxuICB0aW1lclNlcnZpY2UsXG4gIHpjZixcbiAgb3JjaGVzdHJhdGlvblNlcnZpY2UsXG4gIG1ha2VPcmNoZXN0cmF0b3IsXG4gIHZvd1Rvb2xzLFxuICBhc3luY0Zsb3dUb29sc1xufSkgPT4ge1xuICBhc3NlcnRBbGxEZWZpbmVkKHtcbiAgICB6b25lLFxuICAgIHRpbWVyU2VydmljZSxcbiAgICB6Y2YsXG4gICAgb3JjaGVzdHJhdGlvblNlcnZpY2UsXG4gICAgbWFrZU9yY2hlc3RyYXRvcixcbiAgICB2b3dUb29scyxcbiAgICBhc3luY0Zsb3dUb29sc1xuICB9KTtcbiAgY29uc3QgeyBwcmVwYXJlRW5kb3dtZW50LCBhc3luY0Zsb3cgfSA9IGFzeW5jRmxvd1Rvb2xzO1xuICBjb25zdCBvcmNoZXN0cmF0ZSA9IChkdXJhYmxlTmFtZSwgaG9zdEN0eCwgZ3Vlc3RGbikgPT4ge1xuICAgIGNvbnN0IHN1YlpvbmUgPSB6b25lLnN1YlpvbmUoZHVyYWJsZU5hbWUpO1xuICAgIGNvbnN0IFt3cmFwcGVkQ3R4XSA9IHByZXBhcmVFbmRvd21lbnQoc3ViWm9uZSwgXCJlbmRvd21lbnRzXCIsIFtob3N0Q3R4XSk7XG4gICAgY29uc3QgaG9zdEZuID0gYXN5bmNGbG93KHN1YlpvbmUsIFwiYXN5bmNGbG93XCIsIGd1ZXN0Rm4pO1xuICAgIGRlZXBNYXBPYmplY3QoXG4gICAgICB3cmFwcGVkQ3R4LFxuICAgICAgKHZhbCkgPT4gdmFsID09PSB6Y2YgJiYgYXNzZXJ0LmZhaWwoXCJkbyBub3QgdXNlIHpjZiBpbiBvcmNoZXN0cmF0aW9uIGNvbnRleHQ7IHRyeSB6Y2ZUb29sc1wiKVxuICAgICk7XG4gICAgY29uc3Qgb3JjRm4gPSAoXG4gICAgICAvKiogQHR5cGUge0hvc3RGb3JHdWVzdDxHRj59ICovXG4gICAgICAoKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgaG9zdE9yYyA9IG1ha2VPcmNoZXN0cmF0b3IoKTtcbiAgICAgICAgcmV0dXJuIGhvc3RGbihob3N0T3JjLCB3cmFwcGVkQ3R4LCAuLi5hcmdzKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgICByZXR1cm4gaGFyZGVuKG9yY0ZuKTtcbiAgfTtcbiAgY29uc3Qgb3JjaGVzdHJhdGVBbGwgPSAoZ3Vlc3RGbnMsIGhvc3RDdHgpID0+IHtcbiAgICBjb25zdCBtYXBwZWRGbG93cyA9IG5ldyBNYXAoXG4gICAgICBPYmplY3QuZW50cmllcyhndWVzdEZucykubWFwKChbbmFtZSwgZ3Vlc3RGbl0pID0+IFtcbiAgICAgICAgZ3Vlc3RGbixcbiAgICAgICAgKC4uLmFyZ3MpID0+IG9yY0Zuc1tuYW1lXSguLi5hcmdzKVxuICAgICAgXSlcbiAgICApO1xuICAgIGNvbnN0IG1hcHBlZENvbnRleHQgPSBkZWVwTWFwT2JqZWN0KFxuICAgICAgaG9zdEN0eCxcbiAgICAgICh2YWwpID0+IG1hcHBlZEZsb3dzLmdldChcbiAgICAgICAgLyoqIEB0eXBlIHthbnl9ICovXG4gICAgICAgIHZhbFxuICAgICAgKSB8fCB2YWxcbiAgICApO1xuICAgIGNvbnN0IG9yY0ZucyA9IChcbiAgICAgIC8qKiBAdHlwZSB7eyBbTiBpbiBrZXlvZiBHRk1dOiBIb3N0Rm9yR3Vlc3Q8R0ZNW05dPiB9fSAqL1xuICAgICAgT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgICAgICBPYmplY3QuZW50cmllcyhndWVzdEZucykubWFwKChbbmFtZSwgZ3Vlc3RGbl0pID0+IFtcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIG9yY2hlc3RyYXRlKG5hbWUsIG1hcHBlZENvbnRleHQsIGd1ZXN0Rm4pXG4gICAgICAgIF0pXG4gICAgICApXG4gICAgKTtcbiAgICByZXR1cm4geyAuLi5vcmNGbnMgfTtcbiAgfTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgb3JjaGVzdHJhdGUsXG4gICAgb3JjaGVzdHJhdGVBbGxcbiAgfSk7XG59O1xuaGFyZGVuKG1ha2VPcmNoZXN0cmF0aW9uRmFjYWRlKTtcblxuLyogLi4vRVJUUC9zcmMvc2FmZU1hdGguanMqL1xudmFyIG5hdFNhZmVNYXRoID0gaGFyZGVuKHtcbiAgLyoqIEB0eXBlIHtOYXRPcH0gKi9cbiAgLyogQmlnSW50cyBkb24ndCBvYnNlcnZhYmx5IG92ZXJmbG93Ki9cbiAgYWRkOiAoeCwgeSkgPT4gTmF0KHgpICsgTmF0KHkpLFxuICAvKiogQHR5cGUge05hdE9wfSAqL1xuICBzdWJ0cmFjdDogKHgsIHkpID0+IE5hdChOYXQoeCkgLSBOYXQoeSkpLFxuICAvKiogQHR5cGUge05hdE9wfSAqL1xuICBtdWx0aXBseTogKHgsIHkpID0+IE5hdCh4KSAqIE5hdCh5KSxcbiAgLyoqIEB0eXBlIHtOYXRPcH0gKi9cbiAgZmxvb3JEaXZpZGU6ICh4LCB5KSA9PiBOYXQoeCkgLyBOYXQoeSksXG4gIC8qKiBAdHlwZSB7TmF0T3B9ICovXG4gIGNlaWxEaXZpZGU6ICh4LCB5KSA9PiB7XG4gICAgeSA9IE5hdCh5KTtcbiAgICByZXR1cm4gTmF0KE5hdCh4KSArIHkgLSAxbikgLyB5O1xuICB9LFxuICAvKipcbiAqIERpdmlkZSB1c2luZyBoYWxmLXRvLWV2ZW4gKGFrYSBCYW5rZXIncyBSb3VuZGluZykgYXMgaW4gSUVFRSA3NzQgZGVmYXVsdFxuICogcm91bmRpbmdcbiAqXG4gKiBAdHlwZSB7TmF0T3B9XG4gKi9cbiAgYmFua2Vyc0RpdmlkZTogKGEyLCBiMykgPT4ge1xuICAgIGEyID0gTmF0KGEyKTtcbiAgICBiMyA9IE5hdChiMyk7XG4gICAgY29uc3QgZGl2ID0gYTIgLyBiMztcbiAgICBjb25zdCByZW0gPSBhMiAlIGIzO1xuICAgIGlmIChyZW0gKiAybiA+IGIzKSB7XG4gICAgICByZXR1cm4gZGl2ICsgMW47XG4gICAgfSBlbHNlIGlmIChyZW0gKiAybiA9PT0gYjMpIHtcbiAgICAgIGlmIChkaXYgJSAybiA9PT0gMW4pIHJldHVybiBkaXYgKyAxbjtcbiAgICB9XG4gICAgcmV0dXJuIGRpdjtcbiAgfSxcbiAgLyoqIEB0eXBlIHsoeDogbnVtYmVyIHwgYmlnaW50LCB5OiBudW1iZXIgfCBiaWdpbnQpID0+IGJvb2xlYW59ICovXG4gIGlzR1RFOiAoeCwgeSkgPT4gTmF0KHgpID49IE5hdCh5KVxufSk7XG5cbi8qIC4uL3pvZS9zcmMvY29udHJhY3RTdXBwb3J0L2JvbmRpbmdDdXJ2ZXMuanMqL1xudmFyIHsgc3VidHJhY3QsIGFkZCwgbXVsdGlwbHksIGZsb29yRGl2aWRlIH0gPSBuYXRTYWZlTWF0aDtcblxuLyogLi4vem9lL3NyYy9jb250cmFjdFN1cHBvcnQvc3RhdGVNYWNoaW5lLmpzKi9cbnZhciBtYWtlU3RhdGVNYWNoaW5lID0gKGluaXRpYWxTdGF0ZSwgYWxsb3dlZFRyYW5zaXRpb25zQXJyYXkpID0+IHtcbiAgbGV0IHN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICBjb25zdCBhbGxvd2VkVHJhbnNpdGlvbnMgPSBuZXcgTWFwKGFsbG93ZWRUcmFuc2l0aW9uc0FycmF5KTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgY2FuVHJhbnNpdGlvblRvOiAobmV4dFN0YXRlKSA9PiBhbGxvd2VkVHJhbnNpdGlvbnMuZ2V0KHN0YXRlKS5pbmNsdWRlcyhuZXh0U3RhdGUpLFxuICAgIHRyYW5zaXRpb25UbzogKG5leHRTdGF0ZSkgPT4ge1xuICAgICAgYXNzZXJ0MihhbGxvd2VkVHJhbnNpdGlvbnMuZ2V0KHN0YXRlKS5pbmNsdWRlcyhuZXh0U3RhdGUpKTtcbiAgICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIH0sXG4gICAgZ2V0U3RhdHVzOiAoXykgPT4gc3RhdGVcbiAgfSk7XG59O1xuaGFyZGVuKG1ha2VTdGF0ZU1hY2hpbmUpO1xuXG4vKiAuLi96b2Uvc3JjL3R5cGVHdWFyZHMuanMqL1xudmFyIEtleXdvcmRTaGFwZSA9IE0uc3RyaW5nKCk7XG52YXIgSW52aXRhdGlvbkhhbmRsZVNoYXBlID0gTS5yZW1vdGFibGUoXCJJbnZpdGF0aW9uSGFuZGxlXCIpO1xudmFyIEludml0YXRpb25TaGFwZSA9IE0ucmVtb3RhYmxlKFwiSW52aXRhdGlvblwiKTtcbnZhciBJbnN0YW5jZUhhbmRsZVNoYXBlID0gTS5yZW1vdGFibGUoXCJJbnN0YW5jZUhhbmRsZVwiKTtcbnZhciBJbnN0YWxsYXRpb25TaGFwZSA9IE0ucmVtb3RhYmxlKFwiSW5zdGFsbGF0aW9uXCIpO1xudmFyIFNlYXRTaGFwZSA9IE0ucmVtb3RhYmxlKFwiU2VhdFwiKTtcbnZhciBBbW91bnRLZXl3b3JkUmVjb3JkU2hhcGUgPSBNLnJlY29yZE9mKEtleXdvcmRTaGFwZSwgQW1vdW50U2hhcGUpO1xudmFyIEFtb3VudFBhdHRlcm5LZXl3b3JkUmVjb3JkU2hhcGUgPSBNLnJlY29yZE9mKFxuICBLZXl3b3JkU2hhcGUsXG4gIE0ucGF0dGVybigpXG4pO1xudmFyIFBheW1lbnRQS2V5d29yZFJlY29yZFNoYXBlID0gTS5yZWNvcmRPZihcbiAgS2V5d29yZFNoYXBlLFxuICBNLmVyZWYoUGF5bWVudFNoYXBlKVxuKTtcbnZhciBJc3N1ZXJLZXl3b3JkUmVjb3JkU2hhcGUgPSBNLnJlY29yZE9mKEtleXdvcmRTaGFwZSwgSXNzdWVyU2hhcGUpO1xudmFyIElzc3VlclBLZXl3b3JkUmVjb3JkU2hhcGUgPSBNLnJlY29yZE9mKFxuICBLZXl3b3JkU2hhcGUsXG4gIE0uZXJlZihJc3N1ZXJTaGFwZSlcbik7XG52YXIgQnJhbmRLZXl3b3JkUmVjb3JkU2hhcGUgPSBNLnJlY29yZE9mKEtleXdvcmRTaGFwZSwgQnJhbmRTaGFwZSk7XG52YXIgSXNzdWVyUmVjb3JkU2hhcGUgPSBNLnNwbGl0UmVjb3JkKFxuICB7XG4gICAgYnJhbmQ6IEJyYW5kU2hhcGUsXG4gICAgaXNzdWVyOiBJc3N1ZXJTaGFwZSxcbiAgICBhc3NldEtpbmQ6IEFzc2V0S2luZFNoYXBlXG4gIH0sXG4gIHsgZGlzcGxheUluZm86IERpc3BsYXlJbmZvU2hhcGUgfVxuKTtcbnZhciBUZXJtc1NoYXBlID0ge1xuICBpc3N1ZXJzOiBJc3N1ZXJLZXl3b3JkUmVjb3JkU2hhcGUsXG4gIGJyYW5kczogQnJhbmRLZXl3b3JkUmVjb3JkU2hhcGVcbn07XG5oYXJkZW4oVGVybXNTaGFwZSk7XG52YXIgSW5zdGFuY2VSZWNvcmRTaGFwZSA9IHtcbiAgaW5zdGFsbGF0aW9uOiBJbnN0YWxsYXRpb25TaGFwZSxcbiAgaW5zdGFuY2U6IEluc3RhbmNlSGFuZGxlU2hhcGUsXG4gIHRlcm1zOiBNLnNwbGl0UmVjb3JkKFRlcm1zU2hhcGUpXG59O1xuaGFyZGVuKEluc3RhbmNlUmVjb3JkU2hhcGUpO1xudmFyIEhhbmRsZUkgPSBNLmludGVyZmFjZShcIkhhbmRsZVwiLCB7fSk7XG52YXIgbWFrZUhhbmRsZVNoYXBlID0gKG5hbWUpID0+IE0ucmVtb3RhYmxlKGAke25hbWV9SGFuZGxlYCk7XG52YXIgVGltZXJTaGFwZSA9IG1ha2VIYW5kbGVTaGFwZShcInRpbWVyXCIpO1xudmFyIEZ1bGxQcm9wb3NhbFNoYXBlID0ge1xuICB3YW50OiBBbW91bnRQYXR0ZXJuS2V5d29yZFJlY29yZFNoYXBlLFxuICBnaXZlOiBBbW91bnRLZXl3b3JkUmVjb3JkU2hhcGUsXG4gIC8qIFRvIGFjY2VwdCBvbmx5IG9uZSwgd2UgY291bGQgdXNlIE0ub3IgcmF0aGVyIHRoYW4gTS5zcGxpdFJlY29yZCwqL1xuICAvKiBidXQgdGhlIGVycm9yIG1lc3NhZ2VzIHdvdWxkIGhhdmUgYmVlbiB3b3JzZS4gUmF0aGVyLCovXG4gIC8qIGNsZWFuUHJvcG9zYWwncyBhc3NlcnRFeGl0IGNoZWNrcyB0aGF0IHRoZXJlJ3MgZXhhY3RseSBvbmUuKi9cbiAgZXhpdDogTS5zcGxpdFJlY29yZChcbiAgICB7fSxcbiAgICB7XG4gICAgICBvbkRlbWFuZDogbnVsbCxcbiAgICAgIHdhaXZlZDogbnVsbCxcbiAgICAgIGFmdGVyRGVhZGxpbmU6IHtcbiAgICAgICAgdGltZXI6IE0uZXJlZihUaW1lclNoYXBlKSxcbiAgICAgICAgZGVhZGxpbmU6IFRpbWVzdGFtcFNoYXBlXG4gICAgICB9XG4gICAgfSxcbiAgICB7fVxuICApXG59O1xuaGFyZGVuKEZ1bGxQcm9wb3NhbFNoYXBlKTtcbnZhciBQcm9wb3NhbFNoYXBlID0gTS5zcGxpdFJlY29yZCh7fSwgRnVsbFByb3Bvc2FsU2hhcGUsIHt9KTtcbnZhciBFbXB0eVByb3Bvc2FsU2hhcGUgPSBNLnNwbGl0UmVjb3JkKHtcbiAgZ2l2ZToge30sXG4gIHdhbnQ6IHt9LFxuICBleGl0OiB7IG9uRGVtYW5kOiBudWxsIH1cbn0pO1xudmFyIGlzT25EZW1hbmRFeGl0UnVsZSA9IChleGl0KSA9PiB7XG4gIGNvbnN0IFtleGl0S2V5XSA9IE9iamVjdC5rZXlzKGV4aXQpO1xuICByZXR1cm4gZXhpdEtleSA9PT0gXCJvbkRlbWFuZFwiO1xufTtcbmhhcmRlbihpc09uRGVtYW5kRXhpdFJ1bGUpO1xudmFyIGlzV2FpdmVkRXhpdFJ1bGUgPSAoZXhpdCkgPT4ge1xuICBjb25zdCBbZXhpdEtleV0gPSBPYmplY3Qua2V5cyhleGl0KTtcbiAgcmV0dXJuIGV4aXRLZXkgPT09IFwid2FpdmVkXCI7XG59O1xuaGFyZGVuKGlzV2FpdmVkRXhpdFJ1bGUpO1xudmFyIGlzQWZ0ZXJEZWFkbGluZUV4aXRSdWxlID0gKGV4aXQpID0+IHtcbiAgY29uc3QgW2V4aXRLZXldID0gT2JqZWN0LmtleXMoZXhpdCk7XG4gIHJldHVybiBleGl0S2V5ID09PSBcImFmdGVyRGVhZGxpbmVcIjtcbn07XG5oYXJkZW4oaXNBZnRlckRlYWRsaW5lRXhpdFJ1bGUpO1xudmFyIEludml0YXRpb25FbGVtZW50U2hhcGUgPSBNLnNwbGl0UmVjb3JkKHtcbiAgZGVzY3JpcHRpb246IE0uc3RyaW5nKCksXG4gIGhhbmRsZTogSW52aXRhdGlvbkhhbmRsZVNoYXBlLFxuICBpbnN0YW5jZTogSW5zdGFuY2VIYW5kbGVTaGFwZSxcbiAgaW5zdGFsbGF0aW9uOiBJbnN0YWxsYXRpb25TaGFwZVxufSk7XG52YXIgT2ZmZXJIYW5kbGVySSA9IE0uaW50ZXJmYWNlKFwiT2ZmZXJIYW5kbGVyXCIsIHtcbiAgaGFuZGxlOiBNLmNhbGwoU2VhdFNoYXBlKS5vcHRpb25hbChNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpXG59KTtcbnZhciBTZWF0SGFuZGxlQWxsb2NhdGlvbnNTaGFwZSA9IE0uYXJyYXlPZih7XG4gIHNlYXRIYW5kbGU6IFNlYXRTaGFwZSxcbiAgYWxsb2NhdGlvbjogQW1vdW50S2V5d29yZFJlY29yZFNoYXBlXG59KTtcbnZhciBab2VNaW50U2hhcGUgPSBNLnJlbW90YWJsZShcIlpvZU1pbnRcIik7XG52YXIgWm9lTWludEkgPSBNLmludGVyZmFjZShcIlpvZU1pbnRcIiwge1xuICBnZXRJc3N1ZXJSZWNvcmQ6IE0uY2FsbCgpLnJldHVybnMoSXNzdWVyUmVjb3JkU2hhcGUpLFxuICBtaW50QW5kRXNjcm93OiBNLmNhbGwoQW1vdW50U2hhcGUpLnJldHVybnMoKSxcbiAgd2l0aGRyYXdBbmRCdXJuOiBNLmNhbGwoQW1vdW50U2hhcGUpLnJldHVybnMoKVxufSk7XG52YXIgRmVlTWludEFjY2Vzc1NoYXBlID0gTS5yZW1vdGFibGUoXCJGZWVNaW50QWNjZXNzXCIpO1xudmFyIEV4aXRPYmplY3RJID0gTS5pbnRlcmZhY2UoXCJFeGl0IE9iamVjdFwiLCB7XG4gIGV4aXQ6IE0uY2FsbCgpLnJldHVybnMoKVxufSk7XG52YXIgRXhpdE9iamVjdFNoYXBlID0gTS5yZW1vdGFibGUoXCJFeGl0T2JqXCIpO1xudmFyIEluc3RhbmNlQWRtaW5TaGFwZSA9IE0ucmVtb3RhYmxlKFwiSW5zdGFuY2VBZG1pblwiKTtcbnZhciBJbnN0YW5jZUFkbWluSSA9IE0uaW50ZXJmYWNlKFwiSW5zdGFuY2VBZG1pblwiLCB7XG4gIG1ha2VJbnZpdGF0aW9uOiBNLmNhbGwoSW52aXRhdGlvbkhhbmRsZVNoYXBlLCBNLnN0cmluZygpKS5vcHRpb25hbChNLnJlY29yZCgpLCBNLnBhdHRlcm4oKSkucmV0dXJucyhJbnZpdGF0aW9uU2hhcGUpLFxuICBzYXZlSXNzdWVyOiBNLmNhbGxXaGVuKE0uYXdhaXQoSXNzdWVyU2hhcGUpLCBLZXl3b3JkU2hhcGUpLnJldHVybnMoXG4gICAgSXNzdWVyUmVjb3JkU2hhcGVcbiAgKSxcbiAgbWFrZU5vRXNjcm93U2VhdDogTS5jYWxsKFxuICAgIEFtb3VudEtleXdvcmRSZWNvcmRTaGFwZSxcbiAgICBQcm9wb3NhbFNoYXBlLFxuICAgIEV4aXRPYmplY3RTaGFwZSxcbiAgICBTZWF0U2hhcGVcbiAgKS5yZXR1cm5zKFNlYXRTaGFwZSksXG4gIGV4aXRBbGxTZWF0czogTS5jYWxsKE0uYW55KCkpLnJldHVybnMoKSxcbiAgZmFpbEFsbFNlYXRzOiBNLmNhbGwoTS5hbnkoKSkucmV0dXJucygpLFxuICBleGl0U2VhdDogTS5jYWxsKFNlYXRTaGFwZSwgTS5hbnkoKSkucmV0dXJucygpLFxuICBmYWlsU2VhdDogTS5jYWxsKFNlYXRTaGFwZSwgTS5hbnkoKSkucmV0dXJucygpLFxuICBtYWtlWm9lTWludDogTS5jYWxsKEtleXdvcmRTaGFwZSkub3B0aW9uYWwoXG4gICAgQXNzZXRLaW5kU2hhcGUsXG4gICAgRGlzcGxheUluZm9TaGFwZSxcbiAgICBNLnNwbGl0UmVjb3JkKHt9LCB7IGVsZW1lbnRTaGFwZTogTS5wYXR0ZXJuKCkgfSlcbiAgKS5yZXR1cm5zKE0ucmVtb3RhYmxlKFwiem9lTWludFwiKSksXG4gIHJlZ2lzdGVyRmVlTWludDogTS5jYWxsKEtleXdvcmRTaGFwZSwgRmVlTWludEFjY2Vzc1NoYXBlKS5yZXR1cm5zKFxuICAgIE0ucmVtb3RhYmxlKFwiZmVlTWludFwiKVxuICApLFxuICByZXBsYWNlQWxsb2NhdGlvbnM6IE0uY2FsbChTZWF0SGFuZGxlQWxsb2NhdGlvbnNTaGFwZSkucmV0dXJucygpLFxuICBzdG9wQWNjZXB0aW5nT2ZmZXJzOiBNLmNhbGwoKS5yZXR1cm5zKCksXG4gIHNldE9mZmVyRmlsdGVyOiBNLmNhbGwoTS5hcnJheU9mKE0uc3RyaW5nKCkpKS5yZXR1cm5zKCksXG4gIGdldE9mZmVyRmlsdGVyOiBNLmNhbGwoKS5yZXR1cm5zKE0uYXJyYXlPZihNLnN0cmluZygpKSksXG4gIGdldEV4aXRTdWJzY3JpYmVyOiBNLmNhbGwoU2VhdFNoYXBlKS5yZXR1cm5zKFN1YnNjcmliZXJTaGFwZSksXG4gIGlzQmxvY2tlZDogTS5jYWxsKE0uc3RyaW5nKCkpLnJldHVybnMoTS5ib29sZWFuKCkpLFxuICByZXBhaXJDb250cmFjdENvbXBsZXRpb25XYXRjaGVyOiBNLmNhbGwoKS5yZXR1cm5zKClcbn0pO1xudmFyIEluc3RhbmNlU3RvcmFnZU1hbmFnZXJJS2l0ID0ge1xuICBpbnN0YW5jZVN0b3JhZ2VNYW5hZ2VyOiBNLmludGVyZmFjZShcIkluc3RhbmNlU3RvcmFnZU1hbmFnZXJcIiwge1xuICAgIGdldFRlcm1zOiBNLmNhbGwoKS5yZXR1cm5zKE0uc3BsaXRSZWNvcmQoVGVybXNTaGFwZSkpLFxuICAgIGdldElzc3VlcnM6IE0uY2FsbCgpLnJldHVybnMoSXNzdWVyS2V5d29yZFJlY29yZFNoYXBlKSxcbiAgICBnZXRCcmFuZHM6IE0uY2FsbCgpLnJldHVybnMoQnJhbmRLZXl3b3JkUmVjb3JkU2hhcGUpLFxuICAgIGdldEluc3RhbGxhdGlvbjogTS5jYWxsKCkucmV0dXJucyhJbnN0YWxsYXRpb25TaGFwZSksXG4gICAgZ2V0SW52aXRhdGlvbklzc3VlcjogTS5jYWxsKCkucmV0dXJucyhJc3N1ZXJTaGFwZSksXG4gICAgc2F2ZUlzc3VlcjogTS5jYWxsKElzc3VlclNoYXBlLCBLZXl3b3JkU2hhcGUpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICAgIG1ha2Vab2VNaW50OiBNLmNhbGwoS2V5d29yZFNoYXBlKS5vcHRpb25hbChcbiAgICAgIEFzc2V0S2luZFNoYXBlLFxuICAgICAgRGlzcGxheUluZm9TaGFwZSxcbiAgICAgIE0uc3BsaXRSZWNvcmQoe30sIHsgZWxlbWVudFNoYXBlOiBNLnBhdHRlcm4oKSB9KVxuICAgICkucmV0dXJucyhNLmVyZWYoWm9lTWludFNoYXBlKSksXG4gICAgcmVnaXN0ZXJGZWVNaW50OiBNLmNhbGwoS2V5d29yZFNoYXBlLCBGZWVNaW50QWNjZXNzU2hhcGUpLnJldHVybnMoXG4gICAgICBNLnJlbW90YWJsZShcImZlZU1pbnRcIilcbiAgICApLFxuICAgIGdldEluc3RhbmNlUmVjb3JkOiBNLmNhbGwoKS5yZXR1cm5zKEluc3RhbmNlUmVjb3JkU2hhcGUpLFxuICAgIGdldElzc3VlclJlY29yZHM6IE0uY2FsbCgpLnJldHVybnMoTS5hcnJheU9mKElzc3VlclJlY29yZFNoYXBlKSksXG4gICAgZ2V0V2l0aGRyYXdGYWNldDogTS5jYWxsKCkucmV0dXJucyhNLnJlbW90YWJsZShcIldpdGhkcmF3RmFjZXRcIikpLFxuICAgIGluaXRJbnN0YW5jZUFkbWluOiBNLmNhbGwoXG4gICAgICBJbnN0YW5jZUhhbmRsZVNoYXBlLFxuICAgICAgTS5yZW1vdGFibGUoXCJpbnN0YW5jZUFkbWluXCIpXG4gICAgKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgICBkZWxldGVJbnN0YW5jZUFkbWluOiBNLmNhbGwoSW5zdGFuY2VBZG1pblNoYXBlKS5yZXR1cm5zKCksXG4gICAgbWFrZUludml0YXRpb246IE0uY2FsbChJbnZpdGF0aW9uSGFuZGxlU2hhcGUsIE0uc3RyaW5nKCkpLm9wdGlvbmFsKE0ucmVjb3JkKCksIE0ucGF0dGVybigpKS5yZXR1cm5zKFBheW1lbnRTaGFwZSksXG4gICAgZ2V0Um9vdDogTS5jYWxsKCkucmV0dXJucyhNLmFueSgpKSxcbiAgICBnZXRBZG1pbk5vZGU6IE0uY2FsbCgpLnJldHVybnMoTS5yZW1vdGFibGUoXCJhZG1pbk5vZGVcIikpXG4gIH0pLFxuICB3aXRoZHJhd0ZhY2V0OiBNLmludGVyZmFjZShcIldpdGhkcmF3RmFjZXRcIiwge1xuICAgIHdpdGhkcmF3UGF5bWVudHM6IE0uY2FsbChBbW91bnRLZXl3b3JkUmVjb3JkU2hhcGUpLnJldHVybnMoXG4gICAgICBQYXltZW50UEtleXdvcmRSZWNvcmRTaGFwZVxuICAgIClcbiAgfSksXG4gIGhlbHBlcnM6IE0uaW50ZXJmYWNlKFwiSW5zdGFuY2VTdG9yYWdlTWFuYWdlciBoZWxwZXJcIiwge1xuICAgIHdyYXBJc3N1ZXJLaXRXaXRoWm9lTWludDogTS5jYWxsKFxuICAgICAgS2V5d29yZFNoYXBlLFxuICAgICAgSXNzdWVyS2l0U2hhcGUsXG4gICAgICBNLnJlbW90YWJsZShcImFkbWluTm9kZVwiKVxuICAgICkucmV0dXJucyhab2VNaW50U2hhcGUpXG4gIH0pXG59O1xuaGFyZGVuKEluc3RhbmNlU3RvcmFnZU1hbmFnZXJJS2l0KTtcbnZhciBCdW5kbGVDYXBTaGFwZSA9IE0ucmVtb3RhYmxlKFwiYnVuZGxlQ2FwXCIpO1xudmFyIEJ1bmRsZVNoYXBlID0gTS5hbmQoXG4gIE0uc3BsaXRSZWNvcmQoeyBtb2R1bGVGb3JtYXQ6IE0uYW55KCkgfSksXG4gIE0ucmVjb3JkT2YoTS5zdHJpbmcoKSwgTS5zdHJpbmcoeyBzdHJpbmdMZW5ndGhMaW1pdDogSW5maW5pdHkgfSkpXG4pO1xudmFyIFVud3JhcHBlZEluc3RhbGxhdGlvblNoYXBlID0gTS5zcGxpdFJlY29yZChcbiAgeyBpbnN0YWxsYXRpb246IEluc3RhbGxhdGlvblNoYXBlIH0sXG4gIHtcbiAgICBidW5kbGU6IE0ucmVjb3JkT2YoTS5zdHJpbmcoKSwgTS5zdHJpbmcoeyBzdHJpbmdMZW5ndGhMaW1pdDogSW5maW5pdHkgfSkpLFxuICAgIGJ1bmRsZUNhcDogQnVuZGxlQ2FwU2hhcGUsXG4gICAgYnVuZGxlSUQ6IE0uc3RyaW5nKClcbiAgfSxcbiAge31cbik7XG52YXIgWm9lU3RvcmFnZU1hbmFnZXJJS2l0ID0ge1xuICB6b2VTZXJ2aWNlRGF0YUFjY2VzczogTS5pbnRlcmZhY2UoXCJab2VTZXJ2aWNlIGRhdGFBY2Nlc3NcIiwge1xuICAgIGdldFRlcm1zOiBNLmNhbGwoSW5zdGFuY2VIYW5kbGVTaGFwZSkucmV0dXJucyhNLnNwbGl0UmVjb3JkKFRlcm1zU2hhcGUpKSxcbiAgICBnZXRJc3N1ZXJzOiBNLmNhbGwoSW5zdGFuY2VIYW5kbGVTaGFwZSkucmV0dXJucyhJc3N1ZXJLZXl3b3JkUmVjb3JkU2hhcGUpLFxuICAgIGdldEJyYW5kczogTS5jYWxsKEluc3RhbmNlSGFuZGxlU2hhcGUpLnJldHVybnMoQnJhbmRLZXl3b3JkUmVjb3JkU2hhcGUpLFxuICAgIGdldEluc3RhbGxhdGlvbjogTS5jYWxsKEluc3RhbmNlSGFuZGxlU2hhcGUpLnJldHVybnMoXG4gICAgICBNLmVyZWYoTS5yZW1vdGFibGUoXCJJbnN0YWxsYXRpb25cIikpXG4gICAgKSxcbiAgICBnZXRJbnZpdGF0aW9uSXNzdWVyOiBNLmNhbGwoKS5yZXR1cm5zKElzc3VlclNoYXBlKSxcbiAgICBnZXRCdW5kbGVJREZyb21JbnN0YWxsYXRpb246IE0uY2FsbChJbnN0YWxsYXRpb25TaGFwZSkucmV0dXJucyhcbiAgICAgIE0uZXJlZihNLnN0cmluZygpKVxuICAgICksXG4gICAgaW5zdGFsbEJ1bmRsZTogTS5jYWxsKEJ1bmRsZVNoYXBlKS5vcHRpb25hbChNLnN0cmluZygpKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgICBpbnN0YWxsQnVuZGxlSUQ6IE0uY2FsbChNLnN0cmluZygpKS5vcHRpb25hbChNLnN0cmluZygpKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgICBnZXRQdWJsaWNGYWNldDogTS5jYWxsKEluc3RhbmNlSGFuZGxlU2hhcGUpLnJldHVybnMoXG4gICAgICBNLmVyZWYoTS5yZW1vdGFibGUoXCJQdWJsaWNGYWNldFwiKSlcbiAgICApLFxuICAgIGdldE9mZmVyRmlsdGVyOiBNLmNhbGwoSW5zdGFuY2VIYW5kbGVTaGFwZSkucmV0dXJucyhNLmFycmF5T2YoTS5zdHJpbmcoKSkpLFxuICAgIGdldFByb3Bvc2FsU2hhcGVGb3JJbnZpdGF0aW9uOiBNLmNhbGwoSW52aXRhdGlvbkhhbmRsZVNoYXBlKS5yZXR1cm5zKFxuICAgICAgTS5vcHQoTS5wYXR0ZXJuKCkpXG4gICAgKVxuICB9KSxcbiAgbWFrZU9mZmVyQWNjZXNzOiBNLmludGVyZmFjZShcIlpvZVN0b3JhZ2UgbWFrZU9mZmVyIGFjY2Vzc1wiLCB7XG4gICAgZ2V0QXNzZXRLaW5kQnlCcmFuZDogTS5jYWxsKEJyYW5kU2hhcGUpLnJldHVybnMoQXNzZXRLaW5kU2hhcGUpLFxuICAgIGdldEluc3RhbmNlQWRtaW46IE0uY2FsbChJbnN0YW5jZUhhbmRsZVNoYXBlKS5yZXR1cm5zKFxuICAgICAgTS5yZW1vdGFibGUoXCJpbnN0YW5jZUFkbWluXCIpXG4gICAgKSxcbiAgICBnZXRQcm9wb3NhbFNoYXBlRm9ySW52aXRhdGlvbjogTS5jYWxsKEludml0YXRpb25IYW5kbGVTaGFwZSkucmV0dXJucyhcbiAgICAgIE0ub3B0KE0ucGF0dGVybigpKVxuICAgICksXG4gICAgZ2V0SW52aXRhdGlvbklzc3VlcjogTS5jYWxsKCkucmV0dXJucyhJc3N1ZXJTaGFwZSksXG4gICAgZGVwb3NpdFBheW1lbnRzOiBNLmNhbGwoUHJvcG9zYWxTaGFwZSwgUGF5bWVudFBLZXl3b3JkUmVjb3JkU2hhcGUpLnJldHVybnMoXG4gICAgICBNLnByb21pc2UoKVxuICAgIClcbiAgfSksXG4gIHN0YXJ0SW5zdGFuY2VBY2Nlc3M6IE0uaW50ZXJmYWNlKFwiWm9lU3RvcmFnZSBzdGFydEluc3RhbmNlIGFjY2Vzc1wiLCB7XG4gICAgbWFrZVpvZUluc3RhbmNlU3RvcmFnZU1hbmFnZXI6IE0uY2FsbChcbiAgICAgIEluc3RhbGxhdGlvblNoYXBlLFxuICAgICAgTS5hbnkoKSxcbiAgICAgIElzc3VlclBLZXl3b3JkUmVjb3JkU2hhcGUsXG4gICAgICBJbnN0YW5jZUhhbmRsZVNoYXBlLFxuICAgICAgTS5vcihCdW5kbGVDYXBTaGFwZSwgQnVuZGxlU2hhcGUpLFxuICAgICAgTS5zdHJpbmcoKVxuICAgICkucmV0dXJucyhNLnByb21pc2UoKSksXG4gICAgdW53cmFwSW5zdGFsbGF0aW9uOiBNLmNhbGxXaGVuKE0uZXJlZihJbnN0YWxsYXRpb25TaGFwZSkpLnJldHVybnMoXG4gICAgICBVbndyYXBwZWRJbnN0YWxsYXRpb25TaGFwZVxuICAgIClcbiAgfSksXG4gIGludml0YXRpb25Jc3N1ZXJBY2Nlc3M6IE0uaW50ZXJmYWNlKFwiWm9lU3RvcmFnZSBpbnZpdGF0aW9uSXNzdWVyXCIsIHtcbiAgICBnZXRJbnZpdGF0aW9uSXNzdWVyOiBNLmNhbGwoKS5yZXR1cm5zKElzc3VlclNoYXBlKVxuICB9KVxufTtcbmhhcmRlbihab2VTdG9yYWdlTWFuYWdlcklLaXQpO1xudmFyIFpvZVNlcnZpY2VJID0gTS5pbnRlcmZhY2UoXCJab2VTZXJ2aWNlXCIsIHtcbiAgaW5zdGFsbDogTS5jYWxsKE0uYW55KCkpLm9wdGlvbmFsKE0uc3RyaW5nKCkpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICBpbnN0YWxsQnVuZGxlSUQ6IE0uY2FsbChNLnN0cmluZygpKS5vcHRpb25hbChNLnN0cmluZygpKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgc3RhcnRJbnN0YW5jZTogTS5jYWxsKE0uZXJlZihJbnN0YWxsYXRpb25TaGFwZSkpLm9wdGlvbmFsKElzc3VlclBLZXl3b3JkUmVjb3JkU2hhcGUsIE0ucmVjb3JkKCksIE0ucmVjb3JkKCksIE0uc3RyaW5nKCkpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICBvZmZlcjogTS5jYWxsKE0uZXJlZihJbnZpdGF0aW9uU2hhcGUpKS5vcHRpb25hbChQcm9wb3NhbFNoYXBlLCBQYXltZW50UEtleXdvcmRSZWNvcmRTaGFwZSwgTS5hbnkoKSkucmV0dXJucyhNLnByb21pc2UoKSksXG4gIGdldE9mZmVyRmlsdGVyOiBNLmNhbGxXaGVuKE0uYXdhaXQoSW5zdGFuY2VIYW5kbGVTaGFwZSkpLnJldHVybnMoXG4gICAgTS5hcnJheU9mKE0uc3RyaW5nKCkpXG4gICksXG4gIGdldEludml0YXRpb25Jc3N1ZXI6IE0uY2FsbCgpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICBnZXRGZWVJc3N1ZXI6IE0uY2FsbCgpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICBnZXRCcmFuZHM6IE0uY2FsbFdoZW4oTS5hd2FpdChJbnN0YW5jZUhhbmRsZVNoYXBlKSkucmV0dXJucyhcbiAgICBCcmFuZEtleXdvcmRSZWNvcmRTaGFwZVxuICApLFxuICBnZXRJc3N1ZXJzOiBNLmNhbGxXaGVuKE0uYXdhaXQoSW5zdGFuY2VIYW5kbGVTaGFwZSkpLnJldHVybnMoXG4gICAgSXNzdWVyS2V5d29yZFJlY29yZFNoYXBlXG4gICksXG4gIGdldFB1YmxpY0ZhY2V0OiBNLmNhbGxXaGVuKE0uYXdhaXQoSW5zdGFuY2VIYW5kbGVTaGFwZSkpLnJldHVybnMoXG4gICAgTS5yZW1vdGFibGUoXCJQdWJsaWNGYWNldFwiKVxuICApLFxuICBnZXRUZXJtczogTS5jYWxsV2hlbihNLmF3YWl0KEluc3RhbmNlSGFuZGxlU2hhcGUpKS5yZXR1cm5zKE0uYW55KCkpLFxuICBnZXRJbnN0YWxsYXRpb25Gb3JJbnN0YW5jZTogTS5jYWxsV2hlbihNLmF3YWl0KEluc3RhbmNlSGFuZGxlU2hhcGUpKS5yZXR1cm5zKFxuICAgIE0uZXJlZihNLnJlbW90YWJsZShcIkluc3RhbGxhdGlvblwiKSlcbiAgKSxcbiAgZ2V0QnVuZGxlSURGcm9tSW5zdGFsbGF0aW9uOiBNLmNhbGxXaGVuKE0uYXdhaXQoSW5zdGFsbGF0aW9uU2hhcGUpKS5yZXR1cm5zKFxuICAgIE0uZXJlZihNLnN0cmluZygpKVxuICApLFxuICBnZXRJbnN0YWxsYXRpb246IE0uY2FsbChNLmVyZWYoSW52aXRhdGlvblNoYXBlKSkucmV0dXJucyhNLnByb21pc2UoKSksXG4gIGdldEluc3RhbmNlOiBNLmNhbGwoTS5lcmVmKEludml0YXRpb25TaGFwZSkpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICBnZXRDb25maWd1cmF0aW9uOiBNLmNhbGwoKS5yZXR1cm5zKHtcbiAgICBmZWVJc3N1ZXJDb25maWc6IHtcbiAgICAgIG5hbWU6IE0uc3RyaW5nKCksXG4gICAgICBhc3NldEtpbmQ6IFwibmF0XCIsXG4gICAgICBkaXNwbGF5SW5mbzogRGlzcGxheUluZm9TaGFwZVxuICAgIH1cbiAgfSksXG4gIGdldEludml0YXRpb25EZXRhaWxzOiBNLmNhbGwoTS5lcmVmKEludml0YXRpb25TaGFwZSkpLnJldHVybnMoTS5hbnkoKSksXG4gIGdldFByb3Bvc2FsU2hhcGVGb3JJbnZpdGF0aW9uOiBNLmNhbGwoSW52aXRhdGlvbkhhbmRsZVNoYXBlKS5yZXR1cm5zKFxuICAgIE0ub3B0KE0ucGF0dGVybigpKVxuICApXG59KTtcbnZhciBBZG1pbkZhY2V0SSA9IE0uaW50ZXJmYWNlKFwiWmNmQWRtaW5GYWNldFwiLCB7XG4gIGdldFZhdFNodXRkb3duUHJvbWlzZTogTS5jYWxsKCkucmV0dXJucyhNLnByb21pc2UoKSksXG4gIHJlc3RhcnRDb250cmFjdDogTS5jYWxsKCkub3B0aW9uYWwoTS5hbnkoKSkucmV0dXJucyhNLnByb21pc2UoKSksXG4gIHVwZ3JhZGVDb250cmFjdDogTS5jYWxsKE0uc3RyaW5nKCkpLm9wdGlvbmFsKE0uYW55KCkpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICB0ZXJtaW5hdGVDb250cmFjdDogTS5jYWxsKE0uZXJyb3IoKSkucmV0dXJucyhNLnByb21pc2UoKSlcbn0pO1xudmFyIFNlYXREYXRhU2hhcGUgPSBNLnNwbGl0UmVjb3JkKFxuICB7XG4gICAgcHJvcG9zYWw6IFByb3Bvc2FsU2hhcGUsXG4gICAgaW5pdGlhbEFsbG9jYXRpb246IEFtb3VudEtleXdvcmRSZWNvcmRTaGFwZSxcbiAgICBzZWF0SGFuZGxlOiBTZWF0U2hhcGVcbiAgfSxcbiAge1xuICAgIG9mZmVyQXJnczogTS5hbnkoKVxuICB9XG4pO1xudmFyIEhhbmRsZU9mZmVySSA9IE0uaW50ZXJmYWNlKFwiSGFuZGxlT2ZmZXJcIiwge1xuICBoYW5kbGVPZmZlcjogTS5jYWxsKEludml0YXRpb25IYW5kbGVTaGFwZSwgU2VhdERhdGFTaGFwZSkucmV0dXJucyh7XG4gICAgb2ZmZXJSZXN1bHRQcm9taXNlOiBNLnByb21pc2UoKSxcbiAgICBleGl0T2JqOiBFeGl0T2JqZWN0U2hhcGVcbiAgfSlcbn0pO1xudmFyIFByaWNlUXVvdGVTaGFwZSA9IHtcbiAgcXVvdGVBbW91bnQ6IEFtb3VudFNoYXBlLFxuICBxdW90ZVBheW1lbnQ6IE0uZXJlZihQYXltZW50U2hhcGUpXG59O1xuaGFyZGVuKFByaWNlUXVvdGVTaGFwZSk7XG5cbi8qIC4uL3pvZS9zcmMvY29udHJhY3RTdXBwb3J0L2F0b21pY1RyYW5zZmVyLmpzKi9cbnZhciBUcmFuc2ZlclBhcnRTaGFwZSA9IE0uc3BsaXRBcnJheShcbiAgaGFyZGVuKFtNLm9wdChTZWF0U2hhcGUpLCBNLm9wdChTZWF0U2hhcGUpLCBNLm9wdChBbW91bnRLZXl3b3JkUmVjb3JkU2hhcGUpXSksXG4gIGhhcmRlbihbTS5vcHQoQW1vdW50S2V5d29yZFJlY29yZFNoYXBlKV0pXG4pO1xudmFyIGF0b21pY1RyYW5zZmVyID0gKHpjZiwgZnJvbVNlYXQgPSB2b2lkIDAsIHRvU2VhdCA9IHZvaWQgMCwgZnJvbUFtb3VudHMgPSB2b2lkIDAsIHRvQW1vdW50cyA9IHZvaWQgMCkgPT4gemNmLmF0b21pY1JlYXJyYW5nZShoYXJkZW4oW1tmcm9tU2VhdCwgdG9TZWF0LCBmcm9tQW1vdW50cywgdG9BbW91bnRzXV0pKTtcblxuLyogLi4vem9lL3NyYy9jb250cmFjdEZhY2V0L29mZmVyU2FmZXR5LmpzKi9cbnZhciBzYXRpc2ZpZXNJbnRlcm5hbCA9IChnaXZlT3JXYW50ID0ge30sIGFsbG9jYXRpb24pID0+IHtcbiAgY29uc3QgaXNHVEVCeUtleXdvcmQgPSAoW2tleXdvcmQsIHJlcXVpcmVkQW1vdW50XSkgPT4ge1xuICAgIGlmIChhbGxvY2F0aW9uW2tleXdvcmRdID09PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBjb25zdCBhbGxvY2F0aW9uQW1vdW50ID0gYWxsb2NhdGlvbltrZXl3b3JkXTtcbiAgICByZXR1cm4gQW1vdW50TWF0aC5pc0dURShhbGxvY2F0aW9uQW1vdW50LCByZXF1aXJlZEFtb3VudCkgPyAxIDogMDtcbiAgfTtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGdpdmVPcldhbnQpLmV2ZXJ5KGlzR1RFQnlLZXl3b3JkKSA/IDEgOiAwO1xufTtcbnZhciBzYXRpc2ZpZXNXYW50ID0gKHByb3Bvc2FsLCBhbGxvY2F0aW9uKSA9PiBzYXRpc2ZpZXNJbnRlcm5hbChwcm9wb3NhbC53YW50LCBhbGxvY2F0aW9uKTtcbnZhciBzYXRpc2ZpZXNHaXZlID0gKHByb3Bvc2FsLCBhbGxvY2F0aW9uKSA9PiBzYXRpc2ZpZXNJbnRlcm5hbChwcm9wb3NhbC5naXZlLCBhbGxvY2F0aW9uKTtcbmZ1bmN0aW9uIGlzT2ZmZXJTYWZlKHByb3Bvc2FsLCBhbGxvY2F0aW9uKSB7XG4gIHJldHVybiBzYXRpc2ZpZXNHaXZlKHByb3Bvc2FsLCBhbGxvY2F0aW9uKSA+IDAgfHwgc2F0aXNmaWVzV2FudChwcm9wb3NhbCwgYWxsb2NhdGlvbikgPiAwO1xufVxuaGFyZGVuKGlzT2ZmZXJTYWZlKTtcbmhhcmRlbihzYXRpc2ZpZXNXYW50KTtcblxuLyogLi4vem9lL3NyYy9jb250cmFjdFN1cHBvcnQvem9lSGVscGVycy5qcyovXG52YXIgZGVwb3NpdFRvU2VhdFN1Y2Nlc3NNc2cgPSBgRGVwb3NpdCBhbmQgcmVhbGxvY2F0aW9uIHN1Y2Nlc3NmdWwuYDtcbnZhciBkZXBvc2l0VG9TZWF0ID0gYXN5bmMgKHpjZiwgcmVjaXBpZW50U2VhdCwgYW1vdW50cywgcGF5bWVudHMpID0+IHtcbiAgIXJlY2lwaWVudFNlYXQuaGFzRXhpdGVkKCkgfHwgdGhyb3dSZWRhY3RlZGBUaGUgcmVjaXBpZW50U2VhdCBjYW5ub3QgaGF2ZSBleGl0ZWQuYDtcbiAgY29uc3QgcmVhbGxvY2F0ZUFmdGVyRGVwb3NpdCA9ICh0ZW1wU2VhdCkgPT4ge1xuICAgIGF0b21pY1RyYW5zZmVyKHpjZiwgdGVtcFNlYXQsIHJlY2lwaWVudFNlYXQsIGFtb3VudHMpO1xuICAgIHRlbXBTZWF0LmV4aXQoKTtcbiAgICByZXR1cm4gZGVwb3NpdFRvU2VhdFN1Y2Nlc3NNc2c7XG4gIH07XG4gIGNvbnN0IGludml0YXRpb24gPSB6Y2YubWFrZUludml0YXRpb24oXG4gICAgcmVhbGxvY2F0ZUFmdGVyRGVwb3NpdCxcbiAgICBcInRlbXBvcmFyeSBzZWF0IGZvciBkZXBvc2l0XCJcbiAgKTtcbiAgY29uc3QgcHJvcG9zYWwgPSBoYXJkZW4oeyBnaXZlOiBhbW91bnRzIH0pO1xuICBoYXJkZW4ocGF5bWVudHMpO1xuICBjb25zdCB6b2UgPSB6Y2YuZ2V0Wm9lU2VydmljZSgpO1xuICBjb25zdCB0ZW1wVXNlclNlYXQgPSBFKHpvZSkub2ZmZXIoaW52aXRhdGlvbiwgcHJvcG9zYWwsIHBheW1lbnRzKTtcbiAgcmV0dXJuIEUodGVtcFVzZXJTZWF0KS5nZXRPZmZlclJlc3VsdCgpO1xufTtcblxuLyogLi4vRVJUUC9zcmMvcmF0aW8uanMqL1xudmFyIHsgbXVsdGlwbHk6IG11bHRpcGx5MiwgZmxvb3JEaXZpZGU6IGZsb29yRGl2aWRlMiwgY2VpbERpdmlkZSwgYmFua2Vyc0RpdmlkZSwgYWRkOiBhZGQyLCBzdWJ0cmFjdDogc3VidHJhY3QyIH0gPSBuYXRTYWZlTWF0aDtcblxuLyogLi4vem9lL3NyYy9jb250cmFjdFN1cHBvcnQvZHVyYWJpbGl0eS5qcyovXG52YXIgbWFrZUVwaGVtZXJhUHJvdmlkZXIgPSAoaW5pdCkgPT4ge1xuICBjb25zdCBleHRhbnQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbiAgcmV0dXJuIChrZXkpID0+IHtcbiAgICBpZiAoZXh0YW50LmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm4gZXh0YW50LmdldChrZXkpO1xuICAgIH1cbiAgICBjb25zdCBuZXdFcGggPSBpbml0KGtleSk7XG4gICAgZXh0YW50LnNldChrZXksIG5ld0VwaCk7XG4gICAgcmV0dXJuIG5ld0VwaDtcbiAgfTtcbn07XG5oYXJkZW4obWFrZUVwaGVtZXJhUHJvdmlkZXIpO1xudmFyIHByb3ZpZGVFbXB0eVNlYXQgPSAoemNmLCBiYWdnYWdlLCBuYW1lKSA9PiB7XG4gIHJldHVybiBwcm92aWRlKGJhZ2dhZ2UsIG5hbWUsICgpID0+IHpjZi5tYWtlRW1wdHlTZWF0S2l0KCkuemNmU2VhdCk7XG59O1xuaGFyZGVuKHByb3ZpZGVFbXB0eVNlYXQpO1xudmFyIHByb3ZpZGVBbGwgPSAoYmFnZ2FnZSwgdGh1bmtzKSA9PiB7XG4gIGNvbnN0IGtleXM4ID0gT2JqZWN0LmtleXModGh1bmtzKTtcbiAgY29uc3QgaW5CYWdnYWdlID0gYmFnZ2FnZS5oYXMoa2V5czhbMF0pO1xuICBpZiAoaW5CYWdnYWdlKSB7XG4gICAgY29uc3Qgb2JqID0gb2JqZWN0TWFwKFxuICAgICAgdGh1bmtzLFxuICAgICAgLyoqIEB0eXBlIHsodmFsdWU6IGFueSwga2V5OiBzdHJpbmcpID0+IGFueX0gKi9cbiAgICAgIChfLCBrKSA9PiBiYWdnYWdlLmdldChrKVxuICAgICk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShoYXJkZW4ob2JqKSk7XG4gIH1cbiAgY29uc3Qga2V5ZWRQcm9taXNlcyA9IG9iamVjdE1hcCh0aHVua3MsIChmbikgPT4gZm4oKSk7XG4gIHJldHVybiBhbGxWYWx1ZXMoa2V5ZWRQcm9taXNlcykudGhlbigoa2V5ZWRWYWxzKSA9PiB7XG4gICAgZm9yIChjb25zdCBbaywgdjJdIG9mIE9iamVjdC5lbnRyaWVzKGtleWVkVmFscykpIHtcbiAgICAgIGJhZ2dhZ2UuaW5pdChrLCB2Mik7XG4gICAgfVxuICAgIHJldHVybiBrZXllZFZhbHM7XG4gIH0pO1xufTtcbmhhcmRlbihwcm92aWRlQWxsKTtcblxuLyogLi4vYmFzZS16b25lL3NyYy9wcmVwYXJlLWF0dGVudWF0b3IuanMqL1xudmFyIHdyYXBwZXJNZXRob2RzID0gKHdyYXBwZXJLaW5kTmFtZSwgdU1ldGhvZE5hbWVzLCBleHRyYU1ldGhvZHMgPSB7fSkgPT4gaGFyZGVuKHtcbiAgLi4uZnJvbVVuaXF1ZUVudHJpZXMoXG4gICAgdU1ldGhvZE5hbWVzLm1hcCgobmFtZSkgPT4gW1xuICAgICAgbmFtZSxcbiAgICAgIHtcbiAgICAgICAgLyogVXNlIGNvbmNpc2UgbWV0aG9kIHN5bnRheCBmb3IgZXhvIG1ldGhvZHMqL1xuICAgICAgICBbbmFtZV0oLi4uYXJncykge1xuICAgICAgICAgIGNvbnN0IHsgdW5kZXJseWluZyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICB1bmRlcmx5aW5nICE9PSB2b2lkIDAgfHwgdGhyb3dSZWRhY3RlZGAke3F1b3RlKHdyYXBwZXJLaW5kTmFtZSl9IHJldm9rZWRgO1xuICAgICAgICAgIHJldHVybiB1bmRlcmx5aW5nW25hbWVdKC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIC8qIEB0cy1leHBlY3QtZXJyb3IgdXNpbmcgcG9zc2libGUgc3ltYm9sIGFzIGluZGV4IHR5cGUqL1xuICAgICAgfVtuYW1lXVxuICAgIF0pXG4gICksXG4gIC4uLmV4dHJhTWV0aG9kc1xufSk7XG5oYXJkZW4od3JhcHBlck1ldGhvZHMpO1xudmFyIHByZXBhcmVBdHRlbnVhdG9yTWFrZXIgPSAoem9uZSwgdUtpbmROYW1lLCB1TWV0aG9kTmFtZXMsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCB7XG4gICAgdUludGVyZmFjZU5hbWUgPSB1S2luZE5hbWUsXG4gICAgZXh0cmFNZXRob2RHdWFyZHMgPSB7fSxcbiAgICBleHRyYU1ldGhvZHMgPSB7fVxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgQXR0ZW51YXRvckkgPSBNLmludGVyZmFjZShcbiAgICBgJHt1SW50ZXJmYWNlTmFtZX1fYXR0ZW51YXRvcmAsXG4gICAgZXh0cmFNZXRob2RHdWFyZHMsXG4gICAgeyBkZWZhdWx0R3VhcmRzOiBcInJhd1wiIH1cbiAgKTtcbiAgY29uc3QgYXR0ZW51YXRvcktpbmROYW1lID0gYCR7dUtpbmROYW1lfV9hdHRlbnVhdG9yYDtcbiAgcmV0dXJuIHpvbmUuZXhvQ2xhc3MoXG4gICAgYXR0ZW51YXRvcktpbmROYW1lLFxuICAgIEF0dGVudWF0b3JJLFxuICAgICh1bmRlcmx5aW5nKSA9PiAoeyB1bmRlcmx5aW5nIH0pLFxuICAgIHdyYXBwZXJNZXRob2RzKGF0dGVudWF0b3JLaW5kTmFtZSwgdU1ldGhvZE5hbWVzLCBleHRyYU1ldGhvZHMpLFxuICAgIHtcbiAgICAgIHN0YXRlU2hhcGU6IHsgdW5kZXJseWluZzogTS5vcHQoTS5yZW1vdGFibGUoXCJ1bmRlcmx5aW5nXCIpKSB9XG4gICAgfVxuICApO1xufTtcbmhhcmRlbihwcmVwYXJlQXR0ZW51YXRvck1ha2VyKTtcbnZhciBSZW1vdGFibGVQcmVmaXhSRSA9IC9eKEFsbGVnZWQ6IHxEZWJ1Z05hbWU6ICkvO1xudmFyIGF0dGVudWF0ZU9uZSA9ICh1bmRlcmx5aW5nLCB1TWV0aG9kTmFtZXMsIG9wdGlvbnMgPSB2b2lkIDApID0+IHtcbiAgY29uc3QgaGVhcFpvbmUgPSBtYWtlSGVhcFpvbmUoKTtcbiAgY29uc3QgdUtpbmROYW1lID0gKHVuZGVybHlpbmdbU3ltYm9sLnRvU3RyaW5nVGFnXSB8fCBcIlVuZGVybHlpbmdcIikucmVwbGFjZShcbiAgICBSZW1vdGFibGVQcmVmaXhSRSxcbiAgICBcIlwiXG4gICk7XG4gIGNvbnN0IG1ha2VBdHRlbnVhdG9yID0gcHJlcGFyZUF0dGVudWF0b3JNYWtlcihcbiAgICBoZWFwWm9uZSxcbiAgICB1S2luZE5hbWUsXG4gICAgdU1ldGhvZE5hbWVzLFxuICAgIG9wdGlvbnNcbiAgKTtcbiAgcmV0dXJuIG1ha2VBdHRlbnVhdG9yKHVuZGVybHlpbmcpO1xufTtcbmhhcmRlbihhdHRlbnVhdGVPbmUpO1xuXG4vKiAuLi9iYXNlLXpvbmUvc3JjL3ByZXBhcmUtcmV2b2NhYmxlLmpzKi9cbnZhciBwcmVwYXJlUmV2b2NhYmxlTWFrZXJLaXQgPSAoem9uZSwgdUtpbmROYW1lLCB1TWV0aG9kTmFtZXMsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCB7XG4gICAgdUludGVyZmFjZU5hbWUgPSB1S2luZE5hbWUsXG4gICAgZXh0cmFNZXRob2RHdWFyZHMgPSB7fSxcbiAgICBleHRyYU1ldGhvZHMgPSB7fVxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgUmV2b2NhYmxlSUtpdCA9IGhhcmRlbih7XG4gICAgcmV2b2tlcjogTS5pbnRlcmZhY2UoYCR7dUludGVyZmFjZU5hbWV9X3Jldm9rZXJgLCB7XG4gICAgICByZXZva2U6IE0uY2FsbCgpLnJldHVybnMoTS5ib29sZWFuKCkpXG4gICAgfSksXG4gICAgcmV2b2NhYmxlOiBNLmludGVyZmFjZShgJHt1SW50ZXJmYWNlTmFtZX1fcmV2b2NhYmxlYCwgZXh0cmFNZXRob2RHdWFyZHMsIHtcbiAgICAgIGRlZmF1bHRHdWFyZHM6IFwicmF3XCJcbiAgICB9KVxuICB9KTtcbiAgY29uc3QgcmV2b2NhYmxlS2luZE5hbWUgPSBgJHt1S2luZE5hbWV9X2NhcmV0YWtlcmA7XG4gIGxldCBhbXBsaWZpZXI7XG4gIGNvbnN0IG1ha2VSZXZvY2FibGVLaXQgPSB6b25lLmV4b0NsYXNzS2l0KFxuICAgIHJldm9jYWJsZUtpbmROYW1lLFxuICAgIFJldm9jYWJsZUlLaXQsXG4gICAgKHVuZGVybHlpbmcpID0+ICh7IHVuZGVybHlpbmcgfSksXG4gICAge1xuICAgICAgcmV2b2tlcjoge1xuICAgICAgICByZXZva2UoKSB7XG4gICAgICAgICAgY29uc3QgeyBzdGF0ZSB9ID0gdGhpcztcbiAgICAgICAgICBpZiAoc3RhdGUudW5kZXJseWluZyA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0YXRlLnVuZGVybHlpbmcgPSB2b2lkIDA7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZXZvY2FibGU6IHdyYXBwZXJNZXRob2RzKHJldm9jYWJsZUtpbmROYW1lLCB1TWV0aG9kTmFtZXMsIGV4dHJhTWV0aG9kcylcbiAgICB9LFxuICAgIHtcbiAgICAgIHN0YXRlU2hhcGU6IHsgdW5kZXJseWluZzogTS5vcHQoTS5yZW1vdGFibGUoXCJ1bmRlcmx5aW5nXCIpKSB9LFxuICAgICAgcmVjZWl2ZUFtcGxpZmllcjogKGFtcCkgPT4ge1xuICAgICAgICBhbXBsaWZpZXIgPSBhbXA7XG4gICAgICB9XG4gICAgfVxuICApO1xuICBjb25zdCBtYWtlUmV2b2NhYmxlID0gKHVuZGVybHlpbmcpID0+IG1ha2VSZXZvY2FibGVLaXQodW5kZXJseWluZykucmV2b2NhYmxlO1xuICBjb25zdCByZXZva2UgPSAocmV2b2NhYmxlKSA9PiB7XG4gICAgY29uc3QgZmFjZXRzID0gYW1wbGlmaWVyKHJldm9jYWJsZSk7XG4gICAgaWYgKGZhY2V0cyA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBmYWNldHMucmV2b2tlci5yZXZva2UoKTtcbiAgfTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgcmV2b2tlLFxuICAgIG1ha2VSZXZvY2FibGUsXG4gICAgLyoqIEB0eXBlIHtNYWtlUmV2b2NhYmxlS2l0fSAqL1xuICAgIG1ha2VSZXZvY2FibGVLaXRcbiAgfSk7XG59O1xuaGFyZGVuKHByZXBhcmVSZXZvY2FibGVNYWtlcktpdCk7XG5cbi8qIC4uL3pvZS9zcmMvY29udHJhY3RTdXBwb3J0L3ByZXBhcmUtb3duYWJsZS5qcyovXG52YXIgVHJhbnNmZXJQcm9wb3NhbFNoYXBlID0gTS5zcGxpdFJlY29yZCh7XG4gIGdpdmU6IHt9LFxuICB3YW50OiB7fSxcbiAgZXhpdDoge1xuICAgIG9uRGVtYW5kOiBudWxsXG4gIH1cbn0pO1xudmFyIHByZXBhcmVPd25hYmxlID0gKHpvbmUsIG1ha2VJbnZpdGF0aW9uLCB1S2luZE5hbWUsIHVNZXRob2ROYW1lcywgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IHsgdUludGVyZmFjZU5hbWUgPSB1S2luZE5hbWUgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHsgcmV2b2tlLCBtYWtlUmV2b2NhYmxlIH0gPSBwcmVwYXJlUmV2b2NhYmxlTWFrZXJLaXQoXG4gICAgem9uZSxcbiAgICB1S2luZE5hbWUsXG4gICAgdU1ldGhvZE5hbWVzLFxuICAgIHtcbiAgICAgIHVJbnRlcmZhY2VOYW1lLFxuICAgICAgZXh0cmFNZXRob2RHdWFyZHM6IHtcbiAgICAgICAgbWFrZVRyYW5zZmVySW52aXRhdGlvbjogTS5jYWxsKCkucmV0dXJucyhNLnByb21pc2UoKSlcbiAgICAgIH0sXG4gICAgICBleHRyYU1ldGhvZHM6IHtcbiAgICAgICAgbWFrZVRyYW5zZmVySW52aXRhdGlvbigpIHtcbiAgICAgICAgICBjb25zdCB7IHVuZGVybHlpbmcgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgY29uc3QgeyByZXZvY2FibGUgfSA9IHRoaXMuZmFjZXRzO1xuICAgICAgICAgIGNvbnN0IGN1c3RvbURldGFpbHMgPSB1bmRlcmx5aW5nLmdldEludml0YXRpb25DdXN0b21EZXRhaWxzKCk7XG4gICAgICAgICAgY29uc3QgdHJhbnNmZXJIYW5kbGVyID0gbWFrZVRyYW5zZmVySGFuZGxlcih1bmRlcmx5aW5nKTtcbiAgICAgICAgICBjb25zdCBpbnZpdGF0aW9uID0gbWFrZUludml0YXRpb24oXG4gICAgICAgICAgICB0cmFuc2ZlckhhbmRsZXIsXG4gICAgICAgICAgICBcInRyYW5zZmVyXCIsXG4gICAgICAgICAgICBjdXN0b21EZXRhaWxzLFxuICAgICAgICAgICAgVHJhbnNmZXJQcm9wb3NhbFNoYXBlXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXZva2UocmV2b2NhYmxlKTtcbiAgICAgICAgICByZXR1cm4gaW52aXRhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgKTtcbiAgY29uc3QgbWFrZVRyYW5zZmVySGFuZGxlciA9IHpvbmUuZXhvQ2xhc3MoXG4gICAgXCJUcmFuc2ZlckhhbmRsZXJcIixcbiAgICBPZmZlckhhbmRsZXJJLFxuICAgICh1bmRlcmx5aW5nKSA9PiAoe1xuICAgICAgdW5kZXJseWluZ1xuICAgIH0pLFxuICAgIHtcbiAgICAgIGhhbmRsZShzZWF0KSB7XG4gICAgICAgIGNvbnN0IHsgdW5kZXJseWluZyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgcmV2b2NhYmxlID0gbWFrZVJldm9jYWJsZSh1bmRlcmx5aW5nKTtcbiAgICAgICAgc2VhdC5leGl0KCk7XG4gICAgICAgIHJldHVybiByZXZvY2FibGU7XG4gICAgICB9XG4gICAgfVxuICApO1xuICBjb25zdCBtYWtlT3duYWJsZSA9ICh1bmRlcmx5aW5nKSA9PiBtYWtlUmV2b2NhYmxlKHVuZGVybHlpbmcpO1xuICByZXR1cm4gaGFyZGVuKG1ha2VPd25hYmxlKTtcbn07XG5oYXJkZW4ocHJlcGFyZU93bmFibGUpO1xuXG4vKiAuLi96b2Uvc3JjL2NvbnRyYWN0U3VwcG9ydC9wcmljZUF1dGhvcml0eS5qcyovXG52YXIgdHJhY2U5ID0gbWFrZVRyYWNlcihcIlBBXCIsIGZhbHNlKTtcbnZhciBHdWFyZENhbGxBbW91bnRUdXBsZSA9IE0uY2FsbChBbW91bnRTaGFwZSwgQW1vdW50U2hhcGUpLnJldHVybnMoXG4gIE0ucHJvbWlzZSgpXG4pO1xudmFyIFByaWNlQXV0aG9yaXR5SSA9IE0uaW50ZXJmYWNlKFwiUHJpY2VBdXRob3JpdHlcIiwge1xuICBnZXRRdW90ZUlzc3VlcjogTS5jYWxsKEJyYW5kU2hhcGUsIEJyYW5kU2hhcGUpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICBnZXRUaW1lclNlcnZpY2U6IE0uY2FsbChCcmFuZFNoYXBlLCBCcmFuZFNoYXBlKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgcXVvdGVHaXZlbjogTS5jYWxsKEFtb3VudFNoYXBlLCBCcmFuZFNoYXBlKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgcXVvdGVXYW50ZWQ6IE0uY2FsbChCcmFuZFNoYXBlLCBBbW91bnRTaGFwZSkucmV0dXJucyhNLnByb21pc2UoKSksXG4gIG1ha2VRdW90ZU5vdGlmaWVyOiBNLmNhbGwoQW1vdW50U2hhcGUsIEJyYW5kU2hhcGUpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICBxdW90ZUF0VGltZTogTS5jYWxsKFRpbWVzdGFtcFNoYXBlLCBBbW91bnRTaGFwZSwgQnJhbmRTaGFwZSkucmV0dXJucyhcbiAgICBNLnByb21pc2UoKVxuICApLFxuICBxdW90ZVdoZW5MVDogR3VhcmRDYWxsQW1vdW50VHVwbGUsXG4gIHF1b3RlV2hlbkxURTogR3VhcmRDYWxsQW1vdW50VHVwbGUsXG4gIHF1b3RlV2hlbkdURTogR3VhcmRDYWxsQW1vdW50VHVwbGUsXG4gIHF1b3RlV2hlbkdUOiBHdWFyZENhbGxBbW91bnRUdXBsZSxcbiAgbXV0YWJsZVF1b3RlV2hlbkxUOiBHdWFyZENhbGxBbW91bnRUdXBsZSxcbiAgbXV0YWJsZVF1b3RlV2hlbkxURTogR3VhcmRDYWxsQW1vdW50VHVwbGUsXG4gIG11dGFibGVRdW90ZVdoZW5HVEU6IEd1YXJkQ2FsbEFtb3VudFR1cGxlLFxuICBtdXRhYmxlUXVvdGVXaGVuR1Q6IEd1YXJkQ2FsbEFtb3VudFR1cGxlXG59KTtcblxuLyogLi4vem9lL3NyYy9jb250cmFjdFN1cHBvcnQvcHJpY2VRdW90ZS5qcyovXG52YXIgdW5pdEFtb3VudCA9IGFzeW5jIChicmFuZCkgPT4ge1xuICBjb25zdCBkaXNwbGF5SW5mbyA9IGF3YWl0IEUoYnJhbmQpLmdldERpc3BsYXlJbmZvKCk7XG4gIGNvbnN0IGRlY2ltYWxQbGFjZXMgPSBkaXNwbGF5SW5mby5kZWNpbWFsUGxhY2VzID8/IDA7XG4gIHJldHVybiBBbW91bnRNYXRoLm1ha2UoYnJhbmQsIDEwbiAqKiBOYXQoZGVjaW1hbFBsYWNlcykpO1xufTtcbmhhcmRlbih1bml0QW1vdW50KTtcblxuLyogLi4vb3JjaGVzdHJhdGlvbi9zcmMvdXRpbHMvem9lLXRvb2xzLmpzKi9cbnZhciB0cmFjZTEwID0gbWFrZVRyYWNlcihcIlpvZVRvb2xzXCIpO1xudmFyIHsgYXNzaWduOiBhc3NpZ240LCBrZXlzOiBrZXlzMiwgdmFsdWVzOiB2YWx1ZXM1IH0gPSBPYmplY3Q7XG52YXIgbWFrZVpvZVRvb2xzID0gKHpjZiwgeyB3aGVuLCBhbGxWb3dzLCBhbGxTZXR0bGVkLCBhc1ZvdyB9KSA9PiB7XG4gIGNvbnN0IGxvY2FsVHJhbnNmZXIgPSAoc3JjU2VhdCwgbG9jYWxBY2NvdW50LCBhbW91bnRzKSA9PiBhc1Zvdyhhc3luYyAoKSA9PiB7XG4gICAgIXNyY1NlYXQuaGFzRXhpdGVkKCkgfHwgdGhyb3dSZWRhY3RlZGBUaGUgc2VhdCBjYW5ub3QgaGF2ZSBleGl0ZWQuYDtcbiAgICBjb25zdCB7IHpjZlNlYXQ6IHRlbXBTZWF0LCB1c2VyU2VhdDogdXNlclNlYXRQIH0gPSB6Y2YubWFrZUVtcHR5U2VhdEtpdCgpO1xuICAgIGNvbnN0IHVzZXJTZWF0ID0gYXdhaXQgdXNlclNlYXRQO1xuICAgIHpjZi5hdG9taWNSZWFycmFuZ2UoaGFyZGVuKFtbc3JjU2VhdCwgdGVtcFNlYXQsIGFtb3VudHNdXSkpO1xuICAgIHRlbXBTZWF0LmV4aXQoKTtcbiAgICBjb25zdCBwYXltZW50cyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAga2V5czIoYW1vdW50cykubWFwKChrdykgPT4gRSh1c2VyU2VhdCkuZ2V0UGF5b3V0KGt3KSlcbiAgICApO1xuICAgIGNvbnN0IHNldHRsZURlcG9zaXRzID0gYXdhaXQgd2hlbihcbiAgICAgIGFsbFNldHRsZWQocGF5bWVudHMubWFwKChwbXQpID0+IEUobG9jYWxBY2NvdW50KS5kZXBvc2l0KHBtdCkpKVxuICAgICk7XG4gICAgaWYgKHNldHRsZURlcG9zaXRzLmZpbmQoKHgpID0+IHguc3RhdHVzID09PSBcInJlamVjdGVkXCIpKSB7XG4gICAgICBjb25zdCBhbXRzID0gdmFsdWVzNShhbW91bnRzKTtcbiAgICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuICAgICAgY29uc3QgcGF5bWVudHNPcldpdGhkcmF3VnMgPSBzZXR0bGVEZXBvc2l0cy5tYXAoKHgsIGkzKSA9PiB7XG4gICAgICAgIGlmICh4LnN0YXR1cyA9PT0gXCJyZWplY3RlZFwiKSB7XG4gICAgICAgICAgZXJyb3JzLnB1c2goeC5yZWFzb24pO1xuICAgICAgICAgIHJldHVybiBwYXltZW50c1tpM107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEUobG9jYWxBY2NvdW50KS53aXRoZHJhdyhhbXRzW2kzXSk7XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHBheW1lbnRzVG9SZXR1cm4gPSBhd2FpdCB3aGVuKGFsbFZvd3MocGF5bWVudHNPcldpdGhkcmF3VnMpKTtcbiAgICAgIGNvbnN0IHBheW1lbnRLd3IgPSBoYXJkZW4oXG4gICAgICAgIGtleXMyKGFtb3VudHMpLnJlZHVjZShcbiAgICAgICAgICAoa3dyLCBrdywgaTMpID0+IGFzc2lnbjQoa3dyLCB7IFtrd106IHBheW1lbnRzVG9SZXR1cm5baTNdIH0pLFxuICAgICAgICAgIHt9XG4gICAgICAgIClcbiAgICAgICk7XG4gICAgICBjb25zdCBkZXBvc2l0UmVzcG9uc2UgPSBhd2FpdCBkZXBvc2l0VG9TZWF0KFxuICAgICAgICB6Y2YsXG4gICAgICAgIHNyY1NlYXQsXG4gICAgICAgIGFtb3VudHMsXG4gICAgICAgIHBheW1lbnRLd3JcbiAgICAgICk7XG4gICAgICB0cmFjZTEwKFwibG9jYWxUcmFuc2ZlciBkZXBvc2l0UmVzcG9uc2VcIiwgZGVwb3NpdFJlc3BvbnNlKTtcbiAgICAgIHRocm93IG1ha2VFcnJvcihgT25lIG9yIG1vcmUgZGVwb3NpdHMgZmFpbGVkICR7cXVvdGUoZXJyb3JzKX1gKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCB3aXRoZHJhd1RvU2VhdCA9IChsb2NhbEFjY291bnQsIGRlc3RTZWF0LCBhbW91bnRzKSA9PiBhc1Zvdyhhc3luYyAoKSA9PiB7XG4gICAgIWRlc3RTZWF0Lmhhc0V4aXRlZCgpIHx8IHRocm93UmVkYWN0ZWRgVGhlIHNlYXQgY2Fubm90IGhhdmUgZXhpdGVkLmA7XG4gICAgY29uc3Qgc2V0dGxlZFdpdGhkcmF3YWxzID0gYXdhaXQgd2hlbihcbiAgICAgIGFsbFNldHRsZWQodmFsdWVzNShhbW91bnRzKS5tYXAoKGFtdCkgPT4gRShsb2NhbEFjY291bnQpLndpdGhkcmF3KGFtdCkpKVxuICAgICk7XG4gICAgaWYgKHNldHRsZWRXaXRoZHJhd2Fscy5maW5kKCh4KSA9PiB4LnN0YXR1cyA9PT0gXCJyZWplY3RlZFwiKSkge1xuICAgICAgY29uc3QgcmV0dXJuUGF5bWVudFZzID0gW107XG4gICAgICBjb25zdCBlcnJvcnMgPSBbXTtcbiAgICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIHNldHRsZWRXaXRoZHJhd2Fscykge1xuICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gXCJmdWxmaWxsZWRcIikge1xuICAgICAgICAgIHJldHVyblBheW1lbnRWcy5wdXNoKEUobG9jYWxBY2NvdW50KS5kZXBvc2l0KHJlc3VsdC52YWx1ZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVycm9ycy5wdXNoKHJlc3VsdC5yZWFzb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhd2FpdCB3aGVuKGFsbFZvd3MocmV0dXJuUGF5bWVudFZzKSk7XG4gICAgICB0aHJvdyBtYWtlRXJyb3IoYE9uZSBvciBtb3JlIHdpdGhkcmF3YWxzIGZhaWxlZCAke3F1b3RlKGVycm9ycyl9YCk7XG4gICAgfVxuICAgIGNvbnN0IHBheW1lbnRLd3IgPSBoYXJkZW4oXG4gICAgICBrZXlzMihhbW91bnRzKS5yZWR1Y2UoXG4gICAgICAgIChhY2MsIGt3LCBpMykgPT4gYXNzaWduNChhY2MsIHtcbiAgICAgICAgICBba3ddOiAoXG4gICAgICAgICAgICAvKiogQHR5cGUge3sgdmFsdWU6IEFtb3VudCB9W119ICovXG4gICAgICAgICAgICBzZXR0bGVkV2l0aGRyYXdhbHNbaTNdLnZhbHVlXG4gICAgICAgICAgKVxuICAgICAgICB9KSxcbiAgICAgICAge31cbiAgICAgIClcbiAgICApO1xuICAgIGNvbnN0IGRlcG9zaXRSZXNwb25zZSA9IGF3YWl0IGRlcG9zaXRUb1NlYXQoXG4gICAgICB6Y2YsXG4gICAgICBkZXN0U2VhdCxcbiAgICAgIGFtb3VudHMsXG4gICAgICBwYXltZW50S3dyXG4gICAgKTtcbiAgICB0cmFjZTEwKFwid2l0aGRyYXdUb1NlYXQgZGVwb3NpdFJlc3BvbnNlXCIsIGRlcG9zaXRSZXNwb25zZSk7XG4gIH0pO1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICBsb2NhbFRyYW5zZmVyLFxuICAgIHdpdGhkcmF3VG9TZWF0XG4gIH0pO1xufTtcblxuLyogLi4vb3JjaGVzdHJhdGlvbi9zcmMvdXRpbHMvemNmLXRvb2xzLmpzKi9cbnZhciBIYW5kbGVyU2hhcGUgPSBNLnJlbW90YWJsZShcIk9mZmVySGFuZGxlclwiKTtcbnZhciBtYWtlWmNmVG9vbHMgPSAoemNmLCB2b3dUb29scykgPT4gaGFyZGVuKHtcbiAgbWFrZUludml0YXRpb24ob2ZmZXJIYW5kbGVyLCBkZXNjcmlwdGlvbiwgY3VzdG9tRGV0YWlscywgcHJvcG9zYWxTaGFwZTIpIHtcbiAgICBtdXN0TWF0Y2gob2ZmZXJIYW5kbGVyLCBIYW5kbGVyU2hhcGUpO1xuICAgIHJldHVybiB2b3dUb29scy53YXRjaChcbiAgICAgIHpjZi5tYWtlSW52aXRhdGlvbihcbiAgICAgICAgb2ZmZXJIYW5kbGVyLFxuICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgY3VzdG9tRGV0YWlscyxcbiAgICAgICAgcHJvcG9zYWxTaGFwZTJcbiAgICAgIClcbiAgICApO1xuICB9LFxuICBhdG9taWNSZWFycmFuZ2UodHJhbnNmZXJzKSB7XG4gICAgemNmLmF0b21pY1JlYXJyYW5nZSh0cmFuc2ZlcnMpO1xuICB9LFxuICBhc3NlcnRVbmlxdWVLZXl3b3JkKGtleXdvcmQpIHtcbiAgICB6Y2YuYXNzZXJ0VW5pcXVlS2V5d29yZChrZXl3b3JkKTtcbiAgfVxufSk7XG5cbi8qIC4uL29yY2hlc3RyYXRpb24vc3JjL3V0aWxzL3N0YXJ0LWhlbHBlci5qcyovXG52YXIgcHJvdmlkZU9yY2hlc3RyYXRpb24gPSAoemNmLCBiYWdnYWdlLCByZW1vdGVQb3dlcnMsIG1hcnNoYWxsZXIsIG9wdHMgPSB7fSkgPT4ge1xuICBjb25zdCB6b25lcyA9ICgoKSA9PiB7XG4gICAgY29uc3Qgem9uZSA9IG1ha2VEdXJhYmxlWm9uZShiYWdnYWdlKTtcbiAgICByZXR1cm4ge1xuICAgICAgLyoqIHN5c3RlbSBuYW1lcyBmb3IgYXN5bmMgZmxvdyAqL1xuICAgICAgYXN5bmNGbG93OiB6b25lLnN1YlpvbmUoXCJhc3luY0Zsb3dcIiksXG4gICAgICAvKiogc3lzdGVtIG5hbWVzIGZvciBvcmNoZXN0cmF0aW9uIGltcGxlbWVudGF0aW9uICovXG4gICAgICBvcmNoZXN0cmF0aW9uOiB6b25lLnN1YlpvbmUoXCJvcmNoZXN0cmF0aW9uXCIpLFxuICAgICAgLyoqIHN5c3RlbSBuYW1lcyBmb3IgY2hhaW5IdWIgKi9cbiAgICAgIGNoYWluSHViOiB6b25lLnN1YlpvbmUoXCJjaGFpbkh1YlwiKSxcbiAgICAgIC8qKiBzeXN0ZW0gbmFtZXMgZm9yIHZvd3MgKi9cbiAgICAgIHZvd3M6IHpvbmUuc3ViWm9uZShcInZvd3NcIiksXG4gICAgICAvKiogY29udHJhY3QtcHJvdmlkZWQgbmFtZXMsIGFuZCBzdWJ6b25lcyAqL1xuICAgICAgY29udHJhY3Q6IHpvbmUuc3ViWm9uZShcImNvbnRyYWN0XCIpXG4gICAgfTtcbiAgfSkoKTtcbiAgY29uc3QgeyBhZ29yaWNOYW1lcywgdGltZXJTZXJ2aWNlLCBsb2NhbGNoYWluIH0gPSByZW1vdGVQb3dlcnM7XG4gIGNvbnN0IHZvd1Rvb2xzID0gcHJlcGFyZVN3aW5nc2V0Vm93VG9vbHMoem9uZXMudm93cyk7XG4gIGNvbnN0IGNoYWluSHViID0gbWFrZUNoYWluSHViKHpvbmVzLmNoYWluSHViLCBhZ29yaWNOYW1lcywgdm93VG9vbHMsIHtcbiAgICBjaGFpbkluZm9WYWx1ZVNoYXBlOiBvcHRzLmNoYWluSW5mb1ZhbHVlU2hhcGVcbiAgfSk7XG4gIGNvbnN0IHpvZVRvb2xzID0gbWFrZVpvZVRvb2xzKHpjZiwgdm93VG9vbHMpO1xuICBjb25zdCB6Y2ZUb29scyA9IG1ha2VaY2ZUb29scyh6Y2YsIHZvd1Rvb2xzKTtcbiAgY29uc3QgeyBtYWtlUmVjb3JkZXJLaXQgfSA9IHByZXBhcmVSZWNvcmRlcktpdE1ha2VycyhiYWdnYWdlLCBtYXJzaGFsbGVyKTtcbiAgY29uc3QgbWFrZUxvY2FsT3JjaGVzdHJhdGlvbkFjY291bnRLaXQgPSBwcmVwYXJlTG9jYWxPcmNoZXN0cmF0aW9uQWNjb3VudEtpdChcbiAgICB6b25lcy5vcmNoZXN0cmF0aW9uLFxuICAgIHtcbiAgICAgIG1ha2VSZWNvcmRlcktpdCxcbiAgICAgIHpjZixcbiAgICAgIHRpbWVyU2VydmljZSxcbiAgICAgIHZvd1Rvb2xzLFxuICAgICAgY2hhaW5IdWIsXG4gICAgICBsb2NhbGNoYWluLFxuICAgICAgem9lVG9vbHNcbiAgICB9XG4gICk7XG4gIGNvbnN0IGFzeW5jRmxvd1Rvb2xzID0gcHJlcGFyZUFzeW5jRmxvd1Rvb2xzKHpvbmVzLmFzeW5jRmxvdywge1xuICAgIHZvd1Rvb2xzXG4gIH0pO1xuICBjb25zdCBtYWtlQ29zbW9zT3JjaGVzdHJhdGlvbkFjY291bnQgPSBwcmVwYXJlQ29zbW9zT3JjaGVzdHJhdGlvbkFjY291bnQoXG4gICAgem9uZXMub3JjaGVzdHJhdGlvbixcbiAgICB7XG4gICAgICBjaGFpbkh1YixcbiAgICAgIG1ha2VSZWNvcmRlcktpdCxcbiAgICAgIHRpbWVyU2VydmljZSxcbiAgICAgIHZvd1Rvb2xzLFxuICAgICAgemNmXG4gICAgfVxuICApO1xuICBjb25zdCBtYWtlUmVtb3RlQ2hhaW5GYWNhZGUgPSBwcmVwYXJlUmVtb3RlQ2hhaW5GYWNhZGUoem9uZXMub3JjaGVzdHJhdGlvbiwge1xuICAgIG1ha2VDb3Ntb3NPcmNoZXN0cmF0aW9uQWNjb3VudCxcbiAgICBvcmNoZXN0cmF0aW9uOiByZW1vdGVQb3dlcnMub3JjaGVzdHJhdGlvblNlcnZpY2UsXG4gICAgc3RvcmFnZU5vZGU6IHJlbW90ZVBvd2Vycy5zdG9yYWdlTm9kZSxcbiAgICB0aW1lcjogcmVtb3RlUG93ZXJzLnRpbWVyU2VydmljZSxcbiAgICB2b3dUb29sc1xuICB9KTtcbiAgY29uc3QgbWFrZUxvY2FsQ2hhaW5GYWNhZGUgPSBwcmVwYXJlTG9jYWxDaGFpbkZhY2FkZSh6b25lcy5vcmNoZXN0cmF0aW9uLCB7XG4gICAgbWFrZUxvY2FsT3JjaGVzdHJhdGlvbkFjY291bnRLaXQsXG4gICAgbG9jYWxjaGFpbjogcmVtb3RlUG93ZXJzLmxvY2FsY2hhaW4sXG4gICAgLyogRklYTUUgd2hhdCBwYXRoPyovXG4gICAgc3RvcmFnZU5vZGU6IHJlbW90ZVBvd2Vycy5zdG9yYWdlTm9kZSxcbiAgICBhZ29yaWNOYW1lcyxcbiAgICBvcmNoZXN0cmF0aW9uOiByZW1vdGVQb3dlcnMub3JjaGVzdHJhdGlvblNlcnZpY2UsXG4gICAgdGltZXI6IHJlbW90ZVBvd2Vycy50aW1lclNlcnZpY2UsXG4gICAgdm93VG9vbHNcbiAgfSk7XG4gIGNvbnN0IG1ha2VPcmNoZXN0cmF0b3IgPSBwcmVwYXJlT3JjaGVzdHJhdG9yKHpvbmVzLm9yY2hlc3RyYXRpb24sIHtcbiAgICBjaGFpbkh1YixcbiAgICBtYWtlTG9jYWxDaGFpbkZhY2FkZSxcbiAgICBtYWtlUmVtb3RlQ2hhaW5GYWNhZGUsXG4gICAgdm93VG9vbHNcbiAgfSk7XG4gIGNvbnN0IG1ha2VPcmNoZXN0cmF0ZUtpdCA9ICh6b25lKSA9PiBtYWtlT3JjaGVzdHJhdGlvbkZhY2FkZSh7XG4gICAgem9uZSxcbiAgICB6Y2YsXG4gICAgbWFrZU9yY2hlc3RyYXRvcixcbiAgICBhc3luY0Zsb3dUb29scyxcbiAgICB2b3dUb29scyxcbiAgICAuLi5yZW1vdGVQb3dlcnNcbiAgfSk7XG4gIGNvbnN0IGRlZmF1bHRPcmNoZXN0cmF0ZUtpdCA9IG1ha2VPcmNoZXN0cmF0ZUtpdChcbiAgICB6b25lcy5jb250cmFjdC5zdWJab25lKFwib3JjaGVzdHJhdGlvblwiKVxuICApO1xuICB6Y2Yuc2V0VGVzdEppZygoKSA9PiAoe1xuICAgIGJhZ2dhZ2UsXG4gICAgY2hhaW5IdWJcbiAgfSkpO1xuICByZXR1cm4ge1xuICAgIC4uLmRlZmF1bHRPcmNoZXN0cmF0ZUtpdCxcbiAgICBtYWtlT3JjaGVzdHJhdGVLaXQsXG4gICAgYmFnZ2FnZSxcbiAgICBjaGFpbkh1YixcbiAgICB2b3dUb29scyxcbiAgICBhc3luY0Zsb3dUb29scyxcbiAgICB6Y2ZUb29scyxcbiAgICB6b2VUb29scyxcbiAgICB6b25lOiB6b25lcy5jb250cmFjdFxuICB9O1xufTtcbmhhcmRlbihwcm92aWRlT3JjaGVzdHJhdGlvbik7XG52YXIgd2l0aE9yY2hlc3RyYXRpb24gPSAoY29udHJhY3RGbiwgb3B0cykgPT4gYXN5bmMgKHpjZiwgcHJpdmF0ZUFyZ3MsIGJhZ2dhZ2UpID0+IHtcbiAgY29uc3QgeyBtYXJzaGFsbGVyLCAuLi5hbGxPcmNoUG93ZXJzIH0gPSBwcml2YXRlQXJncztcbiAgY29uc3QgeyBzdG9yYWdlTm9kZTogXywgLi4ucmVxdWlyZWRPcmNoUG93ZXJzIH0gPSBhbGxPcmNoUG93ZXJzO1xuICBjb25zdCB7IHB1Ymxpc2hBY2NvdW50SW5mbywgY2hhaW5JbmZvVmFsdWVTaGFwZSB9ID0gb3B0cyA/PyB7fTtcbiAgY29uc3QgeyB6b25lLCAuLi50b29scyB9ID0gcHJvdmlkZU9yY2hlc3RyYXRpb24oXG4gICAgemNmLFxuICAgIGJhZ2dhZ2UsXG4gICAgcHVibGlzaEFjY291bnRJbmZvID8gYWxsT3JjaFBvd2VycyA6IHJlcXVpcmVkT3JjaFBvd2VycyxcbiAgICBtYXJzaGFsbGVyLFxuICAgIHsgY2hhaW5JbmZvVmFsdWVTaGFwZSB9XG4gICk7XG4gIHJldHVybiBjb250cmFjdEZuKHpjZiwgcHJpdmF0ZUFyZ3MsIHpvbmUsIHRvb2xzKTtcbn07XG5oYXJkZW4od2l0aE9yY2hlc3RyYXRpb24pO1xuXG4vKiAuLi9vcmNoZXN0cmF0aW9uL3NyYy9jaGFpbi1jYXBhYmlsaXRpZXMuanMqL1xudmFyIEljcUVuYWJsZWQgPSAoXG4gIC8qKiBAdHlwZSB7Y29uc3R9ICovXG4gIHtcbiAgICBvbW5pZmxpeGh1YjogdHJ1ZSxcbiAgICBvc21vc2lzOiB0cnVlXG4gIH1cbik7XG5oYXJkZW4oSWNxRW5hYmxlZCk7XG52YXIgUGZtRW5hYmxlZCA9IChcbiAgLyoqIEB0eXBlIHtjb25zdH0gKi9cbiAge1xuICAgIGFnb3JpYzogdHJ1ZSxcbiAgICBjZWxlc3RpYTogdHJ1ZSxcbiAgICBjb3Ntb3NodWI6IHRydWUsXG4gICAganVubzogdHJ1ZSxcbiAgICBuZXV0cm9uOiB0cnVlLFxuICAgIG5vYmxlOiB0cnVlLFxuICAgIG9tbmlmbGl4aHViOiB0cnVlLFxuICAgIG9zbW9zaXM6IHRydWUsXG4gICAgc2VjcmV0bmV0d29yazogdHJ1ZSxcbiAgICBzdGFyZ2F6ZTogdHJ1ZSxcbiAgICBzdHJpZGU6IHRydWUsXG4gICAgdW1lZTogdHJ1ZVxuICB9XG4pO1xuaGFyZGVuKFBmbUVuYWJsZWQpO1xudmFyIEljYUVuYWJsZWQgPSAoXG4gIC8qKiBAdHlwZSB7Y29uc3R9ICovXG4gIHtcbiAgICBjZWxlc3RpYTogdHJ1ZSxcbiAgICBjb3Ntb3NodWI6IHRydWUsXG4gICAgZHlkeDogdHJ1ZSxcbiAgICBqdW5vOiB0cnVlLFxuICAgIG5ldXRyb246IHRydWUsXG4gICAgbm9ibGU6IHRydWUsXG4gICAgb21uaWZsaXhodWI6IHRydWUsXG4gICAgb3Ntb3NpczogdHJ1ZSxcbiAgICBzZWNyZXRuZXR3b3JrOiB0cnVlLFxuICAgIHN0YXJnYXplOiB0cnVlLFxuICAgIHN0cmlkZTogdHJ1ZSxcbiAgICB1bWVlOiB0cnVlXG4gIH1cbik7XG5oYXJkZW4oSWNhRW5hYmxlZCk7XG5cbi8qIC4uL29yY2hlc3RyYXRpb24vc3JjL3V0aWxzL2NoYWluLWh1Yi1oZWxwZXIuanMqL1xudmFyIHJlZ2lzdGVyQ2hhaW5zQW5kQXNzZXRzID0gKGNoYWluSHViLCBicmFuZHMsIGNoYWluSW5mbywgYXNzZXRJbmZvLCB7IGxvZyA9ICgpID0+IHtcbn0gfSA9IHt9KSA9PiB7XG4gIGxvZyhcImNoYWluSHViOiByZWdpc3RlcmluZyBjaGFpbnNcIiwgT2JqZWN0LmtleXMoY2hhaW5JbmZvIHx8IHt9KSk7XG4gIGlmICghY2hhaW5JbmZvKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGNvbm5zID0ge307XG4gIGZvciAoY29uc3QgW2NoYWluTmFtZSwgYWxsSW5mb10gb2YgT2JqZWN0LmVudHJpZXMoY2hhaW5JbmZvKSkge1xuICAgIGlmIChhbGxJbmZvLm5hbWVzcGFjZSA9PT0gXCJjb3Ntb3NcIikge1xuICAgICAgY29uc3QgeyBjb25uZWN0aW9ucywgLi4uaW5mbyB9ID0gYWxsSW5mbztcbiAgICAgIGNoYWluSHViLnJlZ2lzdGVyQ2hhaW4oY2hhaW5OYW1lLCBpbmZvKTtcbiAgICAgIGlmIChjb25uZWN0aW9ucykgY29ubnNbaW5mby5jaGFpbklkXSA9IGNvbm5lY3Rpb25zO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGFpbkh1Yi5yZWdpc3RlckNoYWluKGNoYWluTmFtZSwgYWxsSW5mbyk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHJlZ2lzdGVyZWRQYWlycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIGZvciAoY29uc3QgW3BDaGFpbklkLCBjb25uSW5mb3NdIG9mIE9iamVjdC5lbnRyaWVzKGNvbm5zKSkge1xuICAgIGZvciAoY29uc3QgW2NDaGFpbklkLCBjb25uSW5mb10gb2YgT2JqZWN0LmVudHJpZXMoY29ubkluZm9zKSkge1xuICAgICAgY29uc3QgcGFpciA9IFtwQ2hhaW5JZCwgY0NoYWluSWRdLnNvcnQoKS5qb2luKFwiPC0+XCIpO1xuICAgICAgaWYgKCFyZWdpc3RlcmVkUGFpcnMuaGFzKHBhaXIpKSB7XG4gICAgICAgIGNoYWluSHViLnJlZ2lzdGVyQ29ubmVjdGlvbihwQ2hhaW5JZCwgY0NoYWluSWQsIGNvbm5JbmZvKTtcbiAgICAgICAgcmVnaXN0ZXJlZFBhaXJzLmFkZChwYWlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbG9nKFwiY2hhaW5IdWI6IHJlZ2lzdGVyZWQgY29ubmVjdGlvbnNcIiwgWy4uLnJlZ2lzdGVyZWRQYWlyc10uc29ydCgpKTtcbiAgbG9nKFxuICAgIFwiY2hhaW5IdWI6IHJlZ2lzdGVyaW5nIGFzc2V0c1wiLFxuICAgIGFzc2V0SW5mbz8ubWFwKChbZGVub20sIHsgY2hhaW5OYW1lIH1dKSA9PiBgJHtjaGFpbk5hbWV9OiAke2Rlbm9tfWApXG4gICk7XG4gIGlmICghYXNzZXRJbmZvKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAoY29uc3QgW2Rlbm9tLCBpbmZvXSBvZiBhc3NldEluZm8pIHtcbiAgICBjb25zdCB7IGJyYW5kS2V5LCAuLi5yZXN0IH0gPSBpbmZvO1xuICAgIGNvbnN0IGluZm9XaXRoQnJhbmQgPSBicmFuZEtleSA/IHsgLi4ucmVzdCwgYnJhbmQ6IGJyYW5kc1ticmFuZEtleV0gfSA6IHJlc3Q7XG4gICAgY2hhaW5IdWIucmVnaXN0ZXJBc3NldChkZW5vbSwgaW5mb1dpdGhCcmFuZCk7XG4gIH1cbn07XG5cbi8qIC4uL3BvcnRmb2xpby1hcGkvc3JjL2NvbnN0YW50cy5qcyovXG52YXIgWWllbGRQcm90b2NvbCA9IChcbiAgLyoqIEB0eXBlIHtjb25zdH0gKi9cbiAge1xuICAgIEFhdmU6IFwiQWF2ZVwiLFxuICAgIENvbXBvdW5kOiBcIkNvbXBvdW5kXCIsXG4gICAgVVNETjogXCJVU0ROXCIsXG4gICAgQmVlZnk6IFwiQmVlZnlcIlxuICB9XG4pO1xuaGFyZGVuKFlpZWxkUHJvdG9jb2wpO1xudmFyIEF4ZWxhckNoYWluID0gKFxuICAvKiogQHR5cGUge2NvbnN0fSAqL1xuICB7XG4gICAgQXJiaXRydW06IFwiQXJiaXRydW1cIixcbiAgICBBdmFsYW5jaGU6IFwiQXZhbGFuY2hlXCIsXG4gICAgQmFzZTogXCJCYXNlXCIsXG4gICAgRXRoZXJldW06IFwiRXRoZXJldW1cIixcbiAgICBPcHRpbWlzbTogXCJPcHRpbWlzbVwiXG4gIH1cbik7XG5oYXJkZW4oQXhlbGFyQ2hhaW4pO1xudmFyIFN1cHBvcnRlZENoYWluID0gKFxuICAvKiogQHR5cGUge2NvbnN0fSAqL1xuICB7XG4gICAgLi4uQXhlbGFyQ2hhaW4sXG4gICAgYWdvcmljOiBcImFnb3JpY1wiLFxuICAgIG5vYmxlOiBcIm5vYmxlXCJcbiAgICAvKiBYWFg6IGNoZWNrIHByaXZhdGVBcmdzIGZvciBjaGFpbkluZm8gZm9yIGFsbCBvZiB0aGVzZSovXG4gIH1cbik7XG5oYXJkZW4oU3VwcG9ydGVkQ2hhaW4pO1xudmFyIFJlYmFsYW5jZVN0cmF0ZWd5ID0gKFxuICAvKiogQHR5cGUge2NvbnN0fSAqL1xuICB7XG4gICAgLyoqXG4gKiBVc2UgYSBzdHJhdGVneSBzcGVjaWZpZWQgaW4gYWR2YW5jZSBieSB0aGUgcG9ydGZvbGlvJ3NcbiAqIGNvbmZpZ3VyYXRpb24uXG4gKi9cbiAgICBQcmVzZXQ6IFwicHJlc2V0XCIsXG4gICAgLyoqXG4gKiBEaXZpZGUgdGhlIGRlcG9zaXQgYmV0d2VlbiB0aGUgcG9zaXRpb25zIHNvIHRoYXQgdGhlIHByb3BvcnRpb25zIGJldHdlZW5cbiAqIHRoZSBleGlzdGluZyBiYWxhbmNlcyBhcmUgcHJlc2VydmVkLlxuICovXG4gICAgUHJlc2VydmVFeGlzdGluZ1Byb3BvcnRpb25zOiBcInBlcFwiXG4gIH1cbik7XG5oYXJkZW4oUmViYWxhbmNlU3RyYXRlZ3kpO1xuXG4vKiAuLi9wb3J0Zm9saW8tY29udHJhY3Qvc3JjL3R5cGUtZ3VhcmRzLnRzKi9cbnZhciB7IGtleXM6IGtleXMzIH0gPSBPYmplY3Q7XG52YXIgbWFrZU5hdEFtb3VudFNoYXBlID0gKGJyYW5kLCBtaW4pID0+IGhhcmRlbih7IGJyYW5kLCB2YWx1ZTogbWluID8gTS5ndGUobWluKSA6IE0ubmF0KCkgfSk7XG52YXIgbWFrZVByb3Bvc2FsU2hhcGVzID0gKHVzZGNCcmFuZCwgYWNjZXNzQnJhbmQpID0+IHtcbiAgY29uc3QgJFNoYXBlID0gbWFrZU5hdEFtb3VudFNoYXBlKHVzZGNCcmFuZCk7XG4gIGNvbnN0IGFjY2Vzc1NoYXBlID0gaGFyZGVuKHtcbiAgICAuLi4oYWNjZXNzQnJhbmQmJiB7IEFjY2VzczogbWFrZU5hdEFtb3VudFNoYXBlKGFjY2Vzc0JyYW5kLCAxbikgfSlcbiAgfSk7XG4gIGNvbnN0IG9wZW5Qb3J0Zm9saW8yID0gTS5zcGxpdFJlY29yZChcbiAgICB7XG4gICAgICBnaXZlOiBNLnNwbGl0UmVjb3JkKGFjY2Vzc1NoYXBlLCB7IERlcG9zaXQ6ICRTaGFwZSB9LCB7fSlcbiAgICB9LFxuICAgIHsgd2FudDoge30sIGV4aXQ6IE0uYW55KCkgfSxcbiAgICB7fVxuICApO1xuICBjb25zdCByZWJhbGFuY2UyID0gTS5vcihcbiAgICBNLnNwbGl0UmVjb3JkKFxuICAgICAgeyBnaXZlOiBNLnNwbGl0UmVjb3JkKHt9LCB7IERlcG9zaXQ6ICRTaGFwZSB9LCB7fSkgfSxcbiAgICAgIHsgd2FudDoge30sIGV4aXQ6IE0uYW55KCkgfSxcbiAgICAgIHt9XG4gICAgKSxcbiAgICBNLnNwbGl0UmVjb3JkKFxuICAgICAgeyB3YW50OiBNLnNwbGl0UmVjb3JkKHsgQ2FzaDogJFNoYXBlIH0sIHt9LCB7fSkgfSxcbiAgICAgIHsgZ2l2ZToge30sIGV4aXQ6IE0uYW55KCkgfSxcbiAgICAgIHt9XG4gICAgKVxuICApO1xuICByZXR1cm4gaGFyZGVuKHsgb3BlblBvcnRmb2xpbzogb3BlblBvcnRmb2xpbzIsIHJlYmFsYW5jZTogcmViYWxhbmNlMiB9KTtcbn07XG5oYXJkZW4obWFrZVByb3Bvc2FsU2hhcGVzKTtcbnZhciBCZWVmeVBvb2xQbGFjZXMgPSB7XG4gIEJlZWZ5X3JlN19BdmFsYW5jaGU6IHtcbiAgICBwcm90b2NvbDogXCJCZWVmeVwiLFxuICAgIGNoYWluTmFtZTogXCJBdmFsYW5jaGVcIlxuICB9LFxuICBCZWVmeV9tb3JwaG9HYXVudGxldFVzZGNfRXRoZXJldW06IHtcbiAgICBwcm90b2NvbDogXCJCZWVmeVwiLFxuICAgIGNoYWluTmFtZTogXCJFdGhlcmV1bVwiXG4gIH0sXG4gIEJlZWZ5X21vcnBob1Ntb2tlaG91c2VVc2RjX0V0aGVyZXVtOiB7XG4gICAgcHJvdG9jb2w6IFwiQmVlZnlcIixcbiAgICBjaGFpbk5hbWU6IFwiRXRoZXJldW1cIlxuICB9LFxuICBCZWVmeV9tb3JwaG9TZWFtbGVzc1VzZGNfQmFzZToge1xuICAgIHByb3RvY29sOiBcIkJlZWZ5XCIsXG4gICAgY2hhaW5OYW1lOiBcIkJhc2VcIlxuICB9LFxuICBCZWVmeV9jb21wb3VuZFVzZGNfT3B0aW1pc206IHtcbiAgICBwcm90b2NvbDogXCJCZWVmeVwiLFxuICAgIGNoYWluTmFtZTogXCJPcHRpbWlzbVwiXG4gIH0sXG4gIEJlZWZ5X2NvbXBvdW5kVXNkY19BcmJpdHJ1bToge1xuICAgIHByb3RvY29sOiBcIkJlZWZ5XCIsXG4gICAgY2hhaW5OYW1lOiBcIkFyYml0cnVtXCJcbiAgfVxufTtcbnZhciBQb29sUGxhY2VzID0ge1xuICBVU0ROOiB7IHByb3RvY29sOiBcIlVTRE5cIiwgdmF1bHQ6IG51bGwsIGNoYWluTmFtZTogXCJub2JsZVwiIH0sXG4gIC8qIE1zZ1N3YXAgb25seSovXG4gIFVTRE5WYXVsdDogeyBwcm90b2NvbDogXCJVU0ROXCIsIHZhdWx0OiAxLCBjaGFpbk5hbWU6IFwibm9ibGVcIiB9LFxuICAvKiBNc2dTd2FwLCBNc2dMb2NrKi9cbiAgQWF2ZV9BdmFsYW5jaGU6IHsgcHJvdG9jb2w6IFwiQWF2ZVwiLCBjaGFpbk5hbWU6IFwiQXZhbGFuY2hlXCIgfSxcbiAgQWF2ZV9FdGhlcmV1bTogeyBwcm90b2NvbDogXCJBYXZlXCIsIGNoYWluTmFtZTogXCJFdGhlcmV1bVwiIH0sXG4gIEFhdmVfT3B0aW1pc206IHsgcHJvdG9jb2w6IFwiQWF2ZVwiLCBjaGFpbk5hbWU6IFwiT3B0aW1pc21cIiB9LFxuICBBYXZlX0FyYml0cnVtOiB7IHByb3RvY29sOiBcIkFhdmVcIiwgY2hhaW5OYW1lOiBcIkFyYml0cnVtXCIgfSxcbiAgQWF2ZV9CYXNlOiB7IHByb3RvY29sOiBcIkFhdmVcIiwgY2hhaW5OYW1lOiBcIkJhc2VcIiB9LFxuICBDb21wb3VuZF9BdmFsYW5jaGU6IHsgcHJvdG9jb2w6IFwiQ29tcG91bmRcIiwgY2hhaW5OYW1lOiBcIkF2YWxhbmNoZVwiIH0sXG4gIENvbXBvdW5kX0V0aGVyZXVtOiB7IHByb3RvY29sOiBcIkNvbXBvdW5kXCIsIGNoYWluTmFtZTogXCJFdGhlcmV1bVwiIH0sXG4gIENvbXBvdW5kX09wdGltaXNtOiB7IHByb3RvY29sOiBcIkNvbXBvdW5kXCIsIGNoYWluTmFtZTogXCJPcHRpbWlzbVwiIH0sXG4gIENvbXBvdW5kX0FyYml0cnVtOiB7IHByb3RvY29sOiBcIkNvbXBvdW5kXCIsIGNoYWluTmFtZTogXCJBcmJpdHJ1bVwiIH0sXG4gIENvbXBvdW5kX0Jhc2U6IHsgcHJvdG9jb2w6IFwiQ29tcG91bmRcIiwgY2hhaW5OYW1lOiBcIkJhc2VcIiB9LFxuICAuLi5CZWVmeVBvb2xQbGFjZXNcbn07XG5oYXJkZW4oUG9vbFBsYWNlcyk7XG52YXIgUG9vbEtleVNoYXBlRXh0ID0gTS5zdHJpbmcoKTtcbnZhciBUYXJnZXRBbGxvY2F0aW9uU2hhcGUgPSBNLnJlY29yZE9mKFxuICBNLm9yKC4uLmtleXMzKFBvb2xQbGFjZXMpKSxcbiAgTS5uYXQoKVxuKTtcbnZhciBUYXJnZXRBbGxvY2F0aW9uU2hhcGVFeHQgPSBNLnJlY29yZE9mKFBvb2xLZXlTaGFwZUV4dCwgTS5uYXQoKSk7XG52YXIgbWFrZVBvcnRmb2xpb1BhdGggPSAoaWQpID0+IFtcbiAgYHBvcnRmb2xpbyR7aWR9YFxuXTtcbnZhciBDaGFpbk5hbWVFeHRTaGFwZSA9IE0uc3RyaW5nKCk7XG52YXIgUG9ydGZvbGlvU3RhdHVzU2hhcGVFeHQgPSBNLnNwbGl0UmVjb3JkKFxuICB7XG4gICAgcG9zaXRpb25LZXlzOiBNLmFycmF5T2YoUG9vbEtleVNoYXBlRXh0KSxcbiAgICBmbG93Q291bnQ6IE0ubnVtYmVyKCksXG4gICAgYWNjb3VudElkQnlDaGFpbjogTS5yZWNvcmRPZihcbiAgICAgIENoYWluTmFtZUV4dFNoYXBlLFxuICAgICAgTS5zdHJpbmcoKVxuICAgICAgLyogWFhYIG5vIHJ1bnRpbWUgdmFsaWRhdGlvbiBvZiBBY2NvdW50SWQqL1xuICAgICksXG4gICAgcG9saWN5VmVyc2lvbjogTS5udW1iZXIoKSxcbiAgICByZWJhbGFuY2VDb3VudDogTS5udW1iZXIoKVxuICB9LFxuICB7XG4gICAgZGVwb3NpdEFkZHJlc3M6IE0uc3RyaW5nKCksXG4gICAgLyogWFhYIG5vIHJ1bnRpbWUgdmFsaWRhdGlvbiBvZiBCZWNoMzJBZGRyZXNzKi9cbiAgICB0YXJnZXRBbGxvY2F0aW9uOiBUYXJnZXRBbGxvY2F0aW9uU2hhcGVFeHQsXG4gICAgYWNjb3VudHNQZW5kaW5nOiBNLmFycmF5T2YoQ2hhaW5OYW1lRXh0U2hhcGUpXG4gIH1cbik7XG52YXIgbWFrZVBvc2l0aW9uUGF0aCA9IChwYXJlbnQsIGtleSkgPT4gW1xuICBgcG9ydGZvbGlvJHtwYXJlbnR9YCxcbiAgXCJwb3NpdGlvbnNcIixcbiAga2V5XG5dO1xudmFyIFBvc2l0aW9uU3RhdHVzU2hhcGUgPSBoYXJkZW4oe1xuICBwcm90b2NvbDogTS5vciguLi5PYmplY3Qua2V5cyhZaWVsZFByb3RvY29sKSksXG4gIC8qIFlpZWxkUHJvdG9jb2wqL1xuICBhY2NvdW50SWQ6IE0uc3RyaW5nKCksXG4gIC8qIEFjY291bnRJZCovXG4gIG5ldFRyYW5zZmVyczogQW55TmF0QW1vdW50U2hhcGUsXG4gIC8qIFhYWCBjb25zdHJhaW4gYnJhbmQgdG8gVVNEQyovXG4gIHRvdGFsSW46IEFueU5hdEFtb3VudFNoYXBlLFxuICB0b3RhbE91dDogQW55TmF0QW1vdW50U2hhcGVcbn0pO1xudmFyIG1ha2VGbG93UGF0aCA9IChwYXJlbnQsIGlkKSA9PiBbXG4gIGBwb3J0Zm9saW8ke3BhcmVudH1gLFxuICBcImZsb3dzXCIsXG4gIGBmbG93JHtpZH1gXG5dO1xudmFyIG1ha2VGbG93U3RlcHNQYXRoID0gKHBhcmVudCwgaWQpID0+IFtcbiAgYHBvcnRmb2xpbyR7cGFyZW50fWAsXG4gIFwiZmxvd3NcIixcbiAgYGZsb3cke2lkfWAsXG4gIFwic3RlcHNcIlxuXTtcbnZhciBGbG93U3RhdHVzU2hhcGUgPSBNLm9yKFxuICB7IHN0YXRlOiBcInJ1blwiLCBzdGVwOiBNLm51bWJlcigpLCBob3c6IE0uc3RyaW5nKCkgfSxcbiAgeyBzdGF0ZTogXCJ1bmRvXCIsIHN0ZXA6IE0ubnVtYmVyKCksIGhvdzogTS5zdHJpbmcoKSB9LFxuICB7IHN0YXRlOiBcImRvbmVcIiB9LFxuICBNLnNwbGl0UmVjb3JkKFxuICAgIHsgc3RhdGU6IFwiZmFpbFwiLCBzdGVwOiBNLm51bWJlcigpLCBob3c6IE0uc3RyaW5nKCksIGVycm9yOiBNLnN0cmluZygpIH0sXG4gICAgeyB3aGVyZTogTS5zdHJpbmcoKSB9LFxuICAgIHt9XG4gIClcbik7XG52YXIgRmxvd1N0ZXBzU2hhcGUgPSBNLmFycmF5T2Yoe1xuICBob3c6IE0uc3RyaW5nKCksXG4gIGFtb3VudDogQW55TmF0QW1vdW50U2hhcGUsXG4gIHNyYzogTS5zdHJpbmcoKSxcbiAgLyogQXNzZXRQbGFjZVJlZiovXG4gIGRlc3Q6IE0uc3RyaW5nKClcbiAgLyogQXNzZXRQbGFjZVJlZiovXG59KTtcblxuLyogLi4vcG9ydGZvbGlvLWNvbnRyYWN0L3NyYy90eXBlLWd1YXJkcy1zdGVwcy50cyovXG52YXIgeyBrZXlzOiBrZXlzNCwgdmFsdWVzOiB2YWx1ZXM2IH0gPSBPYmplY3Q7XG52YXIgc2VhdEtleXdvcmRzID0gW1wiQ2FzaFwiLCBcIkRlcG9zaXRcIl07XG5oYXJkZW4oc2VhdEtleXdvcmRzKTtcbnZhciBBc3NldFBsYWNlUmVmU2hhcGUgPSBNLm9yKFxuICAuLi5zZWF0S2V5d29yZHMubWFwKChrdykgPT4gYDwke2t3fT5gKSxcbiAgXCIrYWdvcmljXCIsXG4gIC4uLnZhbHVlczYoU3VwcG9ydGVkQ2hhaW4pLm1hcCgoYzIpID0+IGBAJHtjMn1gKSxcbiAgLi4ua2V5czQoUG9vbFBsYWNlcylcbik7XG52YXIgYWNjb3VudFJlZlBhdHRlcm4gPSAvXkAoPzxjaGFpbj5cXHcrKSQvO1xudmFyIGdldENoYWluTmFtZU9mUGxhY2VSZWYgPSAocmVmKSA9PiB7XG4gIGNvbnN0IG0yID0gcmVmLm1hdGNoKGFjY291bnRSZWZQYXR0ZXJuKTtcbiAgY29uc3QgY2hhaW4gPSBtMj8uZ3JvdXBzPy5jaGFpbjtcbiAgaWYgKCFjaGFpbikgcmV0dXJuIHZvaWQgMDtcbiAgYXNzZXJ0KGtleXM0KFN1cHBvcnRlZENoYWluKS5pbmNsdWRlcyhjaGFpbiksIGBiYWQgcmVmOiAke3JlZn1gKTtcbiAgcmV0dXJuIGNoYWluO1xufTtcbnZhciBzZWF0UmVmUGF0dGVybiA9IC9ePCg/PGtleXdvcmQ+XFx3Kyk+JC87XG52YXIgZ2V0S2V5d29yZE9mUGxhY2VSZWYgPSAocmVmKSA9PiB7XG4gIGNvbnN0IG0yID0gcmVmLm1hdGNoKHNlYXRSZWZQYXR0ZXJuKTtcbiAgY29uc3Qga2V5d29yZCA9IG0yPy5ncm91cHM/LmtleXdvcmQ7XG4gIGlmICgha2V5d29yZCkgcmV0dXJuIHZvaWQgMDtcbiAgYXNzZXJ0KHNlYXRLZXl3b3Jkcy5pbmNsdWRlcyhrZXl3b3JkKSwgYGJhZCByZWY6ICR7cmVmfWApO1xuICByZXR1cm4ga2V5d29yZDtcbn07XG52YXIgbWFrZU9mZmVyQXJnc1NoYXBlcyA9ICh1c2RjQnJhbmQpID0+IHtcbiAgY29uc3QgdXNkY0Ftb3VudFNoYXBlID0gbWFrZU5hdEFtb3VudFNoYXBlKHVzZGNCcmFuZCwgMW4pO1xuICBjb25zdCBtb3ZlbWVudERlc2NTaGFwZSA9IE0uc3BsaXRSZWNvcmQoXG4gICAge1xuICAgICAgYW1vdW50OiB1c2RjQW1vdW50U2hhcGUsXG4gICAgICBzcmM6IEFzc2V0UGxhY2VSZWZTaGFwZSxcbiAgICAgIGRlc3Q6IEFzc2V0UGxhY2VSZWZTaGFwZVxuICAgIH0sXG4gICAge1xuICAgICAgZmVlOiBBbnlOYXRBbW91bnRTaGFwZSxcbiAgICAgIGRldGFpbDogTS5yZWNvcmRPZihNLnN0cmluZygpLCBNLm5hdCgpKSxcbiAgICAgIGNsYWltOiBNLmJvb2xlYW4oKVxuICAgIH0sXG4gICAge31cbiAgKTtcbiAgcmV0dXJuIHtcbiAgICBvcGVuUG9ydGZvbGlvOiBNLnNwbGl0UmVjb3JkKFxuICAgICAge30sXG4gICAgICB7XG4gICAgICAgIGZsb3c6IE0uYXJyYXlPZihtb3ZlbWVudERlc2NTaGFwZSwgeyBhcnJheUxlbmd0aExpbWl0OiAxMiB9KSxcbiAgICAgICAgZGVzdGluYXRpb25FVk1DaGFpbjogTS5vciguLi5rZXlzNChBeGVsYXJDaGFpbikpLFxuICAgICAgICB0YXJnZXRBbGxvY2F0aW9uOiBUYXJnZXRBbGxvY2F0aW9uU2hhcGVcbiAgICAgIH0sXG4gICAgICB7fVxuICAgICksXG4gICAgcmViYWxhbmNlOiBNLnNwbGl0UmVjb3JkKFxuICAgICAge30sXG4gICAgICB7XG4gICAgICAgIGZsb3c6IE0uYXJyYXlPZihtb3ZlbWVudERlc2NTaGFwZSksXG4gICAgICAgIHRhcmdldEFsbG9jYXRpb246IFRhcmdldEFsbG9jYXRpb25TaGFwZVxuICAgICAgfSxcbiAgICAgIHt9XG4gICAgKSxcbiAgICBtb3ZlbWVudERlc2NTaGFwZVxuICB9O1xufTtcbmhhcmRlbihtYWtlT2ZmZXJBcmdzU2hhcGVzKTtcblxuLyogLi4vcG9ydGZvbGlvLWNvbnRyYWN0L3NyYy9wbGFubmVyLmV4by50cyovXG52YXIgdHJhY2UxMSA9IG1ha2VUcmFjZXIoXCJQUExOXCIpO1xudmFyIHByZXBhcmVQbGFubmVyID0gKHpvbmUsIHtcbiAgcmViYWxhbmNlOiByZWJhbGFuY2UyLFxuICB6Y2YsXG4gIGdldFBvcnRmb2xpbyxcbiAgc2hhcGVzLFxuICB2b3dUb29sc1xufSkgPT4ge1xuICBjb25zdCB7IG1vdmVtZW50RGVzY1NoYXBlIH0gPSBzaGFwZXM7XG4gIGNvbnN0IFBsYW5uZXJJID0gTS5pbnRlcmZhY2UoXCJQbGFubmVyXCIsIHtcbiAgICBzdWJtaXQ6IE0uY2FsbChcbiAgICAgIE0ubnVtYmVyKCksXG4gICAgICBNLmFycmF5T2YobW92ZW1lbnREZXNjU2hhcGUpLFxuICAgICAgTS5udW1iZXIoKSxcbiAgICAgIE0ubnVtYmVyKClcbiAgICApLnJldHVybnMoVm93U2hhcGUpXG4gIH0pO1xuICByZXR1cm4gem9uZS5leG9DbGFzcyhcIlBsYW5uZXJcIiwgUGxhbm5lckksICgpID0+ICh7fSksIHtcbiAgICAvKipcbiAqIFN1Ym1pdCBhIHBsYW4gKHNlcXVlbmNlIG9mIG1vdmVzKSBmb3IgZXhlY3V0aW9uLlxuICpcbiAqIFVzZWQgYnkgb2ZmLWNoYWluIHBsYW5uaW5nIHNlcnZpY2VzIHRvIGNhcnJ5IG91dCBleHByZXNzZWQgd2lzaGVzXG4gKiBvZiBhIHBvcnRmb2xpbyBvd25lci5cbiAqXG4gKiBAcGFyYW0gcG9ydGZvbGlvSWQgLSBUYXJnZXQgcG9ydGZvbGlvIGlkZW50aWZpZXJcbiAqIEBwYXJhbSBwbGFuIC0gQXJyYXkgb2YgYXNzZXQgbW92ZW1lbnRzIHRvIGV4ZWN1dGVcbiAqIEBwYXJhbSBwb2xpY3lWZXJzaW9uIC0gb24gd2hpY2ggcGxhbiBpcyBiYXNlZFxuICogQHBhcmFtIHJlYmFsYW5jZUNvdW50IC0gcHJlc3VtZWQgY3VycmVudCBjb3VudFxuICogQHRocm93cyBpLmUuIFZvdyByZWplY3RzIGlmIHBvcnRmb2xpbyBub3QgZm91bmQsIHBvbGljeVZlcnNpb24gaXMgbm90IGN1cnJlbnQsXG4gKiAgIG9yIHBsYW4gdmFsaWRhdGlvbiBvciBleGVjdXRpb24gZmFpbHNcbiAqL1xuICAgIHN1Ym1pdChwb3J0Zm9saW9JZCwgcGxhbiwgcG9saWN5VmVyc2lvbiwgcmViYWxhbmNlQ291bnQpIHtcbiAgICAgIHJldHVybiB2b3dUb29scy5hc1Zvdyhhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyYWNlMTEoXCJUT0RPKCMxMTc4Mik6IHZldCBwbGFuXCIsIHsgcG9ydGZvbGlvSWQsIHBsYW4gfSk7XG4gICAgICAgIGNvbnN0IHBLaXQgPSBnZXRQb3J0Zm9saW8ocG9ydGZvbGlvSWQpO1xuICAgICAgICBwS2l0Lm1hbmFnZXIuc3VibWl0VmVyc2lvbihwb2xpY3lWZXJzaW9uLCByZWJhbGFuY2VDb3VudCk7XG4gICAgICAgIGNvbnN0IHsgemNmU2VhdDogZW1wdHlTZWF0IH0gPSB6Y2YubWFrZUVtcHR5U2VhdEtpdCgpO1xuICAgICAgICByZXR1cm4gcmViYWxhbmNlMihlbXB0eVNlYXQsIHsgZmxvdzogcGxhbiB9LCBwS2l0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKiAuLi9vcmNoZXN0cmF0aW9uL3NyYy9heGVsYXItdHlwZXMuanMqL1xudmFyIEF4ZWxhckdNUE1lc3NhZ2VUeXBlID0gKFxuICAvKiogQHR5cGUge2NvbnN0fSAqL1xuICB7XG4gICAgQ29udHJhY3RDYWxsOiAxLFxuICAgIENvbnRyYWN0Q2FsbFdpdGhUb2tlbjogMixcbiAgICBUb2tlblRyYW5zZmVyOiAzXG4gIH1cbik7XG5oYXJkZW4oQXhlbGFyR01QTWVzc2FnZVR5cGUpO1xuXG4vKiAuLi9vcmNoZXN0cmF0aW9uL3NyYy92ZW5kb3IvdmllbS92aWVtLWFiaS5qcyovXG5pbml0X2NodW5rXzRFRjRLMk1IKCk7XG5pbml0X2NodW5rX1hONExVT0lIKCk7XG5pbml0X2NodW5rXzRWTlM1V1BNKCk7XG5cbi8qIC4uL3BvcnRmb2xpby1jb250cmFjdC9zcmMvcG9zLmV4by50cyovXG52YXIgeyBhc3NpZ246IGFzc2lnbjUgfSA9IE9iamVjdDtcbnZhciB7IGFkZDogYWRkMywgc3VidHJhY3Q6IHN1YnRyYWN0MyB9ID0gQW1vdW50TWF0aDtcbnZhciByZWNvcmRUcmFuc2ZlckluID0gKGFtb3VudCwgc3RhdGUsIHBvc2l0aW9uKSA9PiB7XG4gIGNvbnN0IHsgbmV0VHJhbnNmZXJzLCB0b3RhbEluIH0gPSBzdGF0ZTtcbiAgYXNzaWduNShzdGF0ZSwge1xuICAgIG5ldFRyYW5zZmVyczogYWRkMyhuZXRUcmFuc2ZlcnMsIGFtb3VudCksXG4gICAgdG90YWxJbjogYWRkMyh0b3RhbEluLCBhbW91bnQpXG4gIH0pO1xuICBwb3NpdGlvbi5wdWJsaXNoU3RhdHVzKCk7XG4gIHJldHVybiBzdGF0ZS5uZXRUcmFuc2ZlcnM7XG59O1xudmFyIHJlY29yZFRyYW5zZmVyT3V0ID0gKGFtb3VudCwgc3RhdGUsIHBvc2l0aW9uKSA9PiB7XG4gIGNvbnN0IHsgbmV0VHJhbnNmZXJzLCB0b3RhbE91dCB9ID0gc3RhdGU7XG4gIGFzc2lnbjUoc3RhdGUsIHtcbiAgICBuZXRUcmFuc2ZlcnM6IHN1YnRyYWN0MyhuZXRUcmFuc2ZlcnMsIGFtb3VudCksXG4gICAgdG90YWxPdXQ6IGFkZDModG90YWxPdXQsIGFtb3VudClcbiAgfSk7XG4gIHBvc2l0aW9uLnB1Ymxpc2hTdGF0dXMoKTtcbiAgcmV0dXJuIHN0YXRlLm5ldFRyYW5zZmVycztcbn07XG52YXIgcHJlcGFyZVBvc2l0aW9uID0gKHpvbmUsIGVtcHR5VHJhbnNmZXJTdGF0ZSwgcHVibGlzaFN0YXR1czIpID0+IHpvbmUuZXhvQ2xhc3MoXG4gIFwiUG9zaXRpb25cIixcbiAgdm9pZCAwLFxuICAvKiBpbnRlcmZhY2UgVE9ETyovXG4gIChwb3J0Zm9saW9JZCwgcG9vbEtleSwgcHJvdG9jb2wsIGFjY291bnRJZCkgPT4gKHtcbiAgICBwb3J0Zm9saW9JZCxcbiAgICBwcm90b2NvbCxcbiAgICAuLi5lbXB0eVRyYW5zZmVyU3RhdGUsXG4gICAgcG9vbEtleSxcbiAgICBhY2NvdW50SWRcbiAgfSksXG4gIHtcbiAgICBnZXRQb29sS2V5KCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdGUucG9vbEtleTtcbiAgICB9LFxuICAgIGdldFlpZWxkUHJvdG9jb2woKSB7XG4gICAgICBjb25zdCB7IHByb3RvY29sIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgcmV0dXJuIHByb3RvY29sO1xuICAgIH0sXG4gICAgcmVjb3JkVHJhbnNmZXJJbihhbW91bnQpIHtcbiAgICAgIHJldHVybiByZWNvcmRUcmFuc2ZlckluKGFtb3VudCwgdGhpcy5zdGF0ZSwgdGhpcy5zZWxmKTtcbiAgICB9LFxuICAgIHJlY29yZFRyYW5zZmVyT3V0KGFtb3VudCkge1xuICAgICAgcmV0dXJuIHJlY29yZFRyYW5zZmVyT3V0KGFtb3VudCwgdGhpcy5zdGF0ZSwgdGhpcy5zZWxmKTtcbiAgICB9LFxuICAgIHB1Ymxpc2hTdGF0dXMoKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHBvcnRmb2xpb0lkLFxuICAgICAgICBwb29sS2V5LFxuICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgYWNjb3VudElkLFxuICAgICAgICBuZXRUcmFuc2ZlcnMsXG4gICAgICAgIHRvdGFsSW4sXG4gICAgICAgIHRvdGFsT3V0XG4gICAgICB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgIGNvbnN0IGtleSA9IG1ha2VQb3NpdGlvblBhdGgocG9ydGZvbGlvSWQsIHBvb2xLZXkpO1xuICAgICAgY29uc3Qgc3RhdHVzID0gaGFyZGVuKHtcbiAgICAgICAgcHJvdG9jb2wsXG4gICAgICAgIGFjY291bnRJZCxcbiAgICAgICAgbmV0VHJhbnNmZXJzLFxuICAgICAgICB0b3RhbEluLFxuICAgICAgICB0b3RhbE91dFxuICAgICAgfSk7XG4gICAgICBwdWJsaXNoU3RhdHVzMihrZXksIHN0YXR1cyk7XG4gICAgfVxuICB9XG4pO1xuXG4vKiAuLi9wb3J0Zm9saW8tY29udHJhY3Qvc3JjL3BvcnRmb2xpby5leG8udHMqL1xudmFyIHRyYWNlMTIgPSBtYWtlVHJhY2VyKFwiUG9ydEV4b1wiKTtcbnZhciBERUNPREVfQ09OVFJBQ1RfQ0FMTF9SRVNVTFRfQUJJID0gW1xuICB7XG4gICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgIGNvbXBvbmVudHM6IFtcbiAgICAgIHsgbmFtZTogXCJpc0NvbnRyYWN0Q2FsbFJlc3VsdFwiLCB0eXBlOiBcImJvb2xcIiB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcImRhdGFcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVtdXCIsXG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7IG5hbWU6IFwic3VjY2Vzc1wiLCB0eXBlOiBcImJvb2xcIiB9LFxuICAgICAgICAgIHsgbmFtZTogXCJyZXN1bHRcIiwgdHlwZTogXCJieXRlc1wiIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIF1cbiAgfVxuXTtcbmhhcmRlbihERUNPREVfQ09OVFJBQ1RfQ0FMTF9SRVNVTFRfQUJJKTtcbnZhciBhY2NvdW50SWRCeUNoYWluID0gKGFjY291bnRzKSA9PiB7XG4gIGNvbnN0IGJ5Q2hhaW4gPSB7fTtcbiAgZm9yIChjb25zdCBbbjIsIGluZm9dIG9mIGFjY291bnRzLmVudHJpZXMoKSkge1xuICAgIHN3aXRjaCAoaW5mby5uYW1lc3BhY2UpIHtcbiAgICAgIGNhc2UgXCJjb3Ntb3NcIjpcbiAgICAgICAgc3dpdGNoIChpbmZvLmNoYWluTmFtZSkge1xuICAgICAgICAgIGNhc2UgXCJhZ29yaWNcIjpcbiAgICAgICAgICAgIGJ5Q2hhaW5bbjJdID0gY29lcmNlQWNjb3VudElkKGluZm8ubGNhLmdldEFkZHJlc3MoKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwibm9ibGVcIjpcbiAgICAgICAgICAgIGJ5Q2hhaW5bbjJdID0gY29lcmNlQWNjb3VudElkKGluZm8uaWNhLmdldEFkZHJlc3MoKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdHJhY2UxMihcInNraXBwaW5nOiB1bmV4cGVjdGVkIGNoYWluTmFtZVwiLCBpbmZvKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJlaXAxNTVcIjpcbiAgICAgICAgYnlDaGFpbltuMl0gPSBgJHtpbmZvLmNoYWluSWR9OiR7aW5mby5yZW1vdGVBZGRyZXNzfWA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYXNzZXJ0LmZhaWwocmVkYWN0ZWRgbm8gc3VjaCB0eXBlOiAke2luZm99YCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBoYXJkZW4oYnlDaGFpbik7XG59O1xudmFyIGV2ZW50QWJiciA9IChlMikgPT4ge1xuICBjb25zdCB7IGRlc3RpbmF0aW9uX2NoYW5uZWw6IGRlc3QsIHNlcXVlbmNlIH0gPSBlMi5wYWNrZXQ7XG4gIHJldHVybiB7IGRlc3RpbmF0aW9uX2NoYW5uZWw6IGRlc3QsIHNlcXVlbmNlIH07XG59O1xudmFyIHByZXBhcmVQb3J0Zm9saW9LaXQgPSAoem9uZSwge1xuICBheGVsYXJJZHMsXG4gIGdtcEFkZHJlc3NlcyxcbiAgcmViYWxhbmNlOiByZWJhbGFuY2UyLFxuICBwYXJzZUluYm91bmRUcmFuc2ZlcjogcGFyc2VJbmJvdW5kVHJhbnNmZXIyLFxuICBjaGFpbkh1YlRvb2xzLFxuICBwcm9wb3NhbFNoYXBlcyxcbiAgb2ZmZXJBcmdzU2hhcGVzLFxuICB2b3dUb29scyxcbiAgemNmLFxuICBwb3J0Zm9saW9zTm9kZSxcbiAgbWFyc2hhbGxlcixcbiAgdXNkY0JyYW5kXG59KSA9PiB7XG4gIGNvbnN0IG5vZGVzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgY29uc3QgcHJvdmlkZVBhdGhOb2RlID0gKHNlZ21lbnRzKSA9PiB7XG4gICAgaWYgKHNlZ21lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHBvcnRmb2xpb3NOb2RlO1xuICAgIGNvbnN0IHBhdGggPSBzZWdtZW50cy5qb2luKFwiLlwiKTtcbiAgICBpZiAobm9kZXMuaGFzKHBhdGgpKSByZXR1cm4gbm9kZXMuZ2V0KHBhdGgpO1xuICAgIGNvbnN0IHBhcmVudCA9IHByb3ZpZGVQYXRoTm9kZShzZWdtZW50cy5zbGljZSgwLCAtMSkpO1xuICAgIGNvbnN0IG5vZGUgPSBFKHBhcmVudCkubWFrZUNoaWxkTm9kZShzZWdtZW50cy5hdCgtMSkpO1xuICAgIG5vZGVzLnNldChwYXRoLCBub2RlKTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcbiAgY29uc3QgcHVibGlzaFN0YXR1czIgPSAocGF0aCwgc3RhdHVzKSA9PiB7XG4gICAgY29uc3Qgbm9kZSA9IHByb3ZpZGVQYXRoTm9kZShwYXRoKTtcbiAgICB2b2lkIEUud2hlbihcbiAgICAgIEUobWFyc2hhbGxlcikudG9DYXBEYXRhKHN0YXR1cyksXG4gICAgICAoY2FwRGF0YSkgPT4gRShub2RlKS5zZXRWYWx1ZShKU09OLnN0cmluZ2lmeShjYXBEYXRhKSlcbiAgICApO1xuICB9O1xuICBjb25zdCB1c2RjRW1wdHkgPSBBbW91bnRNYXRoLm1ha2VFbXB0eSh1c2RjQnJhbmQpO1xuICBjb25zdCBlbXB0eVRyYW5zZmVyU3RhdGUgPSBoYXJkZW4oe1xuICAgIHRvdGFsSW46IHVzZGNFbXB0eSxcbiAgICB0b3RhbE91dDogdXNkY0VtcHR5LFxuICAgIG5ldFRyYW5zZmVyczogdXNkY0VtcHR5XG4gIH0pO1xuICBjb25zdCBtYWtlUG9zaXRpb24gPSBwcmVwYXJlUG9zaXRpb24oem9uZSwgZW1wdHlUcmFuc2ZlclN0YXRlLCBwdWJsaXNoU3RhdHVzMik7XG4gIHJldHVybiB6b25lLmV4b0NsYXNzS2l0KFxuICAgIFwiUG9ydGZvbGlvXCIsXG4gICAgdm9pZCAwLFxuICAgICh7IHBvcnRmb2xpb0lkIH0pID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBvcnRmb2xpb0lkLFxuICAgICAgICBuZXh0Rmxvd0lkOiAxLFxuICAgICAgICBhY2NvdW50czogem9uZS5kZXRhY2hlZCgpLm1hcFN0b3JlKFwiYWNjb3VudHNcIiwge1xuICAgICAgICAgIGtleVNoYXBlOiBNLnN0cmluZygpLFxuICAgICAgICAgIHZhbHVlU2hhcGU6IE0ub3IoXG4gICAgICAgICAgICBNLnJlbW90YWJsZShcIkFjY291bnRcIiksXG4gICAgICAgICAgICAvKiBYWFggZm9yIEVWTS9HTVAgYWNjb3VudCBpbmZvKi9cbiAgICAgICAgICAgIE0ucmVjb3JkKClcbiAgICAgICAgICApXG4gICAgICAgIH0pLFxuICAgICAgICBhY2NvdW50c1BlbmRpbmc6IHpvbmUuZGV0YWNoZWQoKS5tYXBTdG9yZShcImFjY291bnRzUGVuZGluZ1wiKSxcbiAgICAgICAgLyogTkVFRFNURVNUOiBmb3IgZm9yZ2V0dGluZyB0byB1c2UgZGV0YWNoZWQoKSovXG4gICAgICAgIHBvc2l0aW9uczogem9uZS5kZXRhY2hlZCgpLm1hcFN0b3JlKFwicG9zaXRpb25zXCIsIHtcbiAgICAgICAgICBrZXlTaGFwZTogUG9vbEtleVNoYXBlRXh0LFxuICAgICAgICAgIHZhbHVlU2hhcGU6IE0ucmVtb3RhYmxlKFwiUG9zaXRpb25cIilcbiAgICAgICAgfSksXG4gICAgICAgIHRhcmdldEFsbG9jYXRpb246IHZvaWQgMCxcbiAgICAgICAgcG9saWN5VmVyc2lvbjogMCxcbiAgICAgICAgcmViYWxhbmNlQ291bnQ6IDBcbiAgICAgIH07XG4gICAgfSxcbiAgICB7XG4gICAgICB0YXA6IHtcbiAgICAgICAgYXN5bmMgcmVjZWl2ZVVwY2FsbChldmVudCkge1xuICAgICAgICAgIGNvbnN0IHRyYWNlVXBjYWxsID0gdHJhY2UxMi5zdWIoYHBvcnRmb2xpbyR7dGhpcy5zdGF0ZS5wb3J0Zm9saW9JZH1gKS5zdWIoXCJ1cGNhbGxcIik7XG4gICAgICAgICAgdHJhY2VVcGNhbGwoXCJldmVudFwiLCBldmVudEFiYnIoZXZlbnQpKTtcbiAgICAgICAgICBjb25zdCB7IGRlc3RpbmF0aW9uX2NoYW5uZWw6IHBhY2tldERlc3QgfSA9IGV2ZW50LnBhY2tldDtcbiAgICAgICAgICBjb25zdCBbX2Fnb3JpYywgX2F4ZWxhciwgY29ubmVjdGlvbl0gPSBhd2FpdCB2b3dUb29scy53aGVuKFxuICAgICAgICAgICAgY2hhaW5IdWJUb29scy5nZXRDaGFpbnNBbmRDb25uZWN0aW9uKFwiYWdvcmljXCIsIFwiYXhlbGFyXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCB7IGNoYW5uZWxJZDogYWdvcmljVG9BeGVsYXIgfSA9IGNvbm5lY3Rpb24udHJhbnNmZXJDaGFubmVsO1xuICAgICAgICAgIGlmIChwYWNrZXREZXN0ICE9PSBhZ29yaWNUb0F4ZWxhcikge1xuICAgICAgICAgICAgdHJhY2VVcGNhbGwoXG4gICAgICAgICAgICAgIGBHTVAgZWFybHkgZXhpdDogJHtwYWNrZXREZXN0fSAhPSAke2Fnb3JpY1RvQXhlbGFyfTogbm90IGZyb20gYXhlbGFyYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZvd1Rvb2xzLndhdGNoKFxuICAgICAgICAgICAgcGFyc2VJbmJvdW5kVHJhbnNmZXIyKGV2ZW50LnBhY2tldCwgdGhpcy5mYWNldHMpLFxuICAgICAgICAgICAgdGhpcy5mYWNldHMucGFyc2VJbmJvdW5kVHJhbnNmZXJXYXRjaGVyXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHBhcnNlSW5ib3VuZFRyYW5zZmVyV2F0Y2hlcjoge1xuICAgICAgICBvblJlamVjdGVkKHJlYXNvbikge1xuICAgICAgICAgIGNvbnN0IHRyYWNlUCA9IHRyYWNlMTIuc3ViKGBwb3J0Zm9saW8ke3RoaXMuc3RhdGUucG9ydGZvbGlvSWR9YCk7XG4gICAgICAgICAgdHJhY2VQKFwiXFx1MjZBMFxcdUZFMEYgcGFyc2VJbmJvdW5kVHJhbnNmZXIgZmFpbHVyZVwiLCByZWFzb24pO1xuICAgICAgICAgIHRocm93IHJlYXNvbjtcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgb25GdWxmaWxsZWQocGFyc2VkKSB7XG4gICAgICAgICAgY29uc3QgdHJhY2VVcGNhbGwgPSB0cmFjZTEyLnN1YihgcG9ydGZvbGlvJHt0aGlzLnN0YXRlLnBvcnRmb2xpb0lkfWApLnN1YihcInVwY2FsbFwiKTtcbiAgICAgICAgICBpZiAoIXBhcnNlZCkge1xuICAgICAgICAgICAgdHJhY2VVcGNhbGwoXCJHTVAgZWFybHkgZXhpdDogbm8gcGFyc2VkIGluYm91bmQgdHJhbnNmZXJcIik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHsgZXh0cmEgfSA9IHBhcnNlZDtcbiAgICAgICAgICBpZiAoIWV4dHJhLm1lbW8pIHJldHVybjtcbiAgICAgICAgICBpZiAoZXh0cmEuc2VuZGVyICE9PSBnbXBBZGRyZXNzZXMuQVhFTEFSX0dNUCkge1xuICAgICAgICAgICAgdHJhY2VVcGNhbGwoXG4gICAgICAgICAgICAgIGBHTVAgZWFybHkgZXhpdDsgQVhFTEFSX0dNUCBzZW5kZXIgZXhwZWN0ZWQgJHtnbXBBZGRyZXNzZXMuQVhFTEFSX0dNUH0sIGdvdCAke2V4dHJhLnNlbmRlcn1gXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBtZW1vID0gSlNPTi5wYXJzZShleHRyYS5tZW1vKTtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBPYmplY3QuZW50cmllcyhheGVsYXJJZHMpLmZpbmQoKFtfMiwgY2hhaW5JZF0pID0+IGNoYWluSWQgPT09IG1lbW8uc291cmNlX2NoYWluKTtcbiAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgdHJhY2VVcGNhbGwoXCJ1bmtub3duIHNvdXJjZV9jaGFpblwiLCBtZW1vKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgW2NoYWluTmFtZSwgX10gPSByZXN1bHQ7XG4gICAgICAgICAgY29uc3QgcGF5bG9hZEJ5dGVzID0gZGVjb2RlQmFzZTY0KG1lbW8ucGF5bG9hZCk7XG4gICAgICAgICAgY29uc3QgW3sgaXNDb250cmFjdENhbGxSZXN1bHQsIGRhdGEgfV0gPSBkZWNvZGVBYmlQYXJhbWV0ZXJzKFxuICAgICAgICAgICAgREVDT0RFX0NPTlRSQUNUX0NBTExfUkVTVUxUX0FCSSxcbiAgICAgICAgICAgIHBheWxvYWRCeXRlc1xuICAgICAgICAgICk7XG4gICAgICAgICAgdHJhY2VVcGNhbGwoXG4gICAgICAgICAgICBcIkRlY29kZWQ6XCIsXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeSh7IGlzQ29udHJhY3RDYWxsUmVzdWx0LCBkYXRhIH0pXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoaXNDb250cmFjdENhbGxSZXN1bHQpIHtcbiAgICAgICAgICAgIHRyYWNlVXBjYWxsKFwiVE9ETzogSGFuZGxlIHRoZSByZXN1bHQgb2YgdGhlIGNvbnRyYWN0IGNhbGxcIiwgZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IFttZXNzYWdlXSA9IGRhdGE7XG4gICAgICAgICAgY29uc3QgeyBzdWNjZXNzLCByZXN1bHQ6IHJlc3VsdDIgfSA9IG1lc3NhZ2U7XG4gICAgICAgICAgaWYgKCFzdWNjZXNzKSByZXR1cm47XG4gICAgICAgICAgY29uc3QgW2FkZHJlc3NdID0gZGVjb2RlQWJpUGFyYW1ldGVycyhbeyB0eXBlOiBcImFkZHJlc3NcIiB9XSwgcmVzdWx0Mik7XG4gICAgICAgICAgY29uc3QgY2hhaW5JbmZvID0gYXdhaXQgdm93VG9vbHMud2hlbihcbiAgICAgICAgICAgIGNoYWluSHViVG9vbHMuZ2V0Q2hhaW5JbmZvKGNoYWluTmFtZSlcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IGNhaXBJZCA9IGAke2NoYWluSW5mby5uYW1lc3BhY2V9OiR7Y2hhaW5JbmZvLnJlZmVyZW5jZX1gO1xuICAgICAgICAgIHRyYWNlVXBjYWxsKGNoYWluTmFtZSwgXCJyZW1vdGVBZGRyZXNzXCIsIGFkZHJlc3MpO1xuICAgICAgICAgIHRoaXMuZmFjZXRzLm1hbmFnZXIucmVzb2x2ZUFjY291bnQoe1xuICAgICAgICAgICAgbmFtZXNwYWNlOiBcImVpcDE1NVwiLFxuICAgICAgICAgICAgY2hhaW5OYW1lLFxuICAgICAgICAgICAgY2hhaW5JZDogY2FpcElkLFxuICAgICAgICAgICAgcmVtb3RlQWRkcmVzczogYWRkcmVzc1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRyYWNlVXBjYWxsKFwiY29tcGxldGVkXCIpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVhZGVyOiB7XG4gICAgICAgIC8qKlxuICogR2V0IHRoZSBMb2NhbEFjY291bnQgZm9yIHRoZSBjdXJyZW50IGNoYWluLlxuICpcbiAqIFdlIHJlbHkgb24gdGhlIHBvcnRmb2xpbyBjcmVhdG9yIGludGVybmFsbHkgYWRkaW5nIHRoZSBBZ29yaWNcbiAqIGFjY291bnQgYmVmb3JlIG1ha2luZyB0aGUgUG9ydGZvbGlvS2l0IGF2YWlsYWJsZSB0byBhbnkgY2xpZW50cy5cbiAqL1xuICAgICAgICBnZXRMb2NhbEFjY291bnQoKSB7XG4gICAgICAgICAgY29uc3QgeyBhY2NvdW50cyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBjb25zdCBpbmZvID0gYWNjb3VudHMuZ2V0KFwiYWdvcmljXCIpO1xuICAgICAgICAgIGFzc2VydC5lcXVhbChpbmZvPy5jaGFpbk5hbWUsIFwiYWdvcmljXCIpO1xuICAgICAgICAgIHJldHVybiBpbmZvLmxjYTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0U3RvcmFnZVBhdGgoKSB7XG4gICAgICAgICAgY29uc3QgeyBwb3J0Zm9saW9JZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBjb25zdCBub2RlID0gcHJvdmlkZVBhdGhOb2RlKG1ha2VQb3J0Zm9saW9QYXRoKHBvcnRmb2xpb0lkKSk7XG4gICAgICAgICAgcmV0dXJuIHZvd1Rvb2xzLmFzVm93KCgpID0+IEUobm9kZSkuZ2V0UGF0aCgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0UG9ydGZvbGlvSWQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUucG9ydGZvbGlvSWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEdNUEluZm8oY2hhaW5OYW1lKSB7XG4gICAgICAgICAgY29uc3QgeyBhY2NvdW50cywgYWNjb3VudHNQZW5kaW5nIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIGlmIChhY2NvdW50cy5oYXMoY2hhaW5OYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZvd1Rvb2xzLmFzVm93KFxuICAgICAgICAgICAgICAoKSA9PiBhY2NvdW50cy5nZXQoY2hhaW5OYW1lKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgeyB2b3cgfSA9IGFjY291bnRzUGVuZGluZy5nZXQoY2hhaW5OYW1lKTtcbiAgICAgICAgICByZXR1cm4gdm93O1xuICAgICAgICB9LFxuICAgICAgICBnZXRUYXJnZXRBbGxvY2F0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlLnRhcmdldEFsbG9jYXRpb247XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZXBvcnRlcjoge1xuICAgICAgICBwdWJsaXNoU3RhdHVzKCkge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHBvcnRmb2xpb0lkLFxuICAgICAgICAgICAgcG9zaXRpb25zLFxuICAgICAgICAgICAgYWNjb3VudHMsXG4gICAgICAgICAgICBuZXh0Rmxvd0lkLFxuICAgICAgICAgICAgdGFyZ2V0QWxsb2NhdGlvbixcbiAgICAgICAgICAgIGFjY291bnRzUGVuZGluZyxcbiAgICAgICAgICAgIHBvbGljeVZlcnNpb24sXG4gICAgICAgICAgICByZWJhbGFuY2VDb3VudFxuICAgICAgICAgIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIGNvbnN0IGRlcG9zaXQgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGxjYUluIH0gPSBhY2NvdW50cy5nZXQoXCJhZ29yaWNcIik7XG4gICAgICAgICAgICByZXR1cm4geyBkZXBvc2l0QWRkcmVzczogbGNhSW4uZ2V0QWRkcmVzcygpLnZhbHVlIH07XG4gICAgICAgICAgfTtcbiAgICAgICAgICBwdWJsaXNoU3RhdHVzMihtYWtlUG9ydGZvbGlvUGF0aChwb3J0Zm9saW9JZCksIHtcbiAgICAgICAgICAgIHBvc2l0aW9uS2V5czogWy4uLnBvc2l0aW9ucy5rZXlzKCldLFxuICAgICAgICAgICAgZmxvd0NvdW50OiBuZXh0Rmxvd0lkIC0gMSxcbiAgICAgICAgICAgIGFjY291bnRJZEJ5Q2hhaW46IGFjY291bnRJZEJ5Q2hhaW4oYWNjb3VudHMpLFxuICAgICAgICAgICAgLi4uKGFjY291bnRzLmhhcyhcImFnb3JpY1wiKT8gZGVwb3NpdCgpIDoge30pLFxuICAgICAgICAgICAgLi4uKHRhcmdldEFsbG9jYXRpb24mJiB7IHRhcmdldEFsbG9jYXRpb24gfSksXG4gICAgICAgICAgICBhY2NvdW50c1BlbmRpbmc6IFsuLi5hY2NvdW50c1BlbmRpbmcua2V5cygpXSxcbiAgICAgICAgICAgIHBvbGljeVZlcnNpb24sXG4gICAgICAgICAgICByZWJhbGFuY2VDb3VudFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBhbGxvY2F0ZUZsb3dJZCgpIHtcbiAgICAgICAgICBjb25zdCB7IG5leHRGbG93SWQgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5uZXh0Rmxvd0lkID0gbmV4dEZsb3dJZCArIDE7XG4gICAgICAgICAgdGhpcy5mYWNldHMucmVwb3J0ZXIucHVibGlzaFN0YXR1cygpO1xuICAgICAgICAgIHJldHVybiBuZXh0Rmxvd0lkO1xuICAgICAgICB9LFxuICAgICAgICAvKiBYWFggY29sbGVjdGluZyBmbG93IG5vZGVzIGlzIFRCRCovXG4gICAgICAgIHB1Ymxpc2hGbG93U3RlcHMoaWQsIHN0ZXBzKSB7XG4gICAgICAgICAgY29uc3QgeyBwb3J0Zm9saW9JZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBwdWJsaXNoU3RhdHVzMihtYWtlRmxvd1N0ZXBzUGF0aChwb3J0Zm9saW9JZCwgaWQpLCBzdGVwcyk7XG4gICAgICAgIH0sXG4gICAgICAgIHB1Ymxpc2hGbG93U3RhdHVzKGlkLCBzdGF0dXMpIHtcbiAgICAgICAgICBjb25zdCB7IHBvcnRmb2xpb0lkIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIHB1Ymxpc2hTdGF0dXMyKG1ha2VGbG93UGF0aChwb3J0Zm9saW9JZCwgaWQpLCBzdGF0dXMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgbWFuYWdlcjoge1xuICAgICAgICByZXNlcnZlQWNjb3VudChjaGFpbk5hbWUpIHtcbiAgICAgICAgICBjb25zdCB0cmFjZUNoYWluID0gdHJhY2UxMi5zdWIoYHBvcnRmb2xpbyR7dGhpcy5zdGF0ZS5wb3J0Zm9saW9JZH1gKS5zdWIoY2hhaW5OYW1lKTtcbiAgICAgICAgICB0cmFjZUNoYWluKFwicmVzZXJ2ZUFjY291bnRcIik7XG4gICAgICAgICAgY29uc3QgeyBhY2NvdW50cywgYWNjb3VudHNQZW5kaW5nIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIGlmIChhY2NvdW50cy5oYXMoY2hhaW5OYW1lKSkge1xuICAgICAgICAgICAgdHJhY2VDaGFpbihcImFjY291bnRzLmhhc1wiKTtcbiAgICAgICAgICAgIHJldHVybiB2b3dUb29scy5hc1Zvdyhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGluZm9BbnkgPSBhY2NvdW50cy5nZXQoY2hhaW5OYW1lKTtcbiAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKGluZm9BbnkuY2hhaW5OYW1lLCBjaGFpbk5hbWUpO1xuICAgICAgICAgICAgICBjb25zdCBpbmZvID0gaW5mb0FueTtcbiAgICAgICAgICAgICAgcmV0dXJuIGluZm87XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGFjY291bnRzUGVuZGluZy5oYXMoY2hhaW5OYW1lKSkge1xuICAgICAgICAgICAgdHJhY2VDaGFpbihcImFjY291bnRzUGVuZGluZy5oYXNcIik7XG4gICAgICAgICAgICByZXR1cm4gYWNjb3VudHNQZW5kaW5nLmdldChjaGFpbk5hbWUpLnZvdztcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgcGVuZGluZyA9IHZvd1Rvb2xzLm1ha2VWb3dLaXQoKTtcbiAgICAgICAgICB2b3dUb29scy53YXRjaChwZW5kaW5nLnZvdywgdGhpcy5mYWNldHMuYWNjb3VudFdhdGNoZXIsIGNoYWluTmFtZSk7XG4gICAgICAgICAgdHJhY2VDaGFpbihcImFjY291bnRzUGVuZGluZy5pbml0XCIpO1xuICAgICAgICAgIGFjY291bnRzUGVuZGluZy5pbml0KGNoYWluTmFtZSwgcGVuZGluZyk7XG4gICAgICAgICAgdGhpcy5mYWNldHMucmVwb3J0ZXIucHVibGlzaFN0YXR1cygpO1xuICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc29sdmVBY2NvdW50KGluZm8pIHtcbiAgICAgICAgICBjb25zdCB7IGFjY291bnRzLCBhY2NvdW50c1BlbmRpbmcsIHBvcnRmb2xpb0lkIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIGNvbnN0IHRyYWNlQ2hhaW4gPSB0cmFjZTEyLnN1YihgcG9ydGZvbGlvJHtwb3J0Zm9saW9JZH1gKS5zdWIoaW5mby5jaGFpbk5hbWUpO1xuICAgICAgICAgIGlmIChhY2NvdW50c1BlbmRpbmcuaGFzKGluZm8uY2hhaW5OYW1lKSkge1xuICAgICAgICAgICAgY29uc3Qgdm93ID0gYWNjb3VudHNQZW5kaW5nLmdldChpbmZvLmNoYWluTmFtZSk7XG4gICAgICAgICAgICB0cmFjZUNoYWluKFwiYWNjb3VudHNQZW5kaW5nLnJlc29sdmVcIik7XG4gICAgICAgICAgICB2b3cucmVzb2x2ZXIucmVzb2x2ZShpbmZvKTtcbiAgICAgICAgICAgIGFjY291bnRzUGVuZGluZy5kZWxldGUoaW5mby5jaGFpbk5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0cmFjZUNoYWluKFwiYWNjb3VudHMuaW5pdFwiKTtcbiAgICAgICAgICBhY2NvdW50cy5pbml0KGluZm8uY2hhaW5OYW1lLCBpbmZvKTtcbiAgICAgICAgICB0aGlzLmZhY2V0cy5yZXBvcnRlci5wdWJsaXNoU3RhdHVzKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbGVhc2VBY2NvdW50KGNoYWluTmFtZSwgcmVhc29uKSB7XG4gICAgICAgICAgdHJhY2UxMihcInJlbGVhc2VBY2NvdW50XCIsIGNoYWluTmFtZSwgcmVhc29uKTtcbiAgICAgICAgICBjb25zdCB7IGFjY291bnRzUGVuZGluZyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBpZiAoYWNjb3VudHNQZW5kaW5nLmhhcyhjaGFpbk5hbWUpKSB7XG4gICAgICAgICAgICBjb25zdCB2b3cgPSBhY2NvdW50c1BlbmRpbmcuZ2V0KGNoYWluTmFtZSk7XG4gICAgICAgICAgICB2b3cucmVzb2x2ZXIucmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgICBhY2NvdW50c1BlbmRpbmcuZGVsZXRlKGNoYWluTmFtZSk7XG4gICAgICAgICAgICB0aGlzLmZhY2V0cy5yZXBvcnRlci5wdWJsaXNoU3RhdHVzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwcm92aWRlUG9zaXRpb24ocG9vbEtleSwgcHJvdG9jb2wsIGFjY291bnRJZCkge1xuICAgICAgICAgIGNvbnN0IHsgcG9zaXRpb25zIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIGlmIChwb3NpdGlvbnMuaGFzKHBvb2xLZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpb25zLmdldChwb29sS2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgeyBwb3J0Zm9saW9JZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IG1ha2VQb3NpdGlvbihcbiAgICAgICAgICAgIHBvcnRmb2xpb0lkLFxuICAgICAgICAgICAgcG9vbEtleSxcbiAgICAgICAgICAgIHByb3RvY29sLFxuICAgICAgICAgICAgYWNjb3VudElkXG4gICAgICAgICAgKTtcbiAgICAgICAgICBwb3NpdGlvbnMuaW5pdChwb29sS2V5LCBwb3NpdGlvbik7XG4gICAgICAgICAgcG9zaXRpb24ucHVibGlzaFN0YXR1cygpO1xuICAgICAgICAgIHRoaXMuZmFjZXRzLnJlcG9ydGVyLnB1Ymxpc2hTdGF0dXMoKTtcbiAgICAgICAgICByZXR1cm4gcG9zaXRpb247XG4gICAgICAgIH0sXG4gICAgICAgIHNldFRhcmdldEFsbG9jYXRpb24oYWxsb2NhdGlvbikge1xuICAgICAgICAgIHRoaXMuc3RhdGUudGFyZ2V0QWxsb2NhdGlvbiA9IGFsbG9jYXRpb247XG4gICAgICAgICAgdGhpcy5mYWNldHMubWFuYWdlci5pbmNyUG9saWN5VmVyc2lvbigpO1xuICAgICAgICB9LFxuICAgICAgICBpbmNyUG9saWN5VmVyc2lvbigpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlLnBvbGljeVZlcnNpb24gKz0gMTtcbiAgICAgICAgICB0aGlzLnN0YXRlLnJlYmFsYW5jZUNvdW50ID0gMDtcbiAgICAgICAgICB0aGlzLmZhY2V0cy5yZXBvcnRlci5wdWJsaXNoU3RhdHVzKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHN1Ym1pdFZlcnNpb24odmVyc2lvblByZSwgY291bnRQcmUpIHtcbiAgICAgICAgICBjb25zdCB7IHBvbGljeVZlcnNpb24sIHJlYmFsYW5jZUNvdW50IH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIHBvbGljeVZlcnNpb24gPT09IHZlcnNpb25QcmUgfHwgdGhyb3dSZWRhY3RlZGBleHBlY3RlZCBwb2xpY3lWZXJzaW9uICR7cG9saWN5VmVyc2lvbn07IGdvdCAke3ZlcnNpb25QcmV9YDtcbiAgICAgICAgICByZWJhbGFuY2VDb3VudCA9PT0gY291bnRQcmUgfHwgdGhyb3dSZWRhY3RlZGBleHBlY3RlZCByZWJhbGFuY2VDb3VudCAke3JlYmFsYW5jZUNvdW50fTsgZ290ICR7Y291bnRQcmV9YDtcbiAgICAgICAgICB0aGlzLnN0YXRlLnJlYmFsYW5jZUNvdW50ICs9IDE7XG4gICAgICAgICAgdGhpcy5mYWNldHMucmVwb3J0ZXIucHVibGlzaFN0YXR1cygpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYWNjb3VudFdhdGNoZXI6IHtcbiAgICAgICAgb25SZWplY3RlZChyZWFzb24sIGNoYWluTmFtZSkge1xuICAgICAgICAgIGNvbnN0IHRyYWNlQ2hhaW4gPSB0cmFjZTEyLnN1YihgcG9ydGZvbGlvJHt0aGlzLnN0YXRlLnBvcnRmb2xpb0lkfWApLnN1YihjaGFpbk5hbWUpO1xuICAgICAgICAgIHRyYWNlQ2hhaW4oXCJyZWplY3RlZFwiLCByZWFzb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmViYWxhbmNlSGFuZGxlcjoge1xuICAgICAgICBhc3luYyBoYW5kbGUoc2VhdCwgb2ZmZXJBcmdzKSB7XG4gICAgICAgICAgbXVzdE1hdGNoMyhvZmZlckFyZ3MsIG9mZmVyQXJnc1NoYXBlcy5yZWJhbGFuY2UpO1xuICAgICAgICAgIHJldHVybiByZWJhbGFuY2UyKHNlYXQsIG9mZmVyQXJncywgdGhpcy5mYWNldHMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaW52aXRhdGlvbk1ha2Vyczoge1xuICAgICAgICBSZWJhbGFuY2UoKSB7XG4gICAgICAgICAgY29uc3QgeyByZWJhbGFuY2VIYW5kbGVyIH0gPSB0aGlzLmZhY2V0cztcbiAgICAgICAgICByZXR1cm4gemNmLm1ha2VJbnZpdGF0aW9uKFxuICAgICAgICAgICAgcmViYWxhbmNlSGFuZGxlcixcbiAgICAgICAgICAgIFwicmViYWxhbmNlXCIsXG4gICAgICAgICAgICB2b2lkIDAsXG4gICAgICAgICAgICBwcm9wb3NhbFNoYXBlcy5yZWJhbGFuY2VcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBmaW5pc2goeyBmYWNldHMsIHN0YXRlIH0pIHtcbiAgICAgICAgZmFjZXRzLnJlcG9ydGVyLnB1Ymxpc2hTdGF0dXMoKTtcbiAgICAgICAgY29uc3QgeyBwb3J0Zm9saW9JZCB9ID0gc3RhdGU7XG4gICAgICAgIGNvbnN0IFthZGRQb3J0Zm9saW9dID0gbWFrZVBvcnRmb2xpb1BhdGgocG9ydGZvbGlvSWQpO1xuICAgICAgICBwdWJsaXNoU3RhdHVzMihbXSwgeyBhZGRQb3J0Zm9saW8gfSk7XG4gICAgICB9XG4gICAgfVxuICApO1xufTtcbmhhcmRlbihwcmVwYXJlUG9ydGZvbGlvS2l0KTtcblxuLyogLi4vaW50ZXJuYWwvc3JjL2hleC5qcyovXG52YXIgZW5jb2RpbmdzID0gQXJyYXkuZnJvbShcbiAgeyBsZW5ndGg6IDI1NiB9LFxuICAoXywgYjMpID0+IChcbiAgICAvKiBXcml0ZSB0aGUgaGV4IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBieXRlLiovXG4gICAgYjMudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKVxuICApXG4pO1xudmFyIGRlY29kaW5ncyA9IG5ldyBNYXAoXG4gIGVuY29kaW5ncy5mbGF0TWFwKChoZXhkaWdpdHMsIGIzKSA9PiB7XG4gICAgY29uc3QgbG8gPSBoZXhkaWdpdHMudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBVUCA9IGhleGRpZ2l0cy50b1VwcGVyQ2FzZSgpO1xuICAgIHJldHVybiBbXG4gICAgICBbbG8sIGIzXSxcbiAgICAgIFtgJHtsb1swXX0ke1VQWzFdfWAsIGIzXSxcbiAgICAgIFtgJHtVUFswXX0ke2xvWzFdfWAsIGIzXSxcbiAgICAgIFtVUCwgYjNdXG4gICAgXTtcbiAgfSlcbik7XG52YXIgbWFrZVBvcnRhYmxlSGV4Q29kZWMgPSAoKSA9PiB7XG4gIGNvbnN0IHBvcnRhYmxlSGV4Q29kZWMgPSB7XG4gICAgZW5jb2RlSGV4OiAoYnVmKSA9PiBBcnJheS5mcm9tKGJ1ZiwgKGIzKSA9PiBlbmNvZGluZ3NbYjNdKS5qb2luKFwiXCIpLFxuICAgIGRlY29kZUhleDogKGhleCkgPT4ge1xuICAgICAgY29uc3QgaW5wdXRMZW4gPSBoZXgubGVuZ3RoO1xuICAgICAgaWYgKGlucHV0TGVuICUgMiAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaGV4IHN0cmluZzogJHtoZXh9YCk7XG4gICAgICB9XG4gICAgICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheShpbnB1dExlbiAvIDIpO1xuICAgICAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IGlucHV0TGVuOyBpMyArPSAyKSB7XG4gICAgICAgIGNvbnN0IGIzID0gZGVjb2RpbmdzLmdldChoZXguc2xpY2UoaTMsIGkzICsgMikpO1xuICAgICAgICBpZiAoYjMgPT09IHZvaWQgMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBoZXggc3RyaW5nOiAke2hleH1gKTtcbiAgICAgICAgfVxuICAgICAgICBidWZbaTMgPj4gMV0gPSBiMztcbiAgICAgIH1cbiAgICAgIHJldHVybiBidWY7XG4gICAgfVxuICB9O1xuICByZXR1cm4gcG9ydGFibGVIZXhDb2RlYztcbn07XG52YXIgbWFrZUJ1ZmZlcmlzaEhleENvZGVjID0gKEJ1ZmZlcmlzaCkgPT4ge1xuICBjb25zdCBhdHRlbnVhdGVkQnVmZmVySGV4Q29kZWMgPSB7XG4gICAgZW5jb2RlSGV4OiAoYnVmKSA9PiAoQnVmZmVyaXNoLmlzQnVmZmVyPy4oYnVmKSA/IGJ1ZiA6IEJ1ZmZlcmlzaC5mcm9tKGJ1ZikpLnRvU3RyaW5nKFwiaGV4XCIpLFxuICAgIGRlY29kZUhleDogKGhleCkgPT4ge1xuICAgICAgY29uc3QgYnVmID0gQnVmZmVyaXNoLmZyb20oaGV4LCBcImhleFwiKTtcbiAgICAgIGNvbnN0IHU4YSA9IG5ldyBVaW50OEFycmF5KFxuICAgICAgICBidWYuYnVmZmVyLFxuICAgICAgICBidWYuYnl0ZU9mZnNldCxcbiAgICAgICAgYnVmLmJ5dGVMZW5ndGggLyBVaW50OEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UXG4gICAgICApO1xuICAgICAgcmV0dXJuIHU4YTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBhdHRlbnVhdGVkQnVmZmVySGV4Q29kZWM7XG59O1xudmFyIHsgZW5jb2RlSGV4LCBkZWNvZGVIZXggfSA9IHR5cGVvZiBCdWZmZXIgPT09IFwidW5kZWZpbmVkXCIgPyBtYWtlUG9ydGFibGVIZXhDb2RlYygpIDogbWFrZUJ1ZmZlcmlzaEhleENvZGVjKEJ1ZmZlcik7XG5cbi8qIC4uL29yY2hlc3RyYXRpb24vc3JjL3V0aWxzL2dtcC5qcyovXG52YXIgaW1wb3J0X2VuY29kaW5nMiA9IF9fdG9FU00ocmVxdWlyZV9idWlsZCgpLCAxKTtcbnZhciBoZXhUb0J5dGVzMiA9IChoZXgpID0+ICgwLCBpbXBvcnRfZW5jb2RpbmcyLmZyb21IZXgpKGhleC5zbGljZSgyKSk7XG52YXIgY29uc3RydWN0Q29udHJhY3RDYWxsID0gKHsgdGFyZ2V0LCBmdW5jdGlvblNpZ25hdHVyZSwgYXJncyB9KSA9PiB7XG4gIGNvbnN0IFtuYW1lLCBwYXJhbXNSYXddID0gZnVuY3Rpb25TaWduYXR1cmUuc3BsaXQoXCIoXCIpO1xuICBjb25zdCBwYXJhbXMgPSBwYXJhbXNSYXcucmVwbGFjZShcIilcIiwgXCJcIikuc3BsaXQoXCIsXCIpLmZpbHRlcihCb29sZWFuKTtcbiAgcmV0dXJuIHtcbiAgICB0YXJnZXQsXG4gICAgZGF0YTogZW5jb2RlRnVuY3Rpb25EYXRhKHtcbiAgICAgIGFiaTogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgaW5wdXRzOiBwYXJhbXMubWFwKCh0eXBlLCBpMykgPT4gKHsgdHlwZSwgbmFtZTogYGFyZyR7aTN9YCB9KSlcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGZ1bmN0aW9uTmFtZTogbmFtZSxcbiAgICAgIGFyZ3NcbiAgICB9KVxuICB9O1xufTtcbnZhciBidWlsZEdNUFBheWxvYWQgPSAoY29udHJhY3RDYWxscywgaWQgPSBcIlwiKSA9PiB7XG4gIGNvbnN0IGFiaUVuY29kZWRDb250cmFjdENhbGxzID0gW107XG4gIGZvciAoY29uc3QgY2FsbCBvZiBjb250cmFjdENhbGxzKSB7XG4gICAgY29uc3QgeyB0YXJnZXQsIGZ1bmN0aW9uU2lnbmF0dXJlLCBhcmdzIH0gPSBjYWxsO1xuICAgIGFiaUVuY29kZWRDb250cmFjdENhbGxzLnB1c2goXG4gICAgICBjb25zdHJ1Y3RDb250cmFjdENhbGwoeyB0YXJnZXQsIGZ1bmN0aW9uU2lnbmF0dXJlLCBhcmdzIH0pXG4gICAgKTtcbiAgfVxuICBjb25zdCBhYmlFbmNvZGVkRGF0YSA9IGVuY29kZUFiaVBhcmFtZXRlcnMoXG4gICAgW1xuICAgICAge1xuICAgICAgICB0eXBlOiBcInR1cGxlXCIsXG4gICAgICAgIG5hbWU6IFwiY2FsbE1lc3NhZ2VcIixcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgIHsgbmFtZTogXCJpZFwiLCB0eXBlOiBcInN0cmluZ1wiIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJjYWxsc1wiLFxuICAgICAgICAgICAgdHlwZTogXCJ0dXBsZVtdXCIsXG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHsgbmFtZTogXCJ0YXJnZXRcIiwgdHlwZTogXCJhZGRyZXNzXCIgfSxcbiAgICAgICAgICAgICAgeyBuYW1lOiBcImRhdGFcIiwgdHlwZTogXCJieXRlc1wiIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICBdLFxuICAgIFt7IGlkLCBjYWxsczogYWJpRW5jb2RlZENvbnRyYWN0Q2FsbHMgfV1cbiAgKTtcbiAgcmV0dXJuIEFycmF5LmZyb20oaGV4VG9CeXRlczIoYWJpRW5jb2RlZERhdGEpKTtcbn07XG52YXIgYnVpbGRHYXNQYXlsb2FkID0gKGdhc0Ftb3VudCkgPT4ge1xuICBjb25zdCBhYmlFbmNvZGVkRGF0YSA9IGVuY29kZUFiaVBhcmFtZXRlcnMoXG4gICAgW3sgdHlwZTogXCJ1aW50MjU2XCIgfV0sXG4gICAgW2dhc0Ftb3VudF1cbiAgKTtcbiAgcmV0dXJuIEFycmF5LmZyb20oaGV4VG9CeXRlczIoYWJpRW5jb2RlZERhdGEpKTtcbn07XG5cbi8qIC4uL29yY2hlc3RyYXRpb24vdG9vbHMvbWFrZS10ZXN0LWFkZHJlc3MuanMqL1xudmFyIGltcG9ydF9iZWNoMzIgPSBfX3RvRVNNKHJlcXVpcmVfZGlzdCgpLCAxKTtcbnZhciBtYWtlVGVzdEFkZHJlc3MgPSAoaW5kZXggPSAwLCBwcmVmaXggPSBcImFnb3JpY1wiLCBieXRlTGVuZ3RoID0gMjApID0+IHtcbiAgY29uc3QgYnl0ZXMyID0gbmV3IFVpbnQ4QXJyYXkoYnl0ZUxlbmd0aCkuZmlsbCgwKTtcbiAgaWYgKGluZGV4ICE9PSAwKSBieXRlczJbMF0gPSBOdW1iZXIoaW5kZXgpO1xuICBjb25zdCB3b3JkcyA9IGltcG9ydF9iZWNoMzIuYmVjaDMyLnRvV29yZHMoYnl0ZXMyKTtcbiAgcmV0dXJuIChcbiAgICAvKiogQHR5cGUge0JlY2gzMkFkZHJlc3N9ICovXG4gICAgaW1wb3J0X2JlY2gzMi5iZWNoMzIuZW5jb2RlKHByZWZpeCwgd29yZHMpXG4gICk7XG59O1xuXG4vKiAuLi9wb3J0Zm9saW8tY29udHJhY3Qvc3JjL3Bvcy1nbXAuZmxvd3MudHMqL1xudmFyIGltcG9ydF9lbmNvZGluZzMgPSBfX3RvRVNNKHJlcXVpcmVfYnVpbGQoKSwgMSk7XG5cbi8qIC4uL3BvcnRmb2xpby1jb250cmFjdC9zcmMvZXZtLWZhY2FkZS50cyovXG52YXIgRVJDMjAgPSB7XG4gIGFwcHJvdmU6IFtcImFkZHJlc3NcIiwgXCJ1aW50MjU2XCJdXG59O1xudmFyIG1ha2VFVk1TZXNzaW9uID0gKCkgPT4ge1xuICBjb25zdCBjYWxscyA9IFtdO1xuICBjb25zdCBmaW5pc2ggPSAoKSA9PiBoYXJkZW4oY2FsbHMpO1xuICBjb25zdCBtYWtlQ29udHJhY3QgPSAodGFyZ2V0LCBpZmFjZSkgPT4ge1xuICAgIGNvbnN0IHN0dWJzID0ge307XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5rZXlzKGlmYWNlKSkge1xuICAgICAgY29uc3QgcHMgPSBpZmFjZVtuYW1lXTtcbiAgICAgIGNvbnN0IGZ1bmN0aW9uU2lnbmF0dXJlID0gYCR7bmFtZX0oJHtwcy5qb2luKFwiLFwiKX0pYDtcbiAgICAgIGNvbnN0IGZuID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgY2FsbHMucHVzaCh7IHRhcmdldCwgYXJncywgZnVuY3Rpb25TaWduYXR1cmUgfSk7XG4gICAgICB9O1xuICAgICAgc3R1YnNbbmFtZV0gPSBmbjtcbiAgICB9XG4gICAgcmV0dXJuIGhhcmRlbihzdHVicyk7XG4gIH07XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIG1ha2VDb250cmFjdCxcbiAgICBmaW5pc2hcbiAgfSk7XG59O1xuXG4vKiAuLi9wb3J0Zm9saW8tY29udHJhY3Qvc3JjL3Jlc29sdmVyL2NvbnN0YW50cy5qcyovXG52YXIgVHhTdGF0dXMgPSAoXG4gIC8qKiBAdHlwZSB7Y29uc3R9ICovXG4gIHtcbiAgICBQRU5ESU5HOiBcInBlbmRpbmdcIixcbiAgICBTVUNDRVNTOiBcInN1Y2Nlc3NcIixcbiAgICBGQUlMRUQ6IFwiZmFpbGVkXCJcbiAgfVxuKTtcbmhhcmRlbihUeFN0YXR1cyk7XG52YXIgVHhUeXBlID0gKFxuICAvKiogQHR5cGUge2NvbnN0fSAqL1xuICB7XG4gICAgQ0NUUF9UT19FVk06IFwiQ0NUUF9UT19FVk1cIixcbiAgICBHTVA6IFwiR01QXCIsXG4gICAgQ0NUUF9UT19OT0JMRTogXCJDQ1RQX1RPX05PQkxFXCJcbiAgfVxuKTtcbmhhcmRlbihUeFR5cGUpO1xuXG4vKiAuLi9wb3J0Zm9saW8tY29udHJhY3Qvc3JjL3Bvcy1nbXAuZmxvd3MudHMqL1xudmFyIHRyYWNlMTMgPSBtYWtlVHJhY2VyKFwiR01QRlwiKTtcbnZhciB7IGtleXM6IGtleXM1IH0gPSBPYmplY3Q7XG52YXIgcHJvdmlkZUVWTUFjY291bnQgPSBhc3luYyAoY2hhaW5OYW1lLCBnbXAsIGxjYSwgY3R4LCBwaykgPT4ge1xuICBhd2FpdCBudWxsO1xuICBjb25zdCBmb3VuZCA9IHBrLm1hbmFnZXIucmVzZXJ2ZUFjY291bnQoY2hhaW5OYW1lKTtcbiAgaWYgKGZvdW5kKSB7XG4gICAgcmV0dXJuIGZvdW5kO1xuICB9XG4gIHRyeSB7XG4gICAgY29uc3QgcElkID0gcGsucmVhZGVyLmdldFBvcnRmb2xpb0lkKCk7XG4gICAgY29uc3QgdHJhY2VDaGFpbiA9IHRyYWNlMTMuc3ViKGBwb3J0Zm9saW8ke3BJZH1gKS5zdWIoY2hhaW5OYW1lKTtcbiAgICBjb25zdCBheGVsYXJJZCA9IGdtcC5heGVsYXJJZHNbY2hhaW5OYW1lXTtcbiAgICBjb25zdCB0YXJnZXQgPSB7XG4gICAgICBheGVsYXJJZCxcbiAgICAgIHJlbW90ZUFkZHJlc3M6IGN0eC5jb250cmFjdHNbY2hhaW5OYW1lXS5mYWN0b3J5XG4gICAgfTtcbiAgICBjb25zdCBmZWUgPSB7IGRlbm9tOiBjdHguZ21wRmVlSW5mby5kZW5vbSwgdmFsdWU6IGdtcC5mZWUgfTtcbiAgICBjb25zdCBmZWVBY2NvdW50ID0gYXdhaXQgY3R4LmNvbnRyYWN0QWNjb3VudDtcbiAgICBjb25zdCBzcmMgPSBmZWVBY2NvdW50LmdldEFkZHJlc3MoKTtcbiAgICB0cmFjZUNoYWluKFwic2VuZCBtYWtlQWNjb3VudENhbGwgQXhlbGFyIGZlZSBmcm9tXCIsIHNyYy52YWx1ZSk7XG4gICAgYXdhaXQgZmVlQWNjb3VudC5zZW5kKGxjYS5nZXRBZGRyZXNzKCksIGZlZSk7XG4gICAgYXdhaXQgc2VuZE1ha2VBY2NvdW50Q2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIGZlZSxcbiAgICAgIGxjYSxcbiAgICAgIGdtcC5jaGFpbixcbiAgICAgIGN0eC5nbXBBZGRyZXNzZXMsXG4gICAgICBnbXAuZXZtR2FzXG4gICAgKTtcbiAgICByZXR1cm4gcGsucmVhZGVyLmdldEdNUEluZm8oY2hhaW5OYW1lKTtcbiAgfSBjYXRjaCAocmVhc29uKSB7XG4gICAgdHJhY2UxMyhcImZhaWxlZCB0byBtYWtlXCIsIGNoYWluTmFtZSwgcmVhc29uKTtcbiAgICBway5tYW5hZ2VyLnJlbGVhc2VBY2NvdW50KGNoYWluTmFtZSwgcmVhc29uKTtcbiAgICB0aHJvdyByZWFzb247XG4gIH1cbn07XG52YXIgVG9rZW5NZXNzZW5nZXIgPSB7XG4gIGRlcG9zaXRGb3JCdXJuOiBbXCJ1aW50MjU2XCIsIFwidWludDMyXCIsIFwiYnl0ZXMzMlwiLCBcImFkZHJlc3NcIl1cbn07XG52YXIgbm9ibGVEb21haW4gPSA0O1xudmFyIGJlY2gzMlRvQnl0ZXMzMiA9IChhZGRyKSA9PiB7XG4gIGlmIChhZGRyID09PSBcImNvc21vczF0ZXN0XCIpIHtcbiAgICB0cmFjZTEzKFwiWFhYIHJlcGxhY2luZyB0ZXN0IGFkZHJlc3MgdG8gY29udmVydCB0byBieXRlczMyXCIpO1xuICAgIGFkZHIgPSBtYWtlVGVzdEFkZHJlc3MoMywgXCJub2JsZVwiKTtcbiAgfVxuICBjb25zdCB7IGRhdGEgfSA9ICgwLCBpbXBvcnRfZW5jb2RpbmczLmZyb21CZWNoMzIpKGFkZHIpO1xuICBjb25zdCBkaCA9IGVuY29kZUhleChkYXRhKTtcbiAgY29uc3QgemVyb2VzTmVlZGVkID0gNjQgLSBkaC5sZW5ndGg7XG4gIGNvbnN0IHBhZGRlZEFkZHJlc3MgPSBcIjBcIi5yZXBlYXQoemVyb2VzTmVlZGVkKSArIGRoO1xuICBjb25zdCBicyA9IGAweCR7cGFkZGVkQWRkcmVzc31gO1xuICByZXR1cm4gYnM7XG59O1xudmFyIENDVFBmcm9tRVZNID0ge1xuICBob3c6IFwiQ0NUUFwiLFxuICBjb25uZWN0aW9uczoga2V5czUoQXhlbGFyQ2hhaW4pLm1hcCgoc3JjKSA9PiAoe1xuICAgIHNyYyxcbiAgICBkZXN0OiBcIm5vYmxlXCJcbiAgfSkpLFxuICBhcHBseTogYXN5bmMgKGN0eCwgYW1vdW50LCBzcmMsIGRlc3QpID0+IHtcbiAgICBjb25zdCB0cmFjZVRyYW5zZmVyID0gdHJhY2UxMy5zdWIoXCJDQ1RQaW5cIikuc3ViKHNyYy5jaGFpbk5hbWUpO1xuICAgIHRyYWNlVHJhbnNmZXIoXCJ0cmFuc2ZlclwiLCBhbW91bnQsIFwiZnJvbVwiLCBzcmMucmVtb3RlQWRkcmVzcyk7XG4gICAgY29uc3QgeyBhZGRyZXNzZXM6IGEyIH0gPSBjdHg7XG4gICAgY29uc3QgbWludFJlY2lwaWVudCA9IGJlY2gzMlRvQnl0ZXMzMihkZXN0LmljYS5nZXRBZGRyZXNzKCkudmFsdWUpO1xuICAgIGNvbnN0IHNlc3Npb24gPSBtYWtlRVZNU2Vzc2lvbigpO1xuICAgIGNvbnN0IHVzZGMgPSBzZXNzaW9uLm1ha2VDb250cmFjdChhMi51c2RjLCBFUkMyMCk7XG4gICAgY29uc3QgdG0gPSBzZXNzaW9uLm1ha2VDb250cmFjdChhMi50b2tlbk1lc3NlbmdlciwgVG9rZW5NZXNzZW5nZXIpO1xuICAgIHVzZGMuYXBwcm92ZShhMi50b2tlbk1lc3NlbmdlciwgYW1vdW50LnZhbHVlKTtcbiAgICB0bS5kZXBvc2l0Rm9yQnVybihhbW91bnQudmFsdWUsIG5vYmxlRG9tYWluLCBtaW50UmVjaXBpZW50LCBhMi51c2RjKTtcbiAgICBjb25zdCBjYWxscyA9IHNlc3Npb24uZmluaXNoKCk7XG4gICAgY29uc3QgeyByZXN1bHQgfSA9IGN0eC5yZXNvbHZlckNsaWVudC5yZWdpc3RlclRyYW5zYWN0aW9uKFxuICAgICAgVHhUeXBlLkNDVFBfVE9fTk9CTEUsXG4gICAgICBjb2VyY2VBY2NvdW50SWQoZGVzdC5pY2EuZ2V0QWRkcmVzcygpKSxcbiAgICAgIGFtb3VudC52YWx1ZVxuICAgICk7XG4gICAgY29uc3QgY29udHJhY3RDYWxsUCA9IHNlbmRHTVBDb250cmFjdENhbGwoY3R4LCBzcmMsIGNhbGxzKTtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChbcmVzdWx0LCBjb250cmFjdENhbGxQXSk7XG4gICAgdHJhY2VUcmFuc2ZlcihcInRyYW5zZmVyIGNvbXBsZXRlLlwiKTtcbiAgfSxcbiAgcmVjb3ZlcjogYXN5bmMgKGN0eCwgYW1vdW50LCBzcmMsIGRlc3QpID0+IHtcbiAgICByZXR1cm4gQ0NUUC5hcHBseShjdHgsIGFtb3VudCwgZGVzdCwgc3JjKTtcbiAgfVxufTtcbmhhcmRlbihDQ1RQZnJvbUVWTSk7XG52YXIgQ0NUUCA9IHtcbiAgaG93OiBcIkNDVFBcIixcbiAgY29ubmVjdGlvbnM6IGtleXM1KEF4ZWxhckNoYWluKS5tYXAoKGRlc3QpID0+ICh7XG4gICAgc3JjOiBcIm5vYmxlXCIsXG4gICAgZGVzdFxuICB9KSksXG4gIGFwcGx5OiBhc3luYyAoY3R4LCBhbW91bnQsIHNyYywgZGVzdCkgPT4ge1xuICAgIGNvbnN0IHRyYWNlVHJhbnNmZXIgPSB0cmFjZTEzLnN1YihcIkNDVFBvdXRcIikuc3ViKGRlc3QuY2hhaW5OYW1lKTtcbiAgICBjb25zdCBkZW5vbUFtb3VudCA9IHsgZGVub206IFwidXVzZGNcIiwgdmFsdWU6IGFtb3VudC52YWx1ZSB9O1xuICAgIGNvbnN0IHsgY2hhaW5JZCwgcmVtb3RlQWRkcmVzcyB9ID0gZGVzdDtcbiAgICB0cmFjZVRyYW5zZmVyKFwidHJhbnNmZXJcIiwgZGVub21BbW91bnQsIFwidG9cIiwgcmVtb3RlQWRkcmVzcyk7XG4gICAgY29uc3QgZGVzdGluYXRpb25BZGRyZXNzID0gYCR7Y2hhaW5JZH06JHtyZW1vdGVBZGRyZXNzfWA7XG4gICAgY29uc3QgeyBpY2EgfSA9IHNyYztcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gY3R4LnJlc29sdmVyQ2xpZW50LnJlZ2lzdGVyVHJhbnNhY3Rpb24oXG4gICAgICBUeFR5cGUuQ0NUUF9UT19FVk0sXG4gICAgICBkZXN0aW5hdGlvbkFkZHJlc3MsXG4gICAgICBhbW91bnQudmFsdWVcbiAgICApO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIGljYS5kZXBvc2l0Rm9yQnVybihkZXN0aW5hdGlvbkFkZHJlc3MsIGRlbm9tQW1vdW50KSxcbiAgICAgIHJlc3VsdFxuICAgIF0pO1xuICAgIHRyYWNlVHJhbnNmZXIoXCJ0cmFuc2ZlciBjb21wbGV0ZS5cIik7XG4gIH0sXG4gIHJlY292ZXI6IGFzeW5jIChfY3R4LCBfYW1vdW50LCBfc3JjLCBfZGVzdCkgPT4ge1xuICAgIHRocm93IEVycm9yKFwiVE9ETyhMdXFpKTogaG93IHRvIHJlY292ZXIgZnJvbSBDQ1RQIHRyYW5zZmVyP1wiKTtcbiAgfVxufTtcbmhhcmRlbihDQ1RQKTtcbnZhciBzZW5kTWFrZUFjY291bnRDYWxsID0gYXN5bmMgKGRlc3QsIGZlZSwgbGNhLCBnbXBDaGFpbiwgZ21wQWRkcmVzc2VzLCBldm1HYXMpID0+IHtcbiAgY29uc3QgeyBBWEVMQVJfR01QLCBBWEVMQVJfR0FTIH0gPSBnbXBBZGRyZXNzZXM7XG4gIGNvbnN0IG1lbW8gPSB7XG4gICAgZGVzdGluYXRpb25fY2hhaW46IGRlc3QuYXhlbGFySWQsXG4gICAgZGVzdGluYXRpb25fYWRkcmVzczogZGVzdC5yZW1vdGVBZGRyZXNzLFxuICAgIHBheWxvYWQ6IGJ1aWxkR2FzUGF5bG9hZChldm1HYXMpLFxuICAgIHR5cGU6IEF4ZWxhckdNUE1lc3NhZ2VUeXBlLkNvbnRyYWN0Q2FsbCxcbiAgICBmZWU6IHsgYW1vdW50OiBTdHJpbmcoZmVlLnZhbHVlKSwgcmVjaXBpZW50OiBBWEVMQVJfR0FTIH1cbiAgfTtcbiAgY29uc3QgeyBjaGFpbklkIH0gPSBhd2FpdCBnbXBDaGFpbi5nZXRDaGFpbkluZm8oKTtcbiAgY29uc3QgZ21wID0geyBjaGFpbklkLCB2YWx1ZTogQVhFTEFSX0dNUCwgZW5jb2Rpbmc6IFwiYmVjaDMyXCIgfTtcbiAgYXdhaXQgbGNhLnRyYW5zZmVyKGdtcCwgZmVlLCB7IG1lbW86IEpTT04uc3RyaW5naWZ5KG1lbW8pIH0pO1xufTtcbnZhciBzZW5kR01QQ29udHJhY3RDYWxsID0gYXN5bmMgKGN0eCwgZ21wQWNjdCwgY2FsbHMpID0+IHtcbiAgY29uc3Qge1xuICAgIGxjYSxcbiAgICBnbXBDaGFpbixcbiAgICBnbXBGZWU6IGZlZSxcbiAgICBnbXBBZGRyZXNzZXMsXG4gICAgcmVzb2x2ZXJDbGllbnQsXG4gICAgYXhlbGFySWRzXG4gIH0gPSBjdHg7XG4gIGNvbnN0IHsgY2hhaW5OYW1lLCByZW1vdGVBZGRyZXNzLCBjaGFpbklkOiBnbXBDaGFpbklkIH0gPSBnbXBBY2N0O1xuICBjb25zdCBheGVsYXJJZCA9IGF4ZWxhcklkc1tjaGFpbk5hbWVdO1xuICBjb25zdCB7IHJlc3VsdCwgdHhJZCB9ID0gcmVzb2x2ZXJDbGllbnQucmVnaXN0ZXJUcmFuc2FjdGlvbihcbiAgICBUeFR5cGUuR01QLFxuICAgIGAke2dtcENoYWluSWR9OiR7cmVtb3RlQWRkcmVzc31gXG4gICk7XG4gIGNvbnN0IHsgQVhFTEFSX0dNUCwgQVhFTEFSX0dBUyB9ID0gZ21wQWRkcmVzc2VzO1xuICBjb25zdCBtZW1vID0ge1xuICAgIGRlc3RpbmF0aW9uX2NoYWluOiBheGVsYXJJZCxcbiAgICBkZXN0aW5hdGlvbl9hZGRyZXNzOiByZW1vdGVBZGRyZXNzLFxuICAgIHBheWxvYWQ6IGJ1aWxkR01QUGF5bG9hZChjYWxscywgdHhJZCksXG4gICAgdHlwZTogQXhlbGFyR01QTWVzc2FnZVR5cGUuQ29udHJhY3RDYWxsLFxuICAgIGZlZTogeyBhbW91bnQ6IFN0cmluZyhmZWUudmFsdWUpLCByZWNpcGllbnQ6IEFYRUxBUl9HQVMgfVxuICB9O1xuICBjb25zdCB7IGNoYWluSWQgfSA9IGF3YWl0IGdtcENoYWluLmdldENoYWluSW5mbygpO1xuICBjb25zdCBnbXAgPSB7XG4gICAgY2hhaW5JZCxcbiAgICB2YWx1ZTogQVhFTEFSX0dNUCxcbiAgICBlbmNvZGluZzogXCJiZWNoMzJcIlxuICB9O1xuICBhd2FpdCBjdHguZmVlQWNjb3VudC5zZW5kKGxjYS5nZXRBZGRyZXNzKCksIGZlZSk7XG4gIGF3YWl0IGxjYS50cmFuc2ZlcihnbXAsIGZlZSwgeyBtZW1vOiBKU09OLnN0cmluZ2lmeShtZW1vKSB9KTtcbiAgYXdhaXQgcmVzdWx0O1xufTtcbnZhciBBYXZlID0ge1xuICBzdXBwbHk6IFtcImFkZHJlc3NcIiwgXCJ1aW50MjU2XCIsIFwiYWRkcmVzc1wiLCBcInVpbnQxNlwiXSxcbiAgd2l0aGRyYXc6IFtcImFkZHJlc3NcIiwgXCJ1aW50MjU2XCIsIFwiYWRkcmVzc1wiXVxufTtcbnZhciBBYXZlUmV3YXJkc0NvbnRyb2xsZXIgPSB7XG4gIGNsYWltQWxsUmV3YXJkc1RvU2VsZjogW1wiYWRkcmVzc1tdXCJdXG59O1xudmFyIEFhdmVQcm90b2NvbCA9IHtcbiAgcHJvdG9jb2w6IFwiQWF2ZVwiLFxuICBjaGFpbnM6IGtleXM1KEF4ZWxhckNoYWluKSxcbiAgc3VwcGx5OiBhc3luYyAoY3R4LCBhbW91bnQsIHNyYykgPT4ge1xuICAgIGNvbnN0IHsgcmVtb3RlQWRkcmVzcyB9ID0gc3JjO1xuICAgIGNvbnN0IHsgYWRkcmVzc2VzOiBhMiB9ID0gY3R4O1xuICAgIGNvbnN0IHNlc3Npb24gPSBtYWtlRVZNU2Vzc2lvbigpO1xuICAgIGNvbnN0IHVzZGMgPSBzZXNzaW9uLm1ha2VDb250cmFjdChhMi51c2RjLCBFUkMyMCk7XG4gICAgY29uc3QgYWF2ZSA9IHNlc3Npb24ubWFrZUNvbnRyYWN0KGEyLmFhdmVQb29sLCBBYXZlKTtcbiAgICB1c2RjLmFwcHJvdmUoYTIuYWF2ZVBvb2wsIGFtb3VudC52YWx1ZSk7XG4gICAgYWF2ZS5zdXBwbHkoYTIudXNkYywgYW1vdW50LnZhbHVlLCByZW1vdGVBZGRyZXNzLCAwKTtcbiAgICBjb25zdCBjYWxscyA9IHNlc3Npb24uZmluaXNoKCk7XG4gICAgYXdhaXQgc2VuZEdNUENvbnRyYWN0Q2FsbChjdHgsIHNyYywgY2FsbHMpO1xuICB9LFxuICB3aXRoZHJhdzogYXN5bmMgKGN0eCwgYW1vdW50LCBkZXN0LCBjbGFpbSkgPT4ge1xuICAgIGNvbnN0IHsgcmVtb3RlQWRkcmVzcyB9ID0gZGVzdDtcbiAgICBjb25zdCB7IGFkZHJlc3NlczogYTIgfSA9IGN0eDtcbiAgICBjb25zdCBzZXNzaW9uID0gbWFrZUVWTVNlc3Npb24oKTtcbiAgICBpZiAoY2xhaW0pIHtcbiAgICAgIGNvbnN0IGFhdmVSZXdhcmRzQ29udHJvbGxlciA9IHNlc3Npb24ubWFrZUNvbnRyYWN0KFxuICAgICAgICBhMi5hYXZlUmV3YXJkc0NvbnRyb2xsZXIsXG4gICAgICAgIEFhdmVSZXdhcmRzQ29udHJvbGxlclxuICAgICAgKTtcbiAgICAgIGFhdmVSZXdhcmRzQ29udHJvbGxlci5jbGFpbUFsbFJld2FyZHNUb1NlbGYoW2EyLmFhdmVVU0RDXSk7XG4gICAgfVxuICAgIGNvbnN0IGFhdmUgPSBzZXNzaW9uLm1ha2VDb250cmFjdChhMi5hYXZlUG9vbCwgQWF2ZSk7XG4gICAgYWF2ZS53aXRoZHJhdyhhMi51c2RjLCBhbW91bnQudmFsdWUsIHJlbW90ZUFkZHJlc3MpO1xuICAgIGNvbnN0IGNhbGxzID0gc2Vzc2lvbi5maW5pc2goKTtcbiAgICBhd2FpdCBzZW5kR01QQ29udHJhY3RDYWxsKGN0eCwgZGVzdCwgY2FsbHMpO1xuICB9XG59O1xudmFyIENvbXBvdW5kID0ge1xuICBzdXBwbHk6IFtcImFkZHJlc3NcIiwgXCJ1aW50MjU2XCJdLFxuICB3aXRoZHJhdzogW1wiYWRkcmVzc1wiLCBcInVpbnQyNTZcIl1cbn07XG52YXIgQ29tcG91bmRSZXdhcmRzQ29udHJvbGxlciA9IHtcbiAgY2xhaW06IFtcImFkZHJlc3NcIiwgXCJhZGRyZXNzXCIsIFwiYm9vbFwiXVxufTtcbnZhciBDb21wb3VuZFByb3RvY29sID0ge1xuICBwcm90b2NvbDogXCJDb21wb3VuZFwiLFxuICBjaGFpbnM6IGtleXM1KEF4ZWxhckNoYWluKSxcbiAgc3VwcGx5OiBhc3luYyAoY3R4LCBhbW91bnQsIHNyYykgPT4ge1xuICAgIGNvbnN0IHsgYWRkcmVzc2VzOiBhMiB9ID0gY3R4O1xuICAgIGNvbnN0IHNlc3Npb24gPSBtYWtlRVZNU2Vzc2lvbigpO1xuICAgIGNvbnN0IHVzZGMgPSBzZXNzaW9uLm1ha2VDb250cmFjdChhMi51c2RjLCBFUkMyMCk7XG4gICAgY29uc3QgY29tcG91bmQgPSBzZXNzaW9uLm1ha2VDb250cmFjdChhMi5jb21wb3VuZCwgQ29tcG91bmQpO1xuICAgIHVzZGMuYXBwcm92ZShhMi5jb21wb3VuZCwgYW1vdW50LnZhbHVlKTtcbiAgICBjb21wb3VuZC5zdXBwbHkoYTIudXNkYywgYW1vdW50LnZhbHVlKTtcbiAgICBjb25zdCBjYWxscyA9IHNlc3Npb24uZmluaXNoKCk7XG4gICAgYXdhaXQgc2VuZEdNUENvbnRyYWN0Q2FsbChjdHgsIHNyYywgY2FsbHMpO1xuICB9LFxuICB3aXRoZHJhdzogYXN5bmMgKGN0eCwgYW1vdW50LCBkZXN0LCBjbGFpbSkgPT4ge1xuICAgIGNvbnN0IHsgYWRkcmVzc2VzOiBhMiB9ID0gY3R4O1xuICAgIGNvbnN0IHNlc3Npb24gPSBtYWtlRVZNU2Vzc2lvbigpO1xuICAgIGlmIChjbGFpbSkge1xuICAgICAgY29uc3QgY29tcG91bmRSZXdhcmRzQ29udHJvbGxlciA9IHNlc3Npb24ubWFrZUNvbnRyYWN0KFxuICAgICAgICBhMi5jb21wb3VuZFJld2FyZHNDb250cm9sbGVyLFxuICAgICAgICBDb21wb3VuZFJld2FyZHNDb250cm9sbGVyXG4gICAgICApO1xuICAgICAgY29tcG91bmRSZXdhcmRzQ29udHJvbGxlci5jbGFpbShhMi5jb21wb3VuZCwgZGVzdC5yZW1vdGVBZGRyZXNzLCB0cnVlKTtcbiAgICB9XG4gICAgY29uc3QgY29tcG91bmQgPSBzZXNzaW9uLm1ha2VDb250cmFjdChhMi5jb21wb3VuZCwgQ29tcG91bmQpO1xuICAgIGNvbXBvdW5kLndpdGhkcmF3KGEyLnVzZGMsIGFtb3VudC52YWx1ZSk7XG4gICAgY29uc3QgY2FsbHMgPSBzZXNzaW9uLmZpbmlzaCgpO1xuICAgIGF3YWl0IHNlbmRHTVBDb250cmFjdENhbGwoY3R4LCBkZXN0LCBjYWxscyk7XG4gIH1cbn07XG52YXIgQmVlZnlWYXVsdCA9IHtcbiAgZGVwb3NpdDogW1widWludDI1NlwiXSxcbiAgd2l0aGRyYXc6IFtcInVpbnQyNTZcIl1cbn07XG52YXIgQmVlZnlQcm90b2NvbCA9IHtcbiAgcHJvdG9jb2w6IFwiQmVlZnlcIixcbiAgY2hhaW5zOiBrZXlzNShBeGVsYXJDaGFpbiksXG4gIHN1cHBseTogYXN5bmMgKGN0eCwgYW1vdW50LCBzcmMpID0+IHtcbiAgICBjb25zdCB7IGFkZHJlc3NlczogYTIsIHBvb2xLZXkgfSA9IGN0eDtcbiAgICBjb25zdCBzZXNzaW9uID0gbWFrZUVWTVNlc3Npb24oKTtcbiAgICBjb25zdCB1c2RjID0gc2Vzc2lvbi5tYWtlQ29udHJhY3QoYTIudXNkYywgRVJDMjApO1xuICAgIGNvbnN0IHZhdWx0QWRkcmVzcyA9IGEyW3Bvb2xLZXldIHx8IGFzc2VydC5mYWlsKHJlZGFjdGVkYEJlZWZ5IHBvb2wga2V5ICR7cXVvdGUocG9vbEtleSl9IG5vdCBmb3VuZCBpbiBhZGRyZXNzZXNgKTtcbiAgICBjb25zdCB2YXVsdCA9IHNlc3Npb24ubWFrZUNvbnRyYWN0KHZhdWx0QWRkcmVzcywgQmVlZnlWYXVsdCk7XG4gICAgdXNkYy5hcHByb3ZlKHZhdWx0QWRkcmVzcywgYW1vdW50LnZhbHVlKTtcbiAgICB2YXVsdC5kZXBvc2l0KGFtb3VudC52YWx1ZSk7XG4gICAgY29uc3QgY2FsbHMgPSBzZXNzaW9uLmZpbmlzaCgpO1xuICAgIGF3YWl0IHNlbmRHTVBDb250cmFjdENhbGwoY3R4LCBzcmMsIGNhbGxzKTtcbiAgfSxcbiAgd2l0aGRyYXc6IGFzeW5jIChjdHgsIGFtb3VudCwgZGVzdCkgPT4ge1xuICAgIGNvbnN0IHsgYWRkcmVzc2VzOiBhMiwgcG9vbEtleSB9ID0gY3R4O1xuICAgIGNvbnN0IHNlc3Npb24gPSBtYWtlRVZNU2Vzc2lvbigpO1xuICAgIGNvbnN0IHZhdWx0QWRkcmVzcyA9IGEyW3Bvb2xLZXldIHx8IGFzc2VydC5mYWlsKHJlZGFjdGVkYEJlZWZ5IHBvb2wga2V5ICR7cXVvdGUocG9vbEtleSl9IG5vdCBmb3VuZCBpbiBhZGRyZXNzZXNgKTtcbiAgICBjb25zdCB2YXVsdCA9IHNlc3Npb24ubWFrZUNvbnRyYWN0KHZhdWx0QWRkcmVzcywgQmVlZnlWYXVsdCk7XG4gICAgdmF1bHQud2l0aGRyYXcoYW1vdW50LnZhbHVlKTtcbiAgICBjb25zdCBjYWxscyA9IHNlc3Npb24uZmluaXNoKCk7XG4gICAgYXdhaXQgc2VuZEdNUENvbnRyYWN0Q2FsbChjdHgsIGRlc3QsIGNhbGxzKTtcbiAgfVxufTtcblxuLyogLi4vY29zbWljLXByb3RvL2Rpc3QvY29kZWdlbi9ub2JsZS9kb2xsYXIvdmF1bHRzL3YxL3ZhdWx0cy5qcyovXG52YXIgVmF1bHRUeXBlO1xuIShmdW5jdGlvbihlMikge1xuICBlMltlMi5VTlNQRUNJRklFRCA9IDBdID0gXCJVTlNQRUNJRklFRFwiLCBlMltlMi5TVEFLRUQgPSAxXSA9IFwiU1RBS0VEXCIsIGUyW2UyLkZMRVhJQkxFID0gMl0gPSBcIkZMRVhJQkxFXCIsIGUyW2UyLlVOUkVDT0dOSVpFRCA9IC0xXSA9IFwiVU5SRUNPR05JWkVEXCI7XG59KShWYXVsdFR5cGUgfHwgKFZhdWx0VHlwZSA9IHt9KSk7XG5mdW5jdGlvbiB2YXVsdFR5cGVGcm9tSlNPTihlMikge1xuICBzd2l0Y2ggKGUyKSB7XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgXCJVTlNQRUNJRklFRFwiOlxuICAgICAgcmV0dXJuIFZhdWx0VHlwZS5VTlNQRUNJRklFRDtcbiAgICBjYXNlIDE6XG4gICAgY2FzZSBcIlNUQUtFRFwiOlxuICAgICAgcmV0dXJuIFZhdWx0VHlwZS5TVEFLRUQ7XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgXCJGTEVYSUJMRVwiOlxuICAgICAgcmV0dXJuIFZhdWx0VHlwZS5GTEVYSUJMRTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFZhdWx0VHlwZS5VTlJFQ09HTklaRUQ7XG4gIH1cbn1cbmZ1bmN0aW9uIHZhdWx0VHlwZVRvSlNPTihlMikge1xuICBzd2l0Y2ggKGUyKSB7XG4gICAgY2FzZSBWYXVsdFR5cGUuVU5TUEVDSUZJRUQ6XG4gICAgICByZXR1cm4gXCJVTlNQRUNJRklFRFwiO1xuICAgIGNhc2UgVmF1bHRUeXBlLlNUQUtFRDpcbiAgICAgIHJldHVybiBcIlNUQUtFRFwiO1xuICAgIGNhc2UgVmF1bHRUeXBlLkZMRVhJQkxFOlxuICAgICAgcmV0dXJuIFwiRkxFWElCTEVcIjtcbiAgICBjYXNlIFZhdWx0VHlwZS5VTlJFQ09HTklaRUQ6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBcIlVOUkVDT0dOSVpFRFwiO1xuICB9XG59XG52YXIgUGF1c2VkVHlwZTtcbiEoZnVuY3Rpb24oZTIpIHtcbiAgZTJbZTIuTk9ORSA9IDBdID0gXCJOT05FXCIsIGUyW2UyLkxPQ0sgPSAxXSA9IFwiTE9DS1wiLCBlMltlMi5VTkxPQ0sgPSAyXSA9IFwiVU5MT0NLXCIsIGUyW2UyLkFMTCA9IDNdID0gXCJBTExcIiwgZTJbZTIuVU5SRUNPR05JWkVEID0gLTFdID0gXCJVTlJFQ09HTklaRURcIjtcbn0pKFBhdXNlZFR5cGUgfHwgKFBhdXNlZFR5cGUgPSB7fSkpO1xuXG4vKiAuLi9jb3NtaWMtcHJvdG8vZGlzdC9jb2RlZ2VuL25vYmxlL2RvbGxhci92YXVsdHMvdjEvdHguanMqL1xudmFyIE1zZ0xvY2sgPSB7IHR5cGVVcmw6IFwiL25vYmxlLmRvbGxhci52YXVsdHMudjEuTXNnTG9ja1wiLCBlbmNvZGU6IChlMiwgbzIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+IChcIlwiICE9PSBlMi5zaWduZXIgJiYgbzIudWludDMyKDEwKS5zdHJpbmcoZTIuc2lnbmVyKSwgMCAhPT0gZTIudmF1bHQgJiYgbzIudWludDMyKDE2KS5pbnQzMihlMi52YXVsdCksIFwiXCIgIT09IGUyLmFtb3VudCAmJiBvMi51aW50MzIoMjYpLnN0cmluZyhlMi5hbW91bnQpLCBvMiksIGRlY29kZShlMiwgbzIpIHtcbiAgY29uc3QgdDUgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCBzMyA9IHZvaWQgMCA9PT0gbzIgPyB0NS5sZW4gOiB0NS5wb3MgKyBvMjtcbiAgY29uc3QgbjIgPSB7IHNpZ25lcjogXCJcIiwgdmF1bHQ6IDAsIGFtb3VudDogXCJcIiB9O1xuICBmb3IgKDsgdDUucG9zIDwgczM7ICkge1xuICAgIGNvbnN0IGUzID0gdDUudWludDMyKCk7XG4gICAgc3dpdGNoIChlMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBuMi5zaWduZXIgPSB0NS5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIG4yLnZhdWx0ID0gdDUuaW50MzIoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIG4yLmFtb3VudCA9IHQ1LnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHQ1LnNraXBUeXBlKDcgJiBlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuMjtcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IHNpZ25lcjogaXNTZXQoZTIuc2lnbmVyKSA/IFN0cmluZyhlMi5zaWduZXIpIDogXCJcIiwgdmF1bHQ6IGlzU2V0KGUyLnZhdWx0KSA/IHZhdWx0VHlwZUZyb21KU09OKGUyLnZhdWx0KSA6IC0xLCBhbW91bnQ6IGlzU2V0KGUyLmFtb3VudCkgPyBTdHJpbmcoZTIuYW1vdW50KSA6IFwiXCIgfSksIHRvSlNPTihlMikge1xuICBjb25zdCBvMiA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5zaWduZXIgJiYgKG8yLnNpZ25lciA9IGUyLnNpZ25lciksIHZvaWQgMCAhPT0gZTIudmF1bHQgJiYgKG8yLnZhdWx0ID0gdmF1bHRUeXBlVG9KU09OKGUyLnZhdWx0KSksIHZvaWQgMCAhPT0gZTIuYW1vdW50ICYmIChvMi5hbW91bnQgPSBlMi5hbW91bnQpLCBvMjtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IG8yID0geyBzaWduZXI6IFwiXCIsIHZhdWx0OiAwLCBhbW91bnQ6IFwiXCIgfTtcbiAgcmV0dXJuIG8yLnNpZ25lciA9IGUyLnNpZ25lciA/PyBcIlwiLCBvMi52YXVsdCA9IGUyLnZhdWx0ID8/IDAsIG8yLmFtb3VudCA9IGUyLmFtb3VudCA/PyBcIlwiLCBvMjtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBNc2dMb2NrLmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gTXNnTG9jay5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL25vYmxlLmRvbGxhci52YXVsdHMudjEuTXNnTG9ja1wiLCB2YWx1ZTogTXNnTG9jay5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG52YXIgTXNnVW5sb2NrID0geyB0eXBlVXJsOiBcIi9ub2JsZS5kb2xsYXIudmF1bHRzLnYxLk1zZ1VubG9ja1wiLCBlbmNvZGU6IChlMiwgbzIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+IChcIlwiICE9PSBlMi5zaWduZXIgJiYgbzIudWludDMyKDEwKS5zdHJpbmcoZTIuc2lnbmVyKSwgMCAhPT0gZTIudmF1bHQgJiYgbzIudWludDMyKDE2KS5pbnQzMihlMi52YXVsdCksIFwiXCIgIT09IGUyLmFtb3VudCAmJiBvMi51aW50MzIoMjYpLnN0cmluZyhlMi5hbW91bnQpLCBvMiksIGRlY29kZShlMiwgbzIpIHtcbiAgY29uc3QgdDUgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCBzMyA9IHZvaWQgMCA9PT0gbzIgPyB0NS5sZW4gOiB0NS5wb3MgKyBvMjtcbiAgY29uc3QgbjIgPSB7IHNpZ25lcjogXCJcIiwgdmF1bHQ6IDAsIGFtb3VudDogXCJcIiB9O1xuICBmb3IgKDsgdDUucG9zIDwgczM7ICkge1xuICAgIGNvbnN0IGUzID0gdDUudWludDMyKCk7XG4gICAgc3dpdGNoIChlMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBuMi5zaWduZXIgPSB0NS5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIG4yLnZhdWx0ID0gdDUuaW50MzIoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIG4yLmFtb3VudCA9IHQ1LnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHQ1LnNraXBUeXBlKDcgJiBlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuMjtcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IHNpZ25lcjogaXNTZXQoZTIuc2lnbmVyKSA/IFN0cmluZyhlMi5zaWduZXIpIDogXCJcIiwgdmF1bHQ6IGlzU2V0KGUyLnZhdWx0KSA/IHZhdWx0VHlwZUZyb21KU09OKGUyLnZhdWx0KSA6IC0xLCBhbW91bnQ6IGlzU2V0KGUyLmFtb3VudCkgPyBTdHJpbmcoZTIuYW1vdW50KSA6IFwiXCIgfSksIHRvSlNPTihlMikge1xuICBjb25zdCBvMiA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5zaWduZXIgJiYgKG8yLnNpZ25lciA9IGUyLnNpZ25lciksIHZvaWQgMCAhPT0gZTIudmF1bHQgJiYgKG8yLnZhdWx0ID0gdmF1bHRUeXBlVG9KU09OKGUyLnZhdWx0KSksIHZvaWQgMCAhPT0gZTIuYW1vdW50ICYmIChvMi5hbW91bnQgPSBlMi5hbW91bnQpLCBvMjtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IG8yID0geyBzaWduZXI6IFwiXCIsIHZhdWx0OiAwLCBhbW91bnQ6IFwiXCIgfTtcbiAgcmV0dXJuIG8yLnNpZ25lciA9IGUyLnNpZ25lciA/PyBcIlwiLCBvMi52YXVsdCA9IGUyLnZhdWx0ID8/IDAsIG8yLmFtb3VudCA9IGUyLmFtb3VudCA/PyBcIlwiLCBvMjtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBNc2dVbmxvY2suZGVjb2RlKGUyLnZhbHVlKSwgdG9Qcm90bzogKGUyKSA9PiBNc2dVbmxvY2suZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9ub2JsZS5kb2xsYXIudmF1bHRzLnYxLk1zZ1VubG9ja1wiLCB2YWx1ZTogTXNnVW5sb2NrLmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcblxuLyogLi4vY29zbWljLXByb3RvL2Rpc3QvY29kZWdlbi9ub2JsZS9zd2FwL3YxL3N3YXAuanMqL1xuZnVuY3Rpb24gaTIoKSB7XG4gIHJldHVybiB7IHBvb2xJZDogQmlnSW50KDApLCBkZW5vbVRvOiBcIlwiIH07XG59XG52YXIgUm91dGUgPSB7IHR5cGVVcmw6IFwiL25vYmxlLnN3YXAudjEuUm91dGVcIiwgZW5jb2RlOiAobzIsIGUyID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAobzIucG9vbElkICE9PSBCaWdJbnQoMCkgJiYgZTIudWludDMyKDgpLnVpbnQ2NChvMi5wb29sSWQpLCBcIlwiICE9PSBvMi5kZW5vbVRvICYmIGUyLnVpbnQzMigxOCkuc3RyaW5nKG8yLmRlbm9tVG8pLCBlMiksIGRlY29kZShvMiwgdDUpIHtcbiAgY29uc3QgbjIgPSBvMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IG8yIDogbmV3IEJpbmFyeVJlYWRlcihvMik7XG4gIGxldCBkID0gdm9pZCAwID09PSB0NSA/IG4yLmxlbiA6IG4yLnBvcyArIHQ1O1xuICBjb25zdCByNiA9IGkyKCk7XG4gIGZvciAoOyBuMi5wb3MgPCBkOyApIHtcbiAgICBjb25zdCBvMyA9IG4yLnVpbnQzMigpO1xuICAgIHN3aXRjaCAobzMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcjYucG9vbElkID0gbjIudWludDY0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByNi5kZW5vbVRvID0gbjIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbjIuc2tpcFR5cGUoNyAmIG8zKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHI2O1xufSwgZnJvbUpTT046IChvMikgPT4gKHsgcG9vbElkOiBpc1NldChvMi5wb29sSWQpID8gQmlnSW50KG8yLnBvb2xJZC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgZGVub21UbzogaXNTZXQobzIuZGVub21UbykgPyBTdHJpbmcobzIuZGVub21UbykgOiBcIlwiIH0pLCB0b0pTT04obzIpIHtcbiAgY29uc3QgZTIgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gbzIucG9vbElkICYmIChlMi5wb29sSWQgPSAobzIucG9vbElkIHx8IEJpZ0ludCgwKSkudG9TdHJpbmcoKSksIHZvaWQgMCAhPT0gbzIuZGVub21UbyAmJiAoZTIuZGVub21UbyA9IG8yLmRlbm9tVG8pLCBlMjtcbn0sIGZyb21QYXJ0aWFsKG8yKSB7XG4gIGNvbnN0IGUyID0gaTIoKTtcbiAgcmV0dXJuIGUyLnBvb2xJZCA9IHZvaWQgMCAhPT0gbzIucG9vbElkICYmIG51bGwgIT09IG8yLnBvb2xJZCA/IEJpZ0ludChvMi5wb29sSWQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIGUyLmRlbm9tVG8gPSBvMi5kZW5vbVRvID8/IFwiXCIsIGUyO1xufSwgZnJvbVByb3RvTXNnOiAobzIpID0+IFJvdXRlLmRlY29kZShvMi52YWx1ZSksIHRvUHJvdG86IChvMikgPT4gUm91dGUuZW5jb2RlKG8yKS5maW5pc2goKSwgdG9Qcm90b01zZzogKG8yKSA9PiAoeyB0eXBlVXJsOiBcIi9ub2JsZS5zd2FwLnYxLlJvdXRlXCIsIHZhbHVlOiBSb3V0ZS5lbmNvZGUobzIpLmZpbmlzaCgpIH0pIH07XG5cbi8qIC4uL2Nvc21pYy1wcm90by9kaXN0L2NvZGVnZW4vbm9ibGUvc3dhcC92MS9hbGdvcml0aG0uanMqL1xudmFyIEFsZ29yaXRobTtcbiEoZnVuY3Rpb24oRTIpIHtcbiAgRTJbRTIuVU5TUEVDSUZJRUQgPSAwXSA9IFwiVU5TUEVDSUZJRURcIiwgRTJbRTIuU1RBQkxFU1dBUCA9IDFdID0gXCJTVEFCTEVTV0FQXCIsIEUyW0UyLlBFUkZFQ1RQUklDRSA9IDJdID0gXCJQRVJGRUNUUFJJQ0VcIiwgRTJbRTIuVU5SRUNPR05JWkVEID0gLTFdID0gXCJVTlJFQ09HTklaRURcIjtcbn0pKEFsZ29yaXRobSB8fCAoQWxnb3JpdGhtID0ge30pKTtcblxuLyogLi4vY29zbWljLXByb3RvL2Rpc3QvY29kZWdlbi9ub2JsZS9zd2FwL3YxL3R4LmpzKi9cbmZ1bmN0aW9uIHAyKCkge1xuICByZXR1cm4geyBzaWduZXI6IFwiXCIsIGFtb3VudDogQ29pbi5mcm9tUGFydGlhbCh7fSksIHJvdXRlczogW10sIG1pbjogQ29pbi5mcm9tUGFydGlhbCh7fSkgfTtcbn1cbnZhciBNc2dTd2FwID0geyB0eXBlVXJsOiBcIi9ub2JsZS5zd2FwLnYxLk1zZ1N3YXBcIiwgZW5jb2RlKGUyLCByNiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkge1xuICBcIlwiICE9PSBlMi5zaWduZXIgJiYgcjYudWludDMyKDEwKS5zdHJpbmcoZTIuc2lnbmVyKSwgdm9pZCAwICE9PSBlMi5hbW91bnQgJiYgQ29pbi5lbmNvZGUoZTIuYW1vdW50LCByNi51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gIGZvciAoY29uc3QgbzIgb2YgZTIucm91dGVzKSBSb3V0ZS5lbmNvZGUobzIsIHI2LnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gZTIubWluICYmIENvaW4uZW5jb2RlKGUyLm1pbiwgcjYudWludDMyKDM0KS5mb3JrKCkpLmxkZWxpbSgpLCByNjtcbn0sIGRlY29kZShlMiwgcjYpIHtcbiAgY29uc3QgbjIgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCB0NSA9IHZvaWQgMCA9PT0gcjYgPyBuMi5sZW4gOiBuMi5wb3MgKyByNjtcbiAgY29uc3QgYTIgPSBwMigpO1xuICBmb3IgKDsgbjIucG9zIDwgdDU7ICkge1xuICAgIGNvbnN0IGUzID0gbjIudWludDMyKCk7XG4gICAgc3dpdGNoIChlMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBhMi5zaWduZXIgPSBuMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGEyLmFtb3VudCA9IENvaW4uZGVjb2RlKG4yLCBuMi51aW50MzIoKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBhMi5yb3V0ZXMucHVzaChSb3V0ZS5kZWNvZGUobjIsIG4yLnVpbnQzMigpKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICBhMi5taW4gPSBDb2luLmRlY29kZShuMiwgbjIudWludDMyKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG4yLnNraXBUeXBlKDcgJiBlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhMjtcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IHNpZ25lcjogaXNTZXQoZTIuc2lnbmVyKSA/IFN0cmluZyhlMi5zaWduZXIpIDogXCJcIiwgYW1vdW50OiBpc1NldChlMi5hbW91bnQpID8gQ29pbi5mcm9tSlNPTihlMi5hbW91bnQpIDogdm9pZCAwLCByb3V0ZXM6IEFycmF5LmlzQXJyYXkoZTI/LnJvdXRlcykgPyBlMi5yb3V0ZXMubWFwKCgobzIpID0+IFJvdXRlLmZyb21KU09OKG8yKSkpIDogW10sIG1pbjogaXNTZXQoZTIubWluKSA/IENvaW4uZnJvbUpTT04oZTIubWluKSA6IHZvaWQgMCB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IHI2ID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLnNpZ25lciAmJiAocjYuc2lnbmVyID0gZTIuc2lnbmVyKSwgdm9pZCAwICE9PSBlMi5hbW91bnQgJiYgKHI2LmFtb3VudCA9IGUyLmFtb3VudCA/IENvaW4udG9KU09OKGUyLmFtb3VudCkgOiB2b2lkIDApLCBlMi5yb3V0ZXMgPyByNi5yb3V0ZXMgPSBlMi5yb3V0ZXMubWFwKCgobzIpID0+IG8yID8gUm91dGUudG9KU09OKG8yKSA6IHZvaWQgMCkpIDogcjYucm91dGVzID0gW10sIHZvaWQgMCAhPT0gZTIubWluICYmIChyNi5taW4gPSBlMi5taW4gPyBDb2luLnRvSlNPTihlMi5taW4pIDogdm9pZCAwKSwgcjY7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCByNiA9IHAyKCk7XG4gIHJldHVybiByNi5zaWduZXIgPSBlMi5zaWduZXIgPz8gXCJcIiwgcjYuYW1vdW50ID0gdm9pZCAwICE9PSBlMi5hbW91bnQgJiYgbnVsbCAhPT0gZTIuYW1vdW50ID8gQ29pbi5mcm9tUGFydGlhbChlMi5hbW91bnQpIDogdm9pZCAwLCByNi5yb3V0ZXMgPSBlMi5yb3V0ZXM/Lm1hcCgoKG8yKSA9PiBSb3V0ZS5mcm9tUGFydGlhbChvMikpKSB8fCBbXSwgcjYubWluID0gdm9pZCAwICE9PSBlMi5taW4gJiYgbnVsbCAhPT0gZTIubWluID8gQ29pbi5mcm9tUGFydGlhbChlMi5taW4pIDogdm9pZCAwLCByNjtcbn0sIGZyb21Qcm90b01zZzogKG8yKSA9PiBNc2dTd2FwLmRlY29kZShvMi52YWx1ZSksIHRvUHJvdG86IChvMikgPT4gTXNnU3dhcC5lbmNvZGUobzIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAobzIpID0+ICh7IHR5cGVVcmw6IFwiL25vYmxlLnN3YXAudjEuTXNnU3dhcFwiLCB2YWx1ZTogTXNnU3dhcC5lbmNvZGUobzIpLmZpbmlzaCgpIH0pIH07XG5cbi8qIC4uL3BvcnRmb2xpby1jb250cmFjdC9zcmMvcG9zLXVzZG4uZmxvd3MudHMqL1xudmFyIEFueTQgPSBDb2RlY0hlbHBlcihBbnkpO1xudmFyIE1zZ0xvY2syID0gQ29kZWNIZWxwZXIoTXNnTG9jayk7XG52YXIgTXNnVW5sb2NrMiA9IENvZGVjSGVscGVyKE1zZ1VubG9jayk7XG52YXIgTXNnU3dhcDIgPSBDb2RlY0hlbHBlcihNc2dTd2FwKTtcbnZhciB0cmFjZTE0ID0gbWFrZVRyYWNlcihcIlVTRE5GXCIpO1xudmFyIG1ha2VTd2FwTG9ja01lc3NhZ2VzID0gKG5vYmxlQWRkciwgdXNkY0luLCB7XG4gIHBvb2xJZCA9IDBuLFxuICBkZW5vbSA9IFwidXVzZGNcIixcbiAgZGVub21UbyA9IFwidXVzZG5cIixcbiAgdmF1bHQgPSB2b2lkIDAsXG4gIHVzZG5PdXQgPSB2b2lkIDBcbn0gPSB7fSkgPT4ge1xuICBjb25zdCBtc2dTd2FwID0gTXNnU3dhcDIuZnJvbVBhcnRpYWwoe1xuICAgIHNpZ25lcjogbm9ibGVBZGRyLnZhbHVlLFxuICAgIGFtb3VudDogeyBkZW5vbSwgYW1vdW50OiBgJHt1c2RjSW59YCB9LFxuICAgIHJvdXRlczogW3sgcG9vbElkLCBkZW5vbVRvIH1dLFxuICAgIG1pbjogeyBkZW5vbTogZGVub21UbywgYW1vdW50OiBgJHt1c2RuT3V0IHx8IHVzZGNJbn1gIH1cbiAgfSk7XG4gIGlmICh2YXVsdCA9PT0gdm9pZCAwKSB7XG4gICAgY29uc3QgcHJvdG9NZXNzYWdlczIgPSBbQW55NC50b0pTT04oTXNnU3dhcDIudG9Qcm90b01zZyhtc2dTd2FwKSldO1xuICAgIHJldHVybiB7IG1zZ1N3YXAsIHByb3RvTWVzc2FnZXM6IHByb3RvTWVzc2FnZXMyIH07XG4gIH1cbiAgY29uc3QgbXNnTG9jayA9IE1zZ0xvY2syLmZyb21QYXJ0aWFsKHtcbiAgICBzaWduZXI6IG5vYmxlQWRkci52YWx1ZSxcbiAgICB2YXVsdCxcbiAgICBhbW91bnQ6IGAke3VzZG5PdXR9YFxuICB9KTtcbiAgY29uc3QgcHJvdG9NZXNzYWdlcyA9IFtcbiAgICBBbnk0LnRvSlNPTihNc2dTd2FwMi50b1Byb3RvTXNnKG1zZ1N3YXApKSxcbiAgICBBbnk0LnRvSlNPTihNc2dMb2NrMi50b1Byb3RvTXNnKG1zZ0xvY2spKVxuICBdO1xuICByZXR1cm4geyBtc2dTd2FwLCBtc2dMb2NrLCBwcm90b01lc3NhZ2VzIH07XG59O1xudmFyIG1ha2VVbmxvY2tTd2FwTWVzc2FnZXMgPSAobm9ibGVBZGRyLCB1c2RjT3V0LCB7XG4gIHBvb2xJZCA9IDBuLFxuICBkZW5vbSA9IFwidXVzZG5cIixcbiAgZGVub21UbyA9IFwidXVzZGNcIixcbiAgdmF1bHQgPSAxLFxuICAvKiBWYXVsdFR5cGUuU1RBS0VEKi9cbiAgdXNkbk91dCA9IHZvaWQgMFxufSA9IHt9KSA9PiB7XG4gIGNvbnN0IG1zZ1N3YXAgPSBNc2dTd2FwMi5mcm9tUGFydGlhbCh7XG4gICAgc2lnbmVyOiBub2JsZUFkZHIudmFsdWUsXG4gICAgYW1vdW50OiB7IGRlbm9tLCBhbW91bnQ6IGAke3VzZG5PdXQgfHwgdXNkY091dH1gIH0sXG4gICAgcm91dGVzOiBbeyBwb29sSWQsIGRlbm9tVG8gfV0sXG4gICAgbWluOiB7IGRlbm9tOiBkZW5vbVRvLCBhbW91bnQ6IGAke3VzZG5PdXQgfHwgdXNkY091dH1gIH1cbiAgfSk7XG4gIGlmICh1c2RuT3V0ID09PSB2b2lkIDApIHtcbiAgICBjb25zdCBwcm90b01lc3NhZ2VzMiA9IFtBbnk0LnRvSlNPTihNc2dTd2FwMi50b1Byb3RvTXNnKG1zZ1N3YXApKV07XG4gICAgcmV0dXJuIHsgbXNnU3dhcCwgcHJvdG9NZXNzYWdlczogcHJvdG9NZXNzYWdlczIgfTtcbiAgfVxuICBjb25zdCBtc2dVbmxvY2sgPSBNc2dVbmxvY2syLmZyb21QYXJ0aWFsKHtcbiAgICBzaWduZXI6IG5vYmxlQWRkci52YWx1ZSxcbiAgICB2YXVsdCxcbiAgICBhbW91bnQ6IGAke3VzZG5PdXR9YFxuICB9KTtcbiAgY29uc3QgcHJvdG9NZXNzYWdlcyA9IFtcbiAgICBBbnk0LnRvSlNPTihNc2dVbmxvY2syLnRvUHJvdG9Nc2cobXNnVW5sb2NrKSksXG4gICAgQW55NC50b0pTT04oTXNnU3dhcDIudG9Qcm90b01zZyhtc2dTd2FwKSlcbiAgXTtcbiAgcmV0dXJuIHsgbXNnVW5sb2NrLCBtc2dTd2FwLCBwcm90b01lc3NhZ2VzIH07XG59O1xudmFyIHByb3RvY29sVVNETiA9IHtcbiAgcHJvdG9jb2w6IFwiVVNETlwiLFxuICBjaGFpbnM6IFtcIm5vYmxlXCJdLFxuICBzdXBwbHk6IGFzeW5jIChjdHgsIGFtb3VudCwgc3JjKSA9PiB7XG4gICAgY29uc3QgeyB1c2RuT3V0LCB2YXVsdCB9ID0gY3R4O1xuICAgIGNvbnN0IHsgaWNhIH0gPSBzcmM7XG4gICAgY29uc3Qgbm9ibGVBZGRyID0gaWNhLmdldEFkZHJlc3MoKTtcbiAgICBjb25zdCB7IG1zZ1N3YXAsIG1zZ0xvY2ssIHByb3RvTWVzc2FnZXMgfSA9IG1ha2VTd2FwTG9ja01lc3NhZ2VzKFxuICAgICAgbm9ibGVBZGRyLFxuICAgICAgYW1vdW50LnZhbHVlLFxuICAgICAgeyB1c2RuT3V0LCB2YXVsdCB9XG4gICAgKTtcbiAgICB0cmFjZTE0KFwiZXhlY3V0aW5nXCIsIFttc2dTd2FwLCBtc2dMb2NrXS5maWx0ZXIoQm9vbGVhbikpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGljYS5leGVjdXRlRW5jb2RlZFR4KHByb3RvTWVzc2FnZXMpO1xuICAgIHRyYWNlMTQoXCJzdXBwbHkgcmVzdWx0XCIsIHJlc3VsdCk7XG4gIH0sXG4gIHdpdGhkcmF3OiBhc3luYyAoY3R4LCBhbW91bnQsIGRlc3QsIGNsYWltKSA9PiB7XG4gICAgaWYgKGNsYWltKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjbGFpbWluZyBVU0ROIGlzIG5vdCBzdXBwb3J0ZWRcIik7XG4gICAgfVxuICAgIGNvbnN0IHsgdXNkbk91dCB9ID0gY3R4O1xuICAgIGNvbnN0IHsgaWNhIH0gPSBkZXN0O1xuICAgIGNvbnN0IGFkZHJlc3MgPSBpY2EuZ2V0QWRkcmVzcygpO1xuICAgIGNvbnN0IHsgbXNnVW5sb2NrLCBtc2dTd2FwLCBwcm90b01lc3NhZ2VzIH0gPSBtYWtlVW5sb2NrU3dhcE1lc3NhZ2VzKFxuICAgICAgYWRkcmVzcyxcbiAgICAgIGFtb3VudC52YWx1ZSxcbiAgICAgIHsgdXNkbk91dCB9XG4gICAgKTtcbiAgICB0cmFjZTE0KFwiZXhlY3V0aW5nXCIsIFttc2dVbmxvY2ssIG1zZ1N3YXBdLmZpbHRlcihCb29sZWFuKSk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaWNhLmV4ZWN1dGVFbmNvZGVkVHgocHJvdG9NZXNzYWdlcyk7XG4gICAgdHJhY2UxNChcIndpdGhkcmF3IHJlc3VsdFwiLCByZXN1bHQpO1xuICB9XG59O1xuaGFyZGVuKHByb3RvY29sVVNETik7XG52YXIgYWdvcmljVG9Ob2JsZSA9IHtcbiAgaG93OiBcIklCQyB0byBOb2JsZVwiLFxuICBjb25uZWN0aW9uczogW3sgc3JjOiBcImFnb3JpY1wiLCBkZXN0OiBcIm5vYmxlXCIgfV0sXG4gIGFwcGx5OiBhc3luYyAoY3R4LCBhbW91bnQsIHNyYywgZGVzdCkgPT4ge1xuICAgIGNvbnN0IHsgZGVub20gfSA9IGN0eC51c2RjO1xuICAgIGNvbnN0IGRlbm9tQW1vdW50ID0geyB2YWx1ZTogYW1vdW50LnZhbHVlLCBkZW5vbSB9O1xuICAgIGF3YWl0IHNyYy5sY2EudHJhbnNmZXIoZGVzdC5pY2EuZ2V0QWRkcmVzcygpLCBkZW5vbUFtb3VudCk7XG4gIH0sXG4gIHJlY292ZXI6IGFzeW5jIChjdHgsIGFtb3VudCwgc3JjLCBkZXN0KSA9PiB7XG4gICAgY29uc3Qgbm9ibGVBbW91bnQgPSB7IHZhbHVlOiBhbW91bnQudmFsdWUsIGRlbm9tOiBcInV1c2RjXCIgfTtcbiAgICBhd2FpdCBkZXN0LmljYS50cmFuc2ZlcihzcmMubGNhLmdldEFkZHJlc3MoKSwgbm9ibGVBbW91bnQpO1xuICB9XG59O1xuaGFyZGVuKGFnb3JpY1RvTm9ibGUpO1xudmFyIG5vYmxlVG9BZ29yaWMgPSB7XG4gIGhvdzogXCJJQkMgZnJvbSBOb2JsZVwiLFxuICBjb25uZWN0aW9uczogW3sgc3JjOiBcIm5vYmxlXCIsIGRlc3Q6IFwiYWdvcmljXCIgfV0sXG4gIGFwcGx5OiBhc3luYyAoX2N0eCwgYW1vdW50LCBzcmMsIGRlc3QpID0+IHtcbiAgICBjb25zdCBub2JsZUFtb3VudCA9IHsgdmFsdWU6IGFtb3VudC52YWx1ZSwgZGVub206IFwidXVzZGNcIiB9O1xuICAgIGF3YWl0IHNyYy5pY2EudHJhbnNmZXIoZGVzdC5sY2EuZ2V0QWRkcmVzcygpLCBub2JsZUFtb3VudCk7XG4gIH0sXG4gIHJlY292ZXI6IGFzeW5jIChjdHgsIGFtb3VudCwgc3JjLCBkZXN0KSA9PiB7XG4gICAgY29uc3QgeyBkZW5vbSB9ID0gY3R4LnVzZGM7XG4gICAgY29uc3QgZGVub21BbW91bnQgPSB7IHZhbHVlOiBhbW91bnQudmFsdWUsIGRlbm9tIH07XG4gICAgYXdhaXQgZGVzdC5sY2EudHJhbnNmZXIoc3JjLmljYS5nZXRBZGRyZXNzKCksIGRlbm9tQW1vdW50KTtcbiAgfVxufTtcbmhhcmRlbihhZ29yaWNUb05vYmxlKTtcblxuLyogLi4vcG9ydGZvbGlvLWNvbnRyYWN0L3NyYy9wb3J0Zm9saW8uZmxvd3MudHMqL1xudmFyIHsga2V5czoga2V5czYsIGVudHJpZXM6IGVudHJpZXMxMCB9ID0gT2JqZWN0O1xudmFyIG1vdmVTdGF0dXMgPSAoeyBhcHBseTogX2EsIHJlY292ZXI6IF9yLCAuLi5kYXRhIH0pID0+IGRhdGE7XG52YXIgZXJybXNnID0gKGVycikgPT4gXCJtZXNzYWdlXCIgaW4gZXJyID8gZXJyLm1lc3NhZ2UgOiBgJHtlcnJ9YDtcbnZhciB0cmFja0Zsb3cgPSBhc3luYyAocmVwb3J0ZXIsIG1vdmVzLCBmbG93SWQsIHRyYWNlRmxvdywgYWNjb3VudHMpID0+IHtcbiAgYXdhaXQgbnVsbDtcbiAgcmVwb3J0ZXIucHVibGlzaEZsb3dTdGVwcyhcbiAgICBmbG93SWQsXG4gICAgbW92ZXMubWFwKCh7IGFwcGx5OiBfYSwgcmVjb3ZlcjogX3IsIC4uLmRhdGEgfSkgPT4gZGF0YSlcbiAgKTtcbiAgbGV0IHN0ZXAgPSAxO1xuICB0cnkge1xuICAgIGZvciAoY29uc3QgbW92ZSBvZiBtb3Zlcykge1xuICAgICAgY29uc3QgdHJhY2VTdGVwID0gdHJhY2VGbG93LnN1Yihgc3RlcCR7c3RlcH1gKTtcbiAgICAgIHRyYWNlU3RlcChcInN0YXJ0aW5nXCIsIG1vdmVTdGF0dXMobW92ZSkpO1xuICAgICAgY29uc3QgeyBhbW91bnQsIGhvdyB9ID0gbW92ZTtcbiAgICAgIHJlcG9ydGVyLnB1Ymxpc2hGbG93U3RhdHVzKGZsb3dJZCwgeyBzdGF0ZTogXCJydW5cIiwgc3RlcCwgaG93IH0pO1xuICAgICAgY29uc3QgeyBzcmNQb3MsIGRlc3RQb3MgfSA9IGF3YWl0IG1vdmUuYXBwbHkoYWNjb3VudHMsIHRyYWNlU3RlcCk7XG4gICAgICB0cmFjZVN0ZXAoXCJkb25lOlwiLCBob3cpO1xuICAgICAgaWYgKHNyY1Bvcykge1xuICAgICAgICBzcmNQb3MucmVjb3JkVHJhbnNmZXJPdXQoYW1vdW50KTtcbiAgICAgIH1cbiAgICAgIGlmIChkZXN0UG9zKSB7XG4gICAgICAgIGRlc3RQb3MucmVjb3JkVHJhbnNmZXJJbihhbW91bnQpO1xuICAgICAgfVxuICAgICAgc3RlcCArPSAxO1xuICAgIH1cbiAgICByZXBvcnRlci5wdWJsaXNoRmxvd1N0YXR1cyhmbG93SWQsIHsgc3RhdGU6IFwiZG9uZVwiIH0pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0cmFjZUZsb3coXCJcXHUyNkEwXFx1RkUwRiBzdGVwXCIsIHN0ZXAsIFwiIGZhaWxlZFwiLCBlcnIpO1xuICAgIGNvbnN0IGZhaWx1cmUgPSBtb3Zlc1tzdGVwIC0gMV07XG4gICAgY29uc3QgZXJyU3RlcCA9IHN0ZXA7XG4gICAgd2hpbGUgKHN0ZXAgPiAxKSB7XG4gICAgICBzdGVwIC09IDE7XG4gICAgICBjb25zdCB0cmFjZVN0ZXAgPSB0cmFjZUZsb3cuc3ViKGBzdGVwJHtzdGVwfWApO1xuICAgICAgY29uc3QgbW92ZSA9IG1vdmVzW3N0ZXAgLSAxXTtcbiAgICAgIGNvbnN0IGhvdyA9IGB1bndpbmQ6ICR7bW92ZS5ob3d9YDtcbiAgICAgIHJlcG9ydGVyLnB1Ymxpc2hGbG93U3RhdHVzKGZsb3dJZCwgeyBzdGF0ZTogXCJ1bmRvXCIsIHN0ZXAsIGhvdyB9KTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IG1vdmUucmVjb3ZlcihhY2NvdW50cywgdHJhY2VTdGVwKTtcbiAgICAgIH0gY2F0Y2ggKGVyckluVW53aW5kKSB7XG4gICAgICAgIHRyYWNlU3RlcChcIlxcdTI2QTBcXHVGRTBGIHVud2luZCBmYWlsZWRcIiwgZXJySW5VbndpbmQpO1xuICAgICAgICBjb25zdCB7IGRlc3Q6IHdoZXJlIH0gPSBtb3ZlO1xuICAgICAgICByZXBvcnRlci5wdWJsaXNoRmxvd1N0YXR1cyhmbG93SWQsIHtcbiAgICAgICAgICBzdGF0ZTogXCJmYWlsXCIsXG4gICAgICAgICAgc3RlcCxcbiAgICAgICAgICBob3csXG4gICAgICAgICAgZXJyb3I6IGVycm1zZyhlcnJJblVud2luZCksXG4gICAgICAgICAgd2hlcmVcbiAgICAgICAgfSk7XG4gICAgICAgIHRocm93IGVyckluVW53aW5kO1xuICAgICAgfVxuICAgIH1cbiAgICByZXBvcnRlci5wdWJsaXNoRmxvd1N0YXR1cyhmbG93SWQsIHtcbiAgICAgIHN0YXRlOiBcImZhaWxcIixcbiAgICAgIHN0ZXA6IGVyclN0ZXAsXG4gICAgICBob3c6IGZhaWx1cmUuaG93LFxuICAgICAgZXJyb3I6IGVycm1zZyhlcnIpXG4gICAgfSk7XG4gICAgdGhyb3cgZXJyO1xuICB9XG59O1xudmFyIHByb3ZpZGVDb3Ntb3NBY2NvdW50ID0gYXN5bmMgKG9yY2gsIGNoYWluTmFtZSwga2l0LCB0cmFjZVBvcnRmb2xpbykgPT4ge1xuICBhd2FpdCBudWxsO1xuICBjb25zdCB0cmFjZUNoYWluID0gdHJhY2VQb3J0Zm9saW8uc3ViKGNoYWluTmFtZSk7XG4gIGNvbnN0IHByb21pc2VNYXliZSA9IGtpdC5tYW5hZ2VyLnJlc2VydmVBY2NvdW50KGNoYWluTmFtZSk7XG4gIGlmIChwcm9taXNlTWF5YmUpIHtcbiAgICByZXR1cm4gcHJvbWlzZU1heWJlO1xuICB9XG4gIHRyeSB7XG4gICAgc3dpdGNoIChjaGFpbk5hbWUpIHtcbiAgICAgIGNhc2UgXCJub2JsZVwiOiB7XG4gICAgICAgIGNvbnN0IG5vYmxlQ2hhaW4gPSBhd2FpdCBvcmNoLmdldENoYWluKFwibm9ibGVcIik7XG4gICAgICAgIHRyYWNlQ2hhaW4oXCJtYWtlQWNjb3VudCgpXCIpO1xuICAgICAgICBjb25zdCBpY2EgPSBhd2FpdCBub2JsZUNoYWluLm1ha2VBY2NvdW50KCk7XG4gICAgICAgIHRyYWNlQ2hhaW4oXCJyZXN1bHQ6XCIsIGNvZXJjZUFjY291bnRJZChpY2EuZ2V0QWRkcmVzcygpKSk7XG4gICAgICAgIGNvbnN0IGluZm8gPSB7XG4gICAgICAgICAgbmFtZXNwYWNlOiBcImNvc21vc1wiLFxuICAgICAgICAgIGNoYWluTmFtZTogXCJub2JsZVwiLFxuICAgICAgICAgIGljYVxuICAgICAgICB9O1xuICAgICAgICBraXQubWFuYWdlci5yZXNvbHZlQWNjb3VudChpbmZvKTtcbiAgICAgICAgcmV0dXJuIGluZm87XG4gICAgICB9XG4gICAgICBjYXNlIFwiYWdvcmljXCI6IHtcbiAgICAgICAgY29uc3QgYWdvcmljQ2hhaW4gPSBhd2FpdCBvcmNoLmdldENoYWluKFwiYWdvcmljXCIpO1xuICAgICAgICBjb25zdCBsY2EgPSBhd2FpdCBhZ29yaWNDaGFpbi5tYWtlQWNjb3VudCgpO1xuICAgICAgICBjb25zdCBsY2FJbiA9IGF3YWl0IGFnb3JpY0NoYWluLm1ha2VBY2NvdW50KCk7XG4gICAgICAgIGNvbnN0IHJlZyA9IGF3YWl0IGxjYS5tb25pdG9yVHJhbnNmZXJzKGtpdC50YXApO1xuICAgICAgICB0cmFjZUNoYWluKFwiTW9uaXRvcmluZyB0cmFuc2ZlcnMgZm9yXCIsIGxjYS5nZXRBZGRyZXNzKCkudmFsdWUpO1xuICAgICAgICBjb25zdCBpbmZvID0ge1xuICAgICAgICAgIG5hbWVzcGFjZTogXCJjb3Ntb3NcIixcbiAgICAgICAgICBjaGFpbk5hbWUsXG4gICAgICAgICAgbGNhLFxuICAgICAgICAgIGxjYUluLFxuICAgICAgICAgIHJlZ1xuICAgICAgICB9O1xuICAgICAgICBraXQubWFuYWdlci5yZXNvbHZlQWNjb3VudChpbmZvKTtcbiAgICAgICAgcmV0dXJuIGluZm87XG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBFcnJvcihcInVucmVhY2hhYmxlXCIpO1xuICAgIH1cbiAgfSBjYXRjaCAocmVhc29uKSB7XG4gICAgdHJhY2VDaGFpbihcImZhaWxlZCB0byBtYWtlXCIsIHJlYXNvbik7XG4gICAga2l0Lm1hbmFnZXIucmVsZWFzZUFjY291bnQoY2hhaW5OYW1lLCByZWFzb24pO1xuICAgIHRocm93IHJlYXNvbjtcbiAgfVxufTtcbnZhciBnZXRBc3NldFBsYWNlUmVmS2luZCA9IChyZWYpID0+IHtcbiAgaWYgKGtleXM2KFBvb2xQbGFjZXMpLmluY2x1ZGVzKHJlZikpIHJldHVybiBcInBvc1wiO1xuICBpZiAoZ2V0S2V5d29yZE9mUGxhY2VSZWYocmVmKSkgcmV0dXJuIFwic2VhdFwiO1xuICBpZiAoZ2V0Q2hhaW5OYW1lT2ZQbGFjZVJlZihyZWYpKSByZXR1cm4gXCJhY2NvdW50SWRcIjtcbiAgaWYgKHJlZiA9PT0gXCIrYWdvcmljXCIpIHJldHVybiBcImRlcG9zaXRBZGRyXCI7XG4gIHRocm93IHRocm93UmVkYWN0ZWRgYmFkIHJlZjogJHtyZWZ9YDtcbn07XG52YXIgd2F5RnJvbVNyY1RvRGVzYyA9IChtb3ZlRGVzYykgPT4ge1xuICBjb25zdCB7IHNyYyB9ID0gbW92ZURlc2M7XG4gIGNvbnN0IHsgZGVzdCB9ID0gbW92ZURlc2M7XG4gIGNvbnN0IHNyY0tpbmQgPSBnZXRBc3NldFBsYWNlUmVmS2luZChzcmMpO1xuICBzd2l0Y2ggKHNyY0tpbmQpIHtcbiAgICBjYXNlIFwicG9zXCI6IHtcbiAgICAgIGNvbnN0IGRlc3ROYW1lID0gZ2V0Q2hhaW5OYW1lT2ZQbGFjZVJlZihkZXN0KTtcbiAgICAgIGlmICghZGVzdE5hbWUpXG4gICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgc3JjIHBvcyBtdXN0IGhhdmUgYWNjb3VudCBhcyBkZXN0ICR7cXVvdGUobW92ZURlc2MpfWA7XG4gICAgICBjb25zdCBwb29sS2V5ID0gc3JjO1xuICAgICAgY29uc3QgeyBwcm90b2NvbCB9ID0gUG9vbFBsYWNlc1twb29sS2V5XTtcbiAgICAgIGNvbnN0IGZlZVJlcXVpcmVkID0gW1wiQ29tcG91bmRcIiwgXCJBYXZlXCIsIFwiQmVlZnlcIl07XG4gICAgICBtb3ZlRGVzYy5mZWUgfHwgIWZlZVJlcXVpcmVkLmluY2x1ZGVzKHByb3RvY29sKSB8fCB0aHJvd1JlZGFjdGVkYG1pc3NpbmcgZmVlICR7cXVvdGUobW92ZURlc2MpfWA7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBob3c6IHByb3RvY29sLFxuICAgICAgICBwb29sS2V5LFxuICAgICAgICBkZXN0OiBkZXN0TmFtZSxcbiAgICAgICAgY2xhaW06IG1vdmVEZXNjLmNsYWltXG4gICAgICB9O1xuICAgIH1cbiAgICBjYXNlIFwic2VhdFwiOlxuICAgICAgW1wiQGFnb3JpY1wiLCBcIithZ29yaWNcIl0uaW5jbHVkZXMoZGVzdCkgfHwgdGhyb3dSZWRhY3RlZGBzcmMgc2VhdCBtdXN0IGhhdmUgYWdvcmljIGFjY291bnQgYXMgZGVzdCAke3F1b3RlKG1vdmVEZXNjKX1gO1xuICAgICAgcmV0dXJuIHsgaG93OiBcImxvY2FsVHJhbnNmZXJcIiB9O1xuICAgIGNhc2UgXCJkZXBvc2l0QWRkclwiOlxuICAgICAgZGVzdCA9PT0gXCJAYWdvcmljXCIgfHwgdGhyb3dSZWRhY3RlZGBzcmMgK2Fnb3JpYyBtdXN0IGhhdmUgZGVzdCBAYWdvcmljYDtcbiAgICAgIHJldHVybiB7IGhvdzogXCJzZW5kXCIgfTtcbiAgICBjYXNlIFwiYWNjb3VudElkXCI6IHtcbiAgICAgIGNvbnN0IHNyY05hbWUgPSBnZXRDaGFpbk5hbWVPZlBsYWNlUmVmKHNyYyk7XG4gICAgICBhc3NlcnQyKHNyY05hbWUpO1xuICAgICAgY29uc3QgZGVzdEtpbmQgPSBnZXRBc3NldFBsYWNlUmVmS2luZChkZXN0KTtcbiAgICAgIHN3aXRjaCAoZGVzdEtpbmQpIHtcbiAgICAgICAgY2FzZSBcInNlYXRcIjpcbiAgICAgICAgICByZXR1cm4geyBob3c6IFwid2l0aGRyYXdUb1NlYXRcIiB9O1xuICAgICAgICAvKiBYWFggY2hlY2sgdGhhdCBzcmMgaXMgYWdvcmljKi9cbiAgICAgICAgY2FzZSBcImFjY291bnRJZFwiOiB7XG4gICAgICAgICAgY29uc3QgZGVzdE5hbWUgPSBnZXRDaGFpbk5hbWVPZlBsYWNlUmVmKGRlc3QpO1xuICAgICAgICAgIGFzc2VydDIoZGVzdE5hbWUpO1xuICAgICAgICAgIGlmIChrZXlzNihBeGVsYXJDaGFpbikuaW5jbHVkZXMoZGVzdE5hbWUpKSB7XG4gICAgICAgICAgICBzcmNOYW1lID09PSBcIm5vYmxlXCIgfHwgdGhyb3dSZWRhY3RlZGBzcmMgZm9yICR7cXVvdGUoZGVzdE5hbWUpfSBtdXN0IGJlIG5vYmxlYDtcbiAgICAgICAgICAgIHJldHVybiB7IGhvdzogXCJDQ1RQXCIsIGRlc3Q6IGRlc3ROYW1lIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChrZXlzNihBeGVsYXJDaGFpbikuaW5jbHVkZXMoc3JjTmFtZSkpIHtcbiAgICAgICAgICAgIGRlc3ROYW1lID09PSBcIm5vYmxlXCIgfHwgdGhyb3dSZWRhY3RlZGBkZXN0IGZvciAke3F1b3RlKHNyY05hbWUpfSBtdXN0IGJlIG5vYmxlYDtcbiAgICAgICAgICAgIHJldHVybiB7IGhvdzogXCJDQ1RQXCIsIHNyYzogc3JjTmFtZSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3JjTmFtZSA9PT0gXCJhZ29yaWNcIiAmJiBkZXN0TmFtZSA9PT0gXCJub2JsZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4geyBob3c6IFwiSUJDXCIsIHNyYzogc3JjTmFtZSwgZGVzdDogZGVzdE5hbWUgfTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHNyY05hbWUgPT09IFwibm9ibGVcIiAmJiBkZXN0TmFtZSA9PT0gXCJhZ29yaWNcIikge1xuICAgICAgICAgICAgcmV0dXJuIHsgaG93OiBcIklCQ1wiLCBzcmM6IHNyY05hbWUsIGRlc3Q6IGRlc3ROYW1lIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgbm8gcm91dGUgYmV0d2VlbiBjaGFpbnM6ICR7cXVvdGUobW92ZURlc2MpfWA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJwb3NcIjoge1xuICAgICAgICAgIGNvbnN0IHBvb2xLZXkgPSBkZXN0O1xuICAgICAgICAgIGNvbnN0IHsgcHJvdG9jb2wgfSA9IFBvb2xQbGFjZXNbcG9vbEtleV07XG4gICAgICAgICAgcmV0dXJuIHsgaG93OiBwcm90b2NvbCwgcG9vbEtleSwgc3JjOiBzcmNOYW1lIH07XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYHVucmVhY2hhYmxlOiR7ZGVzdEtpbmR9ICR7ZGVzdH1gO1xuICAgICAgfVxuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGB1bnJlYWNoYWJsZTogJHtzcmNLaW5kfSAke3NyY31gO1xuICB9XG59O1xudmFyIHN0ZXBGbG93ID0gYXN5bmMgKG9yY2gsIGN0eCwgc2VhdCwgbW92ZXMsIGtpdCwgdHJhY2VQKSA9PiB7XG4gIGNvbnN0IHRvZG8gPSBbXTtcbiAgY29uc3QgbWFrZUVWTUN0eCA9IGFzeW5jIChjaGFpbiwgbW92ZSwgbGNhKSA9PiB7XG4gICAgY29uc3QgW2F4ZWxhciwgZmVlQWNjb3VudF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICBvcmNoLmdldENoYWluKFwiYXhlbGFyXCIpLFxuICAgICAgY3R4LmNvbnRyYWN0QWNjb3VudFxuICAgIF0pO1xuICAgIGNvbnN0IHsgZGVub20gfSA9IGN0eC5nbXBGZWVJbmZvO1xuICAgIGNvbnN0IGZlZSA9IHsgZGVub20sIHZhbHVlOiBtb3ZlLmZlZSA/IG1vdmUuZmVlLnZhbHVlIDogMG4gfTtcbiAgICBjb25zdCB7IGF4ZWxhcklkcywgZ21wQWRkcmVzc2VzIH0gPSBjdHg7XG4gICAgY29uc3QgZXZtQ3R4ID0gaGFyZGVuKHtcbiAgICAgIGFkZHJlc3NlczogY3R4LmNvbnRyYWN0c1tjaGFpbl0sXG4gICAgICBsY2EsXG4gICAgICBnbXBGZWU6IGZlZSxcbiAgICAgIGdtcENoYWluOiBheGVsYXIsXG4gICAgICBheGVsYXJJZHMsXG4gICAgICBnbXBBZGRyZXNzZXMsXG4gICAgICByZXNvbHZlckNsaWVudDogY3R4LnJlc29sdmVyQ2xpZW50LFxuICAgICAgZmVlQWNjb3VudFxuICAgIH0pO1xuICAgIHJldHVybiBldm1DdHg7XG4gIH07XG4gIGNvbnN0IG1ha2VFVk1Qb29sQ3R4ID0gYXN5bmMgKGNoYWluLCBtb3ZlLCBsY2EsIHBvb2xLZXkpID0+IHtcbiAgICBjb25zdCBldm1DdHggPSBhd2FpdCBtYWtlRVZNQ3R4KGNoYWluLCBtb3ZlLCBsY2EpO1xuICAgIHJldHVybiBoYXJkZW4oeyAuLi5ldm1DdHgsIHBvb2xLZXkgfSk7XG4gIH07XG4gIGNvbnN0IG1ha2VFVk1Qcm90b2NvbFN0ZXAgPSAod2F5LCBtb3ZlKSA9PiB7XG4gICAgY29uc3QgY2hhaW5OYW1lID0gXCJzcmNcIiBpbiB3YXkgPyB3YXkuc3JjIDogd2F5LmRlc3Q7XG4gICAgYXNzZXJ0MihrZXlzNihBeGVsYXJDaGFpbikuaW5jbHVkZXMoY2hhaW5OYW1lKSk7XG4gICAgY29uc3QgZXZtQ2hhaW4gPSBjaGFpbk5hbWU7XG4gICAgY29uc3QgcEltcGwgPSB7XG4gICAgICBDb21wb3VuZDogQ29tcG91bmRQcm90b2NvbCxcbiAgICAgIEFhdmU6IEFhdmVQcm90b2NvbCxcbiAgICAgIEJlZWZ5OiBCZWVmeVByb3RvY29sXG4gICAgfVt3YXkuaG93XTtcbiAgICBjb25zdCB7IGFtb3VudCB9ID0gbW92ZTtcbiAgICByZXR1cm4gaGFyZGVuKHtcbiAgICAgIGhvdzogd2F5LmhvdyxcbiAgICAgIGFtb3VudCxcbiAgICAgIHNyYzogbW92ZS5zcmMsXG4gICAgICBkZXN0OiBtb3ZlLmRlc3QsXG4gICAgICBhcHBseTogYXN5bmMgKHsgW2V2bUNoYWluXTogZ0luZm8sIGFnb3JpYzogYWdvcmljMiB9KSA9PiB7XG4gICAgICAgIGFzc2VydDIoZ0luZm8sIGV2bUNoYWluKTtcbiAgICAgICAgY29uc3QgYWNjb3VudElkID0gYCR7Z0luZm8uY2hhaW5JZH06JHtnSW5mby5yZW1vdGVBZGRyZXNzfWA7XG4gICAgICAgIGNvbnN0IHsgcG9vbEtleSwgaG93IH0gPSB3YXk7XG4gICAgICAgIGNvbnN0IHBvcyA9IGtpdC5tYW5hZ2VyLnByb3ZpZGVQb3NpdGlvbihwb29sS2V5LCBob3csIGFjY291bnRJZCk7XG4gICAgICAgIGNvbnN0IHsgbGNhIH0gPSBhZ29yaWMyO1xuICAgICAgICBjb25zdCBldm1DdHggPSBhd2FpdCBtYWtlRVZNUG9vbEN0eChldm1DaGFpbiwgbW92ZSwgbGNhLCBwb29sS2V5KTtcbiAgICAgICAgYXdhaXQgbnVsbDtcbiAgICAgICAgaWYgKFwic3JjXCIgaW4gd2F5KSB7XG4gICAgICAgICAgYXdhaXQgcEltcGwuc3VwcGx5KGV2bUN0eCwgYW1vdW50LCBnSW5mbyk7XG4gICAgICAgICAgcmV0dXJuIHsgZGVzdFBvczogcG9zIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXdhaXQgcEltcGwud2l0aGRyYXcoZXZtQ3R4LCBhbW91bnQsIGdJbmZvLCB3YXkuY2xhaW0pO1xuICAgICAgICAgIHJldHVybiB7IHNyY1BvczogcG9zIH07XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZWNvdmVyOiBhc3luYyAoeyBbZXZtQ2hhaW5dOiBnSW5mbyB9KSA9PiB7XG4gICAgICAgIGFzc2VydDIoZ0luZm8sIGV2bUNoYWluKTtcbiAgICAgICAgYXdhaXQgbnVsbDtcbiAgICAgICAgaWYgKFwic3JjXCIgaW4gd2F5KSB7XG4gICAgICAgICAgYXNzZXJ0Mi5mYWlsKFwibGFzdCBzdGVwLiBjYW5ub3QgcmVjb3ZlclwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB7IGxjYSB9ID0gYWdvcmljO1xuICAgICAgICAgIGNvbnN0IHsgcG9vbEtleSB9ID0gd2F5O1xuICAgICAgICAgIGNvbnN0IGV2bUN0eCA9IGF3YWl0IG1ha2VFVk1Qb29sQ3R4KGV2bUNoYWluLCBtb3ZlLCBsY2EsIHBvb2xLZXkpO1xuICAgICAgICAgIGF3YWl0IHBJbXBsLnN1cHBseShldm1DdHgsIGFtb3VudCwgZ0luZm8pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IHsgcmVwb3J0ZXIgfSA9IGtpdDtcbiAgY29uc3QgZmxvd0lkID0gcmVwb3J0ZXIuYWxsb2NhdGVGbG93SWQoKTtcbiAgY29uc3QgdHJhY2VGbG93ID0gdHJhY2VQLnN1YihgZmxvdyR7Zmxvd0lkfWApO1xuICB0cmFjZUZsb3coXCJjaGVja2luZ1wiLCBtb3Zlcy5sZW5ndGgsIFwibW92ZXNcIik7XG4gIGZvciAoY29uc3QgW2kzLCBtb3ZlXSBvZiBlbnRyaWVzMTAobW92ZXMpKSB7XG4gICAgY29uc3QgdHJhY2VNb3ZlID0gdHJhY2VQLnN1YihgbW92ZSR7aTN9YCk7XG4gICAgY29uc3Qgd2F5ID0gd2F5RnJvbVNyY1RvRGVzYyhtb3ZlKTtcbiAgICBjb25zdCB7IGFtb3VudCB9ID0gbW92ZTtcbiAgICBzd2l0Y2ggKHdheS5ob3cpIHtcbiAgICAgIGNhc2UgXCJsb2NhbFRyYW5zZmVyXCI6IHtcbiAgICAgICAgY29uc3Qgc3JjID0geyBzZWF0LCBrZXl3b3JkOiBcIkRlcG9zaXRcIiB9O1xuICAgICAgICBjb25zdCBhbW91bnRzID0gaGFyZGVuKHsgRGVwb3NpdDogYW1vdW50IH0pO1xuICAgICAgICB0b2RvLnB1c2goe1xuICAgICAgICAgIGhvdzogXCJsb2NhbFRyYW5zZmVyXCIsXG4gICAgICAgICAgc3JjOiBtb3ZlLnNyYyxcbiAgICAgICAgICBkZXN0OiBtb3ZlLmRlc3QsXG4gICAgICAgICAgYW1vdW50LFxuICAgICAgICAgIGFwcGx5OiBhc3luYyAoeyBhZ29yaWM6IGFnb3JpYzIgfSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBsY2EsIGxjYUluIH0gPSBhZ29yaWMyO1xuICAgICAgICAgICAgY29uc3QgYWNjb3VudCA9IG1vdmUuZGVzdCA9PT0gXCIrYWdvcmljXCIgPyBsY2FJbiA6IGxjYTtcbiAgICAgICAgICAgIGF3YWl0IGN0eC56b2VUb29scy5sb2NhbFRyYW5zZmVyKHNyYy5zZWF0LCBhY2NvdW50LCBhbW91bnRzKTtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlY292ZXI6IGFzeW5jICh7IGFnb3JpYzogYWdvcmljMiB9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGxjYSwgbGNhSW4gfSA9IGFnb3JpYzI7XG4gICAgICAgICAgICBjb25zdCBhY2NvdW50ID0gbW92ZS5kZXN0ID09PSBcIithZ29yaWNcIiA/IGxjYUluIDogbGNhO1xuICAgICAgICAgICAgYXdhaXQgY3R4LnpvZVRvb2xzLndpdGhkcmF3VG9TZWF0KGFjY291bnQsIHNlYXQsIGFtb3VudHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcIndpdGhkcmF3VG9TZWF0XCI6IHtcbiAgICAgICAgY29uc3QgYW1vdW50cyA9IHsgQ2FzaDogYW1vdW50IH07XG4gICAgICAgIHRvZG8ucHVzaCh7XG4gICAgICAgICAgaG93OiBcIndpdGhkcmF3VG9TZWF0XCIsXG4gICAgICAgICAgc3JjOiBtb3ZlLnNyYyxcbiAgICAgICAgICBkZXN0OiBtb3ZlLmRlc3QsXG4gICAgICAgICAgYW1vdW50LFxuICAgICAgICAgIGFwcGx5OiBhc3luYyAoeyBhZ29yaWM6IGFnb3JpYzIgfSkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgY3R4LnpvZVRvb2xzLndpdGhkcmF3VG9TZWF0KGFnb3JpYzIubGNhLCBzZWF0LCBhbW91bnRzKTtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlY292ZXI6IGFzeW5jICh7IGFnb3JpYzogYWdvcmljMiB9KSA9PiB7XG4gICAgICAgICAgICBhd2FpdCBjdHguem9lVG9vbHMubG9jYWxUcmFuc2ZlcihzZWF0LCBhZ29yaWMyLmxjYSwgYW1vdW50cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwic2VuZFwiOlxuICAgICAgICB0b2RvLnB1c2goe1xuICAgICAgICAgIGhvdzogXCJzZW5kXCIsXG4gICAgICAgICAgYW1vdW50LFxuICAgICAgICAgIHNyYzogbW92ZS5zcmMsXG4gICAgICAgICAgZGVzdDogbW92ZS5kZXN0LFxuICAgICAgICAgIGFwcGx5OiBhc3luYyAoeyBhZ29yaWM6IGFnb3JpYzIgfSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBsY2EsIGxjYUluIH0gPSBhZ29yaWMyO1xuICAgICAgICAgICAgYXdhaXQgbGNhSW4uc2VuZChsY2EuZ2V0QWRkcmVzcygpLCBhbW91bnQpO1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVjb3ZlcjogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdHJhY2VNb3ZlKFwicmVjb3ZlciBzZW5kIGlzIG5vb3A7IG5vdCBzZW5kaW5nIGJhY2sgdG8gZGVwb3NpdCBMQ0FcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiSUJDXCI6IHtcbiAgICAgICAgYXNzZXJ0MihcbiAgICAgICAgICB3YXkuc3JjID09PSBcImFnb3JpY1wiICYmIHdheS5kZXN0ID09PSBcIm5vYmxlXCIgfHwgd2F5LnNyYyA9PT0gXCJub2JsZVwiICYmIHdheS5kZXN0ID09PSBcImFnb3JpY1wiLFxuICAgICAgICAgIGBidWcgaW4gd2F5RnJvbVNyY1RvRGVzY2BcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgeyBob3cgfSA9IHdheS5zcmMgPT09IFwiYWdvcmljXCIgPyBhZ29yaWNUb05vYmxlIDogbm9ibGVUb0Fnb3JpYztcbiAgICAgICAgY29uc3QgY3R4SSA9IHsgdXNkYzogY3R4LnVzZGMgfTtcbiAgICAgICAgdG9kby5wdXNoKHtcbiAgICAgICAgICBob3csXG4gICAgICAgICAgYW1vdW50LFxuICAgICAgICAgIHNyYzogbW92ZS5zcmMsXG4gICAgICAgICAgZGVzdDogbW92ZS5kZXN0LFxuICAgICAgICAgIGFwcGx5OiBhc3luYyAoeyBhZ29yaWM6IGFnb3JpYzIsIG5vYmxlIH0pID0+IHtcbiAgICAgICAgICAgIGFzc2VydDIobm9ibGUsIFwibm9ibGVNZW50aW9uZWRcIik7XG4gICAgICAgICAgICBhd2FpdCBudWxsO1xuICAgICAgICAgICAgaWYgKHdheS5zcmMgPT09IFwiYWdvcmljXCIpIHtcbiAgICAgICAgICAgICAgYXdhaXQgYWdvcmljVG9Ob2JsZS5hcHBseShjdHhJLCBhbW91bnQsIGFnb3JpYzIsIG5vYmxlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGF3YWl0IG5vYmxlVG9BZ29yaWMuYXBwbHkoY3R4SSwgYW1vdW50LCBub2JsZSwgYWdvcmljMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZWNvdmVyOiBhc3luYyAoeyBhZ29yaWM6IGFnb3JpYzIsIG5vYmxlIH0pID0+IHtcbiAgICAgICAgICAgIGFzc2VydDIobm9ibGUpO1xuICAgICAgICAgICAgYXdhaXQgbnVsbDtcbiAgICAgICAgICAgIGlmICh3YXkuc3JjID09PSBcImFnb3JpY1wiKSB7XG4gICAgICAgICAgICAgIGF3YWl0IGFnb3JpY1RvTm9ibGUucmVjb3ZlcihjdHhJLCBhbW91bnQsIGFnb3JpYzIsIG5vYmxlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGF3YWl0IG5vYmxlVG9BZ29yaWMucmVjb3ZlcihjdHhJLCBhbW91bnQsIG5vYmxlLCBhZ29yaWMyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJDQ1RQXCI6IHtcbiAgICAgICAgY29uc3Qgb3V0Ym91bmQgPSBcImRlc3RcIiBpbiB3YXk7XG4gICAgICAgIGNvbnN0IHsgaG93IH0gPSBvdXRib3VuZCA/IENDVFAgOiBDQ1RQZnJvbUVWTTtcbiAgICAgICAgY29uc3QgZXZtQ2hhaW4gPSBvdXRib3VuZCA/IHdheS5kZXN0IDogd2F5LnNyYztcbiAgICAgICAgdG9kby5wdXNoKHtcbiAgICAgICAgICBob3csXG4gICAgICAgICAgYW1vdW50LFxuICAgICAgICAgIHNyYzogbW92ZS5zcmMsXG4gICAgICAgICAgZGVzdDogbW92ZS5kZXN0LFxuICAgICAgICAgIGFwcGx5OiBhc3luYyAoeyBbZXZtQ2hhaW5dOiBnSW5mbywgbm9ibGUgfSkgPT4ge1xuICAgICAgICAgICAgYXNzZXJ0MihnSW5mbyAmJiBub2JsZSwgZXZtQ2hhaW4pO1xuICAgICAgICAgICAgYXdhaXQgbnVsbDtcbiAgICAgICAgICAgIGlmIChvdXRib3VuZCkge1xuICAgICAgICAgICAgICBhd2FpdCBDQ1RQLmFwcGx5KGN0eCwgYW1vdW50LCBub2JsZSwgZ0luZm8pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc3QgZXZtQ3R4ID0gYXdhaXQgbWFrZUVWTUN0eChldm1DaGFpbiwgbW92ZSwgYWdvcmljLmxjYSk7XG4gICAgICAgICAgICAgIGF3YWl0IENDVFBmcm9tRVZNLmFwcGx5KGV2bUN0eCwgYW1vdW50LCBnSW5mbywgbm9ibGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVjb3ZlcjogYXN5bmMgKHsgW2V2bUNoYWluXTogZ0luZm8sIG5vYmxlIH0pID0+IHtcbiAgICAgICAgICAgIGFzc2VydDIoZ0luZm8gJiYgbm9ibGUsIGV2bUNoYWluKTtcbiAgICAgICAgICAgIGF3YWl0IG51bGw7XG4gICAgICAgICAgICBpZiAob3V0Ym91bmQpIHtcbiAgICAgICAgICAgICAgYXdhaXQgQ0NUUC5yZWNvdmVyKGN0eCwgYW1vdW50LCBub2JsZSwgZ0luZm8pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYXdhaXQgQ0NUUGZyb21FVk0ucmVjb3ZlcihjdHgsIGFtb3VudCwgZ0luZm8sIG5vYmxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJVU0ROXCI6IHtcbiAgICAgICAgY29uc3QgdmF1bHQgPSB3YXkucG9vbEtleSA9PT0gXCJVU0ROVmF1bHRcIiA/IDEgOiB2b2lkIDA7XG4gICAgICAgIGNvbnN0IGN0eFUgPSB7IHVzZG5PdXQ6IG1vdmU/LmRldGFpbD8udXNkbk91dCwgdmF1bHQgfTtcbiAgICAgICAgY29uc3QgaXNTdXBwbHkgPSBcInNyY1wiIGluIHdheTtcbiAgICAgICAgdG9kby5wdXNoKHtcbiAgICAgICAgICBob3c6IHdheS5ob3csXG4gICAgICAgICAgc3JjOiBtb3ZlLnNyYyxcbiAgICAgICAgICBkZXN0OiBtb3ZlLmRlc3QsXG4gICAgICAgICAgYW1vdW50LFxuICAgICAgICAgIGFwcGx5OiBhc3luYyAoeyBub2JsZSB9KSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQyKG5vYmxlKTtcbiAgICAgICAgICAgIGNvbnN0IGFjY3RJZCA9IGNvZXJjZUFjY291bnRJZChub2JsZS5pY2EuZ2V0QWRkcmVzcygpKTtcbiAgICAgICAgICAgIGNvbnN0IHBvcyA9IGtpdC5tYW5hZ2VyLnByb3ZpZGVQb3NpdGlvbihcIlVTRE5cIiwgXCJVU0ROXCIsIGFjY3RJZCk7XG4gICAgICAgICAgICBhd2FpdCBudWxsO1xuICAgICAgICAgICAgaWYgKGlzU3VwcGx5KSB7XG4gICAgICAgICAgICAgIGF3YWl0IHByb3RvY29sVVNETi5zdXBwbHkoY3R4VSwgYW1vdW50LCBub2JsZSk7XG4gICAgICAgICAgICAgIHJldHVybiB7IGRlc3RQb3M6IHBvcyB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYXdhaXQgcHJvdG9jb2xVU0ROLndpdGhkcmF3KGN0eFUsIGFtb3VudCwgbm9ibGUsIHdheS5jbGFpbSk7XG4gICAgICAgICAgICAgIHJldHVybiB7IHNyY1BvczogcG9zIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZWNvdmVyOiBhc3luYyAoeyBub2JsZSB9KSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQyKG5vYmxlKTtcbiAgICAgICAgICAgIGF3YWl0IG51bGw7XG4gICAgICAgICAgICBpZiAoaXNTdXBwbHkpIHtcbiAgICAgICAgICAgICAgdGhyb3dSZWRhY3RlZGBubyByZWNvdmVyeSBmcm9tIHN1cHBseSAoZmluYWwgc3RlcClgO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYXdhaXQgcHJvdG9jb2xVU0ROLnN1cHBseShjdHhVLCBhbW91bnQsIG5vYmxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJDb21wb3VuZFwiOlxuICAgICAgICB0b2RvLnB1c2gobWFrZUVWTVByb3RvY29sU3RlcCh3YXksIG1vdmUpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQWF2ZVwiOlxuICAgICAgICB0b2RvLnB1c2gobWFrZUVWTVByb3RvY29sU3RlcCh3YXksIG1vdmUpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQmVlZnlcIjpcbiAgICAgICAgdG9kby5wdXNoKG1ha2VFVk1Qcm90b2NvbFN0ZXAod2F5LCBtb3ZlKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGB1bnJlYWNoYWJsZTogJHt3YXl9YDtcbiAgICB9XG4gIH1cbiAgY29uc3QgYWdvcmljID0gYXdhaXQgcHJvdmlkZUNvc21vc0FjY291bnQob3JjaCwgXCJhZ29yaWNcIiwga2l0LCB0cmFjZUZsb3cpO1xuICBjb25zdCBmb3JDaGFpbiA9IGFzeW5jIChjaGFpbiwgdGh1bmspID0+IHtcbiAgICBhd2FpdCBudWxsO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aHVuaygpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRyYWNlRmxvdyhcImZhaWxlZCB0byBtYWtlIGFjY291bnQgZm9yXCIsIGNoYWluLCBlcnIpO1xuICAgICAgcmVwb3J0ZXIucHVibGlzaEZsb3dTdGF0dXMoZmxvd0lkLCB7XG4gICAgICAgIHN0YXRlOiBcImZhaWxcIixcbiAgICAgICAgc3RlcDogMCxcbiAgICAgICAgaG93OiBgbWFrZUFjY291bnQ6ICR7Y2hhaW59YCxcbiAgICAgICAgZXJyb3I6IGVyciAmJiB0eXBlb2YgZXJyID09PSBcIm9iamVjdFwiID8gZXJyLm1lc3NhZ2UgOiBgJHtlcnJ9YFxuICAgICAgfSk7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9O1xuICBjb25zdCBldm1BY2N0cyA9IGF3YWl0IChhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgYXhlbGFyID0gYXdhaXQgb3JjaC5nZXRDaGFpbihcImF4ZWxhclwiKTtcbiAgICBjb25zdCB7IGF4ZWxhcklkcyB9ID0gY3R4O1xuICAgIGNvbnN0IGNoYWluVG9BY2N0ID0ge307XG4gICAgY29uc3QgZXZtQ2hhaW5zID0gT2JqZWN0LmtleXMoQXhlbGFyQ2hhaW4pO1xuICAgIGZvciAoY29uc3QgbW92ZSBvZiBtb3Zlcykge1xuICAgICAgY29uc3QgZ21wID0ge1xuICAgICAgICBjaGFpbjogYXhlbGFyLFxuICAgICAgICBmZWU6IG1vdmUuZmVlPy52YWx1ZSB8fCAwbixcbiAgICAgICAgYXhlbGFySWRzLFxuICAgICAgICBldm1HYXM6IG1vdmUuZGV0YWlsPy5ldm1HYXMgfHwgMG5cbiAgICAgIH07XG4gICAgICBmb3IgKGNvbnN0IHJlZiBvZiBbbW92ZS5zcmMsIG1vdmUuZGVzdF0pIHtcbiAgICAgICAgY29uc3QgbWF5YmVDaGFpbiA9IGdldENoYWluTmFtZU9mUGxhY2VSZWYocmVmKTtcbiAgICAgICAgaWYgKCFldm1DaGFpbnMuaW5jbHVkZXMobWF5YmVDaGFpbikpIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBjaGFpbiA9IG1heWJlQ2hhaW47XG4gICAgICAgIGNvbnN0IGluZm8gPSBhd2FpdCBmb3JDaGFpbihcbiAgICAgICAgICBjaGFpbixcbiAgICAgICAgICAoKSA9PiBwcm92aWRlRVZNQWNjb3VudChjaGFpbiwgZ21wLCBhZ29yaWMubGNhLCBjdHgsIGtpdClcbiAgICAgICAgKTtcbiAgICAgICAgY2hhaW5Ub0FjY3RbY2hhaW5dID0gaW5mbztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhhcmRlbihjaGFpblRvQWNjdCk7XG4gIH0pKCk7XG4gIHRyYWNlRmxvdyhcIkVWTSBhY2NvdW50cyByZWFkeVwiLCBrZXlzNihldm1BY2N0cykpO1xuICBjb25zdCBub2JsZU1lbnRpb25lZCA9IG1vdmVzLnNvbWUoKG0yKSA9PiBbbTIuc3JjLCBtMi5kZXN0XS5pbmNsdWRlcyhcIkBub2JsZVwiKSk7XG4gIGNvbnN0IG5vYmxlSW5mbyA9IGF3YWl0IChub2JsZU1lbnRpb25lZCB8fCBrZXlzNihldm1BY2N0cykubGVuZ3RoID4gMCA/IGZvckNoYWluKFxuICAgIFwibm9ibGVcIixcbiAgICAoKSA9PiBwcm92aWRlQ29zbW9zQWNjb3VudChvcmNoLCBcIm5vYmxlXCIsIGtpdCwgdHJhY2VGbG93KVxuICApIDogdm9pZCAwKTtcbiAgY29uc3QgYWNjb3VudHMgPSB7XG4gICAgYWdvcmljLFxuICAgIC4uLihub2JsZUluZm8mJiB7IG5vYmxlOiBub2JsZUluZm8gfSksXG4gICAgLi4uZXZtQWNjdHNcbiAgfTtcbiAgdHJhY2VGbG93KFwiYWNjb3VudHMgZm9yIHRyYWNrRmxvd1wiLCBrZXlzNihhY2NvdW50cykpO1xuICBhd2FpdCB0cmFja0Zsb3cocmVwb3J0ZXIsIHRvZG8sIGZsb3dJZCwgdHJhY2VGbG93LCBhY2NvdW50cyk7XG4gIHRyYWNlRmxvdyhcInN0ZXBGbG93IGRvbmVcIik7XG59O1xudmFyIHJlYmFsYW5jZSA9IChhc3luYyAob3JjaCwgY3R4LCBzZWF0LCBvZmZlckFyZ3MsIGtpdCkgPT4ge1xuICBjb25zdCBpZCA9IGtpdC5yZWFkZXIuZ2V0UG9ydGZvbGlvSWQoKTtcbiAgY29uc3QgdHJhY2VQID0gbWFrZVRyYWNlcihcInJlYmFsYW5jZVwiKS5zdWIoYHBvcnRmb2xpbyR7aWR9YCk7XG4gIGNvbnN0IHByb3Bvc2FsID0gc2VhdC5nZXRQcm9wb3NhbCgpO1xuICB0cmFjZVAoXCJwcm9wb3NhbFwiLCBwcm9wb3NhbC5naXZlLCBwcm9wb3NhbC53YW50LCBvZmZlckFyZ3MpO1xuICBhd2FpdCBudWxsO1xuICB0cnkge1xuICAgIGlmIChvZmZlckFyZ3MudGFyZ2V0QWxsb2NhdGlvbikge1xuICAgICAga2l0Lm1hbmFnZXIuc2V0VGFyZ2V0QWxsb2NhdGlvbihvZmZlckFyZ3MudGFyZ2V0QWxsb2NhdGlvbik7XG4gICAgfSBlbHNlIGlmICgob2ZmZXJBcmdzLmZsb3cgfHwgW10pLnNvbWUoKHN0ZXApID0+IHN0ZXAuZGVzdCA9PT0gXCIrYWdvcmljXCIpKSB7XG4gICAgICBraXQubWFuYWdlci5pbmNyUG9saWN5VmVyc2lvbigpO1xuICAgIH1cbiAgICBpZiAob2ZmZXJBcmdzLmZsb3cpIHtcbiAgICAgIGF3YWl0IHN0ZXBGbG93KG9yY2gsIGN0eCwgc2VhdCwgb2ZmZXJBcmdzLmZsb3csIGtpdCwgdHJhY2VQKTtcbiAgICB9XG4gICAgaWYgKCFzZWF0Lmhhc0V4aXRlZCgpKSB7XG4gICAgICBzZWF0LmV4aXQoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmICghc2VhdC5oYXNFeGl0ZWQoKSkge1xuICAgICAgc2VhdC5mYWlsKGVycik7XG4gICAgfVxuICAgIHRocm93IGVycjtcbiAgfVxufSk7XG52YXIgcGFyc2VJbmJvdW5kVHJhbnNmZXIgPSAoYXN5bmMgKF9vcmNoLCBfY3R4LCBwYWNrZXQsIGtpdCkgPT4ge1xuICBjb25zdCB7IHJlYWRlciB9ID0ga2l0O1xuICBjb25zdCBsY2EgPSByZWFkZXIuZ2V0TG9jYWxBY2NvdW50KCk7XG4gIGNvbnN0IHBhcnNlZCA9IGF3YWl0IGxjYS5wYXJzZUluYm91bmRUcmFuc2ZlcihwYWNrZXQpO1xuICByZXR1cm4gcGFyc2VkO1xufSk7XG52YXIgb3BlblBvcnRmb2xpbyA9IChhc3luYyAob3JjaCwgY3R4LCBzZWF0LCBvZmZlckFyZ3MpID0+IHtcbiAgYXdhaXQgbnVsbDtcbiAgY29uc3QgdHJhY2UxNyA9IG1ha2VUcmFjZXIoXCJvcGVuUG9ydGZvbGlvXCIpO1xuICB0cnkge1xuICAgIGNvbnN0IHsgbWFrZVBvcnRmb2xpb0tpdCwgLi4uY3R4SSB9ID0gY3R4O1xuICAgIGNvbnN0IHsgaW5lcnRTdWJzY3JpYmVyIH0gPSBjdHhJO1xuICAgIGNvbnN0IGtpdCA9IG1ha2VQb3J0Zm9saW9LaXQoKTtcbiAgICBjb25zdCBpZCA9IGtpdC5yZWFkZXIuZ2V0UG9ydGZvbGlvSWQoKTtcbiAgICBjb25zdCB0cmFjZVAgPSB0cmFjZTE3LnN1YihgcG9ydGZvbGlvJHtpZH1gKTtcbiAgICB0cmFjZVAoXCJwb3J0Zm9saW8gb3BlbmVkXCIpO1xuICAgIGF3YWl0IHByb3ZpZGVDb3Ntb3NBY2NvdW50KG9yY2gsIFwiYWdvcmljXCIsIGtpdCwgdHJhY2VQKTtcbiAgICBpZiAoIXNlYXQuaGFzRXhpdGVkKCkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHJlYmFsYW5jZShvcmNoLCBjdHhJLCBzZWF0LCBvZmZlckFyZ3MsIGtpdCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdHJhY2VQKFwiXFx1MjZBMFxcdUZFMEYgcmViYWxhbmNlIGZhaWxlZFwiLCBlcnIpO1xuICAgICAgICBpZiAoIXNlYXQuaGFzRXhpdGVkKCkpIHNlYXQuZmFpbChlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXNlYXQuaGFzRXhpdGVkKCkpIHNlYXQuZXhpdCgpO1xuICAgIGNvbnN0IHB1YmxpY1N1YnNjcmliZXJzID0ge1xuICAgICAgcG9ydGZvbGlvOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlBvcnRmb2xpb1wiLFxuICAgICAgICBzdG9yYWdlUGF0aDogYXdhaXQga2l0LnJlYWRlci5nZXRTdG9yYWdlUGF0aCgpLFxuICAgICAgICBzdWJzY3JpYmVyOiBpbmVydFN1YnNjcmliZXJcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBoYXJkZW4oe1xuICAgICAgaW52aXRhdGlvbk1ha2Vyczoga2l0Lmludml0YXRpb25NYWtlcnMsXG4gICAgICBwdWJsaWNTdWJzY3JpYmVyc1xuICAgIH0pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0cmFjZTE3KFwiXFx1ezFGNkE4fSBvcGVuUG9ydGZvbGlvIGZsb3cgZmFpbGVkXCIsIGVycik7XG4gICAgdGhyb3cgZXJyO1xuICB9XG59KTtcbmhhcmRlbihvcGVuUG9ydGZvbGlvKTtcbnZhciBtYWtlTENBID0gKGFzeW5jIChvcmNoKSA9PiB7XG4gIGNvbnN0IGFnb3JpY0NoYWluID0gYXdhaXQgb3JjaC5nZXRDaGFpbihcImFnb3JpY1wiKTtcbiAgcmV0dXJuIGFnb3JpY0NoYWluLm1ha2VBY2NvdW50KCk7XG59KTtcbmhhcmRlbihtYWtlTENBKTtcblxuLyogLi4vcG9ydGZvbGlvLWNvbnRyYWN0L3NyYy9yZXNvbHZlci90eXBlcy50cyovXG52YXIgVHJhbnNhY3Rpb25TZXR0bGVtZW50T2ZmZXJBcmdzU2hhcGUgPSBNLnNwbGl0UmVjb3JkKFxuICB7XG4gICAgc3RhdHVzOiBNLm9yKFR4U3RhdHVzLlNVQ0NFU1MsIFR4U3RhdHVzLkZBSUxFRCksXG4gICAgdHhJZDogTS5zdHJpbmcoKVxuICB9LFxuICB7XG4gICAgcmVqZWN0aW9uUmVhc29uOiBNLnN0cmluZygpXG4gIH0sXG4gIHt9XG4pO1xudmFyIFJlc29sdmVyT2ZmZXJBcmdzU2hhcGVzID0ge1xuICBTZXR0bGVUcmFuc2FjdGlvbjogVHJhbnNhY3Rpb25TZXR0bGVtZW50T2ZmZXJBcmdzU2hhcGVcbn07XG5oYXJkZW4oUmVzb2x2ZXJPZmZlckFyZ3NTaGFwZXMpO1xudmFyIFBFTkRJTkdfVFhTX05PREVfS0VZID0gXCJwZW5kaW5nVHhzXCI7XG52YXIgUHVibGlzaGVkVHhTaGFwZSA9IE0ub3IoXG4gIC8qIENDVFBfVE9fRVZNIGFuZCBDQ1RQX1RPX05PQkxFIHJlcXVpcmUgYW1vdW50Ki9cbiAgTS5zcGxpdFJlY29yZChcbiAgICB7XG4gICAgICB0eXBlOiBNLm9yKFR4VHlwZS5DQ1RQX1RPX0VWTSwgVHhUeXBlLkNDVFBfVE9fTk9CTEUpLFxuICAgICAgZGVzdGluYXRpb25BZGRyZXNzOiBNLnN0cmluZygpLFxuICAgICAgLyogRm9ybWF0OiBgJHtjaGFpbklkfToke2NoYWluSWR9OiR7cmVtb3RBZGRlc3N9YCovXG4gICAgICBzdGF0dXM6IE0ub3IoVHhTdGF0dXMuUEVORElORyksXG4gICAgICBhbW91bnQ6IE0ubmF0KClcbiAgICB9LFxuICAgIHt9LFxuICAgIHt9XG4gICksXG4gIC8qIEdNUCBoYXMgb3B0aW9uYWwgYW1vdW50Ki9cbiAgTS5zcGxpdFJlY29yZChcbiAgICB7XG4gICAgICB0eXBlOiBNLm9yKFR4VHlwZS5HTVApLFxuICAgICAgZGVzdGluYXRpb25BZGRyZXNzOiBNLnN0cmluZygpLFxuICAgICAgc3RhdHVzOiBNLm9yKFR4U3RhdHVzLlBFTkRJTkcpXG4gICAgfSxcbiAgICB7XG4gICAgICBhbW91bnQ6IE0ubmF0KClcbiAgICB9LFxuICAgIHt9XG4gIClcbik7XG5cbi8qIC4uL3BvcnRmb2xpby1jb250cmFjdC9zcmMvcmVzb2x2ZXIvcmVzb2x2ZXIuZXhvLnRzKi9cbnZhciB0cmFjZTE1ID0gbWFrZVRyYWNlcihcIlJlc29sdmVyXCIpO1xudmFyIENsaWVudEZhY2V0SSA9IE0uaW50ZXJmYWNlKFwiUmVzb2x2ZXJDbGllbnRcIiwge1xuICByZWdpc3RlclRyYW5zYWN0aW9uOiBNLmNhbGwoTS5vciguLi5PYmplY3QudmFsdWVzKFR4VHlwZSkpLCBNLnN0cmluZygpKS5vcHRpb25hbChNLm5hdCgpKS5yZXR1cm5zKE0uc3BsaXRSZWNvcmQoeyByZXN1bHQ6IFZvd1NoYXBlLCB0eElkOiBNLnN0cmluZygpIH0pKVxufSk7XG52YXIgUmVwb3J0ZXJJID0gTS5pbnRlcmZhY2UoXCJSZXBvcnRlclwiLCB7XG4gIGluc2VydFBlbmRpbmdUcmFuc2FjdGlvbjogTS5jYWxsKFxuICAgIE0uc3RyaW5nKCksXG4gICAgTS5zdHJpbmcoKSxcbiAgICBNLm9yKC4uLk9iamVjdC52YWx1ZXMoVHhUeXBlKSlcbiAgKS5vcHRpb25hbChNLm5hdCgpKS5yZXR1cm5zKCksXG4gIGNvbXBsZXRlUGVuZGluZ1RyYW5zYWN0aW9uOiBNLmNhbGwoXG4gICAgTS5zdHJpbmcoKSxcbiAgICBNLm9yKFR4U3RhdHVzLlNVQ0NFU1MsIFR4U3RhdHVzLkZBSUxFRClcbiAgKS5yZXR1cm5zKClcbn0pO1xudmFyIFNlcnZpY2VGYWNldEkgPSBNLmludGVyZmFjZShcIlJlc29sdmVyU2VydmljZVwiLCB7XG4gIHNldHRsZVRyYW5zYWN0aW9uOiBNLmNhbGwoVHJhbnNhY3Rpb25TZXR0bGVtZW50T2ZmZXJBcmdzU2hhcGUpLnJldHVybnMoKVxufSk7XG52YXIgSW52aXRhdGlvbk1ha2Vyc0ZhY2V0SSA9IE0uaW50ZXJmYWNlKFwiUmVzb2x2ZXJJbnZpdGF0aW9uTWFrZXJzXCIsIHtcbiAgU2V0dGxlVHJhbnNhY3Rpb246IE0uY2FsbFdoZW4oKS5yZXR1cm5zKEludml0YXRpb25TaGFwZSlcbn0pO1xudmFyIFNldHRsZW1lbnRIYW5kbGVyRmFjZXRJID0gTS5pbnRlcmZhY2UoXCJTZXR0bGVtZW50SGFuZGxlclwiLCB7XG4gIGhhbmRsZTogTS5jYWxsV2hlbihcbiAgICBNLnJlbW90YWJsZSgpLFxuICAgIFJlc29sdmVyT2ZmZXJBcmdzU2hhcGVzLlNldHRsZVRyYW5zYWN0aW9uXG4gICkucmV0dXJucyhNLnN0cmluZygpKVxufSk7XG52YXIgcHJvcG9zYWxTaGFwZSA9IE0uc3BsaXRSZWNvcmQoXG4gIHsgZ2l2ZToge30sIHdhbnQ6IHt9IH0sXG4gIHsgZXhpdDogTS5hbnkoKSB9LFxuICB7fVxuKTtcbnZhciBwcmVwYXJlUmVzb2x2ZXJLaXQgPSAocmVzb2x2ZXJab25lLCB6Y2YsIHtcbiAgdm93VG9vbHMsXG4gIHBlbmRpbmdUeHNOb2RlLFxuICBtYXJzaGFsbGVyXG59KSA9PiB7XG4gIGNvbnN0IHdyaXRlVG9Ob2RlID0gKG5vZGUsIHZhbHVlKSA9PiB7XG4gICAgdm9pZCBFLndoZW4oXG4gICAgICBFKG1hcnNoYWxsZXIpLnRvQ2FwRGF0YSh2YWx1ZSksXG4gICAgICAoY2FwRGF0YSkgPT4gRShub2RlKS5zZXRWYWx1ZShKU09OLnN0cmluZ2lmeShjYXBEYXRhKSlcbiAgICApO1xuICB9O1xuICByZXR1cm4gcmVzb2x2ZXJab25lLmV4b0NsYXNzS2l0KFxuICAgIFwiUmVzb2x2ZXJcIixcbiAgICB7XG4gICAgICBjbGllbnQ6IENsaWVudEZhY2V0SSxcbiAgICAgIHNlcnZpY2U6IFNlcnZpY2VGYWNldEksXG4gICAgICBpbnZpdGF0aW9uTWFrZXJzOiBJbnZpdGF0aW9uTWFrZXJzRmFjZXRJLFxuICAgICAgc2V0dGxlbWVudEhhbmRsZXI6IFNldHRsZW1lbnRIYW5kbGVyRmFjZXRJLFxuICAgICAgcmVwb3J0ZXI6IFJlcG9ydGVySVxuICAgIH0sXG4gICAgKCkgPT4gKHtcbiAgICAgIHRyYW5zYWN0aW9uUmVnaXN0cnk6IHJlc29sdmVyWm9uZS5kZXRhY2hlZCgpLm1hcFN0b3JlKFwidHJhbnNhY3Rpb25SZWdpc3RyeVwiKSxcbiAgICAgIGluZGV4OiAwXG4gICAgfSksXG4gICAge1xuICAgICAgY2xpZW50OiB7XG4gICAgICAgIC8qKlxuICogUmVnaXN0ZXIgYSB0cmFuc2FjdGlvbiBhbmQgcmV0dXJuIGEgdm93IHRoYXQgaXMgZnVsZmlsbGVkIHdoZW4gdGhlIHRyYW5zYWN0aW9uIGlzIHJlc29sdmVkLlxuICpcbiAqIEBwYXJhbSB0eXBlXG4gKiBAcGFyYW0gZGVzdGluYXRpb25BZGRyZXNzXG4gKiBAcGFyYW0gYW1vdW50VmFsdWVcbiAqL1xuICAgICAgICByZWdpc3RlclRyYW5zYWN0aW9uKHR5cGUsIGRlc3RpbmF0aW9uQWRkcmVzcywgYW1vdW50VmFsdWUpIHtcbiAgICAgICAgICBjb25zdCB0eElkID0gYHR4JHt0aGlzLnN0YXRlLmluZGV4fWA7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5pbmRleCArPSAxO1xuICAgICAgICAgIGNvbnN0IHsgdHJhbnNhY3Rpb25SZWdpc3RyeSB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBjb25zdCB2b3dLaXQgPSB2b3dUb29scy5tYWtlVm93S2l0KCk7XG4gICAgICAgICAgY29uc3QgdHhFbnRyeSA9IHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uQWRkcmVzcyxcbiAgICAgICAgICAgIHZvd0tpdCxcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAuLi4odHlwZSE9PSBUeFR5cGUuR01QID8geyBhbW91bnRWYWx1ZSB9IDoge30pXG4gICAgICAgICAgfTtcbiAgICAgICAgICB0cmFuc2FjdGlvblJlZ2lzdHJ5LmluaXQodHhJZCwgaGFyZGVuKHR4RW50cnkpKTtcbiAgICAgICAgICB0aGlzLmZhY2V0cy5yZXBvcnRlci5pbnNlcnRQZW5kaW5nVHJhbnNhY3Rpb24oXG4gICAgICAgICAgICB0eElkLFxuICAgICAgICAgICAgZGVzdGluYXRpb25BZGRyZXNzLFxuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIGFtb3VudFZhbHVlXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0cmFjZTE1KGBSZWdpc3RlcmVkIHBlbmRpbmcgdHJhbnNhY3Rpb246ICR7dHhJZH1gKTtcbiAgICAgICAgICByZXR1cm4geyByZXN1bHQ6IHZvd0tpdC52b3csIHR4SWQgfTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlcG9ydGVyOiB7XG4gICAgICAgIGluc2VydFBlbmRpbmdUcmFuc2FjdGlvbih0eElkLCBkZXN0aW5hdGlvbkFkZHJlc3MsIHR5cGUsIGFtb3VudCkge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0ge1xuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uQWRkcmVzcyxcbiAgICAgICAgICAgIHN0YXR1czogVHhTdGF0dXMuUEVORElORyxcbiAgICAgICAgICAgIC4uLih0eXBlIT09IFR4VHlwZS5HTVAgPyB7IGFtb3VudCB9IDoge30pXG4gICAgICAgICAgfTtcbiAgICAgICAgICBjb25zdCBub2RlID0gRShwZW5kaW5nVHhzTm9kZSkubWFrZUNoaWxkTm9kZSh0eElkKTtcbiAgICAgICAgICB3cml0ZVRvTm9kZShub2RlLCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBsZXRlUGVuZGluZ1RyYW5zYWN0aW9uKHR4SWQsIHN0YXR1cyA9IFR4U3RhdHVzLlNVQ0NFU1MpIHtcbiAgICAgICAgICBjb25zdCBub2RlID0gRShwZW5kaW5nVHhzTm9kZSkubWFrZUNoaWxkTm9kZSh0eElkKTtcbiAgICAgICAgICBjb25zdCB0eEVudHJ5ID0gdGhpcy5zdGF0ZS50cmFuc2FjdGlvblJlZ2lzdHJ5LmdldCh0eElkKTtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uQWRkcmVzczogdHhFbnRyeS5kZXN0aW5hdGlvbkFkZHJlc3MsXG4gICAgICAgICAgICB0eXBlOiB0eEVudHJ5LnR5cGUsXG4gICAgICAgICAgICAuLi4odHhFbnRyeS50eXBlIT09IFR4VHlwZS5HTVAgPyB7IGFtb3VudDogdHhFbnRyeS5hbW91bnRWYWx1ZSB9IDoge30pLFxuICAgICAgICAgICAgc3RhdHVzXG4gICAgICAgICAgfTtcbiAgICAgICAgICB3cml0ZVRvTm9kZShub2RlLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzZXJ2aWNlOiB7XG4gICAgICAgIHNldHRsZVRyYW5zYWN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICBjb25zdCB7IHRyYW5zYWN0aW9uUmVnaXN0cnkgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgY29uc3QgeyBzdGF0dXMsIHR4SWQsIHJlamVjdGlvblJlYXNvbiB9ID0gYXJncztcbiAgICAgICAgICBjb25zdCByZWdpc3RyeUVudHJ5ID0gdHJhbnNhY3Rpb25SZWdpc3RyeS5nZXQodHhJZCk7XG4gICAgICAgICAgc3dpdGNoIChzdGF0dXMpIHtcbiAgICAgICAgICAgIGNhc2UgVHhTdGF0dXMuU1VDQ0VTUzpcbiAgICAgICAgICAgICAgdHJhY2UxNShcbiAgICAgICAgICAgICAgICBcIlRyYW5zYWN0aW9uIGNvbmZpcm1lZCAtIHJlc29sdmluZyBwZW5kaW5nIG9wZXJhdGlvbiBmb3Iga2V5OlwiLFxuICAgICAgICAgICAgICAgIHR4SWRcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgcmVnaXN0cnlFbnRyeS52b3dLaXQucmVzb2x2ZXIucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICB0aGlzLmZhY2V0cy5yZXBvcnRlci5jb21wbGV0ZVBlbmRpbmdUcmFuc2FjdGlvbihcbiAgICAgICAgICAgICAgICB0eElkLFxuICAgICAgICAgICAgICAgIFR4U3RhdHVzLlNVQ0NFU1NcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgdHJhbnNhY3Rpb25SZWdpc3RyeS5kZWxldGUodHhJZCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgVHhTdGF0dXMuRkFJTEVEOlxuICAgICAgICAgICAgICB0cmFjZTE1KFxuICAgICAgICAgICAgICAgIFwiVHJhbnNhY3Rpb24gZmFpbGVkIC0gcmVqZWN0aW5nIHBlbmRpbmcgb3BlcmF0aW9uIGZvciBrZXk6XCIsXG4gICAgICAgICAgICAgICAgdHhJZFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICByZWdpc3RyeUVudHJ5LnZvd0tpdC5yZXNvbHZlci5yZWplY3QoXG4gICAgICAgICAgICAgICAgRXJyb3IocmVqZWN0aW9uUmVhc29uIHx8IFwiVHJhbnNhY3Rpb24gZmFpbGVkXCIpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHRoaXMuZmFjZXRzLnJlcG9ydGVyLmNvbXBsZXRlUGVuZGluZ1RyYW5zYWN0aW9uKFxuICAgICAgICAgICAgICAgIHR4SWQsXG4gICAgICAgICAgICAgICAgVHhTdGF0dXMuRkFJTEVEXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHRyYW5zYWN0aW9uUmVnaXN0cnkuZGVsZXRlKHR4SWQpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFVuZXhwZWN0ZWQgc3RhdHVzICR7cXVvdGUoc3RhdHVzKX0gZm9yIHRyYW5zYWN0aW9uOiAke3F1b3RlKHR4SWQpfWA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2V0dGxlbWVudEhhbmRsZXI6IHtcbiAgICAgICAgYXN5bmMgaGFuZGxlKHNlYXQsIG9mZmVyQXJncykge1xuICAgICAgICAgIHRyYWNlMTUoXCJUcmFuc2FjdGlvbiBzZXR0bGVtZW50OlwiLCBvZmZlckFyZ3MpO1xuICAgICAgICAgIHNlYXQuZXhpdCgpO1xuICAgICAgICAgIHRoaXMuZmFjZXRzLnNlcnZpY2Uuc2V0dGxlVHJhbnNhY3Rpb24ob2ZmZXJBcmdzKTtcbiAgICAgICAgICByZXR1cm4gXCJUcmFuc2FjdGlvbiBzZXR0bGVtZW50IHByb2Nlc3NlZFwiO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaW52aXRhdGlvbk1ha2Vyczoge1xuICAgICAgICBTZXR0bGVUcmFuc2FjdGlvbigpIHtcbiAgICAgICAgICB0cmFjZTE1KFwiU2V0dGxlVHJhbnNhY3Rpb25cIik7XG4gICAgICAgICAgY29uc3QgeyBzZXR0bGVtZW50SGFuZGxlciB9ID0gdGhpcy5mYWNldHM7XG4gICAgICAgICAgcmV0dXJuIHpjZi5tYWtlSW52aXRhdGlvbihcbiAgICAgICAgICAgIHNldHRsZW1lbnRIYW5kbGVyLFxuICAgICAgICAgICAgXCJzZXR0bGVUcmFuc2FjdGlvblwiLFxuICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgcHJvcG9zYWxTaGFwZVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICk7XG59O1xuaGFyZGVuKHByZXBhcmVSZXNvbHZlcktpdCk7XG5cbi8qIC4uL3BvcnRmb2xpby1jb250cmFjdC9zcmMvcG9ydGZvbGlvLmNvbnRyYWN0LnRzKi9cbnZhciB0cmFjZTE2ID0gbWFrZVRyYWNlcihcIlBvcnRDXCIpO1xudmFyIHsgZnJvbUVudHJpZXM6IGZyb21FbnRyaWVzMTUsIGtleXM6IGtleXM3IH0gPSBPYmplY3Q7XG52YXIgaW50ZXJmYWNlVE9ETyA9IHZvaWQgMDtcbnZhciBFVk1Db250cmFjdEFkZHJlc3Nlc1NoYXBlID0gTS5zcGxpdFJlY29yZCh7XG4gIGFhdmVQb29sOiBNLnN0cmluZygpLFxuICBjb21wb3VuZDogTS5zdHJpbmcoKSxcbiAgZmFjdG9yeTogTS5zdHJpbmcoKSxcbiAgdXNkYzogTS5zdHJpbmcoKVxufSk7XG52YXIgQXhlbGFyQ29uZmlnUGF0dGVybiA9IE0uc3BsaXRSZWNvcmQoe1xuICBheGVsYXJJZDogTS5zdHJpbmcoKSxcbiAgY2hhaW5JbmZvOiBDaGFpbkluZm9TaGFwZSxcbiAgY29udHJhY3RzOiBFVk1Db250cmFjdEFkZHJlc3Nlc1NoYXBlXG59KTtcbnZhciAkY82PX0F4ZWxhckNvbmZpZ1NoYXBlPU0uc3BsaXRSZWNvcmQoXG4gIGZyb21FbnRyaWVzMTUoXG4gICAga2V5czcoQXhlbGFyQ2hhaW4pLm1hcCgoY2hhaW4pID0+IFtjaGFpbiwgQXhlbGFyQ29uZmlnUGF0dGVybl0pXG4gIClcbik7QXhlbGFyQ29uZmlnU2hhcGU9JGPNj19BeGVsYXJDb25maWdTaGFwZTtcbnZhciBFVk1Db250cmFjdEFkZHJlc3Nlc01hcFNoYXBlID0gTS5zcGxpdFJlY29yZChcbiAgZnJvbUVudHJpZXMxNShcbiAgICBrZXlzNyhBeGVsYXJDaGFpbikubWFwKChjaGFpbikgPT4gW2NoYWluLCBFVk1Db250cmFjdEFkZHJlc3Nlc1NoYXBlXSlcbiAgKVxuKTtcbnZhciBBeGVsYXJJZHNQYXR0ZXJuID0gTS5zdHJpbmcoKTtcbnZhciBBeGVsYXJJZFNoYXBlID0gTS5zcGxpdFJlY29yZChcbiAgZnJvbUVudHJpZXMxNShrZXlzNyhBeGVsYXJDaGFpbikubWFwKChjaGFpbikgPT4gW2NoYWluLCBBeGVsYXJJZHNQYXR0ZXJuXSkpXG4pO1xudmFyIEdtcEFkZHJlc3Nlc1NoYXBlID0gTS5zcGxpdFJlY29yZCh7XG4gIEFYRUxBUl9HTVA6IE0uc3RyaW5nKCksXG4gIEFYRUxBUl9HQVM6IE0uc3RyaW5nKClcbn0pO1xudmFyIHByaXZhdGVBcmdzU2hhcGUgPSB7XG4gIC4uLk9yY2hlc3RyYXRpb25Qb3dlcnNTaGFwZSxcbiAgbWFyc2hhbGxlcjogTS5yZW1vdGFibGUoXCJtYXJzaGFsbGVyXCIpLFxuICBzdG9yYWdlTm9kZTogTS5yZW1vdGFibGUoXCJzdG9yYWdlTm9kZVwiKSxcbiAgY2hhaW5JbmZvOiBNLmFuZChcbiAgICBNLnJlY29yZE9mKE0uc3RyaW5nKCksIENoYWluSW5mb1NoYXBlKSxcbiAgICBNLnNwbGl0UmVjb3JkKHsgYWdvcmljOiBNLmFueSgpLCBub2JsZTogTS5hbnkoKSB9KVxuICApLFxuICBhc3NldEluZm86IE0uYXJyYXlPZihbTS5zdHJpbmcoKSwgRGVub21EZXRhaWxTaGFwZV0pLFxuICBheGVsYXJJZHM6IEF4ZWxhcklkU2hhcGUsXG4gIGNvbnRyYWN0czogRVZNQ29udHJhY3RBZGRyZXNzZXNNYXBTaGFwZSxcbiAgZ21wQWRkcmVzc2VzOiBHbXBBZGRyZXNzZXNTaGFwZVxufTtcbnZhciAkY82PX21ldGE9e1xuICBwcml2YXRlQXJnc1NoYXBlXG59O21ldGE9JGPNj19tZXRhO1xuaGFyZGVuKG1ldGEpO1xudmFyIG1hcnNoYWxEYXRhID0gbWFrZU1hcnNoYWwoKF8pID0+IHRocm93UmVkYWN0ZWRgZGF0YSBvbmx5YCk7XG52YXIgcHVibGlzaFN0YXR1cyA9IChub2RlLCBzdGF0dXMpID0+IHtcbiAgY29uc3QgY2FwRGF0YSA9IG1hcnNoYWxEYXRhLnRvQ2FwRGF0YShzdGF0dXMpO1xuICB2b2lkIEUobm9kZSkuc2V0VmFsdWUoSlNPTi5zdHJpbmdpZnkoY2FwRGF0YSkpO1xufTtcbnZhciAkY82PX2NvbnRyYWN0PWFzeW5jKHpjZixwcml2YXRlQXJncywgem9uZSwgdG9vbHMpID0+IHtcbiAgY29uc3Qge1xuICAgIGNoYWluSW5mbyxcbiAgICBhc3NldEluZm8sXG4gICAgYXhlbGFySWRzLFxuICAgIGNvbnRyYWN0cyxcbiAgICBtYXJzaGFsbGVyLFxuICAgIHN0b3JhZ2VOb2RlLFxuICAgIGdtcEFkZHJlc3Nlc1xuICB9ID0gcHJpdmF0ZUFyZ3M7XG4gIGNvbnN0IHsgYnJhbmRzIH0gPSB6Y2YuZ2V0VGVybXMoKTtcbiAgY29uc3QgeyBvcmNoZXN0cmF0ZUFsbCwgem9lVG9vbHMsIGNoYWluSHViLCB2b3dUb29scyB9ID0gdG9vbHM7XG4gIGFzc2VydChicmFuZHMuVVNEQywgXCJVU0RDIG1pc3NpbmcgZnJvbSBicmFuZHMgaW4gdGVybXNcIik7XG4gIGFzc2VydChicmFuZHMuRmVlLCBcIkZlZSBtaXNzaW5nIGZyb20gYnJhbmRzIGluIHRlcm1zXCIpO1xuICBpZiAoIShcImF4ZWxhclwiIGluIGNoYWluSW5mbykpIHtcbiAgICB0cmFjZTE2KFwiXFx1MjZBMFxcdUZFMEYgbm8gYXhlbGFyIGNoYWluSW5mbzsgR01QIG5vdCBhdmFpbGFibGVcIiwgT2JqZWN0LmtleXMoY2hhaW5JbmZvKSk7XG4gIH1cbiAgaWYgKGNoYWluSHViLmlzRW1wdHkoKSkge1xuICAgIHRyYWNlMTYoXCJjaGFpbkh1YjpcIiwgT2JqZWN0LmtleXMoY2hhaW5JbmZvKSk7XG4gICAgcmVnaXN0ZXJDaGFpbnNBbmRBc3NldHMoY2hhaW5IdWIsIGJyYW5kcywgY2hhaW5JbmZvLCBhc3NldEluZm8pO1xuICB9IGVsc2Uge1xuICAgIHRyYWNlMTYoXCJjaGFpbkh1YiBhbHJlYWR5IHBvcHVsYXRlZCwgdXNpbmcgZXhpc3RpbmcgZW50cmllc1wiKTtcbiAgfVxuICBjb25zdCBwcm9wb3NhbFNoYXBlcyA9IG1ha2VQcm9wb3NhbFNoYXBlcyhicmFuZHMuVVNEQywgYnJhbmRzLkFjY2Vzcyk7XG4gIGNvbnN0IG9mZmVyQXJnc1NoYXBlcyA9IG1ha2VPZmZlckFyZ3NTaGFwZXMoYnJhbmRzLlVTREMpO1xuICBjb25zdCBpbmVydFN1YnNjcmliZXIgPSB7XG4gICAgZ2V0VXBkYXRlU2luY2UoKSB7XG4gICAgICBhc3NlcnQuZmFpbChcInVzZSBvZmYtY2hhaW4gcXVlcmllc1wiKTtcbiAgICB9LFxuICAgIHN1YnNjcmliZUFmdGVyKCkge1xuICAgICAgYXNzZXJ0LmZhaWwoXCJ1c2Ugb2ZmLWNoYWluIHF1ZXJpZXNcIik7XG4gICAgfVxuICB9O1xuICBjb25zdCByZXNvbHZlclpvbmUgPSB6b25lLnN1YlpvbmUoXCJSZXNvbHZlclwiKTtcbiAgY29uc3QgbWFrZVJlc29sdmVyS2l0ID0gcHJlcGFyZVJlc29sdmVyS2l0KHJlc29sdmVyWm9uZSwgemNmLCB7XG4gICAgdm93VG9vbHMsXG4gICAgcGVuZGluZ1R4c05vZGU6IEUoc3RvcmFnZU5vZGUpLm1ha2VDaGlsZE5vZGUoUEVORElOR19UWFNfTk9ERV9LRVkpLFxuICAgIG1hcnNoYWxsZXJcbiAgfSk7XG4gIGNvbnN0IHtcbiAgICBjbGllbnQ6IHJlc29sdmVyQ2xpZW50LFxuICAgIGludml0YXRpb25NYWtlcnM6IG1ha2VSZXNvbHZlckludml0YXRpb25NYWtlcnNcbiAgfSA9IHJlc29sdmVyWm9uZS5tYWtlT25jZShcInJlc29sdmVyS2l0XCIsICgpID0+IG1ha2VSZXNvbHZlcktpdCgpKTtcbiAgY29uc3QgeyBtYWtlTENBOiBtYWtlTENBMiB9ID0gb3JjaGVzdHJhdGVBbGwoeyBtYWtlTENBIH0sIHt9KTtcbiAgY29uc3QgY29udHJhY3RBY2NvdW50ViA9IHpvbmUubWFrZU9uY2UoXCJjb250cmFjdEFjY291bnRWXCIsICgpID0+IG1ha2VMQ0EyKCkpO1xuICB2b2lkIHZvd1Rvb2xzLndoZW4oY29udHJhY3RBY2NvdW50ViwgKGFjY3QpID0+IHtcbiAgICBjb25zdCBhZGRyID0gYWNjdC5nZXRBZGRyZXNzKCk7XG4gICAgcHVibGlzaFN0YXR1cyhzdG9yYWdlTm9kZSwgaGFyZGVuKHsgY29udHJhY3RBY2NvdW50OiBhZGRyLnZhbHVlIH0pKTtcbiAgfSk7XG4gIGNvbnN0IGN0eDEgPSB7XG4gICAgem9lVG9vbHMsXG4gICAgLyogWFhYIEd1ZXN0Li4uKi9cbiAgICB1c2RjOiB7XG4gICAgICBicmFuZDogYnJhbmRzLlVTREMsXG4gICAgICBkZW5vbTogTm9uTnVsbGlzaChcbiAgICAgICAgY2hhaW5IdWIuZ2V0RGVub20oYnJhbmRzLlVTREMpLFxuICAgICAgICBcIm5vIGRlbm9tIGZvciBVU0RDIGJyYW5kXCJcbiAgICAgIClcbiAgICB9LFxuICAgIGdtcEZlZUluZm86IHtcbiAgICAgIGJyYW5kOiBicmFuZHMuRmVlLFxuICAgICAgZGVub206IE5vbk51bGxpc2goXG4gICAgICAgIGNoYWluSHViLmdldERlbm9tKGJyYW5kcy5GZWUpLFxuICAgICAgICBcIm5vIGRlbm9tIGZvciBGZWUgYnJhbmRcIlxuICAgICAgKVxuICAgIH0sXG4gICAgYXhlbGFySWRzLFxuICAgIGNvbnRyYWN0cyxcbiAgICBnbXBBZGRyZXNzZXMsXG4gICAgcmVzb2x2ZXJDbGllbnQsXG4gICAgaW5lcnRTdWJzY3JpYmVyLFxuICAgIGNvbnRyYWN0QWNjb3VudDogY29udHJhY3RBY2NvdW50VlxuICAgIC8qIFhYWCBHdWVzdC4uLiovXG4gIH07XG4gIGNvbnN0IHsgcmViYWxhbmNlOiByZWJhbGFuY2UyLCBwYXJzZUluYm91bmRUcmFuc2ZlcjogcGFyc2VJbmJvdW5kVHJhbnNmZXIyIH0gPSBvcmNoZXN0cmF0ZUFsbChcbiAgICB7XG4gICAgICByZWJhbGFuY2UsXG4gICAgICBwYXJzZUluYm91bmRUcmFuc2ZlclxuICAgIH0sXG4gICAgY3R4MVxuICApO1xuICBjb25zdCBtYWtlUG9ydGZvbGlvS2l0ID0gcHJlcGFyZVBvcnRmb2xpb0tpdCh6b25lLCB7XG4gICAgemNmLFxuICAgIHZvd1Rvb2xzLFxuICAgIGF4ZWxhcklkcyxcbiAgICBnbXBBZGRyZXNzZXMsXG4gICAgcmViYWxhbmNlOiByZWJhbGFuY2UyLFxuICAgIHBhcnNlSW5ib3VuZFRyYW5zZmVyOiBwYXJzZUluYm91bmRUcmFuc2ZlcjIsXG4gICAgcHJvcG9zYWxTaGFwZXMsXG4gICAgb2ZmZXJBcmdzU2hhcGVzLFxuICAgIGNoYWluSHViVG9vbHM6IHtcbiAgICAgIGdldENoYWluSW5mbzogY2hhaW5IdWIuZ2V0Q2hhaW5JbmZvLmJpbmQoY2hhaW5IdWIpLFxuICAgICAgZ2V0Q2hhaW5zQW5kQ29ubmVjdGlvbjogY2hhaW5IdWIuZ2V0Q2hhaW5zQW5kQ29ubmVjdGlvbi5iaW5kKGNoYWluSHViKVxuICAgIH0sXG4gICAgcG9ydGZvbGlvc05vZGU6IEUoc3RvcmFnZU5vZGUpLm1ha2VDaGlsZE5vZGUoXCJwb3J0Zm9saW9zXCIpLFxuICAgIG1hcnNoYWxsZXIsXG4gICAgdXNkY0JyYW5kOiBicmFuZHMuVVNEQ1xuICB9KTtcbiAgY29uc3QgcG9ydGZvbGlvcyA9IHpvbmUubWFwU3RvcmUoXCJwb3J0Zm9saW9zXCIpO1xuICBjb25zdCB7IG9wZW5Qb3J0Zm9saW86IG9wZW5Qb3J0Zm9saW8yIH0gPSBvcmNoZXN0cmF0ZUFsbChcbiAgICB7IG9wZW5Qb3J0Zm9saW8gfSxcbiAgICB7XG4gICAgICAuLi5jdHgxLFxuICAgICAgLyogR2VuZXJhdGUgc2VxdWVudGlhbCBwb3J0Zm9saW8gSURzIHdoaWxlIGtlZXBpbmcgdGhlIHBvcnRmb2xpb3MgY29sbGVjdGlvbiBwcml2YXRlLiovXG4gICAgICAvKiBFYWNoIHBvcnRmb2xpbyBraXQgb25seSBnZXRzIGFjY2VzcyB0byBpdHMgb3duIHN0YXRlLCBub3QgdGhlIGZ1bGwgY29sbGVjdGlvbi4qL1xuICAgICAgbWFrZVBvcnRmb2xpb0tpdDogKCgpID0+IHtcbiAgICAgICAgY29uc3QgcG9ydGZvbGlvSWQgPSBwb3J0Zm9saW9zLmdldFNpemUoKTtcbiAgICAgICAgY29uc3QgaXQgPSBtYWtlUG9ydGZvbGlvS2l0KHsgcG9ydGZvbGlvSWQgfSk7XG4gICAgICAgIHBvcnRmb2xpb3MuaW5pdChwb3J0Zm9saW9JZCwgaXQpO1xuICAgICAgICByZXR1cm4gaXQ7XG4gICAgICB9KSxcbiAgICAgIC8qIFhYWCBHdWVzdC4uLiovXG4gICAgICBpbmVydFN1YnNjcmliZXJcbiAgICB9XG4gICk7XG4gIGNvbnN0IHB1YmxpY0ZhY2V0ID0gem9uZS5leG8oXCJQb3J0Zm9saW9QdWJcIiwgaW50ZXJmYWNlVE9ETywge1xuICAgIC8qKlxuICogTWFrZSBhbiBpbnZpdGF0aW9uIHRvIG9wZW4gYSBuZXcgcG9ydGZvbGlvLlxuICpcbiAqIFBvcnRmb2xpbyBob2xkZXJzIG1heSBwcm92aWRlIGZ1bmRzIHRvIGNyZWF0ZSBhIHBvcnRmb2xpb1xuICogdGhhdCBjYW4gYWxsb2NhdGUgY2FwaXRhbCBhY3Jvc3MgZGlmZmVyZW50IHtAbGluayBZaWVsZFByb3RvY29sfXMuXG4gKiBUaGUgcmVzdWx0aW5nIHBvcnRmb2xpbyBjYW4gYmUgcmViYWxhbmNlZCB2aWEgY29udGludWluZyBpbnZpdGF0aW9ucy5cbiAqXG4gKiBAc2VlIHtAbGluayBQcm9wb3NhbFR5cGUub3BlblBvcnRmb2xpb30gZm9yIHByb3Bvc2FsIHN0cnVjdHVyZS5cbiAqICAgTm90ZSB0aGF0IGlmIHRoZSBjb250cmFjdCBpcyBzdGFydGVkIHdpdGggYW4gYEFjY2Vzc2AgaXNzdWVyLFxuICogICBhIG5vbi1lbXB0eSBhbW91bnQgb2YgdGhhdCB0b2tlbiBpcyByZXF1aXJlZC5cbiAqXG4gKiBAc2VlIHtAbGluayBPZmZlckFyZ3NGb3Iub3BlblBvcnRmb2xpb30gZm9yIG9mZmVyIGFyZ3VtZW50c1xuICogQHNlZSB7QGxpbmsgb3BlblBvcnRmb2xpb30gZm9yIHRoZSB1bmRlcmx5aW5nIGZsb3cgaW1wbGVtZW50YXRpb25cbiAqIEBzZWUge0BsaW5rIHJlYmFsYW5jZX0gZm9yIHBvc2l0aW9uIG1hbmFnZW1lbnQgZmxvdyBkZXRhaWxzXG4gKi9cbiAgICBtYWtlT3BlblBvcnRmb2xpb0ludml0YXRpb24oKSB7XG4gICAgICB0cmFjZTE2KFwibWFrZU9wZW5Qb3J0Zm9saW9JbnZpdGF0aW9uXCIpO1xuICAgICAgcmV0dXJuIHpjZi5tYWtlSW52aXRhdGlvbihcbiAgICAgICAgKHNlYXQsIG9mZmVyQXJncykgPT4ge1xuICAgICAgICAgIG11c3RNYXRjaDMob2ZmZXJBcmdzLCBvZmZlckFyZ3NTaGFwZXMub3BlblBvcnRmb2xpbyk7XG4gICAgICAgICAgcmV0dXJuIG9wZW5Qb3J0Zm9saW8yKHNlYXQsIG9mZmVyQXJncyk7XG4gICAgICAgIH0sXG4gICAgICAgIFwib3BlblBvcnRmb2xpb1wiLFxuICAgICAgICB2b2lkIDAsXG4gICAgICAgIHByb3Bvc2FsU2hhcGVzLm9wZW5Qb3J0Zm9saW9cbiAgICAgICk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgbWFrZVJlc29sdmVySW52aXRhdGlvbiA9ICgpID0+IHtcbiAgICB0cmFjZTE2KFwibWFrZVJlc29sdmVySW52aXRhdGlvblwiKTtcbiAgICBjb25zdCByZXNvbHZlckhhbmRsZXIgPSAoc2VhdCkgPT4ge1xuICAgICAgc2VhdC5leGl0KCk7XG4gICAgICByZXR1cm4gaGFyZGVuKHsgaW52aXRhdGlvbk1ha2VyczogbWFrZVJlc29sdmVySW52aXRhdGlvbk1ha2VycyB9KTtcbiAgICB9O1xuICAgIHJldHVybiB6Y2YubWFrZUludml0YXRpb24ocmVzb2x2ZXJIYW5kbGVyLCBcInJlc29sdmVyXCIsIHZvaWQgMCk7XG4gIH07XG4gIGNvbnN0IGdldFBvcnRmb2xpbyA9IChpZCkgPT4gcG9ydGZvbGlvcy5nZXQoaWQpO1xuICBjb25zdCBtYWtlUGxhbm5lciA9IHByZXBhcmVQbGFubmVyKHpvbmUuc3ViWm9uZShcInBsYW5uZXJcIiksIHtcbiAgICB6Y2YsXG4gICAgcmViYWxhbmNlOiByZWJhbGFuY2UyLFxuICAgIGdldFBvcnRmb2xpbyxcbiAgICBzaGFwZXM6IG9mZmVyQXJnc1NoYXBlcyxcbiAgICB2b3dUb29sc1xuICB9KTtcbiAgY29uc3QgbWFrZVBsYW5uZXJJbnZpdGF0aW9uID0gKCkgPT4gemNmLm1ha2VJbnZpdGF0aW9uKChzZWF0KSA9PiB7XG4gICAgc2VhdC5leGl0KCk7XG4gICAgcmV0dXJuIG1ha2VQbGFubmVyKCk7XG4gIH0sIFwicGxhbm5lclwiKTtcbiAgY29uc3QgY3JlYXRvckZhY2V0ID0gem9uZS5leG8oXG4gICAgXCJQb3J0Zm9saW9BZG1pblwiLFxuICAgIE0uaW50ZXJmYWNlKFwiUG9ydGZvbGlvQWRtaW5cIiwge1xuICAgICAgbWFrZVJlc29sdmVySW52aXRhdGlvbjogTS5jYWxsV2hlbigpLnJldHVybnMoSW52aXRhdGlvblNoYXBlKSxcbiAgICAgIGRlbGl2ZXJSZXNvbHZlckludml0YXRpb246IE0uY2FsbFdoZW4oXG4gICAgICAgIE0uc3RyaW5nKCksXG4gICAgICAgIE0ucmVtb3RhYmxlKFwiSW5zdGFuY2VcIilcbiAgICAgICkucmV0dXJucygpLFxuICAgICAgbWFrZVBsYW5uZXJJbnZpdGF0aW9uOiBNLmNhbGxXaGVuKCkucmV0dXJucyhJbnZpdGF0aW9uU2hhcGUpLFxuICAgICAgZGVsaXZlclBsYW5uZXJJbnZpdGF0aW9uOiBNLmNhbGxXaGVuKFxuICAgICAgICBNLnN0cmluZygpLFxuICAgICAgICBNLnJlbW90YWJsZShcIkluc3RhbmNlXCIpXG4gICAgICApLnJldHVybnMoKVxuICAgIH0pLFxuICAgIHtcbiAgICAgIG1ha2VSZXNvbHZlckludml0YXRpb24oKSB7XG4gICAgICAgIHJldHVybiBtYWtlUmVzb2x2ZXJJbnZpdGF0aW9uKCk7XG4gICAgICB9LFxuICAgICAgYXN5bmMgZGVsaXZlclJlc29sdmVySW52aXRhdGlvbihhZGRyZXNzLCBpbnN0YW5jZVBTKSB7XG4gICAgICAgIGNvbnN0IHpvZSA9IHpjZi5nZXRab2VTZXJ2aWNlKCk7XG4gICAgICAgIGNvbnN0IHBmUCA9IEUoem9lKS5nZXRQdWJsaWNGYWNldChpbnN0YW5jZVBTKTtcbiAgICAgICAgY29uc3QgaW52aXRhdGlvbiA9IGF3YWl0IG1ha2VSZXNvbHZlckludml0YXRpb24oKTtcbiAgICAgICAgdHJhY2UxNihcIm1hZGUgcmVzb2x2ZXIgaW52aXRhdGlvblwiLCBpbnZpdGF0aW9uKTtcbiAgICAgICAgYXdhaXQgRShwZlApLmRlbGl2ZXJQYXltZW50KGFkZHJlc3MsIGludml0YXRpb24pO1xuICAgICAgICB0cmFjZTE2KFwiZGVsaXZlcmVkIHJlc29sdmVyIGludml0YXRpb25cIik7XG4gICAgICB9LFxuICAgICAgbWFrZVBsYW5uZXJJbnZpdGF0aW9uKCkge1xuICAgICAgICByZXR1cm4gbWFrZVBsYW5uZXJJbnZpdGF0aW9uKCk7XG4gICAgICB9LFxuICAgICAgLyoqXG4gKiBNYWtlIGFuZCBkZWxpdmVyIGEgcGxhbm5lciBpbnZpdGF0aW9uIHRvIHRoZSBzcGVjaWZpZWQgYWRkcmVzcy5cbiAqXG4gKiBOb3RlOiBDb250cmFjdCBoYW5kbGVzIGRlbGl2ZXJ5IGR1ZSB0byB3YWxsZXQgRFNMIGxpbWl0YXRpb25zIC0gc2VlIENPTlRSSUJVVElORy5tZFxuICogc2VjdGlvbiBcIkludml0YXRpb24gRGVsaXZlcnkgTGltaXRhdGlvbnMgaW4gdGhlIFdhbGxldCBBY3Rpb24gRFNMXCIgZm9yIGFyY2hpdGVjdHVyYWwgY29udGV4dC5cbiAqXG4gKiBAcGFyYW0gYWRkcmVzcyAtIEFnb3JpYyBhZGRyZXNzIHdoZXJlIHRvIGRlbGl2ZXIgdGhlIHBsYW5uZXIgaW52aXRhdGlvblxuICogQHBhcmFtIGluc3RhbmNlUFMgLSBQb3N0YWwgc2VydmljZSBpbnN0YW5jZSBmb3IgZGVsaXZlcnlcbiAqL1xuICAgICAgYXN5bmMgZGVsaXZlclBsYW5uZXJJbnZpdGF0aW9uKGFkZHJlc3MsIGluc3RhbmNlUFMpIHtcbiAgICAgICAgdHJhY2UxNihcImRlbGl2ZXJQbGFubmVySW52aXRhdGlvblwiLCBhZGRyZXNzLCBpbnN0YW5jZVBTKTtcbiAgICAgICAgY29uc3Qgem9lID0gemNmLmdldFpvZVNlcnZpY2UoKTtcbiAgICAgICAgY29uc3QgcGZQID0gRSh6b2UpLmdldFB1YmxpY0ZhY2V0KGluc3RhbmNlUFMpO1xuICAgICAgICBjb25zdCBpbnZpdGF0aW9uID0gYXdhaXQgbWFrZVBsYW5uZXJJbnZpdGF0aW9uKCk7XG4gICAgICAgIHRyYWNlMTYoXCJtYWRlIHBsYW5uZXIgaW52aXRhdGlvblwiLCBpbnZpdGF0aW9uKTtcbiAgICAgICAgYXdhaXQgRShwZlApLmRlbGl2ZXJQYXltZW50KGFkZHJlc3MsIGludml0YXRpb24pO1xuICAgICAgICB0cmFjZTE2KFwiZGVsaXZlcmVkIHBsYW5uZXIgaW52aXRhdGlvblwiKTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIHJldHVybiB7IGNyZWF0b3JGYWNldCwgcHVibGljRmFjZXQgfTtcbn07Y29udHJhY3Q9JGPNj19jb250cmFjdDtcbmhhcmRlbihjb250cmFjdCk7XG52YXIgJGPNj19zdGFydD13aXRoT3JjaGVzdHJhdGlvbihjb250cmFjdCk7c3RhcnQ9JGPNj19zdGFydDtcbmhhcmRlbihzdGFydCk7XG59KSgpXG4iLCJfX2xpdmVFeHBvcnRNYXBfXyI6eyJBeGVsYXJDb25maWdTaGFwZSI6WyJBeGVsYXJDb25maWdTaGFwZSIsdHJ1ZV0sIm1ldGEiOlsibWV0YSIsdHJ1ZV0sImNvbnRyYWN0IjpbImNvbnRyYWN0Iix0cnVlXSwic3RhcnQiOlsic3RhcnQiLHRydWVdfSwiX19yZWV4cG9ydE1hcF9fIjp7fSwiX19maXhlZEV4cG9ydE1hcF9fIjp7fSwiX19uZWVkc0ltcG9ydF9fIjpmYWxzZSwiX19uZWVkc0ltcG9ydE1ldGFfXyI6ZmFsc2V9UEsBAh4DCgAAAAAAAAAAAMS5nn+2AgAAtgIAABQAAAAAAAAAAAAAAKSBAAAAAGNvbXBhcnRtZW50LW1hcC5qc29uUEsBAh4DCgAAAAAAAAAAAKnnB9pHJQ8ARyUPAEIAAAAAAAAAAAAAAKSB6AIAAEBhZ2xvY2FsL3BvcnRmb2xpby1kZXBsb3ktdjAuMS4wL2Rpc3QvcG9ydGZvbGlvLmNvbnRyYWN0LmJ1bmRsZS5qc1BLBQYAAAAAAgACALIAAACPKA8AAAA=","endoZipBase64Sha512":"078729b9683de5f81afe8b14bd163f0165b8dd803f587413df8dff76b557d56e5d0d67f8f654bc920b5bb3a734d7d7644791692efbbc08c08984e37c6e0e6c88"}