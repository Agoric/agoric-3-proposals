{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "9d3c89aa07f23338ca990bc2dba3f05d6de7a1bbbce6b2228070df6220b53627ba0a630b7fc16edbf36ff514f9801540f799a4ea68158a8b708ed6b4eb0ccd36"
}