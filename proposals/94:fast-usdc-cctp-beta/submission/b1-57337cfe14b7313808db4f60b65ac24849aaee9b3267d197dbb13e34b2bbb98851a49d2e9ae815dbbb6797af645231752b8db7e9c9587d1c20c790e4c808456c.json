{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "57337cfe14b7313808db4f60b65ac24849aaee9b3267d197dbb13e34b2bbb98851a49d2e9ae815dbbb6797af645231752b8db7e9c9587d1c20c790e4c808456c"
}