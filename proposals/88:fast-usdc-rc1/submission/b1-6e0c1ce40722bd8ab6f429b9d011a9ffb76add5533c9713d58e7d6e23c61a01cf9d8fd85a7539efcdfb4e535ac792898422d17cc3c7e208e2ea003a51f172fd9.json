{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "6e0c1ce40722bd8ab6f429b9d011a9ffb76add5533c9713d58e7d6e23c61a01cf9d8fd85a7539efcdfb4e535ac792898422d17cc3c7e208e2ea003a51f172fd9"
}