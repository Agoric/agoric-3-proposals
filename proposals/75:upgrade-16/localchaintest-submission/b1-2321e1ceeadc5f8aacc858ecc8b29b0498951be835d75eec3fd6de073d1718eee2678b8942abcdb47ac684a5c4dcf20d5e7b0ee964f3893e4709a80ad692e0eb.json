{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "2321e1ceeadc5f8aacc858ecc8b29b0498951be835d75eec3fd6de073d1718eee2678b8942abcdb47ac684a5c4dcf20d5e7b0ee964f3893e4709a80ad692e0eb"
}