{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "db507028460b0c9ad9b16a1e1094b4cd09cfbdc1779c992b42d828745788d98393ca4740599ac4b2e3a6f4bd8d9018aad6d509107eced9253fe7d3c0085709a7"
}