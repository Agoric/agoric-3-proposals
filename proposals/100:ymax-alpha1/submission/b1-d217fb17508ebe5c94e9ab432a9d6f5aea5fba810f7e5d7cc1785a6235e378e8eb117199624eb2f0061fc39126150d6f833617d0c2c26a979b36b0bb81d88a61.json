{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "d217fb17508ebe5c94e9ab432a9d6f5aea5fba810f7e5d7cc1785a6235e378e8eb117199624eb2f0061fc39126150d6f833617d0c2c26a979b36b0bb81d88a61"
}