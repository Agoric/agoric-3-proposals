{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "UEsDBAoAAAAAAAAAAAB+x63ntgIAALYCAAAUAAAAY29tcGFydG1lbnQtbWFwLmpzb257CiAgInRhZ3MiOiBbXSwKICAiZW50cnkiOiB7CiAgICAiY29tcGFydG1lbnQiOiAiQGFnbG9jYWwvcG9ydGZvbGlvLWRlcGxveS12MC4xLjAiLAogICAgIm1vZHVsZSI6ICIuL2Rpc3QvcG9ydGZvbGlvLmNvbnRyYWN0LmJ1bmRsZS5qcyIKICB9LAogICJjb21wYXJ0bWVudHMiOiB7CiAgICAiQGFnbG9jYWwvcG9ydGZvbGlvLWRlcGxveS12MC4xLjAiOiB7CiAgICAgICJuYW1lIjogIkBhZ2xvY2FsL3BvcnRmb2xpby1kZXBsb3kiLAogICAgICAibGFiZWwiOiAiQGFnbG9jYWwvcG9ydGZvbGlvLWRlcGxveS12MC4xLjAiLAogICAgICAibG9jYXRpb24iOiAiQGFnbG9jYWwvcG9ydGZvbGlvLWRlcGxveS12MC4xLjAiLAogICAgICAibW9kdWxlcyI6IHsKICAgICAgICAiLi9kaXN0L3BvcnRmb2xpby5jb250cmFjdC5idW5kbGUuanMiOiB7CiAgICAgICAgICAibG9jYXRpb24iOiAiZGlzdC9wb3J0Zm9saW8uY29udHJhY3QuYnVuZGxlLmpzIiwKICAgICAgICAgICJwYXJzZXIiOiAicHJlLW1qcy1qc29uIiwKICAgICAgICAgICJzaGE1MTIiOiAiOTQ0YjdmODljYWZmN2EyZDNlZGQ5YWRlMzkzZmVkYzc4ODM2MjFkYTQ1ODdlYjQ2Nzg4YTBmZGMxNDc2ZDk5OWQ1MTFjODMyMDVjNWEyMjViZjA4YjEwZWFmODFjOTc2YjMyNGE1Y2RjNzg2YTMzMmUxNzMyYmMzNGU5YzExYmMiCiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9UEsDBAoAAAAAAAAAAAAPDT35xDIOAMQyDgBCAAAAQGFnbG9jYWwvcG9ydGZvbGlvLWRlcGxveS12MC4xLjAvZGlzdC9wb3J0Zm9saW8uY29udHJhY3QuYnVuZGxlLmpzeyJpbXBvcnRzIjpbXSwiZXhwb3J0cyI6WyJBeGVsYXJDb25maWdTaGFwZSIsImNvbnRyYWN0IiwibWV0YSIsInN0YXJ0Il0sInJlZXhwb3J0cyI6W10sIl9fc3luY01vZHVsZVByb2dyYW1fXyI6Iih7aW1wb3J0czokaM2PX2ltcG9ydHMsbGl2ZVZhcjokaM2PX2xpdmUsb25jZVZhcjokaM2PX29uY2UsaW1wb3J0OiRozY9faW1wb3J0LGltcG9ydE1ldGE6JGjNj19fX19tZXRhfSk9PihmdW5jdGlvbigpeyd1c2Ugc3RyaWN0JzskaM2PX2ltcG9ydHMoW10pOyRozY9fbGl2ZS5BeGVsYXJDb25maWdTaGFwZSgpOyRozY9fbGl2ZS5tZXRhKCk7JGjNj19saXZlLmNvbnRyYWN0KCk7JGjNj19saXZlLnN0YXJ0KCk7dmFyIF9fY3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2dldFByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2VzbSA9IChmbiwgcmVzKSA9PiBmdW5jdGlvbiBfX2luaXQoKSB7XG4gIHJldHVybiBmbiAmJiAocmVzID0gKDAsIGZuW19fZ2V0T3duUHJvcE5hbWVzKGZuKVswXV0pKGZuID0gMCkpLCByZXM7XG59O1xudmFyIF9fY29tbW9uSlMgPSAoY2IsIG1vZCkgPT4gZnVuY3Rpb24gX19yZXF1aXJlMigpIHtcbiAgcmV0dXJuIG1vZCB8fCAoMCwgY2JbX19nZXRPd25Qcm9wTmFtZXMoY2IpWzBdXSkoKG1vZCA9IHsgZXhwb3J0czoge30gfSkuZXhwb3J0cywgbW9kKSwgbW9kLmV4cG9ydHM7XG59O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00gPSAobW9kLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QgIT0gbnVsbCA/IF9fY3JlYXRlKF9fZ2V0UHJvdG9PZihtb2QpKSA6IHt9LCBfX2NvcHlQcm9wcyhcbiAgLy9cbiAgLy9cbiAgLy9cbiAgLy9cbiAgaXNOb2RlTW9kZSB8fCAhbW9kIHx8ICFtb2QuX19lc01vZHVsZSA/IF9fZGVmUHJvcCh0YXJnZXQsIFwiZGVmYXVsdFwiLCB7IHZhbHVlOiBtb2QsIGVudW1lcmFibGU6IHRydWUgfSkgOiB0YXJnZXQsXG4gIG1vZFxuKSk7XG5cbi8vXG52YXIgcmVxdWlyZV9hc2NpaSA9IF9fY29tbW9uSlMoe1xuICBcIi4uL29yY2hlc3RyYXRpb24vbm9kZV9tb2R1bGVzL0Bjb3NtanMvZW5jb2RpbmcvYnVpbGQvYXNjaWkuanNcIihleHBvcnRzKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuICAgIGV4cG9ydHMuZnJvbUFzY2lpID0gZXhwb3J0cy50b0FzY2lpID0gdm9pZCAwO1xuICAgIGZ1bmN0aW9uIHRvQXNjaWkoaW5wdXQpIHtcbiAgICAgIGNvbnN0IHRvTnVtcyA9IChzdHIpID0+IHN0ci5zcGxpdChcIlwiKS5tYXAoKHgpID0+IHtcbiAgICAgICAgY29uc3QgY2hhckNvZGUgPSB4LmNoYXJDb2RlQXQoMCk7XG4gICAgICAgIGlmIChjaGFyQ29kZSA8IDMyIHx8IGNoYXJDb2RlID4gMTI2KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGVuY29kZSBjaGFyYWN0ZXIgdGhhdCBpcyBvdXQgb2YgcHJpbnRhYmxlIEFTQ0lJIHJhbmdlOiBcIiArIGNoYXJDb2RlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhckNvZGU7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20odG9OdW1zKGlucHV0KSk7XG4gICAgfVxuICAgIGV4cG9ydHMudG9Bc2NpaSA9IHRvQXNjaWk7XG4gICAgZnVuY3Rpb24gZnJvbUFzY2lpKGRhdGEpIHtcbiAgICAgIGNvbnN0IGZyb21OdW1zID0gKGxpc3RPZk51bWJlcnMpID0+IGxpc3RPZk51bWJlcnMubWFwKCh4KSA9PiB7XG4gICAgICAgIGlmICh4IDwgMzIgfHwgeCA+IDEyNikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBkZWNvZGUgY2hhcmFjdGVyIHRoYXQgaXMgb3V0IG9mIHByaW50YWJsZSBBU0NJSSByYW5nZTogXCIgKyB4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh4KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZyb21OdW1zKEFycmF5LmZyb20oZGF0YSkpLmpvaW4oXCJcIik7XG4gICAgfVxuICAgIGV4cG9ydHMuZnJvbUFzY2lpID0gZnJvbUFzY2lpO1xuICB9XG59KTtcblxuLy9cbnZhciByZXF1aXJlX2Jhc2U2NF9qcyA9IF9fY29tbW9uSlMoe1xuICBcIi4uLy4uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanNcIihleHBvcnRzKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aDtcbiAgICBleHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXk7XG4gICAgZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheTtcbiAgICB2YXIgbG9va3VwID0gW107XG4gICAgdmFyIHJldkxvb2t1cCA9IFtdO1xuICAgIHZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gXCJ1bmRlZmluZWRcIiA/IFVpbnQ4QXJyYXkgOiBBcnJheTtcbiAgICB2YXIgY29kZSA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xuICAgIGZvciAoaTMgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaTMgPCBsZW47ICsraTMpIHtcbiAgICAgIGxvb2t1cFtpM10gPSBjb2RlW2kzXTtcbiAgICAgIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaTMpXSA9IGkzO1xuICAgIH1cbiAgICB2YXIgaTM7XG4gICAgdmFyIGxlbjtcbiAgICByZXZMb29rdXBbXCItXCIuY2hhckNvZGVBdCgwKV0gPSA2MjtcbiAgICByZXZMb29rdXBbXCJfXCIuY2hhckNvZGVBdCgwKV0gPSA2MztcbiAgICBmdW5jdGlvbiBnZXRMZW5zKGI2NCkge1xuICAgICAgdmFyIGxlbjIgPSBiNjQubGVuZ3RoO1xuICAgICAgaWYgKGxlbjIgJSA0ID4gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0XCIpO1xuICAgICAgfVxuICAgICAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoXCI9XCIpO1xuICAgICAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW4yO1xuICAgICAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW4yID8gMCA6IDQgLSB2YWxpZExlbiAlIDQ7XG4gICAgICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dO1xuICAgIH1cbiAgICBmdW5jdGlvbiBieXRlTGVuZ3RoKGI2NCkge1xuICAgICAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NCk7XG4gICAgICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdO1xuICAgICAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV07XG4gICAgICByZXR1cm4gKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzTGVuO1xuICAgIH1cbiAgICBmdW5jdGlvbiBfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgICAgIHJldHVybiAodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQgLSBwbGFjZUhvbGRlcnNMZW47XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRvQnl0ZUFycmF5KGI2NCkge1xuICAgICAgdmFyIHRtcDtcbiAgICAgIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpO1xuICAgICAgdmFyIHZhbGlkTGVuID0gbGVuc1swXTtcbiAgICAgIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdO1xuICAgICAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSk7XG4gICAgICB2YXIgY3VyQnl0ZSA9IDA7XG4gICAgICB2YXIgbGVuMiA9IHBsYWNlSG9sZGVyc0xlbiA+IDAgPyB2YWxpZExlbiAtIDQgOiB2YWxpZExlbjtcbiAgICAgIHZhciBpNDtcbiAgICAgIGZvciAoaTQgPSAwOyBpNCA8IGxlbjI7IGk0ICs9IDQpIHtcbiAgICAgICAgdG1wID0gcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGk0KV0gPDwgMTggfCByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaTQgKyAxKV0gPDwgMTIgfCByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaTQgKyAyKV0gPDwgNiB8IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpNCArIDMpXTtcbiAgICAgICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgPj4gMTYgJiAyNTU7XG4gICAgICAgIGFycltjdXJCeXRlKytdID0gdG1wID4+IDggJiAyNTU7XG4gICAgICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMjU1O1xuICAgICAgfVxuICAgICAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgICAgICB0bXAgPSByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaTQpXSA8PCAyIHwgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGk0ICsgMSldID4+IDQ7XG4gICAgICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMjU1O1xuICAgICAgfVxuICAgICAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgICAgICB0bXAgPSByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaTQpXSA8PCAxMCB8IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpNCArIDEpXSA8PCA0IHwgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGk0ICsgMildID4+IDI7XG4gICAgICAgIGFycltjdXJCeXRlKytdID0gdG1wID4+IDggJiAyNTU7XG4gICAgICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMjU1O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0KG51bSkge1xuICAgICAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiA2M10gKyBsb29rdXBbbnVtID4+IDEyICYgNjNdICsgbG9va3VwW251bSA+PiA2ICYgNjNdICsgbG9va3VwW251bSAmIDYzXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW5jb2RlQ2h1bmsodWludDgsIHN0YXJ0MiwgZW5kKSB7XG4gICAgICB2YXIgdG1wO1xuICAgICAgdmFyIG91dHB1dDIgPSBbXTtcbiAgICAgIGZvciAodmFyIGk0ID0gc3RhcnQyOyBpNCA8IGVuZDsgaTQgKz0gMykge1xuICAgICAgICB0bXAgPSAodWludDhbaTRdIDw8IDE2ICYgMTY3MTE2ODApICsgKHVpbnQ4W2k0ICsgMV0gPDwgOCAmIDY1MjgwKSArICh1aW50OFtpNCArIDJdICYgMjU1KTtcbiAgICAgICAgb3V0cHV0Mi5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXRwdXQyLmpvaW4oXCJcIik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZyb21CeXRlQXJyYXkodWludDgpIHtcbiAgICAgIHZhciB0bXA7XG4gICAgICB2YXIgbGVuMiA9IHVpbnQ4Lmxlbmd0aDtcbiAgICAgIHZhciBleHRyYUJ5dGVzID0gbGVuMiAlIDM7XG4gICAgICB2YXIgcGFydHMgPSBbXTtcbiAgICAgIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzO1xuICAgICAgZm9yICh2YXIgaTQgPSAwLCBsZW4yMiA9IGxlbjIgLSBleHRyYUJ5dGVzOyBpNCA8IGxlbjIyOyBpNCArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKHVpbnQ4LCBpNCwgaTQgKyBtYXhDaHVua0xlbmd0aCA+IGxlbjIyID8gbGVuMjIgOiBpNCArIG1heENodW5rTGVuZ3RoKSk7XG4gICAgICB9XG4gICAgICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgICAgICB0bXAgPSB1aW50OFtsZW4yIC0gMV07XG4gICAgICAgIHBhcnRzLnB1c2goXG4gICAgICAgICAgbG9va3VwW3RtcCA+PiAyXSArIGxvb2t1cFt0bXAgPDwgNCAmIDYzXSArIFwiPT1cIlxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgICAgIHRtcCA9ICh1aW50OFtsZW4yIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4yIC0gMV07XG4gICAgICAgIHBhcnRzLnB1c2goXG4gICAgICAgICAgbG9va3VwW3RtcCA+PiAxMF0gKyBsb29rdXBbdG1wID4+IDQgJiA2M10gKyBsb29rdXBbdG1wIDw8IDIgJiA2M10gKyBcIj1cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oXCJcIik7XG4gICAgfVxuICB9XG59KTtcblxuLy9cbnZhciByZXF1aXJlX2Jhc2U2NCA9IF9fY29tbW9uSlMoe1xuICBcIi4uL29yY2hlc3RyYXRpb24vbm9kZV9tb2R1bGVzL0Bjb3NtanMvZW5jb2RpbmcvYnVpbGQvYmFzZTY0LmpzXCIoZXhwb3J0cykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBleHBvcnRzICYmIGV4cG9ydHMuX19jcmVhdGVCaW5kaW5nIHx8IChPYmplY3QuY3JlYXRlID8gZnVuY3Rpb24obzIsIG0yLCBrLCBrMikge1xuICAgICAgaWYgKGsyID09PSB2b2lkIDApIGsyID0gaztcbiAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtMiwgayk7XG4gICAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtMi5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gbTJba107XG4gICAgICAgIH0gfTtcbiAgICAgIH1cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvMiwgazIsIGRlc2MpO1xuICAgIH0gOiBmdW5jdGlvbihvMiwgbTIsIGssIGsyKSB7XG4gICAgICBpZiAoazIgPT09IHZvaWQgMCkgazIgPSBrO1xuICAgICAgbzJbazJdID0gbTJba107XG4gICAgfSk7XG4gICAgdmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IGV4cG9ydHMgJiYgZXhwb3J0cy5fX3NldE1vZHVsZURlZmF1bHQgfHwgKE9iamVjdC5jcmVhdGUgPyBmdW5jdGlvbihvMiwgdjIpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvMiwgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYyIH0pO1xuICAgIH0gOiBmdW5jdGlvbihvMiwgdjIpIHtcbiAgICAgIG8yW1wiZGVmYXVsdFwiXSA9IHYyO1xuICAgIH0pO1xuICAgIHZhciBfX2ltcG9ydFN0YXIgPSBleHBvcnRzICYmIGV4cG9ydHMuX19pbXBvcnRTdGFyIHx8IGZ1bmN0aW9uKG1vZCkge1xuICAgICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmIChtb2QgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgICAgfVxuICAgICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4gICAgZXhwb3J0cy5mcm9tQmFzZTY0ID0gZXhwb3J0cy50b0Jhc2U2NCA9IHZvaWQgMDtcbiAgICB2YXIgYmFzZTY0anMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZV9iYXNlNjRfanMoKSk7XG4gICAgZnVuY3Rpb24gdG9CYXNlNjQoZGF0YSkge1xuICAgICAgcmV0dXJuIGJhc2U2NGpzLmZyb21CeXRlQXJyYXkoZGF0YSk7XG4gICAgfVxuICAgIGV4cG9ydHMudG9CYXNlNjQgPSB0b0Jhc2U2NDtcbiAgICBmdW5jdGlvbiBmcm9tQmFzZTY0KGJhc2U2NFN0cmluZykge1xuICAgICAgaWYgKCFiYXNlNjRTdHJpbmcubWF0Y2goL15bYS16QS1aMC05Ky9dKj17MCwyfSQvKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJhc2U2NCBzdHJpbmcgZm9ybWF0XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2U2NGpzLnRvQnl0ZUFycmF5KGJhc2U2NFN0cmluZyk7XG4gICAgfVxuICAgIGV4cG9ydHMuZnJvbUJhc2U2NCA9IGZyb21CYXNlNjQ7XG4gIH1cbn0pO1xuXG4vL1xudmFyIHJlcXVpcmVfYmVjaDMyID0gX19jb21tb25KUyh7XG4gIFwiLi4vb3JjaGVzdHJhdGlvbi9ub2RlX21vZHVsZXMvQGNvc21qcy9lbmNvZGluZy9ub2RlX21vZHVsZXMvYmVjaDMyL2luZGV4LmpzXCIoZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIEFMUEhBQkVUMiA9IFwicXB6cnk5eDhnZjJ0dmR3MHMzam41NGtoY2U2bXVhN2xcIjtcbiAgICB2YXIgQUxQSEFCRVRfTUFQID0ge307XG4gICAgZm9yICh6ID0gMDsgeiA8IEFMUEhBQkVUMi5sZW5ndGg7IHorKykge1xuICAgICAgeCA9IEFMUEhBQkVUMi5jaGFyQXQoeik7XG4gICAgICBpZiAoQUxQSEFCRVRfTUFQW3hdICE9PSB2b2lkIDApIHRocm93IG5ldyBUeXBlRXJyb3IoeCArIFwiIGlzIGFtYmlndW91c1wiKTtcbiAgICAgIEFMUEhBQkVUX01BUFt4XSA9IHo7XG4gICAgfVxuICAgIHZhciB4O1xuICAgIHZhciB6O1xuICAgIGZ1bmN0aW9uIHBvbHltb2RTdGVwKHByZSkge1xuICAgICAgdmFyIGIzID0gcHJlID4+IDI1O1xuICAgICAgcmV0dXJuIChwcmUgJiAzMzU1NDQzMSkgPDwgNSBeIC0oYjMgPj4gMCAmIDEpICYgOTk2ODI1MDEwIF4gLShiMyA+PiAxICYgMSkgJiA2NDI4MTM1NDkgXiAtKGIzID4+IDIgJiAxKSAmIDUxMzg3NDQyNiBeIC0oYjMgPj4gMyAmIDEpICYgMTAyNzc0ODgyOSBeIC0oYjMgPj4gNCAmIDEpICYgNzA1OTc5MDU5O1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcmVmaXhDaGsocHJlZml4KSB7XG4gICAgICB2YXIgY2hrID0gMTtcbiAgICAgIGZvciAodmFyIGkzID0gMDsgaTMgPCBwcmVmaXgubGVuZ3RoOyArK2kzKSB7XG4gICAgICAgIHZhciBjMiA9IHByZWZpeC5jaGFyQ29kZUF0KGkzKTtcbiAgICAgICAgaWYgKGMyIDwgMzMgfHwgYzIgPiAxMjYpIHJldHVybiBcIkludmFsaWQgcHJlZml4IChcIiArIHByZWZpeCArIFwiKVwiO1xuICAgICAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4gYzIgPj4gNTtcbiAgICAgIH1cbiAgICAgIGNoayA9IHBvbHltb2RTdGVwKGNoayk7XG4gICAgICBmb3IgKGkzID0gMDsgaTMgPCBwcmVmaXgubGVuZ3RoOyArK2kzKSB7XG4gICAgICAgIHZhciB2MiA9IHByZWZpeC5jaGFyQ29kZUF0KGkzKTtcbiAgICAgICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKSBeIHYyICYgMzE7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2hrO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlbmNvZGUyKHByZWZpeCwgd29yZHMsIExJTUlUKSB7XG4gICAgICBMSU1JVCA9IExJTUlUIHx8IDkwO1xuICAgICAgaWYgKHByZWZpeC5sZW5ndGggKyA3ICsgd29yZHMubGVuZ3RoID4gTElNSVQpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFeGNlZWRzIGxlbmd0aCBsaW1pdFwiKTtcbiAgICAgIHByZWZpeCA9IHByZWZpeC50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIGNoayA9IHByZWZpeENoayhwcmVmaXgpO1xuICAgICAgaWYgKHR5cGVvZiBjaGsgPT09IFwic3RyaW5nXCIpIHRocm93IG5ldyBFcnJvcihjaGspO1xuICAgICAgdmFyIHJlc3VsdCA9IHByZWZpeCArIFwiMVwiO1xuICAgICAgZm9yICh2YXIgaTMgPSAwOyBpMyA8IHdvcmRzLmxlbmd0aDsgKytpMykge1xuICAgICAgICB2YXIgeDIgPSB3b3Jkc1tpM107XG4gICAgICAgIGlmICh4MiA+PiA1ICE9PSAwKSB0aHJvdyBuZXcgRXJyb3IoXCJOb24gNS1iaXQgd29yZFwiKTtcbiAgICAgICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKSBeIHgyO1xuICAgICAgICByZXN1bHQgKz0gQUxQSEFCRVQyLmNoYXJBdCh4Mik7XG4gICAgICB9XG4gICAgICBmb3IgKGkzID0gMDsgaTMgPCA2OyArK2kzKSB7XG4gICAgICAgIGNoayA9IHBvbHltb2RTdGVwKGNoayk7XG4gICAgICB9XG4gICAgICBjaGsgXj0gMTtcbiAgICAgIGZvciAoaTMgPSAwOyBpMyA8IDY7ICsraTMpIHtcbiAgICAgICAgdmFyIHYyID0gY2hrID4+ICg1IC0gaTMpICogNSAmIDMxO1xuICAgICAgICByZXN1bHQgKz0gQUxQSEFCRVQyLmNoYXJBdCh2Mik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBfX2RlY29kZShzdHIsIExJTUlUKSB7XG4gICAgICBMSU1JVCA9IExJTUlUIHx8IDkwO1xuICAgICAgaWYgKHN0ci5sZW5ndGggPCA4KSByZXR1cm4gc3RyICsgXCIgdG9vIHNob3J0XCI7XG4gICAgICBpZiAoc3RyLmxlbmd0aCA+IExJTUlUKSByZXR1cm4gXCJFeGNlZWRzIGxlbmd0aCBsaW1pdFwiO1xuICAgICAgdmFyIGxvd2VyZWQgPSBzdHIudG9Mb3dlckNhc2UoKTtcbiAgICAgIHZhciB1cHBlcmVkID0gc3RyLnRvVXBwZXJDYXNlKCk7XG4gICAgICBpZiAoc3RyICE9PSBsb3dlcmVkICYmIHN0ciAhPT0gdXBwZXJlZCkgcmV0dXJuIFwiTWl4ZWQtY2FzZSBzdHJpbmcgXCIgKyBzdHI7XG4gICAgICBzdHIgPSBsb3dlcmVkO1xuICAgICAgdmFyIHNwbGl0MiA9IHN0ci5sYXN0SW5kZXhPZihcIjFcIik7XG4gICAgICBpZiAoc3BsaXQyID09PSAtMSkgcmV0dXJuIFwiTm8gc2VwYXJhdG9yIGNoYXJhY3RlciBmb3IgXCIgKyBzdHI7XG4gICAgICBpZiAoc3BsaXQyID09PSAwKSByZXR1cm4gXCJNaXNzaW5nIHByZWZpeCBmb3IgXCIgKyBzdHI7XG4gICAgICB2YXIgcHJlZml4ID0gc3RyLnNsaWNlKDAsIHNwbGl0Mik7XG4gICAgICB2YXIgd29yZENoYXJzID0gc3RyLnNsaWNlKHNwbGl0MiArIDEpO1xuICAgICAgaWYgKHdvcmRDaGFycy5sZW5ndGggPCA2KSByZXR1cm4gXCJEYXRhIHRvbyBzaG9ydFwiO1xuICAgICAgdmFyIGNoayA9IHByZWZpeENoayhwcmVmaXgpO1xuICAgICAgaWYgKHR5cGVvZiBjaGsgPT09IFwic3RyaW5nXCIpIHJldHVybiBjaGs7XG4gICAgICB2YXIgd29yZHMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkzID0gMDsgaTMgPCB3b3JkQ2hhcnMubGVuZ3RoOyArK2kzKSB7XG4gICAgICAgIHZhciBjMiA9IHdvcmRDaGFycy5jaGFyQXQoaTMpO1xuICAgICAgICB2YXIgdjIgPSBBTFBIQUJFVF9NQVBbYzJdO1xuICAgICAgICBpZiAodjIgPT09IHZvaWQgMCkgcmV0dXJuIFwiVW5rbm93biBjaGFyYWN0ZXIgXCIgKyBjMjtcbiAgICAgICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKSBeIHYyO1xuICAgICAgICBpZiAoaTMgKyA2ID49IHdvcmRDaGFycy5sZW5ndGgpIGNvbnRpbnVlO1xuICAgICAgICB3b3Jkcy5wdXNoKHYyKTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGsgIT09IDEpIHJldHVybiBcIkludmFsaWQgY2hlY2tzdW0gZm9yIFwiICsgc3RyO1xuICAgICAgcmV0dXJuIHsgcHJlZml4LCB3b3JkcyB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBkZWNvZGVVbnNhZmUoKSB7XG4gICAgICB2YXIgcmVzID0gX19kZWNvZGUuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgIGlmICh0eXBlb2YgcmVzID09PSBcIm9iamVjdFwiKSByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkZWNvZGUzKHN0cikge1xuICAgICAgdmFyIHJlcyA9IF9fZGVjb2RlLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodHlwZW9mIHJlcyA9PT0gXCJvYmplY3RcIikgcmV0dXJuIHJlcztcbiAgICAgIHRocm93IG5ldyBFcnJvcihyZXMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb252ZXJ0KGRhdGEsIGluQml0cywgb3V0Qml0cywgcGFkKSB7XG4gICAgICB2YXIgdmFsdWUgPSAwO1xuICAgICAgdmFyIGJpdHMgPSAwO1xuICAgICAgdmFyIG1heFYgPSAoMSA8PCBvdXRCaXRzKSAtIDE7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKHZhciBpMyA9IDA7IGkzIDwgZGF0YS5sZW5ndGg7ICsraTMpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZSA8PCBpbkJpdHMgfCBkYXRhW2kzXTtcbiAgICAgICAgYml0cyArPSBpbkJpdHM7XG4gICAgICAgIHdoaWxlIChiaXRzID49IG91dEJpdHMpIHtcbiAgICAgICAgICBiaXRzIC09IG91dEJpdHM7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUgPj4gYml0cyAmIG1heFYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFkKSB7XG4gICAgICAgIGlmIChiaXRzID4gMCkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlIDw8IG91dEJpdHMgLSBiaXRzICYgbWF4Vik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChiaXRzID49IGluQml0cykgcmV0dXJuIFwiRXhjZXNzIHBhZGRpbmdcIjtcbiAgICAgICAgaWYgKHZhbHVlIDw8IG91dEJpdHMgLSBiaXRzICYgbWF4VikgcmV0dXJuIFwiTm9uLXplcm8gcGFkZGluZ1wiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gdG9Xb3Jkc1Vuc2FmZShieXRlczIpIHtcbiAgICAgIHZhciByZXMgPSBjb252ZXJ0KGJ5dGVzMiwgOCwgNSwgdHJ1ZSk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXMpKSByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0b1dvcmRzKGJ5dGVzMikge1xuICAgICAgdmFyIHJlcyA9IGNvbnZlcnQoYnl0ZXMyLCA4LCA1LCB0cnVlKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlcykpIHJldHVybiByZXM7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocmVzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZnJvbVdvcmRzVW5zYWZlKHdvcmRzKSB7XG4gICAgICB2YXIgcmVzID0gY29udmVydCh3b3JkcywgNSwgOCwgZmFsc2UpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzKSkgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgZnVuY3Rpb24gZnJvbVdvcmRzKHdvcmRzKSB7XG4gICAgICB2YXIgcmVzID0gY29udmVydCh3b3JkcywgNSwgOCwgZmFsc2UpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzKSkgcmV0dXJuIHJlcztcbiAgICAgIHRocm93IG5ldyBFcnJvcihyZXMpO1xuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgIGRlY29kZVVuc2FmZSxcbiAgICAgIGRlY29kZTogZGVjb2RlMyxcbiAgICAgIGVuY29kZTogZW5jb2RlMixcbiAgICAgIHRvV29yZHNVbnNhZmUsXG4gICAgICB0b1dvcmRzLFxuICAgICAgZnJvbVdvcmRzVW5zYWZlLFxuICAgICAgZnJvbVdvcmRzXG4gICAgfTtcbiAgfVxufSk7XG5cbi8vXG52YXIgcmVxdWlyZV9iZWNoMzIyID0gX19jb21tb25KUyh7XG4gIFwiLi4vb3JjaGVzdHJhdGlvbi9ub2RlX21vZHVsZXMvQGNvc21qcy9lbmNvZGluZy9idWlsZC9iZWNoMzIuanNcIihleHBvcnRzKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIF9fY3JlYXRlQmluZGluZyA9IGV4cG9ydHMgJiYgZXhwb3J0cy5fX2NyZWF0ZUJpbmRpbmcgfHwgKE9iamVjdC5jcmVhdGUgPyBmdW5jdGlvbihvMiwgbTIsIGssIGsyKSB7XG4gICAgICBpZiAoazIgPT09IHZvaWQgMCkgazIgPSBrO1xuICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0yLCBrKTtcbiAgICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0yLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBtMltrXTtcbiAgICAgICAgfSB9O1xuICAgICAgfVxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8yLCBrMiwgZGVzYyk7XG4gICAgfSA6IGZ1bmN0aW9uKG8yLCBtMiwgaywgazIpIHtcbiAgICAgIGlmIChrMiA9PT0gdm9pZCAwKSBrMiA9IGs7XG4gICAgICBvMltrMl0gPSBtMltrXTtcbiAgICB9KTtcbiAgICB2YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gZXhwb3J0cyAmJiBleHBvcnRzLl9fc2V0TW9kdWxlRGVmYXVsdCB8fCAoT2JqZWN0LmNyZWF0ZSA/IGZ1bmN0aW9uKG8yLCB2Mikge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8yLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdjIgfSk7XG4gICAgfSA6IGZ1bmN0aW9uKG8yLCB2Mikge1xuICAgICAgbzJbXCJkZWZhdWx0XCJdID0gdjI7XG4gICAgfSk7XG4gICAgdmFyIF9faW1wb3J0U3RhciA9IGV4cG9ydHMgJiYgZXhwb3J0cy5fX2ltcG9ydFN0YXIgfHwgZnVuY3Rpb24obW9kKSB7XG4gICAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaWYgKG1vZCAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgICB9XG4gICAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgICBleHBvcnRzLm5vcm1hbGl6ZUJlY2gzMiA9IGV4cG9ydHMuZnJvbUJlY2gzMiA9IGV4cG9ydHMudG9CZWNoMzIgPSB2b2lkIDA7XG4gICAgdmFyIGJlY2gzMjIgPSBfX2ltcG9ydFN0YXIocmVxdWlyZV9iZWNoMzIoKSk7XG4gICAgZnVuY3Rpb24gdG9CZWNoMzIocHJlZml4LCBkYXRhLCBsaW1pdDIpIHtcbiAgICAgIGNvbnN0IGFkZHJlc3MgPSBiZWNoMzIyLmVuY29kZShwcmVmaXgsIGJlY2gzMjIudG9Xb3JkcyhkYXRhKSwgbGltaXQyKTtcbiAgICAgIHJldHVybiBhZGRyZXNzO1xuICAgIH1cbiAgICBleHBvcnRzLnRvQmVjaDMyID0gdG9CZWNoMzI7XG4gICAgZnVuY3Rpb24gZnJvbUJlY2gzMjMoYWRkcmVzcywgbGltaXQyID0gSW5maW5pdHkpIHtcbiAgICAgIGNvbnN0IGRlY29kZWRBZGRyZXNzID0gYmVjaDMyMi5kZWNvZGUoYWRkcmVzcywgbGltaXQyKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByZWZpeDogZGVjb2RlZEFkZHJlc3MucHJlZml4LFxuICAgICAgICBkYXRhOiBuZXcgVWludDhBcnJheShiZWNoMzIyLmZyb21Xb3JkcyhkZWNvZGVkQWRkcmVzcy53b3JkcykpXG4gICAgICB9O1xuICAgIH1cbiAgICBleHBvcnRzLmZyb21CZWNoMzIgPSBmcm9tQmVjaDMyMztcbiAgICBmdW5jdGlvbiBub3JtYWxpemVCZWNoMzIoYWRkcmVzcykge1xuICAgICAgY29uc3QgeyBwcmVmaXgsIGRhdGEgfSA9IGZyb21CZWNoMzIzKGFkZHJlc3MpO1xuICAgICAgcmV0dXJuIHRvQmVjaDMyKHByZWZpeCwgZGF0YSk7XG4gICAgfVxuICAgIGV4cG9ydHMubm9ybWFsaXplQmVjaDMyID0gbm9ybWFsaXplQmVjaDMyO1xuICB9XG59KTtcblxuLy9cbnZhciByZXF1aXJlX2hleCA9IF9fY29tbW9uSlMoe1xuICBcIi4uL29yY2hlc3RyYXRpb24vbm9kZV9tb2R1bGVzL0Bjb3NtanMvZW5jb2RpbmcvYnVpbGQvaGV4LmpzXCIoZXhwb3J0cykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgICBleHBvcnRzLmZyb21IZXggPSBleHBvcnRzLnRvSGV4ID0gdm9pZCAwO1xuICAgIGZ1bmN0aW9uIHRvSGV4MihkYXRhKSB7XG4gICAgICBsZXQgb3V0ID0gXCJcIjtcbiAgICAgIGZvciAoY29uc3QgYnl0ZSBvZiBkYXRhKSB7XG4gICAgICAgIG91dCArPSAoXCIwXCIgKyBieXRlLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgZXhwb3J0cy50b0hleCA9IHRvSGV4MjtcbiAgICBmdW5jdGlvbiBmcm9tSGV4MyhoZXhzdHJpbmcpIHtcbiAgICAgIGlmIChoZXhzdHJpbmcubGVuZ3RoICUgMiAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJoZXggc3RyaW5nIGxlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMlwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KGhleHN0cmluZy5sZW5ndGggLyAyKTtcbiAgICAgIGZvciAobGV0IGkzID0gMDsgaTMgPCBvdXQubGVuZ3RoOyBpMysrKSB7XG4gICAgICAgIGNvbnN0IGogPSAyICogaTM7XG4gICAgICAgIGNvbnN0IGhleEJ5dGVBc1N0cmluZyA9IGhleHN0cmluZy5zbGljZShqLCBqICsgMik7XG4gICAgICAgIGlmICghaGV4Qnl0ZUFzU3RyaW5nLm1hdGNoKC9bMC05YS1mXXsyfS9pKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImhleCBzdHJpbmcgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzXCIpO1xuICAgICAgICB9XG4gICAgICAgIG91dFtpM10gPSBwYXJzZUludChoZXhCeXRlQXNTdHJpbmcsIDE2KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGV4cG9ydHMuZnJvbUhleCA9IGZyb21IZXgzO1xuICB9XG59KTtcblxuLy9cbnZhciByZXF1aXJlX3JmYzMzMzkgPSBfX2NvbW1vbkpTKHtcbiAgXCIuLi9vcmNoZXN0cmF0aW9uL25vZGVfbW9kdWxlcy9AY29zbWpzL2VuY29kaW5nL2J1aWxkL3JmYzMzMzkuanNcIihleHBvcnRzKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuICAgIGV4cG9ydHMudG9SZmMzMzM5ID0gZXhwb3J0cy5mcm9tUmZjMzMzOSA9IHZvaWQgMDtcbiAgICB2YXIgcmZjMzMzOU1hdGNoZXIgPSAvXihcXGR7NH0pLShcXGR7Mn0pLShcXGR7Mn0pW1QgXShcXGR7Mn0pOihcXGR7Mn0pOihcXGR7Mn0pKFxcLlxcZHsxLDl9KT8oKD86WystXVxcZHsyfTpcXGR7Mn0pfFopJC87XG4gICAgZnVuY3Rpb24gcGFkZGVkKGludGVnZXIsIGxlbmd0aCA9IDIpIHtcbiAgICAgIHJldHVybiBpbnRlZ2VyLnRvU3RyaW5nKCkucGFkU3RhcnQobGVuZ3RoLCBcIjBcIik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZyb21SZmMzMzM5KHN0cikge1xuICAgICAgY29uc3QgbWF0Y2hlczIgPSByZmMzMzM5TWF0Y2hlci5leGVjKHN0cik7XG4gICAgICBpZiAoIW1hdGNoZXMyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRhdGUgc3RyaW5nIGlzIG5vdCBpbiBSRkMzMzM5IGZvcm1hdFwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHllYXIgPSArbWF0Y2hlczJbMV07XG4gICAgICBjb25zdCBtb250aCA9ICttYXRjaGVzMlsyXTtcbiAgICAgIGNvbnN0IGRheSA9ICttYXRjaGVzMlszXTtcbiAgICAgIGNvbnN0IGhvdXIgPSArbWF0Y2hlczJbNF07XG4gICAgICBjb25zdCBtaW51dGUgPSArbWF0Y2hlczJbNV07XG4gICAgICBjb25zdCBzZWNvbmQgPSArbWF0Y2hlczJbNl07XG4gICAgICBjb25zdCBtaWxsaVNlY29uZHMgPSBtYXRjaGVzMls3XSA/IE1hdGguZmxvb3IoK21hdGNoZXMyWzddICogMWUzKSA6IDA7XG4gICAgICBsZXQgdHpPZmZzZXRTaWduO1xuICAgICAgbGV0IHR6T2Zmc2V0SG91cnM7XG4gICAgICBsZXQgdHpPZmZzZXRNaW51dGVzO1xuICAgICAgaWYgKG1hdGNoZXMyWzhdID09PSBcIlpcIikge1xuICAgICAgICB0ek9mZnNldFNpZ24gPSAxO1xuICAgICAgICB0ek9mZnNldEhvdXJzID0gMDtcbiAgICAgICAgdHpPZmZzZXRNaW51dGVzID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR6T2Zmc2V0U2lnbiA9IG1hdGNoZXMyWzhdLnN1YnN0cmluZygwLCAxKSA9PT0gXCItXCIgPyAtMSA6IDE7XG4gICAgICAgIHR6T2Zmc2V0SG91cnMgPSArbWF0Y2hlczJbOF0uc3Vic3RyaW5nKDEsIDMpO1xuICAgICAgICB0ek9mZnNldE1pbnV0ZXMgPSArbWF0Y2hlczJbOF0uc3Vic3RyaW5nKDQsIDYpO1xuICAgICAgfVxuICAgICAgY29uc3QgdHpPZmZzZXQgPSB0ek9mZnNldFNpZ24gKiAodHpPZmZzZXRIb3VycyAqIDYwICsgdHpPZmZzZXRNaW51dGVzKSAqIDYwO1xuICAgICAgY29uc3QgZGF0ZSA9IC8qICAgICAgICAgICAqLyBuZXcgRGF0ZSgpO1xuICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyLCBtb250aCAtIDEsIGRheSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaVNlY29uZHMpO1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpIC0gdHpPZmZzZXQgKiAxZTMpO1xuICAgIH1cbiAgICBleHBvcnRzLmZyb21SZmMzMzM5ID0gZnJvbVJmYzMzMzk7XG4gICAgZnVuY3Rpb24gdG9SZmMzMzM5KGRhdGUpIHtcbiAgICAgIGNvbnN0IHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICBjb25zdCBtb250aCA9IHBhZGRlZChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKTtcbiAgICAgIGNvbnN0IGRheSA9IHBhZGRlZChkYXRlLmdldFVUQ0RhdGUoKSk7XG4gICAgICBjb25zdCBob3VyID0gcGFkZGVkKGRhdGUuZ2V0VVRDSG91cnMoKSk7XG4gICAgICBjb25zdCBtaW51dGUgPSBwYWRkZWQoZGF0ZS5nZXRVVENNaW51dGVzKCkpO1xuICAgICAgY29uc3Qgc2Vjb25kID0gcGFkZGVkKGRhdGUuZ2V0VVRDU2Vjb25kcygpKTtcbiAgICAgIGNvbnN0IG1zID0gcGFkZGVkKGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCksIDMpO1xuICAgICAgcmV0dXJuIGAke3llYXJ9LSR7bW9udGh9LSR7ZGF5fVQke2hvdXJ9OiR7bWludXRlfToke3NlY29uZH0uJHttc31aYDtcbiAgICB9XG4gICAgZXhwb3J0cy50b1JmYzMzMzkgPSB0b1JmYzMzMzk7XG4gIH1cbn0pO1xuXG4vL1xudmFyIHJlcXVpcmVfdXRmOCA9IF9fY29tbW9uSlMoe1xuICBcIi4uL29yY2hlc3RyYXRpb24vbm9kZV9tb2R1bGVzL0Bjb3NtanMvZW5jb2RpbmcvYnVpbGQvdXRmOC5qc1wiKGV4cG9ydHMpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4gICAgZXhwb3J0cy5mcm9tVXRmOCA9IGV4cG9ydHMudG9VdGY4ID0gdm9pZCAwO1xuICAgIGZ1bmN0aW9uIHRvVXRmOChzdHIpIHtcbiAgICAgIHJldHVybiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKTtcbiAgICB9XG4gICAgZXhwb3J0cy50b1V0ZjggPSB0b1V0Zjg7XG4gICAgZnVuY3Rpb24gZnJvbVV0ZjgoZGF0YSwgbG9zc3kgPSBmYWxzZSkge1xuICAgICAgY29uc3QgZmF0YWwgPSAhbG9zc3k7XG4gICAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKFwidXRmLThcIiwgeyBmYXRhbCB9KS5kZWNvZGUoZGF0YSk7XG4gICAgfVxuICAgIGV4cG9ydHMuZnJvbVV0ZjggPSBmcm9tVXRmODtcbiAgfVxufSk7XG5cbi8vXG52YXIgcmVxdWlyZV9idWlsZCA9IF9fY29tbW9uSlMoe1xuICBcIi4uL29yY2hlc3RyYXRpb24vbm9kZV9tb2R1bGVzL0Bjb3NtanMvZW5jb2RpbmcvYnVpbGQvaW5kZXguanNcIihleHBvcnRzKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuICAgIGV4cG9ydHMudG9VdGY4ID0gZXhwb3J0cy5mcm9tVXRmOCA9IGV4cG9ydHMudG9SZmMzMzM5ID0gZXhwb3J0cy5mcm9tUmZjMzMzOSA9IGV4cG9ydHMudG9IZXggPSBleHBvcnRzLmZyb21IZXggPSBleHBvcnRzLnRvQmVjaDMyID0gZXhwb3J0cy5ub3JtYWxpemVCZWNoMzIgPSBleHBvcnRzLmZyb21CZWNoMzIgPSBleHBvcnRzLnRvQmFzZTY0ID0gZXhwb3J0cy5mcm9tQmFzZTY0ID0gZXhwb3J0cy50b0FzY2lpID0gZXhwb3J0cy5mcm9tQXNjaWkgPSB2b2lkIDA7XG4gICAgdmFyIGFzY2lpXzEgPSByZXF1aXJlX2FzY2lpKCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZnJvbUFzY2lpXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBhc2NpaV8xLmZyb21Bc2NpaTtcbiAgICB9IH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvQXNjaWlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFzY2lpXzEudG9Bc2NpaTtcbiAgICB9IH0pO1xuICAgIHZhciBiYXNlNjRfMSA9IHJlcXVpcmVfYmFzZTY0KCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZnJvbUJhc2U2NFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYmFzZTY0XzEuZnJvbUJhc2U2NDtcbiAgICB9IH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvQmFzZTY0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBiYXNlNjRfMS50b0Jhc2U2NDtcbiAgICB9IH0pO1xuICAgIHZhciBiZWNoMzJfMSA9IHJlcXVpcmVfYmVjaDMyMigpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZyb21CZWNoMzJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGJlY2gzMl8xLmZyb21CZWNoMzI7XG4gICAgfSB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJub3JtYWxpemVCZWNoMzJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGJlY2gzMl8xLm5vcm1hbGl6ZUJlY2gzMjtcbiAgICB9IH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvQmVjaDMyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBiZWNoMzJfMS50b0JlY2gzMjtcbiAgICB9IH0pO1xuICAgIHZhciBoZXhfMSA9IHJlcXVpcmVfaGV4KCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZnJvbUhleFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaGV4XzEuZnJvbUhleDtcbiAgICB9IH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvSGV4XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBoZXhfMS50b0hleDtcbiAgICB9IH0pO1xuICAgIHZhciByZmMzMzM5XzEgPSByZXF1aXJlX3JmYzMzMzkoKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmcm9tUmZjMzMzOVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmZjMzMzOV8xLmZyb21SZmMzMzM5O1xuICAgIH0gfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidG9SZmMzMzM5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZmMzMzM5XzEudG9SZmMzMzM5O1xuICAgIH0gfSk7XG4gICAgdmFyIHV0ZjhfMSA9IHJlcXVpcmVfdXRmOCgpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZyb21VdGY4XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB1dGY4XzEuZnJvbVV0Zjg7XG4gICAgfSB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b1V0ZjhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHV0ZjhfMS50b1V0Zjg7XG4gICAgfSB9KTtcbiAgfVxufSk7XG5cbi8vXG5mdW5jdGlvbiBudW1iZXIobjIpIHtcbiAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihuMikgfHwgbjIgPCAwKVxuICAgIHRocm93IG5ldyBFcnJvcihgcG9zaXRpdmUgaW50ZWdlciBleHBlY3RlZCwgbm90ICR7bjJ9YCk7XG59XG5mdW5jdGlvbiBpc0J5dGVzKGEyKSB7XG4gIHJldHVybiBhMiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHwgYTIgIT0gbnVsbCAmJiB0eXBlb2YgYTIgPT09IFwib2JqZWN0XCIgJiYgYTIuY29uc3RydWN0b3IubmFtZSA9PT0gXCJVaW50OEFycmF5XCI7XG59XG5mdW5jdGlvbiBieXRlcyhiMywgLi4ubGVuZ3Rocykge1xuICBpZiAoIWlzQnl0ZXMoYjMpKVxuICAgIHRocm93IG5ldyBFcnJvcihcIlVpbnQ4QXJyYXkgZXhwZWN0ZWRcIik7XG4gIGlmIChsZW5ndGhzLmxlbmd0aCA+IDAgJiYgIWxlbmd0aHMuaW5jbHVkZXMoYjMubGVuZ3RoKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVpbnQ4QXJyYXkgZXhwZWN0ZWQgb2YgbGVuZ3RoICR7bGVuZ3Roc30sIG5vdCBvZiBsZW5ndGg9JHtiMy5sZW5ndGh9YCk7XG59XG5mdW5jdGlvbiBleGlzdHMoaW5zdGFuY2UsIGNoZWNrRmluaXNoZWQgPSB0cnVlKSB7XG4gIGlmIChpbnN0YW5jZS5kZXN0cm95ZWQpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSGFzaCBpbnN0YW5jZSBoYXMgYmVlbiBkZXN0cm95ZWRcIik7XG4gIGlmIChjaGVja0ZpbmlzaGVkICYmIGluc3RhbmNlLmZpbmlzaGVkKVxuICAgIHRocm93IG5ldyBFcnJvcihcIkhhc2gjZGlnZXN0KCkgaGFzIGFscmVhZHkgYmVlbiBjYWxsZWRcIik7XG59XG5mdW5jdGlvbiBvdXRwdXQob3V0LCBpbnN0YW5jZSkge1xuICBieXRlcyhvdXQpO1xuICBjb25zdCBtaW4gPSBpbnN0YW5jZS5vdXRwdXRMZW47XG4gIGlmIChvdXQubGVuZ3RoIDwgbWluKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBkaWdlc3RJbnRvKCkgZXhwZWN0cyBvdXRwdXQgYnVmZmVyIG9mIGxlbmd0aCBhdCBsZWFzdCAke21pbn1gKTtcbiAgfVxufVxudmFyIGluaXRfYXNzZXJ0ID0gX19lc20oe1xuICBcIi4uLy4uL25vZGVfbW9kdWxlcy9Abm9ibGUvaGFzaGVzL2VzbS9fYXNzZXJ0LmpzXCIoKSB7XG4gIH1cbn0pO1xuXG4vL1xuZnVuY3Rpb24gYnl0ZVN3YXAzMihhcnIpIHtcbiAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IGFyci5sZW5ndGg7IGkzKyspIHtcbiAgICBhcnJbaTNdID0gYnl0ZVN3YXAoYXJyW2kzXSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzKHN0cikge1xuICBpZiAodHlwZW9mIHN0ciAhPT0gXCJzdHJpbmdcIilcbiAgICB0aHJvdyBuZXcgRXJyb3IoYHV0ZjhUb0J5dGVzIGV4cGVjdGVkIHN0cmluZywgZ290ICR7dHlwZW9mIHN0cn1gKTtcbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShzdHIpKTtcbn1cbmZ1bmN0aW9uIHRvQnl0ZXMyKGRhdGEpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKVxuICAgIGRhdGEgPSB1dGY4VG9CeXRlcyhkYXRhKTtcbiAgYnl0ZXMoZGF0YSk7XG4gIHJldHVybiBkYXRhO1xufVxuZnVuY3Rpb24gd3JhcENvbnN0cnVjdG9yKGhhc2hDb25zKSB7XG4gIGNvbnN0IGhhc2hDID0gKG1zZykgPT4gaGFzaENvbnMoKS51cGRhdGUodG9CeXRlczIobXNnKSkuZGlnZXN0KCk7XG4gIGNvbnN0IHRtcCA9IGhhc2hDb25zKCk7XG4gIGhhc2hDLm91dHB1dExlbiA9IHRtcC5vdXRwdXRMZW47XG4gIGhhc2hDLmJsb2NrTGVuID0gdG1wLmJsb2NrTGVuO1xuICBoYXNoQy5jcmVhdGUgPSAoKSA9PiBoYXNoQ29ucygpO1xuICByZXR1cm4gaGFzaEM7XG59XG5mdW5jdGlvbiB3cmFwWE9GQ29uc3RydWN0b3JXaXRoT3B0cyhoYXNoQ29ucykge1xuICBjb25zdCBoYXNoQyA9IChtc2csIG9wdHMpID0+IGhhc2hDb25zKG9wdHMpLnVwZGF0ZSh0b0J5dGVzMihtc2cpKS5kaWdlc3QoKTtcbiAgY29uc3QgdG1wID0gaGFzaENvbnMoe30pO1xuICBoYXNoQy5vdXRwdXRMZW4gPSB0bXAub3V0cHV0TGVuO1xuICBoYXNoQy5ibG9ja0xlbiA9IHRtcC5ibG9ja0xlbjtcbiAgaGFzaEMuY3JlYXRlID0gKG9wdHMpID0+IGhhc2hDb25zKG9wdHMpO1xuICByZXR1cm4gaGFzaEM7XG59XG52YXIgdTMyLCBpc0xFLCBieXRlU3dhcCwgSGFzaCwgdG9TdHI7XG52YXIgaW5pdF91dGlscyA9IF9fZXNtKHtcbiAgXCIuLi8uLi9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vdXRpbHMuanNcIigpIHtcbiAgICBpbml0X2Fzc2VydCgpO1xuICAgIHUzMiA9IChhcnIpID0+IG5ldyBVaW50MzJBcnJheShhcnIuYnVmZmVyLCBhcnIuYnl0ZU9mZnNldCwgTWF0aC5mbG9vcihhcnIuYnl0ZUxlbmd0aCAvIDQpKTtcbiAgICBpc0xFID0gbmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQzMkFycmF5KFsyODc0NTQwMjBdKS5idWZmZXIpWzBdID09PSA2ODtcbiAgICBieXRlU3dhcCA9ICh3b3JkKSA9PiB3b3JkIDw8IDI0ICYgNDI3ODE5MDA4MCB8IHdvcmQgPDwgOCAmIDE2NzExNjgwIHwgd29yZCA+Pj4gOCAmIDY1MjgwIHwgd29yZCA+Pj4gMjQgJiAyNTU7XG4gICAgSGFzaCA9IGNsYXNzIHtcbiAgICAgIC8vXG4gICAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nsb25lSW50bygpO1xuICAgICAgfVxuICAgIH07XG4gICAgdG9TdHIgPSB7fS50b1N0cmluZztcbiAgfVxufSk7XG5cbi8vXG5mdW5jdGlvbiBmcm9tQmlnKG4yLCBsZSA9IGZhbHNlKSB7XG4gIGlmIChsZSlcbiAgICByZXR1cm4geyBoOiBOdW1iZXIobjIgJiBVMzJfTUFTSzY0KSwgbDogTnVtYmVyKG4yID4+IF8zMm4gJiBVMzJfTUFTSzY0KSB9O1xuICByZXR1cm4geyBoOiBOdW1iZXIobjIgPj4gXzMybiAmIFUzMl9NQVNLNjQpIHwgMCwgbDogTnVtYmVyKG4yICYgVTMyX01BU0s2NCkgfCAwIH07XG59XG5mdW5jdGlvbiBzcGxpdChsc3QsIGxlID0gZmFsc2UpIHtcbiAgbGV0IEFoID0gbmV3IFVpbnQzMkFycmF5KGxzdC5sZW5ndGgpO1xuICBsZXQgQWwgPSBuZXcgVWludDMyQXJyYXkobHN0Lmxlbmd0aCk7XG4gIGZvciAobGV0IGkzID0gMDsgaTMgPCBsc3QubGVuZ3RoOyBpMysrKSB7XG4gICAgY29uc3QgeyBoLCBsOiBsMyB9ID0gZnJvbUJpZyhsc3RbaTNdLCBsZSk7XG4gICAgW0FoW2kzXSwgQWxbaTNdXSA9IFtoLCBsM107XG4gIH1cbiAgcmV0dXJuIFtBaCwgQWxdO1xufVxudmFyIFUzMl9NQVNLNjQsIF8zMm4sIHJvdGxTSCwgcm90bFNMLCByb3RsQkgsIHJvdGxCTDtcbnZhciBpbml0X3U2NCA9IF9fZXNtKHtcbiAgXCIuLi8uLi9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vX3U2NC5qc1wiKCkge1xuICAgIFUzMl9NQVNLNjQgPSAvKiAgICAgICAgICAgKi8gQmlnSW50KDIgKiogMzIgLSAxKTtcbiAgICBfMzJuID0gLyogICAgICAgICAgICovIEJpZ0ludCgzMik7XG4gICAgcm90bFNIID0gKGgsIGwzLCBzMykgPT4gaCA8PCBzMyB8IGwzID4+PiAzMiAtIHMzO1xuICAgIHJvdGxTTCA9IChoLCBsMywgczMpID0+IGwzIDw8IHMzIHwgaCA+Pj4gMzIgLSBzMztcbiAgICByb3RsQkggPSAoaCwgbDMsIHMzKSA9PiBsMyA8PCBzMyAtIDMyIHwgaCA+Pj4gNjQgLSBzMztcbiAgICByb3RsQkwgPSAoaCwgbDMsIHMzKSA9PiBoIDw8IHMzIC0gMzIgfCBsMyA+Pj4gNjQgLSBzMztcbiAgfVxufSk7XG5cbi8vXG5mdW5jdGlvbiBrZWNjYWtQKHMzLCByb3VuZHMgPSAyNCkge1xuICBjb25zdCBCMiA9IG5ldyBVaW50MzJBcnJheSg1ICogMik7XG4gIGZvciAobGV0IHJvdW5kID0gMjQgLSByb3VuZHM7IHJvdW5kIDwgMjQ7IHJvdW5kKyspIHtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IDEwOyB4KyspXG4gICAgICBCMlt4XSA9IHMzW3hdIF4gczNbeCArIDEwXSBeIHMzW3ggKyAyMF0gXiBzM1t4ICsgMzBdIF4gczNbeCArIDQwXTtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IDEwOyB4ICs9IDIpIHtcbiAgICAgIGNvbnN0IGlkeDEgPSAoeCArIDgpICUgMTA7XG4gICAgICBjb25zdCBpZHgwID0gKHggKyAyKSAlIDEwO1xuICAgICAgY29uc3QgQjAgPSBCMltpZHgwXTtcbiAgICAgIGNvbnN0IEIxID0gQjJbaWR4MCArIDFdO1xuICAgICAgY29uc3QgVGggPSByb3RsSChCMCwgQjEsIDEpIF4gQjJbaWR4MV07XG4gICAgICBjb25zdCBUbCA9IHJvdGxMKEIwLCBCMSwgMSkgXiBCMltpZHgxICsgMV07XG4gICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IDUwOyB5ICs9IDEwKSB7XG4gICAgICAgIHMzW3ggKyB5XSBePSBUaDtcbiAgICAgICAgczNbeCArIHkgKyAxXSBePSBUbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IGN1ckggPSBzM1syXTtcbiAgICBsZXQgY3VyTCA9IHMzWzNdO1xuICAgIGZvciAobGV0IHQ1ID0gMDsgdDUgPCAyNDsgdDUrKykge1xuICAgICAgY29uc3Qgc2hpZnQgPSBTSEEzX1JPVExbdDVdO1xuICAgICAgY29uc3QgVGggPSByb3RsSChjdXJILCBjdXJMLCBzaGlmdCk7XG4gICAgICBjb25zdCBUbCA9IHJvdGxMKGN1ckgsIGN1ckwsIHNoaWZ0KTtcbiAgICAgIGNvbnN0IFBJID0gU0hBM19QSVt0NV07XG4gICAgICBjdXJIID0gczNbUEldO1xuICAgICAgY3VyTCA9IHMzW1BJICsgMV07XG4gICAgICBzM1tQSV0gPSBUaDtcbiAgICAgIHMzW1BJICsgMV0gPSBUbDtcbiAgICB9XG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCA1MDsgeSArPSAxMCkge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCAxMDsgeCsrKVxuICAgICAgICBCMlt4XSA9IHMzW3kgKyB4XTtcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgMTA7IHgrKylcbiAgICAgICAgczNbeSArIHhdIF49IH5CMlsoeCArIDIpICUgMTBdICYgQjJbKHggKyA0KSAlIDEwXTtcbiAgICB9XG4gICAgczNbMF0gXj0gU0hBM19JT1RBX0hbcm91bmRdO1xuICAgIHMzWzFdIF49IFNIQTNfSU9UQV9MW3JvdW5kXTtcbiAgfVxuICBCMi5maWxsKDApO1xufVxudmFyIFNIQTNfUEksIFNIQTNfUk9UTCwgX1NIQTNfSU9UQSwgXzBuLCBfMW4sIF8ybiwgXzduLCBfMjU2biwgXzB4NzFuLCBTSEEzX0lPVEFfSCwgU0hBM19JT1RBX0wsIHJvdGxILCByb3RsTCwgS2VjY2FrLCBnZW4sIHNoYTNfMjI0LCBzaGEzXzI1Niwgc2hhM18zODQsIHNoYTNfNTEyLCBrZWNjYWtfMjI0LCBrZWNjYWtfMjU2LCBrZWNjYWtfMzg0LCBrZWNjYWtfNTEyLCBnZW5TaGFrZSwgc2hha2UxMjgsIHNoYWtlMjU2O1xudmFyIGluaXRfc2hhMyA9IF9fZXNtKHtcbiAgXCIuLi8uLi9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vc2hhMy5qc1wiKCkge1xuICAgIGluaXRfYXNzZXJ0KCk7XG4gICAgaW5pdF91NjQoKTtcbiAgICBpbml0X3V0aWxzKCk7XG4gICAgU0hBM19QSSA9IFtdO1xuICAgIFNIQTNfUk9UTCA9IFtdO1xuICAgIF9TSEEzX0lPVEEgPSBbXTtcbiAgICBfMG4gPSAvKiAgICAgICAgICAgKi8gQmlnSW50KDApO1xuICAgIF8xbiA9IC8qICAgICAgICAgICAqLyBCaWdJbnQoMSk7XG4gICAgXzJuID0gLyogICAgICAgICAgICovIEJpZ0ludCgyKTtcbiAgICBfN24gPSAvKiAgICAgICAgICAgKi8gQmlnSW50KDcpO1xuICAgIF8yNTZuID0gLyogICAgICAgICAgICovIEJpZ0ludCgyNTYpO1xuICAgIF8weDcxbiA9IC8qICAgICAgICAgICAqLyBCaWdJbnQoMTEzKTtcbiAgICBmb3IgKGxldCByb3VuZCA9IDAsIFIgPSBfMW4sIHggPSAxLCB5ID0gMDsgcm91bmQgPCAyNDsgcm91bmQrKykge1xuICAgICAgW3gsIHldID0gW3ksICgyICogeCArIDMgKiB5KSAlIDVdO1xuICAgICAgU0hBM19QSS5wdXNoKDIgKiAoNSAqIHkgKyB4KSk7XG4gICAgICBTSEEzX1JPVEwucHVzaCgocm91bmQgKyAxKSAqIChyb3VuZCArIDIpIC8gMiAlIDY0KTtcbiAgICAgIGxldCB0NSA9IF8wbjtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgNzsgaisrKSB7XG4gICAgICAgIFIgPSAoUiA8PCBfMW4gXiAoUiA+PiBfN24pICogXzB4NzFuKSAlIF8yNTZuO1xuICAgICAgICBpZiAoUiAmIF8ybilcbiAgICAgICAgICB0NSBePSBfMW4gPDwgKF8xbiA8PCAvKiAgICAgICAgICAgKi8gQmlnSW50KGopKSAtIF8xbjtcbiAgICAgIH1cbiAgICAgIF9TSEEzX0lPVEEucHVzaCh0NSk7XG4gICAgfVxuICAgIFtTSEEzX0lPVEFfSCwgU0hBM19JT1RBX0xdID0gLyogICAgICAgICAgICovIHNwbGl0KF9TSEEzX0lPVEEsIHRydWUpO1xuICAgIHJvdGxIID0gKGgsIGwzLCBzMykgPT4gczMgPiAzMiA/IHJvdGxCSChoLCBsMywgczMpIDogcm90bFNIKGgsIGwzLCBzMyk7XG4gICAgcm90bEwgPSAoaCwgbDMsIHMzKSA9PiBzMyA+IDMyID8gcm90bEJMKGgsIGwzLCBzMykgOiByb3RsU0woaCwgbDMsIHMzKTtcbiAgICBLZWNjYWsgPSBjbGFzcyBfS2VjY2FrIGV4dGVuZHMgSGFzaCB7XG4gICAgICAvL1xuICAgICAgY29uc3RydWN0b3IoYmxvY2tMZW4sIHN1ZmZpeCwgb3V0cHV0TGVuLCBlbmFibGVYT0YgPSBmYWxzZSwgcm91bmRzID0gMjQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5ibG9ja0xlbiA9IGJsb2NrTGVuO1xuICAgICAgICB0aGlzLnN1ZmZpeCA9IHN1ZmZpeDtcbiAgICAgICAgdGhpcy5vdXRwdXRMZW4gPSBvdXRwdXRMZW47XG4gICAgICAgIHRoaXMuZW5hYmxlWE9GID0gZW5hYmxlWE9GO1xuICAgICAgICB0aGlzLnJvdW5kcyA9IHJvdW5kcztcbiAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgICAgICB0aGlzLnBvc091dCA9IDA7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICAgICAgbnVtYmVyKG91dHB1dExlbik7XG4gICAgICAgIGlmICgwID49IHRoaXMuYmxvY2tMZW4gfHwgdGhpcy5ibG9ja0xlbiA+PSAyMDApXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2hhMyBzdXBwb3J0cyBvbmx5IGtlY2Nhay1mMTYwMCBmdW5jdGlvblwiKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IG5ldyBVaW50OEFycmF5KDIwMCk7XG4gICAgICAgIHRoaXMuc3RhdGUzMiA9IHUzMih0aGlzLnN0YXRlKTtcbiAgICAgIH1cbiAgICAgIGtlY2NhaygpIHtcbiAgICAgICAgaWYgKCFpc0xFKVxuICAgICAgICAgIGJ5dGVTd2FwMzIodGhpcy5zdGF0ZTMyKTtcbiAgICAgICAga2VjY2FrUCh0aGlzLnN0YXRlMzIsIHRoaXMucm91bmRzKTtcbiAgICAgICAgaWYgKCFpc0xFKVxuICAgICAgICAgIGJ5dGVTd2FwMzIodGhpcy5zdGF0ZTMyKTtcbiAgICAgICAgdGhpcy5wb3NPdXQgPSAwO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICB9XG4gICAgICB1cGRhdGUoZGF0YSkge1xuICAgICAgICBleGlzdHModGhpcyk7XG4gICAgICAgIGNvbnN0IHsgYmxvY2tMZW4sIHN0YXRlIH0gPSB0aGlzO1xuICAgICAgICBkYXRhID0gdG9CeXRlczIoZGF0YSk7XG4gICAgICAgIGNvbnN0IGxlbiA9IGRhdGEubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBwb3MgPSAwOyBwb3MgPCBsZW47ICkge1xuICAgICAgICAgIGNvbnN0IHRha2UgPSBNYXRoLm1pbihibG9ja0xlbiAtIHRoaXMucG9zLCBsZW4gLSBwb3MpO1xuICAgICAgICAgIGZvciAobGV0IGkzID0gMDsgaTMgPCB0YWtlOyBpMysrKVxuICAgICAgICAgICAgc3RhdGVbdGhpcy5wb3MrK10gXj0gZGF0YVtwb3MrK107XG4gICAgICAgICAgaWYgKHRoaXMucG9zID09PSBibG9ja0xlbilcbiAgICAgICAgICAgIHRoaXMua2VjY2FrKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBmaW5pc2goKSB7XG4gICAgICAgIGlmICh0aGlzLmZpbmlzaGVkKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIGNvbnN0IHsgc3RhdGUsIHN1ZmZpeCwgcG9zLCBibG9ja0xlbiB9ID0gdGhpcztcbiAgICAgICAgc3RhdGVbcG9zXSBePSBzdWZmaXg7XG4gICAgICAgIGlmICgoc3VmZml4ICYgMTI4KSAhPT0gMCAmJiBwb3MgPT09IGJsb2NrTGVuIC0gMSlcbiAgICAgICAgICB0aGlzLmtlY2NhaygpO1xuICAgICAgICBzdGF0ZVtibG9ja0xlbiAtIDFdIF49IDEyODtcbiAgICAgICAgdGhpcy5rZWNjYWsoKTtcbiAgICAgIH1cbiAgICAgIHdyaXRlSW50byhvdXQpIHtcbiAgICAgICAgZXhpc3RzKHRoaXMsIGZhbHNlKTtcbiAgICAgICAgYnl0ZXMob3V0KTtcbiAgICAgICAgdGhpcy5maW5pc2goKTtcbiAgICAgICAgY29uc3QgYnVmZmVyT3V0ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgeyBibG9ja0xlbiB9ID0gdGhpcztcbiAgICAgICAgZm9yIChsZXQgcG9zID0gMCwgbGVuID0gb3V0Lmxlbmd0aDsgcG9zIDwgbGVuOyApIHtcbiAgICAgICAgICBpZiAodGhpcy5wb3NPdXQgPj0gYmxvY2tMZW4pXG4gICAgICAgICAgICB0aGlzLmtlY2NhaygpO1xuICAgICAgICAgIGNvbnN0IHRha2UgPSBNYXRoLm1pbihibG9ja0xlbiAtIHRoaXMucG9zT3V0LCBsZW4gLSBwb3MpO1xuICAgICAgICAgIG91dC5zZXQoYnVmZmVyT3V0LnN1YmFycmF5KHRoaXMucG9zT3V0LCB0aGlzLnBvc091dCArIHRha2UpLCBwb3MpO1xuICAgICAgICAgIHRoaXMucG9zT3V0ICs9IHRha2U7XG4gICAgICAgICAgcG9zICs9IHRha2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgIH1cbiAgICAgIHhvZkludG8ob3V0KSB7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVYT0YpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWE9GIGlzIG5vdCBwb3NzaWJsZSBmb3IgdGhpcyBpbnN0YW5jZVwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVJbnRvKG91dCk7XG4gICAgICB9XG4gICAgICB4b2YoYnl0ZXMyKSB7XG4gICAgICAgIG51bWJlcihieXRlczIpO1xuICAgICAgICByZXR1cm4gdGhpcy54b2ZJbnRvKG5ldyBVaW50OEFycmF5KGJ5dGVzMikpO1xuICAgICAgfVxuICAgICAgZGlnZXN0SW50byhvdXQpIHtcbiAgICAgICAgb3V0cHV0KG91dCwgdGhpcyk7XG4gICAgICAgIGlmICh0aGlzLmZpbmlzaGVkKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImRpZ2VzdCgpIHdhcyBhbHJlYWR5IGNhbGxlZFwiKTtcbiAgICAgICAgdGhpcy53cml0ZUludG8ob3V0KTtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgICB9XG4gICAgICBkaWdlc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpZ2VzdEludG8obmV3IFVpbnQ4QXJyYXkodGhpcy5vdXRwdXRMZW4pKTtcbiAgICAgIH1cbiAgICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdGF0ZS5maWxsKDApO1xuICAgICAgfVxuICAgICAgX2Nsb25lSW50byh0bykge1xuICAgICAgICBjb25zdCB7IGJsb2NrTGVuLCBzdWZmaXgsIG91dHB1dExlbiwgcm91bmRzLCBlbmFibGVYT0YgfSA9IHRoaXM7XG4gICAgICAgIHRvIHx8ICh0byA9IG5ldyBfS2VjY2FrKGJsb2NrTGVuLCBzdWZmaXgsIG91dHB1dExlbiwgZW5hYmxlWE9GLCByb3VuZHMpKTtcbiAgICAgICAgdG8uc3RhdGUzMi5zZXQodGhpcy5zdGF0ZTMyKTtcbiAgICAgICAgdG8ucG9zID0gdGhpcy5wb3M7XG4gICAgICAgIHRvLnBvc091dCA9IHRoaXMucG9zT3V0O1xuICAgICAgICB0by5maW5pc2hlZCA9IHRoaXMuZmluaXNoZWQ7XG4gICAgICAgIHRvLnJvdW5kcyA9IHJvdW5kcztcbiAgICAgICAgdG8uc3VmZml4ID0gc3VmZml4O1xuICAgICAgICB0by5vdXRwdXRMZW4gPSBvdXRwdXRMZW47XG4gICAgICAgIHRvLmVuYWJsZVhPRiA9IGVuYWJsZVhPRjtcbiAgICAgICAgdG8uZGVzdHJveWVkID0gdGhpcy5kZXN0cm95ZWQ7XG4gICAgICAgIHJldHVybiB0bztcbiAgICAgIH1cbiAgICB9O1xuICAgIGdlbiA9IChzdWZmaXgsIGJsb2NrTGVuLCBvdXRwdXRMZW4pID0+IHdyYXBDb25zdHJ1Y3RvcigoKSA9PiBuZXcgS2VjY2FrKGJsb2NrTGVuLCBzdWZmaXgsIG91dHB1dExlbikpO1xuICAgIHNoYTNfMjI0ID0gLyogICAgICAgICAgICovIGdlbig2LCAxNDQsIDIyNCAvIDgpO1xuICAgIHNoYTNfMjU2ID0gLyogICAgICAgICAgICovIGdlbig2LCAxMzYsIDI1NiAvIDgpO1xuICAgIHNoYTNfMzg0ID0gLyogICAgICAgICAgICovIGdlbig2LCAxMDQsIDM4NCAvIDgpO1xuICAgIHNoYTNfNTEyID0gLyogICAgICAgICAgICovIGdlbig2LCA3MiwgNTEyIC8gOCk7XG4gICAga2VjY2FrXzIyNCA9IC8qICAgICAgICAgICAqLyBnZW4oMSwgMTQ0LCAyMjQgLyA4KTtcbiAgICBrZWNjYWtfMjU2ID0gLyogICAgICAgICAgICovIGdlbigxLCAxMzYsIDI1NiAvIDgpO1xuICAgIGtlY2Nha18zODQgPSAvKiAgICAgICAgICAgKi8gZ2VuKDEsIDEwNCwgMzg0IC8gOCk7XG4gICAga2VjY2FrXzUxMiA9IC8qICAgICAgICAgICAqLyBnZW4oMSwgNzIsIDUxMiAvIDgpO1xuICAgIGdlblNoYWtlID0gKHN1ZmZpeCwgYmxvY2tMZW4sIG91dHB1dExlbikgPT4gd3JhcFhPRkNvbnN0cnVjdG9yV2l0aE9wdHMoKG9wdHMgPSB7fSkgPT4gbmV3IEtlY2NhayhibG9ja0xlbiwgc3VmZml4LCBvcHRzLmRrTGVuID09PSB2b2lkIDAgPyBvdXRwdXRMZW4gOiBvcHRzLmRrTGVuLCB0cnVlKSk7XG4gICAgc2hha2UxMjggPSAvKiAgICAgICAgICAgKi8gZ2VuU2hha2UoMzEsIDE2OCwgMTI4IC8gOCk7XG4gICAgc2hha2UyNTYgPSAvKiAgICAgICAgICAgKi8gZ2VuU2hha2UoMzEsIDEzNiwgMjU2IC8gOCk7XG4gIH1cbn0pO1xuXG4vL1xuZnVuY3Rpb24gZXhlY1R5cGVkKHJlZ2V4LCBzdHJpbmcpIHtcbiAgY29uc3QgbWF0Y2ggPSByZWdleC5leGVjKHN0cmluZyk7XG4gIHJldHVybiBtYXRjaD8uZ3JvdXBzO1xufVxuZnVuY3Rpb24gZm9ybWF0QWJpUGFyYW1ldGVyKGFiaVBhcmFtZXRlcikge1xuICBsZXQgdHlwZSA9IGFiaVBhcmFtZXRlci50eXBlO1xuICBpZiAodHVwbGVSZWdleC50ZXN0KGFiaVBhcmFtZXRlci50eXBlKSAmJiBcImNvbXBvbmVudHNcIiBpbiBhYmlQYXJhbWV0ZXIpIHtcbiAgICB0eXBlID0gXCIoXCI7XG4gICAgY29uc3QgbGVuZ3RoID0gYWJpUGFyYW1ldGVyLmNvbXBvbmVudHMubGVuZ3RoO1xuICAgIGZvciAobGV0IGkzID0gMDsgaTMgPCBsZW5ndGg7IGkzKyspIHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGFiaVBhcmFtZXRlci5jb21wb25lbnRzW2kzXTtcbiAgICAgIHR5cGUgKz0gZm9ybWF0QWJpUGFyYW1ldGVyKGNvbXBvbmVudCk7XG4gICAgICBpZiAoaTMgPCBsZW5ndGggLSAxKVxuICAgICAgICB0eXBlICs9IFwiLCBcIjtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gZXhlY1R5cGVkKHR1cGxlUmVnZXgsIGFiaVBhcmFtZXRlci50eXBlKTtcbiAgICB0eXBlICs9IGApJHtyZXN1bHQ/LmFycmF5ID8/IFwiXCJ9YDtcbiAgICByZXR1cm4gZm9ybWF0QWJpUGFyYW1ldGVyKHtcbiAgICAgIC4uLmFiaVBhcmFtZXRlcixcbiAgICAgIHR5cGVcbiAgICB9KTtcbiAgfVxuICBpZiAoXCJpbmRleGVkXCIgaW4gYWJpUGFyYW1ldGVyICYmIGFiaVBhcmFtZXRlci5pbmRleGVkKVxuICAgIHR5cGUgPSBgJHt0eXBlfSBpbmRleGVkYDtcbiAgaWYgKGFiaVBhcmFtZXRlci5uYW1lKVxuICAgIHJldHVybiBgJHt0eXBlfSAke2FiaVBhcmFtZXRlci5uYW1lfWA7XG4gIHJldHVybiB0eXBlO1xufVxuZnVuY3Rpb24gZm9ybWF0QWJpUGFyYW1ldGVycyhhYmlQYXJhbWV0ZXJzKSB7XG4gIGxldCBwYXJhbXMgPSBcIlwiO1xuICBjb25zdCBsZW5ndGggPSBhYmlQYXJhbWV0ZXJzLmxlbmd0aDtcbiAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IGxlbmd0aDsgaTMrKykge1xuICAgIGNvbnN0IGFiaVBhcmFtZXRlciA9IGFiaVBhcmFtZXRlcnNbaTNdO1xuICAgIHBhcmFtcyArPSBmb3JtYXRBYmlQYXJhbWV0ZXIoYWJpUGFyYW1ldGVyKTtcbiAgICBpZiAoaTMgIT09IGxlbmd0aCAtIDEpXG4gICAgICBwYXJhbXMgKz0gXCIsIFwiO1xuICB9XG4gIHJldHVybiBwYXJhbXM7XG59XG5mdW5jdGlvbiBmb3JtYXRBYmlJdGVtKGFiaUl0ZW0pIHtcbiAgaWYgKGFiaUl0ZW0udHlwZSA9PT0gXCJmdW5jdGlvblwiKVxuICAgIHJldHVybiBgZnVuY3Rpb24gJHthYmlJdGVtLm5hbWV9KCR7Zm9ybWF0QWJpUGFyYW1ldGVycyhhYmlJdGVtLmlucHV0cyl9KSR7YWJpSXRlbS5zdGF0ZU11dGFiaWxpdHkgJiYgYWJpSXRlbS5zdGF0ZU11dGFiaWxpdHkgIT09IFwibm9ucGF5YWJsZVwiID8gYCAke2FiaUl0ZW0uc3RhdGVNdXRhYmlsaXR5fWAgOiBcIlwifSR7YWJpSXRlbS5vdXRwdXRzPy5sZW5ndGggPyBgIHJldHVybnMgKCR7Zm9ybWF0QWJpUGFyYW1ldGVycyhhYmlJdGVtLm91dHB1dHMpfSlgIDogXCJcIn1gO1xuICBpZiAoYWJpSXRlbS50eXBlID09PSBcImV2ZW50XCIpXG4gICAgcmV0dXJuIGBldmVudCAke2FiaUl0ZW0ubmFtZX0oJHtmb3JtYXRBYmlQYXJhbWV0ZXJzKGFiaUl0ZW0uaW5wdXRzKX0pYDtcbiAgaWYgKGFiaUl0ZW0udHlwZSA9PT0gXCJlcnJvclwiKVxuICAgIHJldHVybiBgZXJyb3IgJHthYmlJdGVtLm5hbWV9KCR7Zm9ybWF0QWJpUGFyYW1ldGVycyhhYmlJdGVtLmlucHV0cyl9KWA7XG4gIGlmIChhYmlJdGVtLnR5cGUgPT09IFwiY29uc3RydWN0b3JcIilcbiAgICByZXR1cm4gYGNvbnN0cnVjdG9yKCR7Zm9ybWF0QWJpUGFyYW1ldGVycyhhYmlJdGVtLmlucHV0cyl9KSR7YWJpSXRlbS5zdGF0ZU11dGFiaWxpdHkgPT09IFwicGF5YWJsZVwiID8gXCIgcGF5YWJsZVwiIDogXCJcIn1gO1xuICBpZiAoYWJpSXRlbS50eXBlID09PSBcImZhbGxiYWNrXCIpXG4gICAgcmV0dXJuIGBmYWxsYmFjaygpIGV4dGVybmFsJHthYmlJdGVtLnN0YXRlTXV0YWJpbGl0eSA9PT0gXCJwYXlhYmxlXCIgPyBcIiBwYXlhYmxlXCIgOiBcIlwifWA7XG4gIHJldHVybiBcInJlY2VpdmUoKSBleHRlcm5hbCBwYXlhYmxlXCI7XG59XG5mdW5jdGlvbiB3YWxrMihlcnIsIGZuKSB7XG4gIGlmIChmbj8uKGVycikpXG4gICAgcmV0dXJuIGVycjtcbiAgaWYgKGVyciAmJiB0eXBlb2YgZXJyID09PSBcIm9iamVjdFwiICYmIFwiY2F1c2VcIiBpbiBlcnIgJiYgZXJyLmNhdXNlICE9PSB2b2lkIDApXG4gICAgcmV0dXJuIHdhbGsyKGVyci5jYXVzZSwgZm4pO1xuICByZXR1cm4gZm4gPyBudWxsIDogZXJyO1xufVxuZnVuY3Rpb24gZm9ybWF0QWJpSXRlbTIoYWJpSXRlbSwgeyBpbmNsdWRlTmFtZSA9IGZhbHNlIH0gPSB7fSkge1xuICBpZiAoYWJpSXRlbS50eXBlICE9PSBcImZ1bmN0aW9uXCIgJiYgYWJpSXRlbS50eXBlICE9PSBcImV2ZW50XCIgJiYgYWJpSXRlbS50eXBlICE9PSBcImVycm9yXCIpXG4gICAgdGhyb3cgbmV3IEludmFsaWREZWZpbml0aW9uVHlwZUVycm9yKGFiaUl0ZW0udHlwZSk7XG4gIHJldHVybiBgJHthYmlJdGVtLm5hbWV9KCR7Zm9ybWF0QWJpUGFyYW1zKGFiaUl0ZW0uaW5wdXRzLCB7IGluY2x1ZGVOYW1lIH0pfSlgO1xufVxuZnVuY3Rpb24gZm9ybWF0QWJpUGFyYW1zKHBhcmFtcywgeyBpbmNsdWRlTmFtZSA9IGZhbHNlIH0gPSB7fSkge1xuICBpZiAoIXBhcmFtcylcbiAgICByZXR1cm4gXCJcIjtcbiAgcmV0dXJuIHBhcmFtcy5tYXAoKHBhcmFtKSA9PiBmb3JtYXRBYmlQYXJhbShwYXJhbSwgeyBpbmNsdWRlTmFtZSB9KSkuam9pbihpbmNsdWRlTmFtZSA/IFwiLCBcIiA6IFwiLFwiKTtcbn1cbmZ1bmN0aW9uIGZvcm1hdEFiaVBhcmFtKHBhcmFtLCB7IGluY2x1ZGVOYW1lIH0pIHtcbiAgaWYgKHBhcmFtLnR5cGUuc3RhcnRzV2l0aChcInR1cGxlXCIpKSB7XG4gICAgcmV0dXJuIGAoJHtmb3JtYXRBYmlQYXJhbXMocGFyYW0uY29tcG9uZW50cywgeyBpbmNsdWRlTmFtZSB9KX0pJHtwYXJhbS50eXBlLnNsaWNlKFwidHVwbGVcIi5sZW5ndGgpfWA7XG4gIH1cbiAgcmV0dXJuIHBhcmFtLnR5cGUgKyAoaW5jbHVkZU5hbWUgJiYgcGFyYW0ubmFtZSA/IGAgJHtwYXJhbS5uYW1lfWAgOiBcIlwiKTtcbn1cbmZ1bmN0aW9uIGlzSGV4KHZhbHVlLCB7IHN0cmljdCA9IHRydWUgfSA9IHt9KSB7XG4gIGlmICghdmFsdWUpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKVxuICAgIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHN0cmljdCA/IC9eMHhbMC05YS1mQS1GXSokLy50ZXN0KHZhbHVlKSA6IHZhbHVlLnN0YXJ0c1dpdGgoXCIweFwiKTtcbn1cbmZ1bmN0aW9uIHNpemUyKHZhbHVlKSB7XG4gIGlmIChpc0hleCh2YWx1ZSwgeyBzdHJpY3Q6IGZhbHNlIH0pKVxuICAgIHJldHVybiBNYXRoLmNlaWwoKHZhbHVlLmxlbmd0aCAtIDIpIC8gMik7XG4gIHJldHVybiB2YWx1ZS5sZW5ndGg7XG59XG5mdW5jdGlvbiBzbGljZSh2YWx1ZSwgc3RhcnQyLCBlbmQsIHsgc3RyaWN0IH0gPSB7fSkge1xuICBpZiAoaXNIZXgodmFsdWUsIHsgc3RyaWN0OiBmYWxzZSB9KSlcbiAgICByZXR1cm4gc2xpY2VIZXgodmFsdWUsIHN0YXJ0MiwgZW5kLCB7XG4gICAgICBzdHJpY3RcbiAgICB9KTtcbiAgcmV0dXJuIHNsaWNlQnl0ZXModmFsdWUsIHN0YXJ0MiwgZW5kLCB7XG4gICAgc3RyaWN0XG4gIH0pO1xufVxuZnVuY3Rpb24gYXNzZXJ0U3RhcnRPZmZzZXQyKHZhbHVlLCBzdGFydDIpIHtcbiAgaWYgKHR5cGVvZiBzdGFydDIgPT09IFwibnVtYmVyXCIgJiYgc3RhcnQyID4gMCAmJiBzdGFydDIgPiBzaXplMih2YWx1ZSkgLSAxKVxuICAgIHRocm93IG5ldyBTbGljZU9mZnNldE91dE9mQm91bmRzRXJyb3IyKHtcbiAgICAgIG9mZnNldDogc3RhcnQyLFxuICAgICAgcG9zaXRpb246IFwic3RhcnRcIixcbiAgICAgIHNpemU6IHNpemUyKHZhbHVlKVxuICAgIH0pO1xufVxuZnVuY3Rpb24gYXNzZXJ0RW5kT2Zmc2V0Mih2YWx1ZSwgc3RhcnQyLCBlbmQpIHtcbiAgaWYgKHR5cGVvZiBzdGFydDIgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIGVuZCA9PT0gXCJudW1iZXJcIiAmJiBzaXplMih2YWx1ZSkgIT09IGVuZCAtIHN0YXJ0Mikge1xuICAgIHRocm93IG5ldyBTbGljZU9mZnNldE91dE9mQm91bmRzRXJyb3IyKHtcbiAgICAgIG9mZnNldDogZW5kLFxuICAgICAgcG9zaXRpb246IFwiZW5kXCIsXG4gICAgICBzaXplOiBzaXplMih2YWx1ZSlcbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gc2xpY2VCeXRlcyh2YWx1ZV8sIHN0YXJ0MiwgZW5kLCB7IHN0cmljdCB9ID0ge30pIHtcbiAgYXNzZXJ0U3RhcnRPZmZzZXQyKHZhbHVlXywgc3RhcnQyKTtcbiAgY29uc3QgdmFsdWUgPSB2YWx1ZV8uc2xpY2Uoc3RhcnQyLCBlbmQpO1xuICBpZiAoc3RyaWN0KVxuICAgIGFzc2VydEVuZE9mZnNldDIodmFsdWUsIHN0YXJ0MiwgZW5kKTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gc2xpY2VIZXgodmFsdWVfLCBzdGFydDIsIGVuZCwgeyBzdHJpY3QgfSA9IHt9KSB7XG4gIGFzc2VydFN0YXJ0T2Zmc2V0Mih2YWx1ZV8sIHN0YXJ0Mik7XG4gIGNvbnN0IHZhbHVlID0gYDB4JHt2YWx1ZV8ucmVwbGFjZShcIjB4XCIsIFwiXCIpLnNsaWNlKChzdGFydDIgPz8gMCkgKiAyLCAoZW5kID8/IHZhbHVlXy5sZW5ndGgpICogMil9YDtcbiAgaWYgKHN0cmljdClcbiAgICBhc3NlcnRFbmRPZmZzZXQyKHZhbHVlLCBzdGFydDIsIGVuZCk7XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHBhZDIoaGV4T3JCeXRlcywgeyBkaXIsIHNpemU6IHNpemUzID0gMzIgfSA9IHt9KSB7XG4gIGlmICh0eXBlb2YgaGV4T3JCeXRlcyA9PT0gXCJzdHJpbmdcIilcbiAgICByZXR1cm4gcGFkSGV4KGhleE9yQnl0ZXMsIHsgZGlyLCBzaXplOiBzaXplMyB9KTtcbiAgcmV0dXJuIHBhZEJ5dGVzKGhleE9yQnl0ZXMsIHsgZGlyLCBzaXplOiBzaXplMyB9KTtcbn1cbmZ1bmN0aW9uIHBhZEhleChoZXhfLCB7IGRpciwgc2l6ZTogc2l6ZTMgPSAzMiB9ID0ge30pIHtcbiAgaWYgKHNpemUzID09PSBudWxsKVxuICAgIHJldHVybiBoZXhfO1xuICBjb25zdCBoZXggPSBoZXhfLnJlcGxhY2UoXCIweFwiLCBcIlwiKTtcbiAgaWYgKGhleC5sZW5ndGggPiBzaXplMyAqIDIpXG4gICAgdGhyb3cgbmV3IFNpemVFeGNlZWRzUGFkZGluZ1NpemVFcnJvcjIoe1xuICAgICAgc2l6ZTogTWF0aC5jZWlsKGhleC5sZW5ndGggLyAyKSxcbiAgICAgIHRhcmdldFNpemU6IHNpemUzLFxuICAgICAgdHlwZTogXCJoZXhcIlxuICAgIH0pO1xuICByZXR1cm4gYDB4JHtoZXhbZGlyID09PSBcInJpZ2h0XCIgPyBcInBhZEVuZFwiIDogXCJwYWRTdGFydFwiXShzaXplMyAqIDIsIFwiMFwiKX1gO1xufVxuZnVuY3Rpb24gcGFkQnl0ZXMoYnl0ZXMyLCB7IGRpciwgc2l6ZTogc2l6ZTMgPSAzMiB9ID0ge30pIHtcbiAgaWYgKHNpemUzID09PSBudWxsKVxuICAgIHJldHVybiBieXRlczI7XG4gIGlmIChieXRlczIubGVuZ3RoID4gc2l6ZTMpXG4gICAgdGhyb3cgbmV3IFNpemVFeGNlZWRzUGFkZGluZ1NpemVFcnJvcjIoe1xuICAgICAgc2l6ZTogYnl0ZXMyLmxlbmd0aCxcbiAgICAgIHRhcmdldFNpemU6IHNpemUzLFxuICAgICAgdHlwZTogXCJieXRlc1wiXG4gICAgfSk7XG4gIGNvbnN0IHBhZGRlZEJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZTMpO1xuICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgc2l6ZTM7IGkzKyspIHtcbiAgICBjb25zdCBwYWRFbmQgPSBkaXIgPT09IFwicmlnaHRcIjtcbiAgICBwYWRkZWRCeXRlc1twYWRFbmQgPyBpMyA6IHNpemUzIC0gaTMgLSAxXSA9IGJ5dGVzMltwYWRFbmQgPyBpMyA6IGJ5dGVzMi5sZW5ndGggLSBpMyAtIDFdO1xuICB9XG4gIHJldHVybiBwYWRkZWRCeXRlcztcbn1cbmZ1bmN0aW9uIHRyaW0yKGhleE9yQnl0ZXMsIHsgZGlyID0gXCJsZWZ0XCIgfSA9IHt9KSB7XG4gIGxldCBkYXRhID0gdHlwZW9mIGhleE9yQnl0ZXMgPT09IFwic3RyaW5nXCIgPyBoZXhPckJ5dGVzLnJlcGxhY2UoXCIweFwiLCBcIlwiKSA6IGhleE9yQnl0ZXM7XG4gIGxldCBzbGljZUxlbmd0aCA9IDA7XG4gIGZvciAobGV0IGkzID0gMDsgaTMgPCBkYXRhLmxlbmd0aCAtIDE7IGkzKyspIHtcbiAgICBpZiAoZGF0YVtkaXIgPT09IFwibGVmdFwiID8gaTMgOiBkYXRhLmxlbmd0aCAtIGkzIC0gMV0udG9TdHJpbmcoKSA9PT0gXCIwXCIpXG4gICAgICBzbGljZUxlbmd0aCsrO1xuICAgIGVsc2VcbiAgICAgIGJyZWFrO1xuICB9XG4gIGRhdGEgPSBkaXIgPT09IFwibGVmdFwiID8gZGF0YS5zbGljZShzbGljZUxlbmd0aCkgOiBkYXRhLnNsaWNlKDAsIGRhdGEubGVuZ3RoIC0gc2xpY2VMZW5ndGgpO1xuICBpZiAodHlwZW9mIGhleE9yQnl0ZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICBpZiAoZGF0YS5sZW5ndGggPT09IDEgJiYgZGlyID09PSBcInJpZ2h0XCIpXG4gICAgICBkYXRhID0gYCR7ZGF0YX0wYDtcbiAgICByZXR1cm4gYDB4JHtkYXRhLmxlbmd0aCAlIDIgPT09IDEgPyBgMCR7ZGF0YX1gIDogZGF0YX1gO1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuZnVuY3Rpb24gYXNzZXJ0U2l6ZTIoaGV4T3JCeXRlcywgeyBzaXplOiBzaXplMyB9KSB7XG4gIGlmIChzaXplMihoZXhPckJ5dGVzKSA+IHNpemUzKVxuICAgIHRocm93IG5ldyBTaXplT3ZlcmZsb3dFcnJvcjIoe1xuICAgICAgZ2l2ZW5TaXplOiBzaXplMihoZXhPckJ5dGVzKSxcbiAgICAgIG1heFNpemU6IHNpemUzXG4gICAgfSk7XG59XG5mdW5jdGlvbiBoZXhUb0JpZ0ludChoZXgsIG9wdHMgPSB7fSkge1xuICBjb25zdCB7IHNpZ25lZCB9ID0gb3B0cztcbiAgaWYgKG9wdHMuc2l6ZSlcbiAgICBhc3NlcnRTaXplMihoZXgsIHsgc2l6ZTogb3B0cy5zaXplIH0pO1xuICBjb25zdCB2YWx1ZSA9IEJpZ0ludChoZXgpO1xuICBpZiAoIXNpZ25lZClcbiAgICByZXR1cm4gdmFsdWU7XG4gIGNvbnN0IHNpemUzID0gKGhleC5sZW5ndGggLSAyKSAvIDI7XG4gIGNvbnN0IG1heCA9ICgxbiA8PCBCaWdJbnQoc2l6ZTMpICogOG4gLSAxbikgLSAxbjtcbiAgaWYgKHZhbHVlIDw9IG1heClcbiAgICByZXR1cm4gdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAtIEJpZ0ludChgMHgke1wiZlwiLnBhZFN0YXJ0KHNpemUzICogMiwgXCJmXCIpfWApIC0gMW47XG59XG5mdW5jdGlvbiBoZXhUb051bWJlcihoZXgsIG9wdHMgPSB7fSkge1xuICByZXR1cm4gTnVtYmVyKGhleFRvQmlnSW50KGhleCwgb3B0cykpO1xufVxuZnVuY3Rpb24gdG9IZXgodmFsdWUsIG9wdHMgPSB7fSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJiaWdpbnRcIilcbiAgICByZXR1cm4gbnVtYmVyVG9IZXgodmFsdWUsIG9wdHMpO1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHN0cmluZ1RvSGV4KHZhbHVlLCBvcHRzKTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIilcbiAgICByZXR1cm4gYm9vbFRvSGV4KHZhbHVlLCBvcHRzKTtcbiAgcmV0dXJuIGJ5dGVzVG9IZXgodmFsdWUsIG9wdHMpO1xufVxuZnVuY3Rpb24gYm9vbFRvSGV4KHZhbHVlLCBvcHRzID0ge30pIHtcbiAgY29uc3QgaGV4ID0gYDB4JHtOdW1iZXIodmFsdWUpfWA7XG4gIGlmICh0eXBlb2Ygb3B0cy5zaXplID09PSBcIm51bWJlclwiKSB7XG4gICAgYXNzZXJ0U2l6ZTIoaGV4LCB7IHNpemU6IG9wdHMuc2l6ZSB9KTtcbiAgICByZXR1cm4gcGFkMihoZXgsIHsgc2l6ZTogb3B0cy5zaXplIH0pO1xuICB9XG4gIHJldHVybiBoZXg7XG59XG5mdW5jdGlvbiBieXRlc1RvSGV4KHZhbHVlLCBvcHRzID0ge30pIHtcbiAgbGV0IHN0cmluZyA9IFwiXCI7XG4gIGZvciAobGV0IGkzID0gMDsgaTMgPCB2YWx1ZS5sZW5ndGg7IGkzKyspIHtcbiAgICBzdHJpbmcgKz0gaGV4ZXNbdmFsdWVbaTNdXTtcbiAgfVxuICBjb25zdCBoZXggPSBgMHgke3N0cmluZ31gO1xuICBpZiAodHlwZW9mIG9wdHMuc2l6ZSA9PT0gXCJudW1iZXJcIikge1xuICAgIGFzc2VydFNpemUyKGhleCwgeyBzaXplOiBvcHRzLnNpemUgfSk7XG4gICAgcmV0dXJuIHBhZDIoaGV4LCB7IGRpcjogXCJyaWdodFwiLCBzaXplOiBvcHRzLnNpemUgfSk7XG4gIH1cbiAgcmV0dXJuIGhleDtcbn1cbmZ1bmN0aW9uIG51bWJlclRvSGV4KHZhbHVlXywgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IHsgc2lnbmVkLCBzaXplOiBzaXplMyB9ID0gb3B0cztcbiAgY29uc3QgdmFsdWUgPSBCaWdJbnQodmFsdWVfKTtcbiAgbGV0IG1heFZhbHVlO1xuICBpZiAoc2l6ZTMpIHtcbiAgICBpZiAoc2lnbmVkKVxuICAgICAgbWF4VmFsdWUgPSAoMW4gPDwgQmlnSW50KHNpemUzKSAqIDhuIC0gMW4pIC0gMW47XG4gICAgZWxzZVxuICAgICAgbWF4VmFsdWUgPSAybiAqKiAoQmlnSW50KHNpemUzKSAqIDhuKSAtIDFuO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZV8gPT09IFwibnVtYmVyXCIpIHtcbiAgICBtYXhWYWx1ZSA9IEJpZ0ludChOdW1iZXIuTUFYX1NBRkVfSU5URUdFUik7XG4gIH1cbiAgY29uc3QgbWluVmFsdWUgPSB0eXBlb2YgbWF4VmFsdWUgPT09IFwiYmlnaW50XCIgJiYgc2lnbmVkID8gLW1heFZhbHVlIC0gMW4gOiAwO1xuICBpZiAobWF4VmFsdWUgJiYgdmFsdWUgPiBtYXhWYWx1ZSB8fCB2YWx1ZSA8IG1pblZhbHVlKSB7XG4gICAgY29uc3Qgc3VmZml4ID0gdHlwZW9mIHZhbHVlXyA9PT0gXCJiaWdpbnRcIiA/IFwiblwiIDogXCJcIjtcbiAgICB0aHJvdyBuZXcgSW50ZWdlck91dE9mUmFuZ2VFcnJvcjIoe1xuICAgICAgbWF4OiBtYXhWYWx1ZSA/IGAke21heFZhbHVlfSR7c3VmZml4fWAgOiB2b2lkIDAsXG4gICAgICBtaW46IGAke21pblZhbHVlfSR7c3VmZml4fWAsXG4gICAgICBzaWduZWQsXG4gICAgICBzaXplOiBzaXplMyxcbiAgICAgIHZhbHVlOiBgJHt2YWx1ZV99JHtzdWZmaXh9YFxuICAgIH0pO1xuICB9XG4gIGNvbnN0IGhleCA9IGAweCR7KHNpZ25lZCAmJiB2YWx1ZSA8IDAgPyAoMW4gPDwgQmlnSW50KHNpemUzICogOCkpICsgQmlnSW50KHZhbHVlKSA6IHZhbHVlKS50b1N0cmluZygxNil9YDtcbiAgaWYgKHNpemUzKVxuICAgIHJldHVybiBwYWQyKGhleCwgeyBzaXplOiBzaXplMyB9KTtcbiAgcmV0dXJuIGhleDtcbn1cbmZ1bmN0aW9uIHN0cmluZ1RvSGV4KHZhbHVlXywgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IHZhbHVlID0gZW5jb2Rlci5lbmNvZGUodmFsdWVfKTtcbiAgcmV0dXJuIGJ5dGVzVG9IZXgodmFsdWUsIG9wdHMpO1xufVxuZnVuY3Rpb24gdG9CeXRlczModmFsdWUsIG9wdHMgPSB7fSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJiaWdpbnRcIilcbiAgICByZXR1cm4gbnVtYmVyVG9CeXRlcyh2YWx1ZSwgb3B0cyk7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiKVxuICAgIHJldHVybiBib29sVG9CeXRlcyh2YWx1ZSwgb3B0cyk7XG4gIGlmIChpc0hleCh2YWx1ZSkpXG4gICAgcmV0dXJuIGhleFRvQnl0ZXModmFsdWUsIG9wdHMpO1xuICByZXR1cm4gc3RyaW5nVG9CeXRlcyh2YWx1ZSwgb3B0cyk7XG59XG5mdW5jdGlvbiBib29sVG9CeXRlcyh2YWx1ZSwgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IGJ5dGVzMiA9IG5ldyBVaW50OEFycmF5KDEpO1xuICBieXRlczJbMF0gPSBOdW1iZXIodmFsdWUpO1xuICBpZiAodHlwZW9mIG9wdHMuc2l6ZSA9PT0gXCJudW1iZXJcIikge1xuICAgIGFzc2VydFNpemUyKGJ5dGVzMiwgeyBzaXplOiBvcHRzLnNpemUgfSk7XG4gICAgcmV0dXJuIHBhZDIoYnl0ZXMyLCB7IHNpemU6IG9wdHMuc2l6ZSB9KTtcbiAgfVxuICByZXR1cm4gYnl0ZXMyO1xufVxuZnVuY3Rpb24gY2hhckNvZGVUb0Jhc2UxNihjaGFyKSB7XG4gIGlmIChjaGFyID49IGNoYXJDb2RlTWFwLnplcm8gJiYgY2hhciA8PSBjaGFyQ29kZU1hcC5uaW5lKVxuICAgIHJldHVybiBjaGFyIC0gY2hhckNvZGVNYXAuemVybztcbiAgaWYgKGNoYXIgPj0gY2hhckNvZGVNYXAuQSAmJiBjaGFyIDw9IGNoYXJDb2RlTWFwLkYpXG4gICAgcmV0dXJuIGNoYXIgLSAoY2hhckNvZGVNYXAuQSAtIDEwKTtcbiAgaWYgKGNoYXIgPj0gY2hhckNvZGVNYXAuYSAmJiBjaGFyIDw9IGNoYXJDb2RlTWFwLmYpXG4gICAgcmV0dXJuIGNoYXIgLSAoY2hhckNvZGVNYXAuYSAtIDEwKTtcbiAgcmV0dXJuIHZvaWQgMDtcbn1cbmZ1bmN0aW9uIGhleFRvQnl0ZXMoaGV4Xywgb3B0cyA9IHt9KSB7XG4gIGxldCBoZXggPSBoZXhfO1xuICBpZiAob3B0cy5zaXplKSB7XG4gICAgYXNzZXJ0U2l6ZTIoaGV4LCB7IHNpemU6IG9wdHMuc2l6ZSB9KTtcbiAgICBoZXggPSBwYWQyKGhleCwgeyBkaXI6IFwicmlnaHRcIiwgc2l6ZTogb3B0cy5zaXplIH0pO1xuICB9XG4gIGxldCBoZXhTdHJpbmcgPSBoZXguc2xpY2UoMik7XG4gIGlmIChoZXhTdHJpbmcubGVuZ3RoICUgMilcbiAgICBoZXhTdHJpbmcgPSBgMCR7aGV4U3RyaW5nfWA7XG4gIGNvbnN0IGxlbmd0aCA9IGhleFN0cmluZy5sZW5ndGggLyAyO1xuICBjb25zdCBieXRlczIgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICBmb3IgKGxldCBpbmRleCA9IDAsIGogPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IG5pYmJsZUxlZnQgPSBjaGFyQ29kZVRvQmFzZTE2KGhleFN0cmluZy5jaGFyQ29kZUF0KGorKykpO1xuICAgIGNvbnN0IG5pYmJsZVJpZ2h0ID0gY2hhckNvZGVUb0Jhc2UxNihoZXhTdHJpbmcuY2hhckNvZGVBdChqKyspKTtcbiAgICBpZiAobmliYmxlTGVmdCA9PT0gdm9pZCAwIHx8IG5pYmJsZVJpZ2h0ID09PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBCYXNlRXJyb3IzKGBJbnZhbGlkIGJ5dGUgc2VxdWVuY2UgKFwiJHtoZXhTdHJpbmdbaiAtIDJdfSR7aGV4U3RyaW5nW2ogLSAxXX1cIiBpbiBcIiR7aGV4U3RyaW5nfVwiKS5gKTtcbiAgICB9XG4gICAgYnl0ZXMyW2luZGV4XSA9IG5pYmJsZUxlZnQgKiAxNiArIG5pYmJsZVJpZ2h0O1xuICB9XG4gIHJldHVybiBieXRlczI7XG59XG5mdW5jdGlvbiBudW1iZXJUb0J5dGVzKHZhbHVlLCBvcHRzKSB7XG4gIGNvbnN0IGhleCA9IG51bWJlclRvSGV4KHZhbHVlLCBvcHRzKTtcbiAgcmV0dXJuIGhleFRvQnl0ZXMoaGV4KTtcbn1cbmZ1bmN0aW9uIHN0cmluZ1RvQnl0ZXModmFsdWUsIG9wdHMgPSB7fSkge1xuICBjb25zdCBieXRlczIgPSBlbmNvZGVyMi5lbmNvZGUodmFsdWUpO1xuICBpZiAodHlwZW9mIG9wdHMuc2l6ZSA9PT0gXCJudW1iZXJcIikge1xuICAgIGFzc2VydFNpemUyKGJ5dGVzMiwgeyBzaXplOiBvcHRzLnNpemUgfSk7XG4gICAgcmV0dXJuIHBhZDIoYnl0ZXMyLCB7IGRpcjogXCJyaWdodFwiLCBzaXplOiBvcHRzLnNpemUgfSk7XG4gIH1cbiAgcmV0dXJuIGJ5dGVzMjtcbn1cbmZ1bmN0aW9uIGtlY2NhazI1Nih2YWx1ZSwgdG9fKSB7XG4gIGNvbnN0IHRvID0gdG9fIHx8IFwiaGV4XCI7XG4gIGNvbnN0IGJ5dGVzMiA9IGtlY2Nha18yNTYoaXNIZXgodmFsdWUsIHsgc3RyaWN0OiBmYWxzZSB9KSA/IHRvQnl0ZXMzKHZhbHVlKSA6IHZhbHVlKTtcbiAgaWYgKHRvID09PSBcImJ5dGVzXCIpXG4gICAgcmV0dXJuIGJ5dGVzMjtcbiAgcmV0dXJuIHRvSGV4KGJ5dGVzMik7XG59XG5mdW5jdGlvbiBoYXNoU2lnbmF0dXJlKHNpZykge1xuICByZXR1cm4gaGFzaChzaWcpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplU2lnbmF0dXJlKHNpZ25hdHVyZSkge1xuICBsZXQgYWN0aXZlID0gdHJ1ZTtcbiAgbGV0IGN1cnJlbnQgPSBcIlwiO1xuICBsZXQgbGV2ZWwgPSAwO1xuICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgbGV0IHZhbGlkID0gZmFsc2U7XG4gIGZvciAobGV0IGkzID0gMDsgaTMgPCBzaWduYXR1cmUubGVuZ3RoOyBpMysrKSB7XG4gICAgY29uc3QgY2hhciA9IHNpZ25hdHVyZVtpM107XG4gICAgaWYgKFtcIihcIiwgXCIpXCIsIFwiLFwiXS5pbmNsdWRlcyhjaGFyKSlcbiAgICAgIGFjdGl2ZSA9IHRydWU7XG4gICAgaWYgKGNoYXIgPT09IFwiKFwiKVxuICAgICAgbGV2ZWwrKztcbiAgICBpZiAoY2hhciA9PT0gXCIpXCIpXG4gICAgICBsZXZlbC0tO1xuICAgIGlmICghYWN0aXZlKVxuICAgICAgY29udGludWU7XG4gICAgaWYgKGxldmVsID09PSAwKSB7XG4gICAgICBpZiAoY2hhciA9PT0gXCIgXCIgJiYgW1wiZXZlbnRcIiwgXCJmdW5jdGlvblwiLCBcIlwiXS5pbmNsdWRlcyhyZXN1bHQpKVxuICAgICAgICByZXN1bHQgPSBcIlwiO1xuICAgICAgZWxzZSB7XG4gICAgICAgIHJlc3VsdCArPSBjaGFyO1xuICAgICAgICBpZiAoY2hhciA9PT0gXCIpXCIpIHtcbiAgICAgICAgICB2YWxpZCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoY2hhciA9PT0gXCIgXCIpIHtcbiAgICAgIGlmIChzaWduYXR1cmVbaTMgLSAxXSAhPT0gXCIsXCIgJiYgY3VycmVudCAhPT0gXCIsXCIgJiYgY3VycmVudCAhPT0gXCIsKFwiKSB7XG4gICAgICAgIGN1cnJlbnQgPSBcIlwiO1xuICAgICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICByZXN1bHQgKz0gY2hhcjtcbiAgICBjdXJyZW50ICs9IGNoYXI7XG4gIH1cbiAgaWYgKCF2YWxpZClcbiAgICB0aHJvdyBuZXcgQmFzZUVycm9yMyhcIlVuYWJsZSB0byBub3JtYWxpemUgc2lnbmF0dXJlLlwiKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHRvU2lnbmF0dXJlSGFzaChmbikge1xuICByZXR1cm4gaGFzaFNpZ25hdHVyZSh0b1NpZ25hdHVyZShmbikpO1xufVxuZnVuY3Rpb24gaXNBZGRyZXNzKGFkZHJlc3MsIG9wdGlvbnMpIHtcbiAgY29uc3QgeyBzdHJpY3QgPSB0cnVlIH0gPSBvcHRpb25zID8/IHt9O1xuICBjb25zdCBjYWNoZUtleSA9IGAke2FkZHJlc3N9LiR7c3RyaWN0fWA7XG4gIGlmIChpc0FkZHJlc3NDYWNoZS5oYXMoY2FjaGVLZXkpKVxuICAgIHJldHVybiBpc0FkZHJlc3NDYWNoZS5nZXQoY2FjaGVLZXkpO1xuICBjb25zdCByZXN1bHQgPSAoKCkgPT4ge1xuICAgIGlmICghYWRkcmVzc1JlZ2V4LnRlc3QoYWRkcmVzcykpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGFkZHJlc3MudG9Mb3dlckNhc2UoKSA9PT0gYWRkcmVzcylcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmIChzdHJpY3QpXG4gICAgICByZXR1cm4gY2hlY2tzdW1BZGRyZXNzKGFkZHJlc3MpID09PSBhZGRyZXNzO1xuICAgIHJldHVybiB0cnVlO1xuICB9KSgpO1xuICBpc0FkZHJlc3NDYWNoZS5zZXQoY2FjaGVLZXksIHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjaGVja3N1bUFkZHJlc3MoYWRkcmVzc18sIGNoYWluSWQpIHtcbiAgaWYgKGNoZWNrc3VtQWRkcmVzc0NhY2hlLmhhcyhgJHthZGRyZXNzX30uJHtjaGFpbklkfWApKVxuICAgIHJldHVybiBjaGVja3N1bUFkZHJlc3NDYWNoZS5nZXQoYCR7YWRkcmVzc199LiR7Y2hhaW5JZH1gKTtcbiAgY29uc3QgaGV4QWRkcmVzcyA9IGNoYWluSWQgPyBgJHtjaGFpbklkfSR7YWRkcmVzc18udG9Mb3dlckNhc2UoKX1gIDogYWRkcmVzc18uc3Vic3RyaW5nKDIpLnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IGhhc2gyID0ga2VjY2FrMjU2KHN0cmluZ1RvQnl0ZXMoaGV4QWRkcmVzcyksIFwiYnl0ZXNcIik7XG4gIGNvbnN0IGFkZHJlc3MgPSAoY2hhaW5JZCA/IGhleEFkZHJlc3Muc3Vic3RyaW5nKGAke2NoYWluSWR9MHhgLmxlbmd0aCkgOiBoZXhBZGRyZXNzKS5zcGxpdChcIlwiKTtcbiAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IDQwOyBpMyArPSAyKSB7XG4gICAgaWYgKGhhc2gyW2kzID4+IDFdID4+IDQgPj0gOCAmJiBhZGRyZXNzW2kzXSkge1xuICAgICAgYWRkcmVzc1tpM10gPSBhZGRyZXNzW2kzXS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cbiAgICBpZiAoKGhhc2gyW2kzID4+IDFdICYgMTUpID49IDggJiYgYWRkcmVzc1tpMyArIDFdKSB7XG4gICAgICBhZGRyZXNzW2kzICsgMV0gPSBhZGRyZXNzW2kzICsgMV0udG9VcHBlckNhc2UoKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0gYDB4JHthZGRyZXNzLmpvaW4oXCJcIil9YDtcbiAgY2hlY2tzdW1BZGRyZXNzQ2FjaGUuc2V0KGAke2FkZHJlc3NffS4ke2NoYWluSWR9YCwgcmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUN1cnNvcihieXRlczIsIHsgcmVjdXJzaXZlUmVhZExpbWl0ID0gODE5MiB9ID0ge30pIHtcbiAgY29uc3QgY3Vyc29yID0gT2JqZWN0LmNyZWF0ZShzdGF0aWNDdXJzb3IpO1xuICBjdXJzb3IuYnl0ZXMgPSBieXRlczI7XG4gIGN1cnNvci5kYXRhVmlldyA9IG5ldyBEYXRhVmlldyhieXRlczIuYnVmZmVyLCBieXRlczIuYnl0ZU9mZnNldCwgYnl0ZXMyLmJ5dGVMZW5ndGgpO1xuICBjdXJzb3IucG9zaXRpb25SZWFkQ291bnQgPSAvKiAgICAgICAgICAgKi8gbmV3IE1hcCgpO1xuICBjdXJzb3IucmVjdXJzaXZlUmVhZExpbWl0ID0gcmVjdXJzaXZlUmVhZExpbWl0O1xuICByZXR1cm4gY3Vyc29yO1xufVxuZnVuY3Rpb24gYnl0ZXNUb0JpZ0ludChieXRlczIsIG9wdHMgPSB7fSkge1xuICBpZiAodHlwZW9mIG9wdHMuc2l6ZSAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICBhc3NlcnRTaXplMihieXRlczIsIHsgc2l6ZTogb3B0cy5zaXplIH0pO1xuICBjb25zdCBoZXggPSBieXRlc1RvSGV4KGJ5dGVzMiwgb3B0cyk7XG4gIHJldHVybiBoZXhUb0JpZ0ludChoZXgsIG9wdHMpO1xufVxuZnVuY3Rpb24gYnl0ZXNUb0Jvb2woYnl0ZXNfLCBvcHRzID0ge30pIHtcbiAgbGV0IGJ5dGVzMiA9IGJ5dGVzXztcbiAgaWYgKHR5cGVvZiBvcHRzLnNpemUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBhc3NlcnRTaXplMihieXRlczIsIHsgc2l6ZTogb3B0cy5zaXplIH0pO1xuICAgIGJ5dGVzMiA9IHRyaW0yKGJ5dGVzMik7XG4gIH1cbiAgaWYgKGJ5dGVzMi5sZW5ndGggPiAxIHx8IGJ5dGVzMlswXSA+IDEpXG4gICAgdGhyb3cgbmV3IEludmFsaWRCeXRlc0Jvb2xlYW5FcnJvcihieXRlczIpO1xuICByZXR1cm4gQm9vbGVhbihieXRlczJbMF0pO1xufVxuZnVuY3Rpb24gYnl0ZXNUb051bWJlcihieXRlczIsIG9wdHMgPSB7fSkge1xuICBpZiAodHlwZW9mIG9wdHMuc2l6ZSAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICBhc3NlcnRTaXplMihieXRlczIsIHsgc2l6ZTogb3B0cy5zaXplIH0pO1xuICBjb25zdCBoZXggPSBieXRlc1RvSGV4KGJ5dGVzMiwgb3B0cyk7XG4gIHJldHVybiBoZXhUb051bWJlcihoZXgsIG9wdHMpO1xufVxuZnVuY3Rpb24gYnl0ZXNUb1N0cmluZyhieXRlc18sIG9wdHMgPSB7fSkge1xuICBsZXQgYnl0ZXMyID0gYnl0ZXNfO1xuICBpZiAodHlwZW9mIG9wdHMuc2l6ZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGFzc2VydFNpemUyKGJ5dGVzMiwgeyBzaXplOiBvcHRzLnNpemUgfSk7XG4gICAgYnl0ZXMyID0gdHJpbTIoYnl0ZXMyLCB7IGRpcjogXCJyaWdodFwiIH0pO1xuICB9XG4gIHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoYnl0ZXMyKTtcbn1cbmZ1bmN0aW9uIGNvbmNhdCh2YWx1ZXM4KSB7XG4gIGlmICh0eXBlb2YgdmFsdWVzOFswXSA9PT0gXCJzdHJpbmdcIilcbiAgICByZXR1cm4gY29uY2F0SGV4KHZhbHVlczgpO1xuICByZXR1cm4gY29uY2F0Qnl0ZXModmFsdWVzOCk7XG59XG5mdW5jdGlvbiBjb25jYXRCeXRlcyh2YWx1ZXM4KSB7XG4gIGxldCBsZW5ndGggPSAwO1xuICBmb3IgKGNvbnN0IGFyciBvZiB2YWx1ZXM4KSB7XG4gICAgbGVuZ3RoICs9IGFyci5sZW5ndGg7XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgbGV0IG9mZnNldCA9IDA7XG4gIGZvciAoY29uc3QgYXJyIG9mIHZhbHVlczgpIHtcbiAgICByZXN1bHQuc2V0KGFyciwgb2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gYXJyLmxlbmd0aDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY29uY2F0SGV4KHZhbHVlczgpIHtcbiAgcmV0dXJuIGAweCR7dmFsdWVzOC5yZWR1Y2UoKGFjYywgeCkgPT4gYWNjICsgeC5yZXBsYWNlKFwiMHhcIiwgXCJcIiksIFwiXCIpfWA7XG59XG5mdW5jdGlvbiBlbmNvZGVBYmlQYXJhbWV0ZXJzKHBhcmFtcywgdmFsdWVzOCkge1xuICBpZiAocGFyYW1zLmxlbmd0aCAhPT0gdmFsdWVzOC5sZW5ndGgpXG4gICAgdGhyb3cgbmV3IEFiaUVuY29kaW5nTGVuZ3RoTWlzbWF0Y2hFcnJvcih7XG4gICAgICBleHBlY3RlZExlbmd0aDogcGFyYW1zLmxlbmd0aCxcbiAgICAgIGdpdmVuTGVuZ3RoOiB2YWx1ZXM4Lmxlbmd0aFxuICAgIH0pO1xuICBjb25zdCBwcmVwYXJlZFBhcmFtcyA9IHByZXBhcmVQYXJhbXMoe1xuICAgIHBhcmFtcyxcbiAgICB2YWx1ZXM6IHZhbHVlczhcbiAgfSk7XG4gIGNvbnN0IGRhdGEgPSBlbmNvZGVQYXJhbXMocHJlcGFyZWRQYXJhbXMpO1xuICBpZiAoZGF0YS5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIFwiMHhcIjtcbiAgcmV0dXJuIGRhdGE7XG59XG5mdW5jdGlvbiBwcmVwYXJlUGFyYW1zKHsgcGFyYW1zLCB2YWx1ZXM6IHZhbHVlczggfSkge1xuICBjb25zdCBwcmVwYXJlZFBhcmFtcyA9IFtdO1xuICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgcGFyYW1zLmxlbmd0aDsgaTMrKykge1xuICAgIHByZXBhcmVkUGFyYW1zLnB1c2gocHJlcGFyZVBhcmFtKHsgcGFyYW06IHBhcmFtc1tpM10sIHZhbHVlOiB2YWx1ZXM4W2kzXSB9KSk7XG4gIH1cbiAgcmV0dXJuIHByZXBhcmVkUGFyYW1zO1xufVxuZnVuY3Rpb24gcHJlcGFyZVBhcmFtKHsgcGFyYW0sIHZhbHVlIH0pIHtcbiAgY29uc3QgYXJyYXlDb21wb25lbnRzID0gZ2V0QXJyYXlDb21wb25lbnRzKHBhcmFtLnR5cGUpO1xuICBpZiAoYXJyYXlDb21wb25lbnRzKSB7XG4gICAgY29uc3QgW2xlbmd0aCwgdHlwZV0gPSBhcnJheUNvbXBvbmVudHM7XG4gICAgcmV0dXJuIGVuY29kZUFycmF5KHZhbHVlLCB7IGxlbmd0aCwgcGFyYW06IHsgLi4ucGFyYW0sIHR5cGUgfSB9KTtcbiAgfVxuICBpZiAocGFyYW0udHlwZSA9PT0gXCJ0dXBsZVwiKSB7XG4gICAgcmV0dXJuIGVuY29kZVR1cGxlKHZhbHVlLCB7XG4gICAgICBwYXJhbVxuICAgIH0pO1xuICB9XG4gIGlmIChwYXJhbS50eXBlID09PSBcImFkZHJlc3NcIikge1xuICAgIHJldHVybiBlbmNvZGVBZGRyZXNzKHZhbHVlKTtcbiAgfVxuICBpZiAocGFyYW0udHlwZSA9PT0gXCJib29sXCIpIHtcbiAgICByZXR1cm4gZW5jb2RlQm9vbCh2YWx1ZSk7XG4gIH1cbiAgaWYgKHBhcmFtLnR5cGUuc3RhcnRzV2l0aChcInVpbnRcIikgfHwgcGFyYW0udHlwZS5zdGFydHNXaXRoKFwiaW50XCIpKSB7XG4gICAgY29uc3Qgc2lnbmVkID0gcGFyYW0udHlwZS5zdGFydHNXaXRoKFwiaW50XCIpO1xuICAgIGNvbnN0IFssICwgc2l6ZTMgPSBcIjI1NlwiXSA9IGludGVnZXJSZWdleDIuZXhlYyhwYXJhbS50eXBlKSA/PyBbXTtcbiAgICByZXR1cm4gZW5jb2RlTnVtYmVyKHZhbHVlLCB7XG4gICAgICBzaWduZWQsXG4gICAgICBzaXplOiBOdW1iZXIoc2l6ZTMpXG4gICAgfSk7XG4gIH1cbiAgaWYgKHBhcmFtLnR5cGUuc3RhcnRzV2l0aChcImJ5dGVzXCIpKSB7XG4gICAgcmV0dXJuIGVuY29kZUJ5dGVzKHZhbHVlLCB7IHBhcmFtIH0pO1xuICB9XG4gIGlmIChwYXJhbS50eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGVuY29kZVN0cmluZyh2YWx1ZSk7XG4gIH1cbiAgdGhyb3cgbmV3IEludmFsaWRBYmlFbmNvZGluZ1R5cGVFcnJvcihwYXJhbS50eXBlLCB7XG4gICAgZG9jc1BhdGg6IFwiL2RvY3MvY29udHJhY3QvZW5jb2RlQWJpUGFyYW1ldGVyc1wiXG4gIH0pO1xufVxuZnVuY3Rpb24gZW5jb2RlUGFyYW1zKHByZXBhcmVkUGFyYW1zKSB7XG4gIGxldCBzdGF0aWNTaXplID0gMDtcbiAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IHByZXBhcmVkUGFyYW1zLmxlbmd0aDsgaTMrKykge1xuICAgIGNvbnN0IHsgZHluYW1pYywgZW5jb2RlZCB9ID0gcHJlcGFyZWRQYXJhbXNbaTNdO1xuICAgIGlmIChkeW5hbWljKVxuICAgICAgc3RhdGljU2l6ZSArPSAzMjtcbiAgICBlbHNlXG4gICAgICBzdGF0aWNTaXplICs9IHNpemUyKGVuY29kZWQpO1xuICB9XG4gIGNvbnN0IHN0YXRpY1BhcmFtcyA9IFtdO1xuICBjb25zdCBkeW5hbWljUGFyYW1zID0gW107XG4gIGxldCBkeW5hbWljU2l6ZSA9IDA7XG4gIGZvciAobGV0IGkzID0gMDsgaTMgPCBwcmVwYXJlZFBhcmFtcy5sZW5ndGg7IGkzKyspIHtcbiAgICBjb25zdCB7IGR5bmFtaWMsIGVuY29kZWQgfSA9IHByZXBhcmVkUGFyYW1zW2kzXTtcbiAgICBpZiAoZHluYW1pYykge1xuICAgICAgc3RhdGljUGFyYW1zLnB1c2gobnVtYmVyVG9IZXgoc3RhdGljU2l6ZSArIGR5bmFtaWNTaXplLCB7IHNpemU6IDMyIH0pKTtcbiAgICAgIGR5bmFtaWNQYXJhbXMucHVzaChlbmNvZGVkKTtcbiAgICAgIGR5bmFtaWNTaXplICs9IHNpemUyKGVuY29kZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0aWNQYXJhbXMucHVzaChlbmNvZGVkKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvbmNhdChbLi4uc3RhdGljUGFyYW1zLCAuLi5keW5hbWljUGFyYW1zXSk7XG59XG5mdW5jdGlvbiBlbmNvZGVBZGRyZXNzKHZhbHVlKSB7XG4gIGlmICghaXNBZGRyZXNzKHZhbHVlKSlcbiAgICB0aHJvdyBuZXcgSW52YWxpZEFkZHJlc3NFcnJvcih7IGFkZHJlc3M6IHZhbHVlIH0pO1xuICByZXR1cm4geyBkeW5hbWljOiBmYWxzZSwgZW5jb2RlZDogcGFkSGV4KHZhbHVlLnRvTG93ZXJDYXNlKCkpIH07XG59XG5mdW5jdGlvbiBlbmNvZGVBcnJheSh2YWx1ZSwgeyBsZW5ndGgsIHBhcmFtIH0pIHtcbiAgY29uc3QgZHluYW1pYyA9IGxlbmd0aCA9PT0gbnVsbDtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSlcbiAgICB0aHJvdyBuZXcgSW52YWxpZEFycmF5RXJyb3IodmFsdWUpO1xuICBpZiAoIWR5bmFtaWMgJiYgdmFsdWUubGVuZ3RoICE9PSBsZW5ndGgpXG4gICAgdGhyb3cgbmV3IEFiaUVuY29kaW5nQXJyYXlMZW5ndGhNaXNtYXRjaEVycm9yKHtcbiAgICAgIGV4cGVjdGVkTGVuZ3RoOiBsZW5ndGgsXG4gICAgICBnaXZlbkxlbmd0aDogdmFsdWUubGVuZ3RoLFxuICAgICAgdHlwZTogYCR7cGFyYW0udHlwZX1bJHtsZW5ndGh9XWBcbiAgICB9KTtcbiAgbGV0IGR5bmFtaWNDaGlsZCA9IGZhbHNlO1xuICBjb25zdCBwcmVwYXJlZFBhcmFtcyA9IFtdO1xuICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgdmFsdWUubGVuZ3RoOyBpMysrKSB7XG4gICAgY29uc3QgcHJlcGFyZWRQYXJhbSA9IHByZXBhcmVQYXJhbSh7IHBhcmFtLCB2YWx1ZTogdmFsdWVbaTNdIH0pO1xuICAgIGlmIChwcmVwYXJlZFBhcmFtLmR5bmFtaWMpXG4gICAgICBkeW5hbWljQ2hpbGQgPSB0cnVlO1xuICAgIHByZXBhcmVkUGFyYW1zLnB1c2gocHJlcGFyZWRQYXJhbSk7XG4gIH1cbiAgaWYgKGR5bmFtaWMgfHwgZHluYW1pY0NoaWxkKSB7XG4gICAgY29uc3QgZGF0YSA9IGVuY29kZVBhcmFtcyhwcmVwYXJlZFBhcmFtcyk7XG4gICAgaWYgKGR5bmFtaWMpIHtcbiAgICAgIGNvbnN0IGxlbmd0aDIgPSBudW1iZXJUb0hleChwcmVwYXJlZFBhcmFtcy5sZW5ndGgsIHsgc2l6ZTogMzIgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkeW5hbWljOiB0cnVlLFxuICAgICAgICBlbmNvZGVkOiBwcmVwYXJlZFBhcmFtcy5sZW5ndGggPiAwID8gY29uY2F0KFtsZW5ndGgyLCBkYXRhXSkgOiBsZW5ndGgyXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoZHluYW1pY0NoaWxkKVxuICAgICAgcmV0dXJuIHsgZHluYW1pYzogdHJ1ZSwgZW5jb2RlZDogZGF0YSB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgZHluYW1pYzogZmFsc2UsXG4gICAgZW5jb2RlZDogY29uY2F0KHByZXBhcmVkUGFyYW1zLm1hcCgoeyBlbmNvZGVkIH0pID0+IGVuY29kZWQpKVxuICB9O1xufVxuZnVuY3Rpb24gZW5jb2RlQnl0ZXModmFsdWUsIHsgcGFyYW0gfSkge1xuICBjb25zdCBbLCBwYXJhbVNpemVdID0gcGFyYW0udHlwZS5zcGxpdChcImJ5dGVzXCIpO1xuICBjb25zdCBieXRlc1NpemUgPSBzaXplMih2YWx1ZSk7XG4gIGlmICghcGFyYW1TaXplKSB7XG4gICAgbGV0IHZhbHVlXyA9IHZhbHVlO1xuICAgIGlmIChieXRlc1NpemUgJSAzMiAhPT0gMClcbiAgICAgIHZhbHVlXyA9IHBhZEhleCh2YWx1ZV8sIHtcbiAgICAgICAgZGlyOiBcInJpZ2h0XCIsXG4gICAgICAgIHNpemU6IE1hdGguY2VpbCgodmFsdWUubGVuZ3RoIC0gMikgLyAyIC8gMzIpICogMzJcbiAgICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBkeW5hbWljOiB0cnVlLFxuICAgICAgZW5jb2RlZDogY29uY2F0KFtwYWRIZXgobnVtYmVyVG9IZXgoYnl0ZXNTaXplLCB7IHNpemU6IDMyIH0pKSwgdmFsdWVfXSlcbiAgICB9O1xuICB9XG4gIGlmIChieXRlc1NpemUgIT09IE51bWJlci5wYXJzZUludChwYXJhbVNpemUpKVxuICAgIHRocm93IG5ldyBBYmlFbmNvZGluZ0J5dGVzU2l6ZU1pc21hdGNoRXJyb3Ioe1xuICAgICAgZXhwZWN0ZWRTaXplOiBOdW1iZXIucGFyc2VJbnQocGFyYW1TaXplKSxcbiAgICAgIHZhbHVlXG4gICAgfSk7XG4gIHJldHVybiB7IGR5bmFtaWM6IGZhbHNlLCBlbmNvZGVkOiBwYWRIZXgodmFsdWUsIHsgZGlyOiBcInJpZ2h0XCIgfSkgfTtcbn1cbmZ1bmN0aW9uIGVuY29kZUJvb2wodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJib29sZWFuXCIpXG4gICAgdGhyb3cgbmV3IEJhc2VFcnJvcjMoYEludmFsaWQgYm9vbGVhbiB2YWx1ZTogXCIke3ZhbHVlfVwiICh0eXBlOiAke3R5cGVvZiB2YWx1ZX0pLiBFeHBlY3RlZDogXFxgdHJ1ZVxcYCBvciBcXGBmYWxzZVxcYC5gKTtcbiAgcmV0dXJuIHsgZHluYW1pYzogZmFsc2UsIGVuY29kZWQ6IHBhZEhleChib29sVG9IZXgodmFsdWUpKSB9O1xufVxuZnVuY3Rpb24gZW5jb2RlTnVtYmVyKHZhbHVlLCB7IHNpZ25lZCwgc2l6ZTogc2l6ZTMgPSAyNTYgfSkge1xuICBpZiAodHlwZW9mIHNpemUzID09PSBcIm51bWJlclwiKSB7XG4gICAgY29uc3QgbWF4ID0gMm4gKiogKEJpZ0ludChzaXplMykgLSAoc2lnbmVkID8gMW4gOiAwbikpIC0gMW47XG4gICAgY29uc3QgbWluID0gc2lnbmVkID8gLW1heCAtIDFuIDogMG47XG4gICAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKVxuICAgICAgdGhyb3cgbmV3IEludGVnZXJPdXRPZlJhbmdlRXJyb3IyKHtcbiAgICAgICAgbWF4OiBtYXgudG9TdHJpbmcoKSxcbiAgICAgICAgbWluOiBtaW4udG9TdHJpbmcoKSxcbiAgICAgICAgc2lnbmVkLFxuICAgICAgICBzaXplOiBzaXplMyAvIDgsXG4gICAgICAgIHZhbHVlOiB2YWx1ZS50b1N0cmluZygpXG4gICAgICB9KTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGR5bmFtaWM6IGZhbHNlLFxuICAgIGVuY29kZWQ6IG51bWJlclRvSGV4KHZhbHVlLCB7XG4gICAgICBzaXplOiAzMixcbiAgICAgIHNpZ25lZFxuICAgIH0pXG4gIH07XG59XG5mdW5jdGlvbiBlbmNvZGVTdHJpbmcodmFsdWUpIHtcbiAgY29uc3QgaGV4VmFsdWUgPSBzdHJpbmdUb0hleCh2YWx1ZSk7XG4gIGNvbnN0IHBhcnRzTGVuZ3RoID0gTWF0aC5jZWlsKHNpemUyKGhleFZhbHVlKSAvIDMyKTtcbiAgY29uc3QgcGFydHMgPSBbXTtcbiAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IHBhcnRzTGVuZ3RoOyBpMysrKSB7XG4gICAgcGFydHMucHVzaChwYWRIZXgoc2xpY2UoaGV4VmFsdWUsIGkzICogMzIsIChpMyArIDEpICogMzIpLCB7XG4gICAgICBkaXI6IFwicmlnaHRcIlxuICAgIH0pKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGR5bmFtaWM6IHRydWUsXG4gICAgZW5jb2RlZDogY29uY2F0KFtcbiAgICAgIHBhZEhleChudW1iZXJUb0hleChzaXplMihoZXhWYWx1ZSksIHsgc2l6ZTogMzIgfSkpLFxuICAgICAgLi4ucGFydHNcbiAgICBdKVxuICB9O1xufVxuZnVuY3Rpb24gZW5jb2RlVHVwbGUodmFsdWUsIHsgcGFyYW0gfSkge1xuICBsZXQgZHluYW1pYyA9IGZhbHNlO1xuICBjb25zdCBwcmVwYXJlZFBhcmFtcyA9IFtdO1xuICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgcGFyYW0uY29tcG9uZW50cy5sZW5ndGg7IGkzKyspIHtcbiAgICBjb25zdCBwYXJhbV8gPSBwYXJhbS5jb21wb25lbnRzW2kzXTtcbiAgICBjb25zdCBpbmRleCA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gaTMgOiBwYXJhbV8ubmFtZTtcbiAgICBjb25zdCBwcmVwYXJlZFBhcmFtID0gcHJlcGFyZVBhcmFtKHtcbiAgICAgIHBhcmFtOiBwYXJhbV8sXG4gICAgICB2YWx1ZTogdmFsdWVbaW5kZXhdXG4gICAgfSk7XG4gICAgcHJlcGFyZWRQYXJhbXMucHVzaChwcmVwYXJlZFBhcmFtKTtcbiAgICBpZiAocHJlcGFyZWRQYXJhbS5keW5hbWljKVxuICAgICAgZHluYW1pYyA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBkeW5hbWljLFxuICAgIGVuY29kZWQ6IGR5bmFtaWMgPyBlbmNvZGVQYXJhbXMocHJlcGFyZWRQYXJhbXMpIDogY29uY2F0KHByZXBhcmVkUGFyYW1zLm1hcCgoeyBlbmNvZGVkIH0pID0+IGVuY29kZWQpKVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0QXJyYXlDb21wb25lbnRzKHR5cGUpIHtcbiAgY29uc3QgbWF0Y2hlczIgPSB0eXBlLm1hdGNoKC9eKC4qKVxcWyhcXGQrKT9cXF0kLyk7XG4gIHJldHVybiBtYXRjaGVzMiA/IChcbiAgICAvL1xuICAgIFttYXRjaGVzMlsyXSA/IE51bWJlcihtYXRjaGVzMlsyXSkgOiBudWxsLCBtYXRjaGVzMlsxXV1cbiAgKSA6IHZvaWQgMDtcbn1cbmZ1bmN0aW9uIGRlY29kZUFiaVBhcmFtZXRlcnMocGFyYW1zLCBkYXRhKSB7XG4gIGNvbnN0IGJ5dGVzMiA9IHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiID8gaGV4VG9CeXRlcyhkYXRhKSA6IGRhdGE7XG4gIGNvbnN0IGN1cnNvciA9IGNyZWF0ZUN1cnNvcihieXRlczIpO1xuICBpZiAoc2l6ZTIoYnl0ZXMyKSA9PT0gMCAmJiBwYXJhbXMubGVuZ3RoID4gMClcbiAgICB0aHJvdyBuZXcgQWJpRGVjb2RpbmdaZXJvRGF0YUVycm9yKCk7XG4gIGlmIChzaXplMihkYXRhKSAmJiBzaXplMihkYXRhKSA8IDMyKVxuICAgIHRocm93IG5ldyBBYmlEZWNvZGluZ0RhdGFTaXplVG9vU21hbGxFcnJvcih7XG4gICAgICBkYXRhOiB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiA/IGRhdGEgOiBieXRlc1RvSGV4KGRhdGEpLFxuICAgICAgcGFyYW1zLFxuICAgICAgc2l6ZTogc2l6ZTIoZGF0YSlcbiAgICB9KTtcbiAgbGV0IGNvbnN1bWVkID0gMDtcbiAgY29uc3QgdmFsdWVzOCA9IFtdO1xuICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgcGFyYW1zLmxlbmd0aDsgKytpMykge1xuICAgIGNvbnN0IHBhcmFtID0gcGFyYW1zW2kzXTtcbiAgICBjdXJzb3Iuc2V0UG9zaXRpb24oY29uc3VtZWQpO1xuICAgIGNvbnN0IFtkYXRhMiwgY29uc3VtZWRfXSA9IGRlY29kZVBhcmFtZXRlcihjdXJzb3IsIHBhcmFtLCB7XG4gICAgICBzdGF0aWNQb3NpdGlvbjogMFxuICAgIH0pO1xuICAgIGNvbnN1bWVkICs9IGNvbnN1bWVkXztcbiAgICB2YWx1ZXM4LnB1c2goZGF0YTIpO1xuICB9XG4gIHJldHVybiB2YWx1ZXM4O1xufVxuZnVuY3Rpb24gZGVjb2RlUGFyYW1ldGVyKGN1cnNvciwgcGFyYW0sIHsgc3RhdGljUG9zaXRpb24gfSkge1xuICBjb25zdCBhcnJheUNvbXBvbmVudHMgPSBnZXRBcnJheUNvbXBvbmVudHMocGFyYW0udHlwZSk7XG4gIGlmIChhcnJheUNvbXBvbmVudHMpIHtcbiAgICBjb25zdCBbbGVuZ3RoLCB0eXBlXSA9IGFycmF5Q29tcG9uZW50cztcbiAgICByZXR1cm4gZGVjb2RlQXJyYXkoY3Vyc29yLCB7IC4uLnBhcmFtLCB0eXBlIH0sIHsgbGVuZ3RoLCBzdGF0aWNQb3NpdGlvbiB9KTtcbiAgfVxuICBpZiAocGFyYW0udHlwZSA9PT0gXCJ0dXBsZVwiKVxuICAgIHJldHVybiBkZWNvZGVUdXBsZShjdXJzb3IsIHBhcmFtLCB7IHN0YXRpY1Bvc2l0aW9uIH0pO1xuICBpZiAocGFyYW0udHlwZSA9PT0gXCJhZGRyZXNzXCIpXG4gICAgcmV0dXJuIGRlY29kZUFkZHJlc3MoY3Vyc29yKTtcbiAgaWYgKHBhcmFtLnR5cGUgPT09IFwiYm9vbFwiKVxuICAgIHJldHVybiBkZWNvZGVCb29sKGN1cnNvcik7XG4gIGlmIChwYXJhbS50eXBlLnN0YXJ0c1dpdGgoXCJieXRlc1wiKSlcbiAgICByZXR1cm4gZGVjb2RlQnl0ZXMoY3Vyc29yLCBwYXJhbSwgeyBzdGF0aWNQb3NpdGlvbiB9KTtcbiAgaWYgKHBhcmFtLnR5cGUuc3RhcnRzV2l0aChcInVpbnRcIikgfHwgcGFyYW0udHlwZS5zdGFydHNXaXRoKFwiaW50XCIpKVxuICAgIHJldHVybiBkZWNvZGVOdW1iZXIoY3Vyc29yLCBwYXJhbSk7XG4gIGlmIChwYXJhbS50eXBlID09PSBcInN0cmluZ1wiKVxuICAgIHJldHVybiBkZWNvZGVTdHJpbmcoY3Vyc29yLCB7IHN0YXRpY1Bvc2l0aW9uIH0pO1xuICB0aHJvdyBuZXcgSW52YWxpZEFiaURlY29kaW5nVHlwZUVycm9yKHBhcmFtLnR5cGUsIHtcbiAgICBkb2NzUGF0aDogXCIvZG9jcy9jb250cmFjdC9kZWNvZGVBYmlQYXJhbWV0ZXJzXCJcbiAgfSk7XG59XG5mdW5jdGlvbiBkZWNvZGVBZGRyZXNzKGN1cnNvcikge1xuICBjb25zdCB2YWx1ZSA9IGN1cnNvci5yZWFkQnl0ZXMoMzIpO1xuICByZXR1cm4gW2NoZWNrc3VtQWRkcmVzcyhieXRlc1RvSGV4KHNsaWNlQnl0ZXModmFsdWUsIC0yMCkpKSwgMzJdO1xufVxuZnVuY3Rpb24gZGVjb2RlQXJyYXkoY3Vyc29yLCBwYXJhbSwgeyBsZW5ndGgsIHN0YXRpY1Bvc2l0aW9uIH0pIHtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBjb25zdCBvZmZzZXQgPSBieXRlc1RvTnVtYmVyKGN1cnNvci5yZWFkQnl0ZXMoc2l6ZU9mT2Zmc2V0KSk7XG4gICAgY29uc3Qgc3RhcnQyID0gc3RhdGljUG9zaXRpb24gKyBvZmZzZXQ7XG4gICAgY29uc3Qgc3RhcnRPZkRhdGEgPSBzdGFydDIgKyBzaXplT2ZMZW5ndGg7XG4gICAgY3Vyc29yLnNldFBvc2l0aW9uKHN0YXJ0Mik7XG4gICAgY29uc3QgbGVuZ3RoMiA9IGJ5dGVzVG9OdW1iZXIoY3Vyc29yLnJlYWRCeXRlcyhzaXplT2ZMZW5ndGgpKTtcbiAgICBjb25zdCBkeW5hbWljQ2hpbGQgPSBoYXNEeW5hbWljQ2hpbGQocGFyYW0pO1xuICAgIGxldCBjb25zdW1lZDIgPSAwO1xuICAgIGNvbnN0IHZhbHVlMiA9IFtdO1xuICAgIGZvciAobGV0IGkzID0gMDsgaTMgPCBsZW5ndGgyOyArK2kzKSB7XG4gICAgICBjdXJzb3Iuc2V0UG9zaXRpb24oc3RhcnRPZkRhdGEgKyAoZHluYW1pY0NoaWxkID8gaTMgKiAzMiA6IGNvbnN1bWVkMikpO1xuICAgICAgY29uc3QgW2RhdGEsIGNvbnN1bWVkX10gPSBkZWNvZGVQYXJhbWV0ZXIoY3Vyc29yLCBwYXJhbSwge1xuICAgICAgICBzdGF0aWNQb3NpdGlvbjogc3RhcnRPZkRhdGFcbiAgICAgIH0pO1xuICAgICAgY29uc3VtZWQyICs9IGNvbnN1bWVkXztcbiAgICAgIHZhbHVlMi5wdXNoKGRhdGEpO1xuICAgIH1cbiAgICBjdXJzb3Iuc2V0UG9zaXRpb24oc3RhdGljUG9zaXRpb24gKyAzMik7XG4gICAgcmV0dXJuIFt2YWx1ZTIsIDMyXTtcbiAgfVxuICBpZiAoaGFzRHluYW1pY0NoaWxkKHBhcmFtKSkge1xuICAgIGNvbnN0IG9mZnNldCA9IGJ5dGVzVG9OdW1iZXIoY3Vyc29yLnJlYWRCeXRlcyhzaXplT2ZPZmZzZXQpKTtcbiAgICBjb25zdCBzdGFydDIgPSBzdGF0aWNQb3NpdGlvbiArIG9mZnNldDtcbiAgICBjb25zdCB2YWx1ZTIgPSBbXTtcbiAgICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgbGVuZ3RoOyArK2kzKSB7XG4gICAgICBjdXJzb3Iuc2V0UG9zaXRpb24oc3RhcnQyICsgaTMgKiAzMik7XG4gICAgICBjb25zdCBbZGF0YV0gPSBkZWNvZGVQYXJhbWV0ZXIoY3Vyc29yLCBwYXJhbSwge1xuICAgICAgICBzdGF0aWNQb3NpdGlvbjogc3RhcnQyXG4gICAgICB9KTtcbiAgICAgIHZhbHVlMi5wdXNoKGRhdGEpO1xuICAgIH1cbiAgICBjdXJzb3Iuc2V0UG9zaXRpb24oc3RhdGljUG9zaXRpb24gKyAzMik7XG4gICAgcmV0dXJuIFt2YWx1ZTIsIDMyXTtcbiAgfVxuICBsZXQgY29uc3VtZWQgPSAwO1xuICBjb25zdCB2YWx1ZSA9IFtdO1xuICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgbGVuZ3RoOyArK2kzKSB7XG4gICAgY29uc3QgW2RhdGEsIGNvbnN1bWVkX10gPSBkZWNvZGVQYXJhbWV0ZXIoY3Vyc29yLCBwYXJhbSwge1xuICAgICAgc3RhdGljUG9zaXRpb246IHN0YXRpY1Bvc2l0aW9uICsgY29uc3VtZWRcbiAgICB9KTtcbiAgICBjb25zdW1lZCArPSBjb25zdW1lZF87XG4gICAgdmFsdWUucHVzaChkYXRhKTtcbiAgfVxuICByZXR1cm4gW3ZhbHVlLCBjb25zdW1lZF07XG59XG5mdW5jdGlvbiBkZWNvZGVCb29sKGN1cnNvcikge1xuICByZXR1cm4gW2J5dGVzVG9Cb29sKGN1cnNvci5yZWFkQnl0ZXMoMzIpLCB7IHNpemU6IDMyIH0pLCAzMl07XG59XG5mdW5jdGlvbiBkZWNvZGVCeXRlcyhjdXJzb3IsIHBhcmFtLCB7IHN0YXRpY1Bvc2l0aW9uIH0pIHtcbiAgY29uc3QgW18sIHNpemUzXSA9IHBhcmFtLnR5cGUuc3BsaXQoXCJieXRlc1wiKTtcbiAgaWYgKCFzaXplMykge1xuICAgIGNvbnN0IG9mZnNldCA9IGJ5dGVzVG9OdW1iZXIoY3Vyc29yLnJlYWRCeXRlcygzMikpO1xuICAgIGN1cnNvci5zZXRQb3NpdGlvbihzdGF0aWNQb3NpdGlvbiArIG9mZnNldCk7XG4gICAgY29uc3QgbGVuZ3RoID0gYnl0ZXNUb051bWJlcihjdXJzb3IucmVhZEJ5dGVzKDMyKSk7XG4gICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgY3Vyc29yLnNldFBvc2l0aW9uKHN0YXRpY1Bvc2l0aW9uICsgMzIpO1xuICAgICAgcmV0dXJuIFtcIjB4XCIsIDMyXTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGN1cnNvci5yZWFkQnl0ZXMobGVuZ3RoKTtcbiAgICBjdXJzb3Iuc2V0UG9zaXRpb24oc3RhdGljUG9zaXRpb24gKyAzMik7XG4gICAgcmV0dXJuIFtieXRlc1RvSGV4KGRhdGEpLCAzMl07XG4gIH1cbiAgY29uc3QgdmFsdWUgPSBieXRlc1RvSGV4KGN1cnNvci5yZWFkQnl0ZXMoTnVtYmVyLnBhcnNlSW50KHNpemUzKSwgMzIpKTtcbiAgcmV0dXJuIFt2YWx1ZSwgMzJdO1xufVxuZnVuY3Rpb24gZGVjb2RlTnVtYmVyKGN1cnNvciwgcGFyYW0pIHtcbiAgY29uc3Qgc2lnbmVkID0gcGFyYW0udHlwZS5zdGFydHNXaXRoKFwiaW50XCIpO1xuICBjb25zdCBzaXplMyA9IE51bWJlci5wYXJzZUludChwYXJhbS50eXBlLnNwbGl0KFwiaW50XCIpWzFdIHx8IFwiMjU2XCIpO1xuICBjb25zdCB2YWx1ZSA9IGN1cnNvci5yZWFkQnl0ZXMoMzIpO1xuICByZXR1cm4gW1xuICAgIHNpemUzID4gNDggPyBieXRlc1RvQmlnSW50KHZhbHVlLCB7IHNpZ25lZCB9KSA6IGJ5dGVzVG9OdW1iZXIodmFsdWUsIHsgc2lnbmVkIH0pLFxuICAgIDMyXG4gIF07XG59XG5mdW5jdGlvbiBkZWNvZGVUdXBsZShjdXJzb3IsIHBhcmFtLCB7IHN0YXRpY1Bvc2l0aW9uIH0pIHtcbiAgY29uc3QgaGFzVW5uYW1lZENoaWxkID0gcGFyYW0uY29tcG9uZW50cy5sZW5ndGggPT09IDAgfHwgcGFyYW0uY29tcG9uZW50cy5zb21lKCh7IG5hbWUgfSkgPT4gIW5hbWUpO1xuICBjb25zdCB2YWx1ZSA9IGhhc1VubmFtZWRDaGlsZCA/IFtdIDoge307XG4gIGxldCBjb25zdW1lZCA9IDA7XG4gIGlmIChoYXNEeW5hbWljQ2hpbGQocGFyYW0pKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gYnl0ZXNUb051bWJlcihjdXJzb3IucmVhZEJ5dGVzKHNpemVPZk9mZnNldCkpO1xuICAgIGNvbnN0IHN0YXJ0MiA9IHN0YXRpY1Bvc2l0aW9uICsgb2Zmc2V0O1xuICAgIGZvciAobGV0IGkzID0gMDsgaTMgPCBwYXJhbS5jb21wb25lbnRzLmxlbmd0aDsgKytpMykge1xuICAgICAgY29uc3QgY29tcG9uZW50ID0gcGFyYW0uY29tcG9uZW50c1tpM107XG4gICAgICBjdXJzb3Iuc2V0UG9zaXRpb24oc3RhcnQyICsgY29uc3VtZWQpO1xuICAgICAgY29uc3QgW2RhdGEsIGNvbnN1bWVkX10gPSBkZWNvZGVQYXJhbWV0ZXIoY3Vyc29yLCBjb21wb25lbnQsIHtcbiAgICAgICAgc3RhdGljUG9zaXRpb246IHN0YXJ0MlxuICAgICAgfSk7XG4gICAgICBjb25zdW1lZCArPSBjb25zdW1lZF87XG4gICAgICB2YWx1ZVtoYXNVbm5hbWVkQ2hpbGQgPyBpMyA6IGNvbXBvbmVudD8ubmFtZV0gPSBkYXRhO1xuICAgIH1cbiAgICBjdXJzb3Iuc2V0UG9zaXRpb24oc3RhdGljUG9zaXRpb24gKyAzMik7XG4gICAgcmV0dXJuIFt2YWx1ZSwgMzJdO1xuICB9XG4gIGZvciAobGV0IGkzID0gMDsgaTMgPCBwYXJhbS5jb21wb25lbnRzLmxlbmd0aDsgKytpMykge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IHBhcmFtLmNvbXBvbmVudHNbaTNdO1xuICAgIGNvbnN0IFtkYXRhLCBjb25zdW1lZF9dID0gZGVjb2RlUGFyYW1ldGVyKGN1cnNvciwgY29tcG9uZW50LCB7XG4gICAgICBzdGF0aWNQb3NpdGlvblxuICAgIH0pO1xuICAgIHZhbHVlW2hhc1VubmFtZWRDaGlsZCA/IGkzIDogY29tcG9uZW50Py5uYW1lXSA9IGRhdGE7XG4gICAgY29uc3VtZWQgKz0gY29uc3VtZWRfO1xuICB9XG4gIHJldHVybiBbdmFsdWUsIGNvbnN1bWVkXTtcbn1cbmZ1bmN0aW9uIGRlY29kZVN0cmluZyhjdXJzb3IsIHsgc3RhdGljUG9zaXRpb24gfSkge1xuICBjb25zdCBvZmZzZXQgPSBieXRlc1RvTnVtYmVyKGN1cnNvci5yZWFkQnl0ZXMoMzIpKTtcbiAgY29uc3Qgc3RhcnQyID0gc3RhdGljUG9zaXRpb24gKyBvZmZzZXQ7XG4gIGN1cnNvci5zZXRQb3NpdGlvbihzdGFydDIpO1xuICBjb25zdCBsZW5ndGggPSBieXRlc1RvTnVtYmVyKGN1cnNvci5yZWFkQnl0ZXMoMzIpKTtcbiAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgIGN1cnNvci5zZXRQb3NpdGlvbihzdGF0aWNQb3NpdGlvbiArIDMyKTtcbiAgICByZXR1cm4gW1wiXCIsIDMyXTtcbiAgfVxuICBjb25zdCBkYXRhID0gY3Vyc29yLnJlYWRCeXRlcyhsZW5ndGgsIDMyKTtcbiAgY29uc3QgdmFsdWUgPSBieXRlc1RvU3RyaW5nKHRyaW0yKGRhdGEpKTtcbiAgY3Vyc29yLnNldFBvc2l0aW9uKHN0YXRpY1Bvc2l0aW9uICsgMzIpO1xuICByZXR1cm4gW3ZhbHVlLCAzMl07XG59XG5mdW5jdGlvbiBoYXNEeW5hbWljQ2hpbGQocGFyYW0pIHtcbiAgY29uc3QgeyB0eXBlIH0gPSBwYXJhbTtcbiAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIHRydWU7XG4gIGlmICh0eXBlID09PSBcImJ5dGVzXCIpXG4gICAgcmV0dXJuIHRydWU7XG4gIGlmICh0eXBlLmVuZHNXaXRoKFwiW11cIikpXG4gICAgcmV0dXJuIHRydWU7XG4gIGlmICh0eXBlID09PSBcInR1cGxlXCIpXG4gICAgcmV0dXJuIHBhcmFtLmNvbXBvbmVudHM/LnNvbWUoaGFzRHluYW1pY0NoaWxkKTtcbiAgY29uc3QgYXJyYXlDb21wb25lbnRzID0gZ2V0QXJyYXlDb21wb25lbnRzKHBhcmFtLnR5cGUpO1xuICBpZiAoYXJyYXlDb21wb25lbnRzICYmIGhhc0R5bmFtaWNDaGlsZCh7IC4uLnBhcmFtLCB0eXBlOiBhcnJheUNvbXBvbmVudHNbMV0gfSkpXG4gICAgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGdldEFiaUl0ZW0ocGFyYW1ldGVycykge1xuICBjb25zdCB7IGFiaSwgYXJncyA9IFtdLCBuYW1lIH0gPSBwYXJhbWV0ZXJzO1xuICBjb25zdCBpc1NlbGVjdG9yID0gaXNIZXgobmFtZSwgeyBzdHJpY3Q6IGZhbHNlIH0pO1xuICBjb25zdCBhYmlJdGVtcyA9IGFiaS5maWx0ZXIoKGFiaUl0ZW0pID0+IHtcbiAgICBpZiAoaXNTZWxlY3Rvcikge1xuICAgICAgaWYgKGFiaUl0ZW0udHlwZSA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICByZXR1cm4gdG9GdW5jdGlvblNlbGVjdG9yKGFiaUl0ZW0pID09PSBuYW1lO1xuICAgICAgaWYgKGFiaUl0ZW0udHlwZSA9PT0gXCJldmVudFwiKVxuICAgICAgICByZXR1cm4gdG9FdmVudFNlbGVjdG9yKGFiaUl0ZW0pID09PSBuYW1lO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gXCJuYW1lXCIgaW4gYWJpSXRlbSAmJiBhYmlJdGVtLm5hbWUgPT09IG5hbWU7XG4gIH0pO1xuICBpZiAoYWJpSXRlbXMubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiB2b2lkIDA7XG4gIGlmIChhYmlJdGVtcy5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuIGFiaUl0ZW1zWzBdO1xuICBsZXQgbWF0Y2hlZEFiaUl0ZW0gPSB2b2lkIDA7XG4gIGZvciAoY29uc3QgYWJpSXRlbSBvZiBhYmlJdGVtcykge1xuICAgIGlmICghKFwiaW5wdXRzXCIgaW4gYWJpSXRlbSkpXG4gICAgICBjb250aW51ZTtcbiAgICBpZiAoIWFyZ3MgfHwgYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgIGlmICghYWJpSXRlbS5pbnB1dHMgfHwgYWJpSXRlbS5pbnB1dHMubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gYWJpSXRlbTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoIWFiaUl0ZW0uaW5wdXRzKVxuICAgICAgY29udGludWU7XG4gICAgaWYgKGFiaUl0ZW0uaW5wdXRzLmxlbmd0aCA9PT0gMClcbiAgICAgIGNvbnRpbnVlO1xuICAgIGlmIChhYmlJdGVtLmlucHV0cy5sZW5ndGggIT09IGFyZ3MubGVuZ3RoKVxuICAgICAgY29udGludWU7XG4gICAgY29uc3QgbWF0Y2hlZCA9IGFyZ3MuZXZlcnkoKGFyZywgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IGFiaVBhcmFtZXRlciA9IFwiaW5wdXRzXCIgaW4gYWJpSXRlbSAmJiBhYmlJdGVtLmlucHV0c1tpbmRleF07XG4gICAgICBpZiAoIWFiaVBhcmFtZXRlcilcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIGlzQXJnT2ZUeXBlKGFyZywgYWJpUGFyYW1ldGVyKTtcbiAgICB9KTtcbiAgICBpZiAobWF0Y2hlZCkge1xuICAgICAgaWYgKG1hdGNoZWRBYmlJdGVtICYmIFwiaW5wdXRzXCIgaW4gbWF0Y2hlZEFiaUl0ZW0gJiYgbWF0Y2hlZEFiaUl0ZW0uaW5wdXRzKSB7XG4gICAgICAgIGNvbnN0IGFtYmlndW91c1R5cGVzID0gZ2V0QW1iaWd1b3VzVHlwZXMoYWJpSXRlbS5pbnB1dHMsIG1hdGNoZWRBYmlJdGVtLmlucHV0cywgYXJncyk7XG4gICAgICAgIGlmIChhbWJpZ3VvdXNUeXBlcylcbiAgICAgICAgICB0aHJvdyBuZXcgQWJpSXRlbUFtYmlndWl0eUVycm9yKHtcbiAgICAgICAgICAgIGFiaUl0ZW0sXG4gICAgICAgICAgICB0eXBlOiBhbWJpZ3VvdXNUeXBlc1swXVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGFiaUl0ZW06IG1hdGNoZWRBYmlJdGVtLFxuICAgICAgICAgICAgdHlwZTogYW1iaWd1b3VzVHlwZXNbMV1cbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIG1hdGNoZWRBYmlJdGVtID0gYWJpSXRlbTtcbiAgICB9XG4gIH1cbiAgaWYgKG1hdGNoZWRBYmlJdGVtKVxuICAgIHJldHVybiBtYXRjaGVkQWJpSXRlbTtcbiAgcmV0dXJuIGFiaUl0ZW1zWzBdO1xufVxuZnVuY3Rpb24gaXNBcmdPZlR5cGUoYXJnLCBhYmlQYXJhbWV0ZXIpIHtcbiAgY29uc3QgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG4gIGNvbnN0IGFiaVBhcmFtZXRlclR5cGUgPSBhYmlQYXJhbWV0ZXIudHlwZTtcbiAgc3dpdGNoIChhYmlQYXJhbWV0ZXJUeXBlKSB7XG4gICAgY2FzZSBcImFkZHJlc3NcIjpcbiAgICAgIHJldHVybiBpc0FkZHJlc3MoYXJnLCB7IHN0cmljdDogZmFsc2UgfSk7XG4gICAgY2FzZSBcImJvb2xcIjpcbiAgICAgIHJldHVybiBhcmdUeXBlID09PSBcImJvb2xlYW5cIjtcbiAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgIHJldHVybiBhcmdUeXBlID09PSBcInN0cmluZ1wiO1xuICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgIHJldHVybiBhcmdUeXBlID09PSBcInN0cmluZ1wiO1xuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGlmIChhYmlQYXJhbWV0ZXJUeXBlID09PSBcInR1cGxlXCIgJiYgXCJjb21wb25lbnRzXCIgaW4gYWJpUGFyYW1ldGVyKVxuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhhYmlQYXJhbWV0ZXIuY29tcG9uZW50cykuZXZlcnkoKGNvbXBvbmVudCwgaW5kZXgpID0+IHtcbiAgICAgICAgICByZXR1cm4gaXNBcmdPZlR5cGUoT2JqZWN0LnZhbHVlcyhhcmcpW2luZGV4XSwgY29tcG9uZW50KTtcbiAgICAgICAgfSk7XG4gICAgICBpZiAoL151P2ludCg4fDE2fDI0fDMyfDQwfDQ4fDU2fDY0fDcyfDgwfDg4fDk2fDEwNHwxMTJ8MTIwfDEyOHwxMzZ8MTQ0fDE1MnwxNjB8MTY4fDE3NnwxODR8MTkyfDIwMHwyMDh8MjE2fDIyNHwyMzJ8MjQwfDI0OHwyNTYpPyQvLnRlc3QoYWJpUGFyYW1ldGVyVHlwZSkpXG4gICAgICAgIHJldHVybiBhcmdUeXBlID09PSBcIm51bWJlclwiIHx8IGFyZ1R5cGUgPT09IFwiYmlnaW50XCI7XG4gICAgICBpZiAoL15ieXRlcyhbMS05XXwxWzAtOV18MlswLTldfDNbMC0yXSk/JC8udGVzdChhYmlQYXJhbWV0ZXJUeXBlKSlcbiAgICAgICAgcmV0dXJuIGFyZ1R5cGUgPT09IFwic3RyaW5nXCIgfHwgYXJnIGluc3RhbmNlb2YgVWludDhBcnJheTtcbiAgICAgIGlmICgvW2Etel0rWzEtOV17MCwzfShcXFtbMC05XXswLH1cXF0pKyQvLnRlc3QoYWJpUGFyYW1ldGVyVHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKSAmJiBhcmcuZXZlcnkoKHgpID0+IGlzQXJnT2ZUeXBlKHgsIHtcbiAgICAgICAgICAuLi5hYmlQYXJhbWV0ZXIsXG4gICAgICAgICAgLy9cbiAgICAgICAgICB0eXBlOiBhYmlQYXJhbWV0ZXJUeXBlLnJlcGxhY2UoLyhcXFtbMC05XXswLH1cXF0pJC8sIFwiXCIpXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEFtYmlndW91c1R5cGVzKHNvdXJjZVBhcmFtZXRlcnMsIHRhcmdldFBhcmFtZXRlcnMsIGFyZ3MpIHtcbiAgZm9yIChjb25zdCBwYXJhbWV0ZXJJbmRleCBpbiBzb3VyY2VQYXJhbWV0ZXJzKSB7XG4gICAgY29uc3Qgc291cmNlUGFyYW1ldGVyID0gc291cmNlUGFyYW1ldGVyc1twYXJhbWV0ZXJJbmRleF07XG4gICAgY29uc3QgdGFyZ2V0UGFyYW1ldGVyID0gdGFyZ2V0UGFyYW1ldGVyc1twYXJhbWV0ZXJJbmRleF07XG4gICAgaWYgKHNvdXJjZVBhcmFtZXRlci50eXBlID09PSBcInR1cGxlXCIgJiYgdGFyZ2V0UGFyYW1ldGVyLnR5cGUgPT09IFwidHVwbGVcIiAmJiBcImNvbXBvbmVudHNcIiBpbiBzb3VyY2VQYXJhbWV0ZXIgJiYgXCJjb21wb25lbnRzXCIgaW4gdGFyZ2V0UGFyYW1ldGVyKVxuICAgICAgcmV0dXJuIGdldEFtYmlndW91c1R5cGVzKHNvdXJjZVBhcmFtZXRlci5jb21wb25lbnRzLCB0YXJnZXRQYXJhbWV0ZXIuY29tcG9uZW50cywgYXJnc1twYXJhbWV0ZXJJbmRleF0pO1xuICAgIGNvbnN0IHR5cGVzID0gW3NvdXJjZVBhcmFtZXRlci50eXBlLCB0YXJnZXRQYXJhbWV0ZXIudHlwZV07XG4gICAgY29uc3QgYW1iaWd1b3VzID0gKCgpID0+IHtcbiAgICAgIGlmICh0eXBlcy5pbmNsdWRlcyhcImFkZHJlc3NcIikgJiYgdHlwZXMuaW5jbHVkZXMoXCJieXRlczIwXCIpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICh0eXBlcy5pbmNsdWRlcyhcImFkZHJlc3NcIikgJiYgdHlwZXMuaW5jbHVkZXMoXCJzdHJpbmdcIikpXG4gICAgICAgIHJldHVybiBpc0FkZHJlc3MoYXJnc1twYXJhbWV0ZXJJbmRleF0sIHsgc3RyaWN0OiBmYWxzZSB9KTtcbiAgICAgIGlmICh0eXBlcy5pbmNsdWRlcyhcImFkZHJlc3NcIikgJiYgdHlwZXMuaW5jbHVkZXMoXCJieXRlc1wiKSlcbiAgICAgICAgcmV0dXJuIGlzQWRkcmVzcyhhcmdzW3BhcmFtZXRlckluZGV4XSwgeyBzdHJpY3Q6IGZhbHNlIH0pO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pKCk7XG4gICAgaWYgKGFtYmlndW91cylcbiAgICAgIHJldHVybiB0eXBlcztcbiAgfVxuICByZXR1cm47XG59XG5mdW5jdGlvbiBmb3JtYXRVbml0cyh2YWx1ZSwgZGVjaW1hbHMpIHtcbiAgbGV0IGRpc3BsYXkgPSB2YWx1ZS50b1N0cmluZygpO1xuICBjb25zdCBuZWdhdGl2ZSA9IGRpc3BsYXkuc3RhcnRzV2l0aChcIi1cIik7XG4gIGlmIChuZWdhdGl2ZSlcbiAgICBkaXNwbGF5ID0gZGlzcGxheS5zbGljZSgxKTtcbiAgZGlzcGxheSA9IGRpc3BsYXkucGFkU3RhcnQoZGVjaW1hbHMsIFwiMFwiKTtcbiAgbGV0IFtpbnRlZ2VyLCBmcmFjdGlvbl0gPSBbXG4gICAgZGlzcGxheS5zbGljZSgwLCBkaXNwbGF5Lmxlbmd0aCAtIGRlY2ltYWxzKSxcbiAgICBkaXNwbGF5LnNsaWNlKGRpc3BsYXkubGVuZ3RoIC0gZGVjaW1hbHMpXG4gIF07XG4gIGZyYWN0aW9uID0gZnJhY3Rpb24ucmVwbGFjZSgvKDArKSQvLCBcIlwiKTtcbiAgcmV0dXJuIGAke25lZ2F0aXZlID8gXCItXCIgOiBcIlwifSR7aW50ZWdlciB8fCBcIjBcIn0ke2ZyYWN0aW9uID8gYC4ke2ZyYWN0aW9ufWAgOiBcIlwifWA7XG59XG5mdW5jdGlvbiBmb3JtYXRHd2VpKHdlaSwgdW5pdCA9IFwid2VpXCIpIHtcbiAgcmV0dXJuIGZvcm1hdFVuaXRzKHdlaSwgZ3dlaVVuaXRzW3VuaXRdKTtcbn1cbmZ1bmN0aW9uIHByZXBhcmVFbmNvZGVGdW5jdGlvbkRhdGEocGFyYW1ldGVycykge1xuICBjb25zdCB7IGFiaSwgYXJncywgZnVuY3Rpb25OYW1lIH0gPSBwYXJhbWV0ZXJzO1xuICBsZXQgYWJpSXRlbSA9IGFiaVswXTtcbiAgaWYgKGZ1bmN0aW9uTmFtZSkge1xuICAgIGNvbnN0IGl0ZW0gPSBnZXRBYmlJdGVtKHtcbiAgICAgIGFiaSxcbiAgICAgIGFyZ3MsXG4gICAgICBuYW1lOiBmdW5jdGlvbk5hbWVcbiAgICB9KTtcbiAgICBpZiAoIWl0ZW0pXG4gICAgICB0aHJvdyBuZXcgQWJpRnVuY3Rpb25Ob3RGb3VuZEVycm9yKGZ1bmN0aW9uTmFtZSwgeyBkb2NzUGF0aDogZG9jc1BhdGgzIH0pO1xuICAgIGFiaUl0ZW0gPSBpdGVtO1xuICB9XG4gIGlmIChhYmlJdGVtLnR5cGUgIT09IFwiZnVuY3Rpb25cIilcbiAgICB0aHJvdyBuZXcgQWJpRnVuY3Rpb25Ob3RGb3VuZEVycm9yKHZvaWQgMCwgeyBkb2NzUGF0aDogZG9jc1BhdGgzIH0pO1xuICByZXR1cm4ge1xuICAgIGFiaTogW2FiaUl0ZW1dLFxuICAgIGZ1bmN0aW9uTmFtZTogdG9GdW5jdGlvblNlbGVjdG9yKGZvcm1hdEFiaUl0ZW0yKGFiaUl0ZW0pKVxuICB9O1xufVxuZnVuY3Rpb24gZW5jb2RlRnVuY3Rpb25EYXRhKHBhcmFtZXRlcnMpIHtcbiAgY29uc3QgeyBhcmdzIH0gPSBwYXJhbWV0ZXJzO1xuICBjb25zdCB7IGFiaSwgZnVuY3Rpb25OYW1lIH0gPSAoKCkgPT4ge1xuICAgIGlmIChwYXJhbWV0ZXJzLmFiaS5sZW5ndGggPT09IDEgJiYgcGFyYW1ldGVycy5mdW5jdGlvbk5hbWU/LnN0YXJ0c1dpdGgoXCIweFwiKSlcbiAgICAgIHJldHVybiBwYXJhbWV0ZXJzO1xuICAgIHJldHVybiBwcmVwYXJlRW5jb2RlRnVuY3Rpb25EYXRhKHBhcmFtZXRlcnMpO1xuICB9KSgpO1xuICBjb25zdCBhYmlJdGVtID0gYWJpWzBdO1xuICBjb25zdCBzaWduYXR1cmUgPSBmdW5jdGlvbk5hbWU7XG4gIGNvbnN0IGRhdGEgPSBcImlucHV0c1wiIGluIGFiaUl0ZW0gJiYgYWJpSXRlbS5pbnB1dHMgPyBlbmNvZGVBYmlQYXJhbWV0ZXJzKGFiaUl0ZW0uaW5wdXRzLCBhcmdzID8/IFtdKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGNvbmNhdEhleChbc2lnbmF0dXJlLCBkYXRhID8/IFwiMHhcIl0pO1xufVxudmFyIHR1cGxlUmVnZXgsIHVuaXZlcnNhbFJlc29sdmVyRXJyb3JzLCB1bml2ZXJzYWxSZXNvbHZlclJlc29sdmVBYmksIHVuaXZlcnNhbFJlc29sdmVyUmV2ZXJzZUFiaSwgdmVyc2lvbjMsIGVycm9yQ29uZmlnLCBCYXNlRXJyb3IzLCBBYmlEZWNvZGluZ0RhdGFTaXplVG9vU21hbGxFcnJvciwgQWJpRGVjb2RpbmdaZXJvRGF0YUVycm9yLCBBYmlFbmNvZGluZ0FycmF5TGVuZ3RoTWlzbWF0Y2hFcnJvciwgQWJpRW5jb2RpbmdCeXRlc1NpemVNaXNtYXRjaEVycm9yLCBBYmlFbmNvZGluZ0xlbmd0aE1pc21hdGNoRXJyb3IsIEFiaUZ1bmN0aW9uTm90Rm91bmRFcnJvciwgQWJpSXRlbUFtYmlndWl0eUVycm9yLCBJbnZhbGlkQWJpRW5jb2RpbmdUeXBlRXJyb3IsIEludmFsaWRBYmlEZWNvZGluZ1R5cGVFcnJvciwgSW52YWxpZEFycmF5RXJyb3IsIEludmFsaWREZWZpbml0aW9uVHlwZUVycm9yLCBTbGljZU9mZnNldE91dE9mQm91bmRzRXJyb3IyLCBTaXplRXhjZWVkc1BhZGRpbmdTaXplRXJyb3IyLCBJbnRlZ2VyT3V0T2ZSYW5nZUVycm9yMiwgSW52YWxpZEJ5dGVzQm9vbGVhbkVycm9yLCBTaXplT3ZlcmZsb3dFcnJvcjIsIGhleGVzLCBlbmNvZGVyLCBlbmNvZGVyMiwgY2hhckNvZGVNYXAsIGhhc2gsIHRvU2lnbmF0dXJlLCB0b0Z1bmN0aW9uU2VsZWN0b3IsIEludmFsaWRBZGRyZXNzRXJyb3IsIExydU1hcCwgYWRkcmVzc1JlZ2V4LCBpc0FkZHJlc3NDYWNoZSwgY2hlY2tzdW1BZGRyZXNzQ2FjaGUsIE5lZ2F0aXZlT2Zmc2V0RXJyb3IsIFBvc2l0aW9uT3V0T2ZCb3VuZHNFcnJvciwgUmVjdXJzaXZlUmVhZExpbWl0RXhjZWVkZWRFcnJvciwgc3RhdGljQ3Vyc29yLCBpbnRlZ2VyUmVnZXgyLCBzaXplT2ZMZW5ndGgsIHNpemVPZk9mZnNldCwgdG9FdmVudFNlbGVjdG9yLCBnd2VpVW5pdHMsIGRvY3NQYXRoMywgRXhlY3V0aW9uUmV2ZXJ0ZWRFcnJvciwgRmVlQ2FwVG9vSGlnaEVycm9yLCBGZWVDYXBUb29Mb3dFcnJvciwgTm9uY2VUb29IaWdoRXJyb3IsIE5vbmNlVG9vTG93RXJyb3IsIE5vbmNlTWF4VmFsdWVFcnJvciwgSW5zdWZmaWNpZW50RnVuZHNFcnJvciwgSW50cmluc2ljR2FzVG9vSGlnaEVycm9yLCBJbnRyaW5zaWNHYXNUb29Mb3dFcnJvciwgVHJhbnNhY3Rpb25UeXBlTm90U3VwcG9ydGVkRXJyb3IsIFRpcEFib3ZlRmVlQ2FwRXJyb3IsIG1heEludDgsIG1heEludDE2LCBtYXhJbnQyNCwgbWF4SW50MzIsIG1heEludDQwLCBtYXhJbnQ0OCwgbWF4SW50NTYsIG1heEludDY0LCBtYXhJbnQ3MiwgbWF4SW50ODAsIG1heEludDg4LCBtYXhJbnQ5NiwgbWF4SW50MTA0LCBtYXhJbnQxMTIsIG1heEludDEyMCwgbWF4SW50MTI4LCBtYXhJbnQxMzYsIG1heEludDE0NCwgbWF4SW50MTUyLCBtYXhJbnQxNjAsIG1heEludDE2OCwgbWF4SW50MTc2LCBtYXhJbnQxODQsIG1heEludDE5MiwgbWF4SW50MjAwLCBtYXhJbnQyMDgsIG1heEludDIxNiwgbWF4SW50MjI0LCBtYXhJbnQyMzIsIG1heEludDI0MCwgbWF4SW50MjQ4LCBtYXhJbnQyNTYsIG1pbkludDgsIG1pbkludDE2LCBtaW5JbnQyNCwgbWluSW50MzIsIG1pbkludDQwLCBtaW5JbnQ0OCwgbWluSW50NTYsIG1pbkludDY0LCBtaW5JbnQ3MiwgbWluSW50ODAsIG1pbkludDg4LCBtaW5JbnQ5NiwgbWluSW50MTA0LCBtaW5JbnQxMTIsIG1pbkludDEyMCwgbWluSW50MTI4LCBtaW5JbnQxMzYsIG1pbkludDE0NCwgbWluSW50MTUyLCBtaW5JbnQxNjAsIG1pbkludDE2OCwgbWluSW50MTc2LCBtaW5JbnQxODQsIG1pbkludDE5MiwgbWluSW50MjAwLCBtaW5JbnQyMDgsIG1pbkludDIxNiwgbWluSW50MjI0LCBtaW5JbnQyMzIsIG1pbkludDI0MCwgbWluSW50MjQ4LCBtaW5JbnQyNTYsIG1heFVpbnQ4LCBtYXhVaW50MTYsIG1heFVpbnQyNCwgbWF4VWludDMyLCBtYXhVaW50NDAsIG1heFVpbnQ0OCwgbWF4VWludDU2LCBtYXhVaW50NjQsIG1heFVpbnQ3MiwgbWF4VWludDgwLCBtYXhVaW50ODgsIG1heFVpbnQ5NiwgbWF4VWludDEwNCwgbWF4VWludDExMiwgbWF4VWludDEyMCwgbWF4VWludDEyOCwgbWF4VWludDEzNiwgbWF4VWludDE0NCwgbWF4VWludDE1MiwgbWF4VWludDE2MCwgbWF4VWludDE2OCwgbWF4VWludDE3NiwgbWF4VWludDE4NCwgbWF4VWludDE5MiwgbWF4VWludDIwMCwgbWF4VWludDIwOCwgbWF4VWludDIxNiwgbWF4VWludDIyNCwgbWF4VWludDIzMiwgbWF4VWludDI0MCwgbWF4VWludDI0OCwgbWF4VWludDI1NjtcbnZhciBpbml0X2NodW5rXzRFRjRLMk1IID0gX19lc20oe1xuICBcIi4uL29yY2hlc3RyYXRpb24vc3JjL3ZlbmRvci92aWVtL2NodW5rLTRFRjRLMk1ILmpzXCIoKSB7XG4gICAgaW5pdF9zaGEzKCk7XG4gICAgdHVwbGVSZWdleCA9IC9edHVwbGUoPzxhcnJheT4oXFxbKFxcZCopXFxdKSopJC87XG4gICAgdW5pdmVyc2FsUmVzb2x2ZXJFcnJvcnMgPSBbXG4gICAgICB7XG4gICAgICAgIGlucHV0czogW10sXG4gICAgICAgIG5hbWU6IFwiUmVzb2x2ZXJOb3RGb3VuZFwiLFxuICAgICAgICB0eXBlOiBcImVycm9yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlucHV0czogW10sXG4gICAgICAgIG5hbWU6IFwiUmVzb2x2ZXJXaWxkY2FyZE5vdFN1cHBvcnRlZFwiLFxuICAgICAgICB0eXBlOiBcImVycm9yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlucHV0czogW10sXG4gICAgICAgIG5hbWU6IFwiUmVzb2x2ZXJOb3RDb250cmFjdFwiLFxuICAgICAgICB0eXBlOiBcImVycm9yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwicmV0dXJuRGF0YVwiLFxuICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiBcIlJlc29sdmVyRXJyb3JcIixcbiAgICAgICAgdHlwZTogXCJlcnJvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcInN0YXR1c1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDE2XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwibWVzc2FnZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIG5hbWU6IFwiZXJyb3JzXCIsXG4gICAgICAgICAgICB0eXBlOiBcInR1cGxlW11cIlxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgbmFtZTogXCJIdHRwRXJyb3JcIixcbiAgICAgICAgdHlwZTogXCJlcnJvclwiXG4gICAgICB9XG4gICAgXTtcbiAgICB1bml2ZXJzYWxSZXNvbHZlclJlc29sdmVBYmkgPSBbXG4gICAgICAuLi51bml2ZXJzYWxSZXNvbHZlckVycm9ycyxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJyZXNvbHZlXCIsXG4gICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgeyBuYW1lOiBcIm5hbWVcIiwgdHlwZTogXCJieXRlc1wiIH0sXG4gICAgICAgICAgeyBuYW1lOiBcImRhdGFcIiwgdHlwZTogXCJieXRlc1wiIH1cbiAgICAgICAgXSxcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgIHsgbmFtZTogXCJcIiwgdHlwZTogXCJieXRlc1wiIH0sXG4gICAgICAgICAgeyBuYW1lOiBcImFkZHJlc3NcIiwgdHlwZTogXCJhZGRyZXNzXCIgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcInJlc29sdmVcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICB7IG5hbWU6IFwibmFtZVwiLCB0eXBlOiBcImJ5dGVzXCIgfSxcbiAgICAgICAgICB7IG5hbWU6IFwiZGF0YVwiLCB0eXBlOiBcImJ5dGVzXCIgfSxcbiAgICAgICAgICB7IG5hbWU6IFwiZ2F0ZXdheXNcIiwgdHlwZTogXCJzdHJpbmdbXVwiIH1cbiAgICAgICAgXSxcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgIHsgbmFtZTogXCJcIiwgdHlwZTogXCJieXRlc1wiIH0sXG4gICAgICAgICAgeyBuYW1lOiBcImFkZHJlc3NcIiwgdHlwZTogXCJhZGRyZXNzXCIgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgXTtcbiAgICB1bml2ZXJzYWxSZXNvbHZlclJldmVyc2VBYmkgPSBbXG4gICAgICAuLi51bml2ZXJzYWxSZXNvbHZlckVycm9ycyxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJyZXZlcnNlXCIsXG4gICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICAgICAgaW5wdXRzOiBbeyB0eXBlOiBcImJ5dGVzXCIsIG5hbWU6IFwicmV2ZXJzZU5hbWVcIiB9XSxcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgIHsgdHlwZTogXCJzdHJpbmdcIiwgbmFtZTogXCJyZXNvbHZlZE5hbWVcIiB9LFxuICAgICAgICAgIHsgdHlwZTogXCJhZGRyZXNzXCIsIG5hbWU6IFwicmVzb2x2ZWRBZGRyZXNzXCIgfSxcbiAgICAgICAgICB7IHR5cGU6IFwiYWRkcmVzc1wiLCBuYW1lOiBcInJldmVyc2VSZXNvbHZlclwiIH0sXG4gICAgICAgICAgeyB0eXBlOiBcImFkZHJlc3NcIiwgbmFtZTogXCJyZXNvbHZlclwiIH1cbiAgICAgICAgXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJyZXZlcnNlXCIsXG4gICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgeyB0eXBlOiBcImJ5dGVzXCIsIG5hbWU6IFwicmV2ZXJzZU5hbWVcIiB9LFxuICAgICAgICAgIHsgdHlwZTogXCJzdHJpbmdbXVwiLCBuYW1lOiBcImdhdGV3YXlzXCIgfVxuICAgICAgICBdLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgeyB0eXBlOiBcInN0cmluZ1wiLCBuYW1lOiBcInJlc29sdmVkTmFtZVwiIH0sXG4gICAgICAgICAgeyB0eXBlOiBcImFkZHJlc3NcIiwgbmFtZTogXCJyZXNvbHZlZEFkZHJlc3NcIiB9LFxuICAgICAgICAgIHsgdHlwZTogXCJhZGRyZXNzXCIsIG5hbWU6IFwicmV2ZXJzZVJlc29sdmVyXCIgfSxcbiAgICAgICAgICB7IHR5cGU6IFwiYWRkcmVzc1wiLCBuYW1lOiBcInJlc29sdmVyXCIgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgXTtcbiAgICB2ZXJzaW9uMyA9IFwiMi4zMS4wXCI7XG4gICAgZXJyb3JDb25maWcgPSB7XG4gICAgICBnZXREb2NzVXJsOiAoeyBkb2NzQmFzZVVybCwgZG9jc1BhdGg6IGRvY3NQYXRoNiA9IFwiXCIsIGRvY3NTbHVnIH0pID0+IGRvY3NQYXRoNiA/IGAke2RvY3NCYXNlVXJsID8/IFwiaHR0cHM6Ly92aWVtLnNoXCJ9JHtkb2NzUGF0aDZ9JHtkb2NzU2x1ZyA/IGAjJHtkb2NzU2x1Z31gIDogXCJcIn1gIDogdm9pZCAwLFxuICAgICAgdmVyc2lvbjogYHZpZW1AJHt2ZXJzaW9uM31gXG4gICAgfTtcbiAgICBCYXNlRXJyb3IzID0gY2xhc3MgX0Jhc2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICAgIGNvbnN0cnVjdG9yKHNob3J0TWVzc2FnZSwgYXJncyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGRldGFpbHMgPSAoKCkgPT4ge1xuICAgICAgICAgIGlmIChhcmdzLmNhdXNlIGluc3RhbmNlb2YgX0Jhc2VFcnJvcilcbiAgICAgICAgICAgIHJldHVybiBhcmdzLmNhdXNlLmRldGFpbHM7XG4gICAgICAgICAgaWYgKGFyZ3MuY2F1c2U/Lm1lc3NhZ2UpXG4gICAgICAgICAgICByZXR1cm4gYXJncy5jYXVzZS5tZXNzYWdlO1xuICAgICAgICAgIHJldHVybiBhcmdzLmRldGFpbHM7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIGNvbnN0IGRvY3NQYXRoNiA9ICgoKSA9PiB7XG4gICAgICAgICAgaWYgKGFyZ3MuY2F1c2UgaW5zdGFuY2VvZiBfQmFzZUVycm9yKVxuICAgICAgICAgICAgcmV0dXJuIGFyZ3MuY2F1c2UuZG9jc1BhdGggfHwgYXJncy5kb2NzUGF0aDtcbiAgICAgICAgICByZXR1cm4gYXJncy5kb2NzUGF0aDtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgY29uc3QgZG9jc1VybCA9IGVycm9yQ29uZmlnLmdldERvY3NVcmw/Lih7IC4uLmFyZ3MsIGRvY3NQYXRoOiBkb2NzUGF0aDYgfSk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBbXG4gICAgICAgICAgc2hvcnRNZXNzYWdlIHx8IFwiQW4gZXJyb3Igb2NjdXJyZWQuXCIsXG4gICAgICAgICAgXCJcIixcbiAgICAgICAgICAuLi4oYXJncy5tZXRhTWVzc2FnZXM/IFsuLi5hcmdzLm1ldGFNZXNzYWdlcywgXCJcIl0gOiBbXSksXG4gICAgICAgICAgLi4uKGRvY3NVcmw/IFtgRG9jczogJHtkb2NzVXJsfWBdIDogW10pLFxuICAgICAgICAgIC4uLihkZXRhaWxzPyBbYERldGFpbHM6ICR7ZGV0YWlsc31gXSA6IFtdKSxcbiAgICAgICAgICAuLi4oZXJyb3JDb25maWcudmVyc2lvbj8gW2BWZXJzaW9uOiAke2Vycm9yQ29uZmlnLnZlcnNpb259YF0gOiBbXSlcbiAgICAgICAgXS5qb2luKFwiXFxuXCIpO1xuICAgICAgICBzdXBlcihtZXNzYWdlLCBhcmdzLmNhdXNlID8geyBjYXVzZTogYXJncy5jYXVzZSB9IDogdm9pZCAwKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZGV0YWlsc1wiLCB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZG9jc1BhdGhcIiwge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1ldGFNZXNzYWdlc1wiLCB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic2hvcnRNZXNzYWdlXCIsIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ2ZXJzaW9uXCIsIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICB2YWx1ZTogXCJCYXNlRXJyb3JcIlxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kZXRhaWxzID0gZGV0YWlscztcbiAgICAgICAgdGhpcy5kb2NzUGF0aCA9IGRvY3NQYXRoNjtcbiAgICAgICAgdGhpcy5tZXRhTWVzc2FnZXMgPSBhcmdzLm1ldGFNZXNzYWdlcztcbiAgICAgICAgdGhpcy5uYW1lID0gYXJncy5uYW1lID8/IHRoaXMubmFtZTtcbiAgICAgICAgdGhpcy5zaG9ydE1lc3NhZ2UgPSBzaG9ydE1lc3NhZ2U7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb24zO1xuICAgICAgfVxuICAgICAgd2Fsayhmbikge1xuICAgICAgICByZXR1cm4gd2FsazIodGhpcywgZm4pO1xuICAgICAgfVxuICAgIH07XG4gICAgQWJpRGVjb2RpbmdEYXRhU2l6ZVRvb1NtYWxsRXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IoeyBkYXRhLCBwYXJhbXMsIHNpemU6IHNpemUzIH0pIHtcbiAgICAgICAgc3VwZXIoW2BEYXRhIHNpemUgb2YgJHtzaXplM30gYnl0ZXMgaXMgdG9vIHNtYWxsIGZvciBnaXZlbiBwYXJhbWV0ZXJzLmBdLmpvaW4oXCJcXG5cIiksIHtcbiAgICAgICAgICBtZXRhTWVzc2FnZXM6IFtcbiAgICAgICAgICAgIGBQYXJhbXM6ICgke2Zvcm1hdEFiaVBhcmFtcyhwYXJhbXMsIHsgaW5jbHVkZU5hbWU6IHRydWUgfSl9KWAsXG4gICAgICAgICAgICBgRGF0YTogICAke2RhdGF9ICgke3NpemUzfSBieXRlcylgXG4gICAgICAgICAgXSxcbiAgICAgICAgICBuYW1lOiBcIkFiaURlY29kaW5nRGF0YVNpemVUb29TbWFsbEVycm9yXCJcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImRhdGFcIiwge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInBhcmFtc1wiLCB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic2l6ZVwiLCB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHNpemUzO1xuICAgICAgfVxuICAgIH07XG4gICAgQWJpRGVjb2RpbmdaZXJvRGF0YUVycm9yID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignQ2Fubm90IGRlY29kZSB6ZXJvIGRhdGEgKFwiMHhcIikgd2l0aCBBQkkgcGFyYW1ldGVycy4nLCB7XG4gICAgICAgICAgbmFtZTogXCJBYmlEZWNvZGluZ1plcm9EYXRhRXJyb3JcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIEFiaUVuY29kaW5nQXJyYXlMZW5ndGhNaXNtYXRjaEVycm9yID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKHsgZXhwZWN0ZWRMZW5ndGgsIGdpdmVuTGVuZ3RoLCB0eXBlIH0pIHtcbiAgICAgICAgc3VwZXIoW1xuICAgICAgICAgIGBBQkkgZW5jb2RpbmcgYXJyYXkgbGVuZ3RoIG1pc21hdGNoIGZvciB0eXBlICR7dHlwZX0uYCxcbiAgICAgICAgICBgRXhwZWN0ZWQgbGVuZ3RoOiAke2V4cGVjdGVkTGVuZ3RofWAsXG4gICAgICAgICAgYEdpdmVuIGxlbmd0aDogJHtnaXZlbkxlbmd0aH1gXG4gICAgICAgIF0uam9pbihcIlxcblwiKSwgeyBuYW1lOiBcIkFiaUVuY29kaW5nQXJyYXlMZW5ndGhNaXNtYXRjaEVycm9yXCIgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBBYmlFbmNvZGluZ0J5dGVzU2l6ZU1pc21hdGNoRXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IoeyBleHBlY3RlZFNpemUsIHZhbHVlIH0pIHtcbiAgICAgICAgc3VwZXIoYFNpemUgb2YgYnl0ZXMgXCIke3ZhbHVlfVwiIChieXRlcyR7c2l6ZTIodmFsdWUpfSkgZG9lcyBub3QgbWF0Y2ggZXhwZWN0ZWQgc2l6ZSAoYnl0ZXMke2V4cGVjdGVkU2l6ZX0pLmAsIHsgbmFtZTogXCJBYmlFbmNvZGluZ0J5dGVzU2l6ZU1pc21hdGNoRXJyb3JcIiB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIEFiaUVuY29kaW5nTGVuZ3RoTWlzbWF0Y2hFcnJvciA9IGNsYXNzIGV4dGVuZHMgQmFzZUVycm9yMyB7XG4gICAgICBjb25zdHJ1Y3Rvcih7IGV4cGVjdGVkTGVuZ3RoLCBnaXZlbkxlbmd0aCB9KSB7XG4gICAgICAgIHN1cGVyKFtcbiAgICAgICAgICBcIkFCSSBlbmNvZGluZyBwYXJhbXMvdmFsdWVzIGxlbmd0aCBtaXNtYXRjaC5cIixcbiAgICAgICAgICBgRXhwZWN0ZWQgbGVuZ3RoIChwYXJhbXMpOiAke2V4cGVjdGVkTGVuZ3RofWAsXG4gICAgICAgICAgYEdpdmVuIGxlbmd0aCAodmFsdWVzKTogJHtnaXZlbkxlbmd0aH1gXG4gICAgICAgIF0uam9pbihcIlxcblwiKSwgeyBuYW1lOiBcIkFiaUVuY29kaW5nTGVuZ3RoTWlzbWF0Y2hFcnJvclwiIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgQWJpRnVuY3Rpb25Ob3RGb3VuZEVycm9yID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKGZ1bmN0aW9uTmFtZSwgeyBkb2NzUGF0aDogZG9jc1BhdGg2IH0gPSB7fSkge1xuICAgICAgICBzdXBlcihbXG4gICAgICAgICAgYEZ1bmN0aW9uICR7ZnVuY3Rpb25OYW1lID8gYFwiJHtmdW5jdGlvbk5hbWV9XCIgYCA6IFwiXCJ9bm90IGZvdW5kIG9uIEFCSS5gLFxuICAgICAgICAgIFwiTWFrZSBzdXJlIHlvdSBhcmUgdXNpbmcgdGhlIGNvcnJlY3QgQUJJIGFuZCB0aGF0IHRoZSBmdW5jdGlvbiBleGlzdHMgb24gaXQuXCJcbiAgICAgICAgXS5qb2luKFwiXFxuXCIpLCB7XG4gICAgICAgICAgZG9jc1BhdGg6IGRvY3NQYXRoNixcbiAgICAgICAgICBuYW1lOiBcIkFiaUZ1bmN0aW9uTm90Rm91bmRFcnJvclwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgQWJpSXRlbUFtYmlndWl0eUVycm9yID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKHgsIHkpIHtcbiAgICAgICAgc3VwZXIoXCJGb3VuZCBhbWJpZ3VvdXMgdHlwZXMgaW4gb3ZlcmxvYWRlZCBBQkkgaXRlbXMuXCIsIHtcbiAgICAgICAgICBtZXRhTWVzc2FnZXM6IFtcbiAgICAgICAgICAgIGBcXGAke3gudHlwZX1cXGAgaW4gXFxgJHtmb3JtYXRBYmlJdGVtMih4LmFiaUl0ZW0pfVxcYCwgYW5kYCxcbiAgICAgICAgICAgIGBcXGAke3kudHlwZX1cXGAgaW4gXFxgJHtmb3JtYXRBYmlJdGVtMih5LmFiaUl0ZW0pfVxcYGAsXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgXCJUaGVzZSB0eXBlcyBlbmNvZGUgZGlmZmVyZW50bHkgYW5kIGNhbm5vdCBiZSBkaXN0aW5ndWlzaGVkIGF0IHJ1bnRpbWUuXCIsXG4gICAgICAgICAgICBcIlJlbW92ZSBvbmUgb2YgdGhlIGFtYmlndW91cyBpdGVtcyBpbiB0aGUgQUJJLlwiXG4gICAgICAgICAgXSxcbiAgICAgICAgICBuYW1lOiBcIkFiaUl0ZW1BbWJpZ3VpdHlFcnJvclwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgSW52YWxpZEFiaUVuY29kaW5nVHlwZUVycm9yID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKHR5cGUsIHsgZG9jc1BhdGg6IGRvY3NQYXRoNiB9KSB7XG4gICAgICAgIHN1cGVyKFtcbiAgICAgICAgICBgVHlwZSBcIiR7dHlwZX1cIiBpcyBub3QgYSB2YWxpZCBlbmNvZGluZyB0eXBlLmAsXG4gICAgICAgICAgXCJQbGVhc2UgcHJvdmlkZSBhIHZhbGlkIEFCSSB0eXBlLlwiXG4gICAgICAgIF0uam9pbihcIlxcblwiKSwgeyBkb2NzUGF0aDogZG9jc1BhdGg2LCBuYW1lOiBcIkludmFsaWRBYmlFbmNvZGluZ1R5cGVcIiB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIEludmFsaWRBYmlEZWNvZGluZ1R5cGVFcnJvciA9IGNsYXNzIGV4dGVuZHMgQmFzZUVycm9yMyB7XG4gICAgICBjb25zdHJ1Y3Rvcih0eXBlLCB7IGRvY3NQYXRoOiBkb2NzUGF0aDYgfSkge1xuICAgICAgICBzdXBlcihbXG4gICAgICAgICAgYFR5cGUgXCIke3R5cGV9XCIgaXMgbm90IGEgdmFsaWQgZGVjb2RpbmcgdHlwZS5gLFxuICAgICAgICAgIFwiUGxlYXNlIHByb3ZpZGUgYSB2YWxpZCBBQkkgdHlwZS5cIlxuICAgICAgICBdLmpvaW4oXCJcXG5cIiksIHsgZG9jc1BhdGg6IGRvY3NQYXRoNiwgbmFtZTogXCJJbnZhbGlkQWJpRGVjb2RpbmdUeXBlXCIgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBJbnZhbGlkQXJyYXlFcnJvciA9IGNsYXNzIGV4dGVuZHMgQmFzZUVycm9yMyB7XG4gICAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgICAgICBzdXBlcihbYFZhbHVlIFwiJHt2YWx1ZX1cIiBpcyBub3QgYSB2YWxpZCBhcnJheS5gXS5qb2luKFwiXFxuXCIpLCB7XG4gICAgICAgICAgbmFtZTogXCJJbnZhbGlkQXJyYXlFcnJvclwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgSW52YWxpZERlZmluaXRpb25UeXBlRXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IodHlwZSkge1xuICAgICAgICBzdXBlcihbXG4gICAgICAgICAgYFwiJHt0eXBlfVwiIGlzIG5vdCBhIHZhbGlkIGRlZmluaXRpb24gdHlwZS5gLFxuICAgICAgICAgICdWYWxpZCB0eXBlczogXCJmdW5jdGlvblwiLCBcImV2ZW50XCIsIFwiZXJyb3JcIidcbiAgICAgICAgXS5qb2luKFwiXFxuXCIpLCB7IG5hbWU6IFwiSW52YWxpZERlZmluaXRpb25UeXBlRXJyb3JcIiB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIFNsaWNlT2Zmc2V0T3V0T2ZCb3VuZHNFcnJvcjIgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IoeyBvZmZzZXQsIHBvc2l0aW9uLCBzaXplOiBzaXplMyB9KSB7XG4gICAgICAgIHN1cGVyKGBTbGljZSAke3Bvc2l0aW9uID09PSBcInN0YXJ0XCIgPyBcInN0YXJ0aW5nXCIgOiBcImVuZGluZ1wifSBhdCBvZmZzZXQgXCIke29mZnNldH1cIiBpcyBvdXQtb2YtYm91bmRzIChzaXplOiAke3NpemUzfSkuYCwgeyBuYW1lOiBcIlNsaWNlT2Zmc2V0T3V0T2ZCb3VuZHNFcnJvclwiIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgU2l6ZUV4Y2VlZHNQYWRkaW5nU2l6ZUVycm9yMiA9IGNsYXNzIGV4dGVuZHMgQmFzZUVycm9yMyB7XG4gICAgICBjb25zdHJ1Y3Rvcih7IHNpemU6IHNpemUzLCB0YXJnZXRTaXplLCB0eXBlIH0pIHtcbiAgICAgICAgc3VwZXIoYCR7dHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKX0ke3R5cGUuc2xpY2UoMSkudG9Mb3dlckNhc2UoKX0gc2l6ZSAoJHtzaXplM30pIGV4Y2VlZHMgcGFkZGluZyBzaXplICgke3RhcmdldFNpemV9KS5gLCB7IG5hbWU6IFwiU2l6ZUV4Y2VlZHNQYWRkaW5nU2l6ZUVycm9yXCIgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBJbnRlZ2VyT3V0T2ZSYW5nZUVycm9yMiA9IGNsYXNzIGV4dGVuZHMgQmFzZUVycm9yMyB7XG4gICAgICBjb25zdHJ1Y3Rvcih7IG1heCwgbWluLCBzaWduZWQsIHNpemU6IHNpemUzLCB2YWx1ZSB9KSB7XG4gICAgICAgIHN1cGVyKGBOdW1iZXIgXCIke3ZhbHVlfVwiIGlzIG5vdCBpbiBzYWZlICR7c2l6ZTMgPyBgJHtzaXplMyAqIDh9LWJpdCAke3NpZ25lZCA/IFwic2lnbmVkXCIgOiBcInVuc2lnbmVkXCJ9IGAgOiBcIlwifWludGVnZXIgcmFuZ2UgJHttYXggPyBgKCR7bWlufSB0byAke21heH0pYCA6IGAoYWJvdmUgJHttaW59KWB9YCwgeyBuYW1lOiBcIkludGVnZXJPdXRPZlJhbmdlRXJyb3JcIiB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIEludmFsaWRCeXRlc0Jvb2xlYW5FcnJvciA9IGNsYXNzIGV4dGVuZHMgQmFzZUVycm9yMyB7XG4gICAgICBjb25zdHJ1Y3RvcihieXRlczIpIHtcbiAgICAgICAgc3VwZXIoYEJ5dGVzIHZhbHVlIFwiJHtieXRlczJ9XCIgaXMgbm90IGEgdmFsaWQgYm9vbGVhbi4gVGhlIGJ5dGVzIGFycmF5IG11c3QgY29udGFpbiBhIHNpbmdsZSBieXRlIG9mIGVpdGhlciBhIDAgb3IgMSB2YWx1ZS5gLCB7XG4gICAgICAgICAgbmFtZTogXCJJbnZhbGlkQnl0ZXNCb29sZWFuRXJyb3JcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIFNpemVPdmVyZmxvd0Vycm9yMiA9IGNsYXNzIGV4dGVuZHMgQmFzZUVycm9yMyB7XG4gICAgICBjb25zdHJ1Y3Rvcih7IGdpdmVuU2l6ZSwgbWF4U2l6ZSB9KSB7XG4gICAgICAgIHN1cGVyKGBTaXplIGNhbm5vdCBleGNlZWQgJHttYXhTaXplfSBieXRlcy4gR2l2ZW4gc2l6ZTogJHtnaXZlblNpemV9IGJ5dGVzLmAsIHsgbmFtZTogXCJTaXplT3ZlcmZsb3dFcnJvclwiIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgaGV4ZXMgPSAvKiAgICAgICAgICAgKi8gQXJyYXkuZnJvbSh7IGxlbmd0aDogMjU2IH0sIChfdiwgaTMpID0+IGkzLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCBcIjBcIikpO1xuICAgIGVuY29kZXIgPSAvKiAgICAgICAgICAgKi8gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgZW5jb2RlcjIgPSAvKiAgICAgICAgICAgKi8gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgY2hhckNvZGVNYXAgPSB7XG4gICAgICB6ZXJvOiA0OCxcbiAgICAgIG5pbmU6IDU3LFxuICAgICAgQTogNjUsXG4gICAgICBGOiA3MCxcbiAgICAgIGE6IDk3LFxuICAgICAgZjogMTAyXG4gICAgfTtcbiAgICBoYXNoID0gKHZhbHVlKSA9PiBrZWNjYWsyNTYodG9CeXRlczModmFsdWUpKTtcbiAgICB0b1NpZ25hdHVyZSA9IChkZWYpID0+IHtcbiAgICAgIGNvbnN0IGRlZl8gPSAoKCkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGRlZiA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICByZXR1cm4gZGVmO1xuICAgICAgICByZXR1cm4gZm9ybWF0QWJpSXRlbShkZWYpO1xuICAgICAgfSkoKTtcbiAgICAgIHJldHVybiBub3JtYWxpemVTaWduYXR1cmUoZGVmXyk7XG4gICAgfTtcbiAgICB0b0Z1bmN0aW9uU2VsZWN0b3IgPSAoZm4pID0+IHNsaWNlKHRvU2lnbmF0dXJlSGFzaChmbiksIDAsIDQpO1xuICAgIEludmFsaWRBZGRyZXNzRXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IoeyBhZGRyZXNzIH0pIHtcbiAgICAgICAgc3VwZXIoYEFkZHJlc3MgXCIke2FkZHJlc3N9XCIgaXMgaW52YWxpZC5gLCB7XG4gICAgICAgICAgbWV0YU1lc3NhZ2VzOiBbXG4gICAgICAgICAgICBcIi0gQWRkcmVzcyBtdXN0IGJlIGEgaGV4IHZhbHVlIG9mIDIwIGJ5dGVzICg0MCBoZXggY2hhcmFjdGVycykuXCIsXG4gICAgICAgICAgICBcIi0gQWRkcmVzcyBtdXN0IG1hdGNoIGl0cyBjaGVja3N1bSBjb3VudGVycGFydC5cIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgbmFtZTogXCJJbnZhbGlkQWRkcmVzc0Vycm9yXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBMcnVNYXAgPSBjbGFzcyBleHRlbmRzIE1hcCB7XG4gICAgICBjb25zdHJ1Y3RvcihzaXplMykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJtYXhTaXplXCIsIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1heFNpemUgPSBzaXplMztcbiAgICAgIH1cbiAgICAgIGdldChrZXkpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzdXBlci5nZXQoa2V5KTtcbiAgICAgICAgaWYgKHN1cGVyLmhhcyhrZXkpICYmIHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgICAgICB0aGlzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgIHN1cGVyLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBzdXBlci5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIGlmICh0aGlzLm1heFNpemUgJiYgdGhpcy5zaXplID4gdGhpcy5tYXhTaXplKSB7XG4gICAgICAgICAgY29uc3QgZmlyc3RLZXkgPSB0aGlzLmtleXMoKS5uZXh0KCkudmFsdWU7XG4gICAgICAgICAgaWYgKGZpcnN0S2V5KVxuICAgICAgICAgICAgdGhpcy5kZWxldGUoZmlyc3RLZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH07XG4gICAgYWRkcmVzc1JlZ2V4ID0gL14weFthLWZBLUYwLTldezQwfSQvO1xuICAgIGlzQWRkcmVzc0NhY2hlID0gLyogICAgICAgICAgICovIG5ldyBMcnVNYXAoODE5Mik7XG4gICAgY2hlY2tzdW1BZGRyZXNzQ2FjaGUgPSAvKiAgICAgICAgICAgKi8gbmV3IExydU1hcCg4MTkyKTtcbiAgICBOZWdhdGl2ZU9mZnNldEVycm9yID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKHsgb2Zmc2V0IH0pIHtcbiAgICAgICAgc3VwZXIoYE9mZnNldCBcXGAke29mZnNldH1cXGAgY2Fubm90IGJlIG5lZ2F0aXZlLmAsIHtcbiAgICAgICAgICBuYW1lOiBcIk5lZ2F0aXZlT2Zmc2V0RXJyb3JcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIFBvc2l0aW9uT3V0T2ZCb3VuZHNFcnJvciA9IGNsYXNzIGV4dGVuZHMgQmFzZUVycm9yMyB7XG4gICAgICBjb25zdHJ1Y3Rvcih7IGxlbmd0aCwgcG9zaXRpb24gfSkge1xuICAgICAgICBzdXBlcihgUG9zaXRpb24gXFxgJHtwb3NpdGlvbn1cXGAgaXMgb3V0IG9mIGJvdW5kcyAoXFxgMCA8IHBvc2l0aW9uIDwgJHtsZW5ndGh9XFxgKS5gLCB7IG5hbWU6IFwiUG9zaXRpb25PdXRPZkJvdW5kc0Vycm9yXCIgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBSZWN1cnNpdmVSZWFkTGltaXRFeGNlZWRlZEVycm9yID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKHsgY291bnQsIGxpbWl0OiBsaW1pdDIgfSkge1xuICAgICAgICBzdXBlcihgUmVjdXJzaXZlIHJlYWQgbGltaXQgb2YgXFxgJHtsaW1pdDJ9XFxgIGV4Y2VlZGVkIChyZWN1cnNpdmUgcmVhZCBjb3VudDogXFxgJHtjb3VudH1cXGApLmAsIHsgbmFtZTogXCJSZWN1cnNpdmVSZWFkTGltaXRFeGNlZWRlZEVycm9yXCIgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBzdGF0aWNDdXJzb3IgPSB7XG4gICAgICBieXRlczogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICAgIGRhdGFWaWV3OiBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDApKSxcbiAgICAgIHBvc2l0aW9uOiAwLFxuICAgICAgcG9zaXRpb25SZWFkQ291bnQ6IC8qICAgICAgICAgICAqLyBuZXcgTWFwKCksXG4gICAgICByZWN1cnNpdmVSZWFkQ291bnQ6IDAsXG4gICAgICByZWN1cnNpdmVSZWFkTGltaXQ6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICAgIGFzc2VydFJlYWRMaW1pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVjdXJzaXZlUmVhZENvdW50ID49IHRoaXMucmVjdXJzaXZlUmVhZExpbWl0KVxuICAgICAgICAgIHRocm93IG5ldyBSZWN1cnNpdmVSZWFkTGltaXRFeGNlZWRlZEVycm9yKHtcbiAgICAgICAgICAgIGNvdW50OiB0aGlzLnJlY3Vyc2l2ZVJlYWRDb3VudCArIDEsXG4gICAgICAgICAgICBsaW1pdDogdGhpcy5yZWN1cnNpdmVSZWFkTGltaXRcbiAgICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBhc3NlcnRQb3NpdGlvbihwb3NpdGlvbikge1xuICAgICAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID4gdGhpcy5ieXRlcy5sZW5ndGggLSAxKVxuICAgICAgICAgIHRocm93IG5ldyBQb3NpdGlvbk91dE9mQm91bmRzRXJyb3Ioe1xuICAgICAgICAgICAgbGVuZ3RoOiB0aGlzLmJ5dGVzLmxlbmd0aCxcbiAgICAgICAgICAgIHBvc2l0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZGVjcmVtZW50UG9zaXRpb24ob2Zmc2V0KSB7XG4gICAgICAgIGlmIChvZmZzZXQgPCAwKVxuICAgICAgICAgIHRocm93IG5ldyBOZWdhdGl2ZU9mZnNldEVycm9yKHsgb2Zmc2V0IH0pO1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMucG9zaXRpb24gLSBvZmZzZXQ7XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgICB9LFxuICAgICAgZ2V0UmVhZENvdW50KHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uUmVhZENvdW50LmdldChwb3NpdGlvbiB8fCB0aGlzLnBvc2l0aW9uKSB8fCAwO1xuICAgICAgfSxcbiAgICAgIGluY3JlbWVudFBvc2l0aW9uKG9mZnNldCkge1xuICAgICAgICBpZiAob2Zmc2V0IDwgMClcbiAgICAgICAgICB0aHJvdyBuZXcgTmVnYXRpdmVPZmZzZXRFcnJvcih7IG9mZnNldCB9KTtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uICsgb2Zmc2V0O1xuICAgICAgICB0aGlzLmFzc2VydFBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgICAgfSxcbiAgICAgIGluc3BlY3RCeXRlKHBvc2l0aW9uXykge1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uXyA/PyB0aGlzLnBvc2l0aW9uO1xuICAgICAgICB0aGlzLmFzc2VydFBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnl0ZXNbcG9zaXRpb25dO1xuICAgICAgfSxcbiAgICAgIGluc3BlY3RCeXRlcyhsZW5ndGgsIHBvc2l0aW9uXykge1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uXyA/PyB0aGlzLnBvc2l0aW9uO1xuICAgICAgICB0aGlzLmFzc2VydFBvc2l0aW9uKHBvc2l0aW9uICsgbGVuZ3RoIC0gMSk7XG4gICAgICAgIHJldHVybiB0aGlzLmJ5dGVzLnN1YmFycmF5KHBvc2l0aW9uLCBwb3NpdGlvbiArIGxlbmd0aCk7XG4gICAgICB9LFxuICAgICAgaW5zcGVjdFVpbnQ4KHBvc2l0aW9uXykge1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uXyA/PyB0aGlzLnBvc2l0aW9uO1xuICAgICAgICB0aGlzLmFzc2VydFBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnl0ZXNbcG9zaXRpb25dO1xuICAgICAgfSxcbiAgICAgIGluc3BlY3RVaW50MTYocG9zaXRpb25fKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25fID8/IHRoaXMucG9zaXRpb247XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24ocG9zaXRpb24gKyAxKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVZpZXcuZ2V0VWludDE2KHBvc2l0aW9uKTtcbiAgICAgIH0sXG4gICAgICBpbnNwZWN0VWludDI0KHBvc2l0aW9uXykge1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uXyA/PyB0aGlzLnBvc2l0aW9uO1xuICAgICAgICB0aGlzLmFzc2VydFBvc2l0aW9uKHBvc2l0aW9uICsgMik7XG4gICAgICAgIHJldHVybiAodGhpcy5kYXRhVmlldy5nZXRVaW50MTYocG9zaXRpb24pIDw8IDgpICsgdGhpcy5kYXRhVmlldy5nZXRVaW50OChwb3NpdGlvbiArIDIpO1xuICAgICAgfSxcbiAgICAgIGluc3BlY3RVaW50MzIocG9zaXRpb25fKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25fID8/IHRoaXMucG9zaXRpb247XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24ocG9zaXRpb24gKyAzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVZpZXcuZ2V0VWludDMyKHBvc2l0aW9uKTtcbiAgICAgIH0sXG4gICAgICBwdXNoQnl0ZShieXRlKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24odGhpcy5wb3NpdGlvbik7XG4gICAgICAgIHRoaXMuYnl0ZXNbdGhpcy5wb3NpdGlvbl0gPSBieXRlO1xuICAgICAgICB0aGlzLnBvc2l0aW9uKys7XG4gICAgICB9LFxuICAgICAgcHVzaEJ5dGVzKGJ5dGVzMikge1xuICAgICAgICB0aGlzLmFzc2VydFBvc2l0aW9uKHRoaXMucG9zaXRpb24gKyBieXRlczIubGVuZ3RoIC0gMSk7XG4gICAgICAgIHRoaXMuYnl0ZXMuc2V0KGJ5dGVzMiwgdGhpcy5wb3NpdGlvbik7XG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gYnl0ZXMyLmxlbmd0aDtcbiAgICAgIH0sXG4gICAgICBwdXNoVWludDgodmFsdWUpIHtcbiAgICAgICAgdGhpcy5hc3NlcnRQb3NpdGlvbih0aGlzLnBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5ieXRlc1t0aGlzLnBvc2l0aW9uXSA9IHZhbHVlO1xuICAgICAgICB0aGlzLnBvc2l0aW9uKys7XG4gICAgICB9LFxuICAgICAgcHVzaFVpbnQxNih2YWx1ZSkge1xuICAgICAgICB0aGlzLmFzc2VydFBvc2l0aW9uKHRoaXMucG9zaXRpb24gKyAxKTtcbiAgICAgICAgdGhpcy5kYXRhVmlldy5zZXRVaW50MTYodGhpcy5wb3NpdGlvbiwgdmFsdWUpO1xuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IDI7XG4gICAgICB9LFxuICAgICAgcHVzaFVpbnQyNCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmFzc2VydFBvc2l0aW9uKHRoaXMucG9zaXRpb24gKyAyKTtcbiAgICAgICAgdGhpcy5kYXRhVmlldy5zZXRVaW50MTYodGhpcy5wb3NpdGlvbiwgdmFsdWUgPj4gOCk7XG4gICAgICAgIHRoaXMuZGF0YVZpZXcuc2V0VWludDgodGhpcy5wb3NpdGlvbiArIDIsIHZhbHVlICYgfjQyOTQ5NjcwNDApO1xuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IDM7XG4gICAgICB9LFxuICAgICAgcHVzaFVpbnQzMih2YWx1ZSkge1xuICAgICAgICB0aGlzLmFzc2VydFBvc2l0aW9uKHRoaXMucG9zaXRpb24gKyAzKTtcbiAgICAgICAgdGhpcy5kYXRhVmlldy5zZXRVaW50MzIodGhpcy5wb3NpdGlvbiwgdmFsdWUpO1xuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IDQ7XG4gICAgICB9LFxuICAgICAgcmVhZEJ5dGUoKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0UmVhZExpbWl0KCk7XG4gICAgICAgIHRoaXMuX3RvdWNoKCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pbnNwZWN0Qnl0ZSgpO1xuICAgICAgICB0aGlzLnBvc2l0aW9uKys7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0sXG4gICAgICByZWFkQnl0ZXMobGVuZ3RoLCBzaXplMykge1xuICAgICAgICB0aGlzLmFzc2VydFJlYWRMaW1pdCgpO1xuICAgICAgICB0aGlzLl90b3VjaCgpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuaW5zcGVjdEJ5dGVzKGxlbmd0aCk7XG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gc2l6ZTMgPz8gbGVuZ3RoO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9LFxuICAgICAgcmVhZFVpbnQ4KCkge1xuICAgICAgICB0aGlzLmFzc2VydFJlYWRMaW1pdCgpO1xuICAgICAgICB0aGlzLl90b3VjaCgpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuaW5zcGVjdFVpbnQ4KCk7XG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gMTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSxcbiAgICAgIHJlYWRVaW50MTYoKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0UmVhZExpbWl0KCk7XG4gICAgICAgIHRoaXMuX3RvdWNoKCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pbnNwZWN0VWludDE2KCk7XG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gMjtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSxcbiAgICAgIHJlYWRVaW50MjQoKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0UmVhZExpbWl0KCk7XG4gICAgICAgIHRoaXMuX3RvdWNoKCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pbnNwZWN0VWludDI0KCk7XG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gMztcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSxcbiAgICAgIHJlYWRVaW50MzIoKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0UmVhZExpbWl0KCk7XG4gICAgICAgIHRoaXMuX3RvdWNoKCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pbnNwZWN0VWludDMyKCk7XG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gNDtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSxcbiAgICAgIGdldCByZW1haW5pbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ5dGVzLmxlbmd0aCAtIHRoaXMucG9zaXRpb247XG4gICAgICB9LFxuICAgICAgc2V0UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICAgICAgY29uc3Qgb2xkUG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uO1xuICAgICAgICB0aGlzLmFzc2VydFBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgICAgICByZXR1cm4gKCkgPT4gdGhpcy5wb3NpdGlvbiA9IG9sZFBvc2l0aW9uO1xuICAgICAgfSxcbiAgICAgIF90b3VjaCgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVjdXJzaXZlUmVhZExpbWl0ID09PSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBjb3VudCA9IHRoaXMuZ2V0UmVhZENvdW50KCk7XG4gICAgICAgIHRoaXMucG9zaXRpb25SZWFkQ291bnQuc2V0KHRoaXMucG9zaXRpb24sIGNvdW50ICsgMSk7XG4gICAgICAgIGlmIChjb3VudCA+IDApXG4gICAgICAgICAgdGhpcy5yZWN1cnNpdmVSZWFkQ291bnQrKztcbiAgICAgIH1cbiAgICB9O1xuICAgIGludGVnZXJSZWdleDIgPSAvXih1P2ludCkoOHwxNnwyNHwzMnw0MHw0OHw1Nnw2NHw3Mnw4MHw4OHw5NnwxMDR8MTEyfDEyMHwxMjh8MTM2fDE0NHwxNTJ8MTYwfDE2OHwxNzZ8MTg0fDE5MnwyMDB8MjA4fDIxNnwyMjR8MjMyfDI0MHwyNDh8MjU2KT8kLztcbiAgICBzaXplT2ZMZW5ndGggPSAzMjtcbiAgICBzaXplT2ZPZmZzZXQgPSAzMjtcbiAgICB0b0V2ZW50U2VsZWN0b3IgPSB0b1NpZ25hdHVyZUhhc2g7XG4gICAgZ3dlaVVuaXRzID0ge1xuICAgICAgZXRoZXI6IC05LFxuICAgICAgd2VpOiA5XG4gICAgfTtcbiAgICBkb2NzUGF0aDMgPSBcIi9kb2NzL2NvbnRyYWN0L2VuY29kZUZ1bmN0aW9uRGF0YVwiO1xuICAgIEV4ZWN1dGlvblJldmVydGVkRXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IoeyBjYXVzZSwgbWVzc2FnZSB9ID0ge30pIHtcbiAgICAgICAgY29uc3QgcmVhc29uID0gbWVzc2FnZT8ucmVwbGFjZShcImV4ZWN1dGlvbiByZXZlcnRlZDogXCIsIFwiXCIpPy5yZXBsYWNlKFwiZXhlY3V0aW9uIHJldmVydGVkXCIsIFwiXCIpO1xuICAgICAgICBzdXBlcihgRXhlY3V0aW9uIHJldmVydGVkICR7cmVhc29uID8gYHdpdGggcmVhc29uOiAke3JlYXNvbn1gIDogXCJmb3IgYW4gdW5rbm93biByZWFzb25cIn0uYCwge1xuICAgICAgICAgIGNhdXNlLFxuICAgICAgICAgIG5hbWU6IFwiRXhlY3V0aW9uUmV2ZXJ0ZWRFcnJvclwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV4ZWN1dGlvblJldmVydGVkRXJyb3IsIFwiY29kZVwiLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogM1xuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFeGVjdXRpb25SZXZlcnRlZEVycm9yLCBcIm5vZGVNZXNzYWdlXCIsIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiAvZXhlY3V0aW9uIHJldmVydGVkL1xuICAgIH0pO1xuICAgIEZlZUNhcFRvb0hpZ2hFcnJvciA9IGNsYXNzIGV4dGVuZHMgQmFzZUVycm9yMyB7XG4gICAgICBjb25zdHJ1Y3Rvcih7IGNhdXNlLCBtYXhGZWVQZXJHYXMgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGBUaGUgZmVlIGNhcCAoXFxgbWF4RmVlUGVyR2FzXFxgJHttYXhGZWVQZXJHYXMgPyBgID0gJHtmb3JtYXRHd2VpKG1heEZlZVBlckdhcyl9IGd3ZWlgIDogXCJcIn0pIGNhbm5vdCBiZSBoaWdoZXIgdGhhbiB0aGUgbWF4aW11bSBhbGxvd2VkIHZhbHVlICgyXjI1Ni0xKS5gLCB7XG4gICAgICAgICAgY2F1c2UsXG4gICAgICAgICAgbmFtZTogXCJGZWVDYXBUb29IaWdoRXJyb3JcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGZWVDYXBUb29IaWdoRXJyb3IsIFwibm9kZU1lc3NhZ2VcIiwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IC9tYXggZmVlIHBlciBnYXMgaGlnaGVyIHRoYW4gMlxcXjI1Ni0xfGZlZSBjYXAgaGlnaGVyIHRoYW4gMlxcXjI1Ni0xL1xuICAgIH0pO1xuICAgIEZlZUNhcFRvb0xvd0Vycm9yID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKHsgY2F1c2UsIG1heEZlZVBlckdhcyB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoYFRoZSBmZWUgY2FwIChcXGBtYXhGZWVQZXJHYXNcXGAke21heEZlZVBlckdhcyA/IGAgPSAke2Zvcm1hdEd3ZWkobWF4RmVlUGVyR2FzKX1gIDogXCJcIn0gZ3dlaSkgY2Fubm90IGJlIGxvd2VyIHRoYW4gdGhlIGJsb2NrIGJhc2UgZmVlLmAsIHtcbiAgICAgICAgICBjYXVzZSxcbiAgICAgICAgICBuYW1lOiBcIkZlZUNhcFRvb0xvd0Vycm9yXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmVlQ2FwVG9vTG93RXJyb3IsIFwibm9kZU1lc3NhZ2VcIiwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IC9tYXggZmVlIHBlciBnYXMgbGVzcyB0aGFuIGJsb2NrIGJhc2UgZmVlfGZlZSBjYXAgbGVzcyB0aGFuIGJsb2NrIGJhc2UgZmVlfHRyYW5zYWN0aW9uIGlzIG91dGRhdGVkL1xuICAgIH0pO1xuICAgIE5vbmNlVG9vSGlnaEVycm9yID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKHsgY2F1c2UsIG5vbmNlIH0gPSB7fSkge1xuICAgICAgICBzdXBlcihgTm9uY2UgcHJvdmlkZWQgZm9yIHRoZSB0cmFuc2FjdGlvbiAke25vbmNlID8gYCgke25vbmNlfSkgYCA6IFwiXCJ9aXMgaGlnaGVyIHRoYW4gdGhlIG5leHQgb25lIGV4cGVjdGVkLmAsIHsgY2F1c2UsIG5hbWU6IFwiTm9uY2VUb29IaWdoRXJyb3JcIiB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb25jZVRvb0hpZ2hFcnJvciwgXCJub2RlTWVzc2FnZVwiLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogL25vbmNlIHRvbyBoaWdoL1xuICAgIH0pO1xuICAgIE5vbmNlVG9vTG93RXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IoeyBjYXVzZSwgbm9uY2UgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKFtcbiAgICAgICAgICBgTm9uY2UgcHJvdmlkZWQgZm9yIHRoZSB0cmFuc2FjdGlvbiAke25vbmNlID8gYCgke25vbmNlfSkgYCA6IFwiXCJ9aXMgbG93ZXIgdGhhbiB0aGUgY3VycmVudCBub25jZSBvZiB0aGUgYWNjb3VudC5gLFxuICAgICAgICAgIFwiVHJ5IGluY3JlYXNpbmcgdGhlIG5vbmNlIG9yIGZpbmQgdGhlIGxhdGVzdCBub25jZSB3aXRoIGBnZXRUcmFuc2FjdGlvbkNvdW50YC5cIlxuICAgICAgICBdLmpvaW4oXCJcXG5cIiksIHsgY2F1c2UsIG5hbWU6IFwiTm9uY2VUb29Mb3dFcnJvclwiIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vbmNlVG9vTG93RXJyb3IsIFwibm9kZU1lc3NhZ2VcIiwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IC9ub25jZSB0b28gbG93fHRyYW5zYWN0aW9uIGFscmVhZHkgaW1wb3J0ZWR8YWxyZWFkeSBrbm93bi9cbiAgICB9KTtcbiAgICBOb25jZU1heFZhbHVlRXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IoeyBjYXVzZSwgbm9uY2UgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGBOb25jZSBwcm92aWRlZCBmb3IgdGhlIHRyYW5zYWN0aW9uICR7bm9uY2UgPyBgKCR7bm9uY2V9KSBgIDogXCJcIn1leGNlZWRzIHRoZSBtYXhpbXVtIGFsbG93ZWQgbm9uY2UuYCwgeyBjYXVzZSwgbmFtZTogXCJOb25jZU1heFZhbHVlRXJyb3JcIiB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb25jZU1heFZhbHVlRXJyb3IsIFwibm9kZU1lc3NhZ2VcIiwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IC9ub25jZSBoYXMgbWF4IHZhbHVlL1xuICAgIH0pO1xuICAgIEluc3VmZmljaWVudEZ1bmRzRXJyb3IgPSBjbGFzcyBleHRlbmRzIEJhc2VFcnJvcjMge1xuICAgICAgY29uc3RydWN0b3IoeyBjYXVzZSB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoW1xuICAgICAgICAgIFwiVGhlIHRvdGFsIGNvc3QgKGdhcyAqIGdhcyBmZWUgKyB2YWx1ZSkgb2YgZXhlY3V0aW5nIHRoaXMgdHJhbnNhY3Rpb24gZXhjZWVkcyB0aGUgYmFsYW5jZSBvZiB0aGUgYWNjb3VudC5cIlxuICAgICAgICBdLmpvaW4oXCJcXG5cIiksIHtcbiAgICAgICAgICBjYXVzZSxcbiAgICAgICAgICBtZXRhTWVzc2FnZXM6IFtcbiAgICAgICAgICAgIFwiVGhpcyBlcnJvciBjb3VsZCBhcmlzZSB3aGVuIHRoZSBhY2NvdW50IGRvZXMgbm90IGhhdmUgZW5vdWdoIGZ1bmRzIHRvOlwiLFxuICAgICAgICAgICAgXCIgLSBwYXkgZm9yIHRoZSB0b3RhbCBnYXMgZmVlLFwiLFxuICAgICAgICAgICAgXCIgLSBwYXkgZm9yIHRoZSB2YWx1ZSB0byBzZW5kLlwiLFxuICAgICAgICAgICAgXCIgXCIsXG4gICAgICAgICAgICBcIlRoZSBjb3N0IG9mIHRoZSB0cmFuc2FjdGlvbiBpcyBjYWxjdWxhdGVkIGFzIGBnYXMgKiBnYXMgZmVlICsgdmFsdWVgLCB3aGVyZTpcIixcbiAgICAgICAgICAgIFwiIC0gYGdhc2AgaXMgdGhlIGFtb3VudCBvZiBnYXMgbmVlZGVkIGZvciB0cmFuc2FjdGlvbiB0byBleGVjdXRlLFwiLFxuICAgICAgICAgICAgXCIgLSBgZ2FzIGZlZWAgaXMgdGhlIGdhcyBmZWUsXCIsXG4gICAgICAgICAgICBcIiAtIGB2YWx1ZWAgaXMgdGhlIGFtb3VudCBvZiBldGhlciB0byBzZW5kIHRvIHRoZSByZWNpcGllbnQuXCJcbiAgICAgICAgICBdLFxuICAgICAgICAgIG5hbWU6IFwiSW5zdWZmaWNpZW50RnVuZHNFcnJvclwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEluc3VmZmljaWVudEZ1bmRzRXJyb3IsIFwibm9kZU1lc3NhZ2VcIiwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IC9pbnN1ZmZpY2llbnQgZnVuZHN8ZXhjZWVkcyB0cmFuc2FjdGlvbiBzZW5kZXIgYWNjb3VudCBiYWxhbmNlL1xuICAgIH0pO1xuICAgIEludHJpbnNpY0dhc1Rvb0hpZ2hFcnJvciA9IGNsYXNzIGV4dGVuZHMgQmFzZUVycm9yMyB7XG4gICAgICBjb25zdHJ1Y3Rvcih7IGNhdXNlLCBnYXMgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGBUaGUgYW1vdW50IG9mIGdhcyAke2dhcyA/IGAoJHtnYXN9KSBgIDogXCJcIn1wcm92aWRlZCBmb3IgdGhlIHRyYW5zYWN0aW9uIGV4Y2VlZHMgdGhlIGxpbWl0IGFsbG93ZWQgZm9yIHRoZSBibG9jay5gLCB7XG4gICAgICAgICAgY2F1c2UsXG4gICAgICAgICAgbmFtZTogXCJJbnRyaW5zaWNHYXNUb29IaWdoRXJyb3JcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRyaW5zaWNHYXNUb29IaWdoRXJyb3IsIFwibm9kZU1lc3NhZ2VcIiwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IC9pbnRyaW5zaWMgZ2FzIHRvbyBoaWdofGdhcyBsaW1pdCByZWFjaGVkL1xuICAgIH0pO1xuICAgIEludHJpbnNpY0dhc1Rvb0xvd0Vycm9yID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKHsgY2F1c2UsIGdhcyB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoYFRoZSBhbW91bnQgb2YgZ2FzICR7Z2FzID8gYCgke2dhc30pIGAgOiBcIlwifXByb3ZpZGVkIGZvciB0aGUgdHJhbnNhY3Rpb24gaXMgdG9vIGxvdy5gLCB7XG4gICAgICAgICAgY2F1c2UsXG4gICAgICAgICAgbmFtZTogXCJJbnRyaW5zaWNHYXNUb29Mb3dFcnJvclwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEludHJpbnNpY0dhc1Rvb0xvd0Vycm9yLCBcIm5vZGVNZXNzYWdlXCIsIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiAvaW50cmluc2ljIGdhcyB0b28gbG93L1xuICAgIH0pO1xuICAgIFRyYW5zYWN0aW9uVHlwZU5vdFN1cHBvcnRlZEVycm9yID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKHsgY2F1c2UgfSkge1xuICAgICAgICBzdXBlcihcIlRoZSB0cmFuc2FjdGlvbiB0eXBlIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgY2hhaW4uXCIsIHtcbiAgICAgICAgICBjYXVzZSxcbiAgICAgICAgICBuYW1lOiBcIlRyYW5zYWN0aW9uVHlwZU5vdFN1cHBvcnRlZEVycm9yXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNhY3Rpb25UeXBlTm90U3VwcG9ydGVkRXJyb3IsIFwibm9kZU1lc3NhZ2VcIiwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IC90cmFuc2FjdGlvbiB0eXBlIG5vdCB2YWxpZC9cbiAgICB9KTtcbiAgICBUaXBBYm92ZUZlZUNhcEVycm9yID0gY2xhc3MgZXh0ZW5kcyBCYXNlRXJyb3IzIHtcbiAgICAgIGNvbnN0cnVjdG9yKHsgY2F1c2UsIG1heFByaW9yaXR5RmVlUGVyR2FzLCBtYXhGZWVQZXJHYXMgfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKFtcbiAgICAgICAgICBgVGhlIHByb3ZpZGVkIHRpcCAoXFxgbWF4UHJpb3JpdHlGZWVQZXJHYXNcXGAke21heFByaW9yaXR5RmVlUGVyR2FzID8gYCA9ICR7Zm9ybWF0R3dlaShtYXhQcmlvcml0eUZlZVBlckdhcyl9IGd3ZWlgIDogXCJcIn0pIGNhbm5vdCBiZSBoaWdoZXIgdGhhbiB0aGUgZmVlIGNhcCAoXFxgbWF4RmVlUGVyR2FzXFxgJHttYXhGZWVQZXJHYXMgPyBgID0gJHtmb3JtYXRHd2VpKG1heEZlZVBlckdhcyl9IGd3ZWlgIDogXCJcIn0pLmBcbiAgICAgICAgXS5qb2luKFwiXFxuXCIpLCB7XG4gICAgICAgICAgY2F1c2UsXG4gICAgICAgICAgbmFtZTogXCJUaXBBYm92ZUZlZUNhcEVycm9yXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGlwQWJvdmVGZWVDYXBFcnJvciwgXCJub2RlTWVzc2FnZVwiLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogL21heCBwcmlvcml0eSBmZWUgcGVyIGdhcyBoaWdoZXIgdGhhbiBtYXggZmVlIHBlciBnYXN8dGlwIGhpZ2hlciB0aGFuIGZlZSBjYXAvXG4gICAgfSk7XG4gICAgbWF4SW50OCA9IDJuICoqICg4biAtIDFuKSAtIDFuO1xuICAgIG1heEludDE2ID0gMm4gKiogKDE2biAtIDFuKSAtIDFuO1xuICAgIG1heEludDI0ID0gMm4gKiogKDI0biAtIDFuKSAtIDFuO1xuICAgIG1heEludDMyID0gMm4gKiogKDMybiAtIDFuKSAtIDFuO1xuICAgIG1heEludDQwID0gMm4gKiogKDQwbiAtIDFuKSAtIDFuO1xuICAgIG1heEludDQ4ID0gMm4gKiogKDQ4biAtIDFuKSAtIDFuO1xuICAgIG1heEludDU2ID0gMm4gKiogKDU2biAtIDFuKSAtIDFuO1xuICAgIG1heEludDY0ID0gMm4gKiogKDY0biAtIDFuKSAtIDFuO1xuICAgIG1heEludDcyID0gMm4gKiogKDcybiAtIDFuKSAtIDFuO1xuICAgIG1heEludDgwID0gMm4gKiogKDgwbiAtIDFuKSAtIDFuO1xuICAgIG1heEludDg4ID0gMm4gKiogKDg4biAtIDFuKSAtIDFuO1xuICAgIG1heEludDk2ID0gMm4gKiogKDk2biAtIDFuKSAtIDFuO1xuICAgIG1heEludDEwNCA9IDJuICoqICgxMDRuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50MTEyID0gMm4gKiogKDExMm4gLSAxbikgLSAxbjtcbiAgICBtYXhJbnQxMjAgPSAybiAqKiAoMTIwbiAtIDFuKSAtIDFuO1xuICAgIG1heEludDEyOCA9IDJuICoqICgxMjhuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50MTM2ID0gMm4gKiogKDEzNm4gLSAxbikgLSAxbjtcbiAgICBtYXhJbnQxNDQgPSAybiAqKiAoMTQ0biAtIDFuKSAtIDFuO1xuICAgIG1heEludDE1MiA9IDJuICoqICgxNTJuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50MTYwID0gMm4gKiogKDE2MG4gLSAxbikgLSAxbjtcbiAgICBtYXhJbnQxNjggPSAybiAqKiAoMTY4biAtIDFuKSAtIDFuO1xuICAgIG1heEludDE3NiA9IDJuICoqICgxNzZuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50MTg0ID0gMm4gKiogKDE4NG4gLSAxbikgLSAxbjtcbiAgICBtYXhJbnQxOTIgPSAybiAqKiAoMTkybiAtIDFuKSAtIDFuO1xuICAgIG1heEludDIwMCA9IDJuICoqICgyMDBuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50MjA4ID0gMm4gKiogKDIwOG4gLSAxbikgLSAxbjtcbiAgICBtYXhJbnQyMTYgPSAybiAqKiAoMjE2biAtIDFuKSAtIDFuO1xuICAgIG1heEludDIyNCA9IDJuICoqICgyMjRuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50MjMyID0gMm4gKiogKDIzMm4gLSAxbikgLSAxbjtcbiAgICBtYXhJbnQyNDAgPSAybiAqKiAoMjQwbiAtIDFuKSAtIDFuO1xuICAgIG1heEludDI0OCA9IDJuICoqICgyNDhuIC0gMW4pIC0gMW47XG4gICAgbWF4SW50MjU2ID0gMm4gKiogKDI1Nm4gLSAxbikgLSAxbjtcbiAgICBtaW5JbnQ4ID0gLSgybiAqKiAoOG4gLSAxbikpO1xuICAgIG1pbkludDE2ID0gLSgybiAqKiAoMTZuIC0gMW4pKTtcbiAgICBtaW5JbnQyNCA9IC0oMm4gKiogKDI0biAtIDFuKSk7XG4gICAgbWluSW50MzIgPSAtKDJuICoqICgzMm4gLSAxbikpO1xuICAgIG1pbkludDQwID0gLSgybiAqKiAoNDBuIC0gMW4pKTtcbiAgICBtaW5JbnQ0OCA9IC0oMm4gKiogKDQ4biAtIDFuKSk7XG4gICAgbWluSW50NTYgPSAtKDJuICoqICg1Nm4gLSAxbikpO1xuICAgIG1pbkludDY0ID0gLSgybiAqKiAoNjRuIC0gMW4pKTtcbiAgICBtaW5JbnQ3MiA9IC0oMm4gKiogKDcybiAtIDFuKSk7XG4gICAgbWluSW50ODAgPSAtKDJuICoqICg4MG4gLSAxbikpO1xuICAgIG1pbkludDg4ID0gLSgybiAqKiAoODhuIC0gMW4pKTtcbiAgICBtaW5JbnQ5NiA9IC0oMm4gKiogKDk2biAtIDFuKSk7XG4gICAgbWluSW50MTA0ID0gLSgybiAqKiAoMTA0biAtIDFuKSk7XG4gICAgbWluSW50MTEyID0gLSgybiAqKiAoMTEybiAtIDFuKSk7XG4gICAgbWluSW50MTIwID0gLSgybiAqKiAoMTIwbiAtIDFuKSk7XG4gICAgbWluSW50MTI4ID0gLSgybiAqKiAoMTI4biAtIDFuKSk7XG4gICAgbWluSW50MTM2ID0gLSgybiAqKiAoMTM2biAtIDFuKSk7XG4gICAgbWluSW50MTQ0ID0gLSgybiAqKiAoMTQ0biAtIDFuKSk7XG4gICAgbWluSW50MTUyID0gLSgybiAqKiAoMTUybiAtIDFuKSk7XG4gICAgbWluSW50MTYwID0gLSgybiAqKiAoMTYwbiAtIDFuKSk7XG4gICAgbWluSW50MTY4ID0gLSgybiAqKiAoMTY4biAtIDFuKSk7XG4gICAgbWluSW50MTc2ID0gLSgybiAqKiAoMTc2biAtIDFuKSk7XG4gICAgbWluSW50MTg0ID0gLSgybiAqKiAoMTg0biAtIDFuKSk7XG4gICAgbWluSW50MTkyID0gLSgybiAqKiAoMTkybiAtIDFuKSk7XG4gICAgbWluSW50MjAwID0gLSgybiAqKiAoMjAwbiAtIDFuKSk7XG4gICAgbWluSW50MjA4ID0gLSgybiAqKiAoMjA4biAtIDFuKSk7XG4gICAgbWluSW50MjE2ID0gLSgybiAqKiAoMjE2biAtIDFuKSk7XG4gICAgbWluSW50MjI0ID0gLSgybiAqKiAoMjI0biAtIDFuKSk7XG4gICAgbWluSW50MjMyID0gLSgybiAqKiAoMjMybiAtIDFuKSk7XG4gICAgbWluSW50MjQwID0gLSgybiAqKiAoMjQwbiAtIDFuKSk7XG4gICAgbWluSW50MjQ4ID0gLSgybiAqKiAoMjQ4biAtIDFuKSk7XG4gICAgbWluSW50MjU2ID0gLSgybiAqKiAoMjU2biAtIDFuKSk7XG4gICAgbWF4VWludDggPSAybiAqKiA4biAtIDFuO1xuICAgIG1heFVpbnQxNiA9IDJuICoqIDE2biAtIDFuO1xuICAgIG1heFVpbnQyNCA9IDJuICoqIDI0biAtIDFuO1xuICAgIG1heFVpbnQzMiA9IDJuICoqIDMybiAtIDFuO1xuICAgIG1heFVpbnQ0MCA9IDJuICoqIDQwbiAtIDFuO1xuICAgIG1heFVpbnQ0OCA9IDJuICoqIDQ4biAtIDFuO1xuICAgIG1heFVpbnQ1NiA9IDJuICoqIDU2biAtIDFuO1xuICAgIG1heFVpbnQ2NCA9IDJuICoqIDY0biAtIDFuO1xuICAgIG1heFVpbnQ3MiA9IDJuICoqIDcybiAtIDFuO1xuICAgIG1heFVpbnQ4MCA9IDJuICoqIDgwbiAtIDFuO1xuICAgIG1heFVpbnQ4OCA9IDJuICoqIDg4biAtIDFuO1xuICAgIG1heFVpbnQ5NiA9IDJuICoqIDk2biAtIDFuO1xuICAgIG1heFVpbnQxMDQgPSAybiAqKiAxMDRuIC0gMW47XG4gICAgbWF4VWludDExMiA9IDJuICoqIDExMm4gLSAxbjtcbiAgICBtYXhVaW50MTIwID0gMm4gKiogMTIwbiAtIDFuO1xuICAgIG1heFVpbnQxMjggPSAybiAqKiAxMjhuIC0gMW47XG4gICAgbWF4VWludDEzNiA9IDJuICoqIDEzNm4gLSAxbjtcbiAgICBtYXhVaW50MTQ0ID0gMm4gKiogMTQ0biAtIDFuO1xuICAgIG1heFVpbnQxNTIgPSAybiAqKiAxNTJuIC0gMW47XG4gICAgbWF4VWludDE2MCA9IDJuICoqIDE2MG4gLSAxbjtcbiAgICBtYXhVaW50MTY4ID0gMm4gKiogMTY4biAtIDFuO1xuICAgIG1heFVpbnQxNzYgPSAybiAqKiAxNzZuIC0gMW47XG4gICAgbWF4VWludDE4NCA9IDJuICoqIDE4NG4gLSAxbjtcbiAgICBtYXhVaW50MTkyID0gMm4gKiogMTkybiAtIDFuO1xuICAgIG1heFVpbnQyMDAgPSAybiAqKiAyMDBuIC0gMW47XG4gICAgbWF4VWludDIwOCA9IDJuICoqIDIwOG4gLSAxbjtcbiAgICBtYXhVaW50MjE2ID0gMm4gKiogMjE2biAtIDFuO1xuICAgIG1heFVpbnQyMjQgPSAybiAqKiAyMjRuIC0gMW47XG4gICAgbWF4VWludDIzMiA9IDJuICoqIDIzMm4gLSAxbjtcbiAgICBtYXhVaW50MjQwID0gMm4gKiogMjQwbiAtIDFuO1xuICAgIG1heFVpbnQyNDggPSAybiAqKiAyNDhuIC0gMW47XG4gICAgbWF4VWludDI1NiA9IDJuICoqIDI1Nm4gLSAxbjtcbiAgfVxufSk7XG5cbi8vXG52YXIgaGFzSGV4QnVpbHRpbjtcbnZhciBpbml0X2NodW5rX1hONExVT0lIID0gX19lc20oe1xuICBcIi4uL29yY2hlc3RyYXRpb24vc3JjL3ZlbmRvci92aWVtL2NodW5rLVhONExVT0lILmpzXCIoKSB7XG4gICAgaGFzSGV4QnVpbHRpbiA9IC8vXG4gICAgdHlwZW9mIFVpbnQ4QXJyYXkuZnJvbShbXSkudG9IZXggPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgVWludDhBcnJheS5mcm9tSGV4ID09PSBcImZ1bmN0aW9uXCI7XG4gIH1cbn0pO1xuXG4vL1xudmFyIGluaXRfY2h1bmtfNFZOUzVXUE0gPSBfX2VzbSh7XG4gIFwiLi4vb3JjaGVzdHJhdGlvbi9zcmMvdmVuZG9yL3ZpZW0vY2h1bmstNFZOUzVXUE0uanNcIigpIHtcbiAgfVxufSk7XG5cbi8vXG52YXIgcmVxdWlyZV9kaXN0ID0gX19jb21tb25KUyh7XG4gIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2JlY2gzMi9kaXN0L2luZGV4LmpzXCIoZXhwb3J0cykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgICBleHBvcnRzLmJlY2gzMm0gPSBleHBvcnRzLmJlY2gzMiA9IHZvaWQgMDtcbiAgICB2YXIgQUxQSEFCRVQyID0gXCJxcHpyeTl4OGdmMnR2ZHcwczNqbjU0a2hjZTZtdWE3bFwiO1xuICAgIHZhciBBTFBIQUJFVF9NQVAgPSB7fTtcbiAgICBmb3IgKGxldCB6ID0gMDsgeiA8IEFMUEhBQkVUMi5sZW5ndGg7IHorKykge1xuICAgICAgY29uc3QgeCA9IEFMUEhBQkVUMi5jaGFyQXQoeik7XG4gICAgICBBTFBIQUJFVF9NQVBbeF0gPSB6O1xuICAgIH1cbiAgICBmdW5jdGlvbiBwb2x5bW9kU3RlcChwcmUpIHtcbiAgICAgIGNvbnN0IGIzID0gcHJlID4+IDI1O1xuICAgICAgcmV0dXJuIChwcmUgJiAzMzU1NDQzMSkgPDwgNSBeIC0oYjMgPj4gMCAmIDEpICYgOTk2ODI1MDEwIF4gLShiMyA+PiAxICYgMSkgJiA2NDI4MTM1NDkgXiAtKGIzID4+IDIgJiAxKSAmIDUxMzg3NDQyNiBeIC0oYjMgPj4gMyAmIDEpICYgMTAyNzc0ODgyOSBeIC0oYjMgPj4gNCAmIDEpICYgNzA1OTc5MDU5O1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcmVmaXhDaGsocHJlZml4KSB7XG4gICAgICBsZXQgY2hrID0gMTtcbiAgICAgIGZvciAobGV0IGkzID0gMDsgaTMgPCBwcmVmaXgubGVuZ3RoOyArK2kzKSB7XG4gICAgICAgIGNvbnN0IGMyID0gcHJlZml4LmNoYXJDb2RlQXQoaTMpO1xuICAgICAgICBpZiAoYzIgPCAzMyB8fCBjMiA+IDEyNilcbiAgICAgICAgICByZXR1cm4gXCJJbnZhbGlkIHByZWZpeCAoXCIgKyBwcmVmaXggKyBcIilcIjtcbiAgICAgICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKSBeIGMyID4+IDU7XG4gICAgICB9XG4gICAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspO1xuICAgICAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IHByZWZpeC5sZW5ndGg7ICsraTMpIHtcbiAgICAgICAgY29uc3QgdjIgPSBwcmVmaXguY2hhckNvZGVBdChpMyk7XG4gICAgICAgIGNoayA9IHBvbHltb2RTdGVwKGNoaykgXiB2MiAmIDMxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoaztcbiAgICB9XG4gICAgZnVuY3Rpb24gY29udmVydChkYXRhLCBpbkJpdHMsIG91dEJpdHMsIHBhZCkge1xuICAgICAgbGV0IHZhbHVlID0gMDtcbiAgICAgIGxldCBiaXRzID0gMDtcbiAgICAgIGNvbnN0IG1heFYgPSAoMSA8PCBvdXRCaXRzKSAtIDE7XG4gICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgIGZvciAobGV0IGkzID0gMDsgaTMgPCBkYXRhLmxlbmd0aDsgKytpMykge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlIDw8IGluQml0cyB8IGRhdGFbaTNdO1xuICAgICAgICBiaXRzICs9IGluQml0cztcbiAgICAgICAgd2hpbGUgKGJpdHMgPj0gb3V0Qml0cykge1xuICAgICAgICAgIGJpdHMgLT0gb3V0Qml0cztcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSA+PiBiaXRzICYgbWF4Vik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYWQpIHtcbiAgICAgICAgaWYgKGJpdHMgPiAwKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUgPDwgb3V0Qml0cyAtIGJpdHMgJiBtYXhWKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGJpdHMgPj0gaW5CaXRzKVxuICAgICAgICAgIHJldHVybiBcIkV4Y2VzcyBwYWRkaW5nXCI7XG4gICAgICAgIGlmICh2YWx1ZSA8PCBvdXRCaXRzIC0gYml0cyAmIG1heFYpXG4gICAgICAgICAgcmV0dXJuIFwiTm9uLXplcm8gcGFkZGluZ1wiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gdG9Xb3JkcyhieXRlczIpIHtcbiAgICAgIHJldHVybiBjb252ZXJ0KGJ5dGVzMiwgOCwgNSwgdHJ1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZyb21Xb3Jkc1Vuc2FmZSh3b3Jkcykge1xuICAgICAgY29uc3QgcmVzID0gY29udmVydCh3b3JkcywgNSwgOCwgZmFsc2UpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzKSlcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgZnVuY3Rpb24gZnJvbVdvcmRzKHdvcmRzKSB7XG4gICAgICBjb25zdCByZXMgPSBjb252ZXJ0KHdvcmRzLCA1LCA4LCBmYWxzZSk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXMpKVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHJlcyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldExpYnJhcnlGcm9tRW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgICAgIGxldCBFTkNPRElOR19DT05TVDtcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gXCJiZWNoMzJcIikge1xuICAgICAgICBFTkNPRElOR19DT05TVCA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBFTkNPRElOR19DT05TVCA9IDczNDUzOTkzOTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGVuY29kZTIocHJlZml4LCB3b3JkcywgTElNSVQpIHtcbiAgICAgICAgTElNSVQgPSBMSU1JVCB8fCA5MDtcbiAgICAgICAgaWYgKHByZWZpeC5sZW5ndGggKyA3ICsgd29yZHMubGVuZ3RoID4gTElNSVQpXG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4Y2VlZHMgbGVuZ3RoIGxpbWl0XCIpO1xuICAgICAgICBwcmVmaXggPSBwcmVmaXgudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgbGV0IGNoayA9IHByZWZpeENoayhwcmVmaXgpO1xuICAgICAgICBpZiAodHlwZW9mIGNoayA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoY2hrKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHByZWZpeCArIFwiMVwiO1xuICAgICAgICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgd29yZHMubGVuZ3RoOyArK2kzKSB7XG4gICAgICAgICAgY29uc3QgeCA9IHdvcmRzW2kzXTtcbiAgICAgICAgICBpZiAoeCA+PiA1ICE9PSAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm9uIDUtYml0IHdvcmRcIik7XG4gICAgICAgICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKSBeIHg7XG4gICAgICAgICAgcmVzdWx0ICs9IEFMUEhBQkVUMi5jaGFyQXQoeCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IDY7ICsraTMpIHtcbiAgICAgICAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspO1xuICAgICAgICB9XG4gICAgICAgIGNoayBePSBFTkNPRElOR19DT05TVDtcbiAgICAgICAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IDY7ICsraTMpIHtcbiAgICAgICAgICBjb25zdCB2MiA9IGNoayA+PiAoNSAtIGkzKSAqIDUgJiAzMTtcbiAgICAgICAgICByZXN1bHQgKz0gQUxQSEFCRVQyLmNoYXJBdCh2Mik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIF9fZGVjb2RlKHN0ciwgTElNSVQpIHtcbiAgICAgICAgTElNSVQgPSBMSU1JVCB8fCA5MDtcbiAgICAgICAgaWYgKHN0ci5sZW5ndGggPCA4KVxuICAgICAgICAgIHJldHVybiBzdHIgKyBcIiB0b28gc2hvcnRcIjtcbiAgICAgICAgaWYgKHN0ci5sZW5ndGggPiBMSU1JVClcbiAgICAgICAgICByZXR1cm4gXCJFeGNlZWRzIGxlbmd0aCBsaW1pdFwiO1xuICAgICAgICBjb25zdCBsb3dlcmVkID0gc3RyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IHVwcGVyZWQgPSBzdHIudG9VcHBlckNhc2UoKTtcbiAgICAgICAgaWYgKHN0ciAhPT0gbG93ZXJlZCAmJiBzdHIgIT09IHVwcGVyZWQpXG4gICAgICAgICAgcmV0dXJuIFwiTWl4ZWQtY2FzZSBzdHJpbmcgXCIgKyBzdHI7XG4gICAgICAgIHN0ciA9IGxvd2VyZWQ7XG4gICAgICAgIGNvbnN0IHNwbGl0MiA9IHN0ci5sYXN0SW5kZXhPZihcIjFcIik7XG4gICAgICAgIGlmIChzcGxpdDIgPT09IC0xKVxuICAgICAgICAgIHJldHVybiBcIk5vIHNlcGFyYXRvciBjaGFyYWN0ZXIgZm9yIFwiICsgc3RyO1xuICAgICAgICBpZiAoc3BsaXQyID09PSAwKVxuICAgICAgICAgIHJldHVybiBcIk1pc3NpbmcgcHJlZml4IGZvciBcIiArIHN0cjtcbiAgICAgICAgY29uc3QgcHJlZml4ID0gc3RyLnNsaWNlKDAsIHNwbGl0Mik7XG4gICAgICAgIGNvbnN0IHdvcmRDaGFycyA9IHN0ci5zbGljZShzcGxpdDIgKyAxKTtcbiAgICAgICAgaWYgKHdvcmRDaGFycy5sZW5ndGggPCA2KVxuICAgICAgICAgIHJldHVybiBcIkRhdGEgdG9vIHNob3J0XCI7XG4gICAgICAgIGxldCBjaGsgPSBwcmVmaXhDaGsocHJlZml4KTtcbiAgICAgICAgaWYgKHR5cGVvZiBjaGsgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgcmV0dXJuIGNoaztcbiAgICAgICAgY29uc3Qgd29yZHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IHdvcmRDaGFycy5sZW5ndGg7ICsraTMpIHtcbiAgICAgICAgICBjb25zdCBjMiA9IHdvcmRDaGFycy5jaGFyQXQoaTMpO1xuICAgICAgICAgIGNvbnN0IHYyID0gQUxQSEFCRVRfTUFQW2MyXTtcbiAgICAgICAgICBpZiAodjIgPT09IHZvaWQgMClcbiAgICAgICAgICAgIHJldHVybiBcIlVua25vd24gY2hhcmFjdGVyIFwiICsgYzI7XG4gICAgICAgICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKSBeIHYyO1xuICAgICAgICAgIGlmIChpMyArIDYgPj0gd29yZENoYXJzLmxlbmd0aClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIHdvcmRzLnB1c2godjIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGsgIT09IEVOQ09ESU5HX0NPTlNUKVxuICAgICAgICAgIHJldHVybiBcIkludmFsaWQgY2hlY2tzdW0gZm9yIFwiICsgc3RyO1xuICAgICAgICByZXR1cm4geyBwcmVmaXgsIHdvcmRzIH07XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBkZWNvZGVVbnNhZmUoc3RyLCBMSU1JVCkge1xuICAgICAgICBjb25zdCByZXMgPSBfX2RlY29kZShzdHIsIExJTUlUKTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXMgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGRlY29kZTMoc3RyLCBMSU1JVCkge1xuICAgICAgICBjb25zdCByZXMgPSBfX2RlY29kZShzdHIsIExJTUlUKTtcbiAgICAgICAgaWYgKHR5cGVvZiByZXMgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkZWNvZGVVbnNhZmUsXG4gICAgICAgIGRlY29kZTogZGVjb2RlMyxcbiAgICAgICAgZW5jb2RlOiBlbmNvZGUyLFxuICAgICAgICB0b1dvcmRzLFxuICAgICAgICBmcm9tV29yZHNVbnNhZmUsXG4gICAgICAgIGZyb21Xb3Jkc1xuICAgICAgfTtcbiAgICB9XG4gICAgZXhwb3J0cy5iZWNoMzIgPSBnZXRMaWJyYXJ5RnJvbUVuY29kaW5nKFwiYmVjaDMyXCIpO1xuICAgIGV4cG9ydHMuYmVjaDMybSA9IGdldExpYnJhcnlGcm9tRW5jb2RpbmcoXCJiZWNoMzJtXCIpO1xuICB9XG59KTtcblxuLy9cbnZhciByZXF1aXJlX2FzY2lpMiA9IF9fY29tbW9uSlMoe1xuICBcIi4uLy4uL25vZGVfbW9kdWxlcy9AY29zbWpzL2VuY29kaW5nL2J1aWxkL2FzY2lpLmpzXCIoZXhwb3J0cykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgICBleHBvcnRzLmZyb21Bc2NpaSA9IGV4cG9ydHMudG9Bc2NpaSA9IHZvaWQgMDtcbiAgICBmdW5jdGlvbiB0b0FzY2lpKGlucHV0KSB7XG4gICAgICBjb25zdCB0b051bXMgPSAoc3RyKSA9PiBzdHIuc3BsaXQoXCJcIikubWFwKCh4KSA9PiB7XG4gICAgICAgIGNvbnN0IGNoYXJDb2RlID0geC5jaGFyQ29kZUF0KDApO1xuICAgICAgICBpZiAoY2hhckNvZGUgPCAzMiB8fCBjaGFyQ29kZSA+IDEyNikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBlbmNvZGUgY2hhcmFjdGVyIHRoYXQgaXMgb3V0IG9mIHByaW50YWJsZSBBU0NJSSByYW5nZTogXCIgKyBjaGFyQ29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoYXJDb2RlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKHRvTnVtcyhpbnB1dCkpO1xuICAgIH1cbiAgICBleHBvcnRzLnRvQXNjaWkgPSB0b0FzY2lpO1xuICAgIGZ1bmN0aW9uIGZyb21Bc2NpaShkYXRhKSB7XG4gICAgICBjb25zdCBmcm9tTnVtcyA9IChsaXN0T2ZOdW1iZXJzKSA9PiBsaXN0T2ZOdW1iZXJzLm1hcCgoeCkgPT4ge1xuICAgICAgICBpZiAoeCA8IDMyIHx8IHggPiAxMjYpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZGVjb2RlIGNoYXJhY3RlciB0aGF0IGlzIG91dCBvZiBwcmludGFibGUgQVNDSUkgcmFuZ2U6IFwiICsgeCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoeCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmcm9tTnVtcyhBcnJheS5mcm9tKGRhdGEpKS5qb2luKFwiXCIpO1xuICAgIH1cbiAgICBleHBvcnRzLmZyb21Bc2NpaSA9IGZyb21Bc2NpaTtcbiAgfVxufSk7XG5cbi8vXG52YXIgcmVxdWlyZV9iYXNlNjQyID0gX19jb21tb25KUyh7XG4gIFwiLi4vLi4vbm9kZV9tb2R1bGVzL0Bjb3NtanMvZW5jb2RpbmcvYnVpbGQvYmFzZTY0LmpzXCIoZXhwb3J0cykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBleHBvcnRzICYmIGV4cG9ydHMuX19jcmVhdGVCaW5kaW5nIHx8IChPYmplY3QuY3JlYXRlID8gZnVuY3Rpb24obzIsIG0yLCBrLCBrMikge1xuICAgICAgaWYgKGsyID09PSB2b2lkIDApIGsyID0gaztcbiAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtMiwgayk7XG4gICAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtMi5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gbTJba107XG4gICAgICAgIH0gfTtcbiAgICAgIH1cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvMiwgazIsIGRlc2MpO1xuICAgIH0gOiBmdW5jdGlvbihvMiwgbTIsIGssIGsyKSB7XG4gICAgICBpZiAoazIgPT09IHZvaWQgMCkgazIgPSBrO1xuICAgICAgbzJbazJdID0gbTJba107XG4gICAgfSk7XG4gICAgdmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IGV4cG9ydHMgJiYgZXhwb3J0cy5fX3NldE1vZHVsZURlZmF1bHQgfHwgKE9iamVjdC5jcmVhdGUgPyBmdW5jdGlvbihvMiwgdjIpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvMiwgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYyIH0pO1xuICAgIH0gOiBmdW5jdGlvbihvMiwgdjIpIHtcbiAgICAgIG8yW1wiZGVmYXVsdFwiXSA9IHYyO1xuICAgIH0pO1xuICAgIHZhciBfX2ltcG9ydFN0YXIgPSBleHBvcnRzICYmIGV4cG9ydHMuX19pbXBvcnRTdGFyIHx8IGZ1bmN0aW9uKG1vZCkge1xuICAgICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmIChtb2QgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgICAgfVxuICAgICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4gICAgZXhwb3J0cy5mcm9tQmFzZTY0ID0gZXhwb3J0cy50b0Jhc2U2NCA9IHZvaWQgMDtcbiAgICB2YXIgYmFzZTY0anMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZV9iYXNlNjRfanMoKSk7XG4gICAgZnVuY3Rpb24gdG9CYXNlNjQoZGF0YSkge1xuICAgICAgcmV0dXJuIGJhc2U2NGpzLmZyb21CeXRlQXJyYXkoZGF0YSk7XG4gICAgfVxuICAgIGV4cG9ydHMudG9CYXNlNjQgPSB0b0Jhc2U2NDtcbiAgICBmdW5jdGlvbiBmcm9tQmFzZTY0KGJhc2U2NFN0cmluZykge1xuICAgICAgaWYgKCFiYXNlNjRTdHJpbmcubWF0Y2goL15bYS16QS1aMC05Ky9dKj17MCwyfSQvKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJhc2U2NCBzdHJpbmcgZm9ybWF0XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2U2NGpzLnRvQnl0ZUFycmF5KGJhc2U2NFN0cmluZyk7XG4gICAgfVxuICAgIGV4cG9ydHMuZnJvbUJhc2U2NCA9IGZyb21CYXNlNjQ7XG4gIH1cbn0pO1xuXG4vL1xudmFyIHJlcXVpcmVfYmVjaDMyMyA9IF9fY29tbW9uSlMoe1xuICBcIi4uLy4uL25vZGVfbW9kdWxlcy9AY29zbWpzL2VuY29kaW5nL25vZGVfbW9kdWxlcy9iZWNoMzIvaW5kZXguanNcIihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgQUxQSEFCRVQyID0gXCJxcHpyeTl4OGdmMnR2ZHcwczNqbjU0a2hjZTZtdWE3bFwiO1xuICAgIHZhciBBTFBIQUJFVF9NQVAgPSB7fTtcbiAgICBmb3IgKHogPSAwOyB6IDwgQUxQSEFCRVQyLmxlbmd0aDsgeisrKSB7XG4gICAgICB4ID0gQUxQSEFCRVQyLmNoYXJBdCh6KTtcbiAgICAgIGlmIChBTFBIQUJFVF9NQVBbeF0gIT09IHZvaWQgMCkgdGhyb3cgbmV3IFR5cGVFcnJvcih4ICsgXCIgaXMgYW1iaWd1b3VzXCIpO1xuICAgICAgQUxQSEFCRVRfTUFQW3hdID0gejtcbiAgICB9XG4gICAgdmFyIHg7XG4gICAgdmFyIHo7XG4gICAgZnVuY3Rpb24gcG9seW1vZFN0ZXAocHJlKSB7XG4gICAgICB2YXIgYjMgPSBwcmUgPj4gMjU7XG4gICAgICByZXR1cm4gKHByZSAmIDMzNTU0NDMxKSA8PCA1IF4gLShiMyA+PiAwICYgMSkgJiA5OTY4MjUwMTAgXiAtKGIzID4+IDEgJiAxKSAmIDY0MjgxMzU0OSBeIC0oYjMgPj4gMiAmIDEpICYgNTEzODc0NDI2IF4gLShiMyA+PiAzICYgMSkgJiAxMDI3NzQ4ODI5IF4gLShiMyA+PiA0ICYgMSkgJiA3MDU5NzkwNTk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByZWZpeENoayhwcmVmaXgpIHtcbiAgICAgIHZhciBjaGsgPSAxO1xuICAgICAgZm9yICh2YXIgaTMgPSAwOyBpMyA8IHByZWZpeC5sZW5ndGg7ICsraTMpIHtcbiAgICAgICAgdmFyIGMyID0gcHJlZml4LmNoYXJDb2RlQXQoaTMpO1xuICAgICAgICBpZiAoYzIgPCAzMyB8fCBjMiA+IDEyNikgcmV0dXJuIFwiSW52YWxpZCBwcmVmaXggKFwiICsgcHJlZml4ICsgXCIpXCI7XG4gICAgICAgIGNoayA9IHBvbHltb2RTdGVwKGNoaykgXiBjMiA+PiA1O1xuICAgICAgfVxuICAgICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKTtcbiAgICAgIGZvciAoaTMgPSAwOyBpMyA8IHByZWZpeC5sZW5ndGg7ICsraTMpIHtcbiAgICAgICAgdmFyIHYyID0gcHJlZml4LmNoYXJDb2RlQXQoaTMpO1xuICAgICAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4gdjIgJiAzMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjaGs7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVuY29kZTIocHJlZml4LCB3b3JkcywgTElNSVQpIHtcbiAgICAgIExJTUlUID0gTElNSVQgfHwgOTA7XG4gICAgICBpZiAocHJlZml4Lmxlbmd0aCArIDcgKyB3b3Jkcy5sZW5ndGggPiBMSU1JVCkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4Y2VlZHMgbGVuZ3RoIGxpbWl0XCIpO1xuICAgICAgcHJlZml4ID0gcHJlZml4LnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgY2hrID0gcHJlZml4Q2hrKHByZWZpeCk7XG4gICAgICBpZiAodHlwZW9mIGNoayA9PT0gXCJzdHJpbmdcIikgdGhyb3cgbmV3IEVycm9yKGNoayk7XG4gICAgICB2YXIgcmVzdWx0ID0gcHJlZml4ICsgXCIxXCI7XG4gICAgICBmb3IgKHZhciBpMyA9IDA7IGkzIDwgd29yZHMubGVuZ3RoOyArK2kzKSB7XG4gICAgICAgIHZhciB4MiA9IHdvcmRzW2kzXTtcbiAgICAgICAgaWYgKHgyID4+IDUgIT09IDApIHRocm93IG5ldyBFcnJvcihcIk5vbiA1LWJpdCB3b3JkXCIpO1xuICAgICAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4geDI7XG4gICAgICAgIHJlc3VsdCArPSBBTFBIQUJFVDIuY2hhckF0KHgyKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaTMgPSAwOyBpMyA8IDY7ICsraTMpIHtcbiAgICAgICAgY2hrID0gcG9seW1vZFN0ZXAoY2hrKTtcbiAgICAgIH1cbiAgICAgIGNoayBePSAxO1xuICAgICAgZm9yIChpMyA9IDA7IGkzIDwgNjsgKytpMykge1xuICAgICAgICB2YXIgdjIgPSBjaGsgPj4gKDUgLSBpMykgKiA1ICYgMzE7XG4gICAgICAgIHJlc3VsdCArPSBBTFBIQUJFVDIuY2hhckF0KHYyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9fZGVjb2RlKHN0ciwgTElNSVQpIHtcbiAgICAgIExJTUlUID0gTElNSVQgfHwgOTA7XG4gICAgICBpZiAoc3RyLmxlbmd0aCA8IDgpIHJldHVybiBzdHIgKyBcIiB0b28gc2hvcnRcIjtcbiAgICAgIGlmIChzdHIubGVuZ3RoID4gTElNSVQpIHJldHVybiBcIkV4Y2VlZHMgbGVuZ3RoIGxpbWl0XCI7XG4gICAgICB2YXIgbG93ZXJlZCA9IHN0ci50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIHVwcGVyZWQgPSBzdHIudG9VcHBlckNhc2UoKTtcbiAgICAgIGlmIChzdHIgIT09IGxvd2VyZWQgJiYgc3RyICE9PSB1cHBlcmVkKSByZXR1cm4gXCJNaXhlZC1jYXNlIHN0cmluZyBcIiArIHN0cjtcbiAgICAgIHN0ciA9IGxvd2VyZWQ7XG4gICAgICB2YXIgc3BsaXQyID0gc3RyLmxhc3RJbmRleE9mKFwiMVwiKTtcbiAgICAgIGlmIChzcGxpdDIgPT09IC0xKSByZXR1cm4gXCJObyBzZXBhcmF0b3IgY2hhcmFjdGVyIGZvciBcIiArIHN0cjtcbiAgICAgIGlmIChzcGxpdDIgPT09IDApIHJldHVybiBcIk1pc3NpbmcgcHJlZml4IGZvciBcIiArIHN0cjtcbiAgICAgIHZhciBwcmVmaXggPSBzdHIuc2xpY2UoMCwgc3BsaXQyKTtcbiAgICAgIHZhciB3b3JkQ2hhcnMgPSBzdHIuc2xpY2Uoc3BsaXQyICsgMSk7XG4gICAgICBpZiAod29yZENoYXJzLmxlbmd0aCA8IDYpIHJldHVybiBcIkRhdGEgdG9vIHNob3J0XCI7XG4gICAgICB2YXIgY2hrID0gcHJlZml4Q2hrKHByZWZpeCk7XG4gICAgICBpZiAodHlwZW9mIGNoayA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIGNoaztcbiAgICAgIHZhciB3b3JkcyA9IFtdO1xuICAgICAgZm9yICh2YXIgaTMgPSAwOyBpMyA8IHdvcmRDaGFycy5sZW5ndGg7ICsraTMpIHtcbiAgICAgICAgdmFyIGMyID0gd29yZENoYXJzLmNoYXJBdChpMyk7XG4gICAgICAgIHZhciB2MiA9IEFMUEhBQkVUX01BUFtjMl07XG4gICAgICAgIGlmICh2MiA9PT0gdm9pZCAwKSByZXR1cm4gXCJVbmtub3duIGNoYXJhY3RlciBcIiArIGMyO1xuICAgICAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4gdjI7XG4gICAgICAgIGlmIChpMyArIDYgPj0gd29yZENoYXJzLmxlbmd0aCkgY29udGludWU7XG4gICAgICAgIHdvcmRzLnB1c2godjIpO1xuICAgICAgfVxuICAgICAgaWYgKGNoayAhPT0gMSkgcmV0dXJuIFwiSW52YWxpZCBjaGVja3N1bSBmb3IgXCIgKyBzdHI7XG4gICAgICByZXR1cm4geyBwcmVmaXgsIHdvcmRzIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlY29kZVVuc2FmZSgpIHtcbiAgICAgIHZhciByZXMgPSBfX2RlY29kZS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHR5cGVvZiByZXMgPT09IFwib2JqZWN0XCIpIHJldHVybiByZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlY29kZTMoc3RyKSB7XG4gICAgICB2YXIgcmVzID0gX19kZWNvZGUuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgIGlmICh0eXBlb2YgcmVzID09PSBcIm9iamVjdFwiKSByZXR1cm4gcmVzO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHJlcyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbnZlcnQoZGF0YSwgaW5CaXRzLCBvdXRCaXRzLCBwYWQpIHtcbiAgICAgIHZhciB2YWx1ZSA9IDA7XG4gICAgICB2YXIgYml0cyA9IDA7XG4gICAgICB2YXIgbWF4ViA9ICgxIDw8IG91dEJpdHMpIC0gMTtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkzID0gMDsgaTMgPCBkYXRhLmxlbmd0aDsgKytpMykge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlIDw8IGluQml0cyB8IGRhdGFbaTNdO1xuICAgICAgICBiaXRzICs9IGluQml0cztcbiAgICAgICAgd2hpbGUgKGJpdHMgPj0gb3V0Qml0cykge1xuICAgICAgICAgIGJpdHMgLT0gb3V0Qml0cztcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSA+PiBiaXRzICYgbWF4Vik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYWQpIHtcbiAgICAgICAgaWYgKGJpdHMgPiAwKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUgPDwgb3V0Qml0cyAtIGJpdHMgJiBtYXhWKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGJpdHMgPj0gaW5CaXRzKSByZXR1cm4gXCJFeGNlc3MgcGFkZGluZ1wiO1xuICAgICAgICBpZiAodmFsdWUgPDwgb3V0Qml0cyAtIGJpdHMgJiBtYXhWKSByZXR1cm4gXCJOb24temVybyBwYWRkaW5nXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBmdW5jdGlvbiB0b1dvcmRzVW5zYWZlKGJ5dGVzMikge1xuICAgICAgdmFyIHJlcyA9IGNvbnZlcnQoYnl0ZXMyLCA4LCA1LCB0cnVlKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlcykpIHJldHVybiByZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRvV29yZHMoYnl0ZXMyKSB7XG4gICAgICB2YXIgcmVzID0gY29udmVydChieXRlczIsIDgsIDUsIHRydWUpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzKSkgcmV0dXJuIHJlcztcbiAgICAgIHRocm93IG5ldyBFcnJvcihyZXMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmcm9tV29yZHNVbnNhZmUod29yZHMpIHtcbiAgICAgIHZhciByZXMgPSBjb252ZXJ0KHdvcmRzLCA1LCA4LCBmYWxzZSk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXMpKSByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmcm9tV29yZHMod29yZHMpIHtcbiAgICAgIHZhciByZXMgPSBjb252ZXJ0KHdvcmRzLCA1LCA4LCBmYWxzZSk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXMpKSByZXR1cm4gcmVzO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHJlcyk7XG4gICAgfVxuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgZGVjb2RlVW5zYWZlLFxuICAgICAgZGVjb2RlOiBkZWNvZGUzLFxuICAgICAgZW5jb2RlOiBlbmNvZGUyLFxuICAgICAgdG9Xb3Jkc1Vuc2FmZSxcbiAgICAgIHRvV29yZHMsXG4gICAgICBmcm9tV29yZHNVbnNhZmUsXG4gICAgICBmcm9tV29yZHNcbiAgICB9O1xuICB9XG59KTtcblxuLy9cbnZhciByZXF1aXJlX2JlY2gzMjQgPSBfX2NvbW1vbkpTKHtcbiAgXCIuLi8uLi9ub2RlX21vZHVsZXMvQGNvc21qcy9lbmNvZGluZy9idWlsZC9iZWNoMzIuanNcIihleHBvcnRzKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIF9fY3JlYXRlQmluZGluZyA9IGV4cG9ydHMgJiYgZXhwb3J0cy5fX2NyZWF0ZUJpbmRpbmcgfHwgKE9iamVjdC5jcmVhdGUgPyBmdW5jdGlvbihvMiwgbTIsIGssIGsyKSB7XG4gICAgICBpZiAoazIgPT09IHZvaWQgMCkgazIgPSBrO1xuICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0yLCBrKTtcbiAgICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0yLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBtMltrXTtcbiAgICAgICAgfSB9O1xuICAgICAgfVxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8yLCBrMiwgZGVzYyk7XG4gICAgfSA6IGZ1bmN0aW9uKG8yLCBtMiwgaywgazIpIHtcbiAgICAgIGlmIChrMiA9PT0gdm9pZCAwKSBrMiA9IGs7XG4gICAgICBvMltrMl0gPSBtMltrXTtcbiAgICB9KTtcbiAgICB2YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gZXhwb3J0cyAmJiBleHBvcnRzLl9fc2V0TW9kdWxlRGVmYXVsdCB8fCAoT2JqZWN0LmNyZWF0ZSA/IGZ1bmN0aW9uKG8yLCB2Mikge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8yLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdjIgfSk7XG4gICAgfSA6IGZ1bmN0aW9uKG8yLCB2Mikge1xuICAgICAgbzJbXCJkZWZhdWx0XCJdID0gdjI7XG4gICAgfSk7XG4gICAgdmFyIF9faW1wb3J0U3RhciA9IGV4cG9ydHMgJiYgZXhwb3J0cy5fX2ltcG9ydFN0YXIgfHwgZnVuY3Rpb24obW9kKSB7XG4gICAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaWYgKG1vZCAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgICB9XG4gICAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgICBleHBvcnRzLm5vcm1hbGl6ZUJlY2gzMiA9IGV4cG9ydHMuZnJvbUJlY2gzMiA9IGV4cG9ydHMudG9CZWNoMzIgPSB2b2lkIDA7XG4gICAgdmFyIGJlY2gzMjIgPSBfX2ltcG9ydFN0YXIocmVxdWlyZV9iZWNoMzIzKCkpO1xuICAgIGZ1bmN0aW9uIHRvQmVjaDMyKHByZWZpeCwgZGF0YSwgbGltaXQyKSB7XG4gICAgICBjb25zdCBhZGRyZXNzID0gYmVjaDMyMi5lbmNvZGUocHJlZml4LCBiZWNoMzIyLnRvV29yZHMoZGF0YSksIGxpbWl0Mik7XG4gICAgICByZXR1cm4gYWRkcmVzcztcbiAgICB9XG4gICAgZXhwb3J0cy50b0JlY2gzMiA9IHRvQmVjaDMyO1xuICAgIGZ1bmN0aW9uIGZyb21CZWNoMzIzKGFkZHJlc3MsIGxpbWl0MiA9IEluZmluaXR5KSB7XG4gICAgICBjb25zdCBkZWNvZGVkQWRkcmVzcyA9IGJlY2gzMjIuZGVjb2RlKGFkZHJlc3MsIGxpbWl0Mik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmVmaXg6IGRlY29kZWRBZGRyZXNzLnByZWZpeCxcbiAgICAgICAgZGF0YTogbmV3IFVpbnQ4QXJyYXkoYmVjaDMyMi5mcm9tV29yZHMoZGVjb2RlZEFkZHJlc3Mud29yZHMpKVxuICAgICAgfTtcbiAgICB9XG4gICAgZXhwb3J0cy5mcm9tQmVjaDMyID0gZnJvbUJlY2gzMjM7XG4gICAgZnVuY3Rpb24gbm9ybWFsaXplQmVjaDMyKGFkZHJlc3MpIHtcbiAgICAgIGNvbnN0IHsgcHJlZml4LCBkYXRhIH0gPSBmcm9tQmVjaDMyMyhhZGRyZXNzKTtcbiAgICAgIHJldHVybiB0b0JlY2gzMihwcmVmaXgsIGRhdGEpO1xuICAgIH1cbiAgICBleHBvcnRzLm5vcm1hbGl6ZUJlY2gzMiA9IG5vcm1hbGl6ZUJlY2gzMjtcbiAgfVxufSk7XG5cbi8vXG52YXIgcmVxdWlyZV9oZXgyID0gX19jb21tb25KUyh7XG4gIFwiLi4vLi4vbm9kZV9tb2R1bGVzL0Bjb3NtanMvZW5jb2RpbmcvYnVpbGQvaGV4LmpzXCIoZXhwb3J0cykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgICBleHBvcnRzLmZyb21IZXggPSBleHBvcnRzLnRvSGV4ID0gdm9pZCAwO1xuICAgIGZ1bmN0aW9uIHRvSGV4MihkYXRhKSB7XG4gICAgICBsZXQgb3V0ID0gXCJcIjtcbiAgICAgIGZvciAoY29uc3QgYnl0ZSBvZiBkYXRhKSB7XG4gICAgICAgIG91dCArPSAoXCIwXCIgKyBieXRlLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgZXhwb3J0cy50b0hleCA9IHRvSGV4MjtcbiAgICBmdW5jdGlvbiBmcm9tSGV4MyhoZXhzdHJpbmcpIHtcbiAgICAgIGlmIChoZXhzdHJpbmcubGVuZ3RoICUgMiAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJoZXggc3RyaW5nIGxlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMlwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG91dCA9IG5ldyBVaW50OEFycmF5KGhleHN0cmluZy5sZW5ndGggLyAyKTtcbiAgICAgIGZvciAobGV0IGkzID0gMDsgaTMgPCBvdXQubGVuZ3RoOyBpMysrKSB7XG4gICAgICAgIGNvbnN0IGogPSAyICogaTM7XG4gICAgICAgIGNvbnN0IGhleEJ5dGVBc1N0cmluZyA9IGhleHN0cmluZy5zbGljZShqLCBqICsgMik7XG4gICAgICAgIGlmICghaGV4Qnl0ZUFzU3RyaW5nLm1hdGNoKC9bMC05YS1mXXsyfS9pKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImhleCBzdHJpbmcgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzXCIpO1xuICAgICAgICB9XG4gICAgICAgIG91dFtpM10gPSBwYXJzZUludChoZXhCeXRlQXNTdHJpbmcsIDE2KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGV4cG9ydHMuZnJvbUhleCA9IGZyb21IZXgzO1xuICB9XG59KTtcblxuLy9cbnZhciByZXF1aXJlX3JmYzMzMzkyID0gX19jb21tb25KUyh7XG4gIFwiLi4vLi4vbm9kZV9tb2R1bGVzL0Bjb3NtanMvZW5jb2RpbmcvYnVpbGQvcmZjMzMzOS5qc1wiKGV4cG9ydHMpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4gICAgZXhwb3J0cy50b1JmYzMzMzkgPSBleHBvcnRzLmZyb21SZmMzMzM5ID0gdm9pZCAwO1xuICAgIHZhciByZmMzMzM5TWF0Y2hlciA9IC9eKFxcZHs0fSktKFxcZHsyfSktKFxcZHsyfSlbVCBdKFxcZHsyfSk6KFxcZHsyfSk6KFxcZHsyfSkoXFwuXFxkezEsOX0pPygoPzpbKy1dXFxkezJ9OlxcZHsyfSl8WikkLztcbiAgICBmdW5jdGlvbiBwYWRkZWQoaW50ZWdlciwgbGVuZ3RoID0gMikge1xuICAgICAgcmV0dXJuIGludGVnZXIudG9TdHJpbmcoKS5wYWRTdGFydChsZW5ndGgsIFwiMFwiKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZnJvbVJmYzMzMzkoc3RyKSB7XG4gICAgICBjb25zdCBtYXRjaGVzMiA9IHJmYzMzMzlNYXRjaGVyLmV4ZWMoc3RyKTtcbiAgICAgIGlmICghbWF0Y2hlczIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGF0ZSBzdHJpbmcgaXMgbm90IGluIFJGQzMzMzkgZm9ybWF0XCIpO1xuICAgICAgfVxuICAgICAgY29uc3QgeWVhciA9ICttYXRjaGVzMlsxXTtcbiAgICAgIGNvbnN0IG1vbnRoID0gK21hdGNoZXMyWzJdO1xuICAgICAgY29uc3QgZGF5ID0gK21hdGNoZXMyWzNdO1xuICAgICAgY29uc3QgaG91ciA9ICttYXRjaGVzMls0XTtcbiAgICAgIGNvbnN0IG1pbnV0ZSA9ICttYXRjaGVzMls1XTtcbiAgICAgIGNvbnN0IHNlY29uZCA9ICttYXRjaGVzMls2XTtcbiAgICAgIGNvbnN0IG1pbGxpU2Vjb25kcyA9IG1hdGNoZXMyWzddID8gTWF0aC5mbG9vcigrbWF0Y2hlczJbN10gKiAxZTMpIDogMDtcbiAgICAgIGxldCB0ek9mZnNldFNpZ247XG4gICAgICBsZXQgdHpPZmZzZXRIb3VycztcbiAgICAgIGxldCB0ek9mZnNldE1pbnV0ZXM7XG4gICAgICBpZiAobWF0Y2hlczJbOF0gPT09IFwiWlwiKSB7XG4gICAgICAgIHR6T2Zmc2V0U2lnbiA9IDE7XG4gICAgICAgIHR6T2Zmc2V0SG91cnMgPSAwO1xuICAgICAgICB0ek9mZnNldE1pbnV0ZXMgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHpPZmZzZXRTaWduID0gbWF0Y2hlczJbOF0uc3Vic3RyaW5nKDAsIDEpID09PSBcIi1cIiA/IC0xIDogMTtcbiAgICAgICAgdHpPZmZzZXRIb3VycyA9ICttYXRjaGVzMls4XS5zdWJzdHJpbmcoMSwgMyk7XG4gICAgICAgIHR6T2Zmc2V0TWludXRlcyA9ICttYXRjaGVzMls4XS5zdWJzdHJpbmcoNCwgNik7XG4gICAgICB9XG4gICAgICBjb25zdCB0ek9mZnNldCA9IHR6T2Zmc2V0U2lnbiAqICh0ek9mZnNldEhvdXJzICogNjAgKyB0ek9mZnNldE1pbnV0ZXMpICogNjA7XG4gICAgICBjb25zdCBkYXRlID0gLyogICAgICAgICAgICovIG5ldyBEYXRlKCk7XG4gICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIG1vbnRoIC0gMSwgZGF5KTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpU2Vjb25kcyk7XG4gICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkgLSB0ek9mZnNldCAqIDFlMyk7XG4gICAgfVxuICAgIGV4cG9ydHMuZnJvbVJmYzMzMzkgPSBmcm9tUmZjMzMzOTtcbiAgICBmdW5jdGlvbiB0b1JmYzMzMzkoZGF0ZSkge1xuICAgICAgY29uc3QgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgIGNvbnN0IG1vbnRoID0gcGFkZGVkKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpO1xuICAgICAgY29uc3QgZGF5ID0gcGFkZGVkKGRhdGUuZ2V0VVRDRGF0ZSgpKTtcbiAgICAgIGNvbnN0IGhvdXIgPSBwYWRkZWQoZGF0ZS5nZXRVVENIb3VycygpKTtcbiAgICAgIGNvbnN0IG1pbnV0ZSA9IHBhZGRlZChkYXRlLmdldFVUQ01pbnV0ZXMoKSk7XG4gICAgICBjb25zdCBzZWNvbmQgPSBwYWRkZWQoZGF0ZS5nZXRVVENTZWNvbmRzKCkpO1xuICAgICAgY29uc3QgbXMgPSBwYWRkZWQoZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKSwgMyk7XG4gICAgICByZXR1cm4gYCR7eWVhcn0tJHttb250aH0tJHtkYXl9VCR7aG91cn06JHttaW51dGV9OiR7c2Vjb25kfS4ke21zfVpgO1xuICAgIH1cbiAgICBleHBvcnRzLnRvUmZjMzMzOSA9IHRvUmZjMzMzOTtcbiAgfVxufSk7XG5cbi8vXG52YXIgcmVxdWlyZV91dGY4MiA9IF9fY29tbW9uSlMoe1xuICBcIi4uLy4uL25vZGVfbW9kdWxlcy9AY29zbWpzL2VuY29kaW5nL2J1aWxkL3V0ZjguanNcIihleHBvcnRzKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuICAgIGV4cG9ydHMuZnJvbVV0ZjggPSBleHBvcnRzLnRvVXRmOCA9IHZvaWQgMDtcbiAgICBmdW5jdGlvbiB0b1V0Zjgoc3RyKSB7XG4gICAgICByZXR1cm4gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0cik7XG4gICAgfVxuICAgIGV4cG9ydHMudG9VdGY4ID0gdG9VdGY4O1xuICAgIGZ1bmN0aW9uIGZyb21VdGY4KGRhdGEsIGxvc3N5ID0gZmFsc2UpIHtcbiAgICAgIGNvbnN0IGZhdGFsID0gIWxvc3N5O1xuICAgICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcihcInV0Zi04XCIsIHsgZmF0YWwgfSkuZGVjb2RlKGRhdGEpO1xuICAgIH1cbiAgICBleHBvcnRzLmZyb21VdGY4ID0gZnJvbVV0Zjg7XG4gIH1cbn0pO1xuXG4vL1xudmFyIHJlcXVpcmVfYnVpbGQyID0gX19jb21tb25KUyh7XG4gIFwiLi4vLi4vbm9kZV9tb2R1bGVzL0Bjb3NtanMvZW5jb2RpbmcvYnVpbGQvaW5kZXguanNcIihleHBvcnRzKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuICAgIGV4cG9ydHMudG9VdGY4ID0gZXhwb3J0cy5mcm9tVXRmOCA9IGV4cG9ydHMudG9SZmMzMzM5ID0gZXhwb3J0cy5mcm9tUmZjMzMzOSA9IGV4cG9ydHMudG9IZXggPSBleHBvcnRzLmZyb21IZXggPSBleHBvcnRzLnRvQmVjaDMyID0gZXhwb3J0cy5ub3JtYWxpemVCZWNoMzIgPSBleHBvcnRzLmZyb21CZWNoMzIgPSBleHBvcnRzLnRvQmFzZTY0ID0gZXhwb3J0cy5mcm9tQmFzZTY0ID0gZXhwb3J0cy50b0FzY2lpID0gZXhwb3J0cy5mcm9tQXNjaWkgPSB2b2lkIDA7XG4gICAgdmFyIGFzY2lpXzEgPSByZXF1aXJlX2FzY2lpMigpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZyb21Bc2NpaVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYXNjaWlfMS5mcm9tQXNjaWk7XG4gICAgfSB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b0FzY2lpXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBhc2NpaV8xLnRvQXNjaWk7XG4gICAgfSB9KTtcbiAgICB2YXIgYmFzZTY0XzEgPSByZXF1aXJlX2Jhc2U2NDIoKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmcm9tQmFzZTY0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBiYXNlNjRfMS5mcm9tQmFzZTY0O1xuICAgIH0gfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidG9CYXNlNjRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGJhc2U2NF8xLnRvQmFzZTY0O1xuICAgIH0gfSk7XG4gICAgdmFyIGJlY2gzMl8xID0gcmVxdWlyZV9iZWNoMzI0KCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZnJvbUJlY2gzMlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYmVjaDMyXzEuZnJvbUJlY2gzMjtcbiAgICB9IH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm5vcm1hbGl6ZUJlY2gzMlwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYmVjaDMyXzEubm9ybWFsaXplQmVjaDMyO1xuICAgIH0gfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidG9CZWNoMzJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGJlY2gzMl8xLnRvQmVjaDMyO1xuICAgIH0gfSk7XG4gICAgdmFyIGhleF8xID0gcmVxdWlyZV9oZXgyKCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZnJvbUhleFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaGV4XzEuZnJvbUhleDtcbiAgICB9IH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvSGV4XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBoZXhfMS50b0hleDtcbiAgICB9IH0pO1xuICAgIHZhciByZmMzMzM5XzEgPSByZXF1aXJlX3JmYzMzMzkyKCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZnJvbVJmYzMzMzlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJmYzMzMzlfMS5mcm9tUmZjMzMzOTtcbiAgICB9IH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvUmZjMzMzOVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcmZjMzMzOV8xLnRvUmZjMzMzOTtcbiAgICB9IH0pO1xuICAgIHZhciB1dGY4XzEgPSByZXF1aXJlX3V0ZjgyKCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZnJvbVV0ZjhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHV0ZjhfMS5mcm9tVXRmODtcbiAgICB9IH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvVXRmOFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdXRmOF8xLnRvVXRmODtcbiAgICB9IH0pO1xuICB9XG59KTtcblxuLy9cbnZhciBCcmlkZ2VJZCA9IChcbiAgLyogICAgICAgICAgICAgICAgKi9cbiAge1xuICAgIEJBTks6IFwiYmFua1wiLFxuICAgIENPUkU6IFwiY29yZVwiLFxuICAgIERJQkM6IFwiZGliY1wiLFxuICAgIFNUT1JBR0U6IFwic3RvcmFnZVwiLFxuICAgIFBST1ZJU0lPTjogXCJwcm92aXNpb25cIixcbiAgICBQUk9WSVNJT05fU01BUlRfV0FMTEVUOiBcInByb3Zpc2lvbldhbGxldFwiLFxuICAgIFZMT0NBTENIQUlOOiBcInZsb2NhbGNoYWluXCIsXG4gICAgVlRSQU5TRkVSOiBcInZ0cmFuc2ZlclwiLFxuICAgIFdBTExFVDogXCJ3YWxsZXRcIlxuICB9XG4pO1xuaGFyZGVuKEJyaWRnZUlkKTtcbnZhciBDb3Ntb3NJbml0S2V5VG9CcmlkZ2VJZCA9IHtcbiAgdmJhbmtQb3J0OiBcImJhbmtcIixcbiAgdmliY1BvcnQ6IFwiZGliY1wiXG59O1xuaGFyZGVuKENvc21vc0luaXRLZXlUb0JyaWRnZUlkKTtcbnZhciBXYWxsZXROYW1lID0gKFxuICAvKiAgICAgICAgICAgICAgICAqL1xuICB7XG4gICAgZGVwb3NpdEZhY2V0OiBcImRlcG9zaXRGYWNldFwiXG4gIH1cbik7XG5oYXJkZW4oV2FsbGV0TmFtZSk7XG52YXIgVkJhbmtBY2NvdW50ID0gKFxuICAvKiAgICAgICAgICAgICAgICAqL1xuICB7XG4gICAgcmVzZXJ2ZToge1xuICAgICAgbW9kdWxlOiBcInZiYW5rL3Jlc2VydmVcIixcbiAgICAgIGFkZHJlc3M6IFwiYWdvcmljMWFlMGxtdHpsZ3JjbmxhOXhqa3BhYXJxNWQ1ZGZlejYzaDNudWNsXCJcbiAgICB9LFxuICAgIHByb3Zpc2lvbjoge1xuICAgICAgbW9kdWxlOiBcInZiYW5rL3Byb3Zpc2lvblwiLFxuICAgICAgYWRkcmVzczogXCJhZ29yaWMxbWVnenl0ZzY1Y3lyZ3pzNmZ2enhncmNxdnd3bDd1Z3B0NjIzNDZcIlxuICAgIH1cbiAgfVxuKTtcbmhhcmRlbihWQmFua0FjY291bnQpO1xuXG4vL1xudmFyIGRlYnVnSW5zdGFuY2UgPSAxO1xudmFyIG1ha2VUcmFjZXIgPSAobmFtZSwgZW5hYmxlID0gdHJ1ZSkgPT4ge1xuICBkZWJ1Z0luc3RhbmNlICs9IDE7XG4gIGxldCBkZWJ1Z0NvdW50ID0gMTtcbiAgY29uc3Qga2V5ID0gYC0tLS0tICR7bmFtZX0uJHtkZWJ1Z0luc3RhbmNlfSBgO1xuICBzd2l0Y2ggKGVuYWJsZSkge1xuICAgIGNhc2UgZmFsc2U6IHtcbiAgICAgIGNvbnN0IGxvZ0Rpc2FibGVkID0gKC4uLl9hcmdzKSA9PiB7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGxvZ0Rpc2FibGVkO1xuICAgIH1cbiAgICBjYXNlIFwidmVyYm9zZVwiOiB7XG4gICAgICBjb25zdCBpbmZvVGljayA9IChvcHRMb2csIC4uLmFyZ3MpID0+IHtcbiAgICAgICAgaWYgKG9wdExvZy5sb2cpIHtcbiAgICAgICAgICBjb25zb2xlLmluZm8oa2V5LCBkZWJ1Z0NvdW50ICs9IDEsIC4uLmFyZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUuaW5mbyhrZXksIGRlYnVnQ291bnQgKz0gMSwgb3B0TG9nLCAuLi5hcmdzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiBpbmZvVGljaztcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgY29uc3QgZGVidWdUaWNrID0gKG9wdExvZywgLi4uYXJncykgPT4ge1xuICAgICAgICBpZiAob3B0TG9nLmxvZykge1xuICAgICAgICAgIG9wdExvZy5sb2coa2V5LCBkZWJ1Z0NvdW50ICs9IDEsIC4uLmFyZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUuaW5mbyhrZXksIGRlYnVnQ291bnQgKz0gMSwgb3B0TG9nLCAuLi5hcmdzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiBkZWJ1Z1RpY2s7XG4gICAgfVxuICB9XG59O1xuaGFyZGVuKG1ha2VUcmFjZXIpO1xuXG4vL1xudmFyIGdsb2JhbEFzc2VydCA9IGdsb2JhbFRoaXMuYXNzZXJ0O1xuaWYgKGdsb2JhbEFzc2VydCA9PT0gdm9pZCAwKSB7XG4gIHRocm93IEVycm9yKFxuICAgIGBDYW5ub3QgaW5pdGlhbGl6ZSBAZW5kby9lcnJvcnMsIG1pc3NpbmcgZ2xvYmFsVGhpcy5hc3NlcnQsIGltcG9ydCAnc2VzJyBiZWZvcmUgJ0BlbmRvL2Vycm9ycydgXG4gICk7XG59XG52YXIgbWlzc2luZyA9IChcbiAgLyogICAgICAgICAgICAgICAgKi9cbiAgW1xuICAgIFwidHlwZW9mXCIsXG4gICAgXCJlcnJvclwiLFxuICAgIFwiZmFpbFwiLFxuICAgIFwiZXF1YWxcIixcbiAgICBcInN0cmluZ1wiLFxuICAgIFwibm90ZVwiLFxuICAgIFwiZGV0YWlsc1wiLFxuICAgIFwiRmFpbFwiLFxuICAgIFwicXVvdGVcIixcbiAgICAvL1xuICAgIC8vXG4gICAgLy9cbiAgICAvL1xuICAgIFwibWFrZUFzc2VydFwiXG4gIF0uZmlsdGVyKChuYW1lKSA9PiBnbG9iYWxBc3NlcnRbbmFtZV0gPT09IHZvaWQgMClcbik7XG5pZiAobWlzc2luZy5sZW5ndGggPiAwKSB7XG4gIHRocm93IEVycm9yKFxuICAgIGBDYW5ub3QgaW5pdGlhbGl6ZSBAZW5kby9lcnJvcnMsIG1pc3NpbmcgZ2xvYmFsVGhpcy5hc3NlcnQgbWV0aG9kcyAke21pc3Npbmcuam9pbihcbiAgICAgIFwiLCBcIlxuICAgICl9YFxuICApO1xufVxudmFyIHtcbiAgYmFyZSxcbiAgZGV0YWlsczogcmVkYWN0ZWQsXG4gIGVycm9yOiBtYWtlRXJyb3IsXG4gIEZhaWw6IHRocm93UmVkYWN0ZWQsXG4gIG1ha2VBc3NlcnQ6IF9vbWl0dGVkTWFrZUFzc2VydCxcbiAgbm90ZSxcbiAgcXVvdGUsXG4gIC4uLmFzc2VydGlvbnNcbn0gPSBnbG9iYWxBc3NlcnQ7XG52YXIgYXNzZXJ0MiA9ICh2YWx1ZSwgb3B0RGV0YWlscywgZXJyQ29udHJ1Y3Rvciwgb3B0aW9ucykgPT4gZ2xvYmFsQXNzZXJ0KHZhbHVlLCBvcHREZXRhaWxzLCBlcnJDb250cnVjdG9yLCBvcHRpb25zKTtcbk9iamVjdC5hc3NpZ24oYXNzZXJ0MiwgYXNzZXJ0aW9ucyk7XG52YXIgYmFyZU9yUXVvdGUgPSBiYXJlIHx8IHF1b3RlO1xuXG4vL1xudmFyIE5vbk51bGxpc2ggPSAodmFsLCBvcHREZXRhaWxzID0gYHVuZXhwZWN0ZWQgJHtxdW90ZSh2YWwpfWApID0+IHtcbiAgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuICBhc3NlcnQuZmFpbChvcHREZXRhaWxzKTtcbn07XG5oYXJkZW4oTm9uTnVsbGlzaCk7XG5cbi8vXG52YXIgeyBkZWZpbmVQcm9wZXJ0eSB9ID0gT2JqZWN0O1xudmFyIHR5cGVkRW50cmllcyA9IChcbiAgLyogICAgICAgICAgICAgICAgICAgICAgICovXG4gIE9iamVjdC5lbnRyaWVzXG4pO1xudmFyIGZyb21UeXBlZEVudHJpZXMgPSAoXG4gIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgT2JqZWN0LmZyb21FbnRyaWVzXG4pO1xudmFyIHR5cGVkTWFwID0gKFxuICAvKiAgICAgICAgICAgICAgICAgICAqL1xuICBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbC5iaW5kKEFycmF5LnByb3RvdHlwZS5tYXApXG4pO1xudmFyIGxvZ0xldmVscyA9IChcbiAgLyogICAgICAgICAgICAgICAgKi9cbiAgW1xuICAgIFwiZGVidWdcIixcbiAgICBcImxvZ1wiLFxuICAgIFwiaW5mb1wiLFxuICAgIFwid2FyblwiLFxuICAgIFwiZXJyb3JcIlxuICBdXG4pO1xuT2JqZWN0LmZyZWV6ZShsb2dMZXZlbHMpO1xudmFyIGRlZXBNYXBPYmplY3RJbnRlcm5hbCA9ICh2YWx1ZSwgbmFtZSwgY29udGFpbmVyLCBtYXBwZXIpID0+IHtcbiAgaWYgKGNvbnRhaW5lciAmJiB0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIGNvbnN0IG1hcHBlZCA9IG1hcHBlcih2YWx1ZSwgbmFtZSwgY29udGFpbmVyKTtcbiAgICBpZiAobWFwcGVkICE9PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG1hcHBlZDtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCAhdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgbGV0IHdhc01hcHBlZCA9IGZhbHNlO1xuICBjb25zdCB2YWx1ZU9iaiA9IChcbiAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIHZhbHVlXG4gICk7XG4gIGNvbnN0IG1hcEVudHJ5ID0gKFtpbm5lck5hbWUsIGlubmVyVmFsdWVdKSA9PiB7XG4gICAgY29uc3QgbWFwcGVkSW5uZXJWYWx1ZSA9IGRlZXBNYXBPYmplY3RJbnRlcm5hbChcbiAgICAgIGlubmVyVmFsdWUsXG4gICAgICBpbm5lck5hbWUsXG4gICAgICB2YWx1ZU9iaixcbiAgICAgIG1hcHBlclxuICAgICk7XG4gICAgd2FzTWFwcGVkIHx8PSBtYXBwZWRJbm5lclZhbHVlICE9PSBpbm5lclZhbHVlO1xuICAgIHJldHVybiBbXG4gICAgICBpbm5lck5hbWUsXG4gICAgICAvKiAgICAgICAgICAgICAgKi9cbiAgICAgIG1hcHBlZElubmVyVmFsdWVcbiAgICBdO1xuICB9O1xuICBjb25zdCBtYXBwZWRFbnRyaWVzID0gdHlwZWRFbnRyaWVzKHZhbHVlT2JqKS5tYXAobWFwRW50cnkpO1xuICBpZiAoIXdhc01hcHBlZCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBjb25zdCBtYXBwZWRPYmogPSBmcm9tVHlwZWRFbnRyaWVzKG1hcHBlZEVudHJpZXMpO1xuICByZXR1cm4gKFxuICAgIC8qICAgICAgICAgICAgICAqL1xuICAgIG1hcHBlZE9ialxuICApO1xufTtcbnZhciBkZWVwTWFwT2JqZWN0ID0gKG9iaiwgbWFwcGVyKSA9PiAoXG4gIC8qICAgICAgICAgICAgICAqL1xuICBkZWVwTWFwT2JqZWN0SW50ZXJuYWwob2JqLCB2b2lkIDAsIHZvaWQgMCwgbWFwcGVyKVxuKTtcbnZhciBwcm92aWRlTGF6eU1hcCA9IChtYXAsIGtleSwgbWFrZVZhbHVlKSA9PiB7XG4gIGNvbnN0IGZvdW5kID0gbWFwLmdldChrZXkpO1xuICBpZiAoZm91bmQgIT09IHZvaWQgMCB8fCBtYXAuaGFzKGtleSkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgLyogICAgICAgICAgICAqL1xuICAgICAgZm91bmRcbiAgICApO1xuICB9XG4gIGNvbnN0IHZhbHVlID0gbWFrZVZhbHVlKGtleSk7XG4gIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbi8vXG52YXIgeyBmcmVlemUgfSA9IE9iamVjdDtcbnZhciB7IGFwcGx5IH0gPSBSZWZsZWN0O1xudmFyIHVuY3VycnlUaGlzID0gKGZuKSA9PiAocmVjZWl2ZXIsIC4uLmFyZ3MpID0+IGFwcGx5KGZuLCByZWNlaXZlciwgYXJncyk7XG52YXIgYXJyYXlQdXNoID0gdW5jdXJyeVRoaXMoQXJyYXkucHJvdG90eXBlLnB1c2gpO1xudmFyIGFycmF5SW5jbHVkZXMgPSB1bmN1cnJ5VGhpcyhBcnJheS5wcm90b3R5cGUuaW5jbHVkZXMpO1xudmFyIHN0cmluZ1NwbGl0ID0gdW5jdXJyeVRoaXMoU3RyaW5nLnByb3RvdHlwZS5zcGxpdCk7XG52YXIgcSA9IEpTT04uc3RyaW5naWZ5O1xudmFyIEZhaWwgPSAobGl0ZXJhbHMsIC4uLmFyZ3MpID0+IHtcbiAgbGV0IG1zZyA9IGxpdGVyYWxzWzBdO1xuICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgYXJncy5sZW5ndGg7IGkzICs9IDEpIHtcbiAgICBtc2cgPSBgJHttc2d9JHthcmdzW2kzXX0ke2xpdGVyYWxzW2kzICsgMV19YDtcbiAgfVxuICB0aHJvdyBFcnJvcihtc2cpO1xufTtcbnZhciBtYWtlRW52aXJvbm1lbnRDYXB0b3IgPSAoYUdsb2JhbCwgZHJvcE5hbWVzID0gZmFsc2UpID0+IHtcbiAgY29uc3QgY2FwdHVyZWRFbnZpcm9ubWVudE9wdGlvbk5hbWVzID0gW107XG4gIGNvbnN0IGdldEVudmlyb25tZW50T3B0aW9uMiA9IChvcHRpb25OYW1lLCBkZWZhdWx0U2V0dGluZywgb3B0T3RoZXJWYWx1ZXMgPSB2b2lkIDApID0+IHtcbiAgICB0eXBlb2Ygb3B0aW9uTmFtZSA9PT0gXCJzdHJpbmdcIiB8fCBGYWlsYEVudmlyb25tZW50IG9wdGlvbiBuYW1lICR7cShvcHRpb25OYW1lKX0gbXVzdCBiZSBhIHN0cmluZy5gO1xuICAgIHR5cGVvZiBkZWZhdWx0U2V0dGluZyA9PT0gXCJzdHJpbmdcIiB8fCBGYWlsYEVudmlyb25tZW50IG9wdGlvbiBkZWZhdWx0IHNldHRpbmcgJHtxKFxuICAgICAgZGVmYXVsdFNldHRpbmdcbiAgICApfSBtdXN0IGJlIGEgc3RyaW5nLmA7XG4gICAgbGV0IHNldHRpbmcgPSBkZWZhdWx0U2V0dGluZztcbiAgICBjb25zdCBnbG9iYWxQcm9jZXNzID0gYUdsb2JhbC5wcm9jZXNzIHx8IHZvaWQgMDtcbiAgICBjb25zdCBnbG9iYWxFbnYgPSB0eXBlb2YgZ2xvYmFsUHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBnbG9iYWxQcm9jZXNzLmVudiB8fCB2b2lkIDA7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWxFbnYgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIGlmIChvcHRpb25OYW1lIGluIGdsb2JhbEVudikge1xuICAgICAgICBpZiAoIWRyb3BOYW1lcykge1xuICAgICAgICAgIGFycmF5UHVzaChjYXB0dXJlZEVudmlyb25tZW50T3B0aW9uTmFtZXMsIG9wdGlvbk5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wdGlvblZhbHVlID0gZ2xvYmFsRW52W29wdGlvbk5hbWVdO1xuICAgICAgICB0eXBlb2Ygb3B0aW9uVmFsdWUgPT09IFwic3RyaW5nXCIgfHwgRmFpbGBFbnZpcm9ubWVudCBvcHRpb24gbmFtZWQgJHtxKFxuICAgICAgICAgIG9wdGlvbk5hbWVcbiAgICAgICAgKX0sIGlmIHByZXNlbnQsIG11c3QgaGF2ZSBhIGNvcnJlc3BvbmRpbmcgc3RyaW5nIHZhbHVlLCBnb3QgJHtxKFxuICAgICAgICAgIG9wdGlvblZhbHVlXG4gICAgICAgICl9YDtcbiAgICAgICAgc2V0dGluZyA9IG9wdGlvblZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICBvcHRPdGhlclZhbHVlcyA9PT0gdm9pZCAwIHx8IHNldHRpbmcgPT09IGRlZmF1bHRTZXR0aW5nIHx8IGFycmF5SW5jbHVkZXMob3B0T3RoZXJWYWx1ZXMsIHNldHRpbmcpIHx8IEZhaWxgVW5yZWNvZ25pemVkICR7cShvcHRpb25OYW1lKX0gdmFsdWUgJHtxKFxuICAgICAgc2V0dGluZ1xuICAgICl9LiBFeHBlY3RlZCBvbmUgb2YgJHtxKFtkZWZhdWx0U2V0dGluZywgLi4ub3B0T3RoZXJWYWx1ZXNdKX1gO1xuICAgIHJldHVybiBzZXR0aW5nO1xuICB9O1xuICBmcmVlemUoZ2V0RW52aXJvbm1lbnRPcHRpb24yKTtcbiAgY29uc3QgZ2V0RW52aXJvbm1lbnRPcHRpb25zTGlzdDIgPSAob3B0aW9uTmFtZSkgPT4ge1xuICAgIGNvbnN0IG9wdGlvbiA9IGdldEVudmlyb25tZW50T3B0aW9uMihvcHRpb25OYW1lLCBcIlwiKTtcbiAgICByZXR1cm4gZnJlZXplKG9wdGlvbiA9PT0gXCJcIiA/IFtdIDogc3RyaW5nU3BsaXQob3B0aW9uLCBcIixcIikpO1xuICB9O1xuICBmcmVlemUoZ2V0RW52aXJvbm1lbnRPcHRpb25zTGlzdDIpO1xuICBjb25zdCBlbnZpcm9ubWVudE9wdGlvbnNMaXN0SGFzMiA9IChvcHRpb25OYW1lLCBlbGVtZW50KSA9PiBhcnJheUluY2x1ZGVzKGdldEVudmlyb25tZW50T3B0aW9uc0xpc3QyKG9wdGlvbk5hbWUpLCBlbGVtZW50KTtcbiAgY29uc3QgZ2V0Q2FwdHVyZWRFbnZpcm9ubWVudE9wdGlvbk5hbWVzID0gKCkgPT4ge1xuICAgIHJldHVybiBmcmVlemUoWy4uLmNhcHR1cmVkRW52aXJvbm1lbnRPcHRpb25OYW1lc10pO1xuICB9O1xuICBmcmVlemUoZ2V0Q2FwdHVyZWRFbnZpcm9ubWVudE9wdGlvbk5hbWVzKTtcbiAgcmV0dXJuIGZyZWV6ZSh7XG4gICAgZ2V0RW52aXJvbm1lbnRPcHRpb246IGdldEVudmlyb25tZW50T3B0aW9uMixcbiAgICBnZXRFbnZpcm9ubWVudE9wdGlvbnNMaXN0OiBnZXRFbnZpcm9ubWVudE9wdGlvbnNMaXN0MixcbiAgICBlbnZpcm9ubWVudE9wdGlvbnNMaXN0SGFzOiBlbnZpcm9ubWVudE9wdGlvbnNMaXN0SGFzMixcbiAgICBnZXRDYXB0dXJlZEVudmlyb25tZW50T3B0aW9uTmFtZXNcbiAgfSk7XG59O1xuZnJlZXplKG1ha2VFbnZpcm9ubWVudENhcHRvcik7XG52YXIge1xuICBnZXRFbnZpcm9ubWVudE9wdGlvbixcbiAgZ2V0RW52aXJvbm1lbnRPcHRpb25zTGlzdCxcbiAgZW52aXJvbm1lbnRPcHRpb25zTGlzdEhhc1xufSA9IG1ha2VFbnZpcm9ubWVudENhcHRvcihnbG9iYWxUaGlzLCB0cnVlKTtcblxuLy9cbnZhciBoaWRkZW5QcmlvckVycm9yO1xudmFyIGhpZGRlbkN1cnJlbnRUdXJuID0gMDtcbnZhciBoaWRkZW5DdXJyZW50RXZlbnQgPSAwO1xudmFyIFZFUkJPU0UgPSBlbnZpcm9ubWVudE9wdGlvbnNMaXN0SGFzKFwiREVCVUdcIiwgXCJ0cmFjay10dXJuc1wiKTtcbnZhciBFTkFCTEVEID0gZ2V0RW52aXJvbm1lbnRPcHRpb24oXCJUUkFDS19UVVJOU1wiLCBcImRpc2FibGVkXCIsIFtcImVuYWJsZWRcIl0pID09PSBcImVuYWJsZWRcIjtcbnZhciBhZGRSZWplY3Rpb25Ob3RlID0gKGRldGFpbHNOb3RlKSA9PiAocmVhc29uKSA9PiB7XG4gIGlmIChyZWFzb24gaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIGdsb2JhbFRoaXMuYXNzZXJ0Lm5vdGUocmVhc29uLCBkZXRhaWxzTm90ZSk7XG4gIH1cbiAgaWYgKFZFUkJPU0UpIHtcbiAgICBjb25zb2xlLmxvZyhcIlJFSkVDVEVEIGF0IHRvcCBvZiBldmVudCBsb29wXCIsIHJlYXNvbik7XG4gIH1cbn07XG52YXIgd3JhcEZ1bmN0aW9uID0gKGZ1bmMsIHNlbmRpbmdFcnJvciwgWDUpID0+ICguLi5hcmdzKSA9PiB7XG4gIGhpZGRlblByaW9yRXJyb3IgPSBzZW5kaW5nRXJyb3I7XG4gIGhpZGRlbkN1cnJlbnRUdXJuICs9IDE7XG4gIGhpZGRlbkN1cnJlbnRFdmVudCA9IDA7XG4gIHRyeSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gZnVuYyguLi5hcmdzKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBnbG9iYWxUaGlzLmFzc2VydC5ub3RlKFxuICAgICAgICAgIGVycixcbiAgICAgICAgICBYNWBUaHJvd24gZnJvbTogJHtoaWRkZW5QcmlvckVycm9yfToke2hpZGRlbkN1cnJlbnRUdXJufS4ke2hpZGRlbkN1cnJlbnRFdmVudH1gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoVkVSQk9TRSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlRIUk9XTiB0byB0b3Agb2YgZXZlbnQgbG9vcFwiLCBlcnIpO1xuICAgICAgfVxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICBjb25zdCBkZXRhaWxzTm90ZSA9IFg1YFJlamVjdGlvbiBmcm9tOiAke2hpZGRlblByaW9yRXJyb3J9OiR7aGlkZGVuQ3VycmVudFR1cm59LiR7aGlkZGVuQ3VycmVudEV2ZW50fWA7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCkuY2F0Y2goYWRkUmVqZWN0aW9uTm90ZShkZXRhaWxzTm90ZSkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gZmluYWxseSB7XG4gICAgaGlkZGVuUHJpb3JFcnJvciA9IHZvaWQgMDtcbiAgfVxufTtcbnZhciB0cmFja1R1cm5zID0gKGZ1bmNzKSA9PiB7XG4gIGlmICghRU5BQkxFRCB8fCB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhZ2xvYmFsVGhpcy5hc3NlcnQpIHtcbiAgICByZXR1cm4gZnVuY3M7XG4gIH1cbiAgY29uc3QgeyBkZXRhaWxzOiBYNSwgbm90ZTogYW5ub3RhdGVFcnJvciB9ID0gZ2xvYmFsVGhpcy5hc3NlcnQ7XG4gIGhpZGRlbkN1cnJlbnRFdmVudCArPSAxO1xuICBjb25zdCBzZW5kaW5nRXJyb3IgPSBFcnJvcihcbiAgICBgRXZlbnQ6ICR7aGlkZGVuQ3VycmVudFR1cm59LiR7aGlkZGVuQ3VycmVudEV2ZW50fWBcbiAgKTtcbiAgaWYgKGhpZGRlblByaW9yRXJyb3IgIT09IHZvaWQgMCkge1xuICAgIGFubm90YXRlRXJyb3Ioc2VuZGluZ0Vycm9yLCBYNWBDYXVzZWQgYnk6ICR7aGlkZGVuUHJpb3JFcnJvcn1gKTtcbiAgfVxuICByZXR1cm4gKFxuICAgIC8qICAgICAgICAgICAgKi9cbiAgICBmdW5jcy5tYXAoKGZ1bmMpID0+IGZ1bmMgJiYgd3JhcEZ1bmN0aW9uKGZ1bmMsIHNlbmRpbmdFcnJvciwgWDUpKVxuICApO1xufTtcblxuLy9cbnZhciB7IHF1b3RlOiBxMiwgRmFpbDogRmFpbDIgfSA9IGFzc2VydDtcbnZhciB7IGhhc093biwgZnJlZXplOiBmcmVlemUyLCBlbnRyaWVzIH0gPSBPYmplY3Q7XG52YXIgaXNKU09OUmVjb3JkID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJvYmplY3RcIiAmJiB2YWwgIT09IG51bGwgJiYgIUFycmF5LmlzQXJyYXkodmFsKTtcbnZhciBzaW1wbGlmeVRhZyA9ICh0YWcpID0+IHtcbiAgZm9yIChjb25zdCBwcmVmaXggb2YgW1wiQWxsZWdlZDogXCIsIFwiRGVidWdOYW1lOiBcIl0pIHtcbiAgICBpZiAodGFnLnN0YXJ0c1dpdGgocHJlZml4KSkge1xuICAgICAgcmV0dXJuIHRhZy5zbGljZShwcmVmaXgubGVuZ3RoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhZztcbn07XG52YXIgbWFrZU1lc3NhZ2VCcmVha3BvaW50VGVzdGVyID0gKG9wdGlvbk5hbWUpID0+IHtcbiAgbGV0IGJyZWFrcG9pbnRzID0gSlNPTi5wYXJzZShnZXRFbnZpcm9ubWVudE9wdGlvbihvcHRpb25OYW1lLCBcIm51bGxcIikpO1xuICBpZiAoYnJlYWtwb2ludHMgPT09IG51bGwpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGxldCBicmVha3BvaW50c1RhYmxlO1xuICBjb25zdCBnZXRCcmVha3BvaW50cyA9ICgpID0+IGJyZWFrcG9pbnRzO1xuICBmcmVlemUyKGdldEJyZWFrcG9pbnRzKTtcbiAgY29uc3Qgc2V0QnJlYWtwb2ludHMgPSAobmV3QnJlYWtwb2ludHMgPSBicmVha3BvaW50cykgPT4ge1xuICAgIGlzSlNPTlJlY29yZChuZXdCcmVha3BvaW50cykgfHwgRmFpbDJgRXhwZWN0ZWQgJHtxMihvcHRpb25OYW1lKX0gb3B0aW9uIHRvIGJlIGEgSlNPTiBicmVha3BvaW50cyByZWNvcmRgO1xuICAgIGNvbnN0IG5ld0JyZWFrcG9pbnRzVGFibGUgPSB7IF9fcHJvdG9fXzogbnVsbCB9O1xuICAgIGZvciAoY29uc3QgW3RhZywgbWV0aG9kQlBzXSBvZiBlbnRyaWVzKG5ld0JyZWFrcG9pbnRzKSkge1xuICAgICAgdGFnID09PSBzaW1wbGlmeVRhZyh0YWcpIHx8IEZhaWwyYEp1c3QgdXNlIHNpbXBsZSB0YWcgJHtxMihzaW1wbGlmeVRhZyh0YWcpKX0gcmF0aGVyIHRoYW4gJHtxMih0YWcpfWA7XG4gICAgICBpc0pTT05SZWNvcmQobWV0aG9kQlBzKSB8fCBGYWlsMmBFeHBlY3RlZCAke3EyKG9wdGlvbk5hbWUpfSBvcHRpb24ncyAke3EyKFxuICAgICAgICB0YWdcbiAgICAgICl9IHRvIGJlIGEgSlNPTiBtZXRob2RzIGJyZWFrcG9pbnRzIHJlY29yZGA7XG4gICAgICBmb3IgKGNvbnN0IFttZXRob2ROYW1lLCBjb3VudF0gb2YgZW50cmllcyhtZXRob2RCUHMpKSB7XG4gICAgICAgIGNvdW50ID09PSBcIipcIiB8fCB0eXBlb2YgY291bnQgPT09IFwibnVtYmVyXCIgJiYgTnVtYmVyLmlzU2FmZUludGVnZXIoY291bnQpICYmIGNvdW50ID49IDAgfHwgRmFpbDJgRXhwZWN0ZWQgJHtxMihvcHRpb25OYW1lKX0gb3B0aW9uJ3MgJHtxMih0YWcpfS4ke3EyKFxuICAgICAgICAgIG1ldGhvZE5hbWVcbiAgICAgICAgKX0gdG8gYmUgXCIqXCIgb3IgYSBub24tbmVnYXRpdmUgaW50ZWdlcmA7XG4gICAgICAgIGNvbnN0IGNsYXNzQlBzID0gaGFzT3duKG5ld0JyZWFrcG9pbnRzVGFibGUsIG1ldGhvZE5hbWUpID8gbmV3QnJlYWtwb2ludHNUYWJsZVttZXRob2ROYW1lXSA6IG5ld0JyZWFrcG9pbnRzVGFibGVbbWV0aG9kTmFtZV0gPSB7XG4gICAgICAgICAgLy9cbiAgICAgICAgICBfX3Byb3RvX186IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgY2xhc3NCUHNbdGFnXSA9IGNvdW50O1xuICAgICAgfVxuICAgIH1cbiAgICBicmVha3BvaW50cyA9IG5ld0JyZWFrcG9pbnRzO1xuICAgIGJyZWFrcG9pbnRzVGFibGUgPSBuZXdCcmVha3BvaW50c1RhYmxlO1xuICB9O1xuICBmcmVlemUyKHNldEJyZWFrcG9pbnRzKTtcbiAgY29uc3Qgc2hvdWxkQnJlYWtwb2ludCA9IChyZWNpcGllbnQsIG1ldGhvZE5hbWUpID0+IHtcbiAgICBpZiAobWV0aG9kTmFtZSA9PT0gdm9pZCAwIHx8IG1ldGhvZE5hbWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgY2xhc3NCUHMgPSBicmVha3BvaW50c1RhYmxlW21ldGhvZE5hbWVdIHx8IGJyZWFrcG9pbnRzVGFibGVbXCIqXCJdO1xuICAgIGlmIChjbGFzc0JQcyA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCB0YWcgPSBzaW1wbGlmeVRhZyhyZWNpcGllbnRbU3ltYm9sLnRvU3RyaW5nVGFnXSk7XG4gICAgbGV0IGNvdW50ID0gY2xhc3NCUHNbdGFnXTtcbiAgICBpZiAoY291bnQgPT09IHZvaWQgMCkge1xuICAgICAgdGFnID0gXCIqXCI7XG4gICAgICBjb3VudCA9IGNsYXNzQlBzW3RhZ107XG4gICAgICBpZiAoY291bnQgPT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjb3VudCA9PT0gXCIqXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBhc3NlcnQodHlwZW9mIGNvdW50ID09PSBcIm51bWJlclwiICYmIGNvdW50ID49IDEpO1xuICAgIGNsYXNzQlBzW3RhZ10gPSBjb3VudCAtIDE7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuICBmcmVlemUyKHNob3VsZEJyZWFrcG9pbnQpO1xuICBjb25zdCBicmVha3BvaW50VGVzdGVyID0gZnJlZXplMih7XG4gICAgZ2V0QnJlYWtwb2ludHMsXG4gICAgc2V0QnJlYWtwb2ludHMsXG4gICAgc2hvdWxkQnJlYWtwb2ludFxuICB9KTtcbiAgYnJlYWtwb2ludFRlc3Rlci5zZXRCcmVha3BvaW50cygpO1xuICByZXR1cm4gYnJlYWtwb2ludFRlc3Rlcjtcbn07XG5mcmVlemUyKG1ha2VNZXNzYWdlQnJlYWtwb2ludFRlc3Rlcik7XG5cbi8vXG52YXIgeyBkZXRhaWxzOiBYLCBxdW90ZTogcTMsIEZhaWw6IEZhaWwzLCBlcnJvcjogbWFrZUVycm9yMiB9ID0gYXNzZXJ0O1xudmFyIHsgYXNzaWduLCBmcmVlemU6IGZyZWV6ZTMgfSA9IE9iamVjdDtcbnZhciBvblNlbmQgPSBtYWtlTWVzc2FnZUJyZWFrcG9pbnRUZXN0ZXIoXCJFTkRPX1NFTkRfQlJFQUtQT0lOVFNcIik7XG52YXIgYmFzZUZyZWV6YWJsZVByb3h5SGFuZGxlciA9IHtcbiAgc2V0KF90YXJnZXQsIF9wcm9wLCBfdmFsdWUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGlzRXh0ZW5zaWJsZShfdGFyZ2V0KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBzZXRQcm90b3R5cGVPZihfdGFyZ2V0LCBfdmFsdWUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGRlbGV0ZVByb3BlcnR5KF90YXJnZXQsIF9wcm9wKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xudmFyIG1ha2VFUHJveHlIYW5kbGVyID0gKHJlY2lwaWVudCwgSGFuZGxlZFByb21pc2UyKSA9PiBoYXJkZW4oe1xuICAuLi5iYXNlRnJlZXphYmxlUHJveHlIYW5kbGVyLFxuICBnZXQ6IChfdGFyZ2V0LCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpID0+IHtcbiAgICByZXR1cm4gaGFyZGVuKFxuICAgICAge1xuICAgICAgICAvL1xuICAgICAgICAvL1xuICAgICAgICAvL1xuICAgICAgICAvL1xuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgW3Byb3BlcnR5S2V5XSguLi5hcmdzKSB7XG4gICAgICAgICAgaWYgKHRoaXMgIT09IHJlY2VpdmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gSGFuZGxlZFByb21pc2UyLnJlamVjdChcbiAgICAgICAgICAgICAgbWFrZUVycm9yMihcbiAgICAgICAgICAgICAgICBYYFVuZXhwZWN0ZWQgcmVjZWl2ZXIgZm9yIFwiJHtxMyhwcm9wZXJ0eUtleSl9XCIgbWV0aG9kIG9mIEUoJHtxMyhcbiAgICAgICAgICAgICAgICAgIHJlY2lwaWVudFxuICAgICAgICAgICAgICAgICl9KWBcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9uU2VuZCAmJiBvblNlbmQuc2hvdWxkQnJlYWtwb2ludChyZWNpcGllbnQsIHByb3BlcnR5S2V5KSkge1xuICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBIYW5kbGVkUHJvbWlzZTIuYXBwbHlNZXRob2QocmVjaXBpZW50LCBwcm9wZXJ0eUtleSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgLy9cbiAgICAgIH1bcHJvcGVydHlLZXldXG4gICAgKTtcbiAgfSxcbiAgYXBwbHk6IChfdGFyZ2V0LCBfdGhpc0FyZywgYXJnQXJyYXkgPSBbXSkgPT4ge1xuICAgIGlmIChvblNlbmQgJiYgb25TZW5kLnNob3VsZEJyZWFrcG9pbnQocmVjaXBpZW50LCB2b2lkIDApKSB7XG4gICAgICBkZWJ1Z2dlcjtcbiAgICB9XG4gICAgcmV0dXJuIEhhbmRsZWRQcm9taXNlMi5hcHBseUZ1bmN0aW9uKHJlY2lwaWVudCwgYXJnQXJyYXkpO1xuICB9LFxuICBoYXM6IChfdGFyZ2V0LCBfcCkgPT4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59KTtcbnZhciBtYWtlRVNlbmRPbmx5UHJveHlIYW5kbGVyID0gKHJlY2lwaWVudCwgSGFuZGxlZFByb21pc2UyKSA9PiBoYXJkZW4oe1xuICAuLi5iYXNlRnJlZXphYmxlUHJveHlIYW5kbGVyLFxuICBnZXQ6IChfdGFyZ2V0LCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpID0+IHtcbiAgICByZXR1cm4gaGFyZGVuKFxuICAgICAge1xuICAgICAgICAvL1xuICAgICAgICAvL1xuICAgICAgICAvL1xuICAgICAgICAvL1xuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICBbcHJvcGVydHlLZXldKC4uLmFyZ3MpIHtcbiAgICAgICAgICB0aGlzID09PSByZWNlaXZlciB8fCBGYWlsM2BVbmV4cGVjdGVkIHJlY2VpdmVyIGZvciBcIiR7cTMoXG4gICAgICAgICAgICBwcm9wZXJ0eUtleVxuICAgICAgICAgICl9XCIgbWV0aG9kIG9mIEUuc2VuZE9ubHkoJHtxMyhyZWNpcGllbnQpfSlgO1xuICAgICAgICAgIGlmIChvblNlbmQgJiYgb25TZW5kLnNob3VsZEJyZWFrcG9pbnQocmVjaXBpZW50LCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBIYW5kbGVkUHJvbWlzZTIuYXBwbHlNZXRob2RTZW5kT25seShyZWNpcGllbnQsIHByb3BlcnR5S2V5LCBhcmdzKTtcbiAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgIC8vXG4gICAgICB9W3Byb3BlcnR5S2V5XVxuICAgICk7XG4gIH0sXG4gIGFwcGx5OiAoX3RhcmdldCwgX3RoaXNBcmcsIGFyZ3NBcnJheSA9IFtdKSA9PiB7XG4gICAgaWYgKG9uU2VuZCAmJiBvblNlbmQuc2hvdWxkQnJlYWtwb2ludChyZWNpcGllbnQsIHZvaWQgMCkpIHtcbiAgICAgIGRlYnVnZ2VyO1xuICAgIH1cbiAgICBIYW5kbGVkUHJvbWlzZTIuYXBwbHlGdW5jdGlvblNlbmRPbmx5KHJlY2lwaWVudCwgYXJnc0FycmF5KTtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9LFxuICBoYXM6IChfdGFyZ2V0LCBfcCkgPT4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59KTtcbnZhciBtYWtlRUdldFByb3h5SGFuZGxlciA9ICh4LCBIYW5kbGVkUHJvbWlzZTIpID0+IGhhcmRlbih7XG4gIC4uLmJhc2VGcmVlemFibGVQcm94eUhhbmRsZXIsXG4gIGhhczogKF90YXJnZXQsIF9wcm9wKSA9PiB0cnVlLFxuICBnZXQ6IChfdGFyZ2V0LCBwcm9wKSA9PiBIYW5kbGVkUHJvbWlzZTIuZ2V0KHgsIHByb3ApXG59KTtcbnZhciBmdW5jVGFyZ2V0ID0gZnJlZXplMygoKSA9PiB7XG59KTtcbnZhciBvYmpUYXJnZXQgPSBmcmVlemUzKHsgX19wcm90b19fOiBudWxsIH0pO1xudmFyIG1ha2VFID0gKEhhbmRsZWRQcm9taXNlMikgPT4ge1xuICByZXR1cm4gaGFyZGVuKFxuICAgIGFzc2lnbihcbiAgICAgIC8qXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4gICAgICAgKi9cbiAgICAgIC8vXG4gICAgICAoeCkgPT4gbmV3IFByb3h5KGZ1bmNUYXJnZXQsIG1ha2VFUHJveHlIYW5kbGVyKHgsIEhhbmRsZWRQcm9taXNlMikpLFxuICAgICAge1xuICAgICAgICAvKlxuXG5cblxuXG5cblxuXG5cblxuICAgICAgICAgKi9cbiAgICAgICAgLy9cbiAgICAgICAgZ2V0OiAoeCkgPT4gbmV3IFByb3h5KG9ialRhcmdldCwgbWFrZUVHZXRQcm94eUhhbmRsZXIoeCwgSGFuZGxlZFByb21pc2UyKSksXG4gICAgICAgIC8qXG5cblxuXG5cblxuXG5cbiAgICAgICAgICovXG4gICAgICAgIHJlc29sdmU6IEhhbmRsZWRQcm9taXNlMi5yZXNvbHZlLFxuICAgICAgICAvKlxuXG5cblxuXG5cblxuXG4gICAgICAgICAqL1xuICAgICAgICBzZW5kT25seTogKHgpID0+IChcbiAgICAgICAgICAvL1xuICAgICAgICAgIG5ldyBQcm94eShmdW5jVGFyZ2V0LCBtYWtlRVNlbmRPbmx5UHJveHlIYW5kbGVyKHgsIEhhbmRsZWRQcm9taXNlMikpXG4gICAgICAgICksXG4gICAgICAgIC8qXG5cblxuXG5cblxuXG5cblxuXG5cbiAgICAgICAgICovXG4gICAgICAgIHdoZW46ICh4LCBvbmZ1bGZpbGxlZCwgb25yZWplY3RlZCkgPT4gSGFuZGxlZFByb21pc2UyLnJlc29sdmUoeCkudGhlbihcbiAgICAgICAgICAuLi50cmFja1R1cm5zKFtvbmZ1bGZpbGxlZCwgb25yZWplY3RlZF0pXG4gICAgICAgIClcbiAgICAgIH1cbiAgICApXG4gICk7XG59O1xudmFyIEVfZGVmYXVsdCA9IG1ha2VFO1xuXG4vL1xudmFyIGhwID0gSGFuZGxlZFByb21pc2U7XG52YXIgRSA9IEVfZGVmYXVsdChocCk7XG5cbi8vXG52YXIgeyBkZXRhaWxzOiBYMiwgcXVvdGU6IHE0LCBGYWlsOiBGYWlsNCB9ID0gYXNzZXJ0O1xudmFyIHsgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycywgZ2V0UHJvdG90eXBlT2YsIGZyZWV6ZTogZnJlZXplNCB9ID0gT2JqZWN0O1xudmFyIHsgYXBwbHk6IGFwcGx5Miwgb3duS2V5cyB9ID0gUmVmbGVjdDtcbnZhciBvbkRlbGl2ZXJ5ID0gbWFrZU1lc3NhZ2VCcmVha3BvaW50VGVzdGVyKFwiRU5ET19ERUxJVkVSWV9CUkVBS1BPSU5UU1wiKTtcbnZhciBpc09iamVjdCA9ICh2YWwpID0+IE9iamVjdCh2YWwpID09PSB2YWw7XG52YXIgY29tcGFyZVN0cmluZ2lmaWVkID0gKGEyLCBiMykgPT4ge1xuICBpZiAodHlwZW9mIGEyID09PSB0eXBlb2YgYjMpIHtcbiAgICBjb25zdCBsZWZ0ID0gU3RyaW5nKGEyKTtcbiAgICBjb25zdCByaWdodCA9IFN0cmluZyhiMyk7XG4gICAgcmV0dXJuIGxlZnQgPCByaWdodCA/IC0xIDogbGVmdCA+IHJpZ2h0ID8gMSA6IDA7XG4gIH1cbiAgaWYgKHR5cGVvZiBhMiA9PT0gXCJzeW1ib2xcIikge1xuICAgIGFzc2VydCh0eXBlb2YgYjMgPT09IFwic3RyaW5nXCIpO1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBhc3NlcnQodHlwZW9mIGEyID09PSBcInN0cmluZ1wiKTtcbiAgYXNzZXJ0KHR5cGVvZiBiMyA9PT0gXCJzeW1ib2xcIik7XG4gIHJldHVybiAxO1xufTtcbnZhciBnZXRNZXRob2ROYW1lcyA9ICh2YWwpID0+IHtcbiAgbGV0IGxheWVyID0gdmFsO1xuICBjb25zdCBuYW1lcyA9IC8qICAgICAgICAgICAqLyBuZXcgU2V0KCk7XG4gIHdoaWxlIChsYXllciAhPT0gbnVsbCAmJiBsYXllciAhPT0gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgIGNvbnN0IGRlc2NzID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhsYXllcik7XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIG93bktleXMoZGVzY3MpKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbFtuYW1lXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIG5hbWVzLmFkZChuYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFpc09iamVjdCh2YWwpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgbGF5ZXIgPSBnZXRQcm90b3R5cGVPZihsYXllcik7XG4gIH1cbiAgcmV0dXJuIGhhcmRlbihbLi4ubmFtZXNdLnNvcnQoY29tcGFyZVN0cmluZ2lmaWVkKSk7XG59O1xuZnJlZXplNChnZXRNZXRob2ROYW1lcyk7XG5cbi8vXG52YXIgeyBpc0FycmF5IH0gPSBBcnJheTtcbnZhciB7IHByb3RvdHlwZTogZnVuY3Rpb25Qcm90b3R5cGUgfSA9IEZ1bmN0aW9uO1xudmFyIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICBnZXRQcm90b3R5cGVPZjogZ2V0UHJvdG90eXBlT2YyLFxuICBoYXNPd25Qcm9wZXJ0eTogb2JqZWN0SGFzT3duUHJvcGVydHksXG4gIGlzRnJvemVuLFxuICBwcm90b3R5cGU6IG9iamVjdFByb3RvdHlwZVxufSA9IE9iamVjdDtcbnZhciB7IGFwcGx5OiBhcHBseTMgfSA9IFJlZmxlY3Q7XG52YXIgeyB0b1N0cmluZ1RhZzogdG9TdHJpbmdUYWdTeW1ib2wgfSA9IFN5bWJvbDtcbnZhciB0eXBlZEFycmF5UHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YyKFVpbnQ4QXJyYXkucHJvdG90eXBlKTtcbnZhciB0eXBlZEFycmF5VG9TdHJpbmdUYWdEZXNjID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFxuICB0eXBlZEFycmF5UHJvdG90eXBlLFxuICB0b1N0cmluZ1RhZ1N5bWJvbFxuKTtcbmFzc2VydCh0eXBlZEFycmF5VG9TdHJpbmdUYWdEZXNjKTtcbnZhciBnZXRUeXBlZEFycmF5VG9TdHJpbmdUYWcgPSB0eXBlZEFycmF5VG9TdHJpbmdUYWdEZXNjLmdldDtcbmFzc2VydCh0eXBlb2YgZ2V0VHlwZWRBcnJheVRvU3RyaW5nVGFnID09PSBcImZ1bmN0aW9uXCIpO1xudmFyIGhhc093blByb3BlcnR5T2YgPSAob2JqLCBwcm9wKSA9PiBhcHBseTMob2JqZWN0SGFzT3duUHJvcGVydHksIG9iaiwgW3Byb3BdKTtcbmhhcmRlbihoYXNPd25Qcm9wZXJ0eU9mKTtcbnZhciBpc09iamVjdDIgPSAodmFsKSA9PiBPYmplY3QodmFsKSA9PT0gdmFsO1xuaGFyZGVuKGlzT2JqZWN0Mik7XG52YXIgaXNUeXBlZEFycmF5ID0gKG9iamVjdCkgPT4ge1xuICBjb25zdCB0YWcgPSBhcHBseTMoZ2V0VHlwZWRBcnJheVRvU3RyaW5nVGFnLCBvYmplY3QsIFtdKTtcbiAgcmV0dXJuIHRhZyAhPT0gdm9pZCAwO1xufTtcbmhhcmRlbihpc1R5cGVkQXJyYXkpO1xudmFyIFBBU1NfU1RZTEUgPSBTeW1ib2wuZm9yKFwicGFzc1N0eWxlXCIpO1xudmFyIGNhbkJlTWV0aG9kID0gKGZ1bmMpID0+IHR5cGVvZiBmdW5jID09PSBcImZ1bmN0aW9uXCIgJiYgIShQQVNTX1NUWUxFIGluIGZ1bmMpO1xuaGFyZGVuKGNhbkJlTWV0aG9kKTtcbnZhciBhc3NlcnRDaGVja2VyID0gKGNvbmQsIGRldGFpbHMpID0+IHtcbiAgYXNzZXJ0KGNvbmQsIGRldGFpbHMpO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5oYXJkZW4oYXNzZXJ0Q2hlY2tlcik7XG52YXIgQ1ggPSAoY2hlY2spID0+IHtcbiAgY29uc3QgcmVqZWN0ID0gKFQsIC4uLnN1YnMpID0+IGNoZWNrKGZhbHNlLCByZWRhY3RlZChULCAuLi5zdWJzKSk7XG4gIHJldHVybiByZWplY3Q7XG59O1xuaGFyZGVuKENYKTtcbnZhciBnZXRPd25EYXRhRGVzY3JpcHRvciA9IChjYW5kaWRhdGUsIHByb3BOYW1lLCBzaG91bGRCZUVudW1lcmFibGUsIGNoZWNrKSA9PiB7XG4gIGNvbnN0IGRlc2MgPSAoXG4gICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGNhbmRpZGF0ZSwgcHJvcE5hbWUpXG4gICk7XG4gIHJldHVybiAoZGVzYyAhPT0gdm9pZCAwIHx8ICEhY2hlY2sgJiYgQ1goY2hlY2spYCR7cXVvdGUocHJvcE5hbWUpfSBwcm9wZXJ0eSBleHBlY3RlZDogJHtjYW5kaWRhdGV9YCkgJiYgKGhhc093blByb3BlcnR5T2YoZGVzYywgXCJ2YWx1ZVwiKSB8fCAhIWNoZWNrICYmIENYKFxuICAgIGNoZWNrXG4gIClgJHtxdW90ZShwcm9wTmFtZSl9IG11c3Qgbm90IGJlIGFuIGFjY2Vzc29yIHByb3BlcnR5OiAke2NhbmRpZGF0ZX1gKSAmJiAoc2hvdWxkQmVFbnVtZXJhYmxlID8gZGVzYy5lbnVtZXJhYmxlIHx8ICEhY2hlY2sgJiYgQ1goXG4gICAgY2hlY2tcbiAgKWAke3F1b3RlKHByb3BOYW1lKX0gbXVzdCBiZSBhbiBlbnVtZXJhYmxlIHByb3BlcnR5OiAke2NhbmRpZGF0ZX1gIDogIWRlc2MuZW51bWVyYWJsZSB8fCAhIWNoZWNrICYmIENYKFxuICAgIGNoZWNrXG4gIClgJHtxdW90ZShwcm9wTmFtZSl9IG11c3Qgbm90IGJlIGFuIGVudW1lcmFibGUgcHJvcGVydHk6ICR7Y2FuZGlkYXRlfWApID8gZGVzYyA6IChcbiAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAvKiAgICAgICAgICAgICAgICAgICovXG4gICAgdm9pZCAwXG4gICk7XG59O1xuaGFyZGVuKGdldE93bkRhdGFEZXNjcmlwdG9yKTtcbnZhciBnZXRUYWcgPSAodGFnUmVjb3JkKSA9PiB0YWdSZWNvcmRbU3ltYm9sLnRvU3RyaW5nVGFnXTtcbmhhcmRlbihnZXRUYWcpO1xudmFyIGNoZWNrUGFzc1N0eWxlID0gKG9iaiwgcGFzc1N0eWxlLCBleHBlY3RlZFBhc3NTdHlsZSwgY2hlY2spID0+IHtcbiAgcmV0dXJuIHBhc3NTdHlsZSA9PT0gZXhwZWN0ZWRQYXNzU3R5bGUgfHwgISFjaGVjayAmJiBDWChjaGVjaylgRXhwZWN0ZWQgJHtxdW90ZShleHBlY3RlZFBhc3NTdHlsZSl9LCBub3QgJHtxdW90ZShwYXNzU3R5bGUpfTogJHtvYmp9YDtcbn07XG5oYXJkZW4oY2hlY2tQYXNzU3R5bGUpO1xudmFyIG1ha2VDaGVja1RhZ1JlY29yZCA9IChjaGVja1Byb3RvKSA9PiB7XG4gIGNvbnN0IGNoZWNrVGFnUmVjb3JkMiA9ICh0YWdSZWNvcmQsIGV4cGVjdGVkUGFzc1N0eWxlLCBjaGVjaykgPT4ge1xuICAgIHJldHVybiAoaXNPYmplY3QyKHRhZ1JlY29yZCkgfHwgISFjaGVjayAmJiBDWChjaGVjaylgQSBub24tb2JqZWN0IGNhbm5vdCBiZSBhIHRhZ1JlY29yZDogJHt0YWdSZWNvcmR9YCkgJiYgKGlzRnJvemVuKHRhZ1JlY29yZCkgfHwgISFjaGVjayAmJiBDWChjaGVjaylgQSB0YWdSZWNvcmQgbXVzdCBiZSBmcm96ZW46ICR7dGFnUmVjb3JkfWApICYmICghaXNBcnJheSh0YWdSZWNvcmQpIHx8ICEhY2hlY2sgJiYgQ1goY2hlY2spYEFuIGFycmF5IGNhbm5vdCBiZSBhIHRhZ1JlY29yZDogJHt0YWdSZWNvcmR9YCkgJiYgY2hlY2tQYXNzU3R5bGUoXG4gICAgICB0YWdSZWNvcmQsXG4gICAgICBnZXRPd25EYXRhRGVzY3JpcHRvcih0YWdSZWNvcmQsIFBBU1NfU1RZTEUsIGZhbHNlLCBjaGVjaykudmFsdWUsXG4gICAgICBleHBlY3RlZFBhc3NTdHlsZSxcbiAgICAgIGNoZWNrXG4gICAgKSAmJiAodHlwZW9mIGdldE93bkRhdGFEZXNjcmlwdG9yKHRhZ1JlY29yZCwgU3ltYm9sLnRvU3RyaW5nVGFnLCBmYWxzZSwgY2hlY2spLnZhbHVlID09PSBcInN0cmluZ1wiIHx8ICEhY2hlY2sgJiYgQ1goXG4gICAgICBjaGVja1xuICAgIClgQSBbU3ltYm9sLnRvU3RyaW5nVGFnXS1uYW1lZCBwcm9wZXJ0eSBtdXN0IGJlIGEgc3RyaW5nOiAke3RhZ1JlY29yZH1gKSAmJiBjaGVja1Byb3RvKHRhZ1JlY29yZCwgZ2V0UHJvdG90eXBlT2YyKHRhZ1JlY29yZCksIGNoZWNrKTtcbiAgfTtcbiAgcmV0dXJuIGhhcmRlbihjaGVja1RhZ1JlY29yZDIpO1xufTtcbnZhciBjaGVja1RhZ1JlY29yZCA9IG1ha2VDaGVja1RhZ1JlY29yZChcbiAgKHZhbCwgcHJvdG8sIGNoZWNrKSA9PiBwcm90byA9PT0gb2JqZWN0UHJvdG90eXBlIHx8ICEhY2hlY2sgJiYgY2hlY2soZmFsc2UsIHJlZGFjdGVkYEEgdGFnUmVjb3JkIG11c3QgaW5oZXJpdCBmcm9tIE9iamVjdC5wcm90b3R5cGU6ICR7dmFsfWApXG4pO1xuaGFyZGVuKGNoZWNrVGFnUmVjb3JkKTtcbnZhciBjaGVja0Z1bmN0aW9uVGFnUmVjb3JkID0gbWFrZUNoZWNrVGFnUmVjb3JkKFxuICAodmFsLCBwcm90bywgY2hlY2spID0+IHByb3RvID09PSBmdW5jdGlvblByb3RvdHlwZSB8fCBwcm90byAhPT0gbnVsbCAmJiBnZXRQcm90b3R5cGVPZjIocHJvdG8pID09PSBmdW5jdGlvblByb3RvdHlwZSB8fCAhIWNoZWNrICYmIGNoZWNrKFxuICAgIGZhbHNlLFxuICAgIHJlZGFjdGVkYEZvciBmdW5jdGlvbnMsIGEgdGFnUmVjb3JkIG11c3QgaW5oZXJpdCBmcm9tIEZ1bmN0aW9uLnByb3RvdHlwZTogJHt2YWx9YFxuICApXG4pO1xuaGFyZGVuKGNoZWNrRnVuY3Rpb25UYWdSZWNvcmQpO1xuXG4vL1xudmFyIHsgb3duS2V5czogb3duS2V5czIgfSA9IFJlZmxlY3Q7XG52YXIgeyBpc0FycmF5OiBpc0FycmF5MiB9ID0gQXJyYXk7XG52YXIge1xuICBnZXRQcm90b3R5cGVPZjogZ2V0UHJvdG90eXBlT2YzLFxuICBpc0Zyb3plbjogaXNGcm96ZW4yLFxuICBwcm90b3R5cGU6IG9iamVjdFByb3RvdHlwZTIsXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMyXG59ID0gT2JqZWN0O1xudmFyIGNoZWNrSWZhY2UgPSAoaWZhY2UsIGNoZWNrKSA9PiB7XG4gIHJldHVybiAoXG4gICAgLy9cbiAgICAodHlwZW9mIGlmYWNlID09PSBcInN0cmluZ1wiIHx8ICEhY2hlY2sgJiYgQ1goXG4gICAgICBjaGVja1xuICAgIClgRm9yIG5vdywgaW50ZXJmYWNlICR7aWZhY2V9IG11c3QgYmUgYSBzdHJpbmc7IHVuaW1wbGVtZW50ZWRgKSAmJiAoaWZhY2UgPT09IFwiUmVtb3RhYmxlXCIgfHwgaWZhY2Uuc3RhcnRzV2l0aChcIkFsbGVnZWQ6IFwiKSB8fCBpZmFjZS5zdGFydHNXaXRoKFwiRGVidWdOYW1lOiBcIikgfHwgISFjaGVjayAmJiBDWChjaGVjaylgRm9yIG5vdywgaWZhY2UgJHtxdW90ZShcbiAgICAgIGlmYWNlXG4gICAgKX0gbXVzdCBiZSBcIlJlbW90YWJsZVwiIG9yIGJlZ2luIHdpdGggXCJBbGxlZ2VkOiBcIiBvciBcIkRlYnVnTmFtZTogXCI7IHVuaW1wbGVtZW50ZWRgKVxuICApO1xufTtcbnZhciBhc3NlcnRJZmFjZSA9IChpZmFjZSkgPT4gY2hlY2tJZmFjZShpZmFjZSwgYXNzZXJ0Q2hlY2tlcik7XG5oYXJkZW4oYXNzZXJ0SWZhY2UpO1xudmFyIGNoZWNrUmVtb3RhYmxlUHJvdG9PZiA9IChvcmlnaW5hbCwgY2hlY2spID0+IHtcbiAgaXNPYmplY3QyKG9yaWdpbmFsKSB8fCB0aHJvd1JlZGFjdGVkYFJlbW90YWJsZXMgbXVzdCBiZSBvYmplY3RzIG9yIGZ1bmN0aW9uczogJHtvcmlnaW5hbH1gO1xuICBjb25zdCBwcm90byA9IGdldFByb3RvdHlwZU9mMyhvcmlnaW5hbCk7XG4gIGlmIChwcm90byA9PT0gb2JqZWN0UHJvdG90eXBlMiB8fCBwcm90byA9PT0gbnVsbCB8fCBwcm90byA9PT0gRnVuY3Rpb24ucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuICEhY2hlY2sgJiYgQ1goY2hlY2spYFJlbW90YWJsZXMgbXVzdCBiZSBleHBsaWNpdGx5IGRlY2xhcmVkOiAke3F1b3RlKG9yaWdpbmFsKX1gO1xuICB9XG4gIGlmICh0eXBlb2Ygb3JpZ2luYWwgPT09IFwib2JqZWN0XCIpIHtcbiAgICBjb25zdCBwcm90b1Byb3RvID0gZ2V0UHJvdG90eXBlT2YzKHByb3RvKTtcbiAgICBpZiAocHJvdG9Qcm90byAhPT0gb2JqZWN0UHJvdG90eXBlMiAmJiBwcm90b1Byb3RvICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gY2hlY2tSZW1vdGFibGUocHJvdG8sIGNoZWNrKTtcbiAgICB9XG4gICAgaWYgKCFjaGVja1RhZ1JlY29yZChwcm90bywgXCJyZW1vdGFibGVcIiwgY2hlY2spKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBvcmlnaW5hbCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgaWYgKCFjaGVja0Z1bmN0aW9uVGFnUmVjb3JkKHByb3RvLCBcInJlbW90YWJsZVwiLCBjaGVjaykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgY29uc3QgcGFzc1N0eWxlS2V5ID0gKFxuICAgIC8qICAgICAgICAgICAgICAgICAgKi9cbiAgICBQQVNTX1NUWUxFXG4gICk7XG4gIGNvbnN0IHRhZ0tleSA9IChcbiAgICAvKiAgICAgICAgICAgICAgICAgICovXG4gICAgU3ltYm9sLnRvU3RyaW5nVGFnXG4gICk7XG4gIGNvbnN0IHtcbiAgICAvL1xuICAgIFtcbiAgICAgIC8qICAgICAgICAgICAgICAgICAqL1xuICAgICAgcGFzc1N0eWxlS2V5XG4gICAgXTogX3Bhc3NTdHlsZURlc2MsXG4gICAgW1xuICAgICAgLyogICAgICAgICAgICAgICAgICovXG4gICAgICB0YWdLZXlcbiAgICBdOiB7IHZhbHVlOiBpZmFjZSB9LFxuICAgIC4uLnJlc3REZXNjc1xuICB9ID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczIocHJvdG8pO1xuICByZXR1cm4gKG93bktleXMyKHJlc3REZXNjcykubGVuZ3RoID09PSAwIHx8ICEhY2hlY2sgJiYgQ1goXG4gICAgY2hlY2tcbiAgKWBVbmV4cGVjdGVkIHByb3BlcnRpZXMgb24gUmVtb3RhYmxlIFByb3RvICR7b3duS2V5czIocmVzdERlc2NzKX1gKSAmJiBjaGVja0lmYWNlKGlmYWNlLCBjaGVjayk7XG59O1xudmFyIGNvbmZpcm1lZFJlbW90YWJsZXMgPSAvKiAgICAgICAgICAgKi8gbmV3IFdlYWtTZXQoKTtcbnZhciBjaGVja1JlbW90YWJsZSA9ICh2YWwsIGNoZWNrKSA9PiB7XG4gIGlmIChjb25maXJtZWRSZW1vdGFibGVzLmhhcyh2YWwpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKCFpc0Zyb3plbjIodmFsKSkge1xuICAgIHJldHVybiAhIWNoZWNrICYmIENYKGNoZWNrKWBjYW5ub3Qgc2VyaWFsaXplIG5vbi1mcm96ZW4gb2JqZWN0cyBsaWtlICR7dmFsfWA7XG4gIH1cbiAgaWYgKCFSZW1vdGFibGVIZWxwZXIuY2FuQmVWYWxpZCh2YWwsIGNoZWNrKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSBjaGVja1JlbW90YWJsZVByb3RvT2YodmFsLCBjaGVjayk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICBjb25maXJtZWRSZW1vdGFibGVzLmFkZCh2YWwpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xudmFyIGdldEludGVyZmFjZU9mID0gKHZhbCkgPT4ge1xuICBpZiAoIWlzT2JqZWN0Mih2YWwpIHx8IHZhbFtQQVNTX1NUWUxFXSAhPT0gXCJyZW1vdGFibGVcIiB8fCAhY2hlY2tSZW1vdGFibGUodmFsKSkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgcmV0dXJuIGdldFRhZyh2YWwpO1xufTtcbmhhcmRlbihnZXRJbnRlcmZhY2VPZik7XG52YXIgUmVtb3RhYmxlSGVscGVyID0gaGFyZGVuKHtcbiAgc3R5bGVOYW1lOiBcInJlbW90YWJsZVwiLFxuICBjYW5CZVZhbGlkOiAoY2FuZGlkYXRlLCBjaGVjayA9IHZvaWQgMCkgPT4ge1xuICAgIGNvbnN0IHZhbGlkVHlwZSA9IChpc09iamVjdDIoY2FuZGlkYXRlKSB8fCAhIWNoZWNrICYmIENYKGNoZWNrKWBjYW5ub3Qgc2VyaWFsaXplIG5vbi1vYmplY3RzIGFzIFJlbW90YWJsZSAke2NhbmRpZGF0ZX1gKSAmJiAoIWlzQXJyYXkyKGNhbmRpZGF0ZSkgfHwgISFjaGVjayAmJiBDWChjaGVjaylgY2Fubm90IHNlcmlhbGl6ZSBhcnJheXMgYXMgUmVtb3RhYmxlICR7Y2FuZGlkYXRlfWApO1xuICAgIGlmICghdmFsaWRUeXBlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGRlc2NzID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczIoY2FuZGlkYXRlKTtcbiAgICBpZiAodHlwZW9mIGNhbmRpZGF0ZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIG93bktleXMyKGRlc2NzKS5ldmVyeSgoa2V5KSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgLy9cbiAgICAgICAgICAoaGFzT3duUHJvcGVydHlPZihkZXNjc1tcbiAgICAgICAgICAgIC8qICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAga2V5XG4gICAgICAgICAgXSwgXCJ2YWx1ZVwiKSB8fCAhIWNoZWNrICYmIENYKGNoZWNrKWBjYW5ub3Qgc2VyaWFsaXplIFJlbW90YWJsZXMgd2l0aCBhY2Nlc3NvcnMgbGlrZSAke3F1b3RlKFxuICAgICAgICAgICAgU3RyaW5nKGtleSlcbiAgICAgICAgICApfSBpbiAke2NhbmRpZGF0ZX1gKSAmJiAoa2V5ID09PSBTeW1ib2wudG9TdHJpbmdUYWcgJiYgY2hlY2tJZmFjZShjYW5kaWRhdGVba2V5XSwgY2hlY2spIHx8IChjYW5CZU1ldGhvZChjYW5kaWRhdGVba2V5XSkgfHwgISFjaGVjayAmJiBDWChjaGVjaylgY2Fubm90IHNlcmlhbGl6ZSBSZW1vdGFibGVzIHdpdGggbm9uLW1ldGhvZHMgbGlrZSAke3F1b3RlKFxuICAgICAgICAgICAgU3RyaW5nKGtleSlcbiAgICAgICAgICApfSBpbiAke2NhbmRpZGF0ZX1gKSAmJiAoa2V5ICE9PSBQQVNTX1NUWUxFIHx8ICEhY2hlY2sgJiYgQ1goY2hlY2spYEEgcGFzcy1ieS1yZW1vdGUgY2Fubm90IHNoYWRvdyAke3F1b3RlKFBBU1NfU1RZTEUpfWApKVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY2FuZGlkYXRlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbmFtZTogbmFtZURlc2MsXG4gICAgICAgIGxlbmd0aDogbGVuZ3RoRGVzYyxcbiAgICAgICAgLy9cbiAgICAgICAgW1N5bWJvbC50b1N0cmluZ1RhZ106IHRvU3RyaW5nVGFnRGVzYyxcbiAgICAgICAgLi4ucmVzdERlc2NzXG4gICAgICB9ID0gZGVzY3M7XG4gICAgICBjb25zdCByZXN0S2V5cyA9IG93bktleXMyKHJlc3REZXNjcyk7XG4gICAgICByZXR1cm4gKG5hbWVEZXNjICYmIHR5cGVvZiBuYW1lRGVzYy52YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCAhIWNoZWNrICYmIENYKGNoZWNrKWBGYXIgZnVuY3Rpb24gbmFtZSBtdXN0IGJlIGEgc3RyaW5nLCBpbiAke2NhbmRpZGF0ZX1gKSAmJiAobGVuZ3RoRGVzYyAmJiB0eXBlb2YgbGVuZ3RoRGVzYy52YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCAhIWNoZWNrICYmIENYKFxuICAgICAgICBjaGVja1xuICAgICAgKWBGYXIgZnVuY3Rpb24gbGVuZ3RoIG11c3QgYmUgYSBudW1iZXIsIGluICR7Y2FuZGlkYXRlfWApICYmICh0b1N0cmluZ1RhZ0Rlc2MgPT09IHZvaWQgMCB8fCAodHlwZW9mIHRvU3RyaW5nVGFnRGVzYy52YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCAhIWNoZWNrICYmIENYKFxuICAgICAgICBjaGVja1xuICAgICAgKWBGYXIgZnVuY3Rpb24gQEB0b1N0cmluZ1RhZyBtdXN0IGJlIGEgc3RyaW5nLCBpbiAke2NhbmRpZGF0ZX1gKSAmJiBjaGVja0lmYWNlKHRvU3RyaW5nVGFnRGVzYy52YWx1ZSwgY2hlY2spKSAmJiAocmVzdEtleXMubGVuZ3RoID09PSAwIHx8ICEhY2hlY2sgJiYgQ1goXG4gICAgICAgIGNoZWNrXG4gICAgICApYEZhciBmdW5jdGlvbnMgdW5leHBlY3RlZCBwcm9wZXJ0aWVzIGJlc2lkZXMgLm5hbWUgYW5kIC5sZW5ndGggJHtyZXN0S2V5c31gKTtcbiAgICB9XG4gICAgcmV0dXJuICEhY2hlY2sgJiYgQ1goY2hlY2spYHVucmVjb2duaXplZCB0eXBlb2YgJHtjYW5kaWRhdGV9YDtcbiAgfSxcbiAgYXNzZXJ0UmVzdFZhbGlkOiAoY2FuZGlkYXRlKSA9PiBjaGVja1JlbW90YWJsZShjYW5kaWRhdGUsIGFzc2VydENoZWNrZXIpLFxuICBldmVyeTogKF9wYXNzYWJsZSwgX2ZuKSA9PiB0cnVlXG59KTtcblxuLy9cbnZhciB7IHByb3RvdHlwZTogZnVuY3Rpb25Qcm90b3R5cGUyIH0gPSBGdW5jdGlvbjtcbnZhciB7XG4gIGdldFByb3RvdHlwZU9mOiBnZXRQcm90b3R5cGVPZjQsXG4gIHNldFByb3RvdHlwZU9mLFxuICBjcmVhdGUsXG4gIGlzRnJvemVuOiBpc0Zyb3plbjMsXG4gIHByb3RvdHlwZTogb2JqZWN0UHJvdG90eXBlM1xufSA9IE9iamVjdDtcbnZhciBtYWtlUmVtb3RhYmxlUHJvdG8gPSAocmVtb3RhYmxlLCBpZmFjZSkgPT4ge1xuICBsZXQgb2xkUHJvdG8gPSBnZXRQcm90b3R5cGVPZjQocmVtb3RhYmxlKTtcbiAgaWYgKHR5cGVvZiByZW1vdGFibGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICBpZiAob2xkUHJvdG8gPT09IG51bGwpIHtcbiAgICAgIG9sZFByb3RvID0gb2JqZWN0UHJvdG90eXBlMztcbiAgICB9XG4gICAgb2xkUHJvdG8gPT09IG9iamVjdFByb3RvdHlwZTMgfHwgdGhyb3dSZWRhY3RlZGBGb3Igbm93LCByZW1vdGFibGVzIGNhbm5vdCBpbmhlcml0IGZyb20gYW55dGhpbmcgdW51c3VhbCwgaW4gJHtyZW1vdGFibGV9YDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcmVtb3RhYmxlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBvbGRQcm90byAhPT0gbnVsbCB8fCB0aHJvd1JlZGFjdGVkYE9yaWdpbmFsIGZ1bmN0aW9uIG11c3Qgbm90IGluaGVyaXQgZnJvbSBudWxsOiAke3JlbW90YWJsZX1gO1xuICAgIG9sZFByb3RvID09PSBmdW5jdGlvblByb3RvdHlwZTIgfHwgZ2V0UHJvdG90eXBlT2Y0KG9sZFByb3RvKSA9PT0gZnVuY3Rpb25Qcm90b3R5cGUyIHx8IHRocm93UmVkYWN0ZWRgRmFyIGZ1bmN0aW9ucyBtdXN0IG9yaWdpbmFsbHkgaW5oZXJpdCBmcm9tIEZ1bmN0aW9uLnByb3RvdHlwZSwgaW4gJHtyZW1vdGFibGV9YDtcbiAgfSBlbHNlIHtcbiAgICB0aHJvd1JlZGFjdGVkYHVucmVjb2duaXplZCB0eXBlb2YgJHtyZW1vdGFibGV9YDtcbiAgfVxuICByZXR1cm4gaGFyZGVuKFxuICAgIGNyZWF0ZShvbGRQcm90bywge1xuICAgICAgW1BBU1NfU1RZTEVdOiB7IHZhbHVlOiBcInJlbW90YWJsZVwiIH0sXG4gICAgICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogeyB2YWx1ZTogaWZhY2UgfVxuICAgIH0pXG4gICk7XG59O1xudmFyIGFzc2VydENhbkJlUmVtb3RhYmxlID0gKGNhbmRpZGF0ZSkgPT4gUmVtb3RhYmxlSGVscGVyLmNhbkJlVmFsaWQoY2FuZGlkYXRlLCBhc3NlcnRDaGVja2VyKTtcbnZhciBSZW1vdGFibGUgPSAoaWZhY2UgPSBcIlJlbW90YWJsZVwiLCBwcm9wcyA9IHZvaWQgMCwgcmVtb3RhYmxlID0gKFxuICAvKiAgICAgICAgICAgICovXG4gIHt9XG4pKSA9PiB7XG4gIGFzc2VydElmYWNlKGlmYWNlKTtcbiAgYXNzZXJ0KGlmYWNlKTtcbiAgcHJvcHMgPT09IHZvaWQgMCB8fCB0aHJvd1JlZGFjdGVkYFJlbW90YWJsZSBwcm9wcyBub3QgeWV0IGltcGxlbWVudGVkICR7cHJvcHN9YDtcbiAgYXNzZXJ0Q2FuQmVSZW1vdGFibGUocmVtb3RhYmxlKTtcbiAgIShQQVNTX1NUWUxFIGluIHJlbW90YWJsZSkgfHwgdGhyb3dSZWRhY3RlZGBSZW1vdGFibGUgJHtyZW1vdGFibGV9IGlzIGFscmVhZHkgbWFya2VkIGFzIGEgJHtxdW90ZShcbiAgICByZW1vdGFibGVbUEFTU19TVFlMRV1cbiAgKX1gO1xuICBoYXJkZW4uaXNGYWtlIHx8IC8vXG4gICFpc0Zyb3plbjMocmVtb3RhYmxlKSB8fCB0aHJvd1JlZGFjdGVkYFJlbW90YWJsZSAke3JlbW90YWJsZX0gaXMgYWxyZWFkeSBmcm96ZW5gO1xuICBjb25zdCByZW1vdGFibGVQcm90byA9IG1ha2VSZW1vdGFibGVQcm90byhyZW1vdGFibGUsIGlmYWNlKTtcbiAgY29uc3QgbXV0YXRlSGFyZGVuQW5kQ2hlY2sgPSAodGFyZ2V0KSA9PiB7XG4gICAgc2V0UHJvdG90eXBlT2YodGFyZ2V0LCByZW1vdGFibGVQcm90byk7XG4gICAgaGFyZGVuKHRhcmdldCk7XG4gICAgYXNzZXJ0Q2FuQmVSZW1vdGFibGUodGFyZ2V0KTtcbiAgfTtcbiAgbXV0YXRlSGFyZGVuQW5kQ2hlY2soe30pO1xuICBtdXRhdGVIYXJkZW5BbmRDaGVjayhyZW1vdGFibGUpO1xuICBhc3NlcnQoaWZhY2UgIT09IHZvaWQgMCk7XG4gIHJldHVybiAoXG4gICAgLyogICAgICAgICAgICAgICovXG4gICAgcmVtb3RhYmxlXG4gICk7XG59O1xuaGFyZGVuKFJlbW90YWJsZSk7XG52YXIgR0VUX01FVEhPRF9OQU1FUyA9IFwiX19nZXRNZXRob2ROYW1lc19fXCI7XG52YXIgZ2V0TWV0aG9kTmFtZXNNZXRob2QgPSBoYXJkZW4oe1xuICBbR0VUX01FVEhPRF9OQU1FU10oKSB7XG4gICAgcmV0dXJuIGdldE1ldGhvZE5hbWVzKHRoaXMpO1xuICB9XG59KVtHRVRfTUVUSE9EX05BTUVTXTtcbnZhciBnZXRNZXRob2ROYW1lc0Rlc2NyaXB0b3IgPSBoYXJkZW4oe1xuICB2YWx1ZTogZ2V0TWV0aG9kTmFtZXNNZXRob2QsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBjb25maWd1cmFibGU6IGZhbHNlLFxuICB3cml0YWJsZTogZmFsc2Vcbn0pO1xudmFyIEZhciA9IChmYXJOYW1lLCByZW1vdGFibGUgPSB2b2lkIDApID0+IHtcbiAgY29uc3QgcjUgPSByZW1vdGFibGUgPT09IHZvaWQgMCA/IChcbiAgICAvKiAgICAgICAgICAgICovXG4gICAge31cbiAgKSA6IHJlbW90YWJsZTtcbiAgaWYgKHR5cGVvZiByNSA9PT0gXCJvYmplY3RcIiAmJiAhKEdFVF9NRVRIT0RfTkFNRVMgaW4gcjUpKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHI1LCBHRVRfTUVUSE9EX05BTUVTLCBnZXRNZXRob2ROYW1lc0Rlc2NyaXB0b3IpO1xuICB9XG4gIHJldHVybiBSZW1vdGFibGUoYEFsbGVnZWQ6ICR7ZmFyTmFtZX1gLCB2b2lkIDAsIHI1KTtcbn07XG5oYXJkZW4oRmFyKTtcbnZhciBUb0ZhckZ1bmN0aW9uID0gKGZhck5hbWUsIGZ1bmMpID0+IHtcbiAgaWYgKGdldEludGVyZmFjZU9mKGZ1bmMpICE9PSB2b2lkIDApIHtcbiAgICByZXR1cm4gZnVuYztcbiAgfVxuICByZXR1cm4gRmFyKGZhck5hbWUsICguLi5hcmdzKSA9PiBmdW5jKC4uLmFyZ3MpKTtcbn07XG5oYXJkZW4oVG9GYXJGdW5jdGlvbik7XG5cbi8vXG52YXIgbWFwSXRlcmFibGUgPSAoYmFzZUl0ZXJhYmxlLCBmdW5jKSA9PiAoXG4gIC8qICAgICAgICAgICAgICAgICAgICAgICovXG4gIEZhcihcIm1hcHBlZCBpdGVyYWJsZVwiLCB7XG4gICAgW1N5bWJvbC5pdGVyYXRvcl06ICgpID0+IHtcbiAgICAgIGNvbnN0IGJhc2VJdGVyYXRvciA9IGJhc2VJdGVyYWJsZVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICByZXR1cm4gRmFyKFwibWFwcGVkIGl0ZXJhdG9yXCIsIHtcbiAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgdmFsdWU6IGJhc2VWYWx1ZSwgZG9uZSB9ID0gYmFzZUl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGRvbmUgPyBiYXNlVmFsdWUgOiBmdW5jKGJhc2VWYWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbih7IHZhbHVlLCBkb25lIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pXG4pO1xuaGFyZGVuKG1hcEl0ZXJhYmxlKTtcbnZhciBmaWx0ZXJJdGVyYWJsZSA9IChiYXNlSXRlcmFibGUsIHByZWQpID0+IChcbiAgLyogICAgICAgICAgICAgICAgICAgICAgKi9cbiAgRmFyKFwiZmlsdGVyZWQgaXRlcmFibGVcIiwge1xuICAgIFtTeW1ib2wuaXRlcmF0b3JdOiAoKSA9PiB7XG4gICAgICBjb25zdCBiYXNlSXRlcmF0b3IgPSBiYXNlSXRlcmFibGVbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgcmV0dXJuIEZhcihcImZpbHRlcmVkIGl0ZXJhdG9yXCIsIHtcbiAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgIGZvciAoOyA7ICkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYmFzZUl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIGNvbnN0IHsgdmFsdWUsIGRvbmUgfSA9IHJlc3VsdDtcbiAgICAgICAgICAgIGlmIChkb25lIHx8IHByZWQodmFsdWUpKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pXG4pO1xuaGFyZGVuKGZpbHRlckl0ZXJhYmxlKTtcblxuLy9cbnZhciB7IGdldFByb3RvdHlwZU9mOiBnZXRQcm90b3R5cGVPZjUsIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMzLCBoYXNPd246IGhhc093bjIsIGVudHJpZXM6IGVudHJpZXMyIH0gPSBPYmplY3Q7XG52YXIgZXJyb3JDb25zdHJ1Y3RvcnMgPSAvKiAgICAgICAgICAgKi8gbmV3IE1hcChcbiAgLy9cbiAgLy9cbiAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gIFtcbiAgICBbXCJFcnJvclwiLCBFcnJvcl0sXG4gICAgW1wiRXZhbEVycm9yXCIsIEV2YWxFcnJvcl0sXG4gICAgW1wiUmFuZ2VFcnJvclwiLCBSYW5nZUVycm9yXSxcbiAgICBbXCJSZWZlcmVuY2VFcnJvclwiLCBSZWZlcmVuY2VFcnJvcl0sXG4gICAgW1wiU3ludGF4RXJyb3JcIiwgU3ludGF4RXJyb3JdLFxuICAgIFtcIlR5cGVFcnJvclwiLCBUeXBlRXJyb3JdLFxuICAgIFtcIlVSSUVycm9yXCIsIFVSSUVycm9yXVxuICAgIC8vXG4gICAgLy9cbiAgICAvL1xuICAgIC8vXG4gIF1cbik7XG5pZiAodHlwZW9mIEFnZ3JlZ2F0ZUVycm9yICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGVycm9yQ29uc3RydWN0b3JzLnNldChcIkFnZ3JlZ2F0ZUVycm9yXCIsIEFnZ3JlZ2F0ZUVycm9yKTtcbn1cbnZhciBnZXRFcnJvckNvbnN0cnVjdG9yID0gKG5hbWUpID0+IGVycm9yQ29uc3RydWN0b3JzLmdldChuYW1lKTtcbmhhcmRlbihnZXRFcnJvckNvbnN0cnVjdG9yKTtcbnZhciBjaGVja0Vycm9yTGlrZSA9IChjYW5kaWRhdGUsIGNoZWNrID0gdm9pZCAwKSA9PiB7XG4gIHJldHVybiBjYW5kaWRhdGUgaW5zdGFuY2VvZiBFcnJvciB8fCAhIWNoZWNrICYmIENYKGNoZWNrKWBFcnJvciBleHBlY3RlZDogJHtjYW5kaWRhdGV9YDtcbn07XG5oYXJkZW4oY2hlY2tFcnJvckxpa2UpO1xudmFyIGlzRXJyb3JMaWtlID0gKGNhbmRpZGF0ZSkgPT4gY2hlY2tFcnJvckxpa2UoY2FuZGlkYXRlKTtcbmhhcmRlbihpc0Vycm9yTGlrZSk7XG52YXIgY2hlY2tSZWN1cnNpdmVseVBhc3NhYmxlRXJyb3JQcm9wZXJ0eURlc2MgPSAocHJvcE5hbWUsIGRlc2MsIHBhc3NTdHlsZU9mUmVjdXIsIGNoZWNrID0gdm9pZCAwKSA9PiB7XG4gIGlmIChkZXNjLmVudW1lcmFibGUpIHtcbiAgICByZXR1cm4gISFjaGVjayAmJiBDWChjaGVjaylgUGFzc2FibGUgRXJyb3IgJHtxdW90ZShcbiAgICAgIHByb3BOYW1lXG4gICAgKX0gb3duIHByb3BlcnR5IG11c3Qgbm90IGJlIGVudW1lcmFibGU6ICR7ZGVzY31gO1xuICB9XG4gIGlmICghaGFzT3duMihkZXNjLCBcInZhbHVlXCIpKSB7XG4gICAgcmV0dXJuICEhY2hlY2sgJiYgQ1goY2hlY2spYFBhc3NhYmxlIEVycm9yICR7cXVvdGUoXG4gICAgICBwcm9wTmFtZVxuICAgICl9IG93biBwcm9wZXJ0eSBtdXN0IGJlIGEgZGF0YSBwcm9wZXJ0eTogJHtkZXNjfWA7XG4gIH1cbiAgY29uc3QgeyB2YWx1ZSB9ID0gZGVzYztcbiAgc3dpdGNoIChwcm9wTmFtZSkge1xuICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgY2FzZSBcInN0YWNrXCI6IHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgfHwgISFjaGVjayAmJiBDWChjaGVjaylgUGFzc2FibGUgRXJyb3IgJHtxdW90ZShcbiAgICAgICAgcHJvcE5hbWVcbiAgICAgICl9IG93biBwcm9wZXJ0eSBtdXN0IGJlIGEgc3RyaW5nOiAke3ZhbHVlfWA7XG4gICAgfVxuICAgIGNhc2UgXCJjYXVzZVwiOiB7XG4gICAgICByZXR1cm4gY2hlY2tSZWN1cnNpdmVseVBhc3NhYmxlRXJyb3IodmFsdWUsIHBhc3NTdHlsZU9mUmVjdXIsIGNoZWNrKTtcbiAgICB9XG4gICAgY2FzZSBcImVycm9yc1wiOiB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpIHx8IHBhc3NTdHlsZU9mUmVjdXIodmFsdWUpICE9PSBcImNvcHlBcnJheVwiKSB7XG4gICAgICAgIHJldHVybiAhIWNoZWNrICYmIENYKGNoZWNrKWBQYXNzYWJsZSBFcnJvciAke3F1b3RlKFxuICAgICAgICAgIHByb3BOYW1lXG4gICAgICAgICl9IG93biBwcm9wZXJ0eSBtdXN0IGJlIGEgY29weUFycmF5OiAke3ZhbHVlfWA7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUuZXZlcnkoXG4gICAgICAgIChlcnIpID0+IChcbiAgICAgICAgICAvL1xuICAgICAgICAgIGNoZWNrUmVjdXJzaXZlbHlQYXNzYWJsZUVycm9yKGVyciwgcGFzc1N0eWxlT2ZSZWN1ciwgY2hlY2spXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gISFjaGVjayAmJiBDWChjaGVjaylgUGFzc2FibGUgRXJyb3IgaGFzIGV4dHJhIHVucGFzc2VkIHByb3BlcnR5ICR7cXVvdGUocHJvcE5hbWUpfWA7XG59O1xuaGFyZGVuKGNoZWNrUmVjdXJzaXZlbHlQYXNzYWJsZUVycm9yUHJvcGVydHlEZXNjKTtcbnZhciBjaGVja1JlY3Vyc2l2ZWx5UGFzc2FibGVFcnJvciA9IChjYW5kaWRhdGUsIHBhc3NTdHlsZU9mUmVjdXIsIGNoZWNrID0gdm9pZCAwKSA9PiB7XG4gIGlmICghY2hlY2tFcnJvckxpa2UoY2FuZGlkYXRlLCBjaGVjaykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgcHJvdG8gPSBnZXRQcm90b3R5cGVPZjUoY2FuZGlkYXRlKTtcbiAgY29uc3QgeyBuYW1lIH0gPSBwcm90bztcbiAgY29uc3QgZXJyQ29uc3RydWN0b3IgPSBnZXRFcnJvckNvbnN0cnVjdG9yKG5hbWUpO1xuICBpZiAoZXJyQ29uc3RydWN0b3IgPT09IHZvaWQgMCB8fCBlcnJDb25zdHJ1Y3Rvci5wcm90b3R5cGUgIT09IHByb3RvKSB7XG4gICAgcmV0dXJuICEhY2hlY2sgJiYgQ1goXG4gICAgICBjaGVja1xuICAgIClgUGFzc2FibGUgRXJyb3IgbXVzdCBpbmhlcml0IGZyb20gYW4gZXJyb3IgY2xhc3MgLnByb3RvdHlwZTogJHtjYW5kaWRhdGV9YDtcbiAgfVxuICBjb25zdCBkZXNjcyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMzKGNhbmRpZGF0ZSk7XG4gIGlmICghKFwibWVzc2FnZVwiIGluIGRlc2NzKSkge1xuICAgIHJldHVybiAhIWNoZWNrICYmIENYKFxuICAgICAgY2hlY2tcbiAgICApYFBhc3NhYmxlIEVycm9yIG11c3QgaGF2ZSBhbiBvd24gXCJtZXNzYWdlXCIgc3RyaW5nIHByb3BlcnR5OiAke2NhbmRpZGF0ZX1gO1xuICB9XG4gIHJldHVybiBlbnRyaWVzMihkZXNjcykuZXZlcnkoXG4gICAgKFtwcm9wTmFtZSwgZGVzY10pID0+IGNoZWNrUmVjdXJzaXZlbHlQYXNzYWJsZUVycm9yUHJvcGVydHlEZXNjKFxuICAgICAgcHJvcE5hbWUsXG4gICAgICBkZXNjLFxuICAgICAgcGFzc1N0eWxlT2ZSZWN1cixcbiAgICAgIGNoZWNrXG4gICAgKVxuICApO1xufTtcbmhhcmRlbihjaGVja1JlY3Vyc2l2ZWx5UGFzc2FibGVFcnJvcik7XG52YXIgRXJyb3JIZWxwZXIgPSBoYXJkZW4oe1xuICBzdHlsZU5hbWU6IFwiZXJyb3JcIixcbiAgY2FuQmVWYWxpZDogY2hlY2tFcnJvckxpa2UsXG4gIGFzc2VydFJlc3RWYWxpZDogKGNhbmRpZGF0ZSwgcGFzc1N0eWxlT2ZSZWN1cikgPT4gY2hlY2tSZWN1cnNpdmVseVBhc3NhYmxlRXJyb3IoY2FuZGlkYXRlLCBwYXNzU3R5bGVPZlJlY3VyLCBhc3NlcnRDaGVja2VyKVxufSk7XG5cbi8vXG52YXIgeyBvd25LZXlzOiBvd25LZXlzMyB9ID0gUmVmbGVjdDtcbnZhciB3ZWxsS25vd25TeW1ib2xOYW1lcyA9IG5ldyBNYXAoXG4gIG93bktleXMzKFN5bWJvbCkuZmlsdGVyKFxuICAgIChuYW1lKSA9PiB0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgU3ltYm9sW25hbWVdID09PSBcInN5bWJvbFwiXG4gICkuZmlsdGVyKChuYW1lKSA9PiB7XG4gICAgIW5hbWUuc3RhcnRzV2l0aChcIkBAXCIpIHx8IHRocm93UmVkYWN0ZWRgRGlkIG5vdCBleHBlY3QgU3ltYm9sIHRvIGhhdmUgYSBzeW1ib2wtdmFsdWVkIHByb3BlcnR5IG5hbWUgc3RhcnRpbmcgd2l0aCBcIkBAXCIgJHtxdW90ZShcbiAgICAgIG5hbWVcbiAgICApfWA7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0pLm1hcCgobmFtZSkgPT4gW1N5bWJvbFtuYW1lXSwgYEBAJHtuYW1lfWBdKVxuKTtcbnZhciBpc1Bhc3NhYmxlU3ltYm9sID0gKHN5bSkgPT4gdHlwZW9mIHN5bSA9PT0gXCJzeW1ib2xcIiAmJiAodHlwZW9mIFN5bWJvbC5rZXlGb3Ioc3ltKSA9PT0gXCJzdHJpbmdcIiB8fCB3ZWxsS25vd25TeW1ib2xOYW1lcy5oYXMoc3ltKSk7XG5oYXJkZW4oaXNQYXNzYWJsZVN5bWJvbCk7XG52YXIgYXNzZXJ0UGFzc2FibGVTeW1ib2wgPSAoc3ltKSA9PiBpc1Bhc3NhYmxlU3ltYm9sKHN5bSkgfHwgdGhyb3dSZWRhY3RlZGBPbmx5IHJlZ2lzdGVyZWQgc3ltYm9scyBvciB3ZWxsLWtub3duIHN5bWJvbHMgYXJlIHBhc3NhYmxlOiAke3F1b3RlKHN5bSl9YDtcbmhhcmRlbihhc3NlcnRQYXNzYWJsZVN5bWJvbCk7XG52YXIgbmFtZUZvclBhc3NhYmxlU3ltYm9sID0gKHN5bSkgPT4ge1xuICBjb25zdCBuYW1lID0gU3ltYm9sLmtleUZvcihzeW0pO1xuICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIHdlbGxLbm93blN5bWJvbE5hbWVzLmdldChzeW0pO1xuICB9XG4gIGlmIChuYW1lLnN0YXJ0c1dpdGgoXCJAQFwiKSkge1xuICAgIHJldHVybiBgQEAke25hbWV9YDtcbiAgfVxuICByZXR1cm4gbmFtZTtcbn07XG5oYXJkZW4obmFtZUZvclBhc3NhYmxlU3ltYm9sKTtcbnZhciBBdEF0UHJlZml4UGF0dGVybiA9IC9eQEAoLiopJC87XG5oYXJkZW4oQXRBdFByZWZpeFBhdHRlcm4pO1xudmFyIHBhc3NhYmxlU3ltYm9sRm9yTmFtZSA9IChuYW1lKSA9PiB7XG4gIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgY29uc3QgbWF0Y2ggPSBBdEF0UHJlZml4UGF0dGVybi5leGVjKG5hbWUpO1xuICBpZiAobWF0Y2gpIHtcbiAgICBjb25zdCBzdWZmaXggPSBtYXRjaFsxXTtcbiAgICBpZiAoc3VmZml4LnN0YXJ0c1dpdGgoXCJAQFwiKSkge1xuICAgICAgcmV0dXJuIFN5bWJvbC5mb3Ioc3VmZml4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc3ltID0gU3ltYm9sW3N1ZmZpeF07XG4gICAgICBpZiAodHlwZW9mIHN5bSA9PT0gXCJzeW1ib2xcIikge1xuICAgICAgICByZXR1cm4gc3ltO1xuICAgICAgfVxuICAgICAgdGhyb3dSZWRhY3RlZGBSZXNlcnZlZCBmb3Igd2VsbCBrbm93biBzeW1ib2wgJHtxdW90ZShzdWZmaXgpfTogJHtxdW90ZShuYW1lKX1gO1xuICAgIH1cbiAgfVxuICByZXR1cm4gU3ltYm9sLmZvcihuYW1lKTtcbn07XG5oYXJkZW4ocGFzc2FibGVTeW1ib2xGb3JOYW1lKTtcblxuLy9cbnZhciBoYXNXZWxsRm9ybWVkU3RyaW5nTWV0aG9kID0gISFTdHJpbmcucHJvdG90eXBlLmlzV2VsbEZvcm1lZDtcbnZhciBpc1dlbGxGb3JtZWRTdHJpbmcgPSBoYXNXZWxsRm9ybWVkU3RyaW5nTWV0aG9kID8gKHN0cikgPT4gdHlwZW9mIHN0ciA9PT0gXCJzdHJpbmdcIiAmJiBzdHIuaXNXZWxsRm9ybWVkKCkgOiAoc3RyKSA9PiB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAoY29uc3QgY2ggb2Ygc3RyKSB7XG4gICAgY29uc3QgY3AgPSAoXG4gICAgICAvKiAgICAgICAgICAgICAgICAgKi9cbiAgICAgIGNoLmNvZGVQb2ludEF0KDApXG4gICAgKTtcbiAgICBpZiAoY3AgPj0gNTUyOTYgJiYgY3AgPD0gNTczNDMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuaGFyZGVuKGlzV2VsbEZvcm1lZFN0cmluZyk7XG52YXIgYXNzZXJ0V2VsbEZvcm1lZFN0cmluZyA9IChzdHIpID0+IHtcbiAgaXNXZWxsRm9ybWVkU3RyaW5nKHN0cikgfHwgdGhyb3dSZWRhY3RlZGBFeHBlY3RlZCB3ZWxsLWZvcm1lZCB1bmljb2RlIHN0cmluZzogJHtzdHJ9YDtcbn07XG5oYXJkZW4oYXNzZXJ0V2VsbEZvcm1lZFN0cmluZyk7XG52YXIgT05MWV9XRUxMX0ZPUk1FRF9TVFJJTkdTX1BBU1NBQkxFID0gZ2V0RW52aXJvbm1lbnRPcHRpb24oXCJPTkxZX1dFTExfRk9STUVEX1NUUklOR1NfUEFTU0FCTEVcIiwgXCJkaXNhYmxlZFwiLCBbXG4gIFwiZW5hYmxlZFwiXG5dKSA9PT0gXCJlbmFibGVkXCI7XG52YXIgYXNzZXJ0UGFzc2FibGVTdHJpbmcgPSAoc3RyKSA9PiB7XG4gIHR5cGVvZiBzdHIgPT09IFwic3RyaW5nXCIgfHwgdGhyb3dSZWRhY3RlZGBFeHBlY3RlZCBzdHJpbmcgJHtzdHJ9YDtcbiAgIU9OTFlfV0VMTF9GT1JNRURfU1RSSU5HU19QQVNTQUJMRSB8fCBhc3NlcnRXZWxsRm9ybWVkU3RyaW5nKHN0cik7XG59O1xuaGFyZGVuKGFzc2VydFBhc3NhYmxlU3RyaW5nKTtcblxuLy9cbnZhciBtYWtlUmVsZWFzaW5nRXhlY3V0b3JLaXQgPSAoKSA9PiB7XG4gIGxldCBpbnRlcm5hbFJlc29sdmU7XG4gIGxldCBpbnRlcm5hbFJlamVjdDtcbiAgY29uc3QgcmVzb2x2ZTIgPSAodmFsdWUpID0+IHtcbiAgICBpZiAoaW50ZXJuYWxSZXNvbHZlKSB7XG4gICAgICBpbnRlcm5hbFJlc29sdmUodmFsdWUpO1xuICAgICAgaW50ZXJuYWxSZXNvbHZlID0gbnVsbDtcbiAgICAgIGludGVybmFsUmVqZWN0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KGludGVybmFsUmVzb2x2ZSA9PT0gbnVsbCk7XG4gICAgfVxuICB9O1xuICBjb25zdCByZWplY3QgPSAocmVhc29uKSA9PiB7XG4gICAgaWYgKGludGVybmFsUmVqZWN0KSB7XG4gICAgICBpbnRlcm5hbFJlamVjdChyZWFzb24pO1xuICAgICAgaW50ZXJuYWxSZXNvbHZlID0gbnVsbDtcbiAgICAgIGludGVybmFsUmVqZWN0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KGludGVybmFsUmVqZWN0ID09PSBudWxsKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGV4ZWN1dG9yID0gKHJlcywgcmVqKSA9PiB7XG4gICAgYXNzZXJ0KGludGVybmFsUmVzb2x2ZSA9PT0gdm9pZCAwICYmIGludGVybmFsUmVqZWN0ID09PSB2b2lkIDApO1xuICAgIGludGVybmFsUmVzb2x2ZSA9IHJlcztcbiAgICBpbnRlcm5hbFJlamVjdCA9IHJlajtcbiAgfTtcbiAgcmV0dXJuIGhhcmRlbih7IHJlc29sdmU6IHJlc29sdmUyLCByZWplY3QsIGV4ZWN1dG9yIH0pO1xufTtcbmhhcmRlbihtYWtlUmVsZWFzaW5nRXhlY3V0b3JLaXQpO1xuXG4vL1xudmFyIGlzT2JqZWN0MyA9ICh2YWx1ZSkgPT4gT2JqZWN0KHZhbHVlKSA9PT0gdmFsdWU7XG52YXIga25vd25Qcm9taXNlcyA9IC8qICAgICAgICAgICAqLyBuZXcgV2Vha01hcCgpO1xudmFyIG1hcmtTZXR0bGVkID0gKHJlY29yZCkgPT4ge1xuICBpZiAoIXJlY29yZCB8fCByZWNvcmQuc2V0dGxlZCkge1xuICAgIHJldHVybiAvKiAgICAgICAgICAgKi8gbmV3IFNldCgpO1xuICB9XG4gIGNvbnN0IHsgZGVmZXJyZWRzIH0gPSByZWNvcmQ7XG4gIE9iamVjdC5hc3NpZ24ocmVjb3JkLCB7XG4gICAgZGVmZXJyZWRzOiB2b2lkIDAsXG4gICAgc2V0dGxlZDogdHJ1ZVxuICB9KTtcbiAgT2JqZWN0LmZyZWV6ZShyZWNvcmQpO1xuICByZXR1cm4gZGVmZXJyZWRzO1xufTtcbnZhciBnZXRNZW1vUmVjb3JkID0gKHZhbHVlKSA9PiB7XG4gIGlmICghaXNPYmplY3QzKHZhbHVlKSkge1xuICAgIHJldHVybiBoYXJkZW4oeyBzZXR0bGVkOiB0cnVlIH0pO1xuICB9XG4gIGxldCByZWNvcmQgPSBrbm93blByb21pc2VzLmdldCh2YWx1ZSk7XG4gIGlmICghcmVjb3JkKSB7XG4gICAgcmVjb3JkID0geyBkZWZlcnJlZHM6IC8qICAgICAgICAgICAqLyBuZXcgU2V0KCksIHNldHRsZWQ6IGZhbHNlIH07XG4gICAga25vd25Qcm9taXNlcy5zZXQodmFsdWUsIHJlY29yZCk7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKFxuICAgICAgKHZhbCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IHsgcmVzb2x2ZTogcmVzb2x2ZTIgfSBvZiBtYXJrU2V0dGxlZChyZWNvcmQpKSB7XG4gICAgICAgICAgcmVzb2x2ZTIodmFsKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIChlcnIpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCB7IHJlamVjdCB9IG9mIG1hcmtTZXR0bGVkKHJlY29yZCkpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlY29yZDtcbn07XG52YXIgeyByYWNlIH0gPSB7XG4gIC8qXG5cblxuXG5cblxuXG5cblxuXG5cblxuICAgKi9cbiAgcmFjZSh2YWx1ZXM4KSB7XG4gICAgbGV0IGRlZmVycmVkO1xuICAgIGNvbnN0IGNhY2hlZFZhbHVlcyA9IFtdO1xuICAgIGNvbnN0IEMgPSB0aGlzO1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBDKChyZXNvbHZlMiwgcmVqZWN0KSA9PiB7XG4gICAgICBkZWZlcnJlZCA9IHsgcmVzb2x2ZTogcmVzb2x2ZTIsIHJlamVjdCB9O1xuICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXM4KSB7XG4gICAgICAgIGNhY2hlZFZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgY29uc3QgeyBzZXR0bGVkLCBkZWZlcnJlZHMgfSA9IGdldE1lbW9SZWNvcmQodmFsdWUpO1xuICAgICAgICBpZiAoc2V0dGxlZCkge1xuICAgICAgICAgIEMucmVzb2x2ZSh2YWx1ZSkudGhlbihyZXNvbHZlMiwgcmVqZWN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWZlcnJlZHMuYWRkKGRlZmVycmVkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQuZmluYWxseSgoKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIGNhY2hlZFZhbHVlcykge1xuICAgICAgICBjb25zdCB7IGRlZmVycmVkcyB9ID0gZ2V0TWVtb1JlY29yZCh2YWx1ZSk7XG4gICAgICAgIGlmIChkZWZlcnJlZHMpIHtcbiAgICAgICAgICBkZWZlcnJlZHMuZGVsZXRlKGRlZmVycmVkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vL1xuZnVuY3Rpb24gaXNQcm9taXNlKG1heWJlUHJvbWlzZSkge1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1heWJlUHJvbWlzZSkgPT09IG1heWJlUHJvbWlzZTtcbn1cbmhhcmRlbihpc1Byb21pc2UpO1xuXG4vL1xudmFyIEJlc3RQaXBlbGluYWJsZVByb21pc2UgPSBnbG9iYWxUaGlzLkhhbmRsZWRQcm9taXNlIHx8IFByb21pc2U7XG5mdW5jdGlvbiBtYWtlUHJvbWlzZUtpdCgpIHtcbiAgY29uc3QgeyByZXNvbHZlOiByZXNvbHZlMiwgcmVqZWN0LCBleGVjdXRvciB9ID0gbWFrZVJlbGVhc2luZ0V4ZWN1dG9yS2l0KCk7XG4gIGNvbnN0IHByb21pc2UgPSBuZXcgQmVzdFBpcGVsaW5hYmxlUHJvbWlzZShleGVjdXRvcik7XG4gIHJldHVybiBoYXJkZW4oeyBwcm9taXNlLCByZXNvbHZlOiByZXNvbHZlMiwgcmVqZWN0IH0pO1xufVxuaGFyZGVuKG1ha2VQcm9taXNlS2l0KTtcbmZ1bmN0aW9uIHJhY2VQcm9taXNlcyh2YWx1ZXM4KSB7XG4gIHJldHVybiBoYXJkZW4ocmFjZS5jYWxsKEJlc3RQaXBlbGluYWJsZVByb21pc2UsIHZhbHVlczgpKTtcbn1cbmhhcmRlbihyYWNlUHJvbWlzZXMpO1xuXG4vL1xudmFyIHsgZ2V0UHJvdG90eXBlT2Y6IGdldFByb3RvdHlwZU9mNiB9ID0gT2JqZWN0O1xudmFyIHsgb3duS2V5czogb3duS2V5czQgfSA9IFJlZmxlY3Q7XG52YXIgeyBpc0FycmF5OiBpc0FycmF5MywgcHJvdG90eXBlOiBhcnJheVByb3RvdHlwZSB9ID0gQXJyYXk7XG52YXIgQ29weUFycmF5SGVscGVyID0gaGFyZGVuKHtcbiAgc3R5bGVOYW1lOiBcImNvcHlBcnJheVwiLFxuICBjYW5CZVZhbGlkOiAoY2FuZGlkYXRlLCBjaGVjayA9IHZvaWQgMCkgPT4gaXNBcnJheTMoY2FuZGlkYXRlKSB8fCAhIWNoZWNrICYmIGNoZWNrKGZhbHNlLCByZWRhY3RlZGBBcnJheSBleHBlY3RlZDogJHtjYW5kaWRhdGV9YCksXG4gIGFzc2VydFJlc3RWYWxpZDogKGNhbmRpZGF0ZSwgcGFzc1N0eWxlT2ZSZWN1cikgPT4ge1xuICAgIGdldFByb3RvdHlwZU9mNihjYW5kaWRhdGUpID09PSBhcnJheVByb3RvdHlwZSB8fCBhc3NlcnQuZmFpbChyZWRhY3RlZGBNYWxmb3JtZWQgYXJyYXk6ICR7Y2FuZGlkYXRlfWAsIFR5cGVFcnJvcik7XG4gICAgY29uc3QgbGVuID0gKFxuICAgICAgLyogICAgICAgICAgICAgICAgICovXG4gICAgICBnZXRPd25EYXRhRGVzY3JpcHRvcihjYW5kaWRhdGUsIFwibGVuZ3RoXCIsIGZhbHNlLCBhc3NlcnRDaGVja2VyKS52YWx1ZVxuICAgICk7XG4gICAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IGxlbjsgaTMgKz0gMSkge1xuICAgICAgcGFzc1N0eWxlT2ZSZWN1cihcbiAgICAgICAgZ2V0T3duRGF0YURlc2NyaXB0b3IoY2FuZGlkYXRlLCBpMywgdHJ1ZSwgYXNzZXJ0Q2hlY2tlcikudmFsdWVcbiAgICAgICk7XG4gICAgfVxuICAgIG93bktleXM0KGNhbmRpZGF0ZSkubGVuZ3RoID09PSBsZW4gKyAxIHx8IGFzc2VydC5mYWlsKHJlZGFjdGVkYEFycmF5cyBtdXN0IG5vdCBoYXZlIG5vbi1pbmRleGVzOiAke2NhbmRpZGF0ZX1gLCBUeXBlRXJyb3IpO1xuICB9XG59KTtcblxuLy9cbnZhciB7IG93bktleXM6IG93bktleXM1IH0gPSBSZWZsZWN0O1xudmFyIHsgZ2V0UHJvdG90eXBlT2Y6IGdldFByb3RvdHlwZU9mNywgcHJvdG90eXBlOiBvYmplY3RQcm90b3R5cGU0IH0gPSBPYmplY3Q7XG52YXIgY2hlY2tPYmplY3RQcm90b3R5cGUgPSAoY2FuZGlkYXRlLCBjaGVjayA9IHZvaWQgMCkgPT4ge1xuICByZXR1cm4gZ2V0UHJvdG90eXBlT2Y3KGNhbmRpZGF0ZSkgPT09IG9iamVjdFByb3RvdHlwZTQgfHwgISFjaGVjayAmJiBDWChjaGVjaylgUmVjb3JkcyBtdXN0IGluaGVyaXQgZnJvbSBPYmplY3QucHJvdG90eXBlOiAke2NhbmRpZGF0ZX1gO1xufTtcbnZhciBjaGVja1Byb3BlcnR5Q2FuQmVWYWxpZCA9IChjYW5kaWRhdGUsIGtleSwgdmFsdWUsIGNoZWNrID0gdm9pZCAwKSA9PiB7XG4gIHJldHVybiAodHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiB8fCAhIWNoZWNrICYmIENYKFxuICAgIGNoZWNrXG4gIClgUmVjb3JkcyBjYW4gb25seSBoYXZlIHN0cmluZy1uYW1lZCBwcm9wZXJ0aWVzOiAke2NhbmRpZGF0ZX1gKSAmJiAoIWNhbkJlTWV0aG9kKHZhbHVlKSB8fCAhIWNoZWNrICYmIC8vXG4gIENYKFxuICAgIGNoZWNrXG4gIClgUmVjb3JkcyBjYW5ub3QgY29udGFpbiBub24tZmFyIGZ1bmN0aW9ucyBiZWNhdXNlIHRoZXkgbWF5IGJlIG1ldGhvZHMgb2YgYW4gaW1wbGljaXQgUmVtb3RhYmxlOiAke2NhbmRpZGF0ZX1gKTtcbn07XG52YXIgQ29weVJlY29yZEhlbHBlciA9IGhhcmRlbih7XG4gIHN0eWxlTmFtZTogXCJjb3B5UmVjb3JkXCIsXG4gIGNhbkJlVmFsaWQ6IChjYW5kaWRhdGUsIGNoZWNrID0gdm9pZCAwKSA9PiB7XG4gICAgcmV0dXJuIGNoZWNrT2JqZWN0UHJvdG90eXBlKGNhbmRpZGF0ZSwgY2hlY2spICYmIC8vXG4gICAgLy9cbiAgICBvd25LZXlzNShjYW5kaWRhdGUpLmV2ZXJ5KFxuICAgICAgKGtleSkgPT4gY2hlY2tQcm9wZXJ0eUNhbkJlVmFsaWQoY2FuZGlkYXRlLCBrZXksIGNhbmRpZGF0ZVtrZXldLCBjaGVjaylcbiAgICApO1xuICB9LFxuICBhc3NlcnRSZXN0VmFsaWQ6IChjYW5kaWRhdGUsIHBhc3NTdHlsZU9mUmVjdXIpID0+IHtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2Ygb3duS2V5czUoY2FuZGlkYXRlKSkge1xuICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gZ2V0T3duRGF0YURlc2NyaXB0b3IoXG4gICAgICAgIGNhbmRpZGF0ZSxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICAgYXNzZXJ0Q2hlY2tlclxuICAgICAgKTtcbiAgICAgIHBhc3NTdHlsZU9mUmVjdXIodmFsdWUpO1xuICAgIH1cbiAgfVxufSk7XG5cbi8vXG52YXIgeyBvd25LZXlzOiBvd25LZXlzNiB9ID0gUmVmbGVjdDtcbnZhciB7IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM0IH0gPSBPYmplY3Q7XG52YXIgVGFnZ2VkSGVscGVyID0gaGFyZGVuKHtcbiAgc3R5bGVOYW1lOiBcInRhZ2dlZFwiLFxuICBjYW5CZVZhbGlkOiAoY2FuZGlkYXRlLCBjaGVjayA9IHZvaWQgMCkgPT4gY2hlY2tQYXNzU3R5bGUoY2FuZGlkYXRlLCBjYW5kaWRhdGVbUEFTU19TVFlMRV0sIFwidGFnZ2VkXCIsIGNoZWNrKSxcbiAgYXNzZXJ0UmVzdFZhbGlkOiAoY2FuZGlkYXRlLCBwYXNzU3R5bGVPZlJlY3VyKSA9PiB7XG4gICAgY2hlY2tUYWdSZWNvcmQoY2FuZGlkYXRlLCBcInRhZ2dlZFwiLCBhc3NlcnRDaGVja2VyKTtcbiAgICBjb25zdCBwYXNzU3R5bGVLZXkgPSAoXG4gICAgICAvKiAgICAgICAgICAgICAgICAgICovXG4gICAgICBQQVNTX1NUWUxFXG4gICAgKTtcbiAgICBjb25zdCB0YWdLZXkgPSAoXG4gICAgICAvKiAgICAgICAgICAgICAgICAgICovXG4gICAgICBTeW1ib2wudG9TdHJpbmdUYWdcbiAgICApO1xuICAgIGNvbnN0IHtcbiAgICAgIC8vXG4gICAgICBbXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAqL1xuICAgICAgICBwYXNzU3R5bGVLZXlcbiAgICAgIF06IF9wYXNzU3R5bGVEZXNjLFxuICAgICAgW1xuICAgICAgICAvKiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgdGFnS2V5XG4gICAgICBdOiBfbGFiZWxEZXNjLFxuICAgICAgcGF5bG9hZDogX3BheWxvYWREZXNjLFxuICAgICAgLy9cbiAgICAgIC4uLnJlc3REZXNjc1xuICAgIH0gPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzNChjYW5kaWRhdGUpO1xuICAgIG93bktleXM2KHJlc3REZXNjcykubGVuZ3RoID09PSAwIHx8IHRocm93UmVkYWN0ZWRgVW5leHBlY3RlZCBwcm9wZXJ0aWVzIG9uIHRhZ2dlZCByZWNvcmQgJHtvd25LZXlzNihyZXN0RGVzY3MpfWA7XG4gICAgcGFzc1N0eWxlT2ZSZWN1cihcbiAgICAgIGdldE93bkRhdGFEZXNjcmlwdG9yKGNhbmRpZGF0ZSwgXCJwYXlsb2FkXCIsIHRydWUsIGFzc2VydENoZWNrZXIpLnZhbHVlXG4gICAgKTtcbiAgfVxufSk7XG5cbi8vXG52YXIgeyBpc0Zyb3plbjogaXNGcm96ZW40LCBnZXRQcm90b3R5cGVPZjogZ2V0UHJvdG90eXBlT2Y4LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGdldE93blByb3BlcnR5RGVzY3JpcHRvcjIgfSA9IE9iamVjdDtcbnZhciB7IG93bktleXM6IG93bktleXM3IH0gPSBSZWZsZWN0O1xudmFyIHsgdG9TdHJpbmdUYWcgfSA9IFN5bWJvbDtcbnZhciBjaGVja1Byb21pc2VPd25LZXlzID0gKHByLCBjaGVjaykgPT4ge1xuICBjb25zdCBrZXlzNyA9IG93bktleXM3KHByKTtcbiAgaWYgKGtleXM3Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IHVua25vd25LZXlzID0ga2V5czcuZmlsdGVyKFxuICAgIChrZXkpID0+IHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgfHwgIWhhc093blByb3BlcnR5T2YoUHJvbWlzZS5wcm90b3R5cGUsIGtleSlcbiAgKTtcbiAgaWYgKHVua25vd25LZXlzLmxlbmd0aCAhPT0gMCkge1xuICAgIHJldHVybiBDWChcbiAgICAgIGNoZWNrXG4gICAgKWAke3ByfSAtIE11c3Qgbm90IGhhdmUgYW55IG93biBwcm9wZXJ0aWVzOiAke3F1b3RlKHVua25vd25LZXlzKX1gO1xuICB9XG4gIGNvbnN0IGNoZWNrU2FmZU93bktleSA9IChrZXkpID0+IHtcbiAgICBpZiAoa2V5ID09PSB0b1N0cmluZ1RhZykge1xuICAgICAgY29uc3QgdGFnRGVzYyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcjIocHIsIHRvU3RyaW5nVGFnKTtcbiAgICAgIGFzc2VydCh0YWdEZXNjICE9PSB2b2lkIDApO1xuICAgICAgcmV0dXJuIChoYXNPd25Qcm9wZXJ0eU9mKHRhZ0Rlc2MsIFwidmFsdWVcIikgfHwgQ1goXG4gICAgICAgIGNoZWNrXG4gICAgICApYE93biBAQHRvU3RyaW5nVGFnIG11c3QgYmUgYSBkYXRhIHByb3BlcnR5LCBub3QgYW4gYWNjZXNzb3I6ICR7cXVvdGUodGFnRGVzYyl9YCkgJiYgKHR5cGVvZiB0YWdEZXNjLnZhbHVlID09PSBcInN0cmluZ1wiIHx8IENYKFxuICAgICAgICBjaGVja1xuICAgICAgKWBPd24gQEB0b1N0cmluZ1RhZyB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nOiAke3F1b3RlKHRhZ0Rlc2MudmFsdWUpfWApICYmICghdGFnRGVzYy5lbnVtZXJhYmxlIHx8IENYKGNoZWNrKWBPd24gQEB0b1N0cmluZ1RhZyBtdXN0IG5vdCBiZSBlbnVtZXJhYmxlOiAke3F1b3RlKHRhZ0Rlc2MpfWApO1xuICAgIH1cbiAgICBjb25zdCB2YWwgPSBwcltrZXldO1xuICAgIGlmICh2YWwgPT09IHZvaWQgMCB8fCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09IFwib2JqZWN0XCIgJiYgdmFsICE9PSBudWxsICYmIGlzRnJvemVuNCh2YWwpICYmIGdldFByb3RvdHlwZU9mOCh2YWwpID09PSBPYmplY3QucHJvdG90eXBlKSB7XG4gICAgICBjb25zdCBzdWJLZXlzID0gb3duS2V5czcodmFsKTtcbiAgICAgIGlmIChzdWJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChzdWJLZXlzLmxlbmd0aCA9PT0gMSAmJiBzdWJLZXlzWzBdID09PSBcImRlc3Ryb3llZFwiICYmIHZhbC5kZXN0cm95ZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gQ1goXG4gICAgICBjaGVja1xuICAgIClgVW5leHBlY3RlZCBOb2RlIGFzeW5jX2hvb2tzIGFkZGl0aW9ucyB0byBwcm9taXNlOiAke3ByfS4ke3F1b3RlKFxuICAgICAgU3RyaW5nKGtleSlcbiAgICApfSBpcyAke3ZhbH1gO1xuICB9O1xuICByZXR1cm4ga2V5czcuZXZlcnkoY2hlY2tTYWZlT3duS2V5KTtcbn07XG52YXIgY2hlY2tTYWZlUHJvbWlzZSA9IChwciwgY2hlY2spID0+IHtcbiAgcmV0dXJuIChpc0Zyb3plbjQocHIpIHx8IENYKGNoZWNrKWAke3ByfSAtIE11c3QgYmUgZnJvemVuYCkgJiYgKGlzUHJvbWlzZShwcikgfHwgQ1goY2hlY2spYCR7cHJ9IC0gTXVzdCBiZSBhIHByb21pc2VgKSAmJiAoZ2V0UHJvdG90eXBlT2Y4KHByKSA9PT0gUHJvbWlzZS5wcm90b3R5cGUgfHwgQ1goY2hlY2spYCR7cHJ9IC0gTXVzdCBpbmhlcml0IGZyb20gUHJvbWlzZS5wcm90b3R5cGU6ICR7cXVvdGUoXG4gICAgZ2V0UHJvdG90eXBlT2Y4KHByKVxuICApfWApICYmIGNoZWNrUHJvbWlzZU93bktleXMoXG4gICAgLyogICAgICAgICAgICAgICAgICAqL1xuICAgIHByLFxuICAgIGNoZWNrXG4gICk7XG59O1xuaGFyZGVuKGNoZWNrU2FmZVByb21pc2UpO1xudmFyIGlzU2FmZVByb21pc2UgPSAocHIpID0+IGNoZWNrU2FmZVByb21pc2UocHIsICh4KSA9PiB4KTtcbmhhcmRlbihpc1NhZmVQcm9taXNlKTtcbnZhciBhc3NlcnRTYWZlUHJvbWlzZSA9IChwcikgPT4gY2hlY2tTYWZlUHJvbWlzZShwciwgYXNzZXJ0Q2hlY2tlcik7XG5cbi8vXG52YXIgeyBvd25LZXlzOiBvd25LZXlzOCB9ID0gUmVmbGVjdDtcbnZhciB7IGlzRnJvemVuOiBpc0Zyb3plbjUsIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM1LCB2YWx1ZXMgfSA9IE9iamVjdDtcbnZhciBtYWtlSGVscGVyVGFibGUgPSAocGFzc1N0eWxlSGVscGVycykgPT4ge1xuICBjb25zdCBIZWxwZXJUYWJsZSA9IHtcbiAgICBfX3Byb3RvX186IG51bGwsXG4gICAgY29weUFycmF5OiB2b2lkIDAsXG4gICAgY29weVJlY29yZDogdm9pZCAwLFxuICAgIHRhZ2dlZDogdm9pZCAwLFxuICAgIGVycm9yOiB2b2lkIDAsXG4gICAgcmVtb3RhYmxlOiB2b2lkIDBcbiAgfTtcbiAgZm9yIChjb25zdCBoZWxwZXIgb2YgcGFzc1N0eWxlSGVscGVycykge1xuICAgIGNvbnN0IHsgc3R5bGVOYW1lIH0gPSBoZWxwZXI7XG4gICAgc3R5bGVOYW1lIGluIEhlbHBlclRhYmxlIHx8IHRocm93UmVkYWN0ZWRgVW5yZWNvZ25pemVkIGhlbHBlcjogJHtxdW90ZShzdHlsZU5hbWUpfWA7XG4gICAgSGVscGVyVGFibGVbc3R5bGVOYW1lXSA9PT0gdm9pZCAwIHx8IHRocm93UmVkYWN0ZWRgY29uZmxpY3RpbmcgaGVscGVycyBmb3IgJHtxdW90ZShzdHlsZU5hbWUpfWA7XG4gICAgSGVscGVyVGFibGVbc3R5bGVOYW1lXSA9IGhlbHBlcjtcbiAgfVxuICBmb3IgKGNvbnN0IHN0eWxlTmFtZSBvZiBvd25LZXlzOChIZWxwZXJUYWJsZSkpIHtcbiAgICBIZWxwZXJUYWJsZVtzdHlsZU5hbWVdICE9PSB2b2lkIDAgfHwgdGhyb3dSZWRhY3RlZGBtaXNzaW5nIGhlbHBlciBmb3IgJHtxdW90ZShzdHlsZU5hbWUpfWA7XG4gIH1cbiAgcmV0dXJuIGhhcmRlbihIZWxwZXJUYWJsZSk7XG59O1xudmFyIGFzc2VydFZhbGlkID0gKGhlbHBlciwgY2FuZGlkYXRlLCBwYXNzU3R5bGVPZlJlY3VyKSA9PiB7XG4gIGhlbHBlci5jYW5CZVZhbGlkKGNhbmRpZGF0ZSwgYXNzZXJ0Q2hlY2tlcik7XG4gIGhlbHBlci5hc3NlcnRSZXN0VmFsaWQoY2FuZGlkYXRlLCBwYXNzU3R5bGVPZlJlY3VyKTtcbn07XG52YXIgbWFrZVBhc3NTdHlsZU9mID0gKHBhc3NTdHlsZUhlbHBlcnMpID0+IHtcbiAgY29uc3QgSGVscGVyVGFibGUgPSBtYWtlSGVscGVyVGFibGUocGFzc1N0eWxlSGVscGVycyk7XG4gIGNvbnN0IHJlbW90YWJsZUhlbHBlciA9IEhlbHBlclRhYmxlLnJlbW90YWJsZTtcbiAgY29uc3QgcGFzc1N0eWxlTWVtbyA9IC8qICAgICAgICAgICAqLyBuZXcgV2Vha01hcCgpO1xuICBjb25zdCBwYXNzU3R5bGVPZjIgPSAocGFzc2FibGUpID0+IHtcbiAgICBjb25zdCBpblByb2dyZXNzID0gLyogICAgICAgICAgICovIG5ldyBTZXQoKTtcbiAgICBjb25zdCBwYXNzU3R5bGVPZlJlY3VyID0gKGlubmVyKSA9PiB7XG4gICAgICBjb25zdCBpbm5lcklzT2JqZWN0ID0gaXNPYmplY3QyKGlubmVyKTtcbiAgICAgIGlmIChpbm5lcklzT2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IGlubmVyU3R5bGUgPSBwYXNzU3R5bGVNZW1vLmdldChpbm5lcik7XG4gICAgICAgIGlmIChpbm5lclN0eWxlKSB7XG4gICAgICAgICAgcmV0dXJuIGlubmVyU3R5bGU7XG4gICAgICAgIH1cbiAgICAgICAgIWluUHJvZ3Jlc3MuaGFzKGlubmVyKSB8fCB0aHJvd1JlZGFjdGVkYFBhc3MtYnktY29weSBkYXRhIGNhbm5vdCBiZSBjeWNsaWMgJHtpbm5lcn1gO1xuICAgICAgICBpblByb2dyZXNzLmFkZChpbm5lcik7XG4gICAgICB9XG4gICAgICBjb25zdCBwYXNzU3R5bGUgPSBwYXNzU3R5bGVPZkludGVybmFsKGlubmVyKTtcbiAgICAgIGlmIChpbm5lcklzT2JqZWN0KSB7XG4gICAgICAgIHBhc3NTdHlsZU1lbW8uc2V0KGlubmVyLCBwYXNzU3R5bGUpO1xuICAgICAgICBpblByb2dyZXNzLmRlbGV0ZShpbm5lcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFzc1N0eWxlO1xuICAgIH07XG4gICAgY29uc3QgcGFzc1N0eWxlT2ZJbnRlcm5hbCA9IChpbm5lcikgPT4ge1xuICAgICAgY29uc3QgdHlwZXN0ciA9IHR5cGVvZiBpbm5lcjtcbiAgICAgIHN3aXRjaCAodHlwZXN0cikge1xuICAgICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgY2FzZSBcImJpZ2ludFwiOiB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVzdHI7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOiB7XG4gICAgICAgICAgYXNzZXJ0UGFzc2FibGVTdHJpbmcoaW5uZXIpO1xuICAgICAgICAgIHJldHVybiBcInN0cmluZ1wiO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJzeW1ib2xcIjoge1xuICAgICAgICAgIGFzc2VydFBhc3NhYmxlU3ltYm9sKGlubmVyKTtcbiAgICAgICAgICByZXR1cm4gXCJzeW1ib2xcIjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwib2JqZWN0XCI6IHtcbiAgICAgICAgICBpZiAoaW5uZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBcIm51bGxcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFpc0Zyb3plbjUoaW5uZXIpKSB7XG4gICAgICAgICAgICBhc3NlcnQuZmFpbChcbiAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgaXNUeXBlZEFycmF5KGlubmVyKSA/IHJlZGFjdGVkYENhbm5vdCBwYXNzIG11dGFibGUgdHlwZWQgYXJyYXlzIGxpa2UgJHtpbm5lcn0uYCA6IHJlZGFjdGVkYENhbm5vdCBwYXNzIG5vbi1mcm96ZW4gb2JqZWN0cyBsaWtlICR7aW5uZXJ9LiBVc2UgaGFyZGVuKClgXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNQcm9taXNlKGlubmVyKSkge1xuICAgICAgICAgICAgYXNzZXJ0U2FmZVByb21pc2UoaW5uZXIpO1xuICAgICAgICAgICAgcmV0dXJuIFwicHJvbWlzZVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0eXBlb2YgaW5uZXIudGhlbiAhPT0gXCJmdW5jdGlvblwiIHx8IHRocm93UmVkYWN0ZWRgQ2Fubm90IHBhc3Mgbm9uLXByb21pc2UgdGhlbmFibGVzYDtcbiAgICAgICAgICBjb25zdCBwYXNzU3R5bGVUYWcgPSBpbm5lcltQQVNTX1NUWUxFXTtcbiAgICAgICAgICBpZiAocGFzc1N0eWxlVGFnICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGFzc2VydC50eXBlb2YocGFzc1N0eWxlVGFnLCBcInN0cmluZ1wiKTtcbiAgICAgICAgICAgIGNvbnN0IGhlbHBlciA9IEhlbHBlclRhYmxlW3Bhc3NTdHlsZVRhZ107XG4gICAgICAgICAgICBoZWxwZXIgIT09IHZvaWQgMCB8fCB0aHJvd1JlZGFjdGVkYFVucmVjb2duaXplZCBQYXNzU3R5bGU6ICR7cXVvdGUocGFzc1N0eWxlVGFnKX1gO1xuICAgICAgICAgICAgYXNzZXJ0VmFsaWQoaGVscGVyLCBpbm5lciwgcGFzc1N0eWxlT2ZSZWN1cik7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgcGFzc1N0eWxlVGFnXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKGNvbnN0IGhlbHBlciBvZiBwYXNzU3R5bGVIZWxwZXJzKSB7XG4gICAgICAgICAgICBpZiAoaGVscGVyLmNhbkJlVmFsaWQoaW5uZXIpKSB7XG4gICAgICAgICAgICAgIGhlbHBlci5hc3NlcnRSZXN0VmFsaWQoaW5uZXIsIHBhc3NTdHlsZU9mUmVjdXIpO1xuICAgICAgICAgICAgICByZXR1cm4gaGVscGVyLnN0eWxlTmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYXNzZXJ0VmFsaWQocmVtb3RhYmxlSGVscGVyLCBpbm5lciwgcGFzc1N0eWxlT2ZSZWN1cik7XG4gICAgICAgICAgcmV0dXJuIFwicmVtb3RhYmxlXCI7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6IHtcbiAgICAgICAgICBpc0Zyb3plbjUoaW5uZXIpIHx8IHRocm93UmVkYWN0ZWRgQ2Fubm90IHBhc3Mgbm9uLWZyb3plbiBvYmplY3RzIGxpa2UgJHtpbm5lcn0uIFVzZSBoYXJkZW4oKWA7XG4gICAgICAgICAgdHlwZW9mIGlubmVyLnRoZW4gIT09IFwiZnVuY3Rpb25cIiB8fCB0aHJvd1JlZGFjdGVkYENhbm5vdCBwYXNzIG5vbi1wcm9taXNlIHRoZW5hYmxlc2A7XG4gICAgICAgICAgYXNzZXJ0VmFsaWQocmVtb3RhYmxlSGVscGVyLCBpbm5lciwgcGFzc1N0eWxlT2ZSZWN1cik7XG4gICAgICAgICAgcmV0dXJuIFwicmVtb3RhYmxlXCI7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIHRocm93IGFzc2VydC5mYWlsKHJlZGFjdGVkYFVucmVjb2duaXplZCB0eXBlb2YgJHtxdW90ZSh0eXBlc3RyKX1gLCBUeXBlRXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gcGFzc1N0eWxlT2ZSZWN1cihwYXNzYWJsZSk7XG4gIH07XG4gIHJldHVybiBoYXJkZW4ocGFzc1N0eWxlT2YyKTtcbn07XG52YXIgUGFzc1N0eWxlT2ZFbmRvd21lbnRTeW1ib2wgPSBTeW1ib2wuZm9yKFwiQGVuZG8gcGFzc1N0eWxlT2ZcIik7XG52YXIgcGFzc1N0eWxlT2YgPSBnbG9iYWxUaGlzICYmIGdsb2JhbFRoaXNbUGFzc1N0eWxlT2ZFbmRvd21lbnRTeW1ib2xdIHx8IG1ha2VQYXNzU3R5bGVPZihbXG4gIENvcHlBcnJheUhlbHBlcixcbiAgQ29weVJlY29yZEhlbHBlcixcbiAgVGFnZ2VkSGVscGVyLFxuICBFcnJvckhlbHBlcixcbiAgUmVtb3RhYmxlSGVscGVyXG5dKTtcbnZhciBhc3NlcnRQYXNzYWJsZSA9ICh2YWwpID0+IHtcbiAgcGFzc1N0eWxlT2YodmFsKTtcbn07XG5oYXJkZW4oYXNzZXJ0UGFzc2FibGUpO1xudmFyIGlzUGFzc2FibGUgPSAoc3BlY2ltZW4pID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcGFzc1N0eWxlT2Yoc3BlY2ltZW4pICE9PSB2b2lkIDA7XG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5oYXJkZW4oaXNQYXNzYWJsZSk7XG52YXIgaXNQYXNzYWJsZUVycm9yUHJvcGVydHlEZXNjID0gKG5hbWUsIGRlc2MpID0+IGNoZWNrUmVjdXJzaXZlbHlQYXNzYWJsZUVycm9yUHJvcGVydHlEZXNjKG5hbWUsIGRlc2MsIHBhc3NTdHlsZU9mKTtcbnZhciB0b1Bhc3NhYmxlRXJyb3IgPSAoZXJyKSA9PiB7XG4gIGhhcmRlbihlcnIpO1xuICBpZiAoY2hlY2tSZWN1cnNpdmVseVBhc3NhYmxlRXJyb3IoZXJyLCBwYXNzU3R5bGVPZikpIHtcbiAgICByZXR1cm4gZXJyO1xuICB9XG4gIGNvbnN0IHsgbmFtZSwgbWVzc2FnZSB9ID0gZXJyO1xuICBjb25zdCB7IGNhdXNlOiBjYXVzZURlc2MsIGVycm9yczogZXJyb3JzRGVzYyB9ID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczUoZXJyKTtcbiAgbGV0IGNhdXNlO1xuICBsZXQgZXJyb3JzO1xuICBpZiAoY2F1c2VEZXNjICYmIGlzUGFzc2FibGVFcnJvclByb3BlcnR5RGVzYyhcImNhdXNlXCIsIGNhdXNlRGVzYykpIHtcbiAgICBjYXVzZSA9IGNhdXNlRGVzYy52YWx1ZTtcbiAgfVxuICBpZiAoZXJyb3JzRGVzYyAmJiBpc1Bhc3NhYmxlRXJyb3JQcm9wZXJ0eURlc2MoXCJlcnJvcnNcIiwgZXJyb3JzRGVzYykpIHtcbiAgICBlcnJvcnMgPSBlcnJvcnNEZXNjLnZhbHVlO1xuICB9XG4gIGNvbnN0IGVyckNvbnN0cnVjdG9yID0gZ2V0RXJyb3JDb25zdHJ1Y3RvcihgJHtuYW1lfWApIHx8IEVycm9yO1xuICBjb25zdCBuZXdFcnJvciA9IG1ha2VFcnJvcihgJHttZXNzYWdlfWAsIGVyckNvbnN0cnVjdG9yLCB7XG4gICAgLy9cbiAgICBjYXVzZSxcbiAgICBlcnJvcnNcbiAgfSk7XG4gIGhhcmRlbihuZXdFcnJvcik7XG4gIG5vdGUobmV3RXJyb3IsIHJlZGFjdGVkYGNvcGllZCBmcm9tIGVycm9yICR7ZXJyfWApO1xuICBwYXNzU3R5bGVPZihuZXdFcnJvcikgPT09IFwiZXJyb3JcIiB8fCB0aHJvd1JlZGFjdGVkYEV4cGVjdGVkICR7bmV3RXJyb3J9IHRvIGJlIGEgcGFzc2FibGUgZXJyb3JgO1xuICByZXR1cm4gbmV3RXJyb3I7XG59O1xuaGFyZGVuKHRvUGFzc2FibGVFcnJvcik7XG52YXIgdG9UaHJvd2FibGUgPSAoc3BlY2ltZW4pID0+IHtcbiAgaGFyZGVuKHNwZWNpbWVuKTtcbiAgaWYgKGlzRXJyb3JMaWtlKHNwZWNpbWVuKSkge1xuICAgIHJldHVybiB0b1Bhc3NhYmxlRXJyb3IoXG4gICAgICAvKiAgICAgICAgICAgICAgICAqL1xuICAgICAgc3BlY2ltZW5cbiAgICApO1xuICB9XG4gIGNvbnN0IHBhc3NTdHlsZSA9IHBhc3NTdHlsZU9mKHNwZWNpbWVuKTtcbiAgaWYgKGlzT2JqZWN0MihzcGVjaW1lbikpIHtcbiAgICBzd2l0Y2ggKHBhc3NTdHlsZSkge1xuICAgICAgY2FzZSBcImNvcHlBcnJheVwiOiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gKFxuICAgICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgIHNwZWNpbWVuXG4gICAgICAgICk7XG4gICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBlbGVtZW50cykge1xuICAgICAgICAgIGVsZW1lbnQgPT09IHRvVGhyb3dhYmxlKGVsZW1lbnQpIHx8IHRocm93UmVkYWN0ZWRgbmVzdGVkIHRvVGhyb3dhYmxlIGNvZXJjaW9uIG5vdCB5ZXQgc3VwcG9ydGVkICR7ZWxlbWVudH1gO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcImNvcHlSZWNvcmRcIjoge1xuICAgICAgICBjb25zdCByZWMgPSAoXG4gICAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgIHNwZWNpbWVuXG4gICAgICAgICk7XG4gICAgICAgIGZvciAoY29uc3QgdmFsIG9mIHZhbHVlcyhyZWMpKSB7XG4gICAgICAgICAgdmFsID09PSB0b1Rocm93YWJsZSh2YWwpIHx8IHRocm93UmVkYWN0ZWRgbmVzdGVkIHRvVGhyb3dhYmxlIGNvZXJjaW9uIG5vdCB5ZXQgc3VwcG9ydGVkICR7dmFsfWA7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwidGFnZ2VkXCI6IHtcbiAgICAgICAgY29uc3QgdGcgPSAoXG4gICAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgIHNwZWNpbWVuXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHsgcGF5bG9hZCB9ID0gdGc7XG4gICAgICAgIHBheWxvYWQgPT09IHRvVGhyb3dhYmxlKHBheWxvYWQpIHx8IHRocm93UmVkYWN0ZWRgbmVzdGVkIHRvVGhyb3dhYmxlIGNvZXJjaW9uIG5vdCB5ZXQgc3VwcG9ydGVkICR7cGF5bG9hZH1gO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJlcnJvclwiOiB7XG4gICAgICAgIGNvbnN0IGVyID0gKFxuICAgICAgICAgIC8qICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgc3BlY2ltZW5cbiAgICAgICAgKTtcbiAgICAgICAgZXIgPT09IHRvVGhyb3dhYmxlKGVyKSB8fCB0aHJvd1JlZGFjdGVkYG5lc3RlZCB0b1Rocm93YWJsZSBjb2VyY2lvbiBub3QgeWV0IHN1cHBvcnRlZCAke2VyfWA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYEEgJHtxdW90ZShwYXNzU3R5bGUpfSBpcyBub3QgdGhyb3dhYmxlOiAke3NwZWNpbWVufWA7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiAoXG4gICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgc3BlY2ltZW5cbiAgKTtcbn07XG5oYXJkZW4odG9UaHJvd2FibGUpO1xuXG4vL1xudmFyIHsgY3JlYXRlOiBjcmVhdGUyLCBwcm90b3R5cGU6IG9iamVjdFByb3RvdHlwZTUgfSA9IE9iamVjdDtcbnZhciBtYWtlVGFnZ2VkID0gKHRhZywgcGF5bG9hZCkgPT4ge1xuICB0eXBlb2YgdGFnID09PSBcInN0cmluZ1wiIHx8IHRocm93UmVkYWN0ZWRgVGhlIHRhZyBvZiBhIHRhZ2dlZCByZWNvcmQgbXVzdCBiZSBhIHN0cmluZzogJHt0YWd9YDtcbiAgYXNzZXJ0UGFzc2FibGUoaGFyZGVuKHBheWxvYWQpKTtcbiAgcmV0dXJuIGhhcmRlbihcbiAgICBjcmVhdGUyKG9iamVjdFByb3RvdHlwZTUsIHtcbiAgICAgIFtQQVNTX1NUWUxFXTogeyB2YWx1ZTogXCJ0YWdnZWRcIiB9LFxuICAgICAgW1N5bWJvbC50b1N0cmluZ1RhZ106IHsgdmFsdWU6IHRhZyB9LFxuICAgICAgcGF5bG9hZDogeyB2YWx1ZTogcGF5bG9hZCwgZW51bWVyYWJsZTogdHJ1ZSB9XG4gICAgfSlcbiAgKTtcbn07XG5oYXJkZW4obWFrZVRhZ2dlZCk7XG5cbi8vXG52YXIgaXNDb3B5QXJyYXkgPSAoYXJyKSA9PiBwYXNzU3R5bGVPZihhcnIpID09PSBcImNvcHlBcnJheVwiO1xuaGFyZGVuKGlzQ29weUFycmF5KTtcbnZhciBpc1JlY29yZCA9IChyZWNvcmQpID0+IHBhc3NTdHlsZU9mKHJlY29yZCkgPT09IFwiY29weVJlY29yZFwiO1xuaGFyZGVuKGlzUmVjb3JkKTtcbnZhciBpc1JlbW90YWJsZSA9IChyZW1vdGFibGUpID0+IHBhc3NTdHlsZU9mKHJlbW90YWJsZSkgPT09IFwicmVtb3RhYmxlXCI7XG5oYXJkZW4oaXNSZW1vdGFibGUpO1xudmFyIGFzc2VydENvcHlBcnJheSA9IChhcnIsIG9wdE5hbWVPZkFycmF5ID0gXCJBbGxlZ2VkIGFycmF5XCIpID0+IHtcbiAgY29uc3QgcGFzc1N0eWxlID0gcGFzc1N0eWxlT2YoYXJyKTtcbiAgcGFzc1N0eWxlID09PSBcImNvcHlBcnJheVwiIHx8IHRocm93UmVkYWN0ZWRgJHtxdW90ZShvcHROYW1lT2ZBcnJheSl9ICR7YXJyfSBtdXN0IGJlIGEgcGFzcy1ieS1jb3B5IGFycmF5LCBub3QgJHtxdW90ZShcbiAgICBwYXNzU3R5bGVcbiAgKX1gO1xufTtcbmhhcmRlbihhc3NlcnRDb3B5QXJyYXkpO1xudmFyIGFzc2VydFJlY29yZCA9IChyZWNvcmQsIG9wdE5hbWVPZlJlY29yZCA9IFwiQWxsZWdlZCByZWNvcmRcIikgPT4ge1xuICBjb25zdCBwYXNzU3R5bGUgPSBwYXNzU3R5bGVPZihyZWNvcmQpO1xuICBwYXNzU3R5bGUgPT09IFwiY29weVJlY29yZFwiIHx8IHRocm93UmVkYWN0ZWRgJHtxdW90ZShvcHROYW1lT2ZSZWNvcmQpfSAke3JlY29yZH0gbXVzdCBiZSBhIHBhc3MtYnktY29weSByZWNvcmQsIG5vdCAke3F1b3RlKFxuICAgIHBhc3NTdHlsZVxuICApfWA7XG59O1xuaGFyZGVuKGFzc2VydFJlY29yZCk7XG52YXIgYXNzZXJ0UmVtb3RhYmxlID0gKHJlbW90YWJsZSwgb3B0TmFtZU9mUmVtb3RhYmxlID0gXCJBbGxlZ2VkIHJlbW90YWJsZVwiKSA9PiB7XG4gIGNvbnN0IHBhc3NTdHlsZSA9IHBhc3NTdHlsZU9mKHJlbW90YWJsZSk7XG4gIHBhc3NTdHlsZSA9PT0gXCJyZW1vdGFibGVcIiB8fCB0aHJvd1JlZGFjdGVkYCR7cXVvdGUob3B0TmFtZU9mUmVtb3RhYmxlKX0gJHtyZW1vdGFibGV9IG11c3QgYmUgYSByZW1vdGFibGUsIG5vdCAke3F1b3RlKFxuICAgIHBhc3NTdHlsZVxuICApfWA7XG59O1xuaGFyZGVuKGFzc2VydFJlbW90YWJsZSk7XG5cbi8vXG52YXIgeyBvd25LZXlzOiBvd25LZXlzOSB9ID0gUmVmbGVjdDtcbnZhciB7IGZyb21FbnRyaWVzIH0gPSBPYmplY3Q7XG52YXIgZGVlcGx5RnVsZmlsbGVkID0gYXN5bmMgKHZhbCkgPT4ge1xuICBpZiAoIWlzT2JqZWN0Mih2YWwpKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgIHZhbFxuICAgICk7XG4gIH1cbiAgaWYgKGlzUHJvbWlzZSh2YWwpKSB7XG4gICAgcmV0dXJuIEUud2hlbih2YWwsIChub25wKSA9PiBkZWVwbHlGdWxmaWxsZWQobm9ucCkpO1xuICB9XG4gIGNvbnN0IHBhc3NTdHlsZSA9IHBhc3NTdHlsZU9mKHZhbCk7XG4gIHN3aXRjaCAocGFzc1N0eWxlKSB7XG4gICAgY2FzZSBcImNvcHlSZWNvcmRcIjoge1xuICAgICAgY29uc3QgcmVjID0gKFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIHZhbFxuICAgICAgKTtcbiAgICAgIGNvbnN0IG5hbWVzID0gKFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICBvd25LZXlzOShyZWMpXG4gICAgICApO1xuICAgICAgY29uc3QgdmFsUHMgPSBuYW1lcy5tYXAoKG5hbWUpID0+IGRlZXBseUZ1bGZpbGxlZChyZWNbbmFtZV0pKTtcbiAgICAgIHJldHVybiBFLndoZW4oXG4gICAgICAgIFByb21pc2UuYWxsKHZhbFBzKSxcbiAgICAgICAgKHZhbHMpID0+IGhhcmRlbihmcm9tRW50cmllcyh2YWxzLm1hcCgoYzIsIGkzKSA9PiBbbmFtZXNbaTNdLCBjMl0pKSlcbiAgICAgICk7XG4gICAgfVxuICAgIGNhc2UgXCJjb3B5QXJyYXlcIjoge1xuICAgICAgY29uc3QgYXJyID0gKFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgdmFsXG4gICAgICApO1xuICAgICAgY29uc3QgdmFsUHMgPSBhcnIubWFwKChwNCkgPT4gZGVlcGx5RnVsZmlsbGVkKHA0KSk7XG4gICAgICByZXR1cm4gRS53aGVuKFByb21pc2UuYWxsKHZhbFBzKSwgKHZhbHMpID0+IGhhcmRlbih2YWxzKSk7XG4gICAgfVxuICAgIGNhc2UgXCJ0YWdnZWRcIjoge1xuICAgICAgY29uc3QgdGdkID0gKFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIHZhbFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHRhZyA9IGdldFRhZyh0Z2QpO1xuICAgICAgcmV0dXJuIEUud2hlbihcbiAgICAgICAgZGVlcGx5RnVsZmlsbGVkKHRnZC5wYXlsb2FkKSxcbiAgICAgICAgKHBheWxvYWQpID0+IG1ha2VUYWdnZWQodGFnLCBwYXlsb2FkKVxuICAgICAgKTtcbiAgICB9XG4gICAgY2FzZSBcInJlbW90YWJsZVwiOiB7XG4gICAgICBjb25zdCByZW0gPSAoXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICB2YWxcbiAgICAgICk7XG4gICAgICByZXR1cm4gcmVtO1xuICAgIH1cbiAgICBjYXNlIFwiZXJyb3JcIjoge1xuICAgICAgY29uc3QgZXJyID0gKFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAqL1xuICAgICAgICB2YWxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZXJyO1xuICAgIH1cbiAgICBjYXNlIFwicHJvbWlzZVwiOiB7XG4gICAgICBjb25zdCBwcm9tID0gKFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgdmFsXG4gICAgICApO1xuICAgICAgcmV0dXJuIEUud2hlbihwcm9tLCAobm9ucCkgPT4gZGVlcGx5RnVsZmlsbGVkKG5vbnApKTtcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgdGhyb3cgYXNzZXJ0LmZhaWwocmVkYWN0ZWRgVW5leHBlY3RlZCBwYXNzU3R5bGUgJHtxdW90ZShwYXNzU3R5bGUpfWAsIFR5cGVFcnJvcik7XG4gICAgfVxuICB9XG59O1xuaGFyZGVuKGRlZXBseUZ1bGZpbGxlZCk7XG5cbi8vXG52YXIgeyBvd25LZXlzOiBvd25LZXlzMTAgfSA9IFJlZmxlY3Q7XG52YXIgeyBpc0FycmF5OiBpc0FycmF5NCB9ID0gQXJyYXk7XG52YXIge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzNixcbiAgZGVmaW5lUHJvcGVydGllcyxcbiAgaXMsXG4gIGVudHJpZXM6IGVudHJpZXMzLFxuICBmcm9tRW50cmllczogZnJvbUVudHJpZXMyLFxuICBmcmVlemU6IGZyZWV6ZTVcbn0gPSBPYmplY3Q7XG52YXIgUUNMQVNTID0gXCJAcWNsYXNzXCI7XG52YXIgaGFzUUNsYXNzID0gKGVuY29kZWQpID0+IGhhc093blByb3BlcnR5T2YoZW5jb2RlZCwgUUNMQVNTKTtcbnZhciBxY2xhc3NNYXRjaGVzID0gKGVuY29kZWQsIHFjbGFzcykgPT4gaXNPYmplY3QyKGVuY29kZWQpICYmICFpc0FycmF5NChlbmNvZGVkKSAmJiBoYXNRQ2xhc3MoZW5jb2RlZCkgJiYgZW5jb2RlZFtRQ0xBU1NdID09PSBxY2xhc3M7XG52YXIgZG9udEVuY29kZVJlbW90YWJsZVRvQ2FwRGF0YSA9IChyZW0pID0+IHRocm93UmVkYWN0ZWRgcmVtb3RhYmxlIHVuZXhwZWN0ZWQ6ICR7cmVtfWA7XG52YXIgZG9udEVuY29kZVByb21pc2VUb0NhcERhdGEgPSAocHJvbSkgPT4gdGhyb3dSZWRhY3RlZGBwcm9taXNlIHVuZXhwZWN0ZWQ6ICR7cHJvbX1gO1xudmFyIGRvbnRFbmNvZGVFcnJvclRvQ2FwRGF0YSA9IChlcnIpID0+IHRocm93UmVkYWN0ZWRgZXJyb3Igb2JqZWN0IHVuZXhwZWN0ZWQ6ICR7ZXJyfWA7XG52YXIgbWFrZUVuY29kZVRvQ2FwRGF0YSA9IChlbmNvZGVPcHRpb25zID0ge30pID0+IHtcbiAgY29uc3Qge1xuICAgIGVuY29kZVJlbW90YWJsZVRvQ2FwRGF0YSA9IGRvbnRFbmNvZGVSZW1vdGFibGVUb0NhcERhdGEsXG4gICAgZW5jb2RlUHJvbWlzZVRvQ2FwRGF0YSA9IGRvbnRFbmNvZGVQcm9taXNlVG9DYXBEYXRhLFxuICAgIGVuY29kZUVycm9yVG9DYXBEYXRhID0gZG9udEVuY29kZUVycm9yVG9DYXBEYXRhXG4gIH0gPSBlbmNvZGVPcHRpb25zO1xuICBjb25zdCBlbmNvZGVUb0NhcERhdGFSZWN1ciA9IChwYXNzYWJsZSkgPT4ge1xuICAgIGNvbnN0IHBhc3NTdHlsZSA9IHBhc3NTdHlsZU9mKHBhc3NhYmxlKTtcbiAgICBzd2l0Y2ggKHBhc3NTdHlsZSkge1xuICAgICAgY2FzZSBcIm51bGxcIjpcbiAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICBjYXNlIFwic3RyaW5nXCI6IHtcbiAgICAgICAgcmV0dXJuIHBhc3NhYmxlO1xuICAgICAgfVxuICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOiB7XG4gICAgICAgIHJldHVybiB7IFtRQ0xBU1NdOiBcInVuZGVmaW5lZFwiIH07XG4gICAgICB9XG4gICAgICBjYXNlIFwibnVtYmVyXCI6IHtcbiAgICAgICAgaWYgKE51bWJlci5pc05hTihwYXNzYWJsZSkpIHtcbiAgICAgICAgICByZXR1cm4geyBbUUNMQVNTXTogXCJOYU5cIiB9O1xuICAgICAgICB9IGVsc2UgaWYgKHBhc3NhYmxlID09PSBJbmZpbml0eSkge1xuICAgICAgICAgIHJldHVybiB7IFtRQ0xBU1NdOiBcIkluZmluaXR5XCIgfTtcbiAgICAgICAgfSBlbHNlIGlmIChwYXNzYWJsZSA9PT0gLUluZmluaXR5KSB7XG4gICAgICAgICAgcmV0dXJuIHsgW1FDTEFTU106IFwiLUluZmluaXR5XCIgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXMocGFzc2FibGUsIC0wKSA/IDAgOiBwYXNzYWJsZTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJiaWdpbnRcIjoge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIFtRQ0xBU1NdOiBcImJpZ2ludFwiLFxuICAgICAgICAgIGRpZ2l0czogU3RyaW5nKHBhc3NhYmxlKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgY2FzZSBcInN5bWJvbFwiOiB7XG4gICAgICAgIGFzc2VydFBhc3NhYmxlU3ltYm9sKHBhc3NhYmxlKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IChcbiAgICAgICAgICAvKiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICBuYW1lRm9yUGFzc2FibGVTeW1ib2wocGFzc2FibGUpXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgW1FDTEFTU106IFwic3ltYm9sXCIsXG4gICAgICAgICAgbmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgY2FzZSBcImNvcHlSZWNvcmRcIjoge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHlPZihwYXNzYWJsZSwgUUNMQVNTKSkge1xuICAgICAgICAgIGNvbnN0IHsgW1FDTEFTU106IHFjbGFzc1ZhbHVlLCAuLi5yZXN0IH0gPSBwYXNzYWJsZTtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgICAgICBbUUNMQVNTXTogXCJoaWxiZXJ0XCIsXG4gICAgICAgICAgICBvcmlnaW5hbDogZW5jb2RlVG9DYXBEYXRhUmVjdXIocWNsYXNzVmFsdWUpXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAob3duS2V5czEwKHJlc3QpLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgICAgICByZXN1bHQucmVzdCA9IGVuY29kZVRvQ2FwRGF0YVJlY3VyKGZyZWV6ZTUocmVzdCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5hbWVzID0gb3duS2V5czEwKHBhc3NhYmxlKS5zb3J0KCk7XG4gICAgICAgIHJldHVybiBmcm9tRW50cmllczIoXG4gICAgICAgICAgbmFtZXMubWFwKChuYW1lKSA9PiBbbmFtZSwgZW5jb2RlVG9DYXBEYXRhUmVjdXIocGFzc2FibGVbbmFtZV0pXSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5QXJyYXlcIjoge1xuICAgICAgICByZXR1cm4gcGFzc2FibGUubWFwKGVuY29kZVRvQ2FwRGF0YVJlY3VyKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJ0YWdnZWRcIjoge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIFtRQ0xBU1NdOiBcInRhZ2dlZFwiLFxuICAgICAgICAgIHRhZzogZ2V0VGFnKHBhc3NhYmxlKSxcbiAgICAgICAgICBwYXlsb2FkOiBlbmNvZGVUb0NhcERhdGFSZWN1cihwYXNzYWJsZS5wYXlsb2FkKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgY2FzZSBcInJlbW90YWJsZVwiOiB7XG4gICAgICAgIGNvbnN0IGVuY29kZWQgPSBlbmNvZGVSZW1vdGFibGVUb0NhcERhdGEoXG4gICAgICAgICAgcGFzc2FibGUsXG4gICAgICAgICAgZW5jb2RlVG9DYXBEYXRhUmVjdXJcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHFjbGFzc01hdGNoZXMoZW5jb2RlZCwgXCJzbG90XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIGVuY29kZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbDogUmVtb3RhYmxlIGVuY29kaW5nIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggJHtxdW90ZShcbiAgICAgICAgICBRQ0xBU1NcbiAgICAgICAgKX0gJHtxdW90ZShcInNsb3RcIil9OiAke2VuY29kZWR9YDtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJwcm9taXNlXCI6IHtcbiAgICAgICAgY29uc3QgZW5jb2RlZCA9IGVuY29kZVByb21pc2VUb0NhcERhdGEocGFzc2FibGUsIGVuY29kZVRvQ2FwRGF0YVJlY3VyKTtcbiAgICAgICAgaWYgKHFjbGFzc01hdGNoZXMoZW5jb2RlZCwgXCJzbG90XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIGVuY29kZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbDogUHJvbWlzZSBlbmNvZGluZyBtdXN0IGJlIGFuIG9iamVjdCB3aXRoICR7cXVvdGUoXG4gICAgICAgICAgUUNMQVNTLFxuICAgICAgICAgIFwic2xvdFwiXG4gICAgICAgICl9OiAke2VuY29kZWR9YDtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJlcnJvclwiOiB7XG4gICAgICAgIGNvbnN0IGVuY29kZWQgPSBlbmNvZGVFcnJvclRvQ2FwRGF0YShwYXNzYWJsZSwgZW5jb2RlVG9DYXBEYXRhUmVjdXIpO1xuICAgICAgICBpZiAocWNsYXNzTWF0Y2hlcyhlbmNvZGVkLCBcImVycm9yXCIpKSB7XG4gICAgICAgICAgcmV0dXJuIGVuY29kZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbDogRXJyb3IgZW5jb2RpbmcgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCAke3F1b3RlKFxuICAgICAgICAgIFFDTEFTUyxcbiAgICAgICAgICBcImVycm9yXCJcbiAgICAgICAgKX06ICR7ZW5jb2RlZH1gO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aHJvdyBhc3NlcnQuZmFpbChcbiAgICAgICAgICByZWRhY3RlZGBpbnRlcm5hbDogVW5yZWNvZ25pemVkIHBhc3NTdHlsZSAke3F1b3RlKHBhc3NTdHlsZSl9YCxcbiAgICAgICAgICBUeXBlRXJyb3JcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IGVuY29kZVRvQ2FwRGF0YSA9IChwYXNzYWJsZSkgPT4ge1xuICAgIGlmIChpc0Vycm9yTGlrZShwYXNzYWJsZSkpIHtcbiAgICAgIHJldHVybiBoYXJkZW4oZW5jb2RlRXJyb3JUb0NhcERhdGEocGFzc2FibGUsIGVuY29kZVRvQ2FwRGF0YVJlY3VyKSk7XG4gICAgfVxuICAgIHJldHVybiBoYXJkZW4oZW5jb2RlVG9DYXBEYXRhUmVjdXIocGFzc2FibGUpKTtcbiAgfTtcbiAgcmV0dXJuIGhhcmRlbihlbmNvZGVUb0NhcERhdGEpO1xufTtcbmhhcmRlbihtYWtlRW5jb2RlVG9DYXBEYXRhKTtcbnZhciBkb250RGVjb2RlUmVtb3RhYmxlT3JQcm9taXNlRnJvbUNhcERhdGEgPSAoc2xvdEVuY29kaW5nKSA9PiB0aHJvd1JlZGFjdGVkYHJlbW90YWJsZSBvciBwcm9taXNlIHVuZXhwZWN0ZWQ6ICR7c2xvdEVuY29kaW5nfWA7XG52YXIgZG9udERlY29kZUVycm9yRnJvbUNhcERhdGEgPSAoZXJyb3JFbmNvZGluZykgPT4gdGhyb3dSZWRhY3RlZGBlcnJvciB1bmV4cGVjdGVkOiAke2Vycm9yRW5jb2Rpbmd9YDtcbnZhciBtYWtlRGVjb2RlRnJvbUNhcERhdGEgPSAoZGVjb2RlT3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IHtcbiAgICBkZWNvZGVSZW1vdGFibGVGcm9tQ2FwRGF0YSA9IGRvbnREZWNvZGVSZW1vdGFibGVPclByb21pc2VGcm9tQ2FwRGF0YSxcbiAgICBkZWNvZGVQcm9taXNlRnJvbUNhcERhdGEgPSBkb250RGVjb2RlUmVtb3RhYmxlT3JQcm9taXNlRnJvbUNhcERhdGEsXG4gICAgZGVjb2RlRXJyb3JGcm9tQ2FwRGF0YSA9IGRvbnREZWNvZGVFcnJvckZyb21DYXBEYXRhXG4gIH0gPSBkZWNvZGVPcHRpb25zO1xuICBkZWNvZGVSZW1vdGFibGVGcm9tQ2FwRGF0YSA9PT0gZGVjb2RlUHJvbWlzZUZyb21DYXBEYXRhIHx8IHRocm93UmVkYWN0ZWRgQW4gaW1wbGVtZW50YXRpb24gcmVzdHJpY3Rpb24gZm9yIG5vdzogSWYgZWl0aGVyIGRlY29kZVJlbW90YWJsZUZyb21DYXBEYXRhIG9yIGRlY29kZVByb21pc2VGcm9tQ2FwRGF0YSBpcyBwcm92aWRlZCwgYm90aCBtdXN0IGJlIHByb3ZpZGVkIGFuZCB0aGV5IG11c3QgYmUgdGhlIHNhbWU6ICR7cXVvdGUoXG4gICAgZGVjb2RlUmVtb3RhYmxlRnJvbUNhcERhdGFcbiAgKX0gdnMgJHtxdW90ZShkZWNvZGVQcm9taXNlRnJvbUNhcERhdGEpfWA7XG4gIGNvbnN0IGRlY29kZUZyb21DYXBEYXRhID0gKGpzb25FbmNvZGVkKSA9PiB7XG4gICAgaWYgKCFpc09iamVjdDIoanNvbkVuY29kZWQpKSB7XG4gICAgICByZXR1cm4ganNvbkVuY29kZWQ7XG4gICAgfVxuICAgIGlmIChpc0FycmF5NChqc29uRW5jb2RlZCkpIHtcbiAgICAgIHJldHVybiBqc29uRW5jb2RlZC5tYXAoKGVuY29kZWRWYWwpID0+IGRlY29kZUZyb21DYXBEYXRhKGVuY29kZWRWYWwpKTtcbiAgICB9IGVsc2UgaWYgKGhhc1FDbGFzcyhqc29uRW5jb2RlZCkpIHtcbiAgICAgIGNvbnN0IHFjbGFzcyA9IGpzb25FbmNvZGVkW1FDTEFTU107XG4gICAgICB0eXBlb2YgcWNsYXNzID09PSBcInN0cmluZ1wiIHx8IHRocm93UmVkYWN0ZWRgaW52YWxpZCAke3F1b3RlKFFDTEFTUyl9IHR5cGVvZiAke3F1b3RlKHR5cGVvZiBxY2xhc3MpfWA7XG4gICAgICBzd2l0Y2ggKHFjbGFzcykge1xuICAgICAgICAvL1xuICAgICAgICBjYXNlIFwidW5kZWZpbmVkXCI6IHtcbiAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJOYU5cIjoge1xuICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIkluZmluaXR5XCI6IHtcbiAgICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIi1JbmZpbml0eVwiOiB7XG4gICAgICAgICAgcmV0dXJuIC1JbmZpbml0eTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiYmlnaW50XCI6IHtcbiAgICAgICAgICBjb25zdCB7IGRpZ2l0cyB9ID0ganNvbkVuY29kZWQ7XG4gICAgICAgICAgdHlwZW9mIGRpZ2l0cyA9PT0gXCJzdHJpbmdcIiB8fCB0aHJvd1JlZGFjdGVkYGludmFsaWQgZGlnaXRzIHR5cGVvZiAke3F1b3RlKHR5cGVvZiBkaWdpdHMpfWA7XG4gICAgICAgICAgcmV0dXJuIEJpZ0ludChkaWdpdHMpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJAQGFzeW5jSXRlcmF0b3JcIjoge1xuICAgICAgICAgIHJldHVybiBTeW1ib2wuYXN5bmNJdGVyYXRvcjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwic3ltYm9sXCI6IHtcbiAgICAgICAgICBjb25zdCB7IG5hbWUgfSA9IGpzb25FbmNvZGVkO1xuICAgICAgICAgIHJldHVybiBwYXNzYWJsZVN5bWJvbEZvck5hbWUobmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInRhZ2dlZFwiOiB7XG4gICAgICAgICAgY29uc3QgeyB0YWcsIHBheWxvYWQgfSA9IGpzb25FbmNvZGVkO1xuICAgICAgICAgIHJldHVybiBtYWtlVGFnZ2VkKHRhZywgZGVjb2RlRnJvbUNhcERhdGEocGF5bG9hZCkpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJzbG90XCI6IHtcbiAgICAgICAgICBjb25zdCBkZWNvZGVkID0gZGVjb2RlUmVtb3RhYmxlRnJvbUNhcERhdGEoXG4gICAgICAgICAgICBqc29uRW5jb2RlZCxcbiAgICAgICAgICAgIGRlY29kZUZyb21DYXBEYXRhXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gZGVjb2RlZDtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiZXJyb3JcIjoge1xuICAgICAgICAgIGNvbnN0IGRlY29kZWQgPSBkZWNvZGVFcnJvckZyb21DYXBEYXRhKFxuICAgICAgICAgICAganNvbkVuY29kZWQsXG4gICAgICAgICAgICBkZWNvZGVGcm9tQ2FwRGF0YVxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKHBhc3NTdHlsZU9mKGRlY29kZWQpID09PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWNvZGVkO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYGludGVybmFsOiBkZWNvZGVFcnJvckZyb21DYXBEYXRhIG9wdGlvbiBtdXN0IHJldHVybiBhbiBlcnJvcjogJHtkZWNvZGVkfWA7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImhpbGJlcnRcIjoge1xuICAgICAgICAgIGNvbnN0IHsgb3JpZ2luYWwsIHJlc3QgfSA9IGpzb25FbmNvZGVkO1xuICAgICAgICAgIGhhc093blByb3BlcnR5T2YoanNvbkVuY29kZWQsIFwib3JpZ2luYWxcIikgfHwgdGhyb3dSZWRhY3RlZGBJbnZhbGlkIEhpbGJlcnQgSG90ZWwgZW5jb2RpbmcgJHtqc29uRW5jb2RlZH1gO1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgW1FDTEFTU106IGRlY29kZUZyb21DYXBEYXRhKG9yaWdpbmFsKSB9O1xuICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eU9mKGpzb25FbmNvZGVkLCBcInJlc3RcIikpIHtcbiAgICAgICAgICAgIGNvbnN0IGlzTm9uRW1wdHlPYmplY3QgPSB0eXBlb2YgcmVzdCA9PT0gXCJvYmplY3RcIiAmJiByZXN0ICE9PSBudWxsICYmIG93bktleXMxMChyZXN0KS5sZW5ndGggPj0gMTtcbiAgICAgICAgICAgIGlmICghaXNOb25FbXB0eU9iamVjdCkge1xuICAgICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFJlc3QgZW5jb2RpbmcgbXVzdCBiZSBhIG5vbi1lbXB0eSBvYmplY3Q6ICR7cmVzdH1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzdE9iaiA9IGRlY29kZUZyb21DYXBEYXRhKHJlc3QpO1xuICAgICAgICAgICAgIWhhc093blByb3BlcnR5T2YocmVzdE9iaiwgUUNMQVNTKSB8fCB0aHJvd1JlZGFjdGVkYFJlc3QgbXVzdCBub3QgY29udGFpbiBpdHMgb3duIGRlZmluaXRpb24gb2YgJHtxdW90ZShRQ0xBU1MpfWA7XG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0aWVzKHJlc3VsdCwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczYocmVzdE9iaikpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8vXG4gICAgICAgIGNhc2UgXCJpYmlkXCI6IHtcbiAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFRoZSBjYXBEYXRhIHByb3RvY29sIG5vIGxvbmdlciBzdXBwb3J0cyAke3F1b3RlKFFDTEFTUyl9ICR7cXVvdGUoXG4gICAgICAgICAgICBxY2xhc3NcbiAgICAgICAgICApfWA7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIHRocm93IGFzc2VydC5mYWlsKFxuICAgICAgICAgICAgcmVkYWN0ZWRgdW5yZWNvZ25pemVkICR7cXVvdGUoUUNMQVNTKX0gJHtxdW90ZShxY2xhc3MpfWAsXG4gICAgICAgICAgICBUeXBlRXJyb3JcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydCh0eXBlb2YganNvbkVuY29kZWQgPT09IFwib2JqZWN0XCIgJiYganNvbkVuY29kZWQgIT09IG51bGwpO1xuICAgICAgY29uc3QgZGVjb2RlRW50cnkgPSAoW25hbWUsIGVuY29kZWRWYWxdKSA9PiB7XG4gICAgICAgIHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiIHx8IHRocm93UmVkYWN0ZWRgUHJvcGVydHkgJHtxdW90ZShuYW1lKX0gb2YgJHtqc29uRW5jb2RlZH0gbXVzdCBiZSBhIHN0cmluZ2A7XG4gICAgICAgIHJldHVybiBbbmFtZSwgZGVjb2RlRnJvbUNhcERhdGEoZW5jb2RlZFZhbCldO1xuICAgICAgfTtcbiAgICAgIGNvbnN0IGRlY29kZWRFbnRyaWVzID0gZW50cmllczMoanNvbkVuY29kZWQpLm1hcChkZWNvZGVFbnRyeSk7XG4gICAgICByZXR1cm4gZnJvbUVudHJpZXMyKGRlY29kZWRFbnRyaWVzKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBoYXJkZW4oZGVjb2RlRnJvbUNhcERhdGEpO1xufTtcblxuLy9cbmZ1bmN0aW9uIGlzTmF0KGFsbGVnZWROdW0pIHtcbiAgaWYgKHR5cGVvZiBhbGxlZ2VkTnVtID09PSBcImJpZ2ludFwiKSB7XG4gICAgcmV0dXJuIGFsbGVnZWROdW0gPj0gMDtcbiAgfVxuICBpZiAodHlwZW9mIGFsbGVnZWROdW0gIT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIE51bWJlci5pc1NhZmVJbnRlZ2VyKGFsbGVnZWROdW0pICYmIGFsbGVnZWROdW0gPj0gMDtcbn1cbmZ1bmN0aW9uIE5hdChhbGxlZ2VkTnVtKSB7XG4gIGlmICh0eXBlb2YgYWxsZWdlZE51bSA9PT0gXCJiaWdpbnRcIikge1xuICAgIGlmIChhbGxlZ2VkTnVtIDwgMG4pIHtcbiAgICAgIHRocm93IFJhbmdlRXJyb3IoYCR7YWxsZWdlZE51bX0gaXMgbmVnYXRpdmVgKTtcbiAgICB9XG4gICAgcmV0dXJuIGFsbGVnZWROdW07XG4gIH1cbiAgaWYgKHR5cGVvZiBhbGxlZ2VkTnVtID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihhbGxlZ2VkTnVtKSkge1xuICAgICAgdGhyb3cgUmFuZ2VFcnJvcihgJHthbGxlZ2VkTnVtfSBpcyBub3QgYSBzYWZlIGludGVnZXJgKTtcbiAgICB9XG4gICAgaWYgKGFsbGVnZWROdW0gPCAwKSB7XG4gICAgICB0aHJvdyBSYW5nZUVycm9yKGAke2FsbGVnZWROdW19IGlzIG5lZ2F0aXZlYCk7XG4gICAgfVxuICAgIHJldHVybiBCaWdJbnQoYWxsZWdlZE51bSk7XG4gIH1cbiAgdGhyb3cgVHlwZUVycm9yKFxuICAgIGAke2FsbGVnZWROdW19IGlzIGEgJHt0eXBlb2YgYWxsZWdlZE51bX0gYnV0IG11c3QgYmUgYSBiaWdpbnQgb3IgYSBudW1iZXJgXG4gICk7XG59XG5cbi8vXG52YXIgeyBlbnRyaWVzOiBlbnRyaWVzNCwgZnJvbUVudHJpZXM6IGZyb21FbnRyaWVzMyB9ID0gT2JqZWN0O1xudmFyIG9iamVjdE1hcCA9IChvcmlnaW5hbCwgbWFwRm4pID0+IHtcbiAgY29uc3QgZW50cyA9IGVudHJpZXM0KG9yaWdpbmFsKTtcbiAgY29uc3QgbWFwRW50cyA9IGVudHMubWFwKFxuICAgIChbaywgdjJdKSA9PiAoXG4gICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgIFtrLCBtYXBGbih2MiwgayldXG4gICAgKVxuICApO1xuICByZXR1cm4gKFxuICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIGhhcmRlbihmcm9tRW50cmllczMobWFwRW50cykpXG4gICk7XG59O1xuaGFyZGVuKG9iamVjdE1hcCk7XG5cbi8vXG52YXIgeyBvd25LZXlzOiBvd25LZXlzMTEgfSA9IFJlZmxlY3Q7XG52YXIgeyBpc0FycmF5OiBpc0FycmF5NSB9ID0gQXJyYXk7XG52YXIgeyBpczogaXMyLCBlbnRyaWVzOiBlbnRyaWVzNSwgZnJvbUVudHJpZXM6IGZyb21FbnRyaWVzNCB9ID0gT2JqZWN0O1xudmFyIEJBTkcgPSBcIiFcIi5jaGFyQ29kZUF0KDApO1xudmFyIERBU0ggPSBcIi1cIi5jaGFyQ29kZUF0KDApO1xudmFyIHN0YXJ0c1NwZWNpYWwgPSAoZW5jb2RlZFN0cikgPT4ge1xuICBpZiAoZW5jb2RlZFN0ciA9PT0gXCJcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBjb2RlID0gZW5jb2RlZFN0ci5jaGFyQ29kZUF0KDApO1xuICByZXR1cm4gQkFORyA8PSBjb2RlICYmIGNvZGUgPD0gREFTSDtcbn07XG52YXIgZG9udEVuY29kZVJlbW90YWJsZVRvU21hbGxjYXBzID0gKHJlbSkgPT4gdGhyb3dSZWRhY3RlZGByZW1vdGFibGUgdW5leHBlY3RlZDogJHtyZW19YDtcbnZhciBkb250RW5jb2RlUHJvbWlzZVRvU21hbGxjYXBzID0gKHByb20pID0+IHRocm93UmVkYWN0ZWRgcHJvbWlzZSB1bmV4cGVjdGVkOiAke3Byb219YDtcbnZhciBkb250RW5jb2RlRXJyb3JUb1NtYWxsY2FwcyA9IChlcnIpID0+IHRocm93UmVkYWN0ZWRgZXJyb3Igb2JqZWN0IHVuZXhwZWN0ZWQ6ICR7cXVvdGUoZXJyKX1gO1xudmFyIG1ha2VFbmNvZGVUb1NtYWxsY2FwcyA9IChlbmNvZGVPcHRpb25zID0ge30pID0+IHtcbiAgY29uc3Qge1xuICAgIGVuY29kZVJlbW90YWJsZVRvU21hbGxjYXBzID0gZG9udEVuY29kZVJlbW90YWJsZVRvU21hbGxjYXBzLFxuICAgIGVuY29kZVByb21pc2VUb1NtYWxsY2FwcyA9IGRvbnRFbmNvZGVQcm9taXNlVG9TbWFsbGNhcHMsXG4gICAgZW5jb2RlRXJyb3JUb1NtYWxsY2FwcyA9IGRvbnRFbmNvZGVFcnJvclRvU21hbGxjYXBzXG4gIH0gPSBlbmNvZGVPcHRpb25zO1xuICBjb25zdCBhc3NlcnRFbmNvZGVkRXJyb3IgPSAoZW5jb2RpbmcpID0+IHtcbiAgICB0eXBlb2YgZW5jb2RpbmcgPT09IFwib2JqZWN0XCIgJiYgaGFzT3duUHJvcGVydHlPZihlbmNvZGluZywgXCIjZXJyb3JcIikgfHwgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbDogRXJyb3IgZW5jb2RpbmcgbXVzdCBoYXZlIFwiI2Vycm9yXCIgcHJvcGVydHk6ICR7cXVvdGUoXG4gICAgICBlbmNvZGluZ1xuICAgICl9YDtcbiAgICBjb25zdCBtZXNzYWdlID0gZW5jb2RpbmdbXCIjZXJyb3JcIl07XG4gICAgdHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgJiYgKCFzdGFydHNTcGVjaWFsKG1lc3NhZ2UpIHx8IG1lc3NhZ2UuY2hhckF0KDApID09PSBcIiFcIikgfHwgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbDogRXJyb3IgZW5jb2RpbmcgbXVzdCBoYXZlIHN0cmluZyBtZXNzYWdlOiAke3F1b3RlKG1lc3NhZ2UpfWA7XG4gIH07XG4gIGNvbnN0IGVuY29kZVRvU21hbGxjYXBzUmVjdXIgPSAocGFzc2FibGUpID0+IHtcbiAgICBjb25zdCBwYXNzU3R5bGUgPSBwYXNzU3R5bGVPZihwYXNzYWJsZSk7XG4gICAgc3dpdGNoIChwYXNzU3R5bGUpIHtcbiAgICAgIGNhc2UgXCJudWxsXCI6XG4gICAgICBjYXNlIFwiYm9vbGVhblwiOiB7XG4gICAgICAgIHJldHVybiBwYXNzYWJsZTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJzdHJpbmdcIjoge1xuICAgICAgICBpZiAoc3RhcnRzU3BlY2lhbChwYXNzYWJsZSkpIHtcbiAgICAgICAgICByZXR1cm4gYCEke3Bhc3NhYmxlfWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhc3NhYmxlO1xuICAgICAgfVxuICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOiB7XG4gICAgICAgIHJldHVybiBcIiN1bmRlZmluZWRcIjtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJudW1iZXJcIjoge1xuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKHBhc3NhYmxlKSkge1xuICAgICAgICAgIHJldHVybiBcIiNOYU5cIjtcbiAgICAgICAgfSBlbHNlIGlmIChwYXNzYWJsZSA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICByZXR1cm4gXCIjSW5maW5pdHlcIjtcbiAgICAgICAgfSBlbHNlIGlmIChwYXNzYWJsZSA9PT0gLUluZmluaXR5KSB7XG4gICAgICAgICAgcmV0dXJuIFwiIy1JbmZpbml0eVwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpczIocGFzc2FibGUsIC0wKSA/IDAgOiBwYXNzYWJsZTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJiaWdpbnRcIjoge1xuICAgICAgICBjb25zdCBzdHIgPSBTdHJpbmcocGFzc2FibGUpO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIC8qICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgIHBhc3NhYmxlIDwgMG4gPyBzdHIgOiBgKyR7c3RyfWBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJzeW1ib2xcIjoge1xuICAgICAgICBhc3NlcnRQYXNzYWJsZVN5bWJvbChwYXNzYWJsZSk7XG4gICAgICAgIGNvbnN0IG5hbWUgPSAoXG4gICAgICAgICAgLyogICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgbmFtZUZvclBhc3NhYmxlU3ltYm9sKHBhc3NhYmxlKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gYCUke25hbWV9YDtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5UmVjb3JkXCI6IHtcbiAgICAgICAgY29uc3QgbmFtZXMgPSBvd25LZXlzMTEocGFzc2FibGUpLnNvcnQoKTtcbiAgICAgICAgcmV0dXJuIGZyb21FbnRyaWVzNChcbiAgICAgICAgICBuYW1lcy5tYXAoKG5hbWUpID0+IFtcbiAgICAgICAgICAgIGVuY29kZVRvU21hbGxjYXBzUmVjdXIobmFtZSksXG4gICAgICAgICAgICBlbmNvZGVUb1NtYWxsY2Fwc1JlY3VyKHBhc3NhYmxlW25hbWVdKVxuICAgICAgICAgIF0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjYXNlIFwiY29weUFycmF5XCI6IHtcbiAgICAgICAgcmV0dXJuIHBhc3NhYmxlLm1hcChlbmNvZGVUb1NtYWxsY2Fwc1JlY3VyKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJ0YWdnZWRcIjoge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIFwiI3RhZ1wiOiBlbmNvZGVUb1NtYWxsY2Fwc1JlY3VyKGdldFRhZyhwYXNzYWJsZSkpLFxuICAgICAgICAgIHBheWxvYWQ6IGVuY29kZVRvU21hbGxjYXBzUmVjdXIocGFzc2FibGUucGF5bG9hZClcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJyZW1vdGFibGVcIjoge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBlbmNvZGVSZW1vdGFibGVUb1NtYWxsY2FwcyhcbiAgICAgICAgICBwYXNzYWJsZSxcbiAgICAgICAgICBlbmNvZGVUb1NtYWxsY2Fwc1JlY3VyXG4gICAgICAgICk7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInN0cmluZ1wiICYmIHJlc3VsdC5jaGFyQXQoMCkgPT09IFwiJFwiKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYGludGVybmFsOiBSZW1vdGFibGUgZW5jb2RpbmcgbXVzdCBzdGFydCB3aXRoIFwiJFwiOiAke3Jlc3VsdH1gO1xuICAgICAgfVxuICAgICAgY2FzZSBcInByb21pc2VcIjoge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBlbmNvZGVQcm9taXNlVG9TbWFsbGNhcHMoXG4gICAgICAgICAgcGFzc2FibGUsXG4gICAgICAgICAgZW5jb2RlVG9TbWFsbGNhcHNSZWN1clxuICAgICAgICApO1xuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXCJzdHJpbmdcIiAmJiByZXN1bHQuY2hhckF0KDApID09PSBcIiZcIikge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbDogUHJvbWlzZSBlbmNvZGluZyBtdXN0IHN0YXJ0IHdpdGggXCImXCI6ICR7cmVzdWx0fWA7XG4gICAgICB9XG4gICAgICBjYXNlIFwiZXJyb3JcIjoge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBlbmNvZGVFcnJvclRvU21hbGxjYXBzKHBhc3NhYmxlLCBlbmNvZGVUb1NtYWxsY2Fwc1JlY3VyKTtcbiAgICAgICAgYXNzZXJ0RW5jb2RlZEVycm9yKHJlc3VsdCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHRocm93IGFzc2VydC5mYWlsKFxuICAgICAgICAgIHJlZGFjdGVkYGludGVybmFsOiBVbnJlY29nbml6ZWQgcGFzc1N0eWxlICR7cXVvdGUocGFzc1N0eWxlKX1gLFxuICAgICAgICAgIFR5cGVFcnJvclxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgZW5jb2RlVG9TbWFsbGNhcHMgPSAocGFzc2FibGUpID0+IHtcbiAgICBpZiAoaXNFcnJvckxpa2UocGFzc2FibGUpKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBoYXJkZW4oXG4gICAgICAgIGVuY29kZUVycm9yVG9TbWFsbGNhcHMocGFzc2FibGUsIGVuY29kZVRvU21hbGxjYXBzUmVjdXIpXG4gICAgICApO1xuICAgICAgYXNzZXJ0RW5jb2RlZEVycm9yKHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gaGFyZGVuKGVuY29kZVRvU21hbGxjYXBzUmVjdXIocGFzc2FibGUpKTtcbiAgfTtcbiAgcmV0dXJuIGhhcmRlbihlbmNvZGVUb1NtYWxsY2Fwcyk7XG59O1xuaGFyZGVuKG1ha2VFbmNvZGVUb1NtYWxsY2Fwcyk7XG52YXIgZG9udERlY29kZVJlbW90YWJsZUZyb21TbWFsbGNhcHMgPSAoZW5jb2RpbmcpID0+IHRocm93UmVkYWN0ZWRgcmVtb3RhYmxlIHVuZXhwZWN0ZWQ6ICR7ZW5jb2Rpbmd9YDtcbnZhciBkb250RGVjb2RlUHJvbWlzZUZyb21TbWFsbGNhcHMgPSAoZW5jb2RpbmcpID0+IHRocm93UmVkYWN0ZWRgcHJvbWlzZSB1bmV4cGVjdGVkOiAke2VuY29kaW5nfWA7XG52YXIgZG9udERlY29kZUVycm9yRnJvbVNtYWxsY2FwcyA9IChlbmNvZGluZykgPT4gdGhyb3dSZWRhY3RlZGBlcnJvciB1bmV4cGVjdGVkOiAke3F1b3RlKGVuY29kaW5nKX1gO1xudmFyIG1ha2VEZWNvZGVGcm9tU21hbGxjYXBzID0gKGRlY29kZU9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCB7XG4gICAgZGVjb2RlUmVtb3RhYmxlRnJvbVNtYWxsY2FwcyA9IGRvbnREZWNvZGVSZW1vdGFibGVGcm9tU21hbGxjYXBzLFxuICAgIGRlY29kZVByb21pc2VGcm9tU21hbGxjYXBzID0gZG9udERlY29kZVByb21pc2VGcm9tU21hbGxjYXBzLFxuICAgIGRlY29kZUVycm9yRnJvbVNtYWxsY2FwcyA9IGRvbnREZWNvZGVFcnJvckZyb21TbWFsbGNhcHNcbiAgfSA9IGRlY29kZU9wdGlvbnM7XG4gIGNvbnN0IGRlY29kZUZyb21TbWFsbGNhcHMgPSAoZW5jb2RpbmcpID0+IHtcbiAgICBzd2l0Y2ggKHR5cGVvZiBlbmNvZGluZykge1xuICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgIGNhc2UgXCJudW1iZXJcIjoge1xuICAgICAgICByZXR1cm4gZW5jb2Rpbmc7XG4gICAgICB9XG4gICAgICBjYXNlIFwic3RyaW5nXCI6IHtcbiAgICAgICAgaWYgKCFzdGFydHNTcGVjaWFsKGVuY29kaW5nKSkge1xuICAgICAgICAgIHJldHVybiBlbmNvZGluZztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjMiA9IGVuY29kaW5nLmNoYXJBdCgwKTtcbiAgICAgICAgc3dpdGNoIChjMikge1xuICAgICAgICAgIGNhc2UgXCIhXCI6IHtcbiAgICAgICAgICAgIHJldHVybiBlbmNvZGluZy5zbGljZSgxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcIiVcIjoge1xuICAgICAgICAgICAgcmV0dXJuIHBhc3NhYmxlU3ltYm9sRm9yTmFtZShlbmNvZGluZy5zbGljZSgxKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCIjXCI6IHtcbiAgICAgICAgICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgICAgICAgICAgY2FzZSBcIiN1bmRlZmluZWRcIjoge1xuICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2FzZSBcIiNOYU5cIjoge1xuICAgICAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2FzZSBcIiNJbmZpbml0eVwiOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEluZmluaXR5O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgXCIjLUluZmluaXR5XCI6IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLUluZmluaXR5O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBhc3NlcnQuZmFpbChcbiAgICAgICAgICAgICAgICAgIHJlZGFjdGVkYHVua25vd24gY29uc3RhbnQgXCIke3F1b3RlKGVuY29kaW5nKX1cImAsXG4gICAgICAgICAgICAgICAgICBUeXBlRXJyb3JcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCIrXCI6XG4gICAgICAgICAgY2FzZSBcIi1cIjoge1xuICAgICAgICAgICAgcmV0dXJuIEJpZ0ludChlbmNvZGluZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCIkXCI6IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGRlY29kZVJlbW90YWJsZUZyb21TbWFsbGNhcHMoXG4gICAgICAgICAgICAgIGVuY29kaW5nLFxuICAgICAgICAgICAgICBkZWNvZGVGcm9tU21hbGxjYXBzXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKHBhc3NTdHlsZU9mKHJlc3VsdCkgIT09IFwicmVtb3RhYmxlXCIpIHtcbiAgICAgICAgICAgICAgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbDogZGVjb2RlUmVtb3RhYmxlRnJvbVNtYWxsY2FwcyBvcHRpb24gbXVzdCByZXR1cm4gYSByZW1vdGFibGU6ICR7cmVzdWx0fWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwiJlwiOiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBkZWNvZGVQcm9taXNlRnJvbVNtYWxsY2FwcyhcbiAgICAgICAgICAgICAgZW5jb2RpbmcsXG4gICAgICAgICAgICAgIGRlY29kZUZyb21TbWFsbGNhcHNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAocGFzc1N0eWxlT2YocmVzdWx0KSAhPT0gXCJwcm9taXNlXCIpIHtcbiAgICAgICAgICAgICAgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbDogZGVjb2RlUHJvbWlzZUZyb21TbWFsbGNhcHMgb3B0aW9uIG11c3QgcmV0dXJuIGEgcHJvbWlzZTogJHtyZXN1bHR9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgU3BlY2lhbCBjaGFyICR7cXVvdGUoXG4gICAgICAgICAgICAgIGMyXG4gICAgICAgICAgICApfSByZXNlcnZlZCBmb3IgZnV0dXJlIHVzZTogJHtlbmNvZGluZ31gO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2FzZSBcIm9iamVjdFwiOiB7XG4gICAgICAgIGlmIChlbmNvZGluZyA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBlbmNvZGluZztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnJheTUoZW5jb2RpbmcpKSB7XG4gICAgICAgICAgcmV0dXJuIGVuY29kaW5nLm1hcCgodmFsKSA9PiBkZWNvZGVGcm9tU21hbGxjYXBzKHZhbCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eU9mKGVuY29kaW5nLCBcIiN0YWdcIikpIHtcbiAgICAgICAgICBjb25zdCB7IFwiI3RhZ1wiOiB0YWcsIHBheWxvYWQsIC4uLnJlc3QgfSA9IGVuY29kaW5nO1xuICAgICAgICAgIHR5cGVvZiB0YWcgPT09IFwic3RyaW5nXCIgfHwgdGhyb3dSZWRhY3RlZGBWYWx1ZSBvZiBcIiN0YWdcIiwgdGhlIHRhZywgbXVzdCBiZSBhIHN0cmluZzogJHtlbmNvZGluZ31gO1xuICAgICAgICAgIG93bktleXMxMShyZXN0KS5sZW5ndGggPT09IDAgfHwgdGhyb3dSZWRhY3RlZGAjdGFnIHJlY29yZCB1bmV4cGVjdGVkIHByb3BlcnRpZXM6ICR7cXVvdGUob3duS2V5czExKHJlc3QpKX1gO1xuICAgICAgICAgIHJldHVybiBtYWtlVGFnZ2VkKFxuICAgICAgICAgICAgZGVjb2RlRnJvbVNtYWxsY2Fwcyh0YWcpLFxuICAgICAgICAgICAgZGVjb2RlRnJvbVNtYWxsY2FwcyhwYXlsb2FkKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5T2YoZW5jb2RpbmcsIFwiI2Vycm9yXCIpKSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gZGVjb2RlRXJyb3JGcm9tU21hbGxjYXBzKFxuICAgICAgICAgICAgZW5jb2RpbmcsXG4gICAgICAgICAgICBkZWNvZGVGcm9tU21hbGxjYXBzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBwYXNzU3R5bGVPZihyZXN1bHQpID09PSBcImVycm9yXCIgfHwgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbDogZGVjb2RlRXJyb3JGcm9tU21hbGxjYXBzIG9wdGlvbiBtdXN0IHJldHVybiBhbiBlcnJvcjogJHtyZXN1bHR9YDtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlY29kZUVudHJ5ID0gKFtlbmNvZGVkTmFtZSwgZW5jb2RlZFZhbF0pID0+IHtcbiAgICAgICAgICB0eXBlb2YgZW5jb2RlZE5hbWUgPT09IFwic3RyaW5nXCIgfHwgdGhyb3dSZWRhY3RlZGBQcm9wZXJ0eSBuYW1lICR7cXVvdGUoXG4gICAgICAgICAgICBlbmNvZGVkTmFtZVxuICAgICAgICAgICl9IG9mICR7ZW5jb2Rpbmd9IG11c3QgYmUgYSBzdHJpbmdgO1xuICAgICAgICAgIGVuY29kZWROYW1lLmNoYXJBdCgwKSAhPT0gXCIjXCIgfHwgdGhyb3dSZWRhY3RlZGBVbnJlY29nbml6ZWQgcmVjb3JkIHR5cGUgJHtxdW90ZShlbmNvZGVkTmFtZSl9OiAke2VuY29kaW5nfWA7XG4gICAgICAgICAgY29uc3QgbmFtZSA9IGRlY29kZUZyb21TbWFsbGNhcHMoZW5jb2RlZE5hbWUpO1xuICAgICAgICAgIHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiIHx8IHRocm93UmVkYWN0ZWRgRGVjb2RlZCBwcm9wZXJ0eSBuYW1lICR7bmFtZX0gZnJvbSAke2VuY29kaW5nfSBtdXN0IGJlIGEgc3RyaW5nYDtcbiAgICAgICAgICByZXR1cm4gW25hbWUsIGRlY29kZUZyb21TbWFsbGNhcHMoZW5jb2RlZFZhbCldO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBkZWNvZGVkRW50cmllcyA9IGVudHJpZXM1KGVuY29kaW5nKS5tYXAoZGVjb2RlRW50cnkpO1xuICAgICAgICByZXR1cm4gZnJvbUVudHJpZXM0KGRlY29kZWRFbnRyaWVzKTtcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgdGhyb3cgYXNzZXJ0LmZhaWwoXG4gICAgICAgICAgcmVkYWN0ZWRgaW50ZXJuYWw6IHVucmVjb2duaXplZCBKU09OIHR5cGVvZiAke3F1b3RlKFxuICAgICAgICAgICAgdHlwZW9mIGVuY29kaW5nXG4gICAgICAgICAgKX06ICR7ZW5jb2Rpbmd9YCxcbiAgICAgICAgICBUeXBlRXJyb3JcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBoYXJkZW4oZGVjb2RlRnJvbVNtYWxsY2Fwcyk7XG59O1xuXG4vL1xudmFyIHsgZGVmaW5lUHJvcGVydGllczogZGVmaW5lUHJvcGVydGllczIgfSA9IE9iamVjdDtcbnZhciB7IGlzQXJyYXk6IGlzQXJyYXk2IH0gPSBBcnJheTtcbnZhciB7IG93bktleXM6IG93bktleXMxMiB9ID0gUmVmbGVjdDtcbnZhciBkZWZhdWx0VmFsVG9TbG90Rm4gPSAoeCkgPT4geDtcbnZhciBkZWZhdWx0U2xvdFRvVmFsRm4gPSAoeCwgXykgPT4geDtcbnZhciBtYWtlTWFyc2hhbCA9IChjb252ZXJ0VmFsVG9TbG90ID0gZGVmYXVsdFZhbFRvU2xvdEZuLCBjb252ZXJ0U2xvdFRvVmFsID0gZGVmYXVsdFNsb3RUb1ZhbEZuLCB7XG4gIGVycm9yVGFnZ2luZyA9IFwib25cIixcbiAgbWFyc2hhbE5hbWUgPSBcImFub24tbWFyc2hhbFwiLFxuICAvL1xuICAvL1xuICBlcnJvcklkTnVtID0gMWU0LFxuICAvL1xuICAvL1xuICBtYXJzaGFsU2F2ZUVycm9yID0gKGVycikgPT4gY29uc29sZS5sb2coXCJUZW1wb3JhcnkgbG9nZ2luZyBvZiBzZW50IGVycm9yXCIsIGVyciksXG4gIC8vXG4gIC8vXG4gIHNlcmlhbGl6ZUJvZHlGb3JtYXQgPSBcImNhcGRhdGFcIlxufSA9IHt9KSA9PiB7XG4gIGFzc2VydC50eXBlb2YobWFyc2hhbE5hbWUsIFwic3RyaW5nXCIpO1xuICBlcnJvclRhZ2dpbmcgPT09IFwib25cIiB8fCBlcnJvclRhZ2dpbmcgPT09IFwib2ZmXCIgfHwgdGhyb3dSZWRhY3RlZGBUaGUgZXJyb3JUYWdnaW5nIG9wdGlvbiBjYW4gb25seSBiZSBcIm9uXCIgb3IgXCJvZmZcIiAke2Vycm9yVGFnZ2luZ31gO1xuICBjb25zdCBuZXh0RXJyb3JJZCA9ICgpID0+IHtcbiAgICBlcnJvcklkTnVtICs9IDE7XG4gICAgcmV0dXJuIGBlcnJvcjoke21hcnNoYWxOYW1lfSMke2Vycm9ySWROdW19YDtcbiAgfTtcbiAgY29uc3QgdG9DYXBEYXRhMiA9IChyb290KSA9PiB7XG4gICAgY29uc3Qgc2xvdHMgPSBbXTtcbiAgICBjb25zdCBzbG90TWFwID0gLyogICAgICAgICAgICovIG5ldyBNYXAoKTtcbiAgICBjb25zdCBlbmNvZGVTbG90Q29tbW9uID0gKHBhc3NhYmxlKSA9PiB7XG4gICAgICBsZXQgaW5kZXggPSBzbG90TWFwLmdldChwYXNzYWJsZSk7XG4gICAgICBpZiAoaW5kZXggIT09IHZvaWQgMCkge1xuICAgICAgICBhc3NlcnQudHlwZW9mKGluZGV4LCBcIm51bWJlclwiKTtcbiAgICAgICAgcmV0dXJuIGhhcmRlbih7IGluZGV4LCByZXBlYXQ6IHRydWUgfSk7XG4gICAgICB9XG4gICAgICBpbmRleCA9IHNsb3RzLmxlbmd0aDtcbiAgICAgIGNvbnN0IHNsb3QgPSBjb252ZXJ0VmFsVG9TbG90KHBhc3NhYmxlKTtcbiAgICAgIHNsb3RzLnB1c2goc2xvdCk7XG4gICAgICBzbG90TWFwLnNldChwYXNzYWJsZSwgaW5kZXgpO1xuICAgICAgcmV0dXJuIGhhcmRlbih7IGluZGV4LCByZXBlYXQ6IGZhbHNlIH0pO1xuICAgIH07XG4gICAgY29uc3QgZW5jb2RlRXJyb3JDb21tb24gPSAoZXJyLCBlbmNvZGVSZWN1cikgPT4ge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGVuY29kZVJlY3VyKGAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgYXNzZXJ0LnR5cGVvZihtZXNzYWdlLCBcInN0cmluZ1wiKTtcbiAgICAgIGNvbnN0IG5hbWUgPSBlbmNvZGVSZWN1cihgJHtlcnIubmFtZX1gKTtcbiAgICAgIGFzc2VydC50eXBlb2YobmFtZSwgXCJzdHJpbmdcIik7XG4gICAgICBpZiAoZXJyb3JUYWdnaW5nID09PSBcIm9uXCIpIHtcbiAgICAgICAgY29uc3QgZXJyb3JJZCA9IGVuY29kZVJlY3VyKG5leHRFcnJvcklkKCkpO1xuICAgICAgICBhc3NlcnQudHlwZW9mKGVycm9ySWQsIFwic3RyaW5nXCIpO1xuICAgICAgICBub3RlKGVyciwgcmVkYWN0ZWRgU2VudCBhcyAke2Vycm9ySWR9YCk7XG4gICAgICAgIG1hcnNoYWxTYXZlRXJyb3IoZXJyKTtcbiAgICAgICAgcmV0dXJuIGhhcmRlbih7IGVycm9ySWQsIG1lc3NhZ2UsIG5hbWUgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaGFyZGVuKHsgbWVzc2FnZSwgbmFtZSB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChzZXJpYWxpemVCb2R5Rm9ybWF0ID09PSBcImNhcGRhdGFcIikge1xuICAgICAgY29uc3QgZW5jb2RlU2xvdFRvQ2FwRGF0YSA9IChwYXNzYWJsZSwgaWZhY2UgPSB2b2lkIDApID0+IHtcbiAgICAgICAgY29uc3QgeyBpbmRleCwgcmVwZWF0IH0gPSBlbmNvZGVTbG90Q29tbW9uKHBhc3NhYmxlKTtcbiAgICAgICAgaWYgKHJlcGVhdCA9PT0gdHJ1ZSB8fCBpZmFjZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbih7IFtRQ0xBU1NdOiBcInNsb3RcIiwgaW5kZXggfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbih7IFtRQ0xBU1NdOiBcInNsb3RcIiwgaWZhY2UsIGluZGV4IH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3QgZW5jb2RlUmVtb3RhYmxlVG9DYXBEYXRhID0gKHZhbCwgX2VuY29kZVJlY3VyKSA9PiBlbmNvZGVTbG90VG9DYXBEYXRhKHZhbCwgZ2V0SW50ZXJmYWNlT2YodmFsKSk7XG4gICAgICBjb25zdCBlbmNvZGVQcm9taXNlVG9DYXBEYXRhID0gKHByb21pc2UsIF9lbmNvZGVSZWN1cikgPT4gZW5jb2RlU2xvdFRvQ2FwRGF0YShwcm9taXNlKTtcbiAgICAgIGNvbnN0IGVuY29kZUVycm9yVG9DYXBEYXRhID0gKGVyciwgZW5jb2RlUmVjdXIpID0+IHtcbiAgICAgICAgY29uc3QgZXJyRGF0YSA9IGVuY29kZUVycm9yQ29tbW9uKGVyciwgZW5jb2RlUmVjdXIpO1xuICAgICAgICByZXR1cm4gaGFyZGVuKHsgW1FDTEFTU106IFwiZXJyb3JcIiwgLi4uZXJyRGF0YSB9KTtcbiAgICAgIH07XG4gICAgICBjb25zdCBlbmNvZGVUb0NhcERhdGEgPSBtYWtlRW5jb2RlVG9DYXBEYXRhKHtcbiAgICAgICAgZW5jb2RlUmVtb3RhYmxlVG9DYXBEYXRhLFxuICAgICAgICBlbmNvZGVQcm9taXNlVG9DYXBEYXRhLFxuICAgICAgICBlbmNvZGVFcnJvclRvQ2FwRGF0YVxuICAgICAgfSk7XG4gICAgICBjb25zdCBlbmNvZGVkID0gZW5jb2RlVG9DYXBEYXRhKHJvb3QpO1xuICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KGVuY29kZWQpO1xuICAgICAgcmV0dXJuIGhhcmRlbih7XG4gICAgICAgIGJvZHksXG4gICAgICAgIHNsb3RzXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHNlcmlhbGl6ZUJvZHlGb3JtYXQgPT09IFwic21hbGxjYXBzXCIpIHtcbiAgICAgIGNvbnN0IGVuY29kZVNsb3RUb1NtYWxsY2FwcyA9IChwcmVmaXgsIHBhc3NhYmxlLCBpZmFjZSA9IHZvaWQgMCkgPT4ge1xuICAgICAgICBjb25zdCB7IGluZGV4LCByZXBlYXQgfSA9IGVuY29kZVNsb3RDb21tb24ocGFzc2FibGUpO1xuICAgICAgICBpZiAocmVwZWF0ID09PSB0cnVlIHx8IGlmYWNlID09PSB2b2lkIDApIHtcbiAgICAgICAgICByZXR1cm4gYCR7cHJlZml4fSR7aW5kZXh9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7cHJlZml4fSR7aW5kZXh9LiR7aWZhY2V9YDtcbiAgICAgIH07XG4gICAgICBjb25zdCBlbmNvZGVSZW1vdGFibGVUb1NtYWxsY2FwcyA9IChyZW1vdGFibGUsIF9lbmNvZGVSZWN1cikgPT4gZW5jb2RlU2xvdFRvU21hbGxjYXBzKFwiJFwiLCByZW1vdGFibGUsIGdldEludGVyZmFjZU9mKHJlbW90YWJsZSkpO1xuICAgICAgY29uc3QgZW5jb2RlUHJvbWlzZVRvU21hbGxjYXBzID0gKHByb21pc2UsIF9lbmNvZGVSZWN1cikgPT4gZW5jb2RlU2xvdFRvU21hbGxjYXBzKFwiJlwiLCBwcm9taXNlKTtcbiAgICAgIGNvbnN0IGVuY29kZUVycm9yVG9TbWFsbGNhcHMgPSAoZXJyLCBlbmNvZGVSZWN1cikgPT4ge1xuICAgICAgICBjb25zdCBlcnJEYXRhID0gZW5jb2RlRXJyb3JDb21tb24oZXJyLCBlbmNvZGVSZWN1cik7XG4gICAgICAgIGNvbnN0IHsgbWVzc2FnZSwgLi4ucmVzdCB9ID0gZXJyRGF0YTtcbiAgICAgICAgcmV0dXJuIGhhcmRlbih7IFwiI2Vycm9yXCI6IG1lc3NhZ2UsIC4uLnJlc3QgfSk7XG4gICAgICB9O1xuICAgICAgY29uc3QgZW5jb2RlVG9TbWFsbGNhcHMgPSBtYWtlRW5jb2RlVG9TbWFsbGNhcHMoe1xuICAgICAgICBlbmNvZGVSZW1vdGFibGVUb1NtYWxsY2FwcyxcbiAgICAgICAgZW5jb2RlUHJvbWlzZVRvU21hbGxjYXBzLFxuICAgICAgICBlbmNvZGVFcnJvclRvU21hbGxjYXBzXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGVuY29kZWQgPSBlbmNvZGVUb1NtYWxsY2Fwcyhyb290KTtcbiAgICAgIGNvbnN0IHNtYWxsY2Fwc0JvZHkgPSBKU09OLnN0cmluZ2lmeShlbmNvZGVkKTtcbiAgICAgIHJldHVybiBoYXJkZW4oe1xuICAgICAgICAvL1xuICAgICAgICAvL1xuICAgICAgICBib2R5OiBgIyR7c21hbGxjYXBzQm9keX1gLFxuICAgICAgICBzbG90c1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgVW5yZWNvZ25pemVkIHNlcmlhbGl6ZUJvZHlGb3JtYXQ6ICR7cXVvdGUoc2VyaWFsaXplQm9keUZvcm1hdCl9YDtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG1ha2VGdWxsUmV2aXZlID0gKHNsb3RzKSA9PiB7XG4gICAgY29uc3QgdmFsTWFwID0gLyogICAgICAgICAgICovIG5ldyBNYXAoKTtcbiAgICBjb25zdCBkZWNvZGVTbG90Q29tbW9uID0gKHNsb3REYXRhKSA9PiB7XG4gICAgICBjb25zdCB7IGlmYWNlID0gdm9pZCAwLCBpbmRleCwgLi4ucmVzdCB9ID0gc2xvdERhdGE7XG4gICAgICBvd25LZXlzMTIocmVzdCkubGVuZ3RoID09PSAwIHx8IHRocm93UmVkYWN0ZWRgdW5leHBlY3RlZCBlbmNvZGVkIHNsb3QgcHJvcGVydGllcyAke3F1b3RlKG93bktleXMxMihyZXN0KSl9YDtcbiAgICAgIGNvbnN0IGV4dGFudCA9IHZhbE1hcC5nZXQoaW5kZXgpO1xuICAgICAgaWYgKGV4dGFudCkge1xuICAgICAgICByZXR1cm4gZXh0YW50O1xuICAgICAgfVxuICAgICAgY29uc3Qgc2xvdCA9IHNsb3RzW051bWJlcihOYXQoaW5kZXgpKV07XG4gICAgICBjb25zdCB2YWwgPSBjb252ZXJ0U2xvdFRvVmFsKHNsb3QsIGlmYWNlKTtcbiAgICAgIHZhbE1hcC5zZXQoaW5kZXgsIHZhbCk7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH07XG4gICAgY29uc3QgZGVjb2RlRXJyb3JDb21tb24gPSAoZXJyRGF0YSwgZGVjb2RlUmVjdXIpID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZXJyb3JJZCA9IHZvaWQgMCxcbiAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgY2F1c2UgPSB2b2lkIDAsXG4gICAgICAgIGVycm9ycyA9IHZvaWQgMCxcbiAgICAgICAgLi4ucmVzdFxuICAgICAgfSA9IGVyckRhdGE7XG4gICAgICBjb25zdCBkTmFtZSA9IGRlY29kZVJlY3VyKG5hbWUpO1xuICAgICAgY29uc3QgZE1lc3NhZ2UgPSBkZWNvZGVSZWN1cihtZXNzYWdlKTtcbiAgICAgIGNvbnN0IGRFcnJvcklkID0gKFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgZXJyb3JJZCAmJiBkZWNvZGVSZWN1cihlcnJvcklkKVxuICAgICAgKTtcbiAgICAgIGlmICh0eXBlb2YgZE5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBpbnZhbGlkIGVycm9yIG5hbWUgdHlwZW9mICR7cXVvdGUodHlwZW9mIGROYW1lKX1gO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBkTWVzc2FnZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYGludmFsaWQgZXJyb3IgbWVzc2FnZSB0eXBlb2YgJHtxdW90ZSh0eXBlb2YgZE1lc3NhZ2UpfWA7XG4gICAgICB9XG4gICAgICBjb25zdCBlcnJDb25zdHJ1Y3RvciA9IGdldEVycm9yQ29uc3RydWN0b3IoZE5hbWUpIHx8IEVycm9yO1xuICAgICAgY29uc3QgZXJyb3JOYW1lID0gZEVycm9ySWQgPT09IHZvaWQgMCA/IGBSZW1vdGUke2VyckNvbnN0cnVjdG9yLm5hbWV9YCA6IGBSZW1vdGUke2VyckNvbnN0cnVjdG9yLm5hbWV9KCR7ZEVycm9ySWR9KWA7XG4gICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBlcnJvck5hbWUsXG4gICAgICAgIHNhbml0aXplOiBmYWxzZVxuICAgICAgfTtcbiAgICAgIGlmIChjYXVzZSkge1xuICAgICAgICBvcHRpb25zLmNhdXNlID0gZGVjb2RlUmVjdXIoY2F1c2UpO1xuICAgICAgfVxuICAgICAgaWYgKGVycm9ycykge1xuICAgICAgICBvcHRpb25zLmVycm9ycyA9IGRlY29kZVJlY3VyKGVycm9ycyk7XG4gICAgICB9XG4gICAgICBjb25zdCByYXdFcnJvciA9IG1ha2VFcnJvcihkTWVzc2FnZSwgZXJyQ29uc3RydWN0b3IsIG9wdGlvbnMpO1xuICAgICAgY29uc3QgZGVzY3MgPSBvYmplY3RNYXAocmVzdCwgKGRhdGEpID0+ICh7XG4gICAgICAgIHZhbHVlOiBkZWNvZGVSZWN1cihkYXRhKSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZVxuICAgICAgfSkpO1xuICAgICAgZGVmaW5lUHJvcGVydGllczIocmF3RXJyb3IsIGRlc2NzKTtcbiAgICAgIGhhcmRlbihyYXdFcnJvcik7XG4gICAgICByZXR1cm4gdG9QYXNzYWJsZUVycm9yKHJhd0Vycm9yKTtcbiAgICB9O1xuICAgIGNvbnN0IGRlY29kZVJlbW90YWJsZU9yUHJvbWlzZUZyb21DYXBEYXRhID0gKHJhd1RyZWUsIF9kZWNvZGVSZWN1cikgPT4ge1xuICAgICAgY29uc3QgeyBbUUNMQVNTXTogXywgLi4uc2xvdERhdGEgfSA9IHJhd1RyZWU7XG4gICAgICByZXR1cm4gZGVjb2RlU2xvdENvbW1vbihzbG90RGF0YSk7XG4gICAgfTtcbiAgICBjb25zdCBkZWNvZGVFcnJvckZyb21DYXBEYXRhID0gKHJhd1RyZWUsIGRlY29kZVJlY3VyKSA9PiB7XG4gICAgICBjb25zdCB7IFtRQ0xBU1NdOiBfLCAuLi5lcnJEYXRhIH0gPSByYXdUcmVlO1xuICAgICAgcmV0dXJuIGRlY29kZUVycm9yQ29tbW9uKGVyckRhdGEsIGRlY29kZVJlY3VyKTtcbiAgICB9O1xuICAgIGNvbnN0IHJldml2ZUZyb21DYXBEYXRhID0gbWFrZURlY29kZUZyb21DYXBEYXRhKHtcbiAgICAgIGRlY29kZVJlbW90YWJsZUZyb21DYXBEYXRhOiBkZWNvZGVSZW1vdGFibGVPclByb21pc2VGcm9tQ2FwRGF0YSxcbiAgICAgIGRlY29kZVByb21pc2VGcm9tQ2FwRGF0YTogZGVjb2RlUmVtb3RhYmxlT3JQcm9taXNlRnJvbUNhcERhdGEsXG4gICAgICBkZWNvZGVFcnJvckZyb21DYXBEYXRhXG4gICAgfSk7XG4gICAgY29uc3QgbWFrZURlY29kZVNsb3RGcm9tU21hbGxjYXBzID0gKHByZWZpeCkgPT4ge1xuICAgICAgcmV0dXJuIChzdHJpbmdFbmNvZGluZywgX2RlY29kZVJlY3VyKSA9PiB7XG4gICAgICAgIGFzc2VydChzdHJpbmdFbmNvZGluZy5jaGFyQXQoMCkgPT09IHByZWZpeCk7XG4gICAgICAgIGNvbnN0IGkzID0gc3RyaW5nRW5jb2RpbmcuaW5kZXhPZihcIi5cIik7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gTnVtYmVyKHN0cmluZ0VuY29kaW5nLnNsaWNlKDEsIGkzIDwgMCA/IHZvaWQgMCA6IGkzKSk7XG4gICAgICAgIGNvbnN0IGlmYWNlID0gaTMgPCAwID8gdm9pZCAwIDogc3RyaW5nRW5jb2Rpbmcuc2xpY2UoaTMgKyAxKTtcbiAgICAgICAgcmV0dXJuIGRlY29kZVNsb3RDb21tb24oeyBpZmFjZSwgaW5kZXggfSk7XG4gICAgICB9O1xuICAgIH07XG4gICAgY29uc3QgZGVjb2RlUmVtb3RhYmxlRnJvbVNtYWxsY2FwcyA9IG1ha2VEZWNvZGVTbG90RnJvbVNtYWxsY2FwcyhcIiRcIik7XG4gICAgY29uc3QgZGVjb2RlUHJvbWlzZUZyb21TbWFsbGNhcHMgPSBtYWtlRGVjb2RlU2xvdEZyb21TbWFsbGNhcHMoXCImXCIpO1xuICAgIGNvbnN0IGRlY29kZUVycm9yRnJvbVNtYWxsY2FwcyA9IChlbmNvZGluZywgZGVjb2RlUmVjdXIpID0+IHtcbiAgICAgIGNvbnN0IHsgXCIjZXJyb3JcIjogbWVzc2FnZSwgLi4ucmVzdEVyckRhdGEgfSA9IGVuY29kaW5nO1xuICAgICAgIWhhc093blByb3BlcnR5T2YocmVzdEVyckRhdGEsIFwibWVzc2FnZVwiKSB8fCB0aHJvd1JlZGFjdGVkYHVuZXhwZWN0ZWQgZW5jb2RlZCBlcnJvciBwcm9wZXJ0eSAke3F1b3RlKFwibWVzc2FnZVwiKX1gO1xuICAgICAgcmV0dXJuIGRlY29kZUVycm9yQ29tbW9uKHsgbWVzc2FnZSwgLi4ucmVzdEVyckRhdGEgfSwgZGVjb2RlUmVjdXIpO1xuICAgIH07XG4gICAgY29uc3QgcmV2aXZlRnJvbVNtYWxsY2FwcyA9IG1ha2VEZWNvZGVGcm9tU21hbGxjYXBzKHtcbiAgICAgIC8vXG4gICAgICBkZWNvZGVSZW1vdGFibGVGcm9tU21hbGxjYXBzLFxuICAgICAgLy9cbiAgICAgIGRlY29kZVByb21pc2VGcm9tU21hbGxjYXBzLFxuICAgICAgZGVjb2RlRXJyb3JGcm9tU21hbGxjYXBzXG4gICAgfSk7XG4gICAgcmV0dXJuIGhhcmRlbih7IHJldml2ZUZyb21DYXBEYXRhLCByZXZpdmVGcm9tU21hbGxjYXBzIH0pO1xuICB9O1xuICBjb25zdCBmcm9tQ2FwRGF0YSA9IChkYXRhKSA9PiB7XG4gICAgY29uc3QgeyBib2R5LCBzbG90cyB9ID0gZGF0YTtcbiAgICB0eXBlb2YgYm9keSA9PT0gXCJzdHJpbmdcIiB8fCB0aHJvd1JlZGFjdGVkYHVuc2VyaWFsaXplKCkgZ2l2ZW4gbm9uLWNhcGRhdGEgKC5ib2R5IGlzICR7Ym9keX0sIG5vdCBzdHJpbmcpYDtcbiAgICBpc0FycmF5NihkYXRhLnNsb3RzKSB8fCB0aHJvd1JlZGFjdGVkYHVuc2VyaWFsaXplKCkgZ2l2ZW4gbm9uLWNhcGRhdGEgKC5zbG90cyBhcmUgbm90IEFycmF5KWA7XG4gICAgY29uc3QgeyByZXZpdmVGcm9tQ2FwRGF0YSwgcmV2aXZlRnJvbVNtYWxsY2FwcyB9ID0gbWFrZUZ1bGxSZXZpdmUoc2xvdHMpO1xuICAgIGxldCByZXN1bHQ7XG4gICAgaWYgKGJvZHkuY2hhckF0KDApID09PSBcIiNcIikge1xuICAgICAgY29uc3Qgc21hbGxjYXBzQm9keSA9IGJvZHkuc2xpY2UoMSk7XG4gICAgICBjb25zdCBlbmNvZGluZyA9IGhhcmRlbihKU09OLnBhcnNlKHNtYWxsY2Fwc0JvZHkpKTtcbiAgICAgIHJlc3VsdCA9IGhhcmRlbihyZXZpdmVGcm9tU21hbGxjYXBzKGVuY29kaW5nKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJhd1RyZWUgPSBoYXJkZW4oSlNPTi5wYXJzZShib2R5KSk7XG4gICAgICByZXN1bHQgPSBoYXJkZW4ocmV2aXZlRnJvbUNhcERhdGEocmF3VHJlZSkpO1xuICAgIH1cbiAgICBhc3NlcnRQYXNzYWJsZShyZXN1bHQpO1xuICAgIHJldHVybiAoXG4gICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgcmVzdWx0XG4gICAgKTtcbiAgfTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgdG9DYXBEYXRhOiB0b0NhcERhdGEyLFxuICAgIGZyb21DYXBEYXRhLFxuICAgIC8vXG4gICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICBzZXJpYWxpemU6IHRvQ2FwRGF0YTIsXG4gICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIHVuc2VyaWFsaXplOiBmcm9tQ2FwRGF0YVxuICB9KTtcbn07XG5cbi8vXG52YXIgeyBmcmVlemU6IGZyZWV6ZTYgfSA9IE9iamVjdDtcbnZhciBkb05vdENvbnZlcnRWYWxUb1Nsb3QgPSAodmFsKSA9PiB0aHJvd1JlZGFjdGVkYE1hcnNoYWwncyBzdHJpbmdpZnkgcmVqZWN0cyBwcmVzZW5jZXMgYW5kIHByb21pc2VzICR7dmFsfWA7XG52YXIgZG9Ob3RDb252ZXJ0U2xvdFRvVmFsID0gKHNsb3QsIF9pZmFjZSkgPT4gdGhyb3dSZWRhY3RlZGBNYXJzaGFsJ3MgcGFyc2UgbXVzdCBub3QgZW5jb2RlIGFueSBzbG90cyAke3Nsb3R9YDtcbnZhciBiYWRBcnJheUhhbmRsZXIgPSBoYXJkZW4oe1xuICBnZXQ6IChfdGFyZ2V0LCBuYW1lLCBfcmVjZWl2ZXIpID0+IHtcbiAgICBpZiAobmFtZSA9PT0gXCJsZW5ndGhcIikge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHRocm93IHRocm93UmVkYWN0ZWRgTWFyc2hhbCdzIHBhcnNlIG11c3Qgbm90IGVuY29kZSBhbnkgc2xvdCBwb3NpdGlvbnMgJHtuYW1lfWA7XG4gIH1cbn0pO1xudmFyIGFycmF5VGFyZ2V0ID0gZnJlZXplNihcbiAgLyogICAgICAgICAgICAgICAgKi9cbiAgW11cbik7XG52YXIgYmFkQXJyYXkgPSBuZXcgUHJveHkoYXJyYXlUYXJnZXQsIGJhZEFycmF5SGFuZGxlcik7XG52YXIgeyBzZXJpYWxpemUsIHVuc2VyaWFsaXplIH0gPSBtYWtlTWFyc2hhbChcbiAgZG9Ob3RDb252ZXJ0VmFsVG9TbG90LFxuICBkb05vdENvbnZlcnRTbG90VG9WYWwsXG4gIHtcbiAgICBlcnJvclRhZ2dpbmc6IFwib2ZmXCIsXG4gICAgLy9cbiAgICBzZXJpYWxpemVCb2R5Rm9ybWF0OiBcImNhcGRhdGFcIlxuICB9XG4pO1xudmFyIHN0cmluZ2lmeSA9ICh2YWwpID0+IHNlcmlhbGl6ZSh2YWwpLmJvZHk7XG5oYXJkZW4oc3RyaW5naWZ5KTtcbnZhciBwYXJzZSA9IChzdHIpID0+IHVuc2VyaWFsaXplKFxuICAvL1xuICAvL1xuICAvL1xuICBmcmVlemU2KHtcbiAgICBib2R5OiBzdHIsXG4gICAgc2xvdHM6IGJhZEFycmF5XG4gIH0pXG4pO1xuaGFyZGVuKHBhcnNlKTtcblxuLy9cbnZhciB7IG93bktleXM6IG93bktleXMxMyB9ID0gUmVmbGVjdDtcbnZhciB7IGlzQXJyYXk6IGlzQXJyYXk3IH0gPSBBcnJheTtcbnZhciB7IHN0cmluZ2lmeTogcXVvdGUyIH0gPSBKU09OO1xudmFyIG1ha2VZZXNJbmRlbnRlciA9ICgpID0+IHtcbiAgY29uc3Qgc3RyaW5ncyA9IFtdO1xuICBsZXQgbGV2ZWwgPSAwO1xuICBsZXQgbmVlZFNwYWNlID0gZmFsc2U7XG4gIGNvbnN0IGxpbmUgPSAoKSA9PiB7XG4gICAgbmVlZFNwYWNlID0gZmFsc2U7XG4gICAgcmV0dXJuIHN0cmluZ3MucHVzaChcIlxcblwiLCBcIiAgXCIucmVwZWF0KGxldmVsKSk7XG4gIH07XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIG9wZW46IChvcGVuQnJhY2tldCkgPT4ge1xuICAgICAgbGV2ZWwgKz0gMTtcbiAgICAgIGlmIChuZWVkU3BhY2UpIHtcbiAgICAgICAgc3RyaW5ncy5wdXNoKFwiIFwiKTtcbiAgICAgIH1cbiAgICAgIG5lZWRTcGFjZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHN0cmluZ3MucHVzaChvcGVuQnJhY2tldCk7XG4gICAgfSxcbiAgICBsaW5lLFxuICAgIG5leHQ6ICh0b2tlbjIpID0+IHtcbiAgICAgIGlmIChuZWVkU3BhY2UgJiYgdG9rZW4yICE9PSBcIixcIikge1xuICAgICAgICBzdHJpbmdzLnB1c2goXCIgXCIpO1xuICAgICAgfVxuICAgICAgbmVlZFNwYWNlID0gdHJ1ZTtcbiAgICAgIHJldHVybiBzdHJpbmdzLnB1c2godG9rZW4yKTtcbiAgICB9LFxuICAgIGNsb3NlOiAoY2xvc2VCcmFja2V0KSA9PiB7XG4gICAgICBhc3NlcnQobGV2ZWwgPj0gMSk7XG4gICAgICBsZXZlbCAtPSAxO1xuICAgICAgbGluZSgpO1xuICAgICAgcmV0dXJuIHN0cmluZ3MucHVzaChjbG9zZUJyYWNrZXQpO1xuICAgIH0sXG4gICAgZG9uZTogKCkgPT4ge1xuICAgICAgYXNzZXJ0LmVxdWFsKGxldmVsLCAwKTtcbiAgICAgIHJldHVybiBzdHJpbmdzLmpvaW4oXCJcIik7XG4gICAgfVxuICB9KTtcbn07XG52YXIgYmFkUGFpclBhdHRlcm4gPSAvXig/Olxcd1xcd3w8PHw+PnxcXCtcXCt8LS18PCF8LT4pJC87XG52YXIgbWFrZU5vSW5kZW50ZXIgPSAoKSA9PiB7XG4gIGNvbnN0IHN0cmluZ3MgPSBbXTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgb3BlbjogKG9wZW5CcmFja2V0KSA9PiBzdHJpbmdzLnB1c2gob3BlbkJyYWNrZXQpLFxuICAgIGxpbmU6ICgpID0+IHN0cmluZ3MubGVuZ3RoLFxuICAgIG5leHQ6ICh0b2tlbjIpID0+IHtcbiAgICAgIGlmIChzdHJpbmdzLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgIGNvbnN0IGxhc3QgPSBzdHJpbmdzW3N0cmluZ3MubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChsYXN0Lmxlbmd0aCA+PSAxICYmIHRva2VuMi5sZW5ndGggPj0gMSkge1xuICAgICAgICAgIGNvbnN0IHBhaXIgPSBgJHtsYXN0W2xhc3QubGVuZ3RoIC0gMV19JHt0b2tlbjJbMF19YDtcbiAgICAgICAgICBpZiAoYmFkUGFpclBhdHRlcm4udGVzdChwYWlyKSkge1xuICAgICAgICAgICAgc3RyaW5ncy5wdXNoKFwiIFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmdzLnB1c2godG9rZW4yKTtcbiAgICB9LFxuICAgIGNsb3NlOiAoY2xvc2VCcmFja2V0KSA9PiB7XG4gICAgICBpZiAoc3RyaW5ncy5sZW5ndGggPj0gMSAmJiBzdHJpbmdzW3N0cmluZ3MubGVuZ3RoIC0gMV0gPT09IFwiLFwiKSB7XG4gICAgICAgIHN0cmluZ3MucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5ncy5wdXNoKGNsb3NlQnJhY2tldCk7XG4gICAgfSxcbiAgICBkb25lOiAoKSA9PiBzdHJpbmdzLmpvaW4oXCJcIilcbiAgfSk7XG59O1xudmFyIGlkZW50UGF0dGVybiA9IC9eW2EtekEtWl1cXHcqJC87XG5oYXJkZW4oaWRlbnRQYXR0ZXJuKTtcbnZhciBBdEF0UHJlZml4UGF0dGVybjIgPSAvXkBAKC4qKSQvO1xuaGFyZGVuKEF0QXRQcmVmaXhQYXR0ZXJuMik7XG52YXIgZGVjb2RlVG9KdXN0aW4gPSAoZW5jb2RpbmcsIHNob3VsZEluZGVudCA9IGZhbHNlLCBzbG90cyA9IFtdKSA9PiB7XG4gIGNvbnN0IHByZXBhcmUgPSAocmF3VHJlZSkgPT4ge1xuICAgIGlmICghaXNPYmplY3QyKHJhd1RyZWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFzc2VydC50eXBlb2YocmF3VHJlZSwgXCJvYmplY3RcIik7XG4gICAgYXNzZXJ0KHJhd1RyZWUgIT09IG51bGwpO1xuICAgIGlmIChRQ0xBU1MgaW4gcmF3VHJlZSkge1xuICAgICAgY29uc3QgcWNsYXNzID0gcmF3VHJlZVtRQ0xBU1NdO1xuICAgICAgdHlwZW9mIHFjbGFzcyA9PT0gXCJzdHJpbmdcIiB8fCB0aHJvd1JlZGFjdGVkYGludmFsaWQgcWNsYXNzIHR5cGVvZiAke3F1b3RlKHR5cGVvZiBxY2xhc3MpfWA7XG4gICAgICBhc3NlcnQoIWlzQXJyYXk3KHJhd1RyZWUpKTtcbiAgICAgIHN3aXRjaCAocmF3VHJlZVtcIkBxY2xhc3NcIl0pIHtcbiAgICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgICBjYXNlIFwiTmFOXCI6XG4gICAgICAgIGNhc2UgXCJJbmZpbml0eVwiOlxuICAgICAgICBjYXNlIFwiLUluZmluaXR5XCI6IHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImJpZ2ludFwiOiB7XG4gICAgICAgICAgY29uc3QgeyBkaWdpdHMgfSA9IHJhd1RyZWU7XG4gICAgICAgICAgdHlwZW9mIGRpZ2l0cyA9PT0gXCJzdHJpbmdcIiB8fCB0aHJvd1JlZGFjdGVkYGludmFsaWQgZGlnaXRzIHR5cGVvZiAke3F1b3RlKHR5cGVvZiBkaWdpdHMpfWA7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJAQGFzeW5jSXRlcmF0b3JcIjoge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwic3ltYm9sXCI6IHtcbiAgICAgICAgICBjb25zdCB7IG5hbWUgfSA9IHJhd1RyZWU7XG4gICAgICAgICAgYXNzZXJ0LnR5cGVvZihuYW1lLCBcInN0cmluZ1wiKTtcbiAgICAgICAgICBjb25zdCBzeW0gPSBwYXNzYWJsZVN5bWJvbEZvck5hbWUobmFtZSk7XG4gICAgICAgICAgYXNzZXJ0LnR5cGVvZihzeW0sIFwic3ltYm9sXCIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwidGFnZ2VkXCI6IHtcbiAgICAgICAgICBjb25zdCB7IHRhZywgcGF5bG9hZCB9ID0gcmF3VHJlZTtcbiAgICAgICAgICBhc3NlcnQudHlwZW9mKHRhZywgXCJzdHJpbmdcIik7XG4gICAgICAgICAgcHJlcGFyZShwYXlsb2FkKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInNsb3RcIjoge1xuICAgICAgICAgIGNvbnN0IHsgaW5kZXgsIGlmYWNlIH0gPSByYXdUcmVlO1xuICAgICAgICAgIGFzc2VydC50eXBlb2YoaW5kZXgsIFwibnVtYmVyXCIpO1xuICAgICAgICAgIE5hdChpbmRleCk7XG4gICAgICAgICAgaWYgKGlmYWNlICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgIGFzc2VydC50eXBlb2YoaWZhY2UsIFwic3RyaW5nXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImhpbGJlcnRcIjoge1xuICAgICAgICAgIGNvbnN0IHsgb3JpZ2luYWwsIHJlc3QgfSA9IHJhd1RyZWU7XG4gICAgICAgICAgXCJvcmlnaW5hbFwiIGluIHJhd1RyZWUgfHwgdGhyb3dSZWRhY3RlZGBJbnZhbGlkIEhpbGJlcnQgSG90ZWwgZW5jb2RpbmcgJHtyYXdUcmVlfWA7XG4gICAgICAgICAgcHJlcGFyZShvcmlnaW5hbCk7XG4gICAgICAgICAgaWYgKFwicmVzdFwiIGluIHJhd1RyZWUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdCAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFJlc3QgJHtyZXN0fSBlbmNvZGluZyBtdXN0IGJlIGFuIG9iamVjdGA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFJlc3QgJHtyZXN0fSBlbmNvZGluZyBtdXN0IG5vdCBiZSBudWxsYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0FycmF5NyhyZXN0KSkge1xuICAgICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFJlc3QgJHtyZXN0fSBlbmNvZGluZyBtdXN0IG5vdCBiZSBhbiBhcnJheWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoUUNMQVNTIGluIHJlc3QpIHtcbiAgICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBSZXN0IGVuY29kaW5nICR7cmVzdH0gbXVzdCBub3QgY29udGFpbiAke3F1b3RlKFFDTEFTUyl9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5hbWVzID0gb3duS2V5czEzKHJlc3QpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIG5hbWVzKSB7XG4gICAgICAgICAgICAgIHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiIHx8IHRocm93UmVkYWN0ZWRgUHJvcGVydHkgbmFtZSAke25hbWV9IG9mICR7cmF3VHJlZX0gbXVzdCBiZSBhIHN0cmluZ2A7XG4gICAgICAgICAgICAgIHByZXBhcmUocmVzdFtuYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiZXJyb3JcIjoge1xuICAgICAgICAgIGNvbnN0IHsgbmFtZSwgbWVzc2FnZSB9ID0gcmF3VHJlZTtcbiAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgaW52YWxpZCBlcnJvciBuYW1lIHR5cGVvZiAke3F1b3RlKHR5cGVvZiBuYW1lKX1gO1xuICAgICAgICAgIH1cbiAgICAgICAgICBnZXRFcnJvckNvbnN0cnVjdG9yKG5hbWUpICE9PSB2b2lkIDAgfHwgdGhyb3dSZWRhY3RlZGBNdXN0IGJlIHRoZSBuYW1lIG9mIGFuIEVycm9yIGNvbnN0cnVjdG9yICR7bmFtZX1gO1xuICAgICAgICAgIHR5cGVvZiBtZXNzYWdlID09PSBcInN0cmluZ1wiIHx8IHRocm93UmVkYWN0ZWRgaW52YWxpZCBlcnJvciBtZXNzYWdlIHR5cGVvZiAke3F1b3RlKHR5cGVvZiBtZXNzYWdlKX1gO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgYXNzZXJ0LmZhaWwocmVkYWN0ZWRgdW5yZWNvZ25pemVkICR7cXVvdGUoUUNMQVNTKX0gJHtxdW90ZShxY2xhc3MpfWAsIFR5cGVFcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQXJyYXk3KHJhd1RyZWUpKSB7XG4gICAgICBjb25zdCB7IGxlbmd0aCB9ID0gcmF3VHJlZTtcbiAgICAgIGZvciAobGV0IGkzID0gMDsgaTMgPCBsZW5ndGg7IGkzICs9IDEpIHtcbiAgICAgICAgcHJlcGFyZShyYXdUcmVlW2kzXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5hbWVzID0gb3duS2V5czEzKHJhd1RyZWUpO1xuICAgICAgZm9yIChjb25zdCBuYW1lIG9mIG5hbWVzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgUHJvcGVydHkgbmFtZSAke25hbWV9IG9mICR7cmF3VHJlZX0gbXVzdCBiZSBhIHN0cmluZ2A7XG4gICAgICAgIH1cbiAgICAgICAgcHJlcGFyZShyYXdUcmVlW25hbWVdKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IG1ha2VJbmRlbnRlciA9IHNob3VsZEluZGVudCA/IG1ha2VZZXNJbmRlbnRlciA6IG1ha2VOb0luZGVudGVyO1xuICBsZXQgb3V0ID0gbWFrZUluZGVudGVyKCk7XG4gIGNvbnN0IGRlY29kZTMgPSAocmF3VHJlZSkgPT4ge1xuICAgIHJldHVybiByZWN1cihyYXdUcmVlKTtcbiAgfTtcbiAgY29uc3QgZGVjb2RlUHJvcGVydHkgPSAobmFtZSwgdmFsdWUpID0+IHtcbiAgICBvdXQubGluZSgpO1xuICAgIGlmIChuYW1lID09PSBcIl9fcHJvdG9fX1wiKSB7XG4gICAgICBvdXQubmV4dChgW1wiX19wcm90b19fXCJdOmApO1xuICAgIH0gZWxzZSBpZiAoaWRlbnRQYXR0ZXJuLnRlc3QobmFtZSkpIHtcbiAgICAgIG91dC5uZXh0KGAke25hbWV9OmApO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubmV4dChgJHtxdW90ZTIobmFtZSl9OmApO1xuICAgIH1cbiAgICBkZWNvZGUzKHZhbHVlKTtcbiAgICBvdXQubmV4dChcIixcIik7XG4gIH07XG4gIGNvbnN0IHJlY3VyID0gKHJhd1RyZWUpID0+IHtcbiAgICBpZiAoIWlzT2JqZWN0MihyYXdUcmVlKSkge1xuICAgICAgcmV0dXJuIG91dC5uZXh0KHF1b3RlMihyYXdUcmVlKSk7XG4gICAgfVxuICAgIGFzc2VydC50eXBlb2YocmF3VHJlZSwgXCJvYmplY3RcIik7XG4gICAgYXNzZXJ0KHJhd1RyZWUgIT09IG51bGwpO1xuICAgIGlmIChRQ0xBU1MgaW4gcmF3VHJlZSkge1xuICAgICAgY29uc3QgcWNsYXNzID0gcmF3VHJlZVtRQ0xBU1NdO1xuICAgICAgYXNzZXJ0LnR5cGVvZihxY2xhc3MsIFwic3RyaW5nXCIpO1xuICAgICAgYXNzZXJ0KCFpc0FycmF5NyhyYXdUcmVlKSk7XG4gICAgICBzd2l0Y2ggKHJhd1RyZWVbXCJAcWNsYXNzXCJdKSB7XG4gICAgICAgIC8vXG4gICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgICAgY2FzZSBcIk5hTlwiOlxuICAgICAgICBjYXNlIFwiSW5maW5pdHlcIjpcbiAgICAgICAgY2FzZSBcIi1JbmZpbml0eVwiOiB7XG4gICAgICAgICAgcmV0dXJuIG91dC5uZXh0KHFjbGFzcyk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImJpZ2ludFwiOiB7XG4gICAgICAgICAgY29uc3QgeyBkaWdpdHMgfSA9IHJhd1RyZWU7XG4gICAgICAgICAgYXNzZXJ0LnR5cGVvZihkaWdpdHMsIFwic3RyaW5nXCIpO1xuICAgICAgICAgIHJldHVybiBvdXQubmV4dChgJHtCaWdJbnQoZGlnaXRzKX1uYCk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIkBAYXN5bmNJdGVyYXRvclwiOiB7XG4gICAgICAgICAgcmV0dXJuIG91dC5uZXh0KFwiU3ltYm9sLmFzeW5jSXRlcmF0b3JcIik7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInN5bWJvbFwiOiB7XG4gICAgICAgICAgY29uc3QgeyBuYW1lIH0gPSByYXdUcmVlO1xuICAgICAgICAgIGFzc2VydC50eXBlb2YobmFtZSwgXCJzdHJpbmdcIik7XG4gICAgICAgICAgY29uc3Qgc3ltID0gcGFzc2FibGVTeW1ib2xGb3JOYW1lKG5hbWUpO1xuICAgICAgICAgIGFzc2VydC50eXBlb2Yoc3ltLCBcInN5bWJvbFwiKTtcbiAgICAgICAgICBjb25zdCByZWdpc3RlcmVkTmFtZSA9IFN5bWJvbC5rZXlGb3Ioc3ltKTtcbiAgICAgICAgICBpZiAocmVnaXN0ZXJlZE5hbWUgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBBdEF0UHJlZml4UGF0dGVybjIuZXhlYyhuYW1lKTtcbiAgICAgICAgICAgIGFzc2VydChtYXRjaCAhPT0gbnVsbCk7XG4gICAgICAgICAgICBjb25zdCBzdWZmaXggPSBtYXRjaFsxXTtcbiAgICAgICAgICAgIGFzc2VydChTeW1ib2xbc3VmZml4XSA9PT0gc3ltKTtcbiAgICAgICAgICAgIGFzc2VydChpZGVudFBhdHRlcm4udGVzdChzdWZmaXgpKTtcbiAgICAgICAgICAgIHJldHVybiBvdXQubmV4dChgU3ltYm9sLiR7c3VmZml4fWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gb3V0Lm5leHQoYFN5bWJvbC5mb3IoJHtxdW90ZTIocmVnaXN0ZXJlZE5hbWUpfSlgKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwidGFnZ2VkXCI6IHtcbiAgICAgICAgICBjb25zdCB7IHRhZywgcGF5bG9hZCB9ID0gcmF3VHJlZTtcbiAgICAgICAgICBvdXQubmV4dChgbWFrZVRhZ2dlZCgke3F1b3RlMih0YWcpfSxgKTtcbiAgICAgICAgICBkZWNvZGUzKHBheWxvYWQpO1xuICAgICAgICAgIHJldHVybiBvdXQubmV4dChcIilcIik7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInNsb3RcIjoge1xuICAgICAgICAgIGxldCB7IGlmYWNlIH0gPSByYXdUcmVlO1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gTnVtYmVyKE5hdChyYXdUcmVlLmluZGV4KSk7XG4gICAgICAgICAgY29uc3QgbmVzdGVkUmVuZGVyID0gKGFyZykgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb2xkT3V0ID0gb3V0O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgb3V0ID0gbWFrZU5vSW5kZW50ZXIoKTtcbiAgICAgICAgICAgICAgZGVjb2RlMyhhcmcpO1xuICAgICAgICAgICAgICByZXR1cm4gb3V0LmRvbmUoKTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgIG91dCA9IG9sZE91dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChpbmRleCA8IHNsb3RzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qgc2xvdCA9IG5lc3RlZFJlbmRlcihzbG90c1tpbmRleF0pO1xuICAgICAgICAgICAgaWYgKGlmYWNlID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG91dC5uZXh0KGBzbG90VG9WYWwoJHtzbG90fSlgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmYWNlID0gbmVzdGVkUmVuZGVyKGlmYWNlKTtcbiAgICAgICAgICAgIHJldHVybiBvdXQubmV4dChgc2xvdFRvVmFsKCR7c2xvdH0sJHtpZmFjZX0pYCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpZmFjZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gb3V0Lm5leHQoYHNsb3QoJHtpbmRleH0pYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmYWNlID0gbmVzdGVkUmVuZGVyKGlmYWNlKTtcbiAgICAgICAgICByZXR1cm4gb3V0Lm5leHQoYHNsb3QoJHtpbmRleH0sJHtpZmFjZX0pYCk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImhpbGJlcnRcIjoge1xuICAgICAgICAgIGNvbnN0IHsgb3JpZ2luYWwsIHJlc3QgfSA9IHJhd1RyZWU7XG4gICAgICAgICAgb3V0Lm9wZW4oXCJ7XCIpO1xuICAgICAgICAgIGRlY29kZVByb3BlcnR5KFFDTEFTUywgb3JpZ2luYWwpO1xuICAgICAgICAgIGlmIChcInJlc3RcIiBpbiByYXdUcmVlKSB7XG4gICAgICAgICAgICBhc3NlcnQudHlwZW9mKHJlc3QsIFwib2JqZWN0XCIpO1xuICAgICAgICAgICAgYXNzZXJ0KHJlc3QgIT09IG51bGwpO1xuICAgICAgICAgICAgY29uc3QgbmFtZXMgPSBvd25LZXlzMTMocmVzdCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgbmFtZXMpIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBQcm9wZXJ0eSBuYW1lICR7cXVvdGUoXG4gICAgICAgICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICAgICAgKX0gb2YgJHtyZXN0fSBtdXN0IGJlIGEgc3RyaW5nYDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBkZWNvZGVQcm9wZXJ0eShuYW1lLCByZXN0W25hbWVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG91dC5jbG9zZShcIn1cIik7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImVycm9yXCI6IHtcbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIGNhdXNlID0gdm9pZCAwLFxuICAgICAgICAgICAgZXJyb3JzID0gdm9pZCAwXG4gICAgICAgICAgfSA9IHJhd1RyZWU7XG4gICAgICAgICAgY2F1c2UgPT09IHZvaWQgMCB8fCB0aHJvd1JlZGFjdGVkYGVycm9yIGNhdXNlIG5vdCB5ZXQgaW1wbGVtZW50ZWQgaW4gbWFyc2hhbC1qdXN0aW5gO1xuICAgICAgICAgIG5hbWUgIT09IGBBZ2dyZWdhdGVFcnJvcmAgfHwgdGhyb3dSZWRhY3RlZGBBZ2dyZWdhdGVFcnJvciBub3QgeWV0IGltcGxlbWVudGVkIGluIG1hcnNoYWwtanVzdGluYDtcbiAgICAgICAgICBlcnJvcnMgPT09IHZvaWQgMCB8fCB0aHJvd1JlZGFjdGVkYGVycm9yIGVycm9ycyBub3QgeWV0IGltcGxlbWVudGVkIGluIG1hcnNoYWwtanVzdGluYDtcbiAgICAgICAgICByZXR1cm4gb3V0Lm5leHQoYCR7bmFtZX0oJHtxdW90ZTIobWVzc2FnZSl9KWApO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICB0aHJvdyBhc3NlcnQuZmFpbChcbiAgICAgICAgICAgIHJlZGFjdGVkYHVucmVjb2duaXplZCAke3F1b3RlKFFDTEFTUyl9ICR7cXVvdGUocWNsYXNzKX1gLFxuICAgICAgICAgICAgVHlwZUVycm9yXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNBcnJheTcocmF3VHJlZSkpIHtcbiAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSByYXdUcmVlO1xuICAgICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gb3V0Lm5leHQoXCJbXVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dC5vcGVuKFwiW1wiKTtcbiAgICAgICAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IGxlbmd0aDsgaTMgKz0gMSkge1xuICAgICAgICAgIG91dC5saW5lKCk7XG4gICAgICAgICAgZGVjb2RlMyhyYXdUcmVlW2kzXSk7XG4gICAgICAgICAgb3V0Lm5leHQoXCIsXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQuY2xvc2UoXCJdXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBuYW1lcyA9IChcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgb3duS2V5czEzKHJhd1RyZWUpXG4gICAgICApO1xuICAgICAgaWYgKG5hbWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gb3V0Lm5leHQoXCJ7fVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dC5vcGVuKFwie1wiKTtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIG5hbWVzKSB7XG4gICAgICAgICAgZGVjb2RlUHJvcGVydHkobmFtZSwgcmF3VHJlZVtuYW1lXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dC5jbG9zZShcIn1cIik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBwcmVwYXJlKGVuY29kaW5nKTtcbiAgZGVjb2RlMyhlbmNvZGluZyk7XG4gIHJldHVybiBvdXQuZG9uZSgpO1xufTtcbmhhcmRlbihkZWNvZGVUb0p1c3Rpbik7XG5cbi8vXG52YXIgeyBpc0FycmF5OiBpc0FycmF5OCB9ID0gQXJyYXk7XG52YXIgeyBmcm9tRW50cmllczogZnJvbUVudHJpZXM1LCBpczogaXMzIH0gPSBPYmplY3Q7XG52YXIgeyBvd25LZXlzOiBvd25LZXlzMTQgfSA9IFJlZmxlY3Q7XG52YXIgckMwID0gL1tcXHgwMC1cXHgxRl0vO1xudmFyIGdldFN1ZmZpeCA9IChzdHIsIGluZGV4KSA9PiBpbmRleCA9PT0gMCA/IHN0ciA6IHN0ci5zdWJzdHJpbmcoaW5kZXgpO1xudmFyIHJlY29yZE5hbWVzID0gKHJlY29yZCkgPT4gKFxuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICBoYXJkZW4oXG4gICAgLyogICAgICAgICAgICAgICAgICAgKi9cbiAgICBvd25LZXlzMTQocmVjb3JkKS5zb3J0KCkucmV2ZXJzZSgpXG4gIClcbik7XG5oYXJkZW4ocmVjb3JkTmFtZXMpO1xudmFyIHJlY29yZFZhbHVlcyA9IChyZWNvcmQsIG5hbWVzKSA9PiBoYXJkZW4obmFtZXMubWFwKChuYW1lKSA9PiByZWNvcmRbbmFtZV0pKTtcbmhhcmRlbihyZWNvcmRWYWx1ZXMpO1xudmFyIHplcm9lcyA9IEFycmF5KDE2KS5maWxsKHZvaWQgMCkubWFwKChfLCBpMykgPT4gXCIwXCIucmVwZWF0KGkzKSk7XG52YXIgemVyb1BhZCA9IChuMiwgc2l6ZSkgPT4ge1xuICBjb25zdCBuU3RyID0gYCR7bjJ9YDtcbiAgY29uc3QgZmlsbExlbiA9IHNpemUgLSBuU3RyLmxlbmd0aDtcbiAgaWYgKGZpbGxMZW4gPT09IDApIHJldHVybiBuU3RyO1xuICBhc3NlcnQoZmlsbExlbiA+IDAgJiYgZmlsbExlbiA8IHplcm9lcy5sZW5ndGgpO1xuICByZXR1cm4gYCR7emVyb2VzW2ZpbGxMZW5dfSR7blN0cn1gO1xufTtcbmhhcmRlbih6ZXJvUGFkKTtcbnZhciBhc051bWJlciA9IG5ldyBGbG9hdDY0QXJyYXkoMSk7XG52YXIgYXNCaXRzID0gbmV3IEJpZ1VpbnQ2NEFycmF5KGFzTnVtYmVyLmJ1ZmZlcik7XG52YXIgQ2Fub25pY2FsTmFOQml0cyA9IFwiZmZmODAwMDAwMDAwMDAwMFwiO1xudmFyIGVuY29kZUJpbmFyeTY0ID0gKG4yKSA9PiB7XG4gIGlmIChpczMobjIsIC0wKSkge1xuICAgIG4yID0gMDtcbiAgfSBlbHNlIGlmIChpczMobjIsIE5hTikpIHtcbiAgICByZXR1cm4gYGYke0Nhbm9uaWNhbE5hTkJpdHN9YDtcbiAgfVxuICBhc051bWJlclswXSA9IG4yO1xuICBsZXQgYml0cyA9IGFzQml0c1swXTtcbiAgaWYgKG4yIDwgMCkge1xuICAgIGJpdHMgXj0gMHhmZmZmZmZmZmZmZmZmZmZmbjtcbiAgfSBlbHNlIHtcbiAgICBiaXRzIF49IDB4ODAwMDAwMDAwMDAwMDAwMG47XG4gIH1cbiAgcmV0dXJuIGBmJHt6ZXJvUGFkKGJpdHMudG9TdHJpbmcoMTYpLCAxNil9YDtcbn07XG52YXIgZGVjb2RlQmluYXJ5NjQgPSAoZW5jb2RlZCwgc2tpcCA9IDApID0+IHtcbiAgZW5jb2RlZC5jaGFyQXQoc2tpcCkgPT09IFwiZlwiIHx8IHRocm93UmVkYWN0ZWRgRW5jb2RlZCBudW1iZXIgZXhwZWN0ZWQ6ICR7ZW5jb2RlZH1gO1xuICBsZXQgYml0cyA9IEJpZ0ludChgMHgke2dldFN1ZmZpeChlbmNvZGVkLCBza2lwICsgMSl9YCk7XG4gIGlmIChlbmNvZGVkLmNoYXJBdChza2lwICsgMSkgPCBcIjhcIikge1xuICAgIGJpdHMgXj0gMHhmZmZmZmZmZmZmZmZmZmZmbjtcbiAgfSBlbHNlIHtcbiAgICBiaXRzIF49IDB4ODAwMDAwMDAwMDAwMDAwMG47XG4gIH1cbiAgYXNCaXRzWzBdID0gYml0cztcbiAgY29uc3QgcmVzdWx0ID0gYXNOdW1iZXJbMF07XG4gICFpczMocmVzdWx0LCAtMCkgfHwgdGhyb3dSZWRhY3RlZGBVbmV4cGVjdGVkIG5lZ2F0aXZlIHplcm86ICR7Z2V0U3VmZml4KGVuY29kZWQsIHNraXApfWA7XG4gIHJldHVybiByZXN1bHQ7XG59O1xudmFyIGVuY29kZUJpZ0ludCA9IChuMikgPT4ge1xuICBjb25zdCBhYnMgPSBuMiA8IDBuID8gLW4yIDogbjI7XG4gIGNvbnN0IG5EaWdpdHMgPSBhYnMudG9TdHJpbmcoKS5sZW5ndGg7XG4gIGNvbnN0IGxEaWdpdHMgPSBuRGlnaXRzLnRvU3RyaW5nKCkubGVuZ3RoO1xuICBpZiAobjIgPCAwbikge1xuICAgIHJldHVybiBgbiR7Ly9cbiAgICAvL1xuICAgIFwiI1wiLnJlcGVhdChsRGlnaXRzIC0gMSl9JHsvL1xuICAgICgxMCAqKiBsRGlnaXRzIC0gbkRpZ2l0cykudG9TdHJpbmcoKS5wYWRTdGFydChsRGlnaXRzLCBcIjBcIil9OiR7Ly9cbiAgICAoMTBuICoqIEJpZ0ludChuRGlnaXRzKSArIG4yKS50b1N0cmluZygpLnBhZFN0YXJ0KG5EaWdpdHMsIFwiMFwiKX1gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBgcCR7Ly9cbiAgICAvL1xuICAgIFwiflwiLnJlcGVhdChsRGlnaXRzIC0gMSl9JHsvL1xuICAgIG5EaWdpdHN9OiR7Ly9cbiAgICBuMn1gO1xuICB9XG59O1xudmFyIHJCaWdJbnRQYXlsb2FkID0gLyhbMC05XSspKDooWzAtOV0rJHwpfCkvcztcbnZhciBkZWNvZGVCaWdJbnQgPSAoZW5jb2RlZCkgPT4ge1xuICBjb25zdCB0eXBlUHJlZml4ID0gZW5jb2RlZC5jaGFyQXQoMCk7XG4gIHR5cGVQcmVmaXggPT09IFwicFwiIHx8IHR5cGVQcmVmaXggPT09IFwiblwiIHx8IHRocm93UmVkYWN0ZWRgRW5jb2RlZCBiaWdpbnQgZXhwZWN0ZWQ6ICR7ZW5jb2RlZH1gO1xuICBjb25zdCB7XG4gICAgaW5kZXg6IGxEaWdpdHMsXG4gICAgMTogc25EaWdpdHMsXG4gICAgMjogdGFpbCxcbiAgICAzOiBkaWdpdHNcbiAgfSA9IGVuY29kZWQubWF0Y2gockJpZ0ludFBheWxvYWQpIHx8IHRocm93UmVkYWN0ZWRgRGlnaXQgY291bnQgZXhwZWN0ZWQ6ICR7ZW5jb2RlZH1gO1xuICBzbkRpZ2l0cy5sZW5ndGggPT09IGxEaWdpdHMgfHwgdGhyb3dSZWRhY3RlZGBVbmFyeS1wcmVmaXhlZCBkZWNpbWFsIGRpZ2l0IGNvdW50IGV4cGVjdGVkOiAke2VuY29kZWR9YDtcbiAgbGV0IG5EaWdpdHMgPSBwYXJzZUludChzbkRpZ2l0cywgMTApO1xuICBpZiAodHlwZVByZWZpeCA9PT0gXCJuXCIpIHtcbiAgICBuRGlnaXRzID0gMTAgKiogLyogICAgICAgICAgICAgICAgICovXG4gICAgbERpZ2l0cyAtIG5EaWdpdHM7XG4gIH1cbiAgdGFpbC5jaGFyQXQoMCkgPT09IFwiOlwiIHx8IHRocm93UmVkYWN0ZWRgU2VwYXJhdG9yIGV4cGVjdGVkOiAke2VuY29kZWR9YDtcbiAgZGlnaXRzLmxlbmd0aCA9PT0gbkRpZ2l0cyB8fCB0aHJvd1JlZGFjdGVkYEZpeGVkLWxlbmd0aCBkaWdpdCBzZXF1ZW5jZSBleHBlY3RlZDogJHtlbmNvZGVkfWA7XG4gIGxldCBuMiA9IEJpZ0ludChkaWdpdHMpO1xuICBpZiAodHlwZVByZWZpeCA9PT0gXCJuXCIpIHtcbiAgICBuMiA9IC0oMTBuICoqIEJpZ0ludChuRGlnaXRzKSAtIG4yKTtcbiAgfVxuICByZXR1cm4gbjI7XG59O1xudmFyIHN0cmluZ0VzY2FwZXMgPSBBcnJheSgzNCkuZmlsbCh2b2lkIDApLm1hcCgoXywgY3ApID0+IHtcbiAgc3dpdGNoIChTdHJpbmcuZnJvbUNoYXJDb2RlKGNwKSkge1xuICAgIGNhc2UgXCIgXCI6XG4gICAgICByZXR1cm4gXCIhX1wiO1xuICAgIGNhc2UgXCIhXCI6XG4gICAgICByZXR1cm4gXCIhfFwiO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gYCEke1N0cmluZy5mcm9tQ2hhckNvZGUoY3AgKyAzMyl9YDtcbiAgfVxufSk7XG5zdHJpbmdFc2NhcGVzW1wiXlwiLmNoYXJDb2RlQXQoMCldID0gXCJfQFwiO1xuc3RyaW5nRXNjYXBlc1tcIl9cIi5jaGFyQ29kZUF0KDApXSA9IFwiX19cIjtcbnZhciBlbmNvZGVDb21wYWN0U3RyaW5nU3VmZml4ID0gKHN0cikgPT4gc3RyLnJlcGxhY2UoL1tcXDAtIV5fXS9nLCAoY2gpID0+IHN0cmluZ0VzY2FwZXNbY2guY2hhckNvZGVBdCgwKV0pO1xudmFyIGRlY29kZUNvbXBhY3RTdHJpbmdTdWZmaXggPSAoZW5jb2RlZCkgPT4ge1xuICByZXR1cm4gZW5jb2RlZC5yZXBsYWNlKC8oW1xcMC0hX10pKC58XFxuKT8vZywgKGVzYywgcHJlZml4LCBzdWZmaXgpID0+IHtcbiAgICBzd2l0Y2ggKGVzYykge1xuICAgICAgY2FzZSBcIiFfXCI6XG4gICAgICAgIHJldHVybiBcIiBcIjtcbiAgICAgIGNhc2UgXCIhfFwiOlxuICAgICAgICByZXR1cm4gXCIhXCI7XG4gICAgICBjYXNlIFwiX0BcIjpcbiAgICAgICAgcmV0dXJuIFwiXlwiO1xuICAgICAgY2FzZSBcIl9fXCI6XG4gICAgICAgIHJldHVybiBcIl9cIjtcbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgY29uc3QgY2ggPSAoXG4gICAgICAgICAgLyogICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgc3VmZml4XG4gICAgICAgICk7XG4gICAgICAgIHByZWZpeCA9PT0gXCIhXCIgJiYgc3VmZml4ICE9PSB2b2lkIDAgJiYgY2ggPj0gXCIhXCIgJiYgY2ggPD0gXCJAXCIgfHwgdGhyb3dSZWRhY3RlZGBpbnZhbGlkIHN0cmluZyBlc2NhcGU6ICR7cXVvdGUoZXNjKX1gO1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaC5jaGFyQ29kZUF0KDApIC0gMzMpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xudmFyIGVuY29kZUxlZ2FjeVN0cmluZ1N1ZmZpeCA9IChzdHIpID0+IHN0cjtcbnZhciBkZWNvZGVMZWdhY3lTdHJpbmdTdWZmaXggPSAoZW5jb2RlZCkgPT4gZW5jb2RlZDtcbnZhciBlbmNvZGVDb21wYWN0QXJyYXkgPSAoYXJyYXksIGVuY29kZVBhc3NhYmxlKSA9PiB7XG4gIGNvbnN0IGNoYXJzID0gW1wiXlwiXTtcbiAgZm9yIChjb25zdCBlbGVtZW50IG9mIGFycmF5KSB7XG4gICAgY29uc3QgZW5jID0gZW5jb2RlUGFzc2FibGUoZWxlbWVudCk7XG4gICAgY2hhcnMucHVzaChlbmMsIFwiIFwiKTtcbiAgfVxuICByZXR1cm4gY2hhcnMuam9pbihcIlwiKTtcbn07XG52YXIgZGVjb2RlQ29tcGFjdEFycmF5ID0gKGVuY29kZWQsIGRlY29kZVBhc3NhYmxlLCBza2lwID0gMCkgPT4ge1xuICBjb25zdCBlbGVtZW50cyA9IFtdO1xuICBsZXQgZGVwdGggPSAwO1xuICBsZXQgbmV4dEluZGV4ID0gc2tpcCArIDE7XG4gIGxldCBjdXJyZW50RWxlbWVudFN0YXJ0ID0gc2tpcCArIDE7XG4gIGZvciAoY29uc3QgeyAwOiBjaCwgaW5kZXg6IGkzIH0gb2YgZW5jb2RlZC5tYXRjaEFsbCgvW1xcXiBdL2cpKSB7XG4gICAgY29uc3QgaW5kZXggPSAoXG4gICAgICAvKiAgICAgICAgICAgICAgICAgKi9cbiAgICAgIGkzXG4gICAgKTtcbiAgICBpZiAoaW5kZXggPD0gc2tpcCkge1xuICAgICAgaWYgKGluZGV4ID09PSBza2lwKSB7XG4gICAgICAgIGNoID09PSBcIl5cIiB8fCB0aHJvd1JlZGFjdGVkYEVuY29kZWQgYXJyYXkgZXhwZWN0ZWQ6ICR7Z2V0U3VmZml4KGVuY29kZWQsIHNraXApfWA7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gXCJeXCIpIHtcbiAgICAgIGRlcHRoICs9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpbmRleCA9PT0gbmV4dEluZGV4KSB7XG4gICAgICAgIGRlcHRoIC09IDE7XG4gICAgICAgIGRlcHRoID49IDAgfHwgLy9cbiAgICAgICAgdGhyb3dSZWRhY3RlZGB1bmV4cGVjdGVkIGFycmF5IGVsZW1lbnQgdGVybWluYXRvcjogJHtlbmNvZGVkLnNsaWNlKHNraXAsIGluZGV4ICsgMil9YDtcbiAgICAgIH1cbiAgICAgIGlmIChkZXB0aCA9PT0gMCkge1xuICAgICAgICBlbGVtZW50cy5wdXNoKFxuICAgICAgICAgIGRlY29kZVBhc3NhYmxlKGVuY29kZWQuc2xpY2UoY3VycmVudEVsZW1lbnRTdGFydCwgaW5kZXgpKVxuICAgICAgICApO1xuICAgICAgICBjdXJyZW50RWxlbWVudFN0YXJ0ID0gaW5kZXggKyAxO1xuICAgICAgfVxuICAgIH1cbiAgICBuZXh0SW5kZXggPSBpbmRleCArIDE7XG4gIH1cbiAgZGVwdGggPT09IDAgfHwgdGhyb3dSZWRhY3RlZGB1bnRlcm1pbmF0ZWQgYXJyYXk6ICR7Z2V0U3VmZml4KGVuY29kZWQsIHNraXApfWA7XG4gIG5leHRJbmRleCA9PT0gZW5jb2RlZC5sZW5ndGggfHwgdGhyb3dSZWRhY3RlZGB1bnRlcm1pbmF0ZWQgYXJyYXkgZWxlbWVudDogJHtnZXRTdWZmaXgoXG4gICAgZW5jb2RlZCxcbiAgICBjdXJyZW50RWxlbWVudFN0YXJ0XG4gICl9YDtcbiAgcmV0dXJuIGhhcmRlbihlbGVtZW50cyk7XG59O1xudmFyIGVuY29kZUxlZ2FjeUFycmF5ID0gKGFycmF5LCBlbmNvZGVQYXNzYWJsZSkgPT4ge1xuICBjb25zdCBjaGFycyA9IFtcIltcIl07XG4gIGZvciAoY29uc3QgZWxlbWVudCBvZiBhcnJheSkge1xuICAgIGNvbnN0IGVuYyA9IGVuY29kZVBhc3NhYmxlKGVsZW1lbnQpO1xuICAgIGZvciAoY29uc3QgYzIgb2YgZW5jKSB7XG4gICAgICBpZiAoYzIgPT09IFwiXFwwXCIgfHwgYzIgPT09IFwiXHUwMDAxXCIpIHtcbiAgICAgICAgY2hhcnMucHVzaChcIlx1MDAwMVwiKTtcbiAgICAgIH1cbiAgICAgIGNoYXJzLnB1c2goYzIpO1xuICAgIH1cbiAgICBjaGFycy5wdXNoKFwiXFwwXCIpO1xuICB9XG4gIHJldHVybiBjaGFycy5qb2luKFwiXCIpO1xufTtcbnZhciBkZWNvZGVMZWdhY3lBcnJheSA9IChlbmNvZGVkLCBkZWNvZGVQYXNzYWJsZSwgc2tpcCA9IDApID0+IHtcbiAgY29uc3QgZWxlbWVudHMgPSBbXTtcbiAgY29uc3QgZWxlbUNoYXJzID0gW107XG4gIGxldCBzdGlsbFRvU2tpcCA9IHNraXAgKyAxO1xuICBsZXQgaW5Fc2NhcGUgPSBmYWxzZTtcbiAgZm9yIChjb25zdCBjMiBvZiBlbmNvZGVkKSB7XG4gICAgaWYgKHN0aWxsVG9Ta2lwID4gMCkge1xuICAgICAgc3RpbGxUb1NraXAgLT0gMTtcbiAgICAgIGlmIChzdGlsbFRvU2tpcCA9PT0gMCkge1xuICAgICAgICBjMiA9PT0gXCJbXCIgfHwgdGhyb3dSZWRhY3RlZGBFbmNvZGVkIGFycmF5IGV4cGVjdGVkOiAke2dldFN1ZmZpeChlbmNvZGVkLCBza2lwKX1gO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaW5Fc2NhcGUpIHtcbiAgICAgIGMyID09PSBcIlxcMFwiIHx8IGMyID09PSBcIlx1MDAwMVwiIHx8IHRocm93UmVkYWN0ZWRgVW5leHBlY3RlZCBjaGFyYWN0ZXIgYWZ0ZXIgdTAwMDEgZXNjYXBlOiAke2MyfWA7XG4gICAgICBlbGVtQ2hhcnMucHVzaChjMik7XG4gICAgfSBlbHNlIGlmIChjMiA9PT0gXCJcXDBcIikge1xuICAgICAgY29uc3QgZW5jb2RlZEVsZW1lbnQgPSBlbGVtQ2hhcnMuam9pbihcIlwiKTtcbiAgICAgIGVsZW1DaGFycy5sZW5ndGggPSAwO1xuICAgICAgY29uc3QgZWxlbWVudCA9IGRlY29kZVBhc3NhYmxlKGVuY29kZWRFbGVtZW50KTtcbiAgICAgIGVsZW1lbnRzLnB1c2goZWxlbWVudCk7XG4gICAgfSBlbHNlIGlmIChjMiA9PT0gXCJcdTAwMDFcIikge1xuICAgICAgaW5Fc2NhcGUgPSB0cnVlO1xuICAgICAgY29udGludWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1DaGFycy5wdXNoKGMyKTtcbiAgICB9XG4gICAgaW5Fc2NhcGUgPSBmYWxzZTtcbiAgfVxuICAhaW5Fc2NhcGUgfHwgdGhyb3dSZWRhY3RlZGB1bmV4cGVjdGVkIGVuZCBvZiBlbmNvZGluZyAke2dldFN1ZmZpeChlbmNvZGVkLCBza2lwKX1gO1xuICBlbGVtQ2hhcnMubGVuZ3RoID09PSAwIHx8IHRocm93UmVkYWN0ZWRgZW5jb2RpbmcgdGVybWluYXRlZCBlYXJseTogJHtnZXRTdWZmaXgoZW5jb2RlZCwgc2tpcCl9YDtcbiAgcmV0dXJuIGhhcmRlbihlbGVtZW50cyk7XG59O1xudmFyIGVuY29kZVJlY29yZCA9IChyZWNvcmQsIGVuY29kZUFycmF5MiwgZW5jb2RlUGFzc2FibGUpID0+IHtcbiAgY29uc3QgbmFtZXMgPSByZWNvcmROYW1lcyhyZWNvcmQpO1xuICBjb25zdCB2YWx1ZXM4ID0gcmVjb3JkVmFsdWVzKHJlY29yZCwgbmFtZXMpO1xuICByZXR1cm4gYCgke2VuY29kZUFycmF5MihoYXJkZW4oW25hbWVzLCB2YWx1ZXM4XSksIGVuY29kZVBhc3NhYmxlKX1gO1xufTtcbnZhciBkZWNvZGVSZWNvcmQgPSAoZW5jb2RlZCwgZGVjb2RlQXJyYXkyLCBkZWNvZGVQYXNzYWJsZSwgc2tpcCA9IDApID0+IHtcbiAgYXNzZXJ0KGVuY29kZWQuY2hhckF0KHNraXApID09PSBcIihcIik7XG4gIGNvbnN0IHVuemlwcGVkRW50cmllcyA9IGRlY29kZUFycmF5MihlbmNvZGVkLCBkZWNvZGVQYXNzYWJsZSwgc2tpcCArIDEpO1xuICB1bnppcHBlZEVudHJpZXMubGVuZ3RoID09PSAyIHx8IHRocm93UmVkYWN0ZWRgZXhwZWN0ZWQga2V5cyx2YWx1ZXMgcGFpcjogJHtnZXRTdWZmaXgoZW5jb2RlZCwgc2tpcCl9YDtcbiAgY29uc3QgW2tleXM3LCB2YWxzXSA9IHVuemlwcGVkRW50cmllcztcbiAgcGFzc1N0eWxlT2Yoa2V5czcpID09PSBcImNvcHlBcnJheVwiICYmIHBhc3NTdHlsZU9mKHZhbHMpID09PSBcImNvcHlBcnJheVwiICYmIGtleXM3Lmxlbmd0aCA9PT0gdmFscy5sZW5ndGggJiYga2V5czcuZXZlcnkoKGtleSkgPT4gdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIikgfHwgdGhyb3dSZWRhY3RlZGBub3QgYSB2YWxpZCByZWNvcmQgZW5jb2Rpbmc6ICR7Z2V0U3VmZml4KGVuY29kZWQsIHNraXApfWA7XG4gIGNvbnN0IG1hcEVudHJpZXMgPSBrZXlzNy5tYXAoKGtleSwgaTMpID0+IFtrZXksIHZhbHNbaTNdXSk7XG4gIGNvbnN0IHJlY29yZCA9IGhhcmRlbihmcm9tRW50cmllczUobWFwRW50cmllcykpO1xuICBhc3NlcnRSZWNvcmQocmVjb3JkLCBcImRlY29kZWQgcmVjb3JkXCIpO1xuICByZXR1cm4gcmVjb3JkO1xufTtcbnZhciBlbmNvZGVUYWdnZWQgPSAodGFnZ2VkLCBlbmNvZGVBcnJheTIsIGVuY29kZVBhc3NhYmxlKSA9PiBgOiR7ZW5jb2RlQXJyYXkyKGhhcmRlbihbZ2V0VGFnKHRhZ2dlZCksIHRhZ2dlZC5wYXlsb2FkXSksIGVuY29kZVBhc3NhYmxlKX1gO1xudmFyIGRlY29kZVRhZ2dlZCA9IChlbmNvZGVkLCBkZWNvZGVBcnJheTIsIGRlY29kZVBhc3NhYmxlLCBza2lwID0gMCkgPT4ge1xuICBhc3NlcnQoZW5jb2RlZC5jaGFyQXQoc2tpcCkgPT09IFwiOlwiKTtcbiAgY29uc3QgdGFnZ2VkUGF5bG9hZCA9IGRlY29kZUFycmF5MihlbmNvZGVkLCBkZWNvZGVQYXNzYWJsZSwgc2tpcCArIDEpO1xuICB0YWdnZWRQYXlsb2FkLmxlbmd0aCA9PT0gMiB8fCB0aHJvd1JlZGFjdGVkYGV4cGVjdGVkIHRhZyxwYXlsb2FkIHBhaXI6ICR7Z2V0U3VmZml4KGVuY29kZWQsIHNraXApfWA7XG4gIGNvbnN0IFt0YWcsIHBheWxvYWRdID0gdGFnZ2VkUGF5bG9hZDtcbiAgcGFzc1N0eWxlT2YodGFnKSA9PT0gXCJzdHJpbmdcIiB8fCB0aHJvd1JlZGFjdGVkYG5vdCBhIHZhbGlkIHRhZ2dlZCBlbmNvZGluZzogJHtnZXRTdWZmaXgoZW5jb2RlZCwgc2tpcCl9YDtcbiAgcmV0dXJuIG1ha2VUYWdnZWQodGFnLCBwYXlsb2FkKTtcbn07XG52YXIgbWFrZUVuY29kZVJlbW90YWJsZSA9ICh1bnNhZmVFbmNvZGVSZW1vdGFibGUsIHZlcmlmeUVuY29kaW5nKSA9PiB7XG4gIGNvbnN0IGVuY29kZVJlbW90YWJsZSA9IChyNSwgaW5uZXJFbmNvZGUpID0+IHtcbiAgICBjb25zdCBlbmNvZGluZyA9IHVuc2FmZUVuY29kZVJlbW90YWJsZShyNSwgaW5uZXJFbmNvZGUpO1xuICAgIHR5cGVvZiBlbmNvZGluZyA9PT0gXCJzdHJpbmdcIiAmJiBlbmNvZGluZy5jaGFyQXQoMCkgPT09IFwiclwiIHx8IHRocm93UmVkYWN0ZWRgUmVtb3RhYmxlIGVuY29kaW5nIG11c3Qgc3RhcnQgd2l0aCBcInJcIjogJHtlbmNvZGluZ31gO1xuICAgIHZlcmlmeUVuY29kaW5nKGVuY29kaW5nLCBcIlJlbW90YWJsZVwiKTtcbiAgICByZXR1cm4gZW5jb2Rpbmc7XG4gIH07XG4gIHJldHVybiBlbmNvZGVSZW1vdGFibGU7XG59O1xudmFyIG1ha2VFbmNvZGVQcm9taXNlID0gKHVuc2FmZUVuY29kZVByb21pc2UsIHZlcmlmeUVuY29kaW5nKSA9PiB7XG4gIGNvbnN0IGVuY29kZVByb21pc2UgPSAocDQsIGlubmVyRW5jb2RlKSA9PiB7XG4gICAgY29uc3QgZW5jb2RpbmcgPSB1bnNhZmVFbmNvZGVQcm9taXNlKHA0LCBpbm5lckVuY29kZSk7XG4gICAgdHlwZW9mIGVuY29kaW5nID09PSBcInN0cmluZ1wiICYmIGVuY29kaW5nLmNoYXJBdCgwKSA9PT0gXCI/XCIgfHwgdGhyb3dSZWRhY3RlZGBQcm9taXNlIGVuY29kaW5nIG11c3Qgc3RhcnQgd2l0aCBcIj9cIjogJHtlbmNvZGluZ31gO1xuICAgIHZlcmlmeUVuY29kaW5nKGVuY29kaW5nLCBcIlByb21pc2VcIik7XG4gICAgcmV0dXJuIGVuY29kaW5nO1xuICB9O1xuICByZXR1cm4gZW5jb2RlUHJvbWlzZTtcbn07XG52YXIgbWFrZUVuY29kZUVycm9yID0gKHVuc2FmZUVuY29kZUVycm9yLCB2ZXJpZnlFbmNvZGluZykgPT4ge1xuICBjb25zdCBlbmNvZGVFcnJvciA9IChlcnIsIGlubmVyRW5jb2RlKSA9PiB7XG4gICAgY29uc3QgZW5jb2RpbmcgPSB1bnNhZmVFbmNvZGVFcnJvcihlcnIsIGlubmVyRW5jb2RlKTtcbiAgICB0eXBlb2YgZW5jb2RpbmcgPT09IFwic3RyaW5nXCIgJiYgZW5jb2RpbmcuY2hhckF0KDApID09PSBcIiFcIiB8fCB0aHJvd1JlZGFjdGVkYEVycm9yIGVuY29kaW5nIG11c3Qgc3RhcnQgd2l0aCBcIiFcIjogJHtlbmNvZGluZ31gO1xuICAgIHZlcmlmeUVuY29kaW5nKGVuY29kaW5nLCBcIkVycm9yXCIpO1xuICAgIHJldHVybiBlbmNvZGluZztcbiAgfTtcbiAgcmV0dXJuIGVuY29kZUVycm9yO1xufTtcbnZhciBtYWtlSW5uZXJFbmNvZGUgPSAoZW5jb2RlU3RyaW5nU3VmZml4LCBlbmNvZGVBcnJheTIsIG9wdGlvbnMpID0+IHtcbiAgY29uc3Qge1xuICAgIGVuY29kZVJlbW90YWJsZTogdW5zYWZlRW5jb2RlUmVtb3RhYmxlLFxuICAgIGVuY29kZVByb21pc2U6IHVuc2FmZUVuY29kZVByb21pc2UsXG4gICAgZW5jb2RlRXJyb3I6IHVuc2FmZUVuY29kZUVycm9yLFxuICAgIHZlcmlmeUVuY29kaW5nID0gKCkgPT4ge1xuICAgIH1cbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGVuY29kZVJlbW90YWJsZSA9IG1ha2VFbmNvZGVSZW1vdGFibGUoXG4gICAgdW5zYWZlRW5jb2RlUmVtb3RhYmxlLFxuICAgIHZlcmlmeUVuY29kaW5nXG4gICk7XG4gIGNvbnN0IGVuY29kZVByb21pc2UgPSBtYWtlRW5jb2RlUHJvbWlzZSh1bnNhZmVFbmNvZGVQcm9taXNlLCB2ZXJpZnlFbmNvZGluZyk7XG4gIGNvbnN0IGVuY29kZUVycm9yID0gbWFrZUVuY29kZUVycm9yKHVuc2FmZUVuY29kZUVycm9yLCB2ZXJpZnlFbmNvZGluZyk7XG4gIGNvbnN0IGlubmVyRW5jb2RlID0gKHBhc3NhYmxlKSA9PiB7XG4gICAgaWYgKGlzRXJyb3JMaWtlKHBhc3NhYmxlKSkge1xuICAgICAgcmV0dXJuIGVuY29kZUVycm9yKHBhc3NhYmxlLCBpbm5lckVuY29kZSk7XG4gICAgfVxuICAgIGNvbnN0IHBhc3NTdHlsZSA9IHBhc3NTdHlsZU9mKHBhc3NhYmxlKTtcbiAgICBzd2l0Y2ggKHBhc3NTdHlsZSkge1xuICAgICAgY2FzZSBcIm51bGxcIjoge1xuICAgICAgICByZXR1cm4gXCJ2XCI7XG4gICAgICB9XG4gICAgICBjYXNlIFwidW5kZWZpbmVkXCI6IHtcbiAgICAgICAgcmV0dXJuIFwielwiO1xuICAgICAgfVxuICAgICAgY2FzZSBcIm51bWJlclwiOiB7XG4gICAgICAgIHJldHVybiBlbmNvZGVCaW5hcnk2NChwYXNzYWJsZSk7XG4gICAgICB9XG4gICAgICBjYXNlIFwic3RyaW5nXCI6IHtcbiAgICAgICAgcmV0dXJuIGBzJHtlbmNvZGVTdHJpbmdTdWZmaXgocGFzc2FibGUpfWA7XG4gICAgICB9XG4gICAgICBjYXNlIFwiYm9vbGVhblwiOiB7XG4gICAgICAgIHJldHVybiBgYiR7cGFzc2FibGV9YDtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJiaWdpbnRcIjoge1xuICAgICAgICByZXR1cm4gZW5jb2RlQmlnSW50KHBhc3NhYmxlKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJyZW1vdGFibGVcIjoge1xuICAgICAgICByZXR1cm4gZW5jb2RlUmVtb3RhYmxlKHBhc3NhYmxlLCBpbm5lckVuY29kZSk7XG4gICAgICB9XG4gICAgICBjYXNlIFwiZXJyb3JcIjoge1xuICAgICAgICByZXR1cm4gZW5jb2RlRXJyb3IocGFzc2FibGUsIGlubmVyRW5jb2RlKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJwcm9taXNlXCI6IHtcbiAgICAgICAgcmV0dXJuIGVuY29kZVByb21pc2UocGFzc2FibGUsIGlubmVyRW5jb2RlKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJzeW1ib2xcIjoge1xuICAgICAgICBjb25zdCBuYW1lID0gbmFtZUZvclBhc3NhYmxlU3ltYm9sKHBhc3NhYmxlKTtcbiAgICAgICAgYXNzZXJ0LnR5cGVvZihuYW1lLCBcInN0cmluZ1wiKTtcbiAgICAgICAgcmV0dXJuIGB5JHtlbmNvZGVTdHJpbmdTdWZmaXgobmFtZSl9YDtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5QXJyYXlcIjoge1xuICAgICAgICByZXR1cm4gZW5jb2RlQXJyYXkyKHBhc3NhYmxlLCBpbm5lckVuY29kZSk7XG4gICAgICB9XG4gICAgICBjYXNlIFwiY29weVJlY29yZFwiOiB7XG4gICAgICAgIHJldHVybiBlbmNvZGVSZWNvcmQocGFzc2FibGUsIGVuY29kZUFycmF5MiwgaW5uZXJFbmNvZGUpO1xuICAgICAgfVxuICAgICAgY2FzZSBcInRhZ2dlZFwiOiB7XG4gICAgICAgIHJldHVybiBlbmNvZGVUYWdnZWQocGFzc2FibGUsIGVuY29kZUFycmF5MiwgaW5uZXJFbmNvZGUpO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYGEgJHtxdW90ZShwYXNzU3R5bGUpfSBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbGxlY3Rpb24gcGFzc2FibGVgO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGlubmVyRW5jb2RlO1xufTtcbnZhciBsaWJlcmFsRGVjb2RlcnMgPSAoXG4gIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gIC8qICAgICAgICAgICAgICAgICAgKi9cbiAge1xuICAgIGRlY29kZVJlbW90YWJsZTogKF9lbmNvZGluZywgX2lubmVyRGVjb2RlKSA9PiB2b2lkIDAsXG4gICAgZGVjb2RlUHJvbWlzZTogKF9lbmNvZGluZywgX2lubmVyRGVjb2RlKSA9PiB2b2lkIDAsXG4gICAgZGVjb2RlRXJyb3I6IChfZW5jb2RpbmcsIF9pbm5lckRlY29kZSkgPT4gdm9pZCAwXG4gIH1cbik7XG52YXIgbWFrZUlubmVyRGVjb2RlID0gKGRlY29kZVN0cmluZ1N1ZmZpeCwgZGVjb2RlQXJyYXkyLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHsgZGVjb2RlUmVtb3RhYmxlLCBkZWNvZGVQcm9taXNlLCBkZWNvZGVFcnJvciB9ID0gb3B0aW9ucztcbiAgY29uc3QgaW5uZXJEZWNvZGUgPSAoZW5jb2RlZCwgc2tpcCA9IDApID0+IHtcbiAgICBzd2l0Y2ggKGVuY29kZWQuY2hhckF0KHNraXApKSB7XG4gICAgICBjYXNlIFwidlwiOiB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgY2FzZSBcInpcIjoge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgICAgY2FzZSBcImZcIjoge1xuICAgICAgICByZXR1cm4gZGVjb2RlQmluYXJ5NjQoZW5jb2RlZCwgc2tpcCk7XG4gICAgICB9XG4gICAgICBjYXNlIFwic1wiOiB7XG4gICAgICAgIHJldHVybiBkZWNvZGVTdHJpbmdTdWZmaXgoZ2V0U3VmZml4KGVuY29kZWQsIHNraXAgKyAxKSk7XG4gICAgICB9XG4gICAgICBjYXNlIFwiYlwiOiB7XG4gICAgICAgIGNvbnN0IHN1YnN0cmluZyA9IGdldFN1ZmZpeChlbmNvZGVkLCBza2lwICsgMSk7XG4gICAgICAgIGlmIChzdWJzdHJpbmcgPT09IFwidHJ1ZVwiKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoc3Vic3RyaW5nID09PSBcImZhbHNlXCIpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBleHBlY3RlZCBlbmNvZGVkIGJvb2xlYW4gdG8gYmUgXCJidHJ1ZVwiIG9yIFwiYmZhbHNlXCI6ICR7c3Vic3RyaW5nfWA7XG4gICAgICB9XG4gICAgICBjYXNlIFwiblwiOlxuICAgICAgY2FzZSBcInBcIjoge1xuICAgICAgICByZXR1cm4gZGVjb2RlQmlnSW50KGdldFN1ZmZpeChlbmNvZGVkLCBza2lwKSk7XG4gICAgICB9XG4gICAgICBjYXNlIFwiclwiOiB7XG4gICAgICAgIHJldHVybiBkZWNvZGVSZW1vdGFibGUoZ2V0U3VmZml4KGVuY29kZWQsIHNraXApLCBpbm5lckRlY29kZSk7XG4gICAgICB9XG4gICAgICBjYXNlIFwiP1wiOiB7XG4gICAgICAgIHJldHVybiBkZWNvZGVQcm9taXNlKGdldFN1ZmZpeChlbmNvZGVkLCBza2lwKSwgaW5uZXJEZWNvZGUpO1xuICAgICAgfVxuICAgICAgY2FzZSBcIiFcIjoge1xuICAgICAgICByZXR1cm4gZGVjb2RlRXJyb3IoZ2V0U3VmZml4KGVuY29kZWQsIHNraXApLCBpbm5lckRlY29kZSk7XG4gICAgICB9XG4gICAgICBjYXNlIFwieVwiOiB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBkZWNvZGVTdHJpbmdTdWZmaXgoZ2V0U3VmZml4KGVuY29kZWQsIHNraXAgKyAxKSk7XG4gICAgICAgIHJldHVybiBwYXNzYWJsZVN5bWJvbEZvck5hbWUobmFtZSk7XG4gICAgICB9XG4gICAgICBjYXNlIFwiW1wiOlxuICAgICAgY2FzZSBcIl5cIjoge1xuICAgICAgICByZXR1cm4gZGVjb2RlQXJyYXkyKGVuY29kZWQsIGlubmVyRGVjb2RlLCBza2lwKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCIoXCI6IHtcbiAgICAgICAgcmV0dXJuIGRlY29kZVJlY29yZChlbmNvZGVkLCBkZWNvZGVBcnJheTIsIGlubmVyRGVjb2RlLCBza2lwKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCI6XCI6IHtcbiAgICAgICAgcmV0dXJuIGRlY29kZVRhZ2dlZChlbmNvZGVkLCBkZWNvZGVBcnJheTIsIGlubmVyRGVjb2RlLCBza2lwKTtcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBpbnZhbGlkIGRhdGFiYXNlIGtleTogJHtnZXRTdWZmaXgoZW5jb2RlZCwgc2tpcCl9YDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBpbm5lckRlY29kZTtcbn07XG52YXIgbWFrZVBhc3NhYmxlS2l0ID0gKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCB7XG4gICAgZW5jb2RlUmVtb3RhYmxlID0gKHI1LCBfKSA9PiB0aHJvd1JlZGFjdGVkYHJlbW90YWJsZSB1bmV4cGVjdGVkOiAke3I1fWAsXG4gICAgZW5jb2RlUHJvbWlzZSA9IChwNCwgXykgPT4gdGhyb3dSZWRhY3RlZGBwcm9taXNlIHVuZXhwZWN0ZWQ6ICR7cDR9YCxcbiAgICBlbmNvZGVFcnJvciA9IChlcnIsIF8pID0+IHRocm93UmVkYWN0ZWRgZXJyb3IgdW5leHBlY3RlZDogJHtlcnJ9YCxcbiAgICBmb3JtYXQgPSBcImxlZ2FjeU9yZGVyZWRcIixcbiAgICBkZWNvZGVSZW1vdGFibGUgPSAoZW5jb2RpbmcsIF8pID0+IHRocm93UmVkYWN0ZWRgcmVtb3RhYmxlIHVuZXhwZWN0ZWQ6ICR7ZW5jb2Rpbmd9YCxcbiAgICBkZWNvZGVQcm9taXNlID0gKGVuY29kaW5nLCBfKSA9PiB0aHJvd1JlZGFjdGVkYHByb21pc2UgdW5leHBlY3RlZDogJHtlbmNvZGluZ31gLFxuICAgIGRlY29kZUVycm9yID0gKGVuY29kaW5nLCBfKSA9PiB0aHJvd1JlZGFjdGVkYGVycm9yIHVuZXhwZWN0ZWQ6ICR7ZW5jb2Rpbmd9YFxuICB9ID0gb3B0aW9ucztcbiAgbGV0IGVuY29kZVBhc3NhYmxlO1xuICBjb25zdCBlbmNvZGVPcHRpb25zID0geyBlbmNvZGVSZW1vdGFibGUsIGVuY29kZVByb21pc2UsIGVuY29kZUVycm9yLCBmb3JtYXQgfTtcbiAgaWYgKGZvcm1hdCA9PT0gXCJjb21wYWN0T3JkZXJlZFwiKSB7XG4gICAgY29uc3QgbGliZXJhbERlY29kZSA9IG1ha2VJbm5lckRlY29kZShcbiAgICAgIGRlY29kZUNvbXBhY3RTdHJpbmdTdWZmaXgsXG4gICAgICBkZWNvZGVDb21wYWN0QXJyYXksXG4gICAgICBsaWJlcmFsRGVjb2RlcnNcbiAgICApO1xuICAgIGNvbnN0IHZlcmlmeUVuY29kaW5nID0gKGVuY29kaW5nLCBsYWJlbCkgPT4ge1xuICAgICAgIWVuY29kaW5nLm1hdGNoKHJDMCkgfHwgdGhyb3dSZWRhY3RlZGAke2JhcmVPclF1b3RlKFxuICAgICAgICBsYWJlbFxuICAgICAgKX0gZW5jb2RpbmcgbXVzdCBub3QgY29udGFpbiBhIEMwIGNvbnRyb2wgY2hhcmFjdGVyOiAke2VuY29kaW5nfWA7XG4gICAgICBjb25zdCBkZWNvZGVkID0gZGVjb2RlQ29tcGFjdEFycmF5KGBediAke2VuY29kaW5nfSB2IGAsIGxpYmVyYWxEZWNvZGUpO1xuICAgICAgaXNBcnJheTgoZGVjb2RlZCkgJiYgZGVjb2RlZC5sZW5ndGggPT09IDMgJiYgZGVjb2RlZFswXSA9PT0gbnVsbCAmJiBkZWNvZGVkWzJdID09PSBudWxsIHx8IHRocm93UmVkYWN0ZWRgJHtiYXJlT3JRdW90ZShsYWJlbCl9IGVuY29kaW5nIG11c3QgYmUgZW1iZWRkYWJsZTogJHtlbmNvZGluZ31gO1xuICAgIH07XG4gICAgY29uc3QgZW5jb2RlQ29tcGFjdCA9IG1ha2VJbm5lckVuY29kZShcbiAgICAgIGVuY29kZUNvbXBhY3RTdHJpbmdTdWZmaXgsXG4gICAgICBlbmNvZGVDb21wYWN0QXJyYXksXG4gICAgICB7IC4uLmVuY29kZU9wdGlvbnMsIHZlcmlmeUVuY29kaW5nIH1cbiAgICApO1xuICAgIGVuY29kZVBhc3NhYmxlID0gKHBhc3NhYmxlKSA9PiBgfiR7ZW5jb2RlQ29tcGFjdChwYXNzYWJsZSl9YDtcbiAgfSBlbHNlIGlmIChmb3JtYXQgPT09IFwibGVnYWN5T3JkZXJlZFwiKSB7XG4gICAgZW5jb2RlUGFzc2FibGUgPSBtYWtlSW5uZXJFbmNvZGUoXG4gICAgICBlbmNvZGVMZWdhY3lTdHJpbmdTdWZmaXgsXG4gICAgICBlbmNvZGVMZWdhY3lBcnJheSxcbiAgICAgIGVuY29kZU9wdGlvbnNcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHRocm93IHRocm93UmVkYWN0ZWRgVW5yZWNvZ25pemVkIGZvcm1hdDogJHtxdW90ZShmb3JtYXQpfWA7XG4gIH1cbiAgY29uc3QgZGVjb2RlT3B0aW9ucyA9IHsgZGVjb2RlUmVtb3RhYmxlLCBkZWNvZGVQcm9taXNlLCBkZWNvZGVFcnJvciB9O1xuICBjb25zdCBkZWNvZGVDb21wYWN0ID0gbWFrZUlubmVyRGVjb2RlKFxuICAgIGRlY29kZUNvbXBhY3RTdHJpbmdTdWZmaXgsXG4gICAgZGVjb2RlQ29tcGFjdEFycmF5LFxuICAgIGRlY29kZU9wdGlvbnNcbiAgKTtcbiAgY29uc3QgZGVjb2RlTGVnYWN5ID0gbWFrZUlubmVyRGVjb2RlKFxuICAgIGRlY29kZUxlZ2FjeVN0cmluZ1N1ZmZpeCxcbiAgICBkZWNvZGVMZWdhY3lBcnJheSxcbiAgICBkZWNvZGVPcHRpb25zXG4gICk7XG4gIGNvbnN0IGRlY29kZVBhc3NhYmxlID0gKGVuY29kZWQpID0+IHtcbiAgICBpZiAoZW5jb2RlZC5jaGFyQXQoMCkgPT09IFwiflwiKSB7XG4gICAgICByZXR1cm4gZGVjb2RlQ29tcGFjdChlbmNvZGVkLCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlY29kZUxlZ2FjeShlbmNvZGVkKTtcbiAgfTtcbiAgcmV0dXJuIGhhcmRlbih7IGVuY29kZVBhc3NhYmxlLCBkZWNvZGVQYXNzYWJsZSB9KTtcbn07XG5oYXJkZW4obWFrZVBhc3NhYmxlS2l0KTtcbnZhciBtYWtlRW5jb2RlUGFzc2FibGUgPSAoZW5jb2RlT3B0aW9ucykgPT4ge1xuICBjb25zdCB7IGVuY29kZVBhc3NhYmxlIH0gPSBtYWtlUGFzc2FibGVLaXQoZW5jb2RlT3B0aW9ucyk7XG4gIHJldHVybiBlbmNvZGVQYXNzYWJsZTtcbn07XG5oYXJkZW4obWFrZUVuY29kZVBhc3NhYmxlKTtcbnZhciBtYWtlRGVjb2RlUGFzc2FibGUgPSAoZGVjb2RlT3B0aW9ucykgPT4ge1xuICBjb25zdCB7IGRlY29kZVBhc3NhYmxlIH0gPSBtYWtlUGFzc2FibGVLaXQoZGVjb2RlT3B0aW9ucyk7XG4gIHJldHVybiBkZWNvZGVQYXNzYWJsZTtcbn07XG5oYXJkZW4obWFrZURlY29kZVBhc3NhYmxlKTtcbnZhciBpc0VuY29kZWRSZW1vdGFibGUgPSAoZW5jb2RlZCkgPT4gZW5jb2RlZC5jaGFyQXQoMCkgPT09IFwiclwiO1xuaGFyZGVuKGlzRW5jb2RlZFJlbW90YWJsZSk7XG52YXIgcGFzc1N0eWxlUHJlZml4ZXMgPSB7XG4gIGVycm9yOiBcIiFcIixcbiAgY29weVJlY29yZDogXCIoXCIsXG4gIHRhZ2dlZDogXCI6XCIsXG4gIHByb21pc2U6IFwiP1wiLFxuICBjb3B5QXJyYXk6IFwiW15cIixcbiAgYm9vbGVhbjogXCJiXCIsXG4gIG51bWJlcjogXCJmXCIsXG4gIGJpZ2ludDogXCJucFwiLFxuICByZW1vdGFibGU6IFwiclwiLFxuICBzdHJpbmc6IFwic1wiLFxuICBudWxsOiBcInZcIixcbiAgc3ltYm9sOiBcInlcIixcbiAgLy9cbiAgLy9cbiAgLy9cbiAgdW5kZWZpbmVkOiBcInpcIlxufTtcbk9iamVjdC5zZXRQcm90b3R5cGVPZihwYXNzU3R5bGVQcmVmaXhlcywgbnVsbCk7XG5oYXJkZW4ocGFzc1N0eWxlUHJlZml4ZXMpO1xuXG4vL1xudmFyIHsgZW50cmllczogZW50cmllczYsIGZyb21FbnRyaWVzOiBmcm9tRW50cmllczYsIHNldFByb3RvdHlwZU9mOiBzZXRQcm90b3R5cGVPZjIsIGlzOiBpczQgfSA9IE9iamVjdDtcbnZhciBzYW1lVmFsdWVaZXJvID0gKHgsIHkpID0+IHggPT09IHkgfHwgaXM0KHgsIHkpO1xudmFyIHRyaXZpYWxDb21wYXJhdG9yID0gKGxlZnQsIHJpZ2h0KSA9PiAoXG4gIC8vXG4gIGxlZnQgPCByaWdodCA/IC0xIDogbGVmdCA9PT0gcmlnaHQgPyAwIDogMVxuKTtcbnZhciBwYXNzU3R5bGVSYW5rcyA9IChcbiAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgZnJvbUVudHJpZXM2KFxuICAgIGVudHJpZXM2KHBhc3NTdHlsZVByZWZpeGVzKS5zb3J0KChbX2xlZnRTdHlsZSwgbGVmdFByZWZpeGVzXSwgW19yaWdodFN0eWxlLCByaWdodFByZWZpeGVzXSkgPT4ge1xuICAgICAgcmV0dXJuIHRyaXZpYWxDb21wYXJhdG9yKGxlZnRQcmVmaXhlcywgcmlnaHRQcmVmaXhlcyk7XG4gICAgfSkubWFwKChbcGFzc1N0eWxlLCBwcmVmaXhlc10sIGluZGV4KSA9PiB7XG4gICAgICBwcmVmaXhlcyA9PT0gWy4uLnByZWZpeGVzXS5zb3J0KCkuam9pbihcIlwiKSB8fCB0aHJvd1JlZGFjdGVkYHVuc29ydGVkIHByZWZpeGVzIGZvciBwYXNzU3R5bGUgJHtxdW90ZShwYXNzU3R5bGUpfTogJHtxdW90ZShwcmVmaXhlcyl9YDtcbiAgICAgIGNvbnN0IGNvdmVyID0gW1xuICAgICAgICBwcmVmaXhlcy5jaGFyQXQoMCksXG4gICAgICAgIFN0cmluZy5mcm9tQ2hhckNvZGUocHJlZml4ZXMuY2hhckNvZGVBdChwcmVmaXhlcy5sZW5ndGggLSAxKSArIDEpXG4gICAgICBdO1xuICAgICAgcmV0dXJuIFtwYXNzU3R5bGUsIHsgaW5kZXgsIGNvdmVyIH1dO1xuICAgIH0pXG4gIClcbik7XG5zZXRQcm90b3R5cGVPZjIocGFzc1N0eWxlUmFua3MsIG51bGwpO1xuaGFyZGVuKHBhc3NTdHlsZVJhbmtzKTtcbnZhciBnZXRQYXNzU3R5bGVDb3ZlciA9IChwYXNzU3R5bGUpID0+IHBhc3NTdHlsZVJhbmtzW3Bhc3NTdHlsZV0uY292ZXI7XG5oYXJkZW4oZ2V0UGFzc1N0eWxlQ292ZXIpO1xudmFyIG1lbW9PZlNvcnRlZCA9IC8qICAgICAgICAgICAqLyBuZXcgV2Vha01hcCgpO1xudmFyIGNvbXBhcmF0b3JNaXJyb3JJbWFnZXMgPSAvKiAgICAgICAgICAgKi8gbmV3IFdlYWtNYXAoKTtcbnZhciBtYWtlQ29tcGFyYXRvcktpdCA9IChjb21wYXJlUmVtb3RhYmxlcyA9IChfeCwgX3kpID0+IE5hTikgPT4ge1xuICBjb25zdCBjb21wYXJhdG9yID0gKGxlZnQsIHJpZ2h0KSA9PiB7XG4gICAgaWYgKHNhbWVWYWx1ZVplcm8obGVmdCwgcmlnaHQpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgY29uc3QgbGVmdFN0eWxlID0gcGFzc1N0eWxlT2YobGVmdCk7XG4gICAgY29uc3QgcmlnaHRTdHlsZSA9IHBhc3NTdHlsZU9mKHJpZ2h0KTtcbiAgICBpZiAobGVmdFN0eWxlICE9PSByaWdodFN0eWxlKSB7XG4gICAgICByZXR1cm4gdHJpdmlhbENvbXBhcmF0b3IoXG4gICAgICAgIHBhc3NTdHlsZVJhbmtzW2xlZnRTdHlsZV0uaW5kZXgsXG4gICAgICAgIHBhc3NTdHlsZVJhbmtzW3JpZ2h0U3R5bGVdLmluZGV4XG4gICAgICApO1xuICAgIH1cbiAgICBzd2l0Y2ggKGxlZnRTdHlsZSkge1xuICAgICAgY2FzZSBcInJlbW90YWJsZVwiOiB7XG4gICAgICAgIHJldHVybiBjb21wYXJlUmVtb3RhYmxlcyhsZWZ0LCByaWdodCk7XG4gICAgICB9XG4gICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICBjYXNlIFwibnVsbFwiOlxuICAgICAgY2FzZSBcImVycm9yXCI6XG4gICAgICBjYXNlIFwicHJvbWlzZVwiOiB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICAgIGNhc2UgXCJzdHJpbmdcIjoge1xuICAgICAgICBpZiAobGVmdCA8IHJpZ2h0KSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFzc2VydChsZWZ0ID4gcmlnaHQpO1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjYXNlIFwic3ltYm9sXCI6IHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmF0b3IoXG4gICAgICAgICAgbmFtZUZvclBhc3NhYmxlU3ltYm9sKGxlZnQpLFxuICAgICAgICAgIG5hbWVGb3JQYXNzYWJsZVN5bWJvbChyaWdodClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJudW1iZXJcIjoge1xuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGxlZnQpKSB7XG4gICAgICAgICAgYXNzZXJ0KCFOdW1iZXIuaXNOYU4ocmlnaHQpKTtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfSBlbHNlIGlmIChOdW1iZXIuaXNOYU4ocmlnaHQpKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZWZ0IDwgcmlnaHQpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzZXJ0KGxlZnQgPiByaWdodCk7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5UmVjb3JkXCI6IHtcbiAgICAgICAgY29uc3QgbGVmdE5hbWVzID0gcmVjb3JkTmFtZXMobGVmdCk7XG4gICAgICAgIGNvbnN0IHJpZ2h0TmFtZXMgPSByZWNvcmROYW1lcyhyaWdodCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbXBhcmF0b3IobGVmdE5hbWVzLCByaWdodE5hbWVzKTtcbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gMCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGVmdFZhbHVlcyA9IHJlY29yZFZhbHVlcyhsZWZ0LCBsZWZ0TmFtZXMpO1xuICAgICAgICBjb25zdCByaWdodFZhbHVlcyA9IHJlY29yZFZhbHVlcyhyaWdodCwgcmlnaHROYW1lcyk7XG4gICAgICAgIHJldHVybiBjb21wYXJhdG9yKGxlZnRWYWx1ZXMsIHJpZ2h0VmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5QXJyYXlcIjoge1xuICAgICAgICBjb25zdCBsZW4gPSBNYXRoLm1pbihsZWZ0Lmxlbmd0aCwgcmlnaHQubGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IGxlbjsgaTMgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbXBhcmF0b3IobGVmdFtpM10sIHJpZ2h0W2kzXSk7XG4gICAgICAgICAgaWYgKHJlc3VsdCAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbXBhcmF0b3IobGVmdC5sZW5ndGgsIHJpZ2h0Lmxlbmd0aCk7XG4gICAgICB9XG4gICAgICBjYXNlIFwidGFnZ2VkXCI6IHtcbiAgICAgICAgY29uc3QgbGFiZWxDb21wID0gY29tcGFyYXRvcihnZXRUYWcobGVmdCksIGdldFRhZyhyaWdodCkpO1xuICAgICAgICBpZiAobGFiZWxDb21wICE9PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGxhYmVsQ29tcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tcGFyYXRvcihsZWZ0LnBheWxvYWQsIHJpZ2h0LnBheWxvYWQpO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFVucmVjb2duaXplZCBwYXNzU3R5bGU6ICR7cXVvdGUobGVmdFN0eWxlKX1gO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3Qgb3V0ZXJDb21wYXJhdG9yID0gKHgsIHkpID0+IChcbiAgICAvL1xuICAgIC8vXG4gICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIGNvbXBhcmF0b3IoeCwgeSkgfHwgMFxuICApO1xuICBjb25zdCBhbnRpQ29tcGFyYXRvciA9ICh4LCB5KSA9PiBvdXRlckNvbXBhcmF0b3IoeSwgeCk7XG4gIG1lbW9PZlNvcnRlZC5zZXQob3V0ZXJDb21wYXJhdG9yLCAvKiAgICAgICAgICAgKi8gbmV3IFdlYWtTZXQoKSk7XG4gIG1lbW9PZlNvcnRlZC5zZXQoYW50aUNvbXBhcmF0b3IsIC8qICAgICAgICAgICAqLyBuZXcgV2Vha1NldCgpKTtcbiAgY29tcGFyYXRvck1pcnJvckltYWdlcy5zZXQob3V0ZXJDb21wYXJhdG9yLCBhbnRpQ29tcGFyYXRvcik7XG4gIGNvbXBhcmF0b3JNaXJyb3JJbWFnZXMuc2V0KGFudGlDb21wYXJhdG9yLCBvdXRlckNvbXBhcmF0b3IpO1xuICByZXR1cm4gaGFyZGVuKHsgY29tcGFyYXRvcjogb3V0ZXJDb21wYXJhdG9yLCBhbnRpQ29tcGFyYXRvciB9KTtcbn07XG52YXIgaXNSYW5rU29ydGVkID0gKHBhc3NhYmxlcywgY29tcGFyZSkgPT4ge1xuICBjb25zdCBzdWJNZW1vT2ZTb3J0ZWQgPSBtZW1vT2ZTb3J0ZWQuZ2V0KGNvbXBhcmUpO1xuICBhc3NlcnQoc3ViTWVtb09mU29ydGVkICE9PSB2b2lkIDApO1xuICBpZiAoc3ViTWVtb09mU29ydGVkLmhhcyhwYXNzYWJsZXMpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgYXNzZXJ0KHBhc3NTdHlsZU9mKHBhc3NhYmxlcykgPT09IFwiY29weUFycmF5XCIpO1xuICBmb3IgKGxldCBpMyA9IDE7IGkzIDwgcGFzc2FibGVzLmxlbmd0aDsgaTMgKz0gMSkge1xuICAgIGlmIChjb21wYXJlKHBhc3NhYmxlc1tpMyAtIDFdLCBwYXNzYWJsZXNbaTNdKSA+PSAxKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHN1Yk1lbW9PZlNvcnRlZC5hZGQocGFzc2FibGVzKTtcbiAgcmV0dXJuIHRydWU7XG59O1xuaGFyZGVuKGlzUmFua1NvcnRlZCk7XG52YXIgYXNzZXJ0UmFua1NvcnRlZCA9IChzb3J0ZWQsIGNvbXBhcmUpID0+IGlzUmFua1NvcnRlZChzb3J0ZWQsIGNvbXBhcmUpIHx8IC8vXG4vL1xudGhyb3dSZWRhY3RlZGBNdXN0IGJlIHJhbmsgc29ydGVkOiAke3NvcnRlZH0gdnMgJHtzb3J0QnlSYW5rKHNvcnRlZCwgY29tcGFyZSl9YDtcbmhhcmRlbihhc3NlcnRSYW5rU29ydGVkKTtcbnZhciBzb3J0QnlSYW5rID0gKHBhc3NhYmxlcywgY29tcGFyZSkgPT4ge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXNzYWJsZXMpKSB7XG4gICAgaGFyZGVuKHBhc3NhYmxlcyk7XG4gICAgaWYgKGlzUmFua1NvcnRlZChwYXNzYWJsZXMsIGNvbXBhcmUpKSB7XG4gICAgICByZXR1cm4gcGFzc2FibGVzO1xuICAgIH1cbiAgfVxuICBjb25zdCB1bnNvcnRlZCA9IFsuLi5wYXNzYWJsZXNdO1xuICB1bnNvcnRlZC5mb3JFYWNoKGhhcmRlbik7XG4gIGNvbnN0IHNvcnRlZCA9IHVuc29ydGVkLnNvcnQoY29tcGFyZSk7XG4gIGlmIChjb21wYXJlKHRydWUsIHZvaWQgMCkgPiAwKSB7XG4gICAgbGV0IGkzID0gc29ydGVkLmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKGkzID49IDAgJiYgc29ydGVkW2kzXSA9PT0gdm9pZCAwKSBpMyAtPSAxO1xuICAgIGNvbnN0IG4yID0gc29ydGVkLmxlbmd0aCAtIGkzIC0gMTtcbiAgICBpZiAobjIgPiAwICYmIG4yIDwgc29ydGVkLmxlbmd0aCkge1xuICAgICAgc29ydGVkLmNvcHlXaXRoaW4objIsIDApO1xuICAgICAgc29ydGVkLmZpbGwoXG4gICAgICAgIC8qICAgICAgICAgICAgKi9cbiAgICAgICAgdm9pZCAwLFxuICAgICAgICAwLFxuICAgICAgICBuMlxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaGFyZGVuKHNvcnRlZCk7XG4gIGNvbnN0IHN1Yk1lbW9PZlNvcnRlZCA9IG1lbW9PZlNvcnRlZC5nZXQoY29tcGFyZSk7XG4gIGFzc2VydChzdWJNZW1vT2ZTb3J0ZWQgIT09IHZvaWQgMCk7XG4gIHN1Yk1lbW9PZlNvcnRlZC5hZGQoc29ydGVkKTtcbiAgcmV0dXJuIHNvcnRlZDtcbn07XG5oYXJkZW4oc29ydEJ5UmFuayk7XG52YXIgcmFua1NlYXJjaCA9IChzb3J0ZWQsIGNvbXBhcmUsIGtleSwgYmlhcyA9IFwibGVmdE1vc3RcIikgPT4ge1xuICBhc3NlcnRSYW5rU29ydGVkKHNvcnRlZCwgY29tcGFyZSk7XG4gIGxldCBsZWZ0ID0gMDtcbiAgbGV0IHJpZ2h0ID0gc29ydGVkLmxlbmd0aDtcbiAgd2hpbGUgKGxlZnQgPCByaWdodCkge1xuICAgIGNvbnN0IG0yID0gTWF0aC5mbG9vcigobGVmdCArIHJpZ2h0KSAvIDIpO1xuICAgIGNvbnN0IGNvbXAgPSBjb21wYXJlKHNvcnRlZFttMl0sIGtleSk7XG4gICAgaWYgKGNvbXAgPD0gLTEgfHwgY29tcCA9PT0gMCAmJiBiaWFzID09PSBcInJpZ2h0TW9zdFwiKSB7XG4gICAgICBsZWZ0ID0gbTIgKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQoY29tcCA+PSAxIHx8IGNvbXAgPT09IDAgJiYgYmlhcyA9PT0gXCJsZWZ0TW9zdFwiKTtcbiAgICAgIHJpZ2h0ID0gbTI7XG4gICAgfVxuICB9XG4gIHJldHVybiBiaWFzID09PSBcImxlZnRNb3N0XCIgPyBsZWZ0IDogcmlnaHQgLSAxO1xufTtcbnZhciBnZXRJbmRleENvdmVyID0gKHNvcnRlZCwgY29tcGFyZSwgW2xlZnRLZXksIHJpZ2h0S2V5XSkgPT4ge1xuICBhc3NlcnRSYW5rU29ydGVkKHNvcnRlZCwgY29tcGFyZSk7XG4gIGNvbnN0IGxlZnRJbmRleCA9IHJhbmtTZWFyY2goc29ydGVkLCBjb21wYXJlLCBsZWZ0S2V5LCBcImxlZnRNb3N0XCIpO1xuICBjb25zdCByaWdodEluZGV4ID0gcmFua1NlYXJjaChzb3J0ZWQsIGNvbXBhcmUsIHJpZ2h0S2V5LCBcInJpZ2h0TW9zdFwiKTtcbiAgcmV0dXJuIFtsZWZ0SW5kZXgsIHJpZ2h0SW5kZXhdO1xufTtcbmhhcmRlbihnZXRJbmRleENvdmVyKTtcbnZhciBGdWxsUmFua0NvdmVyID0gaGFyZGVuKFtcIlwiLCBcIntcIl0pO1xudmFyIGNvdmVyZWRFbnRyaWVzID0gKHNvcnRlZCwgW2xlZnRJbmRleCwgcmlnaHRJbmRleF0pID0+IHtcbiAgY29uc3QgaXRlcmFibGUgPSBoYXJkZW4oe1xuICAgIFtTeW1ib2wuaXRlcmF0b3JdOiAoKSA9PiB7XG4gICAgICBsZXQgaTMgPSBsZWZ0SW5kZXg7XG4gICAgICByZXR1cm4gaGFyZGVuKHtcbiAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgIGlmIChpMyA8PSByaWdodEluZGV4KSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gc29ydGVkW2kzXTtcbiAgICAgICAgICAgIGkzICs9IDE7XG4gICAgICAgICAgICByZXR1cm4gaGFyZGVuKHsgdmFsdWU6IFtpMywgZWxlbWVudF0sIGRvbmU6IGZhbHNlIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaGFyZGVuKHsgdmFsdWU6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBpdGVyYWJsZTtcbn07XG5oYXJkZW4oY292ZXJlZEVudHJpZXMpO1xudmFyIG1heFJhbmsgPSAoY29tcGFyZSwgYTIsIGIzKSA9PiBjb21wYXJlKGEyLCBiMykgPj0gMCA/IGEyIDogYjM7XG52YXIgbWluUmFuayA9IChjb21wYXJlLCBhMiwgYjMpID0+IGNvbXBhcmUoYTIsIGIzKSA8PSAwID8gYTIgOiBiMztcbnZhciB1bmlvblJhbmtDb3ZlcnMgPSAoY29tcGFyZSwgY292ZXJzKSA9PiB7XG4gIGNvbnN0IHVuaW9uUmFua0NvdmVyUGFpciA9IChbbGVmdEEsIHJpZ2h0QV0sIFtsZWZ0QiwgcmlnaHRCXSkgPT4gW1xuICAgIG1pblJhbmsoY29tcGFyZSwgbGVmdEEsIGxlZnRCKSxcbiAgICBtYXhSYW5rKGNvbXBhcmUsIHJpZ2h0QSwgcmlnaHRCKVxuICBdO1xuICByZXR1cm4gY292ZXJzLnJlZHVjZSh1bmlvblJhbmtDb3ZlclBhaXIsIFtcIntcIiwgXCJcIl0pO1xufTtcbmhhcmRlbih1bmlvblJhbmtDb3ZlcnMpO1xudmFyIGludGVyc2VjdFJhbmtDb3ZlcnMgPSAoY29tcGFyZSwgY292ZXJzKSA9PiB7XG4gIGNvbnN0IGludGVyc2VjdFJhbmtDb3ZlclBhaXIgPSAoW2xlZnRBLCByaWdodEFdLCBbbGVmdEIsIHJpZ2h0Ql0pID0+IFtcbiAgICBtYXhSYW5rKGNvbXBhcmUsIGxlZnRBLCBsZWZ0QiksXG4gICAgbWluUmFuayhjb21wYXJlLCByaWdodEEsIHJpZ2h0QilcbiAgXTtcbiAgcmV0dXJuIGNvdmVycy5yZWR1Y2UoaW50ZXJzZWN0UmFua0NvdmVyUGFpciwgW1wiXCIsIFwie1wiXSk7XG59O1xudmFyIHsgY29tcGFyYXRvcjogY29tcGFyZVJhbmssIGFudGlDb21wYXJhdG9yOiBjb21wYXJlQW50aVJhbmsgfSA9IG1ha2VDb21wYXJhdG9yS2l0KCk7XG52YXIgbWFrZUZ1bGxPcmRlckNvbXBhcmF0b3JLaXQgPSAobG9uZ0xpdmVkID0gZmFsc2UpID0+IHtcbiAgbGV0IG51bVNlZW4gPSAwO1xuICBjb25zdCBNYXBDb25zdHJ1Y3RvciA9IGxvbmdMaXZlZCA/IFdlYWtNYXAgOiBNYXA7XG4gIGNvbnN0IHNlZW4gPSBuZXcgTWFwQ29uc3RydWN0b3IoKTtcbiAgY29uc3QgdGFnID0gKHI1KSA9PiB7XG4gICAgaWYgKHNlZW4uaGFzKHI1KSkge1xuICAgICAgcmV0dXJuIHNlZW4uZ2V0KHI1KTtcbiAgICB9XG4gICAgbnVtU2VlbiArPSAxO1xuICAgIHNlZW4uc2V0KHI1LCBudW1TZWVuKTtcbiAgICByZXR1cm4gbnVtU2VlbjtcbiAgfTtcbiAgY29uc3QgY29tcGFyZVJlbW90YWJsZXMgPSAoeCwgeSkgPT4gY29tcGFyZVJhbmsodGFnKHgpLCB0YWcoeSkpO1xuICByZXR1cm4gbWFrZUNvbXBhcmF0b3JLaXQoY29tcGFyZVJlbW90YWJsZXMpO1xufTtcbmhhcmRlbihtYWtlRnVsbE9yZGVyQ29tcGFyYXRvcktpdCk7XG5cbi8vXG52YXIgaWRlbnRDaGVja2VyID0gKGNvbmQsIF9kZXRhaWxzKSA9PiBjb25kO1xuaGFyZGVuKGlkZW50Q2hlY2tlcik7XG5cbi8vXG52YXIgY2hlY2tOb0R1cGxpY2F0ZXMgPSAoZWxlbWVudHMsIGZ1bGxDb21wYXJlLCBjaGVjaykgPT4ge1xuICBmdWxsQ29tcGFyZSA9IGZ1bGxDb21wYXJlIHx8IG1ha2VGdWxsT3JkZXJDb21wYXJhdG9yS2l0KCkuYW50aUNvbXBhcmF0b3I7XG4gIGVsZW1lbnRzID0gc29ydEJ5UmFuayhlbGVtZW50cywgZnVsbENvbXBhcmUpO1xuICBjb25zdCB7IGxlbmd0aCB9ID0gZWxlbWVudHM7XG4gIGZvciAobGV0IGkzID0gMTsgaTMgPCBsZW5ndGg7IGkzICs9IDEpIHtcbiAgICBjb25zdCBrMCA9IGVsZW1lbnRzW2kzIC0gMV07XG4gICAgY29uc3QgazEgPSBlbGVtZW50c1tpM107XG4gICAgaWYgKGZ1bGxDb21wYXJlKGswLCBrMSkgPT09IDApIHtcbiAgICAgIHJldHVybiBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgdmFsdWUgaGFzIGR1cGxpY2F0ZSBrZXlzOiAke2swfWApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgYXNzZXJ0Tm9EdXBsaWNhdGVzID0gKGVsZW1lbnRzLCBmdWxsQ29tcGFyZSA9IHZvaWQgMCkgPT4ge1xuICBjaGVja05vRHVwbGljYXRlcyhlbGVtZW50cywgZnVsbENvbXBhcmUsIGFzc2VydENoZWNrZXIpO1xufTtcbnZhciBjaGVja0VsZW1lbnRzID0gKGVsZW1lbnRzLCBjaGVjaykgPT4ge1xuICBpZiAocGFzc1N0eWxlT2YoZWxlbWVudHMpICE9PSBcImNvcHlBcnJheVwiKSB7XG4gICAgcmV0dXJuIGNoZWNrKFxuICAgICAgZmFsc2UsXG4gICAgICByZWRhY3RlZGBUaGUga2V5cyBvZiBhIGNvcHlTZXQgb3IgY29weU1hcCBtdXN0IGJlIGEgY29weUFycmF5OiAke2VsZW1lbnRzfWBcbiAgICApO1xuICB9XG4gIGlmICghaXNSYW5rU29ydGVkKGVsZW1lbnRzLCBjb21wYXJlQW50aVJhbmspKSB7XG4gICAgcmV0dXJuIGNoZWNrKFxuICAgICAgZmFsc2UsXG4gICAgICByZWRhY3RlZGBUaGUga2V5cyBvZiBhIGNvcHlTZXQgb3IgY29weU1hcCBtdXN0IGJlIHNvcnRlZCBpbiByZXZlcnNlIHJhbmsgb3JkZXI6ICR7ZWxlbWVudHN9YFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGNoZWNrTm9EdXBsaWNhdGVzKGVsZW1lbnRzLCB2b2lkIDAsIGNoZWNrKTtcbn07XG5oYXJkZW4oY2hlY2tFbGVtZW50cyk7XG52YXIgYXNzZXJ0RWxlbWVudHMgPSAoZWxlbWVudHMpID0+IHtcbiAgY2hlY2tFbGVtZW50cyhlbGVtZW50cywgYXNzZXJ0Q2hlY2tlcik7XG59O1xuaGFyZGVuKGFzc2VydEVsZW1lbnRzKTtcbnZhciBjb2VyY2VUb0VsZW1lbnRzID0gKGVsZW1lbnRzTGlzdCkgPT4ge1xuICBjb25zdCBlbGVtZW50cyA9IHNvcnRCeVJhbmsoZWxlbWVudHNMaXN0LCBjb21wYXJlQW50aVJhbmspO1xuICBhc3NlcnRFbGVtZW50cyhlbGVtZW50cyk7XG4gIHJldHVybiBlbGVtZW50cztcbn07XG5oYXJkZW4oY29lcmNlVG9FbGVtZW50cyk7XG52YXIgbWFrZVNldE9mRWxlbWVudHMgPSAoZWxlbWVudEl0ZXIpID0+IG1ha2VUYWdnZWQoXCJjb3B5U2V0XCIsIGNvZXJjZVRvRWxlbWVudHMoZWxlbWVudEl0ZXIpKTtcbmhhcmRlbihtYWtlU2V0T2ZFbGVtZW50cyk7XG5cbi8vXG52YXIgY2hlY2tOb0R1cGxpY2F0ZUtleXMgPSAoYmFnRW50cmllcywgZnVsbENvbXBhcmUsIGNoZWNrKSA9PiB7XG4gIGZ1bGxDb21wYXJlID0gZnVsbENvbXBhcmUgfHwgbWFrZUZ1bGxPcmRlckNvbXBhcmF0b3JLaXQoKS5hbnRpQ29tcGFyYXRvcjtcbiAgYmFnRW50cmllcyA9IHNvcnRCeVJhbmsoYmFnRW50cmllcywgZnVsbENvbXBhcmUpO1xuICBjb25zdCB7IGxlbmd0aCB9ID0gYmFnRW50cmllcztcbiAgZm9yIChsZXQgaTMgPSAxOyBpMyA8IGxlbmd0aDsgaTMgKz0gMSkge1xuICAgIGNvbnN0IGswID0gYmFnRW50cmllc1tpMyAtIDFdWzBdO1xuICAgIGNvbnN0IGsxID0gYmFnRW50cmllc1tpM11bMF07XG4gICAgaWYgKGZ1bGxDb21wYXJlKGswLCBrMSkgPT09IDApIHtcbiAgICAgIHJldHVybiBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgdmFsdWUgaGFzIGR1cGxpY2F0ZSBrZXlzOiAke2swfWApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgYXNzZXJ0Tm9EdXBsaWNhdGVLZXlzID0gKGJhZ0VudHJpZXMsIGZ1bGxDb21wYXJlID0gdm9pZCAwKSA9PiB7XG4gIGNoZWNrTm9EdXBsaWNhdGVLZXlzKGJhZ0VudHJpZXMsIGZ1bGxDb21wYXJlLCBhc3NlcnRDaGVja2VyKTtcbn07XG52YXIgY2hlY2tCYWdFbnRyaWVzID0gKGJhZ0VudHJpZXMsIGNoZWNrKSA9PiB7XG4gIGlmIChwYXNzU3R5bGVPZihiYWdFbnRyaWVzKSAhPT0gXCJjb3B5QXJyYXlcIikge1xuICAgIHJldHVybiBjaGVjayhcbiAgICAgIGZhbHNlLFxuICAgICAgcmVkYWN0ZWRgVGhlIGVudHJpZXMgb2YgYSBjb3B5QmFnIG11c3QgYmUgYSBjb3B5QXJyYXk6ICR7YmFnRW50cmllc31gXG4gICAgKTtcbiAgfVxuICBpZiAoIWlzUmFua1NvcnRlZChiYWdFbnRyaWVzLCBjb21wYXJlQW50aVJhbmspKSB7XG4gICAgcmV0dXJuIGNoZWNrKFxuICAgICAgZmFsc2UsXG4gICAgICByZWRhY3RlZGBUaGUgZW50cmllcyBvZiBhIGNvcHlCYWcgbXVzdCBiZSBzb3J0ZWQgaW4gcmV2ZXJzZSByYW5rIG9yZGVyOiAke2JhZ0VudHJpZXN9YFxuICAgICk7XG4gIH1cbiAgZm9yIChjb25zdCBlbnRyeSBvZiBiYWdFbnRyaWVzKSB7XG4gICAgaWYgKHBhc3NTdHlsZU9mKGVudHJ5KSAhPT0gXCJjb3B5QXJyYXlcIiB8fCBlbnRyeS5sZW5ndGggIT09IDIgfHwgdHlwZW9mIGVudHJ5WzFdICE9PSBcImJpZ2ludFwiKSB7XG4gICAgICByZXR1cm4gY2hlY2soXG4gICAgICAgIGZhbHNlLFxuICAgICAgICByZWRhY3RlZGBFYWNoIGVudHJ5IG9mIGEgY29weUJhZyBtdXN0IGJlIHBhaXIgb2YgYSBrZXkgYW5kIGEgYmlnaW50IHJlcHJlc2VudGluZyBhIGNvdW50OiAke2VudHJ5fWBcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChlbnRyeVsxXSA8IDEpIHtcbiAgICAgIHJldHVybiBjaGVjayhcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIHJlZGFjdGVkYEVhY2ggZW50cnkgb2YgYSBjb3B5QmFnIG11c3QgaGF2ZSBhIHBvc2l0aXZlIGNvdW50OiAke2VudHJ5fWBcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjaGVja05vRHVwbGljYXRlS2V5cyhiYWdFbnRyaWVzLCB2b2lkIDAsIGNoZWNrKTtcbn07XG5oYXJkZW4oY2hlY2tCYWdFbnRyaWVzKTtcbnZhciBhc3NlcnRCYWdFbnRyaWVzID0gKGJhZ0VudHJpZXMpID0+IHtcbiAgY2hlY2tCYWdFbnRyaWVzKGJhZ0VudHJpZXMsIGFzc2VydENoZWNrZXIpO1xufTtcbmhhcmRlbihhc3NlcnRCYWdFbnRyaWVzKTtcbnZhciBjb2VyY2VUb0JhZ0VudHJpZXMgPSAoYmFnRW50cmllc0xpc3QpID0+IHtcbiAgY29uc3QgYmFnRW50cmllcyA9IHNvcnRCeVJhbmsoYmFnRW50cmllc0xpc3QsIGNvbXBhcmVBbnRpUmFuayk7XG4gIGFzc2VydEJhZ0VudHJpZXMoYmFnRW50cmllcyk7XG4gIHJldHVybiBiYWdFbnRyaWVzO1xufTtcbmhhcmRlbihjb2VyY2VUb0JhZ0VudHJpZXMpO1xudmFyIG1ha2VCYWdPZkVudHJpZXMgPSAoYmFnRW50cnlJdGVyKSA9PiBtYWtlVGFnZ2VkKFwiY29weUJhZ1wiLCBjb2VyY2VUb0JhZ0VudHJpZXMoYmFnRW50cnlJdGVyKSk7XG5oYXJkZW4obWFrZUJhZ09mRW50cmllcyk7XG5cbi8vXG52YXIgeyBvd25LZXlzOiBvd25LZXlzMTUgfSA9IFJlZmxlY3Q7XG52YXIgY2hlY2tQcmltaXRpdmVLZXkgPSAodmFsLCBjaGVjaykgPT4ge1xuICBpZiAoaXNPYmplY3QyKHZhbCkpIHtcbiAgICByZXR1cm4gY2hlY2sgIT09IGlkZW50Q2hlY2tlciAmJiBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgQSAke3F1b3RlKHR5cGVvZiB2YWwpfSBjYW5ub3QgYmUgYSBwcmltaXRpdmU6ICR7dmFsfWApO1xuICB9XG4gIGFzc2VydFBhc3NhYmxlKHZhbCk7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBpc1ByaW1pdGl2ZUtleSA9ICh2YWwpID0+IGNoZWNrUHJpbWl0aXZlS2V5KHZhbCwgaWRlbnRDaGVja2VyKTtcbmhhcmRlbihpc1ByaW1pdGl2ZUtleSk7XG52YXIgYXNzZXJ0UHJpbWl0aXZlS2V5ID0gKHZhbCkgPT4ge1xuICBjaGVja1ByaW1pdGl2ZUtleSh2YWwsIGFzc2VydENoZWNrZXIpO1xufTtcbmhhcmRlbihhc3NlcnRQcmltaXRpdmVLZXkpO1xudmFyIGNoZWNrU2NhbGFyS2V5ID0gKHZhbCwgY2hlY2spID0+IHtcbiAgaWYgKGlzUHJpbWl0aXZlS2V5KHZhbCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCBwYXNzU3R5bGUgPSBwYXNzU3R5bGVPZih2YWwpO1xuICBpZiAocGFzc1N0eWxlID09PSBcInJlbW90YWJsZVwiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGNoZWNrKGZhbHNlLCByZWRhY3RlZGBBICR7cXVvdGUocGFzc1N0eWxlKX0gY2Fubm90IGJlIGEgc2NhbGFyIGtleTogJHt2YWx9YCk7XG59O1xudmFyIGlzU2NhbGFyS2V5ID0gKHZhbCkgPT4gY2hlY2tTY2FsYXJLZXkodmFsLCBpZGVudENoZWNrZXIpO1xuaGFyZGVuKGlzU2NhbGFyS2V5KTtcbnZhciBhc3NlcnRTY2FsYXJLZXkgPSAodmFsKSA9PiB7XG4gIGNoZWNrU2NhbGFyS2V5KHZhbCwgYXNzZXJ0Q2hlY2tlcik7XG59O1xuaGFyZGVuKGFzc2VydFNjYWxhcktleSk7XG52YXIga2V5TWVtbyA9IC8qICAgICAgICAgICAqLyBuZXcgV2Vha1NldCgpO1xudmFyIGNoZWNrS2V5ID0gKHZhbCwgY2hlY2spID0+IHtcbiAgaWYgKCFpc09iamVjdDIodmFsKSkge1xuICAgIGFzc2VydFBhc3NhYmxlKHZhbCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGtleU1lbW8uaGFzKHZhbCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSBjaGVja0tleUludGVybmFsKHZhbCwgY2hlY2spO1xuICBpZiAocmVzdWx0KSB7XG4gICAga2V5TWVtby5hZGQodmFsKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbmhhcmRlbihjaGVja0tleSk7XG52YXIgaXNLZXkgPSAodmFsKSA9PiBjaGVja0tleSh2YWwsIGlkZW50Q2hlY2tlcik7XG5oYXJkZW4oaXNLZXkpO1xudmFyIGFzc2VydEtleSA9ICh2YWwpID0+IHtcbiAgY2hlY2tLZXkodmFsLCBhc3NlcnRDaGVja2VyKTtcbn07XG5oYXJkZW4oYXNzZXJ0S2V5KTtcbnZhciBjb3B5U2V0TWVtbyA9IC8qICAgICAgICAgICAqLyBuZXcgV2Vha1NldCgpO1xudmFyIGNoZWNrQ29weVNldCA9IChzMywgY2hlY2spID0+IHtcbiAgaWYgKGNvcHlTZXRNZW1vLmhhcyhzMykpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSAocGFzc1N0eWxlT2YoczMpID09PSBcInRhZ2dlZFwiICYmIGdldFRhZyhzMykgPT09IFwiY29weVNldFwiIHx8IGNoZWNrKGZhbHNlLCByZWRhY3RlZGBOb3QgYSBjb3B5U2V0OiAke3MzfWApKSAmJiBjaGVja0VsZW1lbnRzKHMzLnBheWxvYWQsIGNoZWNrKSAmJiBjaGVja0tleShzMy5wYXlsb2FkLCBjaGVjayk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICBjb3B5U2V0TWVtby5hZGQoczMpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuaGFyZGVuKGNoZWNrQ29weVNldCk7XG52YXIgaXNDb3B5U2V0ID0gKHMzKSA9PiBjaGVja0NvcHlTZXQoczMsIGlkZW50Q2hlY2tlcik7XG5oYXJkZW4oaXNDb3B5U2V0KTtcbnZhciBhc3NlcnRDb3B5U2V0ID0gKHMzKSA9PiB7XG4gIGNoZWNrQ29weVNldChzMywgYXNzZXJ0Q2hlY2tlcik7XG59O1xuaGFyZGVuKGFzc2VydENvcHlTZXQpO1xudmFyIGdldENvcHlTZXRLZXlzID0gKHMzKSA9PiB7XG4gIGFzc2VydENvcHlTZXQoczMpO1xuICByZXR1cm4gczMucGF5bG9hZDtcbn07XG5oYXJkZW4oZ2V0Q29weVNldEtleXMpO1xudmFyIGV2ZXJ5Q29weVNldEtleSA9IChzMywgZm4pID0+IGdldENvcHlTZXRLZXlzKHMzKS5ldmVyeSgoa2V5LCBpbmRleCkgPT4gZm4oa2V5LCBpbmRleCkpO1xuaGFyZGVuKGV2ZXJ5Q29weVNldEtleSk7XG52YXIgbWFrZUNvcHlTZXQgPSAoZWxlbWVudEl0ZXIpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gbWFrZVNldE9mRWxlbWVudHMoZWxlbWVudEl0ZXIpO1xuICBhc3NlcnRDb3B5U2V0KHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuaGFyZGVuKG1ha2VDb3B5U2V0KTtcbnZhciBjb3B5QmFnTWVtbyA9IC8qICAgICAgICAgICAqLyBuZXcgV2Vha1NldCgpO1xudmFyIGNoZWNrQ29weUJhZyA9IChiMywgY2hlY2spID0+IHtcbiAgaWYgKGNvcHlCYWdNZW1vLmhhcyhiMykpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSAocGFzc1N0eWxlT2YoYjMpID09PSBcInRhZ2dlZFwiICYmIGdldFRhZyhiMykgPT09IFwiY29weUJhZ1wiIHx8IGNoZWNrKGZhbHNlLCByZWRhY3RlZGBOb3QgYSBjb3B5QmFnOiAke2IzfWApKSAmJiBjaGVja0JhZ0VudHJpZXMoYjMucGF5bG9hZCwgY2hlY2spICYmIGNoZWNrS2V5KGIzLnBheWxvYWQsIGNoZWNrKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIGNvcHlCYWdNZW1vLmFkZChiMyk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5oYXJkZW4oY2hlY2tDb3B5QmFnKTtcbnZhciBpc0NvcHlCYWcgPSAoYjMpID0+IGNoZWNrQ29weUJhZyhiMywgaWRlbnRDaGVja2VyKTtcbmhhcmRlbihpc0NvcHlCYWcpO1xudmFyIGFzc2VydENvcHlCYWcgPSAoYjMpID0+IHtcbiAgY2hlY2tDb3B5QmFnKGIzLCBhc3NlcnRDaGVja2VyKTtcbn07XG5oYXJkZW4oYXNzZXJ0Q29weUJhZyk7XG52YXIgZ2V0Q29weUJhZ0VudHJpZXMgPSAoYjMpID0+IHtcbiAgYXNzZXJ0Q29weUJhZyhiMyk7XG4gIHJldHVybiBiMy5wYXlsb2FkO1xufTtcbmhhcmRlbihnZXRDb3B5QmFnRW50cmllcyk7XG52YXIgZXZlcnlDb3B5QmFnRW50cnkgPSAoYjMsIGZuKSA9PiBnZXRDb3B5QmFnRW50cmllcyhiMykuZXZlcnkoKGVudHJ5LCBpbmRleCkgPT4gZm4oZW50cnksIGluZGV4KSk7XG5oYXJkZW4oZXZlcnlDb3B5QmFnRW50cnkpO1xudmFyIG1ha2VDb3B5QmFnID0gKGJhZ0VudHJ5SXRlcikgPT4ge1xuICBjb25zdCByZXN1bHQgPSBtYWtlQmFnT2ZFbnRyaWVzKGJhZ0VudHJ5SXRlcik7XG4gIGFzc2VydENvcHlCYWcocmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5oYXJkZW4obWFrZUNvcHlCYWcpO1xudmFyIG1ha2VDb3B5QmFnRnJvbUVsZW1lbnRzID0gKGVsZW1lbnRJdGVyKSA9PiB7XG4gIGNvbnN0IGZ1bGxDb21wYXJlID0gbWFrZUZ1bGxPcmRlckNvbXBhcmF0b3JLaXQoKS5hbnRpQ29tcGFyYXRvcjtcbiAgY29uc3Qgc29ydGVkID0gc29ydEJ5UmFuayhlbGVtZW50SXRlciwgZnVsbENvbXBhcmUpO1xuICBjb25zdCBlbnRyaWVzMTAgPSBbXTtcbiAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IHNvcnRlZC5sZW5ndGg7ICkge1xuICAgIGNvbnN0IGsgPSBzb3J0ZWRbaTNdO1xuICAgIGxldCBqID0gaTMgKyAxO1xuICAgIHdoaWxlIChqIDwgc29ydGVkLmxlbmd0aCAmJiBmdWxsQ29tcGFyZShrLCBzb3J0ZWRbal0pID09PSAwKSB7XG4gICAgICBqICs9IDE7XG4gICAgfVxuICAgIGVudHJpZXMxMC5wdXNoKFtrLCBCaWdJbnQoaiAtIGkzKV0pO1xuICAgIGkzID0gajtcbiAgfVxuICByZXR1cm4gbWFrZUNvcHlCYWcoZW50cmllczEwKTtcbn07XG5oYXJkZW4obWFrZUNvcHlCYWdGcm9tRWxlbWVudHMpO1xudmFyIGNvcHlNYXBNZW1vID0gLyogICAgICAgICAgICovIG5ldyBXZWFrU2V0KCk7XG52YXIgY2hlY2tDb3B5TWFwID0gKG0yLCBjaGVjaykgPT4ge1xuICBpZiAoY29weU1hcE1lbW8uaGFzKG0yKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICghKHBhc3NTdHlsZU9mKG0yKSA9PT0gXCJ0YWdnZWRcIiAmJiBnZXRUYWcobTIpID09PSBcImNvcHlNYXBcIikpIHtcbiAgICByZXR1cm4gY2hlY2soZmFsc2UsIHJlZGFjdGVkYE5vdCBhIGNvcHlNYXA6ICR7bTJ9YCk7XG4gIH1cbiAgY29uc3QgeyBwYXlsb2FkIH0gPSBtMjtcbiAgaWYgKHBhc3NTdHlsZU9mKHBheWxvYWQpICE9PSBcImNvcHlSZWNvcmRcIikge1xuICAgIHJldHVybiBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgQSBjb3B5TWFwJ3MgcGF5bG9hZCBtdXN0IGJlIGEgcmVjb3JkOiAke20yfWApO1xuICB9XG4gIGNvbnN0IHsga2V5czoga2V5czcsIHZhbHVlczogdmFsdWVzOCwgLi4ucmVzdCB9ID0gcGF5bG9hZDtcbiAgY29uc3QgcmVzdWx0ID0gKG93bktleXMxNShyZXN0KS5sZW5ndGggPT09IDAgfHwgY2hlY2soXG4gICAgZmFsc2UsXG4gICAgcmVkYWN0ZWRgQSBjb3B5TWFwJ3MgcGF5bG9hZCBtdXN0IG9ubHkgaGF2ZSAua2V5cyBhbmQgLnZhbHVlczogJHttMn1gXG4gICkpICYmIGNoZWNrRWxlbWVudHMoa2V5czcsIGNoZWNrKSAmJiBjaGVja0tleShrZXlzNywgY2hlY2spICYmIChwYXNzU3R5bGVPZih2YWx1ZXM4KSA9PT0gXCJjb3B5QXJyYXlcIiB8fCBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgQSBjb3B5TWFwJ3MgLnZhbHVlcyBtdXN0IGJlIGEgY29weUFycmF5OiAke20yfWApKSAmJiAoa2V5czcubGVuZ3RoID09PSB2YWx1ZXM4Lmxlbmd0aCB8fCBjaGVjayhcbiAgICBmYWxzZSxcbiAgICByZWRhY3RlZGBBIGNvcHlNYXAgbXVzdCBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBrZXlzIGFuZCB2YWx1ZXM6ICR7bTJ9YFxuICApKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIGNvcHlNYXBNZW1vLmFkZChtMik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5oYXJkZW4oY2hlY2tDb3B5TWFwKTtcbnZhciBpc0NvcHlNYXAgPSAobTIpID0+IGNoZWNrQ29weU1hcChtMiwgaWRlbnRDaGVja2VyKTtcbmhhcmRlbihpc0NvcHlNYXApO1xudmFyIGFzc2VydENvcHlNYXAgPSAobTIpID0+IHtcbiAgY2hlY2tDb3B5TWFwKG0yLCBhc3NlcnRDaGVja2VyKTtcbn07XG5oYXJkZW4oYXNzZXJ0Q29weU1hcCk7XG52YXIgZ2V0Q29weU1hcEtleXMgPSAobTIpID0+IHtcbiAgYXNzZXJ0Q29weU1hcChtMik7XG4gIHJldHVybiBtMi5wYXlsb2FkLmtleXM7XG59O1xuaGFyZGVuKGdldENvcHlNYXBLZXlzKTtcbnZhciBnZXRDb3B5TWFwVmFsdWVzID0gKG0yKSA9PiB7XG4gIGFzc2VydENvcHlNYXAobTIpO1xuICByZXR1cm4gbTIucGF5bG9hZC52YWx1ZXM7XG59O1xuaGFyZGVuKGdldENvcHlNYXBWYWx1ZXMpO1xudmFyIGdldENvcHlNYXBFbnRyeUFycmF5ID0gKG0yKSA9PiB7XG4gIGFzc2VydENvcHlNYXAobTIpO1xuICBjb25zdCB7XG4gICAgcGF5bG9hZDogeyBrZXlzOiBrZXlzNywgdmFsdWVzOiB2YWx1ZXM4IH1cbiAgfSA9IG0yO1xuICByZXR1cm4gaGFyZGVuKGtleXM3Lm1hcCgoa2V5LCBpMykgPT4gW2tleSwgdmFsdWVzOFtpM11dKSk7XG59O1xuaGFyZGVuKGdldENvcHlNYXBFbnRyeUFycmF5KTtcbnZhciBnZXRDb3B5TWFwRW50cmllcyA9IChtMikgPT4ge1xuICBhc3NlcnRDb3B5TWFwKG0yKTtcbiAgY29uc3Qge1xuICAgIHBheWxvYWQ6IHsga2V5czoga2V5czcsIHZhbHVlczogdmFsdWVzOCB9XG4gIH0gPSBtMjtcbiAgY29uc3QgeyBsZW5ndGggfSA9IChcbiAgICAvKiAgICAgICAgICAgICAgICAqL1xuICAgIGtleXM3XG4gICk7XG4gIHJldHVybiBGYXIoXCJDb3B5TWFwIGVudHJpZXMgaXRlcmFibGVcIiwge1xuICAgIFtTeW1ib2wuaXRlcmF0b3JdOiAoKSA9PiB7XG4gICAgICBsZXQgaTMgPSAwO1xuICAgICAgcmV0dXJuIEZhcihcIkNvcHlNYXAgZW50cmllcyBpdGVyYXRvclwiLCB7XG4gICAgICAgIG5leHQ6ICgpID0+IHtcbiAgICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICAgIGlmIChpMyA8IGxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFyZGVuKHsgZG9uZTogZmFsc2UsIHZhbHVlOiBba2V5czdbaTNdLCB2YWx1ZXM4W2kzXV0gfSk7XG4gICAgICAgICAgICBpMyArPSAxO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFyZGVuKHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHZvaWQgMCB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn07XG5oYXJkZW4oZ2V0Q29weU1hcEVudHJpZXMpO1xudmFyIGV2ZXJ5Q29weU1hcEtleSA9IChtMiwgZm4pID0+IGdldENvcHlNYXBLZXlzKG0yKS5ldmVyeSgoa2V5LCBpbmRleCkgPT4gZm4oa2V5LCBpbmRleCkpO1xuaGFyZGVuKGV2ZXJ5Q29weU1hcEtleSk7XG52YXIgZXZlcnlDb3B5TWFwVmFsdWUgPSAobTIsIGZuKSA9PiBnZXRDb3B5TWFwVmFsdWVzKG0yKS5ldmVyeSgodmFsdWUsIGluZGV4KSA9PiBmbih2YWx1ZSwgaW5kZXgpKTtcbmhhcmRlbihldmVyeUNvcHlNYXBWYWx1ZSk7XG52YXIgY29weU1hcEtleVNldCA9IChtMikgPT4gKFxuICAvL1xuICBtYWtlVGFnZ2VkKFwiY29weVNldFwiLCBtMi5wYXlsb2FkLmtleXMpXG4pO1xuaGFyZGVuKGNvcHlNYXBLZXlTZXQpO1xudmFyIG1ha2VDb3B5TWFwID0gKGVudHJpZXMxMCkgPT4ge1xuICBjb25zdCBzb3J0ZWRFbnRyaWVzID0gc29ydEJ5UmFuayhlbnRyaWVzMTAsIGNvbXBhcmVBbnRpUmFuayk7XG4gIGNvbnN0IGtleXM3ID0gc29ydGVkRW50cmllcy5tYXAoKFtrLCBfdl0pID0+IGspO1xuICBjb25zdCB2YWx1ZXM4ID0gc29ydGVkRW50cmllcy5tYXAoKFtfaywgdjJdKSA9PiB2Mik7XG4gIGNvbnN0IHJlc3VsdCA9IG1ha2VUYWdnZWQoXCJjb3B5TWFwXCIsIHsga2V5czoga2V5czcsIHZhbHVlczogdmFsdWVzOCB9KTtcbiAgYXNzZXJ0Q29weU1hcChyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbmhhcmRlbihtYWtlQ29weU1hcCk7XG52YXIgY2hlY2tLZXlJbnRlcm5hbCA9ICh2YWwsIGNoZWNrKSA9PiB7XG4gIGNvbnN0IGNoZWNrSXQgPSAoY2hpbGQpID0+IGNoZWNrS2V5KGNoaWxkLCBjaGVjayk7XG4gIGNvbnN0IHBhc3NTdHlsZSA9IHBhc3NTdHlsZU9mKHZhbCk7XG4gIHN3aXRjaCAocGFzc1N0eWxlKSB7XG4gICAgY2FzZSBcImNvcHlSZWNvcmRcIjoge1xuICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXModmFsKS5ldmVyeShjaGVja0l0KTtcbiAgICB9XG4gICAgY2FzZSBcImNvcHlBcnJheVwiOiB7XG4gICAgICByZXR1cm4gdmFsLmV2ZXJ5KGNoZWNrSXQpO1xuICAgIH1cbiAgICBjYXNlIFwidGFnZ2VkXCI6IHtcbiAgICAgIGNvbnN0IHRhZyA9IGdldFRhZyh2YWwpO1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBcImNvcHlTZXRcIjoge1xuICAgICAgICAgIHJldHVybiBjaGVja0NvcHlTZXQodmFsLCBjaGVjayk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImNvcHlCYWdcIjoge1xuICAgICAgICAgIHJldHVybiBjaGVja0NvcHlCYWcodmFsLCBjaGVjayk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImNvcHlNYXBcIjoge1xuICAgICAgICAgIHJldHVybiBjaGVja0NvcHlNYXAodmFsLCBjaGVjaykgJiYgLy9cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vXG4gICAgICAgICAgZXZlcnlDb3B5TWFwVmFsdWUodmFsLCBjaGVja0l0KTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgcmV0dXJuIGNoZWNrICE9PSBpZGVudENoZWNrZXIgJiYgY2hlY2soZmFsc2UsIHJlZGFjdGVkYEEgcGFzc2FibGUgdGFnZ2VkICR7cXVvdGUodGFnKX0gaXMgbm90IGEga2V5OiAke3ZhbH1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjYXNlIFwicmVtb3RhYmxlXCI6IHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICBjYXNlIFwicHJvbWlzZVwiOiB7XG4gICAgICByZXR1cm4gY2hlY2soZmFsc2UsIHJlZGFjdGVkYEEgJHtxdW90ZShwYXNzU3R5bGUpfSBjYW5ub3QgYmUgYSBrZXlgKTtcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGB1bmV4cGVjdGVkIHBhc3NTdHlsZSAke3F1b3RlKHBhc3NTdHlsZSl9OiAke3ZhbH1gO1xuICAgIH1cbiAgfVxufTtcblxuLy9cbnZhciBtYWtlSXRlcmF0b3IgPSAobmV4dCkgPT4ge1xuICBjb25zdCBpdGVyID0gaGFyZGVuKHtcbiAgICBbU3ltYm9sLml0ZXJhdG9yXTogKCkgPT4gaXRlcixcbiAgICBuZXh0XG4gIH0pO1xuICByZXR1cm4gaXRlcjtcbn07XG5oYXJkZW4obWFrZUl0ZXJhdG9yKTtcblxuLy9cbnZhciBtYWtlQXJyYXlJdGVyYXRvciA9IChhcnIpID0+IHtcbiAgY29uc3QgeyBsZW5ndGggfSA9IGFycjtcbiAgbGV0IGkzID0gMDtcbiAgcmV0dXJuIG1ha2VJdGVyYXRvcigoKSA9PiB7XG4gICAgbGV0IHZhbHVlO1xuICAgIGlmIChpMyA8IGxlbmd0aCkge1xuICAgICAgdmFsdWUgPSBhcnJbaTNdO1xuICAgICAgaTMgKz0gMTtcbiAgICAgIHJldHVybiBoYXJkZW4oeyBkb25lOiBmYWxzZSwgdmFsdWUgfSk7XG4gICAgfVxuICAgIHJldHVybiBoYXJkZW4oeyBkb25lOiB0cnVlLCB2YWx1ZSB9KTtcbiAgfSk7XG59O1xuaGFyZGVuKG1ha2VBcnJheUl0ZXJhdG9yKTtcblxuLy9cbnZhciBnZW5lcmF0ZUZ1bGxTb3J0ZWRFbnRyaWVzID0gKGVudHJpZXMxMCwgcmFua0NvbXBhcmUsIGZ1bGxDb21wYXJlKSA9PiB7XG4gIGFzc2VydFJhbmtTb3J0ZWQoZW50cmllczEwLCByYW5rQ29tcGFyZSk7XG4gIGNvbnN0IHsgbGVuZ3RoIH0gPSBlbnRyaWVzMTA7XG4gIGxldCBpMyA9IDA7XG4gIGxldCBzYW1lUmFua0l0ZXJhdG9yO1xuICByZXR1cm4gbWFrZUl0ZXJhdG9yKCgpID0+IHtcbiAgICBpZiAoc2FtZVJhbmtJdGVyYXRvcikge1xuICAgICAgY29uc3QgcmVzdWx0ID0gc2FtZVJhbmtJdGVyYXRvci5uZXh0KCk7XG4gICAgICBpZiAoIXJlc3VsdC5kb25lKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBzYW1lUmFua0l0ZXJhdG9yID0gdm9pZCAwO1xuICAgIH1cbiAgICBpZiAoaTMgPCBsZW5ndGgpIHtcbiAgICAgIGNvbnN0IGVudHJ5ID0gZW50cmllczEwW2kzXTtcbiAgICAgIGxldCBqID0gaTMgKyAxO1xuICAgICAgd2hpbGUgKGogPCBsZW5ndGggJiYgcmFua0NvbXBhcmUoZW50cnlbMF0sIGVudHJpZXMxMFtqXVswXSkgPT09IDApIHtcbiAgICAgICAgaiArPSAxO1xuICAgICAgfVxuICAgICAgaWYgKGogPT09IGkzICsgMSkge1xuICAgICAgICBpMyA9IGo7XG4gICAgICAgIHJldHVybiBoYXJkZW4oeyBkb25lOiBmYWxzZSwgdmFsdWU6IGVudHJ5IH0pO1xuICAgICAgfVxuICAgICAgY29uc3QgdGllcyA9IGVudHJpZXMxMC5zbGljZShpMywgaik7XG4gICAgICBpMyA9IGo7XG4gICAgICBjb25zdCBzb3J0ZWRUaWVzID0gc29ydEJ5UmFuayh0aWVzLCBmdWxsQ29tcGFyZSk7XG4gICAgICBmb3IgKGxldCBrID0gMTsgayA8IHNvcnRlZFRpZXMubGVuZ3RoOyBrICs9IDEpIHtcbiAgICAgICAgY29uc3QgW2tleTBdID0gc29ydGVkVGllc1trIC0gMV07XG4gICAgICAgIGNvbnN0IFtrZXkxXSA9IHNvcnRlZFRpZXNba107XG4gICAgICAgIE1hdGguc2lnbihmdWxsQ29tcGFyZShrZXkwLCBrZXkxKSkgfHwgdGhyb3dSZWRhY3RlZGBEdXBsaWNhdGUgZW50cnkga2V5OiAke2tleTB9YDtcbiAgICAgIH1cbiAgICAgIHNhbWVSYW5rSXRlcmF0b3IgPSBtYWtlQXJyYXlJdGVyYXRvcihzb3J0ZWRUaWVzKTtcbiAgICAgIHJldHVybiBzYW1lUmFua0l0ZXJhdG9yLm5leHQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhcmRlbih7IGRvbmU6IHRydWUsIHZhbHVlOiB2b2lkIDAgfSk7XG4gIH0pO1xufTtcbmhhcmRlbihnZW5lcmF0ZUZ1bGxTb3J0ZWRFbnRyaWVzKTtcbnZhciBnZW5lcmF0ZUNvbGxlY3Rpb25QYWlyRW50cmllcyA9IChjMSwgYzIsIGdldEVudHJpZXMsIGFic2VudFZhbHVlKSA9PiB7XG4gIGNvbnN0IGUxID0gZ2V0RW50cmllcyhjMSk7XG4gIGNvbnN0IGUyID0gZ2V0RW50cmllcyhjMik7XG4gIGNvbnN0IGZ1bGxDb21wYXJlID0gbWFrZUZ1bGxPcmRlckNvbXBhcmF0b3JLaXQoKS5hbnRpQ29tcGFyYXRvcjtcbiAgY29uc3QgeCA9IGdlbmVyYXRlRnVsbFNvcnRlZEVudHJpZXMoZTEsIGNvbXBhcmVBbnRpUmFuaywgZnVsbENvbXBhcmUpO1xuICBjb25zdCB5ID0gZ2VuZXJhdGVGdWxsU29ydGVkRW50cmllcyhlMiwgY29tcGFyZUFudGlSYW5rLCBmdWxsQ29tcGFyZSk7XG4gIGxldCB4RG9uZTtcbiAgbGV0IHhLZXk7XG4gIGxldCB4VmFsdWU7XG4gIGxldCB5RG9uZTtcbiAgbGV0IHlLZXk7XG4gIGxldCB5VmFsdWU7XG4gIGNvbnN0IG5vbkVudHJ5ID0gW3ZvaWQgMCwgdm9pZCAwXTtcbiAgY29uc3QgbmV4dFggPSAoKSA9PiB7XG4gICAgIXhEb25lIHx8IHRocm93UmVkYWN0ZWRgSW50ZXJuYWw6IG5leHRYIG11c3Qgbm90IGJlIGNhbGxlZCBvbmNlIGRvbmVgO1xuICAgIGNvbnN0IHJlc3VsdCA9IHhWYWx1ZTtcbiAgICAoeyBkb25lOiB4RG9uZSwgdmFsdWU6IFt4S2V5LCB4VmFsdWVdID0gbm9uRW50cnkgfSA9IHgubmV4dCgpKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBuZXh0WCgpO1xuICBjb25zdCBuZXh0WSA9ICgpID0+IHtcbiAgICAheURvbmUgfHwgdGhyb3dSZWRhY3RlZGBJbnRlcm5hbDogbmV4dFkgbXVzdCBub3QgYmUgY2FsbGVkIG9uY2UgZG9uZWA7XG4gICAgY29uc3QgcmVzdWx0ID0geVZhbHVlO1xuICAgICh7IGRvbmU6IHlEb25lLCB2YWx1ZTogW3lLZXksIHlWYWx1ZV0gPSBub25FbnRyeSB9ID0geS5uZXh0KCkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG5leHRZKCk7XG4gIHJldHVybiBtYWtlSXRlcmF0b3IoKCkgPT4ge1xuICAgIGxldCBkb25lID0gZmFsc2U7XG4gICAgbGV0IHZhbHVlO1xuICAgIGlmICh4RG9uZSAmJiB5RG9uZSkge1xuICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB2YWx1ZSA9IFt2b2lkIDAsIGFic2VudFZhbHVlLCBhYnNlbnRWYWx1ZV07XG4gICAgfSBlbHNlIGlmICh4RG9uZSkge1xuICAgICAgdmFsdWUgPSBbeUtleSwgYWJzZW50VmFsdWUsIG5leHRZKCldO1xuICAgIH0gZWxzZSBpZiAoeURvbmUpIHtcbiAgICAgIHZhbHVlID0gW3hLZXksIG5leHRYKCksIGFic2VudFZhbHVlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY29tcCA9IGZ1bGxDb21wYXJlKHhLZXksIHlLZXkpO1xuICAgICAgaWYgKGNvbXAgPT09IDApIHtcbiAgICAgICAgdmFsdWUgPSBbeEtleSwgbmV4dFgoKSwgbmV4dFkoKV07XG4gICAgICB9IGVsc2UgaWYgKGNvbXAgPCAwKSB7XG4gICAgICAgIHZhbHVlID0gW3hLZXksIG5leHRYKCksIGFic2VudFZhbHVlXTtcbiAgICAgIH0gZWxzZSBpZiAoY29tcCA+IDApIHtcbiAgICAgICAgdmFsdWUgPSBbeUtleSwgYWJzZW50VmFsdWUsIG5leHRZKCldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBVbmV4cGVjdGVkIGtleSBjb21wYXJpc29uICR7cXVvdGUoY29tcCl9IGZvciAke3hLZXl9IHZzICR7eUtleX1gO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaGFyZGVuKHsgZG9uZSwgdmFsdWUgfSk7XG4gIH0pO1xufTtcbmhhcmRlbihnZW5lcmF0ZUNvbGxlY3Rpb25QYWlyRW50cmllcyk7XG52YXIgbWFrZUNvbXBhcmVDb2xsZWN0aW9uID0gKGdldEVudHJpZXMsIGFic2VudFZhbHVlLCBjb21wYXJlVmFsdWVzMikgPT4gaGFyZGVuKChsZWZ0LCByaWdodCkgPT4ge1xuICBjb25zdCBtZXJnZWQgPSBnZW5lcmF0ZUNvbGxlY3Rpb25QYWlyRW50cmllcyhcbiAgICBsZWZ0LFxuICAgIHJpZ2h0LFxuICAgIGdldEVudHJpZXMsXG4gICAgYWJzZW50VmFsdWVcbiAgKTtcbiAgbGV0IGxlZnRJc0JpZ2dlciA9IGZhbHNlO1xuICBsZXQgcmlnaHRJc0JpZ2dlciA9IGZhbHNlO1xuICBmb3IgKGNvbnN0IFtfa2V5LCBsZWZ0VmFsdWUsIHJpZ2h0VmFsdWVdIG9mIG1lcmdlZCkge1xuICAgIGNvbnN0IGNvbXAgPSBjb21wYXJlVmFsdWVzMihsZWZ0VmFsdWUsIHJpZ2h0VmFsdWUpO1xuICAgIGlmIChjb21wID09PSAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9IGVsc2UgaWYgKGNvbXAgPCAwKSB7XG4gICAgICByaWdodElzQmlnZ2VyID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGNvbXAgPiAwKSB7XG4gICAgICBsZWZ0SXNCaWdnZXIgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBOdW1iZXIuaXNOYU4oY29tcCkgfHwgLy9cbiAgICAgIHRocm93UmVkYWN0ZWRgVW5leHBlY3RlZCB2YWx1ZSBjb21wYXJpc29uICR7cXVvdGUoY29tcCl9IGZvciAke2xlZnRWYWx1ZX0gdnMgJHtyaWdodFZhbHVlfWA7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICBpZiAobGVmdElzQmlnZ2VyICYmIHJpZ2h0SXNCaWdnZXIpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICB9XG4gIHJldHVybiBsZWZ0SXNCaWdnZXIgPyAxIDogcmlnaHRJc0JpZ2dlciA/IC0xIDogMDtcbn0pO1xuaGFyZGVuKG1ha2VDb21wYXJlQ29sbGVjdGlvbik7XG5cbi8vXG52YXIgc2V0Q29tcGFyZSA9IG1ha2VDb21wYXJlQ29sbGVjdGlvbihcbiAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgKHMzKSA9PiBoYXJkZW4oZ2V0Q29weVNldEtleXMoczMpLm1hcCgoa2V5KSA9PiBba2V5LCAxXSkpLFxuICAwLFxuICB0cml2aWFsQ29tcGFyYXRvclxuKTtcbmhhcmRlbihzZXRDb21wYXJlKTtcbnZhciBiYWdDb21wYXJlID0gbWFrZUNvbXBhcmVDb2xsZWN0aW9uKFxuICBnZXRDb3B5QmFnRW50cmllcyxcbiAgMG4sXG4gIHRyaXZpYWxDb21wYXJhdG9yXG4pO1xuaGFyZGVuKGJhZ0NvbXBhcmUpO1xudmFyIEFCU0VOVCA9IFN5bWJvbChcImFic2VudFwiKTtcbnZhciBfbWFwQ29tcGFyZSA9IG1ha2VDb21wYXJlQ29sbGVjdGlvbihcbiAgZ2V0Q29weU1hcEVudHJ5QXJyYXksXG4gIEFCU0VOVCxcbiAgKGxlZnRWYWx1ZSwgcmlnaHRWYWx1ZSkgPT4ge1xuICAgIGlmIChsZWZ0VmFsdWUgPT09IEFCU0VOVCAmJiByaWdodFZhbHVlID09PSBBQlNFTlQpIHtcbiAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgSW50ZXJuYWw6IFVuZXhwZWN0ZWQgYWJzZW50IGVudHJ5IHBhaXJgO1xuICAgIH0gZWxzZSBpZiAobGVmdFZhbHVlID09PSBBQlNFTlQpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9IGVsc2UgaWYgKHJpZ2h0VmFsdWUgPT09IEFCU0VOVCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjb21wYXJlS2V5cyhsZWZ0VmFsdWUsIHJpZ2h0VmFsdWUpO1xuICAgIH1cbiAgfVxuKTtcbmhhcmRlbihfbWFwQ29tcGFyZSk7XG52YXIgY29tcGFyZUtleXMgPSAobGVmdCwgcmlnaHQpID0+IHtcbiAgYXNzZXJ0S2V5KGxlZnQpO1xuICBhc3NlcnRLZXkocmlnaHQpO1xuICBjb25zdCBsZWZ0U3R5bGUgPSBwYXNzU3R5bGVPZihsZWZ0KTtcbiAgY29uc3QgcmlnaHRTdHlsZSA9IHBhc3NTdHlsZU9mKHJpZ2h0KTtcbiAgaWYgKGxlZnRTdHlsZSAhPT0gcmlnaHRTdHlsZSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cbiAgc3dpdGNoIChsZWZ0U3R5bGUpIHtcbiAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgY2FzZSBcIm51bGxcIjpcbiAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgY2FzZSBcInN5bWJvbFwiOiB7XG4gICAgICByZXR1cm4gY29tcGFyZVJhbmsobGVmdCwgcmlnaHQpO1xuICAgIH1cbiAgICBjYXNlIFwibnVtYmVyXCI6IHtcbiAgICAgIGNvbnN0IHJhbmtDb21wID0gY29tcGFyZVJhbmsobGVmdCwgcmlnaHQpO1xuICAgICAgaWYgKHJhbmtDb21wID09PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKE51bWJlci5pc05hTihsZWZ0KSB8fCBOdW1iZXIuaXNOYU4ocmlnaHQpKSB7XG4gICAgICAgIGFzc2VydCghTnVtYmVyLmlzTmFOKGxlZnQpIHx8ICFOdW1iZXIuaXNOYU4ocmlnaHQpKTtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByYW5rQ29tcDtcbiAgICB9XG4gICAgY2FzZSBcInJlbW90YWJsZVwiOiB7XG4gICAgICBpZiAobGVmdCA9PT0gcmlnaHQpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICBjYXNlIFwiY29weUFycmF5XCI6IHtcbiAgICAgIGNvbnN0IGxlbiA9IE1hdGgubWluKGxlZnQubGVuZ3RoLCByaWdodC5sZW5ndGgpO1xuICAgICAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IGxlbjsgaTMgKz0gMSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjb21wYXJlS2V5cyhsZWZ0W2kzXSwgcmlnaHRbaTNdKTtcbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gMCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBjb21wYXJlUmFuayhsZWZ0Lmxlbmd0aCwgcmlnaHQubGVuZ3RoKTtcbiAgICB9XG4gICAgY2FzZSBcImNvcHlSZWNvcmRcIjoge1xuICAgICAgY29uc3QgbGVmdE5hbWVzID0gcmVjb3JkTmFtZXMobGVmdCk7XG4gICAgICBjb25zdCByaWdodE5hbWVzID0gcmVjb3JkTmFtZXMocmlnaHQpO1xuICAgICAgaWYgKCFrZXlFUShsZWZ0TmFtZXMsIHJpZ2h0TmFtZXMpKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgICB9XG4gICAgICBjb25zdCBsZWZ0VmFsdWVzID0gcmVjb3JkVmFsdWVzKGxlZnQsIGxlZnROYW1lcyk7XG4gICAgICBjb25zdCByaWdodFZhbHVlcyA9IHJlY29yZFZhbHVlcyhyaWdodCwgcmlnaHROYW1lcyk7XG4gICAgICBsZXQgcmVzdWx0ID0gMDtcbiAgICAgIGZvciAobGV0IGkzID0gMDsgaTMgPCBsZWZ0VmFsdWVzLmxlbmd0aDsgaTMgKz0gMSkge1xuICAgICAgICBjb25zdCBjb21wID0gY29tcGFyZUtleXMobGVmdFZhbHVlc1tpM10sIHJpZ2h0VmFsdWVzW2kzXSk7XG4gICAgICAgIGlmIChOdW1iZXIuaXNOYU4oY29tcCkpIHtcbiAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQgIT09IGNvbXAgJiYgY29tcCAhPT0gMCkge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IDApIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGNvbXA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFzc2VydChcbiAgICAgICAgICAgICAgcmVzdWx0ID09PSAtMSAmJiBjb21wID09PSAxIHx8IHJlc3VsdCA9PT0gMSAmJiBjb21wID09PSAtMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjYXNlIFwidGFnZ2VkXCI6IHtcbiAgICAgIGNvbnN0IGxlZnRUYWcgPSBnZXRUYWcobGVmdCk7XG4gICAgICBjb25zdCByaWdodFRhZyA9IGdldFRhZyhyaWdodCk7XG4gICAgICBpZiAobGVmdFRhZyAhPT0gcmlnaHRUYWcpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAobGVmdFRhZykge1xuICAgICAgICBjYXNlIFwiY29weVNldFwiOiB7XG4gICAgICAgICAgcmV0dXJuIHNldENvbXBhcmUobGVmdCwgcmlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJjb3B5QmFnXCI6IHtcbiAgICAgICAgICByZXR1cm4gYmFnQ29tcGFyZShsZWZ0LCByaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImNvcHlNYXBcIjoge1xuICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgTWFwIGNvbXBhcmlzb24gbm90IHlldCBpbXBsZW1lbnRlZDogJHtsZWZ0fSB2cyAke3JpZ2h0fWA7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgdW5leHBlY3RlZCB0YWcgJHtxdW90ZShsZWZ0VGFnKX06ICR7bGVmdH1gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgdW5leHBlY3RlZCBwYXNzU3R5bGUgJHtxdW90ZShsZWZ0U3R5bGUpfTogJHtsZWZ0fWA7XG4gICAgfVxuICB9XG59O1xuaGFyZGVuKGNvbXBhcmVLZXlzKTtcbnZhciBrZXlMVCA9IChsZWZ0LCByaWdodCkgPT4gY29tcGFyZUtleXMobGVmdCwgcmlnaHQpIDwgMDtcbmhhcmRlbihrZXlMVCk7XG52YXIga2V5TFRFID0gKGxlZnQsIHJpZ2h0KSA9PiBjb21wYXJlS2V5cyhsZWZ0LCByaWdodCkgPD0gMDtcbmhhcmRlbihrZXlMVEUpO1xudmFyIGtleUVRID0gKGxlZnQsIHJpZ2h0KSA9PiBjb21wYXJlS2V5cyhsZWZ0LCByaWdodCkgPT09IDA7XG5oYXJkZW4oa2V5RVEpO1xudmFyIGtleUdURSA9IChsZWZ0LCByaWdodCkgPT4gY29tcGFyZUtleXMobGVmdCwgcmlnaHQpID49IDA7XG5oYXJkZW4oa2V5R1RFKTtcbnZhciBrZXlHVCA9IChsZWZ0LCByaWdodCkgPT4gY29tcGFyZUtleXMobGVmdCwgcmlnaHQpID4gMDtcbmhhcmRlbihrZXlHVCk7XG5cbi8vXG52YXIgd2luZG93UmVzb3J0ID0gKGVsZW1lbnRzLCByYW5rQ29tcGFyZSwgZnVsbENvbXBhcmUpID0+IHtcbiAgYXNzZXJ0UmFua1NvcnRlZChlbGVtZW50cywgcmFua0NvbXBhcmUpO1xuICBjb25zdCB7IGxlbmd0aCB9ID0gZWxlbWVudHM7XG4gIGxldCBpMyA9IDA7XG4gIGxldCBvcHRJbm5lckl0ZXJhdG9yO1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICBbU3ltYm9sLml0ZXJhdG9yXTogKCkgPT4gaGFyZGVuKHtcbiAgICAgIG5leHQ6ICgpID0+IHtcbiAgICAgICAgaWYgKG9wdElubmVySXRlcmF0b3IpIHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBvcHRJbm5lckl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgIG9wdElubmVySXRlcmF0b3IgPSB2b2lkIDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpMyA8IGxlbmd0aCkge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gZWxlbWVudHNbaTNdO1xuICAgICAgICAgIGxldCBqID0gaTMgKyAxO1xuICAgICAgICAgIHdoaWxlIChqIDwgbGVuZ3RoICYmIHJhbmtDb21wYXJlKHZhbHVlLCBlbGVtZW50c1tqXSkgPT09IDApIHtcbiAgICAgICAgICAgIGogKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGogPT09IGkzICsgMSkge1xuICAgICAgICAgICAgaTMgPSBqO1xuICAgICAgICAgICAgcmV0dXJuIGhhcmRlbih7IGRvbmU6IGZhbHNlLCB2YWx1ZSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgc2ltaWxhclJ1biA9IGVsZW1lbnRzLnNsaWNlKGkzLCBqKTtcbiAgICAgICAgICBpMyA9IGo7XG4gICAgICAgICAgY29uc3QgcmVzb3J0ZWQgPSBzb3J0QnlSYW5rKHNpbWlsYXJSdW4sIGZ1bGxDb21wYXJlKTtcbiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZXMocmVzb3J0ZWQsIGZ1bGxDb21wYXJlKTtcbiAgICAgICAgICBvcHRJbm5lckl0ZXJhdG9yID0gcmVzb3J0ZWRbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgICAgIHJldHVybiBvcHRJbm5lckl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gaGFyZGVuKHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG51bGwgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9KTtcbn07XG52YXIgbWVyZ2UgPSAoeGVsZW1lbnRzLCB5ZWxlbWVudHMpID0+IHtcbiAgY29uc3QgZnVsbENvbXBhcmUgPSBtYWtlRnVsbE9yZGVyQ29tcGFyYXRvcktpdCgpLmFudGlDb21wYXJhdG9yO1xuICBjb25zdCB4cyA9IHdpbmRvd1Jlc29ydCh4ZWxlbWVudHMsIGNvbXBhcmVBbnRpUmFuaywgZnVsbENvbXBhcmUpO1xuICBjb25zdCB5cyA9IHdpbmRvd1Jlc29ydCh5ZWxlbWVudHMsIGNvbXBhcmVBbnRpUmFuaywgZnVsbENvbXBhcmUpO1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICBbU3ltYm9sLml0ZXJhdG9yXTogKCkgPT4ge1xuICAgICAgbGV0IHg7XG4gICAgICBsZXQgeERvbmU7XG4gICAgICBsZXQgeTtcbiAgICAgIGxldCB5RG9uZTtcbiAgICAgIGNvbnN0IHhpID0geHNbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgY29uc3QgbmV4dFggPSAoKSA9PiB7XG4gICAgICAgICF4RG9uZSB8fCB0aHJvd1JlZGFjdGVkYEludGVybmFsOiBuZXh0WCBzaG91bGQgbm90IGJlIGNhbGxlZCBvbmNlIGRvbmVgO1xuICAgICAgICAoeyBkb25lOiB4RG9uZSwgdmFsdWU6IHggfSA9IHhpLm5leHQoKSk7XG4gICAgICB9O1xuICAgICAgbmV4dFgoKTtcbiAgICAgIGNvbnN0IHlpID0geXNbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgY29uc3QgbmV4dFkgPSAoKSA9PiB7XG4gICAgICAgICF5RG9uZSB8fCB0aHJvd1JlZGFjdGVkYEludGVybmFsOiBuZXh0WSBzaG91bGQgbm90IGJlIGNhbGxlZCBvbmNlIGRvbmVgO1xuICAgICAgICAoeyBkb25lOiB5RG9uZSwgdmFsdWU6IHkgfSA9IHlpLm5leHQoKSk7XG4gICAgICB9O1xuICAgICAgbmV4dFkoKTtcbiAgICAgIHJldHVybiBoYXJkZW4oe1xuICAgICAgICBuZXh0OiAoKSA9PiB7XG4gICAgICAgICAgbGV0IGRvbmUgPSBmYWxzZTtcbiAgICAgICAgICBsZXQgdmFsdWU7XG4gICAgICAgICAgaWYgKHhEb25lICYmIHlEb25lKSB7XG4gICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhbHVlID0gW251bGwsIDBuLCAwbl07XG4gICAgICAgICAgfSBlbHNlIGlmICh4RG9uZSkge1xuICAgICAgICAgICAgdmFsdWUgPSBbeSwgMG4sIDFuXTtcbiAgICAgICAgICAgIG5leHRZKCk7XG4gICAgICAgICAgfSBlbHNlIGlmICh5RG9uZSkge1xuICAgICAgICAgICAgdmFsdWUgPSBbeCwgMW4sIDBuXTtcbiAgICAgICAgICAgIG5leHRYKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXAgPSBmdWxsQ29tcGFyZSh4LCB5KTtcbiAgICAgICAgICAgIGlmIChjb21wID09PSAwKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gW3gsIDFuLCAxbl07XG4gICAgICAgICAgICAgIG5leHRYKCk7XG4gICAgICAgICAgICAgIG5leHRZKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbXAgPCAwKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gW3gsIDFuLCAwbl07XG4gICAgICAgICAgICAgIG5leHRYKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb21wID4gMCB8fCB0aHJvd1JlZGFjdGVkYEludGVybmFsOiBVbmV4cGVjdGVkIGNvbXAgJHtxdW90ZShjb21wKX1gO1xuICAgICAgICAgICAgICB2YWx1ZSA9IFt5LCAwbiwgMW5dO1xuICAgICAgICAgICAgICBuZXh0WSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaGFyZGVuKHsgZG9uZSwgdmFsdWUgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuaGFyZGVuKG1lcmdlKTtcbnZhciBpdGVySXNTdXBlcnNldCA9ICh4eWkpID0+IHtcbiAgZm9yIChjb25zdCBbX20sIHhjLCBfeWNdIG9mIHh5aSkge1xuICAgIGlmICh4YyA9PT0gMG4pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIGl0ZXJJc0Rpc2pvaW50ID0gKHh5aSkgPT4ge1xuICBmb3IgKGNvbnN0IFtfbSwgeGMsIHljXSBvZiB4eWkpIHtcbiAgICBpZiAoeGMgPj0gMW4gJiYgeWMgPj0gMW4pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIGl0ZXJDb21wYXJlID0gKHh5aSkgPT4ge1xuICBsZXQgbG9uZVkgPSBmYWxzZTtcbiAgbGV0IGxvbmVYID0gZmFsc2U7XG4gIGZvciAoY29uc3QgW19tLCB4YywgeWNdIG9mIHh5aSkge1xuICAgIGlmICh4YyA9PT0gMG4pIHtcbiAgICAgIGxvbmVZID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHljID09PSAwbikge1xuICAgICAgbG9uZVggPSB0cnVlO1xuICAgIH1cbiAgICBpZiAobG9uZVggJiYgbG9uZVkpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICB9XG4gIGlmIChsb25lWCkge1xuICAgIHJldHVybiAxO1xuICB9IGVsc2UgaWYgKGxvbmVZKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2Uge1xuICAgICFsb25lWCAmJiAhbG9uZVkgfHwgdGhyb3dSZWRhY3RlZGBJbnRlcm5hbDogVW5leHBlY3RlZCBsb25lIHBhaXIgJHtxdW90ZShbbG9uZVgsIGxvbmVZXSl9YDtcbiAgICByZXR1cm4gMDtcbiAgfVxufTtcbnZhciBpdGVyVW5pb24gPSAoeHlpKSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBmb3IgKGNvbnN0IFttMiwgeGMsIHljXSBvZiB4eWkpIHtcbiAgICBpZiAoeGMgPj0gMG4pIHtcbiAgICAgIHJlc3VsdC5wdXNoKG0yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeWMgPj0gMG4gfHwgdGhyb3dSZWRhY3RlZGBJbnRlcm5hbDogVW5leHBlY3RlZCBjb3VudCAke3F1b3RlKHljKX1gO1xuICAgICAgcmVzdWx0LnB1c2gobTIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBpdGVyRGlzam9pbnRVbmlvbiA9ICh4eWkpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAoY29uc3QgW20yLCB4YywgeWNdIG9mIHh5aSkge1xuICAgIHhjID09PSAwbiB8fCB5YyA9PT0gMG4gfHwgdGhyb3dSZWRhY3RlZGBTZXRzIG11c3Qgbm90IGhhdmUgY29tbW9uIGVsZW1lbnRzOiAke20yfWA7XG4gICAgaWYgKHhjID49IDFuKSB7XG4gICAgICByZXN1bHQucHVzaChtMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHljID49IDFuIHx8IHRocm93UmVkYWN0ZWRgSW50ZXJuYWw6IFVuZXhwZWN0ZWQgY291bnQgJHtxdW90ZSh5Yyl9YDtcbiAgICAgIHJlc3VsdC5wdXNoKG0yKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgaXRlckludGVyc2VjdGlvbiA9ICh4eWkpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAoY29uc3QgW20yLCB4YywgeWNdIG9mIHh5aSkge1xuICAgIGlmICh4YyA+PSAxbiAmJiB5YyA+PSAxbikge1xuICAgICAgcmVzdWx0LnB1c2gobTIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBpdGVyRGlzam9pbnRTdWJ0cmFjdCA9ICh4eWkpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAoY29uc3QgW20yLCB4YywgeWNdIG9mIHh5aSkge1xuICAgIHhjID49IDFuIHx8IHRocm93UmVkYWN0ZWRgcmlnaHQgZWxlbWVudCAke20yfSB3YXMgbm90IGluIGxlZnRgO1xuICAgIGlmICh5YyA9PT0gMG4pIHtcbiAgICAgIHJlc3VsdC5wdXNoKG0yKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgbWVyZ2VpZnkgPSAoaXRlck9wKSA9PiAoeGVsZW1lbnRzLCB5ZWxlbWVudHMpID0+IGl0ZXJPcChtZXJnZSh4ZWxlbWVudHMsIHllbGVtZW50cykpO1xudmFyIGVsZW1lbnRzSXNTdXBlcnNldCA9IG1lcmdlaWZ5KGl0ZXJJc1N1cGVyc2V0KTtcbnZhciBlbGVtZW50c0lzRGlzam9pbnQgPSBtZXJnZWlmeShpdGVySXNEaXNqb2ludCk7XG52YXIgZWxlbWVudHNDb21wYXJlID0gbWVyZ2VpZnkoaXRlckNvbXBhcmUpO1xudmFyIGVsZW1lbnRzVW5pb24gPSBtZXJnZWlmeShpdGVyVW5pb24pO1xudmFyIGVsZW1lbnRzRGlzam9pbnRVbmlvbiA9IG1lcmdlaWZ5KGl0ZXJEaXNqb2ludFVuaW9uKTtcbnZhciBlbGVtZW50c0ludGVyc2VjdGlvbiA9IG1lcmdlaWZ5KGl0ZXJJbnRlcnNlY3Rpb24pO1xudmFyIGVsZW1lbnRzRGlzam9pbnRTdWJ0cmFjdCA9IG1lcmdlaWZ5KGl0ZXJEaXNqb2ludFN1YnRyYWN0KTtcbnZhciByYXdTZXRpZnkgPSAoZWxlbWVudHNPcCkgPT4gKHhzZXQsIHlzZXQpID0+IGVsZW1lbnRzT3AoeHNldC5wYXlsb2FkLCB5c2V0LnBheWxvYWQpO1xudmFyIHNldGlmeSA9IChlbGVtZW50c09wKSA9PiAoeHNldCwgeXNldCkgPT4gbWFrZVNldE9mRWxlbWVudHMoZWxlbWVudHNPcCh4c2V0LnBheWxvYWQsIHlzZXQucGF5bG9hZCkpO1xudmFyIHNldElzU3VwZXJzZXQgPSByYXdTZXRpZnkoZWxlbWVudHNJc1N1cGVyc2V0KTtcbnZhciBzZXRJc0Rpc2pvaW50ID0gcmF3U2V0aWZ5KGVsZW1lbnRzSXNEaXNqb2ludCk7XG52YXIgc2V0VW5pb24gPSBzZXRpZnkoZWxlbWVudHNVbmlvbik7XG52YXIgc2V0RGlzam9pbnRVbmlvbiA9IHNldGlmeShlbGVtZW50c0Rpc2pvaW50VW5pb24pO1xudmFyIHNldEludGVyc2VjdGlvbiA9IHNldGlmeShlbGVtZW50c0ludGVyc2VjdGlvbik7XG52YXIgc2V0RGlzam9pbnRTdWJ0cmFjdCA9IHNldGlmeShlbGVtZW50c0Rpc2pvaW50U3VidHJhY3QpO1xuXG4vL1xudmFyIGJhZ1dpbmRvd1Jlc29ydCA9IChiYWdFbnRyaWVzLCByYW5rQ29tcGFyZSwgZnVsbENvbXBhcmUpID0+IHtcbiAgYXNzZXJ0UmFua1NvcnRlZChiYWdFbnRyaWVzLCByYW5rQ29tcGFyZSk7XG4gIGNvbnN0IHsgbGVuZ3RoIH0gPSBiYWdFbnRyaWVzO1xuICBsZXQgaTMgPSAwO1xuICBsZXQgb3B0SW5uZXJJdGVyYXRvcjtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgW1N5bWJvbC5pdGVyYXRvcl06ICgpID0+IGhhcmRlbih7XG4gICAgICBuZXh0OiAoKSA9PiB7XG4gICAgICAgIGlmIChvcHRJbm5lckl0ZXJhdG9yKSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gb3B0SW5uZXJJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICBvcHRJbm5lckl0ZXJhdG9yID0gdm9pZCAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaTMgPCBsZW5ndGgpIHtcbiAgICAgICAgICBjb25zdCBlbnRyeSA9IGJhZ0VudHJpZXNbaTNdO1xuICAgICAgICAgIGxldCBqID0gaTMgKyAxO1xuICAgICAgICAgIHdoaWxlIChqIDwgbGVuZ3RoICYmIHJhbmtDb21wYXJlKGVudHJ5WzBdLCBiYWdFbnRyaWVzW2pdWzBdKSA9PT0gMCkge1xuICAgICAgICAgICAgaiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaiA9PT0gaTMgKyAxKSB7XG4gICAgICAgICAgICBpMyA9IGo7XG4gICAgICAgICAgICByZXR1cm4gaGFyZGVuKHsgZG9uZTogZmFsc2UsIHZhbHVlOiBlbnRyeSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgc2ltaWxhclJ1biA9IGJhZ0VudHJpZXMuc2xpY2UoaTMsIGopO1xuICAgICAgICAgIGkzID0gajtcbiAgICAgICAgICBjb25zdCByZXNvcnRlZCA9IHNvcnRCeVJhbmsoc2ltaWxhclJ1biwgZnVsbENvbXBhcmUpO1xuICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlS2V5cyhyZXNvcnRlZCwgZnVsbENvbXBhcmUpO1xuICAgICAgICAgIG9wdElubmVySXRlcmF0b3IgPSByZXNvcnRlZFtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICAgICAgcmV0dXJuIG9wdElubmVySXRlcmF0b3IubmV4dCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBoYXJkZW4oeyBkb25lOiB0cnVlLCB2YWx1ZTogW251bGwsIDBuXSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH0pO1xufTtcbnZhciBtZXJnZTIgPSAoeGJhZ0VudHJpZXMsIHliYWdFbnRyaWVzKSA9PiB7XG4gIGNvbnN0IGZ1bGxDb21wYXJlID0gbWFrZUZ1bGxPcmRlckNvbXBhcmF0b3JLaXQoKS5hbnRpQ29tcGFyYXRvcjtcbiAgY29uc3QgeHMgPSBiYWdXaW5kb3dSZXNvcnQoeGJhZ0VudHJpZXMsIGNvbXBhcmVBbnRpUmFuaywgZnVsbENvbXBhcmUpO1xuICBjb25zdCB5cyA9IGJhZ1dpbmRvd1Jlc29ydCh5YmFnRW50cmllcywgY29tcGFyZUFudGlSYW5rLCBmdWxsQ29tcGFyZSk7XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIFtTeW1ib2wuaXRlcmF0b3JdOiAoKSA9PiB7XG4gICAgICBsZXQgeDtcbiAgICAgIGxldCB4YztcbiAgICAgIGxldCB4RG9uZTtcbiAgICAgIGxldCB5O1xuICAgICAgbGV0IHljO1xuICAgICAgbGV0IHlEb25lO1xuICAgICAgY29uc3QgeGkgPSB4c1tTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICBjb25zdCBuZXh0WCA9ICgpID0+IHtcbiAgICAgICAgIXhEb25lIHx8IHRocm93UmVkYWN0ZWRgSW50ZXJuYWw6IG5leHRYIHNob3VsZCBub3QgYmUgY2FsbGVkIG9uY2UgZG9uZWA7XG4gICAgICAgICh7XG4gICAgICAgICAgZG9uZTogeERvbmUsXG4gICAgICAgICAgdmFsdWU6IFt4LCB4Y11cbiAgICAgICAgfSA9IHhpLm5leHQoKSk7XG4gICAgICB9O1xuICAgICAgbmV4dFgoKTtcbiAgICAgIGNvbnN0IHlpID0geXNbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgY29uc3QgbmV4dFkgPSAoKSA9PiB7XG4gICAgICAgICF5RG9uZSB8fCB0aHJvd1JlZGFjdGVkYEludGVybmFsOiBuZXh0WSBzaG91bGQgbm90IGJlIGNhbGxlZCBvbmNlIGRvbmVgO1xuICAgICAgICAoe1xuICAgICAgICAgIGRvbmU6IHlEb25lLFxuICAgICAgICAgIHZhbHVlOiBbeSwgeWNdXG4gICAgICAgIH0gPSB5aS5uZXh0KCkpO1xuICAgICAgfTtcbiAgICAgIG5leHRZKCk7XG4gICAgICByZXR1cm4gaGFyZGVuKHtcbiAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgIGxldCBkb25lID0gZmFsc2U7XG4gICAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICAgIGlmICh4RG9uZSAmJiB5RG9uZSkge1xuICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICB2YWx1ZSA9IFtudWxsLCAwbiwgMG5dO1xuICAgICAgICAgIH0gZWxzZSBpZiAoeERvbmUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gW3ksIDBuLCB5Y107XG4gICAgICAgICAgICBuZXh0WSgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoeURvbmUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gW3gsIHhjLCAwbl07XG4gICAgICAgICAgICBuZXh0WCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjb21wID0gZnVsbENvbXBhcmUoeCwgeSk7XG4gICAgICAgICAgICBpZiAoY29tcCA9PT0gMCkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IFt4LCB4YywgeWNdO1xuICAgICAgICAgICAgICBuZXh0WCgpO1xuICAgICAgICAgICAgICBuZXh0WSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb21wIDwgMCkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IFt4LCB4YywgMG5dO1xuICAgICAgICAgICAgICBuZXh0WCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29tcCA+IDAgfHwgdGhyb3dSZWRhY3RlZGBJbnRlcm5hbDogVW5leHBlY3RlZCBjb21wICR7cXVvdGUoY29tcCl9YDtcbiAgICAgICAgICAgICAgdmFsdWUgPSBbeSwgMG4sIHljXTtcbiAgICAgICAgICAgICAgbmV4dFkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbih7IGRvbmUsIHZhbHVlIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufTtcbmhhcmRlbihtZXJnZTIpO1xudmFyIGJhZ0l0ZXJJc1N1cGVyYmFnID0gKHh5aSkgPT4ge1xuICBmb3IgKGNvbnN0IFtfbSwgeGMsIHljXSBvZiB4eWkpIHtcbiAgICBpZiAoeGMgPCB5Yykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgYmFnSXRlcklzRGlzam9pbnQgPSAoeHlpKSA9PiB7XG4gIGZvciAoY29uc3QgW19tLCB4YywgeWNdIG9mIHh5aSkge1xuICAgIGlmICh4YyA+PSAxbiAmJiB5YyA+PSAxbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgYmFnSXRlclVuaW9uID0gKHh5aSkgPT4ge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgZm9yIChjb25zdCBbbTIsIHhjLCB5Y10gb2YgeHlpKSB7XG4gICAgcmVzdWx0LnB1c2goW20yLCB4YyArIHljXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgYmFnSXRlckludGVyc2VjdGlvbiA9ICh4eWkpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAoY29uc3QgW20yLCB4YywgeWNdIG9mIHh5aSkge1xuICAgIGNvbnN0IG1jID0geGMgPD0geWMgPyB4YyA6IHljO1xuICAgIHJlc3VsdC5wdXNoKFttMiwgbWNdKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBiYWdJdGVyRGlzam9pbnRTdWJ0cmFjdCA9ICh4eWkpID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAoY29uc3QgW20yLCB4YywgeWNdIG9mIHh5aSkge1xuICAgIGNvbnN0IG1jID0geGMgLSB5YztcbiAgICBtYyA+PSAwbiB8fCB0aHJvd1JlZGFjdGVkYHJpZ2h0IGVsZW1lbnQgJHttMn0gd2FzIG5vdCBpbiBsZWZ0YDtcbiAgICBpZiAobWMgPj0gMW4pIHtcbiAgICAgIHJlc3VsdC5wdXNoKFttMiwgbWNdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgbWVyZ2VpZnkyID0gKGJhZ0l0ZXJPcCkgPT4gKHhiYWdFbnRyaWVzLCB5YmFnRW50cmllcykgPT4gYmFnSXRlck9wKG1lcmdlMih4YmFnRW50cmllcywgeWJhZ0VudHJpZXMpKTtcbnZhciBiYWdFbnRyaWVzSXNTdXBlcmJhZyA9IG1lcmdlaWZ5MihiYWdJdGVySXNTdXBlcmJhZyk7XG52YXIgYmFnRW50cmllc0lzRGlzam9pbnQgPSBtZXJnZWlmeTIoYmFnSXRlcklzRGlzam9pbnQpO1xudmFyIGJhZ0VudHJpZXNVbmlvbiA9IG1lcmdlaWZ5MihiYWdJdGVyVW5pb24pO1xudmFyIGJhZ0VudHJpZXNJbnRlcnNlY3Rpb24gPSBtZXJnZWlmeTIoYmFnSXRlckludGVyc2VjdGlvbik7XG52YXIgYmFnRW50cmllc0Rpc2pvaW50U3VidHJhY3QgPSBtZXJnZWlmeTIoYmFnSXRlckRpc2pvaW50U3VidHJhY3QpO1xudmFyIHJhd0JhZ2lmeSA9IChiYWdFbnRyaWVzT3ApID0+ICh4YmFnLCB5YmFnKSA9PiBiYWdFbnRyaWVzT3AoeGJhZy5wYXlsb2FkLCB5YmFnLnBheWxvYWQpO1xudmFyIGJhZ2lmeSA9IChiYWdFbnRyaWVzT3ApID0+ICh4YmFnLCB5YmFnKSA9PiBtYWtlQmFnT2ZFbnRyaWVzKGJhZ0VudHJpZXNPcCh4YmFnLnBheWxvYWQsIHliYWcucGF5bG9hZCkpO1xudmFyIGJhZ0lzU3VwZXJiYWcgPSByYXdCYWdpZnkoYmFnRW50cmllc0lzU3VwZXJiYWcpO1xudmFyIGJhZ0lzRGlzam9pbnQgPSByYXdCYWdpZnkoYmFnRW50cmllc0lzRGlzam9pbnQpO1xudmFyIGJhZ1VuaW9uID0gYmFnaWZ5KGJhZ0VudHJpZXNVbmlvbik7XG52YXIgYmFnSW50ZXJzZWN0aW9uID0gYmFnaWZ5KGJhZ0VudHJpZXNJbnRlcnNlY3Rpb24pO1xudmFyIGJhZ0Rpc2pvaW50U3VidHJhY3QgPSBiYWdpZnkoYmFnRW50cmllc0Rpc2pvaW50U3VidHJhY3QpO1xuXG4vL1xudmFyIHRocm93TGFiZWxlZCA9IChpbm5lckVyciwgbGFiZWwsIGVyckNvbnN0cnVjdG9yID0gdm9pZCAwLCBvcHRpb25zID0gdm9pZCAwKSA9PiB7XG4gIGlmICh0eXBlb2YgbGFiZWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICBsYWJlbCA9IGBbJHtsYWJlbH1dYDtcbiAgfVxuICBjb25zdCBvdXRlckVyciA9IG1ha2VFcnJvcihcbiAgICBgJHtsYWJlbH06ICR7aW5uZXJFcnIubWVzc2FnZX1gLFxuICAgIGVyckNvbnN0cnVjdG9yLFxuICAgIG9wdGlvbnNcbiAgKTtcbiAgbm90ZShvdXRlckVyciwgcmVkYWN0ZWRgQ2F1c2VkIGJ5ICR7aW5uZXJFcnJ9YCk7XG4gIHRocm93IG91dGVyRXJyO1xufTtcbmhhcmRlbih0aHJvd0xhYmVsZWQpO1xuXG4vL1xudmFyIGFwcGx5TGFiZWxpbmdFcnJvciA9IChmdW5jLCBhcmdzLCBsYWJlbCA9IHZvaWQgMCkgPT4ge1xuICBpZiAobGFiZWwgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiBmdW5jKC4uLmFyZ3MpO1xuICB9XG4gIGxldCByZXN1bHQ7XG4gIHRyeSB7XG4gICAgcmVzdWx0ID0gZnVuYyguLi5hcmdzKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3dMYWJlbGVkKGVyciwgbGFiZWwpO1xuICB9XG4gIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgIHJldHVybiBFLndoZW4ocmVzdWx0LCB2b2lkIDAsIChyZWFzb24pID0+IHRocm93TGFiZWxlZChyZWFzb24sIGxhYmVsKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmhhcmRlbihhcHBseUxhYmVsaW5nRXJyb3IpO1xuXG4vL1xudmFyIHsgZnJvbUVudHJpZXM6IGZyb21FbnRyaWVzNyB9ID0gT2JqZWN0O1xudmFyIHsgb3duS2V5czogb3duS2V5czE2IH0gPSBSZWZsZWN0O1xudmFyIGZyb21VbmlxdWVFbnRyaWVzID0gKGFsbEVudHJpZXMpID0+IHtcbiAgY29uc3QgZW50cmllc0FycmF5ID0gWy4uLmFsbEVudHJpZXNdO1xuICBjb25zdCByZXN1bHQgPSBoYXJkZW4oZnJvbUVudHJpZXM3KGVudHJpZXNBcnJheSkpO1xuICBpZiAob3duS2V5czE2KHJlc3VsdCkubGVuZ3RoID09PSBlbnRyaWVzQXJyYXkubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBjb25zdCBuYW1lcyA9IC8qICAgICAgICAgICAqLyBuZXcgU2V0KCk7XG4gIGZvciAoY29uc3QgW25hbWUsIF9dIG9mIGVudHJpZXNBcnJheSkge1xuICAgIGlmIChuYW1lcy5oYXMobmFtZSkpIHtcbiAgICAgIHRocm93UmVkYWN0ZWRgY29sbGlzaW9uIG9uIHByb3BlcnR5IG5hbWUgJHtxdW90ZShuYW1lKX06ICR7ZW50cmllc0FycmF5fWA7XG4gICAgfVxuICAgIG5hbWVzLmFkZChuYW1lKTtcbiAgfVxuICB0aHJvdyB0aHJvd1JlZGFjdGVkYGludGVybmFsOiBmYWlsZWQgdG8gY3JlYXRlIG9iamVjdCBmcm9tIHVuaXF1ZSBlbnRyaWVzYDtcbn07XG5oYXJkZW4oZnJvbVVuaXF1ZUVudHJpZXMpO1xuXG4vL1xudmFyIGxpc3REaWZmZXJlbmNlID0gKGxlZnRMaXN0LCByaWdodExpc3QpID0+IHtcbiAgY29uc3QgcmlnaHRTZXQgPSBuZXcgU2V0KHJpZ2h0TGlzdCk7XG4gIHJldHVybiBsZWZ0TGlzdC5maWx0ZXIoKGVsZW1lbnQpID0+ICFyaWdodFNldC5oYXMoZWxlbWVudCkpO1xufTtcbmhhcmRlbihsaXN0RGlmZmVyZW5jZSk7XG5cbi8vXG52YXIgeyBlbnRyaWVzOiBlbnRyaWVzNywgdmFsdWVzOiB2YWx1ZXMyIH0gPSBPYmplY3Q7XG52YXIgeyBvd25LZXlzOiBvd25LZXlzMTcgfSA9IFJlZmxlY3Q7XG52YXIgcGF0dGVybk1lbW8gPSAvKiAgICAgICAgICAgKi8gbmV3IFdlYWtTZXQoKTtcbnZhciBNTTtcbnZhciBkZWZhdWx0TGltaXRzID0gaGFyZGVuKHtcbiAgZGVjaW1hbERpZ2l0c0xpbWl0OiAxMDAsXG4gIHN0cmluZ0xlbmd0aExpbWl0OiAxZTUsXG4gIHN5bWJvbE5hbWVMZW5ndGhMaW1pdDogMTAwLFxuICBudW1Qcm9wZXJ0aWVzTGltaXQ6IDgwLFxuICBwcm9wZXJ0eU5hbWVMZW5ndGhMaW1pdDogMTAwLFxuICBhcnJheUxlbmd0aExpbWl0OiAxZTQsXG4gIG51bVNldEVsZW1lbnRzTGltaXQ6IDFlNCxcbiAgbnVtVW5pcXVlQmFnRWxlbWVudHNMaW1pdDogMWU0LFxuICBudW1NYXBFbnRyaWVzTGltaXQ6IDVlM1xufSk7XG52YXIgbGltaXQgPSAobGltaXRzID0ge30pID0+IChcbiAgLyogICAgICAgICAgICAgICAgICAgICovXG4gIGhhcmRlbih7IF9fcHJvdG9fXzogZGVmYXVsdExpbWl0cywgLi4ubGltaXRzIH0pXG4pO1xudmFyIGNoZWNrSXNXZWxsRm9ybWVkV2l0aExpbWl0ID0gKHBheWxvYWQsIG1haW5QYXlsb2FkU2hhcGUsIGNoZWNrLCBsYWJlbCkgPT4ge1xuICBhc3NlcnQoQXJyYXkuaXNBcnJheShtYWluUGF5bG9hZFNoYXBlKSk7XG4gIGlmICghQXJyYXkuaXNBcnJheShwYXlsb2FkKSkge1xuICAgIHJldHVybiBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgJHtxdW90ZShsYWJlbCl9IHBheWxvYWQgbXVzdCBiZSBhbiBhcnJheTogJHtwYXlsb2FkfWApO1xuICB9XG4gIGNvbnN0IG1haW5MZW5ndGggPSBtYWluUGF5bG9hZFNoYXBlLmxlbmd0aDtcbiAgaWYgKCEocGF5bG9hZC5sZW5ndGggPT09IG1haW5MZW5ndGggfHwgcGF5bG9hZC5sZW5ndGggPT09IG1haW5MZW5ndGggKyAxKSkge1xuICAgIHJldHVybiBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgJHtxdW90ZShsYWJlbCl9IHBheWxvYWQgdW5leHBlY3RlZCBzaXplOiAke3BheWxvYWR9YCk7XG4gIH1cbiAgY29uc3QgbGltaXRzID0gcGF5bG9hZFttYWluTGVuZ3RoXTtcbiAgcGF5bG9hZCA9IGhhcmRlbihwYXlsb2FkLnNsaWNlKDAsIG1haW5MZW5ndGgpKTtcbiAgaWYgKCFjaGVja01hdGNoZXMocGF5bG9hZCwgbWFpblBheWxvYWRTaGFwZSwgY2hlY2ssIGxhYmVsKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAobGltaXRzID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gKHBhc3NTdHlsZU9mKGxpbWl0cykgPT09IFwiY29weVJlY29yZFwiIHx8IGNoZWNrKGZhbHNlLCByZWRhY3RlZGBMaW1pdHMgbXVzdCBiZSBhIHJlY29yZDogJHtxdW90ZShsaW1pdHMpfWApKSAmJiBlbnRyaWVzNyhsaW1pdHMpLmV2ZXJ5KFxuICAgIChba2V5LCB2YWx1ZV0pID0+IHBhc3NTdHlsZU9mKHZhbHVlKSA9PT0gXCJudW1iZXJcIiB8fCBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgVmFsdWUgb2YgbGltaXQgJHtxdW90ZShrZXkpfSBidXQgYmUgYSBudW1iZXI6ICR7cXVvdGUodmFsdWUpfWApXG4gICk7XG59O1xudmFyIGNoZWNrRGVjaW1hbERpZ2l0c0xpbWl0ID0gKHNwZWNpbWVuLCBkZWNpbWFsRGlnaXRzTGltaXQsIGNoZWNrKSA9PiB7XG4gIGlmIChNYXRoLmZsb29yKE1hdGgubG9nMTAoTWF0aC5hYnMoTnVtYmVyKHNwZWNpbWVuKSkpKSArIDEgPD0gZGVjaW1hbERpZ2l0c0xpbWl0KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGNoZWNrKFxuICAgIGZhbHNlLFxuICAgIHJlZGFjdGVkYGJpZ2ludCAke3NwZWNpbWVufSBtdXN0IG5vdCBoYXZlIG1vcmUgdGhhbiAke2RlY2ltYWxEaWdpdHNMaW1pdH0gZGlnaXRzYFxuICApO1xufTtcbnZhciBtYWtlUGF0dGVybktpdCA9ICgpID0+IHtcbiAgY29uc3QgbWF5YmVNYXRjaEhlbHBlciA9ICh0YWcpID0+IChcbiAgICAvL1xuICAgIEhlbHBlcnNCeU1hdGNoVGFnW3RhZ11cbiAgKTtcbiAgY29uc3QgbWF5YmVQYXlsb2FkU2hhcGUgPSAodGFnKSA9PiAoXG4gICAgLy9cbiAgICBHdWFyZFBheWxvYWRTaGFwZXNbdGFnXVxuICApO1xuICBjb25zdCBzaW5nbGV0b25LaW5kcyA9IC8qICAgICAgICAgICAqLyBuZXcgTWFwKFtcbiAgICBbXCJudWxsXCIsIG51bGxdLFxuICAgIFtcInVuZGVmaW5lZFwiLCB2b2lkIDBdXG4gIF0pO1xuICBjb25zdCB0YWdNZW1vID0gLyogICAgICAgICAgICovIG5ldyBXZWFrTWFwKCk7XG4gIGNvbnN0IGNoZWNrVGFnZ2VkID0gKHRhZ2dlZCwgdGFnLCBjaGVjaykgPT4ge1xuICAgIGNvbnN0IG1hdGNoSGVscGVyID0gbWF5YmVNYXRjaEhlbHBlcih0YWcpO1xuICAgIGlmIChtYXRjaEhlbHBlcikge1xuICAgICAgcmV0dXJuIG1hdGNoSGVscGVyLmNoZWNrSXNXZWxsRm9ybWVkKHRhZ2dlZC5wYXlsb2FkLCBjaGVjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHBheWxvYWRTaGFwZSA9IG1heWJlUGF5bG9hZFNoYXBlKHRhZyk7XG4gICAgICBpZiAocGF5bG9hZFNoYXBlICE9PSB2b2lkIDApIHtcbiAgICAgICAgcmV0dXJuIGNoZWNrTWF0Y2hlczIodGFnZ2VkLnBheWxvYWQsIHBheWxvYWRTaGFwZSwgY2hlY2ssIHRhZyk7XG4gICAgICB9XG4gICAgfVxuICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICBjYXNlIFwiY29weVNldFwiOiB7XG4gICAgICAgIHJldHVybiBjaGVja0NvcHlTZXQodGFnZ2VkLCBjaGVjayk7XG4gICAgICB9XG4gICAgICBjYXNlIFwiY29weUJhZ1wiOiB7XG4gICAgICAgIHJldHVybiBjaGVja0NvcHlCYWcodGFnZ2VkLCBjaGVjayk7XG4gICAgICB9XG4gICAgICBjYXNlIFwiY29weU1hcFwiOiB7XG4gICAgICAgIHJldHVybiBjaGVja0NvcHlNYXAodGFnZ2VkLCBjaGVjayk7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHJldHVybiBjaGVjayhcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICByZWRhY3RlZGBjYW5ub3QgY2hlY2sgdW5yZWNvZ25pemVkIHRhZyAke3F1b3RlKHRhZyl9OiAke3RhZ2dlZH1gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBraW5kT2YyID0gKHNwZWNpbWVuLCBjaGVjayA9IGlkZW50Q2hlY2tlcikgPT4ge1xuICAgIGNvbnN0IHBhc3NTdHlsZSA9IHBhc3NTdHlsZU9mKHNwZWNpbWVuKTtcbiAgICBpZiAocGFzc1N0eWxlICE9PSBcInRhZ2dlZFwiKSB7XG4gICAgICByZXR1cm4gcGFzc1N0eWxlO1xuICAgIH1cbiAgICBpZiAodGFnTWVtby5oYXMoc3BlY2ltZW4pKSB7XG4gICAgICByZXR1cm4gdGFnTWVtby5nZXQoc3BlY2ltZW4pO1xuICAgIH1cbiAgICBjb25zdCB0YWcgPSBnZXRUYWcoc3BlY2ltZW4pO1xuICAgIGlmIChjaGVja1RhZ2dlZChzcGVjaW1lbiwgdGFnLCBjaGVjaykpIHtcbiAgICAgIHRhZ01lbW8uc2V0KHNwZWNpbWVuLCB0YWcpO1xuICAgICAgcmV0dXJuIHRhZztcbiAgICB9XG4gICAgaWYgKGNoZWNrICE9PSBpZGVudENoZWNrZXIpIHtcbiAgICAgIGNoZWNrKGZhbHNlLCByZWRhY3RlZGBjYW5ub3QgY2hlY2sgdW5yZWNvZ25pemVkIHRhZyAke3F1b3RlKHRhZyl9YCk7XG4gICAgfVxuICAgIHJldHVybiB2b2lkIDA7XG4gIH07XG4gIGhhcmRlbihraW5kT2YyKTtcbiAgY29uc3QgY2hlY2tLaW5kID0gKHNwZWNpbWVuLCBraW5kMiwgY2hlY2spID0+IHtcbiAgICBpZiAoc2luZ2xldG9uS2luZHMuaGFzKGtpbmQyKSkge1xuICAgICAgcmV0dXJuIGNoZWNrQXNLZXlQYXR0KHNwZWNpbWVuLCBzaW5nbGV0b25LaW5kcy5nZXQoa2luZDIpLCBjaGVjayk7XG4gICAgfVxuICAgIGNvbnN0IHJlYWxLaW5kID0ga2luZE9mMihzcGVjaW1lbiwgY2hlY2spO1xuICAgIGlmIChraW5kMiA9PT0gcmVhbEtpbmQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoY2hlY2sgIT09IGlkZW50Q2hlY2tlcikge1xuICAgICAgY2hlY2soZmFsc2UsIHJlZGFjdGVkYCR7YmFyZU9yUXVvdGUocmVhbEtpbmQpfSAke3NwZWNpbWVufSAtIE11c3QgYmUgYSAke2JhcmVPclF1b3RlKGtpbmQyKX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuICBjb25zdCBpc0tpbmQgPSAoc3BlY2ltZW4sIGtpbmQyKSA9PiBjaGVja0tpbmQoc3BlY2ltZW4sIGtpbmQyLCBpZGVudENoZWNrZXIpO1xuICBjb25zdCBjaGVja0FzS2V5UGF0dCA9IChzcGVjaW1lbiwga2V5QXNQYXR0ZXJuLCBjaGVjaykgPT4ge1xuICAgIGlmIChpc0tleShzcGVjaW1lbikgJiYga2V5RVEoc3BlY2ltZW4sIGtleUFzUGF0dGVybikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gY2hlY2sgIT09IGlkZW50Q2hlY2tlciAmJiAvL1xuICAgIC8vXG4gICAgY2hlY2soZmFsc2UsIHJlZGFjdGVkYCR7c3BlY2ltZW59IC0gTXVzdCBiZTogJHtrZXlBc1BhdHRlcm59YCk7XG4gIH07XG4gIGNvbnN0IGNoZWNrUGF0dGVybiA9IChwYXR0LCBjaGVjaykgPT4ge1xuICAgIGlmIChpc0tleShwYXR0KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChwYXR0ZXJuTWVtby5oYXMocGF0dCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBjaGVja1BhdHRlcm5JbnRlcm5hbChwYXR0LCBjaGVjayk7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgcGF0dGVybk1lbW8uYWRkKHBhdHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBjb25zdCBjaGVja1BhdHRlcm5JbnRlcm5hbCA9IChwYXR0LCBjaGVjaykgPT4ge1xuICAgIGNvbnN0IGNoZWNrSXQgPSAoY2hpbGQpID0+IGNoZWNrUGF0dGVybihjaGlsZCwgY2hlY2spO1xuICAgIGNvbnN0IGtpbmQyID0ga2luZE9mMihwYXR0LCBjaGVjayk7XG4gICAgc3dpdGNoIChraW5kMikge1xuICAgICAgY2FzZSB2b2lkIDA6IHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY2FzZSBcImNvcHlSZWNvcmRcIjoge1xuICAgICAgICByZXR1cm4gdmFsdWVzMihwYXR0KS5ldmVyeShjaGVja0l0KTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5QXJyYXlcIjoge1xuICAgICAgICByZXR1cm4gcGF0dC5ldmVyeShjaGVja0l0KTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5TWFwXCI6IHtcbiAgICAgICAgcmV0dXJuIGNoZWNrUGF0dGVybihwYXR0LnZhbHVlcywgY2hlY2spO1xuICAgICAgfVxuICAgICAgY2FzZSBcImVycm9yXCI6XG4gICAgICBjYXNlIFwicHJvbWlzZVwiOiB7XG4gICAgICAgIHJldHVybiBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgQSAke3F1b3RlKGtpbmQyKX0gY2Fubm90IGJlIGEgcGF0dGVybmApO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBpZiAobWF5YmVNYXRjaEhlbHBlcihraW5kMikgIT09IHZvaWQgMCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGVjayhcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICByZWRhY3RlZGBBIHBhc3NhYmxlIG9mIGtpbmQgJHtxdW90ZShraW5kMil9IGlzIG5vdCBhIHBhdHRlcm46ICR7cGF0dH1gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBpc1BhdHRlcm4yID0gKHBhdHQpID0+IGNoZWNrUGF0dGVybihwYXR0LCBpZGVudENoZWNrZXIpO1xuICBjb25zdCBhc3NlcnRQYXR0ZXJuMiA9IChwYXR0KSA9PiB7XG4gICAgY2hlY2tQYXR0ZXJuKHBhdHQsIGFzc2VydENoZWNrZXIpO1xuICB9O1xuICBjb25zdCBjaGVja01hdGNoZXMyID0gKHNwZWNpbWVuLCBwYXR0ZXJuLCBjaGVjaywgbGFiZWwgPSB2b2lkIDApID0+IChcbiAgICAvL1xuICAgIGFwcGx5TGFiZWxpbmdFcnJvcihjaGVja01hdGNoZXNJbnRlcm5hbCwgW3NwZWNpbWVuLCBwYXR0ZXJuLCBjaGVja10sIGxhYmVsKVxuICApO1xuICBjb25zdCBjaGVja01hdGNoZXNJbnRlcm5hbCA9IChzcGVjaW1lbiwgcGF0dCwgY2hlY2spID0+IHtcbiAgICBjb25zdCBwYXR0ZXJuS2luZCA9IGtpbmRPZjIocGF0dCwgY2hlY2spO1xuICAgIGNvbnN0IHNwZWNpbWVuS2luZCA9IGtpbmRPZjIoc3BlY2ltZW4pO1xuICAgIHN3aXRjaCAocGF0dGVybktpbmQpIHtcbiAgICAgIGNhc2Ugdm9pZCAwOiB7XG4gICAgICAgIHJldHVybiB0aHJvd1JlZGFjdGVkYHBhdHRlcm4gZXhwZWN0ZWQ6ICR7cGF0dH1gO1xuICAgICAgfVxuICAgICAgY2FzZSBcInByb21pc2VcIjoge1xuICAgICAgICByZXR1cm4gdGhyb3dSZWRhY3RlZGBwcm9taXNlcyBjYW5ub3QgYmUgcGF0dGVybnM6ICR7cGF0dH1gO1xuICAgICAgfVxuICAgICAgY2FzZSBcImVycm9yXCI6IHtcbiAgICAgICAgcmV0dXJuIHRocm93UmVkYWN0ZWRgZXJyb3JzIGNhbm5vdCBiZSBwYXR0ZXJuczogJHtwYXR0fWA7XG4gICAgICB9XG4gICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICBjYXNlIFwibnVsbFwiOlxuICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgIGNhc2UgXCJjb3B5U2V0XCI6XG4gICAgICBjYXNlIFwiY29weUJhZ1wiOlxuICAgICAgY2FzZSBcInJlbW90YWJsZVwiOiB7XG4gICAgICAgIHJldHVybiBjaGVja0FzS2V5UGF0dChzcGVjaW1lbiwgcGF0dCwgY2hlY2spO1xuICAgICAgfVxuICAgICAgY2FzZSBcImNvcHlBcnJheVwiOiB7XG4gICAgICAgIGlmIChpc0tleShwYXR0KSkge1xuICAgICAgICAgIHJldHVybiBjaGVja0FzS2V5UGF0dChzcGVjaW1lbiwgcGF0dCwgY2hlY2spO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzcGVjaW1lbktpbmQgIT09IFwiY29weUFycmF5XCIpIHtcbiAgICAgICAgICByZXR1cm4gY2hlY2soXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHJlZGFjdGVkYCR7c3BlY2ltZW59IC0gTXVzdCBiZSBhIGNvcHlBcnJheSB0byBtYXRjaCBhIGNvcHlBcnJheSBwYXR0ZXJuOiAke3F1b3RlKFxuICAgICAgICAgICAgICBwYXR0XG4gICAgICAgICAgICApfWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBwYXR0O1xuICAgICAgICBpZiAoc3BlY2ltZW4ubGVuZ3RoICE9PSBsZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gY2hlY2soXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHJlZGFjdGVkYEFycmF5ICR7c3BlY2ltZW59IC0gTXVzdCBiZSBhcyBsb25nIGFzIGNvcHlBcnJheSBwYXR0ZXJuOiAke3F1b3RlKFxuICAgICAgICAgICAgICBwYXR0XG4gICAgICAgICAgICApfWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXR0LmV2ZXJ5KChwNCwgaTMpID0+IGNoZWNrTWF0Y2hlczIoc3BlY2ltZW5baTNdLCBwNCwgY2hlY2ssIGkzKSk7XG4gICAgICB9XG4gICAgICBjYXNlIFwiY29weVJlY29yZFwiOiB7XG4gICAgICAgIGlmIChpc0tleShwYXR0KSkge1xuICAgICAgICAgIHJldHVybiBjaGVja0FzS2V5UGF0dChzcGVjaW1lbiwgcGF0dCwgY2hlY2spO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzcGVjaW1lbktpbmQgIT09IFwiY29weVJlY29yZFwiKSB7XG4gICAgICAgICAgcmV0dXJuIGNoZWNrKFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICByZWRhY3RlZGAke3NwZWNpbWVufSAtIE11c3QgYmUgYSBjb3B5UmVjb3JkIHRvIG1hdGNoIGEgY29weVJlY29yZCBwYXR0ZXJuOiAke3F1b3RlKFxuICAgICAgICAgICAgICBwYXR0XG4gICAgICAgICAgICApfWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNwZWNpbWVuTmFtZXMgPSByZWNvcmROYW1lcyhzcGVjaW1lbik7XG4gICAgICAgIGNvbnN0IHBhdHROYW1lcyA9IHJlY29yZE5hbWVzKHBhdHQpO1xuICAgICAgICBjb25zdCBtaXNzaW5nMiA9IGxpc3REaWZmZXJlbmNlKHBhdHROYW1lcywgc3BlY2ltZW5OYW1lcyk7XG4gICAgICAgIGlmIChtaXNzaW5nMi5sZW5ndGggPj0gMSkge1xuICAgICAgICAgIHJldHVybiBjaGVjayhcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgcmVkYWN0ZWRgJHtzcGVjaW1lbn0gLSBNdXN0IGhhdmUgbWlzc2luZyBwcm9wZXJ0aWVzICR7cXVvdGUobWlzc2luZzIpfWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVuZXhwZWN0ZWQgPSBsaXN0RGlmZmVyZW5jZShzcGVjaW1lbk5hbWVzLCBwYXR0TmFtZXMpO1xuICAgICAgICBpZiAodW5leHBlY3RlZC5sZW5ndGggPj0gMSkge1xuICAgICAgICAgIHJldHVybiBjaGVjayhcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgcmVkYWN0ZWRgJHtzcGVjaW1lbn0gLSBNdXN0IG5vdCBoYXZlIHVuZXhwZWN0ZWQgcHJvcGVydGllczogJHtxdW90ZShcbiAgICAgICAgICAgICAgdW5leHBlY3RlZFxuICAgICAgICAgICAgKX1gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzcGVjaW1lblZhbHVlcyA9IHJlY29yZFZhbHVlcyhzcGVjaW1lbiwgc3BlY2ltZW5OYW1lcyk7XG4gICAgICAgIGNvbnN0IHBhdHRWYWx1ZXMgPSByZWNvcmRWYWx1ZXMocGF0dCwgcGF0dE5hbWVzKTtcbiAgICAgICAgcmV0dXJuIHBhdHROYW1lcy5ldmVyeShcbiAgICAgICAgICAobGFiZWwsIGkzKSA9PiBjaGVja01hdGNoZXMyKHNwZWNpbWVuVmFsdWVzW2kzXSwgcGF0dFZhbHVlc1tpM10sIGNoZWNrLCBsYWJlbClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjb3B5TWFwXCI6IHtcbiAgICAgICAgaWYgKGlzS2V5KHBhdHQpKSB7XG4gICAgICAgICAgcmV0dXJuIGNoZWNrQXNLZXlQYXR0KHNwZWNpbWVuLCBwYXR0LCBjaGVjayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNwZWNpbWVuS2luZCAhPT0gXCJjb3B5TWFwXCIpIHtcbiAgICAgICAgICByZXR1cm4gY2hlY2soXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHJlZGFjdGVkYCR7c3BlY2ltZW59IC0gTXVzdCBiZSBhIGNvcHlNYXAgdG8gbWF0Y2ggYSBjb3B5TWFwIHBhdHRlcm46ICR7cXVvdGUoXG4gICAgICAgICAgICAgIHBhdHRcbiAgICAgICAgICAgICl9YFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF0dEtleVNldCA9IGNvcHlNYXBLZXlTZXQocGF0dCk7XG4gICAgICAgIGNvbnN0IHNwZWNpbWVuS2V5U2V0ID0gY29weU1hcEtleVNldChzcGVjaW1lbik7XG4gICAgICAgIGlmICghY2hlY2tNYXRjaGVzMihzcGVjaW1lbktleVNldCwgcGF0dEtleVNldCwgY2hlY2spKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhdHRWYWx1ZXMgPSBbXTtcbiAgICAgICAgY29uc3Qgc3BlY2ltZW5WYWx1ZXMgPSBbXTtcbiAgICAgICAgY29uc3QgZW50cnlQYWlycyA9IGdlbmVyYXRlQ29sbGVjdGlvblBhaXJFbnRyaWVzKFxuICAgICAgICAgIHBhdHQsXG4gICAgICAgICAgc3BlY2ltZW4sXG4gICAgICAgICAgZ2V0Q29weU1hcEVudHJ5QXJyYXksXG4gICAgICAgICAgdm9pZCAwXG4gICAgICAgICk7XG4gICAgICAgIGZvciAoY29uc3QgW19rZXksIHBhdHRWYWx1ZSwgc3BlY2ltZW5WYWx1ZV0gb2YgZW50cnlQYWlycykge1xuICAgICAgICAgIHBhdHRWYWx1ZXMucHVzaChwYXR0VmFsdWUpO1xuICAgICAgICAgIHNwZWNpbWVuVmFsdWVzLnB1c2goc3BlY2ltZW5WYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoZWNrTWF0Y2hlczIoaGFyZGVuKHNwZWNpbWVuVmFsdWVzKSwgaGFyZGVuKHBhdHRWYWx1ZXMpLCBjaGVjayk7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGNvbnN0IG1hdGNoSGVscGVyID0gbWF5YmVNYXRjaEhlbHBlcihwYXR0ZXJuS2luZCk7XG4gICAgICAgIGlmIChtYXRjaEhlbHBlcikge1xuICAgICAgICAgIHJldHVybiBtYXRjaEhlbHBlci5jaGVja01hdGNoZXMoc3BlY2ltZW4sIHBhdHQucGF5bG9hZCwgY2hlY2spO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgaW50ZXJuYWw6IHNob3VsZCBoYXZlIHJlY29nbml6ZWQgJHtxdW90ZShwYXR0ZXJuS2luZCl9IGA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBtYXRjaGVzMiA9IChzcGVjaW1lbiwgcGF0dCkgPT4gY2hlY2tNYXRjaGVzMihzcGVjaW1lbiwgcGF0dCwgaWRlbnRDaGVja2VyKTtcbiAgY29uc3QgbXVzdE1hdGNoNCA9IChzcGVjaW1lbiwgcGF0dCwgbGFiZWwgPSB2b2lkIDApID0+IHtcbiAgICBsZXQgaW5uZXJFcnJvcjtcbiAgICB0cnkge1xuICAgICAgaWYgKGNoZWNrTWF0Y2hlczIoc3BlY2ltZW4sIHBhdHQsIGlkZW50Q2hlY2tlciwgdm9pZCAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXIpIHtcbiAgICAgIGlubmVyRXJyb3IgPSBlcjtcbiAgICB9XG4gICAgY2hlY2tNYXRjaGVzMihzcGVjaW1lbiwgcGF0dCwgYXNzZXJ0Q2hlY2tlciwgbGFiZWwpO1xuICAgIGNvbnN0IG91dGVyRXJyb3IgPSBtYWtlRXJyb3IoXG4gICAgICByZWRhY3RlZGBpbnRlcm5hbDogJHtsYWJlbH06IGluY29uc2lzdGVudCBwYXR0ZXJuIG1hdGNoOiAke3F1b3RlKHBhdHQpfWBcbiAgICApO1xuICAgIGlmIChpbm5lckVycm9yICE9PSB2b2lkIDApIHtcbiAgICAgIG5vdGUob3V0ZXJFcnJvciwgcmVkYWN0ZWRgY2F1c2VkIGJ5ICR7aW5uZXJFcnJvcn1gKTtcbiAgICB9XG4gICAgdGhyb3cgb3V0ZXJFcnJvcjtcbiAgfTtcbiAgY29uc3QgZ2V0UmFua0NvdmVyMiA9IChwYXR0LCBlbmNvZGVQYXNzYWJsZSkgPT4ge1xuICAgIGlmIChpc0tleShwYXR0KSkge1xuICAgICAgY29uc3QgZW5jb2RlZCA9IGVuY29kZVBhc3NhYmxlKHBhdHQpO1xuICAgICAgaWYgKGVuY29kZWQgIT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gW2VuY29kZWQsIGAke2VuY29kZWR9fmBdO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwYXNzU3R5bGUgPSBwYXNzU3R5bGVPZihwYXR0KTtcbiAgICBzd2l0Y2ggKHBhc3NTdHlsZSkge1xuICAgICAgY2FzZSBcImNvcHlBcnJheVwiOiB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcImNvcHlSZWNvcmRcIjoge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJ0YWdnZWRcIjoge1xuICAgICAgICBjb25zdCB0YWcgPSBnZXRUYWcocGF0dCk7XG4gICAgICAgIGNvbnN0IG1hdGNoSGVscGVyID0gbWF5YmVNYXRjaEhlbHBlcih0YWcpO1xuICAgICAgICBpZiAobWF0Y2hIZWxwZXIpIHtcbiAgICAgICAgICByZXR1cm4gbWF0Y2hIZWxwZXIuZ2V0UmFua0NvdmVyKHBhdHQucGF5bG9hZCwgZW5jb2RlUGFzc2FibGUpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgICAgY2FzZSBcImNvcHlTZXRcIjoge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJjb3B5TWFwXCI6IHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZ2V0UGFzc1N0eWxlQ292ZXIocGFzc1N0eWxlKTtcbiAgfTtcbiAgY29uc3QgYXJyYXlFdmVyeU1hdGNoUGF0dGVybiA9IChhcnJheSwgcGF0dCwgY2hlY2ssIGxhYmVsUHJlZml4ID0gXCJcIikgPT4ge1xuICAgIGlmIChpc0tpbmQocGF0dCwgXCJtYXRjaDphbnlcIikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXkuZXZlcnkoXG4gICAgICAoZWwsIGkzKSA9PiBjaGVja01hdGNoZXMyKGVsLCBwYXR0LCBjaGVjaywgYCR7bGFiZWxQcmVmaXh9WyR7aTN9XWApXG4gICAgKTtcbiAgfTtcbiAgY29uc3QgbWF0Y2hBbnlIZWxwZXIgPSBGYXIoXCJtYXRjaDphbnkgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChfc3BlY2ltZW4sIF9tYXRjaGVyUGF5bG9hZCwgX2NoZWNrKSA9PiB0cnVlLFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAobWF0Y2hlclBheWxvYWQsIGNoZWNrKSA9PiBtYXRjaGVyUGF5bG9hZCA9PT0gdm9pZCAwIHx8IGNoZWNrKGZhbHNlLCByZWRhY3RlZGBtYXRjaDphbnkgcGF5bG9hZDogJHttYXRjaGVyUGF5bG9hZH0gLSBNdXN0IGJlIHVuZGVmaW5lZGApLFxuICAgIGdldFJhbmtDb3ZlcjogKF9tYXRjaFBheWxvYWQsIF9lbmNvZGVQYXNzYWJsZSkgPT4gW1wiXCIsIFwie1wiXVxuICB9KTtcbiAgY29uc3QgbWF0Y2hBbmRIZWxwZXIgPSBGYXIoXCJtYXRjaDphbmQgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChzcGVjaW1lbiwgcGF0dHMsIGNoZWNrKSA9PiB7XG4gICAgICByZXR1cm4gcGF0dHMuZXZlcnkoKHBhdHQpID0+IGNoZWNrTWF0Y2hlczIoc3BlY2ltZW4sIHBhdHQsIGNoZWNrKSk7XG4gICAgfSxcbiAgICBjaGVja0lzV2VsbEZvcm1lZDogKGFsbGVnZWRQYXR0cywgY2hlY2spID0+IHtcbiAgICAgIGNvbnN0IGNoZWNrSXQgPSAocGF0dCkgPT4gY2hlY2tQYXR0ZXJuKHBhdHQsIGNoZWNrKTtcbiAgICAgIHJldHVybiAocGFzc1N0eWxlT2YoYWxsZWdlZFBhdHRzKSA9PT0gXCJjb3B5QXJyYXlcIiB8fCBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgTmVlZHMgYXJyYXkgb2Ygc3ViLXBhdHRlcm5zOiAke3F1b3RlKGFsbGVnZWRQYXR0cyl9YCkpICYmIGFsbGVnZWRQYXR0cy5ldmVyeShjaGVja0l0KTtcbiAgICB9LFxuICAgIGdldFJhbmtDb3ZlcjogKHBhdHRzLCBlbmNvZGVQYXNzYWJsZSkgPT4gaW50ZXJzZWN0UmFua0NvdmVycyhcbiAgICAgIGNvbXBhcmVSYW5rLFxuICAgICAgcGF0dHMubWFwKChwNCkgPT4gZ2V0UmFua0NvdmVyMihwNCwgZW5jb2RlUGFzc2FibGUpKVxuICAgIClcbiAgfSk7XG4gIGNvbnN0IG1hdGNoT3JIZWxwZXIgPSBGYXIoXCJtYXRjaDpvciBoZWxwZXJcIiwge1xuICAgIGNoZWNrTWF0Y2hlczogKHNwZWNpbWVuLCBwYXR0cywgY2hlY2spID0+IHtcbiAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBwYXR0cztcbiAgICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGNoZWNrKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIHJlZGFjdGVkYCR7c3BlY2ltZW59IC0gbm8gcGF0dGVybiBkaXNqdW5jdHMgdG8gbWF0Y2g6ICR7cXVvdGUocGF0dHMpfWBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXR0cy5sZW5ndGggPT09IDIgJiYgIW1hdGNoZXMyKHNwZWNpbWVuLCBwYXR0c1swXSkgJiYgaXNLaW5kKHBhdHRzWzBdLCBcIm1hdGNoOmtpbmRcIikgJiYgcGF0dHNbMF0ucGF5bG9hZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gY2hlY2tNYXRjaGVzMihzcGVjaW1lbiwgcGF0dHNbMV0sIGNoZWNrKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXR0cy5zb21lKChwYXR0KSA9PiBtYXRjaGVzMihzcGVjaW1lbiwgcGF0dCkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoZWNrKGZhbHNlLCByZWRhY3RlZGAke3NwZWNpbWVufSAtIE11c3QgbWF0Y2ggb25lIG9mICR7cXVvdGUocGF0dHMpfWApO1xuICAgIH0sXG4gICAgY2hlY2tJc1dlbGxGb3JtZWQ6IG1hdGNoQW5kSGVscGVyLmNoZWNrSXNXZWxsRm9ybWVkLFxuICAgIGdldFJhbmtDb3ZlcjogKHBhdHRzLCBlbmNvZGVQYXNzYWJsZSkgPT4gdW5pb25SYW5rQ292ZXJzKFxuICAgICAgY29tcGFyZVJhbmssXG4gICAgICBwYXR0cy5tYXAoKHA0KSA9PiBnZXRSYW5rQ292ZXIyKHA0LCBlbmNvZGVQYXNzYWJsZSkpXG4gICAgKVxuICB9KTtcbiAgY29uc3QgbWF0Y2hOb3RIZWxwZXIgPSBGYXIoXCJtYXRjaDpub3QgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChzcGVjaW1lbiwgcGF0dCwgY2hlY2spID0+IHtcbiAgICAgIGlmIChtYXRjaGVzMihzcGVjaW1lbiwgcGF0dCkpIHtcbiAgICAgICAgcmV0dXJuIGNoZWNrKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIHJlZGFjdGVkYCR7c3BlY2ltZW59IC0gTXVzdCBmYWlsIG5lZ2F0ZWQgcGF0dGVybjogJHtxdW90ZShwYXR0KX1gXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiBjaGVja1BhdHRlcm4sXG4gICAgZ2V0UmFua0NvdmVyOiAoX3BhdHQsIF9lbmNvZGVQYXNzYWJsZSkgPT4gW1wiXCIsIFwie1wiXVxuICB9KTtcbiAgY29uc3QgbWF0Y2hTY2FsYXJIZWxwZXIgPSBGYXIoXCJtYXRjaDpzY2FsYXIgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChzcGVjaW1lbiwgX21hdGNoZXJQYXlsb2FkLCBjaGVjaykgPT4gY2hlY2tTY2FsYXJLZXkoc3BlY2ltZW4sIGNoZWNrKSxcbiAgICBjaGVja0lzV2VsbEZvcm1lZDogbWF0Y2hBbnlIZWxwZXIuY2hlY2tJc1dlbGxGb3JtZWQsXG4gICAgZ2V0UmFua0NvdmVyOiAoX21hdGNoUGF5bG9hZCwgX2VuY29kZVBhc3NhYmxlKSA9PiBbXCJhXCIsIFwien5cIl1cbiAgfSk7XG4gIGNvbnN0IG1hdGNoS2V5SGVscGVyID0gRmFyKFwibWF0Y2g6a2V5IGhlbHBlclwiLCB7XG4gICAgY2hlY2tNYXRjaGVzOiAoc3BlY2ltZW4sIF9tYXRjaGVyUGF5bG9hZCwgY2hlY2spID0+IGNoZWNrS2V5KHNwZWNpbWVuLCBjaGVjayksXG4gICAgY2hlY2tJc1dlbGxGb3JtZWQ6IG1hdGNoQW55SGVscGVyLmNoZWNrSXNXZWxsRm9ybWVkLFxuICAgIGdldFJhbmtDb3ZlcjogKF9tYXRjaFBheWxvYWQsIF9lbmNvZGVQYXNzYWJsZSkgPT4gW1wiYVwiLCBcInp+XCJdXG4gIH0pO1xuICBjb25zdCBtYXRjaFBhdHRlcm5IZWxwZXIgPSBGYXIoXCJtYXRjaDpwYXR0ZXJuIGhlbHBlclwiLCB7XG4gICAgY2hlY2tNYXRjaGVzOiAoc3BlY2ltZW4sIF9tYXRjaGVyUGF5bG9hZCwgY2hlY2spID0+IGNoZWNrUGF0dGVybihzcGVjaW1lbiwgY2hlY2spLFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiBtYXRjaEFueUhlbHBlci5jaGVja0lzV2VsbEZvcm1lZCxcbiAgICBnZXRSYW5rQ292ZXI6IChfbWF0Y2hQYXlsb2FkLCBfZW5jb2RlUGFzc2FibGUpID0+IFtcImFcIiwgXCJ6flwiXVxuICB9KTtcbiAgY29uc3QgbWF0Y2hLaW5kSGVscGVyID0gRmFyKFwibWF0Y2g6a2luZCBoZWxwZXJcIiwge1xuICAgIGNoZWNrTWF0Y2hlczogY2hlY2tLaW5kLFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAoYWxsZWdlZEtleUtpbmQsIGNoZWNrKSA9PiB0eXBlb2YgYWxsZWdlZEtleUtpbmQgPT09IFwic3RyaW5nXCIgfHwgY2hlY2soXG4gICAgICBmYWxzZSxcbiAgICAgIHJlZGFjdGVkYG1hdGNoOmtpbmQ6IHBheWxvYWQ6ICR7YWxsZWdlZEtleUtpbmR9IC0gQSBraW5kIG5hbWUgbXVzdCBiZSBhIHN0cmluZ2BcbiAgICApLFxuICAgIGdldFJhbmtDb3ZlcjogKGtpbmQyLCBfZW5jb2RlUGFzc2FibGUpID0+IHtcbiAgICAgIGxldCBzdHlsZTtcbiAgICAgIHN3aXRjaCAoa2luZDIpIHtcbiAgICAgICAgY2FzZSBcImNvcHlTZXRcIjpcbiAgICAgICAgY2FzZSBcImNvcHlNYXBcIjoge1xuICAgICAgICAgIHN0eWxlID0gXCJ0YWdnZWRcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgc3R5bGUgPSBraW5kMjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGdldFBhc3NTdHlsZUNvdmVyKHN0eWxlKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBtYXRjaFRhZ2dlZEhlbHBlciA9IEZhcihcIm1hdGNoOnRhZ2dlZCBoZWxwZXJcIiwge1xuICAgIGNoZWNrTWF0Y2hlczogKHNwZWNpbWVuLCBbdGFnUGF0dCwgcGF5bG9hZFBhdHRdLCBjaGVjaykgPT4ge1xuICAgICAgaWYgKHBhc3NTdHlsZU9mKHNwZWNpbWVuKSAhPT0gXCJ0YWdnZWRcIikge1xuICAgICAgICByZXR1cm4gY2hlY2soXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgcmVkYWN0ZWRgRXhwZWN0ZWQgdGFnZ2VkIG9iamVjdCwgbm90ICR7cXVvdGUoXG4gICAgICAgICAgICBwYXNzU3R5bGVPZihzcGVjaW1lbilcbiAgICAgICAgICApfTogJHtzcGVjaW1lbn1gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2hlY2tNYXRjaGVzMihnZXRUYWcoc3BlY2ltZW4pLCB0YWdQYXR0LCBjaGVjaywgXCJ0YWdcIikgJiYgY2hlY2tNYXRjaGVzMihzcGVjaW1lbi5wYXlsb2FkLCBwYXlsb2FkUGF0dCwgY2hlY2ssIFwicGF5bG9hZFwiKTtcbiAgICB9LFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAocGF5bG9hZCwgY2hlY2spID0+IGNoZWNrTWF0Y2hlczIoXG4gICAgICBwYXlsb2FkLFxuICAgICAgaGFyZGVuKFtNTS5wYXR0ZXJuKCksIE1NLnBhdHRlcm4oKV0pLFxuICAgICAgY2hlY2ssXG4gICAgICBcIm1hdGNoOnRhZ2dlZCBwYXlsb2FkXCJcbiAgICApLFxuICAgIGdldFJhbmtDb3ZlcjogKF9raW5kLCBfZW5jb2RlUGFzc2FibGUpID0+IGdldFBhc3NTdHlsZUNvdmVyKFwidGFnZ2VkXCIpXG4gIH0pO1xuICBjb25zdCBtYXRjaEJpZ2ludEhlbHBlciA9IEZhcihcIm1hdGNoOmJpZ2ludCBoZWxwZXJcIiwge1xuICAgIGNoZWNrTWF0Y2hlczogKHNwZWNpbWVuLCBbbGltaXRzID0gdm9pZCAwXSwgY2hlY2spID0+IHtcbiAgICAgIGNvbnN0IHsgZGVjaW1hbERpZ2l0c0xpbWl0IH0gPSBsaW1pdChsaW1pdHMpO1xuICAgICAgcmV0dXJuIGNoZWNrS2luZChzcGVjaW1lbiwgXCJiaWdpbnRcIiwgY2hlY2spICYmIGNoZWNrRGVjaW1hbERpZ2l0c0xpbWl0KHNwZWNpbWVuLCBkZWNpbWFsRGlnaXRzTGltaXQsIGNoZWNrKTtcbiAgICB9LFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAocGF5bG9hZCwgY2hlY2spID0+IGNoZWNrSXNXZWxsRm9ybWVkV2l0aExpbWl0KFxuICAgICAgcGF5bG9hZCxcbiAgICAgIGhhcmRlbihbXSksXG4gICAgICBjaGVjayxcbiAgICAgIFwibWF0Y2g6YmlnaW50IHBheWxvYWRcIlxuICAgICksXG4gICAgZ2V0UmFua0NvdmVyOiAoX21hdGNoUGF5bG9hZCwgX2VuY29kZVBhc3NhYmxlKSA9PiBnZXRQYXNzU3R5bGVDb3ZlcihcImJpZ2ludFwiKVxuICB9KTtcbiAgY29uc3QgbWF0Y2hOYXRIZWxwZXIgPSBGYXIoXCJtYXRjaDpuYXQgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChzcGVjaW1lbiwgW2xpbWl0cyA9IHZvaWQgMF0sIGNoZWNrKSA9PiB7XG4gICAgICBjb25zdCB7IGRlY2ltYWxEaWdpdHNMaW1pdCB9ID0gbGltaXQobGltaXRzKTtcbiAgICAgIHJldHVybiBjaGVja0tpbmQoc3BlY2ltZW4sIFwiYmlnaW50XCIsIGNoZWNrKSAmJiBjaGVjayhcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICovXG4gICAgICAgIHNwZWNpbWVuID49IDBuLFxuICAgICAgICByZWRhY3RlZGAke3NwZWNpbWVufSAtIE11c3QgYmUgbm9uLW5lZ2F0aXZlYFxuICAgICAgKSAmJiBjaGVja0RlY2ltYWxEaWdpdHNMaW1pdChzcGVjaW1lbiwgZGVjaW1hbERpZ2l0c0xpbWl0LCBjaGVjayk7XG4gICAgfSxcbiAgICBjaGVja0lzV2VsbEZvcm1lZDogKHBheWxvYWQsIGNoZWNrKSA9PiBjaGVja0lzV2VsbEZvcm1lZFdpdGhMaW1pdChcbiAgICAgIHBheWxvYWQsXG4gICAgICBoYXJkZW4oW10pLFxuICAgICAgY2hlY2ssXG4gICAgICBcIm1hdGNoOm5hdCBwYXlsb2FkXCJcbiAgICApLFxuICAgIGdldFJhbmtDb3ZlcjogKF9tYXRjaFBheWxvYWQsIF9lbmNvZGVQYXNzYWJsZSkgPT4gKFxuICAgICAgLy9cbiAgICAgIGdldFBhc3NTdHlsZUNvdmVyKFwiYmlnaW50XCIpXG4gICAgKVxuICB9KTtcbiAgY29uc3QgbWF0Y2hTdHJpbmdIZWxwZXIgPSBGYXIoXCJtYXRjaDpzdHJpbmcgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChzcGVjaW1lbiwgW2xpbWl0cyA9IHZvaWQgMF0sIGNoZWNrKSA9PiB7XG4gICAgICBjb25zdCB7IHN0cmluZ0xlbmd0aExpbWl0IH0gPSBsaW1pdChsaW1pdHMpO1xuICAgICAgcmV0dXJuIGNoZWNrS2luZChzcGVjaW1lbiwgXCJzdHJpbmdcIiwgY2hlY2spICYmIC8vXG4gICAgICAvKiAgICAgICAgICAgICAgICAgKi9cbiAgICAgIChzcGVjaW1lbi5sZW5ndGggPD0gc3RyaW5nTGVuZ3RoTGltaXQgfHwgY2hlY2soXG4gICAgICAgIGZhbHNlLFxuICAgICAgICByZWRhY3RlZGBzdHJpbmcgJHtzcGVjaW1lbn0gbXVzdCBub3QgYmUgYmlnZ2VyIHRoYW4gJHtzdHJpbmdMZW5ndGhMaW1pdH1gXG4gICAgICApKTtcbiAgICB9LFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAocGF5bG9hZCwgY2hlY2spID0+IGNoZWNrSXNXZWxsRm9ybWVkV2l0aExpbWl0KFxuICAgICAgcGF5bG9hZCxcbiAgICAgIGhhcmRlbihbXSksXG4gICAgICBjaGVjayxcbiAgICAgIFwibWF0Y2g6c3RyaW5nIHBheWxvYWRcIlxuICAgICksXG4gICAgZ2V0UmFua0NvdmVyOiAoX21hdGNoUGF5bG9hZCwgX2VuY29kZVBhc3NhYmxlKSA9PiBnZXRQYXNzU3R5bGVDb3ZlcihcInN0cmluZ1wiKVxuICB9KTtcbiAgY29uc3QgbWF0Y2hTeW1ib2xIZWxwZXIgPSBGYXIoXCJtYXRjaDpzeW1ib2wgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChzcGVjaW1lbiwgW2xpbWl0cyA9IHZvaWQgMF0sIGNoZWNrKSA9PiB7XG4gICAgICBjb25zdCB7IHN5bWJvbE5hbWVMZW5ndGhMaW1pdCB9ID0gbGltaXQobGltaXRzKTtcbiAgICAgIGlmICghY2hlY2tLaW5kKHNwZWNpbWVuLCBcInN5bWJvbFwiLCBjaGVjaykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3ltYm9sTmFtZSA9IG5hbWVGb3JQYXNzYWJsZVN5bWJvbChzcGVjaW1lbik7XG4gICAgICBpZiAodHlwZW9mIHN5bWJvbE5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbDogUGFzc2FibGUgc3ltYm9sICR7c3BlY2ltZW59IG11c3QgaGF2ZSBhIHBhc3NhYmxlIG5hbWVgO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoZWNrKFxuICAgICAgICBzeW1ib2xOYW1lLmxlbmd0aCA8PSBzeW1ib2xOYW1lTGVuZ3RoTGltaXQsXG4gICAgICAgIHJlZGFjdGVkYFN5bWJvbCBuYW1lICR7cXVvdGUoXG4gICAgICAgICAgc3ltYm9sTmFtZVxuICAgICAgICApfSBtdXN0IG5vdCBiZSBiaWdnZXIgdGhhbiAke3N5bWJvbE5hbWVMZW5ndGhMaW1pdH1gXG4gICAgICApO1xuICAgIH0sXG4gICAgY2hlY2tJc1dlbGxGb3JtZWQ6IChwYXlsb2FkLCBjaGVjaykgPT4gY2hlY2tJc1dlbGxGb3JtZWRXaXRoTGltaXQoXG4gICAgICBwYXlsb2FkLFxuICAgICAgaGFyZGVuKFtdKSxcbiAgICAgIGNoZWNrLFxuICAgICAgXCJtYXRjaDpzeW1ib2wgcGF5bG9hZFwiXG4gICAgKSxcbiAgICBnZXRSYW5rQ292ZXI6IChfbWF0Y2hQYXlsb2FkLCBfZW5jb2RlUGFzc2FibGUpID0+IGdldFBhc3NTdHlsZUNvdmVyKFwic3ltYm9sXCIpXG4gIH0pO1xuICBjb25zdCBtYXRjaFJlbW90YWJsZUhlbHBlciA9IEZhcihcIm1hdGNoOnJlbW90YWJsZSBoZWxwZXJcIiwge1xuICAgIGNoZWNrTWF0Y2hlczogKHNwZWNpbWVuLCByZW1vdGFibGVEZXNjLCBjaGVjaykgPT4ge1xuICAgICAgaWYgKGlzS2luZChzcGVjaW1lbiwgXCJyZW1vdGFibGVcIikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoY2hlY2sgPT09IGlkZW50Q2hlY2tlcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBjb25zdCB7IGxhYmVsIH0gPSByZW1vdGFibGVEZXNjO1xuICAgICAgY29uc3QgcGFzc1N0eWxlID0gcGFzc1N0eWxlT2Yoc3BlY2ltZW4pO1xuICAgICAgY29uc3Qga2luZERldGFpbHMgPSBwYXNzU3R5bGUgIT09IFwidGFnZ2VkXCIgPyAoXG4gICAgICAgIC8vXG4gICAgICAgIGJhcmVPclF1b3RlKHBhc3NTdHlsZSlcbiAgICAgICkgOiAoXG4gICAgICAgIC8vXG4gICAgICAgIC8vXG4gICAgICAgIHF1b3RlKGdldFRhZyhzcGVjaW1lbikpXG4gICAgICApO1xuICAgICAgcmV0dXJuIGNoZWNrKFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgLy9cbiAgICAgICAgLy9cbiAgICAgICAgcmVkYWN0ZWRgJHtzcGVjaW1lbn0gLSBNdXN0IGJlIGEgcmVtb3RhYmxlICR7YmFyZU9yUXVvdGUobGFiZWwpfSwgbm90ICR7a2luZERldGFpbHN9YFxuICAgICAgKTtcbiAgICB9LFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAoYWxsZWdlZFJlbW90YWJsZURlc2MsIGNoZWNrKSA9PiBjaGVja01hdGNoZXMyKFxuICAgICAgYWxsZWdlZFJlbW90YWJsZURlc2MsXG4gICAgICBoYXJkZW4oeyBsYWJlbDogTU0uc3RyaW5nKCkgfSksXG4gICAgICBjaGVjayxcbiAgICAgIFwibWF0Y2g6cmVtb3RhYmxlIHBheWxvYWRcIlxuICAgICksXG4gICAgZ2V0UmFua0NvdmVyOiAoX3JlbW90YWJsZURlc2MsIF9lbmNvZGVQYXNzYWJsZSkgPT4gZ2V0UGFzc1N0eWxlQ292ZXIoXCJyZW1vdGFibGVcIilcbiAgfSk7XG4gIGNvbnN0IG1hdGNoTFRFSGVscGVyID0gRmFyKFwibWF0Y2g6bHRlIGhlbHBlclwiLCB7XG4gICAgY2hlY2tNYXRjaGVzOiAoc3BlY2ltZW4sIHJpZ2h0T3BlcmFuZCwgY2hlY2spID0+IGtleUxURShzcGVjaW1lbiwgcmlnaHRPcGVyYW5kKSB8fCBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgJHtzcGVjaW1lbn0gLSBNdXN0IGJlIDw9ICR7cmlnaHRPcGVyYW5kfWApLFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiBjaGVja0tleSxcbiAgICBnZXRSYW5rQ292ZXI6IChyaWdodE9wZXJhbmQsIGVuY29kZVBhc3NhYmxlKSA9PiB7XG4gICAgICBjb25zdCBwYXNzU3R5bGUgPSBwYXNzU3R5bGVPZihyaWdodE9wZXJhbmQpO1xuICAgICAgbGV0IFtsZWZ0Qm91bmQsIHJpZ2h0Qm91bmRdID0gZ2V0UGFzc1N0eWxlQ292ZXIocGFzc1N0eWxlKTtcbiAgICAgIGNvbnN0IG5ld1JpZ2h0Qm91bmQgPSBgJHtlbmNvZGVQYXNzYWJsZShyaWdodE9wZXJhbmQpfX5gO1xuICAgICAgaWYgKG5ld1JpZ2h0Qm91bmQgIT09IHZvaWQgMCkge1xuICAgICAgICByaWdodEJvdW5kID0gbmV3UmlnaHRCb3VuZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbbGVmdEJvdW5kLCByaWdodEJvdW5kXTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBtYXRjaExUSGVscGVyID0gRmFyKFwibWF0Y2g6bHQgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChzcGVjaW1lbiwgcmlnaHRPcGVyYW5kLCBjaGVjaykgPT4ga2V5TFQoc3BlY2ltZW4sIHJpZ2h0T3BlcmFuZCkgfHwgY2hlY2soZmFsc2UsIHJlZGFjdGVkYCR7c3BlY2ltZW59IC0gTXVzdCBiZSA8ICR7cmlnaHRPcGVyYW5kfWApLFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiBjaGVja0tleSxcbiAgICBnZXRSYW5rQ292ZXI6IG1hdGNoTFRFSGVscGVyLmdldFJhbmtDb3ZlclxuICB9KTtcbiAgY29uc3QgbWF0Y2hHVEVIZWxwZXIgPSBGYXIoXCJtYXRjaDpndGUgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChzcGVjaW1lbiwgcmlnaHRPcGVyYW5kLCBjaGVjaykgPT4ga2V5R1RFKHNwZWNpbWVuLCByaWdodE9wZXJhbmQpIHx8IGNoZWNrKGZhbHNlLCByZWRhY3RlZGAke3NwZWNpbWVufSAtIE11c3QgYmUgPj0gJHtyaWdodE9wZXJhbmR9YCksXG4gICAgY2hlY2tJc1dlbGxGb3JtZWQ6IGNoZWNrS2V5LFxuICAgIGdldFJhbmtDb3ZlcjogKHJpZ2h0T3BlcmFuZCwgZW5jb2RlUGFzc2FibGUpID0+IHtcbiAgICAgIGNvbnN0IHBhc3NTdHlsZSA9IHBhc3NTdHlsZU9mKHJpZ2h0T3BlcmFuZCk7XG4gICAgICBsZXQgW2xlZnRCb3VuZCwgcmlnaHRCb3VuZF0gPSBnZXRQYXNzU3R5bGVDb3ZlcihwYXNzU3R5bGUpO1xuICAgICAgY29uc3QgbmV3TGVmdEJvdW5kID0gZW5jb2RlUGFzc2FibGUocmlnaHRPcGVyYW5kKTtcbiAgICAgIGlmIChuZXdMZWZ0Qm91bmQgIT09IHZvaWQgMCkge1xuICAgICAgICBsZWZ0Qm91bmQgPSBuZXdMZWZ0Qm91bmQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gW2xlZnRCb3VuZCwgcmlnaHRCb3VuZF07XG4gICAgfVxuICB9KTtcbiAgY29uc3QgbWF0Y2hHVEhlbHBlciA9IEZhcihcIm1hdGNoOmd0IGhlbHBlclwiLCB7XG4gICAgY2hlY2tNYXRjaGVzOiAoc3BlY2ltZW4sIHJpZ2h0T3BlcmFuZCwgY2hlY2spID0+IGtleUdUKHNwZWNpbWVuLCByaWdodE9wZXJhbmQpIHx8IGNoZWNrKGZhbHNlLCByZWRhY3RlZGAke3NwZWNpbWVufSAtIE11c3QgYmUgPiAke3JpZ2h0T3BlcmFuZH1gKSxcbiAgICBjaGVja0lzV2VsbEZvcm1lZDogY2hlY2tLZXksXG4gICAgZ2V0UmFua0NvdmVyOiBtYXRjaEdURUhlbHBlci5nZXRSYW5rQ292ZXJcbiAgfSk7XG4gIGNvbnN0IG1hdGNoUmVjb3JkT2ZIZWxwZXIgPSBGYXIoXCJtYXRjaDpyZWNvcmRPZiBoZWxwZXJcIiwge1xuICAgIGNoZWNrTWF0Y2hlczogKHNwZWNpbWVuLCBba2V5UGF0dCwgdmFsdWVQYXR0LCBsaW1pdHMgPSB2b2lkIDBdLCBjaGVjaykgPT4ge1xuICAgICAgY29uc3QgeyBudW1Qcm9wZXJ0aWVzTGltaXQsIHByb3BlcnR5TmFtZUxlbmd0aExpbWl0IH0gPSBsaW1pdChsaW1pdHMpO1xuICAgICAgcmV0dXJuIGNoZWNrS2luZChzcGVjaW1lbiwgXCJjb3B5UmVjb3JkXCIsIGNoZWNrKSAmJiBjaGVjayhcbiAgICAgICAgb3duS2V5czE3KHNwZWNpbWVuKS5sZW5ndGggPD0gbnVtUHJvcGVydGllc0xpbWl0LFxuICAgICAgICByZWRhY3RlZGBNdXN0IG5vdCBoYXZlIG1vcmUgdGhhbiAke3F1b3RlKFxuICAgICAgICAgIG51bVByb3BlcnRpZXNMaW1pdFxuICAgICAgICApfSBwcm9wZXJ0aWVzOiAke3NwZWNpbWVufWBcbiAgICAgICkgJiYgZW50cmllczcoc3BlY2ltZW4pLmV2ZXJ5KFxuICAgICAgICAoW2tleSwgdmFsdWVdKSA9PiBhcHBseUxhYmVsaW5nRXJyb3IoXG4gICAgICAgICAgY2hlY2ssXG4gICAgICAgICAgW1xuICAgICAgICAgICAga2V5Lmxlbmd0aCA8PSBwcm9wZXJ0eU5hbWVMZW5ndGhMaW1pdCxcbiAgICAgICAgICAgIHJlZGFjdGVkYFByb3BlcnR5IG5hbWUgbXVzdCBub3QgYmUgbG9uZ2VyIHRoYW4gJHtxdW90ZShcbiAgICAgICAgICAgICAgcHJvcGVydHlOYW1lTGVuZ3RoTGltaXRcbiAgICAgICAgICAgICl9YFxuICAgICAgICAgIF0sXG4gICAgICAgICAga2V5XG4gICAgICAgICkgJiYgY2hlY2tNYXRjaGVzMihcbiAgICAgICAgICBoYXJkZW4oW2tleSwgdmFsdWVdKSxcbiAgICAgICAgICBoYXJkZW4oW2tleVBhdHQsIHZhbHVlUGF0dF0pLFxuICAgICAgICAgIGNoZWNrLFxuICAgICAgICAgIGtleVxuICAgICAgICApXG4gICAgICApO1xuICAgIH0sXG4gICAgY2hlY2tJc1dlbGxGb3JtZWQ6IChwYXlsb2FkLCBjaGVjaykgPT4gY2hlY2tJc1dlbGxGb3JtZWRXaXRoTGltaXQoXG4gICAgICBwYXlsb2FkLFxuICAgICAgaGFyZGVuKFtNTS5wYXR0ZXJuKCksIE1NLnBhdHRlcm4oKV0pLFxuICAgICAgY2hlY2ssXG4gICAgICBcIm1hdGNoOnJlY29yZE9mIHBheWxvYWRcIlxuICAgICksXG4gICAgZ2V0UmFua0NvdmVyOiAoX2VudHJ5UGF0dCkgPT4gZ2V0UGFzc1N0eWxlQ292ZXIoXCJjb3B5UmVjb3JkXCIpXG4gIH0pO1xuICBjb25zdCBtYXRjaEFycmF5T2ZIZWxwZXIgPSBGYXIoXCJtYXRjaDphcnJheU9mIGhlbHBlclwiLCB7XG4gICAgY2hlY2tNYXRjaGVzOiAoc3BlY2ltZW4sIFtzdWJQYXR0LCBsaW1pdHMgPSB2b2lkIDBdLCBjaGVjaykgPT4ge1xuICAgICAgY29uc3QgeyBhcnJheUxlbmd0aExpbWl0IH0gPSBsaW1pdChsaW1pdHMpO1xuICAgICAgcmV0dXJuIGNoZWNrS2luZChzcGVjaW1lbiwgXCJjb3B5QXJyYXlcIiwgY2hlY2spICYmIC8qICAgICAgICAgICAgICAgICovXG4gICAgICAoc3BlY2ltZW4ubGVuZ3RoIDw9IGFycmF5TGVuZ3RoTGltaXQgfHwgY2hlY2soXG4gICAgICAgIGZhbHNlLFxuICAgICAgICByZWRhY3RlZGBBcnJheSBsZW5ndGggJHtzcGVjaW1lbi5sZW5ndGh9IG11c3QgYmUgPD0gbGltaXQgJHthcnJheUxlbmd0aExpbWl0fWBcbiAgICAgICkpICYmIGFycmF5RXZlcnlNYXRjaFBhdHRlcm4oc3BlY2ltZW4sIHN1YlBhdHQsIGNoZWNrKTtcbiAgICB9LFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAocGF5bG9hZCwgY2hlY2spID0+IGNoZWNrSXNXZWxsRm9ybWVkV2l0aExpbWl0KFxuICAgICAgcGF5bG9hZCxcbiAgICAgIGhhcmRlbihbTU0ucGF0dGVybigpXSksXG4gICAgICBjaGVjayxcbiAgICAgIFwibWF0Y2g6YXJyYXlPZiBwYXlsb2FkXCJcbiAgICApLFxuICAgIGdldFJhbmtDb3ZlcjogKCkgPT4gZ2V0UGFzc1N0eWxlQ292ZXIoXCJjb3B5QXJyYXlcIilcbiAgfSk7XG4gIGNvbnN0IG1hdGNoU2V0T2ZIZWxwZXIgPSBGYXIoXCJtYXRjaDpzZXRPZiBoZWxwZXJcIiwge1xuICAgIGNoZWNrTWF0Y2hlczogKHNwZWNpbWVuLCBba2V5UGF0dCwgbGltaXRzID0gdm9pZCAwXSwgY2hlY2spID0+IHtcbiAgICAgIGNvbnN0IHsgbnVtU2V0RWxlbWVudHNMaW1pdCB9ID0gbGltaXQobGltaXRzKTtcbiAgICAgIHJldHVybiBjaGVja0tpbmQoc3BlY2ltZW4sIFwiY29weVNldFwiLCBjaGVjaykgJiYgY2hlY2soXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICovXG4gICAgICAgIHNwZWNpbWVuLnBheWxvYWQubGVuZ3RoIDwgbnVtU2V0RWxlbWVudHNMaW1pdCxcbiAgICAgICAgcmVkYWN0ZWRgU2V0IG11c3Qgbm90IGhhdmUgbW9yZSB0aGFuICR7cXVvdGUobnVtU2V0RWxlbWVudHNMaW1pdCl9IGVsZW1lbnRzOiAke3NwZWNpbWVuLnBheWxvYWQubGVuZ3RofWBcbiAgICAgICkgJiYgYXJyYXlFdmVyeU1hdGNoUGF0dGVybihzcGVjaW1lbi5wYXlsb2FkLCBrZXlQYXR0LCBjaGVjaywgXCJzZXQgZWxlbWVudHNcIik7XG4gICAgfSxcbiAgICBjaGVja0lzV2VsbEZvcm1lZDogKHBheWxvYWQsIGNoZWNrKSA9PiBjaGVja0lzV2VsbEZvcm1lZFdpdGhMaW1pdChcbiAgICAgIHBheWxvYWQsXG4gICAgICBoYXJkZW4oW01NLnBhdHRlcm4oKV0pLFxuICAgICAgY2hlY2ssXG4gICAgICBcIm1hdGNoOnNldE9mIHBheWxvYWRcIlxuICAgICksXG4gICAgZ2V0UmFua0NvdmVyOiAoKSA9PiBnZXRQYXNzU3R5bGVDb3ZlcihcInRhZ2dlZFwiKVxuICB9KTtcbiAgY29uc3QgbWF0Y2hCYWdPZkhlbHBlciA9IEZhcihcIm1hdGNoOmJhZ09mIGhlbHBlclwiLCB7XG4gICAgY2hlY2tNYXRjaGVzOiAoc3BlY2ltZW4sIFtrZXlQYXR0LCBjb3VudFBhdHQsIGxpbWl0cyA9IHZvaWQgMF0sIGNoZWNrKSA9PiB7XG4gICAgICBjb25zdCB7IG51bVVuaXF1ZUJhZ0VsZW1lbnRzTGltaXQsIGRlY2ltYWxEaWdpdHNMaW1pdCB9ID0gbGltaXQobGltaXRzKTtcbiAgICAgIHJldHVybiBjaGVja0tpbmQoc3BlY2ltZW4sIFwiY29weUJhZ1wiLCBjaGVjaykgJiYgY2hlY2soXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICovXG4gICAgICAgIHNwZWNpbWVuLnBheWxvYWQubGVuZ3RoIDw9IG51bVVuaXF1ZUJhZ0VsZW1lbnRzTGltaXQsXG4gICAgICAgIHJlZGFjdGVkYEJhZyBtdXN0IG5vdCBoYXZlIG1vcmUgdGhhbiAke3F1b3RlKFxuICAgICAgICAgIG51bVVuaXF1ZUJhZ0VsZW1lbnRzTGltaXRcbiAgICAgICAgKX0gdW5pcXVlIGVsZW1lbnRzOiAke3NwZWNpbWVufWBcbiAgICAgICkgJiYgc3BlY2ltZW4ucGF5bG9hZC5ldmVyeShcbiAgICAgICAgKFtrZXksIGNvdW50XSwgaTMpID0+IGNoZWNrTWF0Y2hlczIoa2V5LCBrZXlQYXR0LCBjaGVjaywgYGJhZyBrZXlzWyR7aTN9XWApICYmIGFwcGx5TGFiZWxpbmdFcnJvcihcbiAgICAgICAgICBjaGVja0RlY2ltYWxEaWdpdHNMaW1pdCxcbiAgICAgICAgICBbY291bnQsIGRlY2ltYWxEaWdpdHNMaW1pdCwgY2hlY2tdLFxuICAgICAgICAgIGBiYWcgY291bnRzWyR7aTN9XWBcbiAgICAgICAgKSAmJiBjaGVja01hdGNoZXMyKGNvdW50LCBjb3VudFBhdHQsIGNoZWNrLCBgYmFnIGNvdW50c1ske2kzfV1gKVxuICAgICAgKTtcbiAgICB9LFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAocGF5bG9hZCwgY2hlY2spID0+IGNoZWNrSXNXZWxsRm9ybWVkV2l0aExpbWl0KFxuICAgICAgcGF5bG9hZCxcbiAgICAgIGhhcmRlbihbTU0ucGF0dGVybigpLCBNTS5wYXR0ZXJuKCldKSxcbiAgICAgIGNoZWNrLFxuICAgICAgXCJtYXRjaDpiYWdPZiBwYXlsb2FkXCJcbiAgICApLFxuICAgIGdldFJhbmtDb3ZlcjogKCkgPT4gZ2V0UGFzc1N0eWxlQ292ZXIoXCJ0YWdnZWRcIilcbiAgfSk7XG4gIGNvbnN0IGVsZW1lbnRzSGFzU3BsaXQgPSAoZWxlbWVudHMsIGVsZW1lbnRQYXR0LCBib3VuZCwgaW5SZXN1bHRzID0gdm9pZCAwLCBvdXRSZXN1bHRzID0gdm9pZCAwLCBjaGVjayA9IGlkZW50Q2hlY2tlcikgPT4ge1xuICAgIGxldCBjb3VudCA9IDBuO1xuICAgIGZvciAobGV0IGkzID0gZWxlbWVudHMubGVuZ3RoIC0gMTsgaTMgPj0gMDsgaTMgLT0gMSkge1xuICAgICAgY29uc3QgZWxlbWVudCA9IGVsZW1lbnRzW2kzXTtcbiAgICAgIGlmIChjb3VudCA8IGJvdW5kKSB7XG4gICAgICAgIGlmIChtYXRjaGVzMihlbGVtZW50LCBlbGVtZW50UGF0dCkpIHtcbiAgICAgICAgICBjb3VudCArPSAxbjtcbiAgICAgICAgICBpZiAoaW5SZXN1bHRzKSBpblJlc3VsdHMucHVzaChlbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIGlmIChvdXRSZXN1bHRzKSB7XG4gICAgICAgICAgb3V0UmVzdWx0cy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG91dFJlc3VsdHMgPT09IHZvaWQgMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dFJlc3VsdHMucHVzaChlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoZWNrKFxuICAgICAgY291bnQgPj0gYm91bmQsXG4gICAgICByZWRhY3RlZGBIYXMgb25seSAke3F1b3RlKGNvdW50KX0gbWF0Y2hlcywgYnV0IG5lZWRzICR7cXVvdGUoYm91bmQpfWBcbiAgICApO1xuICB9O1xuICBjb25zdCBwYWlyc0hhc1NwbGl0ID0gKHBhaXJzLCBlbGVtZW50UGF0dCwgYm91bmQsIGluUmVzdWx0cyA9IHZvaWQgMCwgb3V0UmVzdWx0cyA9IHZvaWQgMCwgY2hlY2sgPSBpZGVudENoZWNrZXIpID0+IHtcbiAgICBsZXQgY291bnQgPSAwbjtcbiAgICBmb3IgKGxldCBpMyA9IHBhaXJzLmxlbmd0aCAtIDE7IGkzID49IDA7IGkzIC09IDEpIHtcbiAgICAgIGNvbnN0IFtlbGVtZW50LCBudW1dID0gcGFpcnNbaTNdO1xuICAgICAgY29uc3QgbnVtUmVzdCA9IGJvdW5kIC0gY291bnQ7XG4gICAgICBpZiAobnVtUmVzdCA+PSAxbikge1xuICAgICAgICBpZiAobWF0Y2hlczIoZWxlbWVudCwgZWxlbWVudFBhdHQpKSB7XG4gICAgICAgICAgaWYgKG51bSA8PSBudW1SZXN0KSB7XG4gICAgICAgICAgICBjb3VudCArPSBudW07XG4gICAgICAgICAgICBpZiAoaW5SZXN1bHRzKSBpblJlc3VsdHMucHVzaChbZWxlbWVudCwgbnVtXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG51bUluID0gbnVtUmVzdDtcbiAgICAgICAgICAgIGNvdW50ICs9IG51bUluO1xuICAgICAgICAgICAgaWYgKGluUmVzdWx0cykgaW5SZXN1bHRzLnB1c2goW2VsZW1lbnQsIG51bVJlc3RdKTtcbiAgICAgICAgICAgIGlmIChvdXRSZXN1bHRzKSBvdXRSZXN1bHRzLnB1c2goW2VsZW1lbnQsIG51bSAtIG51bVJlc3RdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAob3V0UmVzdWx0cykge1xuICAgICAgICAgIG91dFJlc3VsdHMucHVzaChbZWxlbWVudCwgbnVtXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAob3V0UmVzdWx0cyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0UmVzdWx0cy5wdXNoKFtlbGVtZW50LCBudW1dKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoZWNrKFxuICAgICAgY291bnQgPj0gYm91bmQsXG4gICAgICByZWRhY3RlZGBIYXMgb25seSAke3F1b3RlKGNvdW50KX0gbWF0Y2hlcywgYnV0IG5lZWRzICR7cXVvdGUoYm91bmQpfWBcbiAgICApO1xuICB9O1xuICBjb25zdCBjb250YWluZXJIYXNTcGxpdDIgPSAoc3BlY2ltZW4sIGVsZW1lbnRQYXR0LCBib3VuZCwgbmVlZEluUmVzdWx0cyA9IGZhbHNlLCBuZWVkT3V0UmVzdWx0cyA9IGZhbHNlLCBjaGVjayA9IGlkZW50Q2hlY2tlcikgPT4ge1xuICAgIGNvbnN0IGluUmVzdWx0cyA9IG5lZWRJblJlc3VsdHMgPyBbXSA6IHZvaWQgMDtcbiAgICBjb25zdCBvdXRSZXN1bHRzID0gbmVlZE91dFJlc3VsdHMgPyBbXSA6IHZvaWQgMDtcbiAgICBjb25zdCBraW5kMiA9IGtpbmRPZjIoc3BlY2ltZW4pO1xuICAgIHN3aXRjaCAoa2luZDIpIHtcbiAgICAgIGNhc2UgXCJjb3B5QXJyYXlcIjoge1xuICAgICAgICBpZiAoIWVsZW1lbnRzSGFzU3BsaXQoXG4gICAgICAgICAgc3BlY2ltZW4sXG4gICAgICAgICAgZWxlbWVudFBhdHQsXG4gICAgICAgICAgYm91bmQsXG4gICAgICAgICAgaW5SZXN1bHRzLFxuICAgICAgICAgIG91dFJlc3VsdHMsXG4gICAgICAgICAgY2hlY2tcbiAgICAgICAgKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2luUmVzdWx0cywgb3V0UmVzdWx0c107XG4gICAgICB9XG4gICAgICBjYXNlIFwiY29weVNldFwiOiB7XG4gICAgICAgIGlmICghZWxlbWVudHNIYXNTcGxpdChcbiAgICAgICAgICBzcGVjaW1lbi5wYXlsb2FkLFxuICAgICAgICAgIGVsZW1lbnRQYXR0LFxuICAgICAgICAgIGJvdW5kLFxuICAgICAgICAgIGluUmVzdWx0cyxcbiAgICAgICAgICBvdXRSZXN1bHRzLFxuICAgICAgICAgIGNoZWNrXG4gICAgICAgICkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBpblJlc3VsdHMgJiYgbWFrZUNvcHlTZXQoaW5SZXN1bHRzKSxcbiAgICAgICAgICBvdXRSZXN1bHRzICYmIG1ha2VDb3B5U2V0KG91dFJlc3VsdHMpXG4gICAgICAgIF07XG4gICAgICB9XG4gICAgICBjYXNlIFwiY29weUJhZ1wiOiB7XG4gICAgICAgIGlmICghcGFpcnNIYXNTcGxpdChcbiAgICAgICAgICBzcGVjaW1lbi5wYXlsb2FkLFxuICAgICAgICAgIGVsZW1lbnRQYXR0LFxuICAgICAgICAgIGJvdW5kLFxuICAgICAgICAgIGluUmVzdWx0cyxcbiAgICAgICAgICBvdXRSZXN1bHRzLFxuICAgICAgICAgIGNoZWNrXG4gICAgICAgICkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBpblJlc3VsdHMgJiYgbWFrZUNvcHlCYWcoaW5SZXN1bHRzKSxcbiAgICAgICAgICBvdXRSZXN1bHRzICYmIG1ha2VDb3B5QmFnKG91dFJlc3VsdHMpXG4gICAgICAgIF07XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHJldHVybiBjaGVjayhmYWxzZSwgcmVkYWN0ZWRgdW5leHBlY3RlZCAke3F1b3RlKGtpbmQyKX1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IG1hdGNoQ29udGFpbmVySGFzSGVscGVyID0gRmFyKFwiTS5jb250YWluZXJIYXMgaGVscGVyXCIsIHtcbiAgICAvKlxuXG5cblxuICAgICAqL1xuICAgIGNoZWNrTWF0Y2hlczogKHNwZWNpbWVuLCBbZWxlbWVudFBhdHQsIGJvdW5kLCBsaW1pdHMgPSB2b2lkIDBdLCBjaGVjaykgPT4ge1xuICAgICAgY29uc3Qga2luZDIgPSBraW5kT2YyKHNwZWNpbWVuLCBjaGVjayk7XG4gICAgICBjb25zdCB7IGRlY2ltYWxEaWdpdHNMaW1pdCB9ID0gbGltaXQobGltaXRzKTtcbiAgICAgIGlmICghYXBwbHlMYWJlbGluZ0Vycm9yKFxuICAgICAgICBjaGVja0RlY2ltYWxEaWdpdHNMaW1pdCxcbiAgICAgICAgW2JvdW5kLCBkZWNpbWFsRGlnaXRzTGltaXQsIGNoZWNrXSxcbiAgICAgICAgYCR7a2luZDJ9IG1hdGNoZXNgXG4gICAgICApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAhIWNvbnRhaW5lckhhc1NwbGl0MihcbiAgICAgICAgc3BlY2ltZW4sXG4gICAgICAgIGVsZW1lbnRQYXR0LFxuICAgICAgICBib3VuZCxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBjaGVja1xuICAgICAgKTtcbiAgICB9LFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAocGF5bG9hZCwgY2hlY2spID0+IGNoZWNrSXNXZWxsRm9ybWVkV2l0aExpbWl0KFxuICAgICAgcGF5bG9hZCxcbiAgICAgIGhhcmRlbihbTU0ucGF0dGVybigpLCBNTS5ndGUoMW4pXSksXG4gICAgICBjaGVjayxcbiAgICAgIFwiTS5jb250YWluZXJIYXMgcGF5bG9hZFwiXG4gICAgKSxcbiAgICBnZXRSYW5rQ292ZXI6ICgpID0+IGdldFBhc3NTdHlsZUNvdmVyKFwidGFnZ2VkXCIpXG4gIH0pO1xuICBjb25zdCBtYXRjaE1hcE9mSGVscGVyID0gRmFyKFwibWF0Y2g6bWFwT2YgaGVscGVyXCIsIHtcbiAgICBjaGVja01hdGNoZXM6IChzcGVjaW1lbiwgW2tleVBhdHQsIHZhbHVlUGF0dCwgbGltaXRzID0gdm9pZCAwXSwgY2hlY2spID0+IHtcbiAgICAgIGNvbnN0IHsgbnVtTWFwRW50cmllc0xpbWl0IH0gPSBsaW1pdChsaW1pdHMpO1xuICAgICAgcmV0dXJuIGNoZWNrS2luZChzcGVjaW1lbiwgXCJjb3B5TWFwXCIsIGNoZWNrKSAmJiBjaGVjayhcbiAgICAgICAgLyogICAgICAgICAgICAgICAgKi9cbiAgICAgICAgc3BlY2ltZW4ucGF5bG9hZC5rZXlzLmxlbmd0aCA8PSBudW1NYXBFbnRyaWVzTGltaXQsXG4gICAgICAgIHJlZGFjdGVkYENvcHlNYXAgbXVzdCBoYXZlIG5vIG1vcmUgdGhhbiAke3F1b3RlKFxuICAgICAgICAgIG51bU1hcEVudHJpZXNMaW1pdFxuICAgICAgICApfSBlbnRyaWVzOiAke3NwZWNpbWVufWBcbiAgICAgICkgJiYgYXJyYXlFdmVyeU1hdGNoUGF0dGVybihcbiAgICAgICAgc3BlY2ltZW4ucGF5bG9hZC5rZXlzLFxuICAgICAgICBrZXlQYXR0LFxuICAgICAgICBjaGVjayxcbiAgICAgICAgXCJtYXAga2V5c1wiXG4gICAgICApICYmIGFycmF5RXZlcnlNYXRjaFBhdHRlcm4oXG4gICAgICAgIHNwZWNpbWVuLnBheWxvYWQudmFsdWVzLFxuICAgICAgICB2YWx1ZVBhdHQsXG4gICAgICAgIGNoZWNrLFxuICAgICAgICBcIm1hcCB2YWx1ZXNcIlxuICAgICAgKTtcbiAgICB9LFxuICAgIGNoZWNrSXNXZWxsRm9ybWVkOiAocGF5bG9hZCwgY2hlY2spID0+IGNoZWNrSXNXZWxsRm9ybWVkV2l0aExpbWl0KFxuICAgICAgcGF5bG9hZCxcbiAgICAgIGhhcmRlbihbTU0ucGF0dGVybigpLCBNTS5wYXR0ZXJuKCldKSxcbiAgICAgIGNoZWNrLFxuICAgICAgXCJtYXRjaDptYXBPZiBwYXlsb2FkXCJcbiAgICApLFxuICAgIGdldFJhbmtDb3ZlcjogKF9lbnRyeVBhdHQpID0+IGdldFBhc3NTdHlsZUNvdmVyKFwidGFnZ2VkXCIpXG4gIH0pO1xuICBjb25zdCBzcGxpdEFycmF5UGFydHMgPSAoc3BlY2ltZW4sIHJlcXVpcmVkUGF0dCwgb3B0aW9uYWxQYXR0KSA9PiB7XG4gICAgY29uc3QgbnVtUmVxdWlyZWQgPSByZXF1aXJlZFBhdHQubGVuZ3RoO1xuICAgIGNvbnN0IG51bU9wdGlvbmFsID0gb3B0aW9uYWxQYXR0Lmxlbmd0aDtcbiAgICBjb25zdCByZXF1aXJlZFNwZWNpbWVuID0gc3BlY2ltZW4uc2xpY2UoMCwgbnVtUmVxdWlyZWQpO1xuICAgIGNvbnN0IG9wdGlvbmFsU3BlY2ltZW4gPSBzcGVjaW1lbi5zbGljZShcbiAgICAgIG51bVJlcXVpcmVkLFxuICAgICAgbnVtUmVxdWlyZWQgKyBudW1PcHRpb25hbFxuICAgICk7XG4gICAgY29uc3QgcmVzdFNwZWNpbWVuID0gc3BlY2ltZW4uc2xpY2UobnVtUmVxdWlyZWQgKyBudW1PcHRpb25hbCk7XG4gICAgcmV0dXJuIGhhcmRlbih7IHJlcXVpcmVkU3BlY2ltZW4sIG9wdGlvbmFsU3BlY2ltZW4sIHJlc3RTcGVjaW1lbiB9KTtcbiAgfTtcbiAgY29uc3QgYWRhcHRBcnJheVBhdHRlcm4gPSAob3B0aW9uYWxQYXR0LCBsZW5ndGgpID0+IGhhcmRlbihvcHRpb25hbFBhdHQuc2xpY2UoMCwgbGVuZ3RoKS5tYXAoKHBhdHQpID0+IE1NLm9wdChwYXR0KSkpO1xuICBjb25zdCBtYXRjaFNwbGl0QXJyYXlIZWxwZXIgPSBGYXIoXCJtYXRjaDpzcGxpdEFycmF5IGhlbHBlclwiLCB7XG4gICAgY2hlY2tNYXRjaGVzOiAoc3BlY2ltZW4sIFtyZXF1aXJlZFBhdHQsIG9wdGlvbmFsUGF0dCA9IFtdLCByZXN0UGF0dCA9IE1NLmFueSgpXSwgY2hlY2spID0+IHtcbiAgICAgIGlmICghY2hlY2tLaW5kKHNwZWNpbWVuLCBcImNvcHlBcnJheVwiLCBjaGVjaykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgeyByZXF1aXJlZFNwZWNpbWVuLCBvcHRpb25hbFNwZWNpbWVuLCByZXN0U3BlY2ltZW4gfSA9IHNwbGl0QXJyYXlQYXJ0cyhzcGVjaW1lbiwgcmVxdWlyZWRQYXR0LCBvcHRpb25hbFBhdHQpO1xuICAgICAgY29uc3QgcGFydGlhbFBhdHQgPSBhZGFwdEFycmF5UGF0dGVybihcbiAgICAgICAgb3B0aW9uYWxQYXR0LFxuICAgICAgICBvcHRpb25hbFNwZWNpbWVuLmxlbmd0aFxuICAgICAgKTtcbiAgICAgIGxldCBhcmdOdW0gPSAwO1xuICAgICAgcmV0dXJuIChyZXF1aXJlZFNwZWNpbWVuLmxlbmd0aCA9PT0gcmVxdWlyZWRQYXR0Lmxlbmd0aCB8fCBjaGVjayhcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIHJlZGFjdGVkYEV4cGVjdGVkIGF0IGxlYXN0ICR7cXVvdGUoXG4gICAgICAgICAgcmVxdWlyZWRQYXR0Lmxlbmd0aFxuICAgICAgICApfSBhcmd1bWVudHM6ICR7c3BlY2ltZW59YFxuICAgICAgKSkgJiYgcmVxdWlyZWRQYXR0LmV2ZXJ5KFxuICAgICAgICAocDQsIGkzKSA9PiAoXG4gICAgICAgICAgLy9cbiAgICAgICAgICBjaGVja01hdGNoZXMyKHJlcXVpcmVkU3BlY2ltZW5baTNdLCBwNCwgY2hlY2ssIGBhcmcgJHthcmdOdW0rK31gKVxuICAgICAgICApXG4gICAgICApICYmIHBhcnRpYWxQYXR0LmV2ZXJ5KFxuICAgICAgICAocDQsIGkzKSA9PiAoXG4gICAgICAgICAgLy9cbiAgICAgICAgICBjaGVja01hdGNoZXMyKG9wdGlvbmFsU3BlY2ltZW5baTNdLCBwNCwgY2hlY2ssIGBhcmcgJHthcmdOdW0rK30/YClcbiAgICAgICAgKVxuICAgICAgKSAmJiBjaGVja01hdGNoZXMyKHJlc3RTcGVjaW1lbiwgcmVzdFBhdHQsIGNoZWNrLCBcIi4uLnJlc3RcIik7XG4gICAgfSxcbiAgICAvKlxuXG5cbiAgICAgKi9cbiAgICBjaGVja0lzV2VsbEZvcm1lZDogKHNwbGl0QXJyYXksIGNoZWNrKSA9PiB7XG4gICAgICBpZiAocGFzc1N0eWxlT2Yoc3BsaXRBcnJheSkgPT09IFwiY29weUFycmF5XCIgJiYgKHNwbGl0QXJyYXkubGVuZ3RoID49IDEgfHwgc3BsaXRBcnJheS5sZW5ndGggPD0gMykpIHtcbiAgICAgICAgY29uc3QgW3JlcXVpcmVkUGF0dCwgb3B0aW9uYWxQYXR0ID0gdm9pZCAwLCByZXN0UGF0dCA9IHZvaWQgMF0gPSBzcGxpdEFycmF5O1xuICAgICAgICBpZiAoaXNQYXR0ZXJuMihyZXF1aXJlZFBhdHQpICYmIHBhc3NTdHlsZU9mKHJlcXVpcmVkUGF0dCkgPT09IFwiY29weUFycmF5XCIgJiYgKG9wdGlvbmFsUGF0dCA9PT0gdm9pZCAwIHx8IGlzUGF0dGVybjIob3B0aW9uYWxQYXR0KSAmJiBwYXNzU3R5bGVPZihvcHRpb25hbFBhdHQpID09PSBcImNvcHlBcnJheVwiKSAmJiAocmVzdFBhdHQgPT09IHZvaWQgMCB8fCBpc1BhdHRlcm4yKHJlc3RQYXR0KSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGNoZWNrKFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgcmVkYWN0ZWRgTXVzdCBiZSBhbiBhcnJheSBvZiBhIHJlcXVpcmVkUGF0dCBhcnJheSwgYW4gb3B0aW9uYWwgb3B0aW9uYWxQYXR0IGFycmF5LCBhbmQgYW4gb3B0aW9uYWwgcmVzdFBhdHQ6ICR7cXVvdGUoXG4gICAgICAgICAgc3BsaXRBcnJheVxuICAgICAgICApfWBcbiAgICAgICk7XG4gICAgfSxcbiAgICBnZXRSYW5rQ292ZXI6IChbXG4gICAgICBfcmVxdWlyZWRQYXR0LFxuICAgICAgX29wdGlvbmFsUGF0dCA9IHZvaWQgMCxcbiAgICAgIF9yZXN0UGF0dCA9IHZvaWQgMFxuICAgIF0pID0+IGdldFBhc3NTdHlsZUNvdmVyKFwiY29weUFycmF5XCIpXG4gIH0pO1xuICBjb25zdCBzcGxpdFJlY29yZFBhcnRzID0gKHNwZWNpbWVuLCByZXF1aXJlZFBhdHQsIG9wdGlvbmFsUGF0dCkgPT4ge1xuICAgIGNvbnN0IHJlcXVpcmVkRW50cmllcyA9IFtdO1xuICAgIGNvbnN0IG9wdGlvbmFsRW50cmllcyA9IFtdO1xuICAgIGNvbnN0IHJlc3RFbnRyaWVzID0gW107XG4gICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIGVudHJpZXM3KHNwZWNpbWVuKSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5T2YocmVxdWlyZWRQYXR0LCBuYW1lKSkge1xuICAgICAgICByZXF1aXJlZEVudHJpZXMucHVzaChbbmFtZSwgdmFsdWVdKTtcbiAgICAgIH0gZWxzZSBpZiAoaGFzT3duUHJvcGVydHlPZihvcHRpb25hbFBhdHQsIG5hbWUpKSB7XG4gICAgICAgIG9wdGlvbmFsRW50cmllcy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdEVudHJpZXMucHVzaChbbmFtZSwgdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhhcmRlbih7XG4gICAgICByZXF1aXJlZFNwZWNpbWVuOiBmcm9tVW5pcXVlRW50cmllcyhyZXF1aXJlZEVudHJpZXMpLFxuICAgICAgb3B0aW9uYWxTcGVjaW1lbjogZnJvbVVuaXF1ZUVudHJpZXMob3B0aW9uYWxFbnRyaWVzKSxcbiAgICAgIHJlc3RTcGVjaW1lbjogZnJvbVVuaXF1ZUVudHJpZXMocmVzdEVudHJpZXMpXG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IGFkYXB0UmVjb3JkUGF0dGVybiA9IChvcHRpb25hbFBhdHQsIG5hbWVzKSA9PiBmcm9tVW5pcXVlRW50cmllcyhuYW1lcy5tYXAoKG5hbWUpID0+IFtuYW1lLCBNTS5vcHQob3B0aW9uYWxQYXR0W25hbWVdKV0pKTtcbiAgY29uc3QgbWF0Y2hTcGxpdFJlY29yZEhlbHBlciA9IEZhcihcIm1hdGNoOnNwbGl0UmVjb3JkIGhlbHBlclwiLCB7XG4gICAgY2hlY2tNYXRjaGVzOiAoc3BlY2ltZW4sIFtyZXF1aXJlZFBhdHQsIG9wdGlvbmFsUGF0dCA9IHt9LCByZXN0UGF0dCA9IE1NLmFueSgpXSwgY2hlY2spID0+IHtcbiAgICAgIGlmICghY2hlY2tLaW5kKHNwZWNpbWVuLCBcImNvcHlSZWNvcmRcIiwgY2hlY2spKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgcmVxdWlyZWRTcGVjaW1lbiwgb3B0aW9uYWxTcGVjaW1lbiwgcmVzdFNwZWNpbWVuIH0gPSBzcGxpdFJlY29yZFBhcnRzKHNwZWNpbWVuLCByZXF1aXJlZFBhdHQsIG9wdGlvbmFsUGF0dCk7XG4gICAgICBjb25zdCBwYXJ0aWFsTmFtZXMgPSAoXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIG93bktleXMxNyhvcHRpb25hbFNwZWNpbWVuKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHBhcnRpYWxQYXR0ID0gYWRhcHRSZWNvcmRQYXR0ZXJuKG9wdGlvbmFsUGF0dCwgcGFydGlhbE5hbWVzKTtcbiAgICAgIHJldHVybiBjaGVja01hdGNoZXMyKHJlcXVpcmVkU3BlY2ltZW4sIHJlcXVpcmVkUGF0dCwgY2hlY2spICYmIHBhcnRpYWxOYW1lcy5ldmVyeShcbiAgICAgICAgKG5hbWUpID0+IGNoZWNrTWF0Y2hlczIoXG4gICAgICAgICAgb3B0aW9uYWxTcGVjaW1lbltuYW1lXSxcbiAgICAgICAgICBwYXJ0aWFsUGF0dFtuYW1lXSxcbiAgICAgICAgICBjaGVjayxcbiAgICAgICAgICBgJHtuYW1lfT9gXG4gICAgICAgIClcbiAgICAgICkgJiYgY2hlY2tNYXRjaGVzMihyZXN0U3BlY2ltZW4sIHJlc3RQYXR0LCBjaGVjaywgXCIuLi5yZXN0XCIpO1xuICAgIH0sXG4gICAgLypcblxuXG4gICAgICovXG4gICAgY2hlY2tJc1dlbGxGb3JtZWQ6IChzcGxpdEFycmF5LCBjaGVjaykgPT4ge1xuICAgICAgaWYgKHBhc3NTdHlsZU9mKHNwbGl0QXJyYXkpID09PSBcImNvcHlBcnJheVwiICYmIChzcGxpdEFycmF5Lmxlbmd0aCA+PSAxIHx8IHNwbGl0QXJyYXkubGVuZ3RoIDw9IDMpKSB7XG4gICAgICAgIGNvbnN0IFtyZXF1aXJlZFBhdHQsIG9wdGlvbmFsUGF0dCA9IHZvaWQgMCwgcmVzdFBhdHQgPSB2b2lkIDBdID0gc3BsaXRBcnJheTtcbiAgICAgICAgaWYgKGlzUGF0dGVybjIocmVxdWlyZWRQYXR0KSAmJiBwYXNzU3R5bGVPZihyZXF1aXJlZFBhdHQpID09PSBcImNvcHlSZWNvcmRcIiAmJiAob3B0aW9uYWxQYXR0ID09PSB2b2lkIDAgfHwgaXNQYXR0ZXJuMihvcHRpb25hbFBhdHQpICYmIHBhc3NTdHlsZU9mKG9wdGlvbmFsUGF0dCkgPT09IFwiY29weVJlY29yZFwiKSAmJiAocmVzdFBhdHQgPT09IHZvaWQgMCB8fCBpc1BhdHRlcm4yKHJlc3RQYXR0KSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGNoZWNrKFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgcmVkYWN0ZWRgTXVzdCBiZSBhbiBhcnJheSBvZiBhIHJlcXVpcmVkUGF0dCByZWNvcmQsIGFuIG9wdGlvbmFsIG9wdGlvbmFsUGF0dCByZWNvcmQsIGFuZCBhbiBvcHRpb25hbCByZXN0UGF0dDogJHtxdW90ZShcbiAgICAgICAgICBzcGxpdEFycmF5XG4gICAgICAgICl9YFxuICAgICAgKTtcbiAgICB9LFxuICAgIGdldFJhbmtDb3ZlcjogKFtcbiAgICAgIHJlcXVpcmVkUGF0dCxcbiAgICAgIF9vcHRpb25hbFBhdHQgPSB2b2lkIDAsXG4gICAgICBfcmVzdFBhdHQgPSB2b2lkIDBcbiAgICBdKSA9PiBnZXRQYXNzU3R5bGVDb3ZlcihwYXNzU3R5bGVPZihyZXF1aXJlZFBhdHQpKVxuICB9KTtcbiAgY29uc3QgSGVscGVyc0J5TWF0Y2hUYWcgPSBoYXJkZW4oe1xuICAgIFwibWF0Y2g6YW55XCI6IG1hdGNoQW55SGVscGVyLFxuICAgIFwibWF0Y2g6YW5kXCI6IG1hdGNoQW5kSGVscGVyLFxuICAgIFwibWF0Y2g6b3JcIjogbWF0Y2hPckhlbHBlcixcbiAgICBcIm1hdGNoOm5vdFwiOiBtYXRjaE5vdEhlbHBlcixcbiAgICBcIm1hdGNoOnNjYWxhclwiOiBtYXRjaFNjYWxhckhlbHBlcixcbiAgICBcIm1hdGNoOmtleVwiOiBtYXRjaEtleUhlbHBlcixcbiAgICBcIm1hdGNoOnBhdHRlcm5cIjogbWF0Y2hQYXR0ZXJuSGVscGVyLFxuICAgIFwibWF0Y2g6a2luZFwiOiBtYXRjaEtpbmRIZWxwZXIsXG4gICAgXCJtYXRjaDp0YWdnZWRcIjogbWF0Y2hUYWdnZWRIZWxwZXIsXG4gICAgXCJtYXRjaDpiaWdpbnRcIjogbWF0Y2hCaWdpbnRIZWxwZXIsXG4gICAgXCJtYXRjaDpuYXRcIjogbWF0Y2hOYXRIZWxwZXIsXG4gICAgXCJtYXRjaDpzdHJpbmdcIjogbWF0Y2hTdHJpbmdIZWxwZXIsXG4gICAgXCJtYXRjaDpzeW1ib2xcIjogbWF0Y2hTeW1ib2xIZWxwZXIsXG4gICAgXCJtYXRjaDpyZW1vdGFibGVcIjogbWF0Y2hSZW1vdGFibGVIZWxwZXIsXG4gICAgXCJtYXRjaDpsdFwiOiBtYXRjaExUSGVscGVyLFxuICAgIFwibWF0Y2g6bHRlXCI6IG1hdGNoTFRFSGVscGVyLFxuICAgIFwibWF0Y2g6Z3RlXCI6IG1hdGNoR1RFSGVscGVyLFxuICAgIFwibWF0Y2g6Z3RcIjogbWF0Y2hHVEhlbHBlcixcbiAgICBcIm1hdGNoOmFycmF5T2ZcIjogbWF0Y2hBcnJheU9mSGVscGVyLFxuICAgIFwibWF0Y2g6cmVjb3JkT2ZcIjogbWF0Y2hSZWNvcmRPZkhlbHBlcixcbiAgICBcIm1hdGNoOnNldE9mXCI6IG1hdGNoU2V0T2ZIZWxwZXIsXG4gICAgXCJtYXRjaDpiYWdPZlwiOiBtYXRjaEJhZ09mSGVscGVyLFxuICAgIFwibWF0Y2g6Y29udGFpbmVySGFzXCI6IG1hdGNoQ29udGFpbmVySGFzSGVscGVyLFxuICAgIFwibWF0Y2g6bWFwT2ZcIjogbWF0Y2hNYXBPZkhlbHBlcixcbiAgICBcIm1hdGNoOnNwbGl0QXJyYXlcIjogbWF0Y2hTcGxpdEFycmF5SGVscGVyLFxuICAgIFwibWF0Y2g6c3BsaXRSZWNvcmRcIjogbWF0Y2hTcGxpdFJlY29yZEhlbHBlclxuICB9KTtcbiAgY29uc3QgbWFrZU1hdGNoZXIgPSAodGFnLCBwYXlsb2FkKSA9PiB7XG4gICAgY29uc3QgbWF0Y2hlciA9IG1ha2VUYWdnZWQodGFnLCBwYXlsb2FkKTtcbiAgICBhc3NlcnRQYXR0ZXJuMihtYXRjaGVyKTtcbiAgICByZXR1cm4gbWF0Y2hlcjtcbiAgfTtcbiAgY29uc3QgbWFrZUtpbmRNYXRjaGVyID0gKGtpbmQyKSA9PiBtYWtlTWF0Y2hlcihcIm1hdGNoOmtpbmRcIiwga2luZDIpO1xuICBjb25zdCBBbnlTaGFwZSA9IG1ha2VNYXRjaGVyKFwibWF0Y2g6YW55XCIsIHZvaWQgMCk7XG4gIGNvbnN0IFNjYWxhclNoYXBlID0gbWFrZU1hdGNoZXIoXCJtYXRjaDpzY2FsYXJcIiwgdm9pZCAwKTtcbiAgY29uc3QgS2V5U2hhcGUgPSBtYWtlTWF0Y2hlcihcIm1hdGNoOmtleVwiLCB2b2lkIDApO1xuICBjb25zdCBQYXR0ZXJuU2hhcGUgPSBtYWtlTWF0Y2hlcihcIm1hdGNoOnBhdHRlcm5cIiwgdm9pZCAwKTtcbiAgY29uc3QgQm9vbGVhblNoYXBlID0gbWFrZUtpbmRNYXRjaGVyKFwiYm9vbGVhblwiKTtcbiAgY29uc3QgTnVtYmVyU2hhcGUgPSBtYWtlS2luZE1hdGNoZXIoXCJudW1iZXJcIik7XG4gIGNvbnN0IEJpZ0ludFNoYXBlID0gbWFrZVRhZ2dlZChcIm1hdGNoOmJpZ2ludFwiLCBbXSk7XG4gIGNvbnN0IE5hdFNoYXBlID0gbWFrZVRhZ2dlZChcIm1hdGNoOm5hdFwiLCBbXSk7XG4gIGNvbnN0IFN0cmluZ1NoYXBlID0gbWFrZVRhZ2dlZChcIm1hdGNoOnN0cmluZ1wiLCBbXSk7XG4gIGNvbnN0IFN5bWJvbFNoYXBlID0gbWFrZVRhZ2dlZChcIm1hdGNoOnN5bWJvbFwiLCBbXSk7XG4gIGNvbnN0IFJlY29yZFNoYXBlID0gbWFrZVRhZ2dlZChcIm1hdGNoOnJlY29yZE9mXCIsIFtBbnlTaGFwZSwgQW55U2hhcGVdKTtcbiAgY29uc3QgQXJyYXlTaGFwZSA9IG1ha2VUYWdnZWQoXCJtYXRjaDphcnJheU9mXCIsIFtBbnlTaGFwZV0pO1xuICBjb25zdCBTZXRTaGFwZSA9IG1ha2VUYWdnZWQoXCJtYXRjaDpzZXRPZlwiLCBbQW55U2hhcGVdKTtcbiAgY29uc3QgQmFnU2hhcGUgPSBtYWtlVGFnZ2VkKFwibWF0Y2g6YmFnT2ZcIiwgW0FueVNoYXBlLCBBbnlTaGFwZV0pO1xuICBjb25zdCBNYXBTaGFwZSA9IG1ha2VUYWdnZWQoXCJtYXRjaDptYXBPZlwiLCBbQW55U2hhcGUsIEFueVNoYXBlXSk7XG4gIGNvbnN0IFJlbW90YWJsZVNoYXBlID0gbWFrZUtpbmRNYXRjaGVyKFwicmVtb3RhYmxlXCIpO1xuICBjb25zdCBFcnJvclNoYXBlID0gbWFrZUtpbmRNYXRjaGVyKFwiZXJyb3JcIik7XG4gIGNvbnN0IFByb21pc2VTaGFwZSA9IG1ha2VLaW5kTWF0Y2hlcihcInByb21pc2VcIik7XG4gIGNvbnN0IFVuZGVmaW5lZFNoYXBlID0gbWFrZUtpbmRNYXRjaGVyKFwidW5kZWZpbmVkXCIpO1xuICBjb25zdCBtYWtlTGltaXRzTWF0Y2hlciA9ICh0YWcsIHBheWxvYWQpID0+IHtcbiAgICBpZiAocGF5bG9hZFtwYXlsb2FkLmxlbmd0aCAtIDFdID09PSB2b2lkIDApIHtcbiAgICAgIHBheWxvYWQgPSBoYXJkZW4ocGF5bG9hZC5zbGljZSgwLCBwYXlsb2FkLmxlbmd0aCAtIDEpKTtcbiAgICB9XG4gICAgcmV0dXJuIG1ha2VNYXRjaGVyKHRhZywgcGF5bG9hZCk7XG4gIH07XG4gIGNvbnN0IG1ha2VSZW1vdGFibGVNYXRjaGVyID0gKGxhYmVsID0gdm9pZCAwKSA9PiBsYWJlbCA9PT0gdm9pZCAwID8gUmVtb3RhYmxlU2hhcGUgOiBtYWtlTWF0Y2hlcihcIm1hdGNoOnJlbW90YWJsZVwiLCBoYXJkZW4oeyBsYWJlbCB9KSk7XG4gIGNvbnN0IG1ha2VTcGxpdFBheWxvYWQgPSAoZW1wdHk1LCBiYXNlMiwgb3B0aW9uYWwgPSB2b2lkIDAsIHJlc3QgPSB2b2lkIDApID0+IHtcbiAgICBpZiAocmVzdCkge1xuICAgICAgcmV0dXJuIFtiYXNlMiwgb3B0aW9uYWwgfHwgZW1wdHk1LCByZXN0XTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbmFsKSB7XG4gICAgICByZXR1cm4gW2Jhc2UyLCBvcHRpb25hbF07XG4gICAgfVxuICAgIHJldHVybiBbYmFzZTJdO1xuICB9O1xuICBjb25zdCBNMyA9IGhhcmRlbih7XG4gICAgYW55OiAoKSA9PiBBbnlTaGFwZSxcbiAgICBhbmQ6ICguLi5wYXR0cykgPT4gbWFrZU1hdGNoZXIoXCJtYXRjaDphbmRcIiwgcGF0dHMpLFxuICAgIG9yOiAoLi4ucGF0dHMpID0+IG1ha2VNYXRjaGVyKFwibWF0Y2g6b3JcIiwgcGF0dHMpLFxuICAgIG5vdDogKHN1YlBhdHQpID0+IG1ha2VNYXRjaGVyKFwibWF0Y2g6bm90XCIsIHN1YlBhdHQpLFxuICAgIHNjYWxhcjogKCkgPT4gU2NhbGFyU2hhcGUsXG4gICAga2V5OiAoKSA9PiBLZXlTaGFwZSxcbiAgICBwYXR0ZXJuOiAoKSA9PiBQYXR0ZXJuU2hhcGUsXG4gICAga2luZDogbWFrZUtpbmRNYXRjaGVyLFxuICAgIHRhZ2dlZDogKHRhZ1BhdHQgPSBNMy5zdHJpbmcoKSwgcGF5bG9hZFBhdHQgPSBNMy5hbnkoKSkgPT4gbWFrZU1hdGNoZXIoXCJtYXRjaDp0YWdnZWRcIiwgaGFyZGVuKFt0YWdQYXR0LCBwYXlsb2FkUGF0dF0pKSxcbiAgICBib29sZWFuOiAoKSA9PiBCb29sZWFuU2hhcGUsXG4gICAgbnVtYmVyOiAoKSA9PiBOdW1iZXJTaGFwZSxcbiAgICBiaWdpbnQ6IChsaW1pdHMgPSB2b2lkIDApID0+IGxpbWl0cyA/IG1ha2VMaW1pdHNNYXRjaGVyKFwibWF0Y2g6YmlnaW50XCIsIFtsaW1pdHNdKSA6IEJpZ0ludFNoYXBlLFxuICAgIG5hdDogKGxpbWl0cyA9IHZvaWQgMCkgPT4gbGltaXRzID8gbWFrZUxpbWl0c01hdGNoZXIoXCJtYXRjaDpuYXRcIiwgW2xpbWl0c10pIDogTmF0U2hhcGUsXG4gICAgc3RyaW5nOiAobGltaXRzID0gdm9pZCAwKSA9PiBsaW1pdHMgPyBtYWtlTGltaXRzTWF0Y2hlcihcIm1hdGNoOnN0cmluZ1wiLCBbbGltaXRzXSkgOiBTdHJpbmdTaGFwZSxcbiAgICBzeW1ib2w6IChsaW1pdHMgPSB2b2lkIDApID0+IGxpbWl0cyA/IG1ha2VMaW1pdHNNYXRjaGVyKFwibWF0Y2g6c3ltYm9sXCIsIFtsaW1pdHNdKSA6IFN5bWJvbFNoYXBlLFxuICAgIHJlY29yZDogKGxpbWl0cyA9IHZvaWQgMCkgPT4gbGltaXRzID8gTTMucmVjb3JkT2YoTTMuYW55KCksIE0zLmFueSgpLCBsaW1pdHMpIDogUmVjb3JkU2hhcGUsXG4gICAgLy9cbiAgICAvL1xuICAgIC8vXG4gICAgLy9cbiAgICAvL1xuICAgIC8vXG4gICAgLy9cbiAgICBhcnJheTogKGxpbWl0cyA9IHZvaWQgMCkgPT4gbGltaXRzID8gTTMuYXJyYXlPZihNMy5hbnkoKSwgbGltaXRzKSA6IEFycmF5U2hhcGUsXG4gICAgLy9cbiAgICAvL1xuICAgIC8vXG4gICAgLy9cbiAgICAvL1xuICAgIC8vXG4gICAgc2V0OiAobGltaXRzID0gdm9pZCAwKSA9PiBsaW1pdHMgPyBNMy5zZXRPZihNMy5hbnkoKSwgbGltaXRzKSA6IFNldFNoYXBlLFxuICAgIGJhZzogKGxpbWl0cyA9IHZvaWQgMCkgPT4gbGltaXRzID8gTTMuYmFnT2YoTTMuYW55KCksIE0zLmFueSgpLCBsaW1pdHMpIDogQmFnU2hhcGUsXG4gICAgbWFwOiAobGltaXRzID0gdm9pZCAwKSA9PiBsaW1pdHMgPyBNMy5tYXBPZihNMy5hbnkoKSwgTTMuYW55KCksIGxpbWl0cykgOiBNYXBTaGFwZSxcbiAgICAvL1xuICAgIC8vXG4gICAgLy9cbiAgICAvL1xuICAgIC8vXG4gICAgLy9cbiAgICAvL1xuICAgIHJlbW90YWJsZTogbWFrZVJlbW90YWJsZU1hdGNoZXIsXG4gICAgZXJyb3I6ICgpID0+IEVycm9yU2hhcGUsXG4gICAgcHJvbWlzZTogKCkgPT4gUHJvbWlzZVNoYXBlLFxuICAgIHVuZGVmaW5lZDogKCkgPT4gVW5kZWZpbmVkU2hhcGUsXG4gICAgbnVsbDogKCkgPT4gbnVsbCxcbiAgICBsdDogKHJpZ2h0T3BlcmFuZCkgPT4gbWFrZU1hdGNoZXIoXCJtYXRjaDpsdFwiLCByaWdodE9wZXJhbmQpLFxuICAgIGx0ZTogKHJpZ2h0T3BlcmFuZCkgPT4gbWFrZU1hdGNoZXIoXCJtYXRjaDpsdGVcIiwgcmlnaHRPcGVyYW5kKSxcbiAgICBlcTogKGtleSkgPT4ge1xuICAgICAgYXNzZXJ0S2V5KGtleSk7XG4gICAgICByZXR1cm4ga2V5ID09PSB2b2lkIDAgPyBNMy51bmRlZmluZWQoKSA6IGtleTtcbiAgICB9LFxuICAgIG5lcTogKGtleSkgPT4gTTMubm90KE0zLmVxKGtleSkpLFxuICAgIGd0ZTogKHJpZ2h0T3BlcmFuZCkgPT4gbWFrZU1hdGNoZXIoXCJtYXRjaDpndGVcIiwgcmlnaHRPcGVyYW5kKSxcbiAgICBndDogKHJpZ2h0T3BlcmFuZCkgPT4gbWFrZU1hdGNoZXIoXCJtYXRjaDpndFwiLCByaWdodE9wZXJhbmQpLFxuICAgIHJlY29yZE9mOiAoa2V5UGF0dCA9IE0zLmFueSgpLCB2YWx1ZVBhdHQgPSBNMy5hbnkoKSwgbGltaXRzID0gdm9pZCAwKSA9PiBtYWtlTGltaXRzTWF0Y2hlcihcIm1hdGNoOnJlY29yZE9mXCIsIFtrZXlQYXR0LCB2YWx1ZVBhdHQsIGxpbWl0c10pLFxuICAgIGFycmF5T2Y6IChzdWJQYXR0ID0gTTMuYW55KCksIGxpbWl0cyA9IHZvaWQgMCkgPT4gbWFrZUxpbWl0c01hdGNoZXIoXCJtYXRjaDphcnJheU9mXCIsIFtzdWJQYXR0LCBsaW1pdHNdKSxcbiAgICBzZXRPZjogKGtleVBhdHQgPSBNMy5hbnkoKSwgbGltaXRzID0gdm9pZCAwKSA9PiBtYWtlTGltaXRzTWF0Y2hlcihcIm1hdGNoOnNldE9mXCIsIFtrZXlQYXR0LCBsaW1pdHNdKSxcbiAgICBiYWdPZjogKGtleVBhdHQgPSBNMy5hbnkoKSwgY291bnRQYXR0ID0gTTMuYW55KCksIGxpbWl0cyA9IHZvaWQgMCkgPT4gbWFrZUxpbWl0c01hdGNoZXIoXCJtYXRjaDpiYWdPZlwiLCBba2V5UGF0dCwgY291bnRQYXR0LCBsaW1pdHNdKSxcbiAgICBjb250YWluZXJIYXM6IChlbGVtZW50UGF0dCA9IE0zLmFueSgpLCBjb3VudFBhdHQgPSAxbiwgbGltaXRzID0gdm9pZCAwKSA9PiBtYWtlTGltaXRzTWF0Y2hlcihcIm1hdGNoOmNvbnRhaW5lckhhc1wiLCBbZWxlbWVudFBhdHQsIGNvdW50UGF0dCwgbGltaXRzXSksXG4gICAgbWFwT2Y6IChrZXlQYXR0ID0gTTMuYW55KCksIHZhbHVlUGF0dCA9IE0zLmFueSgpLCBsaW1pdHMgPSB2b2lkIDApID0+IG1ha2VMaW1pdHNNYXRjaGVyKFwibWF0Y2g6bWFwT2ZcIiwgW2tleVBhdHQsIHZhbHVlUGF0dCwgbGltaXRzXSksXG4gICAgc3BsaXRBcnJheTogKGJhc2UyLCBvcHRpb25hbCA9IHZvaWQgMCwgcmVzdCA9IHZvaWQgMCkgPT4gbWFrZU1hdGNoZXIoXG4gICAgICBcIm1hdGNoOnNwbGl0QXJyYXlcIixcbiAgICAgIG1ha2VTcGxpdFBheWxvYWQoW10sIGJhc2UyLCBvcHRpb25hbCwgcmVzdClcbiAgICApLFxuICAgIHNwbGl0UmVjb3JkOiAoYmFzZTIsIG9wdGlvbmFsID0gdm9pZCAwLCByZXN0ID0gdm9pZCAwKSA9PiBtYWtlTWF0Y2hlcihcbiAgICAgIFwibWF0Y2g6c3BsaXRSZWNvcmRcIixcbiAgICAgIG1ha2VTcGxpdFBheWxvYWQoe30sIGJhc2UyLCBvcHRpb25hbCwgcmVzdClcbiAgICApLFxuICAgIHNwbGl0OiAoYmFzZTIsIHJlc3QgPSB2b2lkIDApID0+IHtcbiAgICAgIGlmIChwYXNzU3R5bGVPZihoYXJkZW4oYmFzZTIpKSA9PT0gXCJjb3B5QXJyYXlcIikge1xuICAgICAgICByZXR1cm4gTTMuc3BsaXRBcnJheShiYXNlMiwgcmVzdCAmJiBbXSwgcmVzdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gTTMuc3BsaXRSZWNvcmQoYmFzZTIsIHJlc3QgJiYge30sIHJlc3QpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcGFydGlhbDogKGJhc2UyLCByZXN0ID0gdm9pZCAwKSA9PiB7XG4gICAgICBpZiAocGFzc1N0eWxlT2YoaGFyZGVuKGJhc2UyKSkgPT09IFwiY29weUFycmF5XCIpIHtcbiAgICAgICAgcmV0dXJuIE0zLnNwbGl0QXJyYXkoW10sIGJhc2UyLCByZXN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNMy5zcGxpdFJlY29yZCh7fSwgYmFzZTIsIHJlc3QpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXJlZjogKHQ1KSA9PiBNMy5vcih0NSwgTTMucHJvbWlzZSgpKSxcbiAgICBvcHQ6ICh0NSkgPT4gTTMub3IoTTMudW5kZWZpbmVkKCksIHQ1KSxcbiAgICBpbnRlcmZhY2U6IChpbnRlcmZhY2VOYW1lLCBtZXRob2RHdWFyZHMsIG9wdGlvbnMpID0+IChcbiAgICAgIC8vXG4gICAgICBtYWtlSW50ZXJmYWNlR3VhcmQoaW50ZXJmYWNlTmFtZSwgbWV0aG9kR3VhcmRzLCBvcHRpb25zKVxuICAgICksXG4gICAgY2FsbDogKC4uLmFyZ1BhdHRlcm5zKSA9PiAoXG4gICAgICAvL1xuICAgICAgbWFrZU1ldGhvZEd1YXJkTWFrZXIoXCJzeW5jXCIsIGFyZ1BhdHRlcm5zKVxuICAgICksXG4gICAgY2FsbFdoZW46ICguLi5hcmdHdWFyZHMpID0+IChcbiAgICAgIC8vXG4gICAgICBtYWtlTWV0aG9kR3VhcmRNYWtlcihcImFzeW5jXCIsIGFyZ0d1YXJkcylcbiAgICApLFxuICAgIGF3YWl0OiAoYXJnUGF0dGVybikgPT4gKFxuICAgICAgLy9cbiAgICAgIG1ha2VBd2FpdEFyZ0d1YXJkKGFyZ1BhdHRlcm4pXG4gICAgKSxcbiAgICByYXc6ICgpID0+IChcbiAgICAgIC8vXG4gICAgICBtYWtlUmF3R3VhcmQoKVxuICAgIClcbiAgfSk7XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIGNoZWNrTWF0Y2hlczogY2hlY2tNYXRjaGVzMixcbiAgICBtYXRjaGVzOiBtYXRjaGVzMixcbiAgICBtdXN0TWF0Y2g6IG11c3RNYXRjaDQsXG4gICAgYXNzZXJ0UGF0dGVybjogYXNzZXJ0UGF0dGVybjIsXG4gICAgaXNQYXR0ZXJuOiBpc1BhdHRlcm4yLFxuICAgIGdldFJhbmtDb3ZlcjogZ2V0UmFua0NvdmVyMixcbiAgICBNOiBNMyxcbiAgICBraW5kT2Y6IGtpbmRPZjIsXG4gICAgY29udGFpbmVySGFzU3BsaXQ6IGNvbnRhaW5lckhhc1NwbGl0MlxuICB9KTtcbn07XG52YXIge1xuICBjaGVja01hdGNoZXMsXG4gIG1hdGNoZXMsXG4gIG11c3RNYXRjaCxcbiAgYXNzZXJ0UGF0dGVybixcbiAgaXNQYXR0ZXJuLFxuICBnZXRSYW5rQ292ZXIsXG4gIE0sXG4gIGtpbmRPZixcbiAgY29udGFpbmVySGFzU3BsaXRcbn0gPSBtYWtlUGF0dGVybktpdCgpO1xuTU0gPSBNO1xudmFyIEF3YWl0QXJnR3VhcmRQYXlsb2FkU2hhcGUgPSBoYXJkZW4oe1xuICBhcmdHdWFyZDogTS5wYXR0ZXJuKClcbn0pO1xudmFyIEF3YWl0QXJnR3VhcmRTaGFwZSA9IE0ua2luZChcImd1YXJkOmF3YWl0QXJnR3VhcmRcIik7XG52YXIgaXNBd2FpdEFyZ0d1YXJkID0gKHNwZWNpbWVuKSA9PiBtYXRjaGVzKHNwZWNpbWVuLCBBd2FpdEFyZ0d1YXJkU2hhcGUpO1xuaGFyZGVuKGlzQXdhaXRBcmdHdWFyZCk7XG52YXIgYXNzZXJ0QXdhaXRBcmdHdWFyZCA9IChzcGVjaW1lbikgPT4ge1xuICBtdXN0TWF0Y2goc3BlY2ltZW4sIEF3YWl0QXJnR3VhcmRTaGFwZSwgXCJhd2FpdEFyZ0d1YXJkXCIpO1xufTtcbmhhcmRlbihhc3NlcnRBd2FpdEFyZ0d1YXJkKTtcbnZhciBtYWtlQXdhaXRBcmdHdWFyZCA9IChhcmdQYXR0ZXJuKSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IG1ha2VUYWdnZWQoXCJndWFyZDphd2FpdEFyZ0d1YXJkXCIsIHtcbiAgICBhcmdHdWFyZDogYXJnUGF0dGVyblxuICB9KTtcbiAgYXNzZXJ0QXdhaXRBcmdHdWFyZChyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBSYXdHdWFyZFBheWxvYWRTaGFwZSA9IE0ucmVjb3JkKCk7XG52YXIgUmF3R3VhcmRTaGFwZSA9IE0ua2luZChcImd1YXJkOnJhd0d1YXJkXCIpO1xudmFyIGlzUmF3R3VhcmQgPSAoc3BlY2ltZW4pID0+IG1hdGNoZXMoc3BlY2ltZW4sIFJhd0d1YXJkU2hhcGUpO1xudmFyIG1ha2VSYXdHdWFyZCA9ICgpID0+IG1ha2VUYWdnZWQoXCJndWFyZDpyYXdHdWFyZFwiLCB7fSk7XG52YXIgU3luY1ZhbHVlR3VhcmRTaGFwZSA9IE0ub3IoUmF3R3VhcmRTaGFwZSwgTS5wYXR0ZXJuKCkpO1xudmFyIFN5bmNWYWx1ZUd1YXJkTGlzdFNoYXBlID0gTS5hcnJheU9mKFN5bmNWYWx1ZUd1YXJkU2hhcGUpO1xudmFyIEFyZ0d1YXJkU2hhcGUgPSBNLm9yKFJhd0d1YXJkU2hhcGUsIEF3YWl0QXJnR3VhcmRTaGFwZSwgTS5wYXR0ZXJuKCkpO1xudmFyIEFyZ0d1YXJkTGlzdFNoYXBlID0gTS5hcnJheU9mKEFyZ0d1YXJkU2hhcGUpO1xudmFyIFN5bmNNZXRob2RHdWFyZFBheWxvYWRTaGFwZSA9IGhhcmRlbih7XG4gIGNhbGxLaW5kOiBcInN5bmNcIixcbiAgYXJnR3VhcmRzOiBTeW5jVmFsdWVHdWFyZExpc3RTaGFwZSxcbiAgb3B0aW9uYWxBcmdHdWFyZHM6IE0ub3B0KFN5bmNWYWx1ZUd1YXJkTGlzdFNoYXBlKSxcbiAgcmVzdEFyZ0d1YXJkOiBNLm9wdChTeW5jVmFsdWVHdWFyZFNoYXBlKSxcbiAgcmV0dXJuR3VhcmQ6IFN5bmNWYWx1ZUd1YXJkU2hhcGVcbn0pO1xudmFyIEFzeW5jTWV0aG9kR3VhcmRQYXlsb2FkU2hhcGUgPSBoYXJkZW4oe1xuICBjYWxsS2luZDogXCJhc3luY1wiLFxuICBhcmdHdWFyZHM6IEFyZ0d1YXJkTGlzdFNoYXBlLFxuICBvcHRpb25hbEFyZ0d1YXJkczogTS5vcHQoQXJnR3VhcmRMaXN0U2hhcGUpLFxuICByZXN0QXJnR3VhcmQ6IE0ub3B0KFN5bmNWYWx1ZUd1YXJkU2hhcGUpLFxuICByZXR1cm5HdWFyZDogU3luY1ZhbHVlR3VhcmRTaGFwZVxufSk7XG52YXIgTWV0aG9kR3VhcmRQYXlsb2FkU2hhcGUgPSBNLm9yKFxuICBTeW5jTWV0aG9kR3VhcmRQYXlsb2FkU2hhcGUsXG4gIEFzeW5jTWV0aG9kR3VhcmRQYXlsb2FkU2hhcGVcbik7XG52YXIgTWV0aG9kR3VhcmRTaGFwZSA9IE0ua2luZChcImd1YXJkOm1ldGhvZEd1YXJkXCIpO1xudmFyIGFzc2VydE1ldGhvZEd1YXJkID0gKHNwZWNpbWVuKSA9PiB7XG4gIG11c3RNYXRjaChzcGVjaW1lbiwgTWV0aG9kR3VhcmRTaGFwZSwgXCJtZXRob2RHdWFyZFwiKTtcbn07XG5oYXJkZW4oYXNzZXJ0TWV0aG9kR3VhcmQpO1xudmFyIG1ha2VNZXRob2RHdWFyZE1ha2VyID0gKGNhbGxLaW5kLCBhcmdHdWFyZHMsIG9wdGlvbmFsQXJnR3VhcmRzID0gdm9pZCAwLCByZXN0QXJnR3VhcmQgPSB2b2lkIDApID0+IGhhcmRlbih7XG4gIG9wdGlvbmFsOiAoLi4ub3B0QXJnR3VhcmRzKSA9PiB7XG4gICAgb3B0aW9uYWxBcmdHdWFyZHMgPT09IHZvaWQgMCB8fCB0aHJvd1JlZGFjdGVkYENhbiBvbmx5IGhhdmUgb25lIHNldCBvZiBvcHRpb25hbCBndWFyZHNgO1xuICAgIHJlc3RBcmdHdWFyZCA9PT0gdm9pZCAwIHx8IHRocm93UmVkYWN0ZWRgb3B0aW9uYWwgYXJnIGd1YXJkcyBtdXN0IGNvbWUgYmVmb3JlIHJlc3QgYXJnYDtcbiAgICByZXR1cm4gbWFrZU1ldGhvZEd1YXJkTWFrZXIoY2FsbEtpbmQsIGFyZ0d1YXJkcywgb3B0QXJnR3VhcmRzKTtcbiAgfSxcbiAgcmVzdDogKHJBcmdHdWFyZCkgPT4ge1xuICAgIHJlc3RBcmdHdWFyZCA9PT0gdm9pZCAwIHx8IHRocm93UmVkYWN0ZWRgQ2FuIG9ubHkgaGF2ZSBvbmUgcmVzdCBhcmdgO1xuICAgIHJldHVybiBtYWtlTWV0aG9kR3VhcmRNYWtlcihcbiAgICAgIGNhbGxLaW5kLFxuICAgICAgYXJnR3VhcmRzLFxuICAgICAgb3B0aW9uYWxBcmdHdWFyZHMsXG4gICAgICByQXJnR3VhcmRcbiAgICApO1xuICB9LFxuICByZXR1cm5zOiAocmV0dXJuR3VhcmQgPSBNLnVuZGVmaW5lZCgpKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gbWFrZVRhZ2dlZChcImd1YXJkOm1ldGhvZEd1YXJkXCIsIHtcbiAgICAgIGNhbGxLaW5kLFxuICAgICAgYXJnR3VhcmRzLFxuICAgICAgb3B0aW9uYWxBcmdHdWFyZHMsXG4gICAgICByZXN0QXJnR3VhcmQsXG4gICAgICByZXR1cm5HdWFyZFxuICAgIH0pO1xuICAgIGFzc2VydE1ldGhvZEd1YXJkKHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG52YXIgSW50ZXJmYWNlR3VhcmRQYXlsb2FkU2hhcGUgPSBNLnNwbGl0UmVjb3JkKFxuICB7XG4gICAgaW50ZXJmYWNlTmFtZTogTS5zdHJpbmcoKSxcbiAgICBtZXRob2RHdWFyZHM6IE0ucmVjb3JkT2YoTS5zdHJpbmcoKSwgTWV0aG9kR3VhcmRTaGFwZSlcbiAgfSxcbiAge1xuICAgIGRlZmF1bHRHdWFyZHM6IE0ub3IoTS51bmRlZmluZWQoKSwgXCJwYXNzYWJsZVwiLCBcInJhd1wiKSxcbiAgICBzbG9wcHk6IE0uYm9vbGVhbigpLFxuICAgIHN5bWJvbE1ldGhvZEd1YXJkczogTS5tYXBPZihNLnN5bWJvbCgpLCBNZXRob2RHdWFyZFNoYXBlKVxuICB9XG4pO1xudmFyIEludGVyZmFjZUd1YXJkU2hhcGUgPSBNLmtpbmQoXCJndWFyZDppbnRlcmZhY2VHdWFyZFwiKTtcbnZhciBhc3NlcnRJbnRlcmZhY2VHdWFyZCA9IChzcGVjaW1lbikgPT4ge1xuICBtdXN0TWF0Y2goc3BlY2ltZW4sIEludGVyZmFjZUd1YXJkU2hhcGUsIFwiaW50ZXJmYWNlR3VhcmRcIik7XG59O1xuaGFyZGVuKGFzc2VydEludGVyZmFjZUd1YXJkKTtcbnZhciBtYWtlSW50ZXJmYWNlR3VhcmQgPSAoaW50ZXJmYWNlTmFtZSwgbWV0aG9kR3VhcmRzLCBvcHRpb25zID0ge30pID0+IHtcbiAgY29uc3QgeyBzbG9wcHkgPSBmYWxzZSwgZGVmYXVsdEd1YXJkcyA9IHNsb3BweSA/IFwicGFzc2FibGVcIiA6IHZvaWQgMCB9ID0gb3B0aW9ucztcbiAgY29uc3Qgc3RyaW5nTWV0aG9kR3VhcmRzID0ge307XG4gIGNvbnN0IHN5bWJvbE1ldGhvZEd1YXJkc0VudHJpZXMgPSBbXTtcbiAgZm9yIChjb25zdCBrZXkgb2Ygb3duS2V5czE3KG1ldGhvZEd1YXJkcykpIHtcbiAgICBjb25zdCB2YWx1ZSA9IG1ldGhvZEd1YXJkc1tcbiAgICAgIC8qICAgICAgICAgICAgICAgICAqL1xuICAgICAga2V5XG4gICAgXTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gXCJzeW1ib2xcIikge1xuICAgICAgc3ltYm9sTWV0aG9kR3VhcmRzRW50cmllcy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0cmluZ01ldGhvZEd1YXJkc1trZXldID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIGNvbnN0IHJlc3VsdCA9IG1ha2VUYWdnZWQoXCJndWFyZDppbnRlcmZhY2VHdWFyZFwiLCB7XG4gICAgaW50ZXJmYWNlTmFtZSxcbiAgICBtZXRob2RHdWFyZHM6IHN0cmluZ01ldGhvZEd1YXJkcyxcbiAgICAuLi4oc3ltYm9sTWV0aG9kR3VhcmRzRW50cmllcy5sZW5ndGg/IHsgc3ltYm9sTWV0aG9kR3VhcmRzOiBtYWtlQ29weU1hcChzeW1ib2xNZXRob2RHdWFyZHNFbnRyaWVzKSB9IDoge30pLFxuICAgIGRlZmF1bHRHdWFyZHNcbiAgfSk7XG4gIGFzc2VydEludGVyZmFjZUd1YXJkKHJlc3VsdCk7XG4gIHJldHVybiAoXG4gICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICByZXN1bHRcbiAgKTtcbn07XG52YXIgR3VhcmRQYXlsb2FkU2hhcGVzID0gaGFyZGVuKHtcbiAgXCJndWFyZDphd2FpdEFyZ0d1YXJkXCI6IEF3YWl0QXJnR3VhcmRQYXlsb2FkU2hhcGUsXG4gIFwiZ3VhcmQ6cmF3R3VhcmRcIjogUmF3R3VhcmRQYXlsb2FkU2hhcGUsXG4gIFwiZ3VhcmQ6bWV0aG9kR3VhcmRcIjogTWV0aG9kR3VhcmRQYXlsb2FkU2hhcGUsXG4gIFwiZ3VhcmQ6aW50ZXJmYWNlR3VhcmRcIjogSW50ZXJmYWNlR3VhcmRQYXlsb2FkU2hhcGVcbn0pO1xuXG4vL1xudmFyIExlZ2FjeUF3YWl0QXJnR3VhcmRTaGFwZSA9IGhhcmRlbih7XG4gIGtsYXNzOiBcImF3YWl0QXJnXCIsXG4gIGFyZ0d1YXJkOiBNLnBhdHRlcm4oKVxufSk7XG52YXIgZ2V0QXdhaXRBcmdHdWFyZFBheWxvYWQgPSAoYXdhaXRBcmdHdWFyZCkgPT4ge1xuICBpZiAobWF0Y2hlcyhhd2FpdEFyZ0d1YXJkLCBMZWdhY3lBd2FpdEFyZ0d1YXJkU2hhcGUpKSB7XG4gICAgY29uc3QgeyBrbGFzczogXywgLi4ucGF5bG9hZCB9ID0gYXdhaXRBcmdHdWFyZDtcbiAgICByZXR1cm4gcGF5bG9hZDtcbiAgfVxuICBhc3NlcnRBd2FpdEFyZ0d1YXJkKGF3YWl0QXJnR3VhcmQpO1xuICByZXR1cm4gYXdhaXRBcmdHdWFyZC5wYXlsb2FkO1xufTtcbmhhcmRlbihnZXRBd2FpdEFyZ0d1YXJkUGF5bG9hZCk7XG52YXIgTGVnYWN5U3luY01ldGhvZEd1YXJkU2hhcGUgPSBNLnNwbGl0UmVjb3JkKFxuICB7XG4gICAga2xhc3M6IFwibWV0aG9kR3VhcmRcIixcbiAgICBjYWxsS2luZDogXCJzeW5jXCIsXG4gICAgYXJnR3VhcmRzOiBTeW5jVmFsdWVHdWFyZExpc3RTaGFwZSxcbiAgICByZXR1cm5HdWFyZDogU3luY1ZhbHVlR3VhcmRTaGFwZVxuICB9LFxuICB7XG4gICAgb3B0aW9uYWxBcmdHdWFyZHM6IFN5bmNWYWx1ZUd1YXJkTGlzdFNoYXBlLFxuICAgIHJlc3RBcmdHdWFyZDogU3luY1ZhbHVlR3VhcmRTaGFwZVxuICB9XG4pO1xudmFyIExlZ2FjeUFyZ0d1YXJkU2hhcGUgPSBNLm9yKFxuICBSYXdHdWFyZFNoYXBlLFxuICBBd2FpdEFyZ0d1YXJkU2hhcGUsXG4gIExlZ2FjeUF3YWl0QXJnR3VhcmRTaGFwZSxcbiAgTS5wYXR0ZXJuKClcbik7XG52YXIgTGVnYWN5QXJnR3VhcmRMaXN0U2hhcGUgPSBNLmFycmF5T2YoTGVnYWN5QXJnR3VhcmRTaGFwZSk7XG52YXIgTGVnYWN5QXN5bmNNZXRob2RHdWFyZFNoYXBlID0gTS5zcGxpdFJlY29yZChcbiAge1xuICAgIGtsYXNzOiBcIm1ldGhvZEd1YXJkXCIsXG4gICAgY2FsbEtpbmQ6IFwiYXN5bmNcIixcbiAgICBhcmdHdWFyZHM6IExlZ2FjeUFyZ0d1YXJkTGlzdFNoYXBlLFxuICAgIHJldHVybkd1YXJkOiBTeW5jVmFsdWVHdWFyZFNoYXBlXG4gIH0sXG4gIHtcbiAgICBvcHRpb25hbEFyZ0d1YXJkczogQXJnR3VhcmRMaXN0U2hhcGUsXG4gICAgcmVzdEFyZ0d1YXJkOiBTeW5jVmFsdWVHdWFyZFNoYXBlXG4gIH1cbik7XG52YXIgTGVnYWN5TWV0aG9kR3VhcmRTaGFwZSA9IE0ub3IoXG4gIExlZ2FjeVN5bmNNZXRob2RHdWFyZFNoYXBlLFxuICBMZWdhY3lBc3luY01ldGhvZEd1YXJkU2hhcGVcbik7XG52YXIgYWRhcHRMZWdhY3lBcmdHdWFyZCA9IChhcmdHdWFyZCkgPT4gbWF0Y2hlcyhhcmdHdWFyZCwgTGVnYWN5QXdhaXRBcmdHdWFyZFNoYXBlKSA/IE0uYXdhaXQoZ2V0QXdhaXRBcmdHdWFyZFBheWxvYWQoYXJnR3VhcmQpLmFyZ0d1YXJkKSA6IGFyZ0d1YXJkO1xudmFyIGdldE1ldGhvZEd1YXJkUGF5bG9hZCA9IChtZXRob2RHdWFyZCkgPT4ge1xuICBpZiAobWF0Y2hlcyhtZXRob2RHdWFyZCwgTWV0aG9kR3VhcmRTaGFwZSkpIHtcbiAgICByZXR1cm4gbWV0aG9kR3VhcmQucGF5bG9hZDtcbiAgfVxuICBtdXN0TWF0Y2gobWV0aG9kR3VhcmQsIExlZ2FjeU1ldGhvZEd1YXJkU2hhcGUsIFwibGVnYWN5TWV0aG9kR3VhcmRcIik7XG4gIGNvbnN0IHtcbiAgICAvL1xuICAgIGtsYXNzOiBfLFxuICAgIC8vXG4gICAgY2FsbEtpbmQsXG4gICAgLy9cbiAgICByZXR1cm5HdWFyZCxcbiAgICAvL1xuICAgIHJlc3RBcmdHdWFyZFxuICB9ID0gbWV0aG9kR3VhcmQ7XG4gIGxldCB7XG4gICAgLy9cbiAgICBhcmdHdWFyZHMsXG4gICAgLy9cbiAgICBvcHRpb25hbEFyZ0d1YXJkc1xuICB9ID0gbWV0aG9kR3VhcmQ7XG4gIGlmIChjYWxsS2luZCA9PT0gXCJhc3luY1wiKSB7XG4gICAgYXJnR3VhcmRzID0gYXJnR3VhcmRzLm1hcChhZGFwdExlZ2FjeUFyZ0d1YXJkKTtcbiAgICBvcHRpb25hbEFyZ0d1YXJkcyA9IG9wdGlvbmFsQXJnR3VhcmRzICYmIG9wdGlvbmFsQXJnR3VhcmRzLm1hcChhZGFwdExlZ2FjeUFyZ0d1YXJkKTtcbiAgfVxuICBjb25zdCBwYXlsb2FkID0gaGFyZGVuKHtcbiAgICBjYWxsS2luZCxcbiAgICBhcmdHdWFyZHMsXG4gICAgb3B0aW9uYWxBcmdHdWFyZHMsXG4gICAgcmVzdEFyZ0d1YXJkLFxuICAgIHJldHVybkd1YXJkXG4gIH0pO1xuICBtdXN0TWF0Y2gocGF5bG9hZCwgTWV0aG9kR3VhcmRQYXlsb2FkU2hhcGUsIFwiaW50ZXJuYWxNZXRob2RHdWFyZEFkYXB0b3JcIik7XG4gIHJldHVybiBwYXlsb2FkO1xufTtcbmhhcmRlbihnZXRNZXRob2RHdWFyZFBheWxvYWQpO1xudmFyIExlZ2FjeUludGVyZmFjZUd1YXJkU2hhcGUgPSBNLnNwbGl0UmVjb3JkKFxuICB7XG4gICAga2xhc3M6IFwiSW50ZXJmYWNlXCIsXG4gICAgaW50ZXJmYWNlTmFtZTogTS5zdHJpbmcoKSxcbiAgICBtZXRob2RHdWFyZHM6IE0ucmVjb3JkT2YoXG4gICAgICBNLnN0cmluZygpLFxuICAgICAgTS5vcihNZXRob2RHdWFyZFNoYXBlLCBMZWdhY3lNZXRob2RHdWFyZFNoYXBlKVxuICAgIClcbiAgfSxcbiAge1xuICAgIGRlZmF1bHRHdWFyZHM6IE0ub3IoTS51bmRlZmluZWQoKSwgXCJwYXNzYWJsZVwiLCBcInJhd1wiKSxcbiAgICBzbG9wcHk6IE0uYm9vbGVhbigpLFxuICAgIC8vXG4gICAgLy9cbiAgICAvL1xuICAgIHN5bWJvbE1ldGhvZEd1YXJkczogTS5tYXBPZihNLnN5bWJvbCgpLCBNZXRob2RHdWFyZFNoYXBlKVxuICB9XG4pO1xudmFyIGFkYXB0TWV0aG9kR3VhcmQgPSAobWV0aG9kR3VhcmQpID0+IHtcbiAgaWYgKG1hdGNoZXMobWV0aG9kR3VhcmQsIExlZ2FjeU1ldGhvZEd1YXJkU2hhcGUpKSB7XG4gICAgY29uc3Qge1xuICAgICAgY2FsbEtpbmQsXG4gICAgICBhcmdHdWFyZHMsXG4gICAgICBvcHRpb25hbEFyZ0d1YXJkcyA9IFtdLFxuICAgICAgcmVzdEFyZ0d1YXJkID0gTS5hbnkoKSxcbiAgICAgIHJldHVybkd1YXJkXG4gICAgfSA9IGdldE1ldGhvZEd1YXJkUGF5bG9hZChtZXRob2RHdWFyZCk7XG4gICAgY29uc3QgbUNhbGwgPSBjYWxsS2luZCA9PT0gXCJzeW5jXCIgPyBNLmNhbGwgOiBNLmNhbGxXaGVuO1xuICAgIHJldHVybiBtQ2FsbCguLi5hcmdHdWFyZHMpLm9wdGlvbmFsKC4uLm9wdGlvbmFsQXJnR3VhcmRzKS5yZXN0KHJlc3RBcmdHdWFyZCkucmV0dXJucyhyZXR1cm5HdWFyZCk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZEd1YXJkO1xufTtcbnZhciBnZXRJbnRlcmZhY2VHdWFyZFBheWxvYWQgPSAoaW50ZXJmYWNlR3VhcmQpID0+IHtcbiAgaWYgKG1hdGNoZXMoaW50ZXJmYWNlR3VhcmQsIEludGVyZmFjZUd1YXJkU2hhcGUpKSB7XG4gICAgcmV0dXJuIGludGVyZmFjZUd1YXJkLnBheWxvYWQ7XG4gIH1cbiAgbXVzdE1hdGNoKGludGVyZmFjZUd1YXJkLCBMZWdhY3lJbnRlcmZhY2VHdWFyZFNoYXBlLCBcImxlZ2FjeUludGVyZmFjZUd1YXJkXCIpO1xuICBsZXQgeyBrbGFzczogXywgaW50ZXJmYWNlTmFtZSwgbWV0aG9kR3VhcmRzLCAuLi5yZXN0IH0gPSBpbnRlcmZhY2VHdWFyZDtcbiAgbWV0aG9kR3VhcmRzID0gb2JqZWN0TWFwKG1ldGhvZEd1YXJkcywgYWRhcHRNZXRob2RHdWFyZCk7XG4gIGNvbnN0IHBheWxvYWQgPSBoYXJkZW4oe1xuICAgIGludGVyZmFjZU5hbWUsXG4gICAgbWV0aG9kR3VhcmRzLFxuICAgIC4uLnJlc3RcbiAgfSk7XG4gIG11c3RNYXRjaChcbiAgICBwYXlsb2FkLFxuICAgIEludGVyZmFjZUd1YXJkUGF5bG9hZFNoYXBlLFxuICAgIFwiaW50ZXJuYWxJbnRlcmZhY2VHdWFyZEFkYXB0b3JcIlxuICApO1xuICByZXR1cm4gcGF5bG9hZDtcbn07XG5oYXJkZW4oZ2V0SW50ZXJmYWNlR3VhcmRQYXlsb2FkKTtcbnZhciBlbXB0eUNvcHlNYXAgPSBtYWtlQ29weU1hcChbXSk7XG52YXIgZ2V0SW50ZXJmYWNlTWV0aG9kS2V5cyA9IChpbnRlcmZhY2VHdWFyZCkgPT4ge1xuICBjb25zdCB7IG1ldGhvZEd1YXJkcywgc3ltYm9sTWV0aG9kR3VhcmRzID0gZW1wdHlDb3B5TWFwIH0gPSBnZXRJbnRlcmZhY2VHdWFyZFBheWxvYWQoaW50ZXJmYWNlR3VhcmQpO1xuICByZXR1cm4gaGFyZGVuKFtcbiAgICAuLi5SZWZsZWN0Lm93bktleXMobWV0aG9kR3VhcmRzKSxcbiAgICAuLi5nZXRDb3B5TWFwS2V5cyhzeW1ib2xNZXRob2RHdWFyZHMpXG4gIF0pO1xufTtcbmhhcmRlbihnZXRJbnRlcmZhY2VNZXRob2RLZXlzKTtcblxuLy9cbnZhciBHRVRfSU5URVJGQUNFX0dVQVJEID0gXCJfX2dldEludGVyZmFjZUd1YXJkX19cIjtcblxuLy9cbnZhciB7IGFwcGx5OiBhcHBseTQsIG93bktleXM6IG93bktleXMxOCB9ID0gUmVmbGVjdDtcbnZhciB7IGRlZmluZVByb3BlcnRpZXM6IGRlZmluZVByb3BlcnRpZXMzLCBmcm9tRW50cmllczogZnJvbUVudHJpZXM4IH0gPSBPYmplY3Q7XG52YXIgUmF3TWV0aG9kR3VhcmQgPSBNLmNhbGwoKS5yZXN0KE0ucmF3KCkpLnJldHVybnMoTS5yYXcoKSk7XG52YXIgUkVEQUNURURfUkFXX0FSRyA9IFwiPHJlZGFjdGVkIHJhdyBhcmc+XCI7XG52YXIgUGFzc2FibGVNZXRob2RHdWFyZCA9IE0uY2FsbCgpLnJlc3QoTS5hbnkoKSkucmV0dXJucyhNLmFueSgpKTtcbnZhciBkZWZlbmRTeW5jQXJncyA9IChzeW5jQXJncywgbWF0Y2hDb25maWcsIGxhYmVsID0gdm9pZCAwKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBkZWNsYXJlZExlbixcbiAgICBoYXNSZXN0QXJnR3VhcmQsXG4gICAgcmVzdEFyZ0d1YXJkSXNSYXcsXG4gICAgcGFyYW1zUGF0dGVybixcbiAgICByZWRhY3RlZEluZGljZXNcbiAgfSA9IG1hdGNoQ29uZmlnO1xuICBsZXQgbWF0Y2hhYmxlQXJncyA9IHN5bmNBcmdzO1xuICBpZiAocmVzdEFyZ0d1YXJkSXNSYXcgJiYgc3luY0FyZ3MubGVuZ3RoID4gZGVjbGFyZWRMZW4pIHtcbiAgICBjb25zdCByZXN0TGVuID0gc3luY0FyZ3MubGVuZ3RoIC0gZGVjbGFyZWRMZW47XG4gICAgY29uc3QgcmVkYWN0ZWRSZXN0ID0gQXJyYXkocmVzdExlbikuZmlsbChSRURBQ1RFRF9SQVdfQVJHKTtcbiAgICBtYXRjaGFibGVBcmdzID0gWy4uLnN5bmNBcmdzLnNsaWNlKDAsIGRlY2xhcmVkTGVuKSwgLi4ucmVkYWN0ZWRSZXN0XTtcbiAgfSBlbHNlIGlmIChyZWRhY3RlZEluZGljZXMubGVuZ3RoID4gMCAmJiByZWRhY3RlZEluZGljZXNbMF0gPCBzeW5jQXJncy5sZW5ndGgpIHtcbiAgICBtYXRjaGFibGVBcmdzID0gWy4uLnN5bmNBcmdzXTtcbiAgfVxuICBmb3IgKGNvbnN0IGkzIG9mIHJlZGFjdGVkSW5kaWNlcykge1xuICAgIGlmIChpMyA+PSBtYXRjaGFibGVBcmdzLmxlbmd0aCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIG1hdGNoYWJsZUFyZ3NbaTNdID0gUkVEQUNURURfUkFXX0FSRztcbiAgfVxuICBtdXN0TWF0Y2goaGFyZGVuKG1hdGNoYWJsZUFyZ3MpLCBwYXJhbXNQYXR0ZXJuLCBsYWJlbCk7XG4gIGlmIChoYXNSZXN0QXJnR3VhcmQpIHtcbiAgICByZXR1cm4gc3luY0FyZ3M7XG4gIH1cbiAgc3luY0FyZ3MubGVuZ3RoIDw9IGRlY2xhcmVkTGVuIHx8IHRocm93UmVkYWN0ZWRgJHtxdW90ZShsYWJlbCl9IGFjY2VwdHMgYXQgbW9zdCAke3F1b3RlKGRlY2xhcmVkTGVuKX0gYXJndW1lbnRzLCBub3QgJHtxdW90ZShcbiAgICBzeW5jQXJncy5sZW5ndGhcbiAgKX06ICR7c3luY0FyZ3N9YDtcbiAgcmV0dXJuIHN5bmNBcmdzO1xufTtcbnZhciBidWlsZE1hdGNoQ29uZmlnID0gKG1ldGhvZEd1YXJkUGF5bG9hZCkgPT4ge1xuICBjb25zdCB7XG4gICAgYXJnR3VhcmRzLFxuICAgIG9wdGlvbmFsQXJnR3VhcmRzID0gW10sXG4gICAgcmVzdEFyZ0d1YXJkXG4gIH0gPSBtZXRob2RHdWFyZFBheWxvYWQ7XG4gIGNvbnN0IG1hdGNoYWJsZUFyZ0d1YXJkcyA9IFsuLi5hcmdHdWFyZHMsIC4uLm9wdGlvbmFsQXJnR3VhcmRzXTtcbiAgY29uc3QgcmVkYWN0ZWRJbmRpY2VzID0gW107XG4gIGZvciAobGV0IGkzID0gMDsgaTMgPCBtYXRjaGFibGVBcmdHdWFyZHMubGVuZ3RoOyBpMyArPSAxKSB7XG4gICAgaWYgKGlzUmF3R3VhcmQobWF0Y2hhYmxlQXJnR3VhcmRzW2kzXSkpIHtcbiAgICAgIG1hdGNoYWJsZUFyZ0d1YXJkc1tpM10gPSBSRURBQ1RFRF9SQVdfQVJHO1xuICAgICAgcmVkYWN0ZWRJbmRpY2VzLnB1c2goaTMpO1xuICAgIH1cbiAgfVxuICBsZXQgbWF0Y2hhYmxlUmVzdEFyZ0d1YXJkID0gcmVzdEFyZ0d1YXJkO1xuICBpZiAoaXNSYXdHdWFyZChtYXRjaGFibGVSZXN0QXJnR3VhcmQpKSB7XG4gICAgbWF0Y2hhYmxlUmVzdEFyZ0d1YXJkID0gTS5hcnJheU9mKFJFREFDVEVEX1JBV19BUkcpO1xuICB9XG4gIGNvbnN0IG1hdGNoYWJsZU1ldGhvZEd1YXJkUGF5bG9hZCA9IGhhcmRlbih7XG4gICAgLi4ubWV0aG9kR3VhcmRQYXlsb2FkLFxuICAgIGFyZ0d1YXJkczogbWF0Y2hhYmxlQXJnR3VhcmRzLnNsaWNlKDAsIGFyZ0d1YXJkcy5sZW5ndGgpLFxuICAgIG9wdGlvbmFsQXJnR3VhcmRzOiBtYXRjaGFibGVBcmdHdWFyZHMuc2xpY2UoYXJnR3VhcmRzLmxlbmd0aCksXG4gICAgcmVzdEFyZ0d1YXJkOiBtYXRjaGFibGVSZXN0QXJnR3VhcmRcbiAgfSk7XG4gIGNvbnN0IHBhcmFtc1BhdHRlcm4gPSBNLnNwbGl0QXJyYXkoXG4gICAgbWF0Y2hhYmxlTWV0aG9kR3VhcmRQYXlsb2FkLmFyZ0d1YXJkcyxcbiAgICBtYXRjaGFibGVNZXRob2RHdWFyZFBheWxvYWQub3B0aW9uYWxBcmdHdWFyZHMsXG4gICAgbWF0Y2hhYmxlTWV0aG9kR3VhcmRQYXlsb2FkLnJlc3RBcmdHdWFyZFxuICApO1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICBkZWNsYXJlZExlbjogbWF0Y2hhYmxlQXJnR3VhcmRzLmxlbmd0aCxcbiAgICBoYXNSZXN0QXJnR3VhcmQ6IHJlc3RBcmdHdWFyZCAhPT0gdm9pZCAwLFxuICAgIHJlc3RBcmdHdWFyZElzUmF3OiByZXN0QXJnR3VhcmQgIT09IG1hdGNoYWJsZVJlc3RBcmdHdWFyZCxcbiAgICBwYXJhbXNQYXR0ZXJuLFxuICAgIHJlZGFjdGVkSW5kaWNlcyxcbiAgICBtYXRjaGFibGVNZXRob2RHdWFyZFBheWxvYWRcbiAgfSk7XG59O1xudmFyIGRlZmVuZFN5bmNNZXRob2QgPSAoZ2V0Q29udGV4dCwgYmVoYXZpb3JNZXRob2QsIG1ldGhvZEd1YXJkUGF5bG9hZCwgbGFiZWwpID0+IHtcbiAgY29uc3QgeyByZXR1cm5HdWFyZCB9ID0gbWV0aG9kR3VhcmRQYXlsb2FkO1xuICBjb25zdCBpc1Jhd1JldHVybiA9IGlzUmF3R3VhcmQocmV0dXJuR3VhcmQpO1xuICBjb25zdCBtYXRjaENvbmZpZyA9IGJ1aWxkTWF0Y2hDb25maWcobWV0aG9kR3VhcmRQYXlsb2FkKTtcbiAgY29uc3QgeyBzeW5jTWV0aG9kIH0gPSB7XG4gICAgLy9cbiAgICBzeW5jTWV0aG9kKC4uLnN5bmNBcmdzKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gZ2V0Q29udGV4dCh0aGlzKTtcbiAgICAgICAgY29uc3QgcmVhbEFyZ3MgPSBkZWZlbmRTeW5jQXJncyhzeW5jQXJncywgbWF0Y2hDb25maWcsIGxhYmVsKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXBwbHk0KGJlaGF2aW9yTWV0aG9kLCBjb250ZXh0LCByZWFsQXJncyk7XG4gICAgICAgIGlmICghaXNSYXdSZXR1cm4pIHtcbiAgICAgICAgICBtdXN0TWF0Y2goaGFyZGVuKHJlc3VsdCksIHJldHVybkd1YXJkLCBgJHtsYWJlbH06IHJlc3VsdGApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9IGNhdGNoICh0aHJvd25UaGluZykge1xuICAgICAgICB0aHJvdyB0b1Rocm93YWJsZSh0aHJvd25UaGluZyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gc3luY01ldGhvZDtcbn07XG52YXIgZGVzeW5jID0gKG1ldGhvZEd1YXJkUGF5bG9hZCkgPT4ge1xuICBjb25zdCB7XG4gICAgYXJnR3VhcmRzLFxuICAgIG9wdGlvbmFsQXJnR3VhcmRzID0gW10sXG4gICAgcmVzdEFyZ0d1YXJkXG4gIH0gPSBtZXRob2RHdWFyZFBheWxvYWQ7XG4gICFpc0F3YWl0QXJnR3VhcmQocmVzdEFyZ0d1YXJkKSB8fCB0aHJvd1JlZGFjdGVkYFJlc3QgYXJncyBtYXkgbm90IGJlIGF3YWl0ZWQ6ICR7cmVzdEFyZ0d1YXJkfWA7XG4gIGNvbnN0IHJhd0FyZ0d1YXJkcyA9IFsuLi5hcmdHdWFyZHMsIC4uLm9wdGlvbmFsQXJnR3VhcmRzXTtcbiAgY29uc3QgYXdhaXRJbmRleGVzID0gW107XG4gIGZvciAobGV0IGkzID0gMDsgaTMgPCByYXdBcmdHdWFyZHMubGVuZ3RoOyBpMyArPSAxKSB7XG4gICAgY29uc3QgYXJnR3VhcmQgPSByYXdBcmdHdWFyZHNbaTNdO1xuICAgIGlmIChpc0F3YWl0QXJnR3VhcmQoYXJnR3VhcmQpKSB7XG4gICAgICByYXdBcmdHdWFyZHNbaTNdID0gZ2V0QXdhaXRBcmdHdWFyZFBheWxvYWQoYXJnR3VhcmQpLmFyZ0d1YXJkO1xuICAgICAgYXdhaXRJbmRleGVzLnB1c2goaTMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIGF3YWl0SW5kZXhlcyxcbiAgICByYXdNZXRob2RHdWFyZFBheWxvYWQ6IHtcbiAgICAgIC4uLm1ldGhvZEd1YXJkUGF5bG9hZCxcbiAgICAgIGFyZ0d1YXJkczogcmF3QXJnR3VhcmRzLnNsaWNlKDAsIGFyZ0d1YXJkcy5sZW5ndGgpLFxuICAgICAgb3B0aW9uYWxBcmdHdWFyZHM6IHJhd0FyZ0d1YXJkcy5zbGljZShhcmdHdWFyZHMubGVuZ3RoKVxuICAgIH1cbiAgfTtcbn07XG52YXIgZGVmZW5kQXN5bmNNZXRob2QgPSAoZ2V0Q29udGV4dCwgYmVoYXZpb3JNZXRob2QsIG1ldGhvZEd1YXJkUGF5bG9hZCwgbGFiZWwpID0+IHtcbiAgY29uc3QgeyByZXR1cm5HdWFyZCB9ID0gbWV0aG9kR3VhcmRQYXlsb2FkO1xuICBjb25zdCBpc1Jhd1JldHVybiA9IGlzUmF3R3VhcmQocmV0dXJuR3VhcmQpO1xuICBjb25zdCB7IGF3YWl0SW5kZXhlcywgcmF3TWV0aG9kR3VhcmRQYXlsb2FkIH0gPSBkZXN5bmMobWV0aG9kR3VhcmRQYXlsb2FkKTtcbiAgY29uc3QgbWF0Y2hDb25maWcgPSBidWlsZE1hdGNoQ29uZmlnKHJhd01ldGhvZEd1YXJkUGF5bG9hZCk7XG4gIGNvbnN0IHsgYXN5bmNNZXRob2QgfSA9IHtcbiAgICAvL1xuICAgIGFzeW5jTWV0aG9kKC4uLmFyZ3MpIHtcbiAgICAgIGNvbnN0IGF3YWl0TGlzdCA9IFtdO1xuICAgICAgZm9yIChjb25zdCBpMyBvZiBhd2FpdEluZGV4ZXMpIHtcbiAgICAgICAgaWYgKGkzID49IGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXRMaXN0LnB1c2goYXJnc1tpM10pO1xuICAgICAgfVxuICAgICAgY29uc3QgcDQgPSBQcm9taXNlLmFsbChhd2FpdExpc3QpO1xuICAgICAgY29uc3Qgc3luY0FyZ3MgPSBbLi4uYXJnc107XG4gICAgICBjb25zdCByZXN1bHRQID0gRS53aGVuKFxuICAgICAgICBwNCxcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIChhd2FpdGVkQXJncykgPT4ge1xuICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYXdhaXRlZEFyZ3MubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgIHN5bmNBcmdzW2F3YWl0SW5kZXhlc1tqXV0gPSBhd2FpdGVkQXJnc1tqXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgY29udGV4dCA9IGdldENvbnRleHQodGhpcyk7XG4gICAgICAgICAgY29uc3QgcmVhbEFyZ3MgPSBkZWZlbmRTeW5jQXJncyhzeW5jQXJncywgbWF0Y2hDb25maWcsIGxhYmVsKTtcbiAgICAgICAgICByZXR1cm4gYXBwbHk0KGJlaGF2aW9yTWV0aG9kLCBjb250ZXh0LCByZWFsQXJncyk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICByZXR1cm4gRS53aGVuKHJlc3VsdFAsIChmdWxmaWxsbWVudCkgPT4ge1xuICAgICAgICBpZiAoIWlzUmF3UmV0dXJuKSB7XG4gICAgICAgICAgbXVzdE1hdGNoKGhhcmRlbihmdWxmaWxsbWVudCksIHJldHVybkd1YXJkLCBgJHtsYWJlbH06IHJlc3VsdGApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdWxmaWxsbWVudDtcbiAgICAgIH0pLmNhdGNoKFxuICAgICAgICAocmVhc29uKSA9PiAoXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvL1xuICAgICAgICAgIFByb21pc2UucmVqZWN0KHRvVGhyb3dhYmxlKHJlYXNvbikpXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gYXN5bmNNZXRob2Q7XG59O1xudmFyIGRlZmVuZE1ldGhvZCA9IChnZXRDb250ZXh0LCBiZWhhdmlvck1ldGhvZCwgbWV0aG9kR3VhcmQsIGxhYmVsKSA9PiB7XG4gIGNvbnN0IG1ldGhvZEd1YXJkUGF5bG9hZCA9IGdldE1ldGhvZEd1YXJkUGF5bG9hZChtZXRob2RHdWFyZCk7XG4gIGNvbnN0IHsgY2FsbEtpbmQgfSA9IG1ldGhvZEd1YXJkUGF5bG9hZDtcbiAgaWYgKGNhbGxLaW5kID09PSBcInN5bmNcIikge1xuICAgIHJldHVybiBkZWZlbmRTeW5jTWV0aG9kKFxuICAgICAgZ2V0Q29udGV4dCxcbiAgICAgIGJlaGF2aW9yTWV0aG9kLFxuICAgICAgbWV0aG9kR3VhcmRQYXlsb2FkLFxuICAgICAgbGFiZWxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGFzc2VydChjYWxsS2luZCA9PT0gXCJhc3luY1wiKTtcbiAgICByZXR1cm4gZGVmZW5kQXN5bmNNZXRob2QoXG4gICAgICBnZXRDb250ZXh0LFxuICAgICAgYmVoYXZpb3JNZXRob2QsXG4gICAgICBtZXRob2RHdWFyZFBheWxvYWQsXG4gICAgICBsYWJlbFxuICAgICk7XG4gIH1cbn07XG52YXIgYmluZE1ldGhvZCA9IChtZXRob2RUYWcsIGNvbnRleHRQcm92aWRlciwgYmVoYXZpb3JNZXRob2QsIG1ldGhvZEd1YXJkKSA9PiB7XG4gIGFzc2VydC50eXBlb2YoYmVoYXZpb3JNZXRob2QsIFwiZnVuY3Rpb25cIik7XG4gIGNvbnN0IGdldENvbnRleHQgPSAocmVwcmVzZW50YXRpdmUpID0+IHtcbiAgICByZXByZXNlbnRhdGl2ZSB8fCAvL1xuICAgIHRocm93UmVkYWN0ZWRgTWV0aG9kICR7bWV0aG9kVGFnfSBjYWxsZWQgd2l0aG91dCAndGhpcycgb2JqZWN0YDtcbiAgICBjb25zdCBjb250ZXh0ID0gY29udGV4dFByb3ZpZGVyKHJlcHJlc2VudGF0aXZlKTtcbiAgICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYCR7cXVvdGUoXG4gICAgICAgIG1ldGhvZFRhZ1xuICAgICAgKX0gbWF5IG9ubHkgYmUgYXBwbGllZCB0byBhIHZhbGlkIGluc3RhbmNlOiAke3JlcHJlc2VudGF0aXZlfWA7XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0O1xuICB9O1xuICBjb25zdCBtZXRob2QgPSBkZWZlbmRNZXRob2QoXG4gICAgZ2V0Q29udGV4dCxcbiAgICBiZWhhdmlvck1ldGhvZCxcbiAgICBtZXRob2RHdWFyZCxcbiAgICBtZXRob2RUYWdcbiAgKTtcbiAgZGVmaW5lUHJvcGVydGllczMobWV0aG9kLCB7XG4gICAgbmFtZTogeyB2YWx1ZTogbWV0aG9kVGFnIH0sXG4gICAgbGVuZ3RoOiB7IHZhbHVlOiBiZWhhdmlvck1ldGhvZC5sZW5ndGggfVxuICB9KTtcbiAgcmV0dXJuIG1ldGhvZDtcbn07XG52YXIgZGVmZW5kUHJvdG90eXBlID0gKHRhZywgY29udGV4dFByb3ZpZGVyLCBiZWhhdmlvck1ldGhvZHMsIHRoaXNmdWxNZXRob2RzID0gZmFsc2UsIGludGVyZmFjZUd1YXJkID0gdm9pZCAwKSA9PiB7XG4gIGNvbnN0IHByb3RvdHlwZSA9IHt9O1xuICBjb25zdCBtZXRob2ROYW1lcyA9IGdldE1ldGhvZE5hbWVzKGJlaGF2aW9yTWV0aG9kcykuZmlsdGVyKFxuICAgIC8vXG4gICAgLy9cbiAgICAoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5ICE9PSBcImNvbnN0cnVjdG9yXCIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBjb25zdCBjb25zdHJ1Y3RvciA9IGJlaGF2aW9yTWV0aG9kcy5jb25zdHJ1Y3RvcjtcbiAgICAgIHJldHVybiAhKGNvbnN0cnVjdG9yLnByb3RvdHlwZSAmJiBjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPT09IGNvbnN0cnVjdG9yKTtcbiAgICB9XG4gICk7XG4gIGxldCBtZXRob2RHdWFyZHM7XG4gIGxldCBkZWZhdWx0R3VhcmRzO1xuICBpZiAoaW50ZXJmYWNlR3VhcmQpIHtcbiAgICBjb25zdCB7XG4gICAgICBpbnRlcmZhY2VOYW1lLFxuICAgICAgbWV0aG9kR3VhcmRzOiBtZyxcbiAgICAgIHN5bWJvbE1ldGhvZEd1YXJkcyxcbiAgICAgIHNsb3BweSxcbiAgICAgIGRlZmF1bHRHdWFyZHM6IGRnID0gc2xvcHB5ID8gXCJwYXNzYWJsZVwiIDogZGVmYXVsdEd1YXJkc1xuICAgIH0gPSBnZXRJbnRlcmZhY2VHdWFyZFBheWxvYWQoaW50ZXJmYWNlR3VhcmQpO1xuICAgIG1ldGhvZEd1YXJkcyA9IGhhcmRlbih7XG4gICAgICAuLi5tZyxcbiAgICAgIC4uLihzeW1ib2xNZXRob2RHdWFyZHMmJiBmcm9tRW50cmllczgoZ2V0Q29weU1hcEVudHJpZXMoc3ltYm9sTWV0aG9kR3VhcmRzKSkpXG4gICAgfSk7XG4gICAgZGVmYXVsdEd1YXJkcyA9IGRnO1xuICAgIHtcbiAgICAgIGNvbnN0IG1ldGhvZEd1YXJkTmFtZXMgPSBvd25LZXlzMTgobWV0aG9kR3VhcmRzKTtcbiAgICAgIGNvbnN0IHVuaW1wbGVtZW50ZWQgPSBsaXN0RGlmZmVyZW5jZShtZXRob2RHdWFyZE5hbWVzLCBtZXRob2ROYW1lcyk7XG4gICAgICB1bmltcGxlbWVudGVkLmxlbmd0aCA9PT0gMCB8fCB0aHJvd1JlZGFjdGVkYG1ldGhvZHMgJHtxdW90ZSh1bmltcGxlbWVudGVkKX0gbm90IGltcGxlbWVudGVkIGJ5ICR7cXVvdGUodGFnKX1gO1xuICAgICAgaWYgKGRlZmF1bHRHdWFyZHMgPT09IHZvaWQgMCkge1xuICAgICAgICBjb25zdCB1bmd1YXJkZWQgPSBsaXN0RGlmZmVyZW5jZShtZXRob2ROYW1lcywgbWV0aG9kR3VhcmROYW1lcyk7XG4gICAgICAgIHVuZ3VhcmRlZC5sZW5ndGggPT09IDAgfHwgdGhyb3dSZWRhY3RlZGBtZXRob2RzICR7cXVvdGUodW5ndWFyZGVkKX0gbm90IGd1YXJkZWQgYnkgJHtxdW90ZShpbnRlcmZhY2VOYW1lKX1gO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmb3IgKGNvbnN0IHByb3Agb2YgbWV0aG9kTmFtZXMpIHtcbiAgICBjb25zdCBvcmlnaW5hbE1ldGhvZCA9IGJlaGF2aW9yTWV0aG9kc1twcm9wXTtcbiAgICBjb25zdCB7IHNoaWZ0ZWRNZXRob2QgfSA9IHtcbiAgICAgIHNoaWZ0ZWRNZXRob2QoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWxNZXRob2QodGhpcywgLi4uYXJncyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBiZWhhdmlvck1ldGhvZCA9IHRoaXNmdWxNZXRob2RzID8gb3JpZ2luYWxNZXRob2QgOiBzaGlmdGVkTWV0aG9kO1xuICAgIGxldCBtZXRob2RHdWFyZCA9IG1ldGhvZEd1YXJkcyAmJiBtZXRob2RHdWFyZHNbcHJvcF07XG4gICAgaWYgKCFtZXRob2RHdWFyZCkge1xuICAgICAgc3dpdGNoIChkZWZhdWx0R3VhcmRzKSB7XG4gICAgICAgIGNhc2Ugdm9pZCAwOiB7XG4gICAgICAgICAgaWYgKHRoaXNmdWxNZXRob2RzKSB7XG4gICAgICAgICAgICBtZXRob2RHdWFyZCA9IFBhc3NhYmxlTWV0aG9kR3VhcmQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1ldGhvZEd1YXJkID0gUmF3TWV0aG9kR3VhcmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJwYXNzYWJsZVwiOiB7XG4gICAgICAgICAgbWV0aG9kR3VhcmQgPSBQYXNzYWJsZU1ldGhvZEd1YXJkO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJyYXdcIjoge1xuICAgICAgICAgIG1ldGhvZEd1YXJkID0gUmF3TWV0aG9kR3VhcmQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgVW5yZWNvZ25pemVkIGRlZmF1bHRHdWFyZHMgJHtxdW90ZShkZWZhdWx0R3VhcmRzKX1gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHByb3RvdHlwZVtwcm9wXSA9IGJpbmRNZXRob2QoXG4gICAgICBgSW4gJHtxdW90ZShwcm9wKX0gbWV0aG9kIG9mICgke3RhZ30pYCxcbiAgICAgIGNvbnRleHRQcm92aWRlcixcbiAgICAgIGJlaGF2aW9yTWV0aG9kLFxuICAgICAgbWV0aG9kR3VhcmRcbiAgICApO1xuICB9XG4gIGlmICghaGFzT3duUHJvcGVydHlPZihwcm90b3R5cGUsIEdFVF9JTlRFUkZBQ0VfR1VBUkQpKSB7XG4gICAgY29uc3QgZ2V0SW50ZXJmYWNlR3VhcmRNZXRob2QgPSB7XG4gICAgICBbR0VUX0lOVEVSRkFDRV9HVUFSRF0oKSB7XG4gICAgICAgIHJldHVybiBpbnRlcmZhY2VHdWFyZDtcbiAgICAgIH1cbiAgICB9W0dFVF9JTlRFUkZBQ0VfR1VBUkRdO1xuICAgIHByb3RvdHlwZVtHRVRfSU5URVJGQUNFX0dVQVJEXSA9IGJpbmRNZXRob2QoXG4gICAgICBgSW4gJHtxdW90ZShHRVRfSU5URVJGQUNFX0dVQVJEKX0gbWV0aG9kIG9mICgke3RhZ30pYCxcbiAgICAgIGNvbnRleHRQcm92aWRlcixcbiAgICAgIGdldEludGVyZmFjZUd1YXJkTWV0aG9kLFxuICAgICAgUGFzc2FibGVNZXRob2RHdWFyZFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIEZhcihcbiAgICB0YWcsXG4gICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICBwcm90b3R5cGVcbiAgKTtcbn07XG5oYXJkZW4oZGVmZW5kUHJvdG90eXBlKTtcbnZhciBkZWZlbmRQcm90b3R5cGVLaXQgPSAodGFnLCBjb250ZXh0UHJvdmlkZXJLaXQsIGJlaGF2aW9yTWV0aG9kc0tpdCwgdGhpc2Z1bE1ldGhvZHMgPSBmYWxzZSwgaW50ZXJmYWNlR3VhcmRLaXQgPSB2b2lkIDApID0+IHtcbiAgY29uc3QgZmFjZXROYW1lcyA9IG93bktleXMxOChiZWhhdmlvck1ldGhvZHNLaXQpLnNvcnQoKTtcbiAgZmFjZXROYW1lcy5sZW5ndGggPiAxIHx8IHRocm93UmVkYWN0ZWRgQSBtdWx0aS1mYWNldCBvYmplY3QgbXVzdCBoYXZlIG11bHRpcGxlIGZhY2V0c2A7XG4gIGlmIChpbnRlcmZhY2VHdWFyZEtpdCkge1xuICAgIGNvbnN0IGludGVyZmFjZU5hbWVzID0gb3duS2V5czE4KGludGVyZmFjZUd1YXJkS2l0KTtcbiAgICBjb25zdCBleHRyYUludGVyZmFjZU5hbWVzID0gbGlzdERpZmZlcmVuY2UoZmFjZXROYW1lcywgaW50ZXJmYWNlTmFtZXMpO1xuICAgIGV4dHJhSW50ZXJmYWNlTmFtZXMubGVuZ3RoID09PSAwIHx8IHRocm93UmVkYWN0ZWRgSW50ZXJmYWNlcyAke3F1b3RlKGV4dHJhSW50ZXJmYWNlTmFtZXMpfSBub3QgaW1wbGVtZW50ZWQgYnkgJHtxdW90ZSh0YWcpfWA7XG4gICAgY29uc3QgZXh0cmFGYWNldE5hbWVzMiA9IGxpc3REaWZmZXJlbmNlKGludGVyZmFjZU5hbWVzLCBmYWNldE5hbWVzKTtcbiAgICBleHRyYUZhY2V0TmFtZXMyLmxlbmd0aCA9PT0gMCB8fCB0aHJvd1JlZGFjdGVkYEZhY2V0cyAke3F1b3RlKGV4dHJhRmFjZXROYW1lczIpfSBvZiAke3F1b3RlKHRhZyl9IG5vdCBndWFyZGVkIGJ5IGludGVyZmFjZXNgO1xuICB9XG4gIGNvbnN0IGNvbnRleHRNYXBOYW1lcyA9IG93bktleXMxOChjb250ZXh0UHJvdmlkZXJLaXQpO1xuICBjb25zdCBleHRyYUNvbnRleHROYW1lcyA9IGxpc3REaWZmZXJlbmNlKGZhY2V0TmFtZXMsIGNvbnRleHRNYXBOYW1lcyk7XG4gIGV4dHJhQ29udGV4dE5hbWVzLmxlbmd0aCA9PT0gMCB8fCB0aHJvd1JlZGFjdGVkYENvbnRleHRzICR7cXVvdGUoZXh0cmFDb250ZXh0TmFtZXMpfSBub3QgaW1wbGVtZW50ZWQgYnkgJHtxdW90ZSh0YWcpfWA7XG4gIGNvbnN0IGV4dHJhRmFjZXROYW1lcyA9IGxpc3REaWZmZXJlbmNlKGNvbnRleHRNYXBOYW1lcywgZmFjZXROYW1lcyk7XG4gIGV4dHJhRmFjZXROYW1lcy5sZW5ndGggPT09IDAgfHwgdGhyb3dSZWRhY3RlZGBGYWNldHMgJHtxdW90ZShleHRyYUZhY2V0TmFtZXMpfSBvZiAke3F1b3RlKHRhZyl9IG1pc3NpbmcgY29udGV4dHNgO1xuICBjb25zdCBwcm90b0tpdCA9IG9iamVjdE1hcChcbiAgICBiZWhhdmlvck1ldGhvZHNLaXQsXG4gICAgKGJlaGF2aW9yTWV0aG9kcywgZmFjZXROYW1lKSA9PiBkZWZlbmRQcm90b3R5cGUoXG4gICAgICBgJHt0YWd9ICR7U3RyaW5nKGZhY2V0TmFtZSl9YCxcbiAgICAgIGNvbnRleHRQcm92aWRlcktpdFtmYWNldE5hbWVdLFxuICAgICAgYmVoYXZpb3JNZXRob2RzLFxuICAgICAgdGhpc2Z1bE1ldGhvZHMsXG4gICAgICBpbnRlcmZhY2VHdWFyZEtpdCAmJiBpbnRlcmZhY2VHdWFyZEtpdFtmYWNldE5hbWVdXG4gICAgKVxuICApO1xuICByZXR1cm4gcHJvdG9LaXQ7XG59O1xuXG4vL1xudmFyIHsgY3JlYXRlOiBjcmVhdGUzLCBzZWFsLCBmcmVlemU6IGZyZWV6ZTcsIGRlZmluZVByb3BlcnR5OiBkZWZpbmVQcm9wZXJ0eTIsIHZhbHVlczogdmFsdWVzMyB9ID0gT2JqZWN0O1xudmFyIExBQkVMX0lOU1RBTkNFUyA9IGVudmlyb25tZW50T3B0aW9uc0xpc3RIYXMoXCJERUJVR1wiLCBcImxhYmVsLWluc3RhbmNlc1wiKTtcbnZhciBtYWtlU2VsZiA9IChwcm90bywgaW5zdGFuY2VDb3VudCkgPT4ge1xuICBjb25zdCBzZWxmID0gY3JlYXRlMyhwcm90byk7XG4gIGlmIChMQUJFTF9JTlNUQU5DRVMpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eTIoc2VsZiwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7XG4gICAgICB2YWx1ZTogYCR7cHJvdG9bU3ltYm9sLnRvU3RyaW5nVGFnXX0jJHtpbnN0YW5jZUNvdW50fWAsXG4gICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gaGFyZGVuKHNlbGYpO1xufTtcbnZhciBlbXB0eVJlY29yZCA9IGhhcmRlbih7fSk7XG52YXIgaW5pdEVtcHR5ID0gKCkgPT4gZW1wdHlSZWNvcmQ7XG52YXIgZGVmaW5lRXhvQ2xhc3MgPSAodGFnLCBpbnRlcmZhY2VHdWFyZCwgaW5pdCwgbWV0aG9kcywgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGhhcmRlbihtZXRob2RzKTtcbiAgY29uc3Qge1xuICAgIGZpbmlzaCA9IHZvaWQgMCxcbiAgICByZWNlaXZlQW1wbGlmaWVyID0gdm9pZCAwLFxuICAgIHJlY2VpdmVJbnN0YW5jZVRlc3RlciA9IHZvaWQgMFxuICB9ID0gb3B0aW9ucztcbiAgcmVjZWl2ZUFtcGxpZmllciA9PT0gdm9pZCAwIHx8IHRocm93UmVkYWN0ZWRgT25seSBmYWNldHMgb2YgYW4gZXhvIGNsYXNzIGtpdCBjYW4gYmUgYW1wbGlmaWVkICR7cXVvdGUodGFnKX1gO1xuICBjb25zdCBjb250ZXh0TWFwID0gLyogICAgICAgICAgICovIG5ldyBXZWFrTWFwKCk7XG4gIGNvbnN0IHByb3RvID0gZGVmZW5kUHJvdG90eXBlKFxuICAgIHRhZyxcbiAgICAoc2VsZikgPT4gKFxuICAgICAgLyogICAgICAgICAgICAgICovXG4gICAgICBjb250ZXh0TWFwLmdldChzZWxmKVxuICAgICksXG4gICAgbWV0aG9kcyxcbiAgICB0cnVlLFxuICAgIGludGVyZmFjZUd1YXJkXG4gICk7XG4gIGxldCBpbnN0YW5jZUNvdW50ID0gMDtcbiAgY29uc3QgbWFrZUluc3RhbmNlID0gKC4uLmFyZ3MpID0+IHtcbiAgICBjb25zdCBzdGF0ZSA9IHNlYWwoaW5pdCguLi5hcmdzKSk7XG4gICAgaW5zdGFuY2VDb3VudCArPSAxO1xuICAgIGNvbnN0IHNlbGYgPSBtYWtlU2VsZihwcm90bywgaW5zdGFuY2VDb3VudCk7XG4gICAgY29uc3QgY29udGV4dCA9IGZyZWV6ZTcoeyBzdGF0ZSwgc2VsZiB9KTtcbiAgICBjb250ZXh0TWFwLnNldChzZWxmLCBjb250ZXh0KTtcbiAgICBpZiAoZmluaXNoKSB7XG4gICAgICBmaW5pc2goY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBzZWxmO1xuICB9O1xuICBpZiAocmVjZWl2ZUluc3RhbmNlVGVzdGVyKSB7XG4gICAgY29uc3QgaXNJbnN0YW5jZSA9IChleG8sIGZhY2V0TmFtZSA9IHZvaWQgMCkgPT4ge1xuICAgICAgZmFjZXROYW1lID09PSB2b2lkIDAgfHwgdGhyb3dSZWRhY3RlZGBmYWNldE5hbWUgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIGFuIGV4byBjbGFzcyBraXQ6ICR7cXVvdGUoXG4gICAgICAgIHRhZ1xuICAgICAgKX0gaGFzIG5vIGZhY2V0ICR7cXVvdGUoZmFjZXROYW1lKX1gO1xuICAgICAgcmV0dXJuIGNvbnRleHRNYXAuaGFzKGV4byk7XG4gICAgfTtcbiAgICBoYXJkZW4oaXNJbnN0YW5jZSk7XG4gICAgcmVjZWl2ZUluc3RhbmNlVGVzdGVyKGlzSW5zdGFuY2UpO1xuICB9XG4gIHJldHVybiBoYXJkZW4obWFrZUluc3RhbmNlKTtcbn07XG5oYXJkZW4oZGVmaW5lRXhvQ2xhc3MpO1xudmFyIGRlZmluZUV4b0NsYXNzS2l0ID0gKHRhZywgaW50ZXJmYWNlR3VhcmRLaXQsIGluaXQsIG1ldGhvZHNLaXQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBoYXJkZW4obWV0aG9kc0tpdCk7XG4gIGNvbnN0IHtcbiAgICBmaW5pc2ggPSB2b2lkIDAsXG4gICAgcmVjZWl2ZUFtcGxpZmllciA9IHZvaWQgMCxcbiAgICByZWNlaXZlSW5zdGFuY2VUZXN0ZXIgPSB2b2lkIDBcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGNvbnRleHRNYXBLaXQgPSBvYmplY3RNYXAobWV0aG9kc0tpdCwgKCkgPT4gLyogICAgICAgICAgICovIG5ldyBXZWFrTWFwKCkpO1xuICBjb25zdCBnZXRDb250ZXh0S2l0ID0gb2JqZWN0TWFwKFxuICAgIGNvbnRleHRNYXBLaXQsXG4gICAgKGNvbnRleHRNYXApID0+IChmYWNldCkgPT4gY29udGV4dE1hcC5nZXQoZmFjZXQpXG4gICk7XG4gIGNvbnN0IHByb3RvdHlwZUtpdCA9IGRlZmVuZFByb3RvdHlwZUtpdChcbiAgICB0YWcsXG4gICAgZ2V0Q29udGV4dEtpdCxcbiAgICBtZXRob2RzS2l0LFxuICAgIHRydWUsXG4gICAgaW50ZXJmYWNlR3VhcmRLaXRcbiAgKTtcbiAgbGV0IGluc3RhbmNlQ291bnQgPSAwO1xuICBjb25zdCBtYWtlSW5zdGFuY2VLaXQgPSAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IHN0YXRlID0gc2VhbChpbml0KC4uLmFyZ3MpKTtcbiAgICBjb25zdCBjb250ZXh0ID0geyBzdGF0ZSwgZmFjZXRzOiBudWxsIH07XG4gICAgaW5zdGFuY2VDb3VudCArPSAxO1xuICAgIGNvbnN0IGZhY2V0cyA9IG9iamVjdE1hcChwcm90b3R5cGVLaXQsIChwcm90bywgZmFjZXROYW1lKSA9PiB7XG4gICAgICBjb25zdCBzZWxmID0gbWFrZVNlbGYocHJvdG8sIGluc3RhbmNlQ291bnQpO1xuICAgICAgY29udGV4dE1hcEtpdFtmYWNldE5hbWVdLnNldChzZWxmLCBjb250ZXh0KTtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0pO1xuICAgIGNvbnRleHQuZmFjZXRzID0gZmFjZXRzO1xuICAgIGZyZWV6ZTcoY29udGV4dCk7XG4gICAgaWYgKGZpbmlzaCkge1xuICAgICAgZmluaXNoKGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgY29udGV4dC5mYWNldHNcbiAgICApO1xuICB9O1xuICBpZiAocmVjZWl2ZUFtcGxpZmllcikge1xuICAgIGNvbnN0IGFtcGxpZnkgPSAoZXhvRmFjZXQpID0+IHtcbiAgICAgIGZvciAoY29uc3QgY29udGV4dE1hcCBvZiB2YWx1ZXMzKGNvbnRleHRNYXBLaXQpKSB7XG4gICAgICAgIGlmIChjb250ZXh0TWFwLmhhcyhleG9GYWNldCkpIHtcbiAgICAgICAgICBjb25zdCB7IGZhY2V0cyB9ID0gY29udGV4dE1hcC5nZXQoZXhvRmFjZXQpO1xuICAgICAgICAgIHJldHVybiBmYWNldHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgTXVzdCBiZSBhIGZhY2V0IG9mICR7cXVvdGUodGFnKX06ICR7ZXhvRmFjZXR9YDtcbiAgICB9O1xuICAgIGhhcmRlbihhbXBsaWZ5KTtcbiAgICByZWNlaXZlQW1wbGlmaWVyKGFtcGxpZnkpO1xuICB9XG4gIGlmIChyZWNlaXZlSW5zdGFuY2VUZXN0ZXIpIHtcbiAgICBjb25zdCBpc0luc3RhbmNlID0gKGV4b0ZhY2V0LCBmYWNldE5hbWUgPSB2b2lkIDApID0+IHtcbiAgICAgIGlmIChmYWNldE5hbWUgPT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gdmFsdWVzMyhjb250ZXh0TWFwS2l0KS5zb21lKFxuICAgICAgICAgIChjb250ZXh0TWFwMikgPT4gY29udGV4dE1hcDIuaGFzKGV4b0ZhY2V0KVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgYXNzZXJ0LnR5cGVvZihmYWNldE5hbWUsIFwic3RyaW5nXCIpO1xuICAgICAgY29uc3QgY29udGV4dE1hcCA9IGNvbnRleHRNYXBLaXRbZmFjZXROYW1lXTtcbiAgICAgIGNvbnRleHRNYXAgIT09IHZvaWQgMCB8fCB0aHJvd1JlZGFjdGVkYGV4byBjbGFzcyBraXQgJHtxdW90ZSh0YWcpfSBoYXMgbm8gZmFjZXQgbmFtZWQgJHtxdW90ZShmYWNldE5hbWUpfWA7XG4gICAgICByZXR1cm4gY29udGV4dE1hcC5oYXMoZXhvRmFjZXQpO1xuICAgIH07XG4gICAgaGFyZGVuKGlzSW5zdGFuY2UpO1xuICAgIHJlY2VpdmVJbnN0YW5jZVRlc3Rlcihpc0luc3RhbmNlKTtcbiAgfVxuICByZXR1cm4gaGFyZGVuKG1ha2VJbnN0YW5jZUtpdCk7XG59O1xuaGFyZGVuKGRlZmluZUV4b0NsYXNzS2l0KTtcbnZhciBtYWtlRXhvID0gKHRhZywgaW50ZXJmYWNlR3VhcmQsIG1ldGhvZHMsIG9wdGlvbnMgPSB2b2lkIDApID0+IHtcbiAgY29uc3QgbWFrZUluc3RhbmNlID0gZGVmaW5lRXhvQ2xhc3MoXG4gICAgdGFnLFxuICAgIGludGVyZmFjZUd1YXJkLFxuICAgIGluaXRFbXB0eSxcbiAgICBtZXRob2RzLFxuICAgIG9wdGlvbnNcbiAgKTtcbiAgcmV0dXJuIG1ha2VJbnN0YW5jZSgpO1xufTtcbmhhcmRlbihtYWtlRXhvKTtcblxuLy9cbnZhciBtYWtlV2Vha1NldFN0b3JlTWV0aG9kcyA9IChqc3NldCwgYXNzZXJ0S2V5T2tUb0FkZCwgYXNzZXJ0S2V5T2tUb0RlbGV0ZSA9IHZvaWQgMCwga2V5TmFtZSA9IFwia2V5XCIpID0+IHtcbiAgY29uc3QgYXNzZXJ0S2V5RXhpc3RzID0gKGtleSkgPT4ganNzZXQuaGFzKGtleSkgfHwgdGhyb3dSZWRhY3RlZGAke3F1b3RlKGtleU5hbWUpfSBub3QgZm91bmQ6ICR7a2V5fWA7XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIGhhczogKGtleSkgPT4ge1xuICAgICAgcmV0dXJuIGpzc2V0LmhhcyhrZXkpO1xuICAgIH0sXG4gICAgYWRkOiAoa2V5KSA9PiB7XG4gICAgICBhc3NlcnRLZXlPa1RvQWRkKGtleSk7XG4gICAgICBqc3NldC5hZGQoa2V5KTtcbiAgICB9LFxuICAgIGRlbGV0ZTogKGtleSkgPT4ge1xuICAgICAgYXNzZXJ0S2V5RXhpc3RzKGtleSk7XG4gICAgICBpZiAoYXNzZXJ0S2V5T2tUb0RlbGV0ZSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGFzc2VydEtleU9rVG9EZWxldGUoa2V5KTtcbiAgICAgIH1cbiAgICAgIGpzc2V0LmRlbGV0ZShrZXkpO1xuICAgIH0sXG4gICAgYWRkQWxsOiAoa2V5czcpID0+IHtcbiAgICAgIGlmICh0eXBlb2Yga2V5czdbU3ltYm9sLml0ZXJhdG9yXSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGlmIChPYmplY3QuaXNGcm96ZW4oa2V5czcpICYmIGlzQ29weVNldChrZXlzNykpIHtcbiAgICAgICAgICBrZXlzNyA9IGdldENvcHlTZXRLZXlzKGtleXM3KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvd1JlZGFjdGVkYHByb3ZpZGVkIGRhdGEgc291cmNlIGlzIG5vdCBpdGVyYWJsZTogJHtrZXlzN31gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKFxuICAgICAgICBjb25zdCBrZXkgb2ZcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAga2V5czdcbiAgICAgICkge1xuICAgICAgICBhc3NlcnRLZXlPa1RvQWRkKGtleSk7XG4gICAgICAgIGpzc2V0LmFkZChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xudmFyIG1ha2VTY2FsYXJXZWFrU2V0U3RvcmUgPSAodGFnID0gXCJrZXlcIiwgeyBsb25nTGl2ZWQgPSB0cnVlLCBrZXlTaGFwZSA9IHZvaWQgMCB9ID0ge30pID0+IHtcbiAgY29uc3QganNzZXQgPSBuZXcgKGxvbmdMaXZlZCA/IFdlYWtTZXQgOiBTZXQpKCk7XG4gIGlmIChrZXlTaGFwZSAhPT0gdm9pZCAwKSB7XG4gICAgYXNzZXJ0UGF0dGVybihrZXlTaGFwZSk7XG4gIH1cbiAgY29uc3QgYXNzZXJ0S2V5T2tUb0FkZCA9IChrZXkpID0+IHtcbiAgICBoYXJkZW4oa2V5KTtcbiAgICBwYXNzU3R5bGVPZihrZXkpID09PSBcInJlbW90YWJsZVwiIHx8IHRocm93UmVkYWN0ZWRgT25seSByZW1vdGFibGVzIGNhbiBiZSBrZXlzIG9mIHNjYWxhciBXZWFrU3RvcmVzOiAke2tleX1gO1xuICAgIGlmIChrZXlTaGFwZSAhPT0gdm9pZCAwKSB7XG4gICAgICBtdXN0TWF0Y2goa2V5LCBrZXlTaGFwZSwgXCJ3ZWFrU2V0U3RvcmUga2V5XCIpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIEZhcihgc2NhbGFyIFdlYWtTZXRTdG9yZSBvZiAke3F1b3RlKHRhZyl9YCwge1xuICAgIC4uLm1ha2VXZWFrU2V0U3RvcmVNZXRob2RzKGpzc2V0LCBhc3NlcnRLZXlPa1RvQWRkLCB2b2lkIDAsIHRhZylcbiAgfSk7XG59O1xuaGFyZGVuKG1ha2VTY2FsYXJXZWFrU2V0U3RvcmUpO1xuXG4vL1xudmFyIG1ha2VDdXJyZW50S2V5c0tpdCA9IChnZXRSYXdLZXlzLCBjaGVja0hhcywgY29tcGFyZSwgYXNzZXJ0T2tUb0FkZCwgYXNzZXJ0T2tUb0RlbGV0ZSA9IHZvaWQgMCwga2V5TmFtZSA9IFwia2V5XCIpID0+IHtcbiAgbGV0IHVwZGF0ZUNvdW50ID0gMDtcbiAgbGV0IHNvcnRlZEtleXNNZW1vO1xuICBjb25zdCBhc3NlcnRVcGRhdGVPbkFkZCA9IChrLCB2MiA9IHZvaWQgMCkgPT4ge1xuICAgIGFzc2VydE9rVG9BZGQoaywgdjIpO1xuICAgIHVwZGF0ZUNvdW50ICs9IDE7XG4gICAgc29ydGVkS2V5c01lbW8gPSB2b2lkIDA7XG4gIH07XG4gIGNvbnN0IGFzc2VydFVwZGF0ZU9uRGVsZXRlID0gKGspID0+IGFzc2VydE9rVG9EZWxldGUgJiYgYXNzZXJ0T2tUb0RlbGV0ZShrKTtcbiAgY29uc3QgZ2V0U29ydGVkS2V5cyA9ICgpID0+IHtcbiAgICBpZiAoc29ydGVkS2V5c01lbW8gPT09IHZvaWQgMCkge1xuICAgICAgc29ydGVkS2V5c01lbW8gPSBoYXJkZW4oWy4uLmdldFJhd0tleXMoKV0uc29ydChjb21wYXJlKSk7XG4gICAgfVxuICAgIHJldHVybiBzb3J0ZWRLZXlzTWVtbztcbiAgfTtcbiAgY29uc3QgaXRlcmFibGVLZXlzID0gRmFyKFwiSXRlcmFibGUgb2Yga2V5c1wiLCB7XG4gICAgW1N5bWJvbC5pdGVyYXRvcl06ICgpID0+IHtcbiAgICAgIGNvbnN0IGdlbmVyYXRpb24gPSB1cGRhdGVDb3VudDtcbiAgICAgIGdldFNvcnRlZEtleXMoKTtcbiAgICAgIGNvbnN0IGxlbiA9IHNvcnRlZEtleXNNZW1vLmxlbmd0aDtcbiAgICAgIGxldCBpMyA9IDA7XG4gICAgICByZXR1cm4gRmFyKFwiSXRlcmF0b3Igb2Yga2V5c1wiLCB7XG4gICAgICAgIG5leHQ6ICgpID0+IHtcbiAgICAgICAgICBnZW5lcmF0aW9uID09PSB1cGRhdGVDb3VudCB8fCB0aHJvd1JlZGFjdGVkYFN0b3JlICR7cXVvdGUoa2V5TmFtZSl9IGN1cnNvciBzdGFsZWA7XG4gICAgICAgICAgZm9yICg7IDsgKSB7XG4gICAgICAgICAgICBpZiAoaTMgPCBsZW4pIHtcbiAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBzb3J0ZWRLZXlzTWVtb1tpM107XG4gICAgICAgICAgICAgIGkzICs9IDE7XG4gICAgICAgICAgICAgIGlmIChjaGVja0hhcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFyZGVuKHsgZG9uZTogZmFsc2UsIHZhbHVlIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gaGFyZGVuKHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHZvaWQgMCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIGFzc2VydFVwZGF0ZU9uQWRkLFxuICAgIGFzc2VydFVwZGF0ZU9uRGVsZXRlLFxuICAgIGl0ZXJhYmxlS2V5c1xuICB9KTtcbn07XG5oYXJkZW4obWFrZUN1cnJlbnRLZXlzS2l0KTtcbnZhciBwcm92aWRlTGF6eSA9IChtYXBTdG9yZSwga2V5LCBtYWtlVmFsdWUpID0+IHtcbiAgaWYgKCFtYXBTdG9yZS5oYXMoa2V5KSkge1xuICAgIG1hcFN0b3JlLmluaXQoa2V5LCBtYWtlVmFsdWUoa2V5KSk7XG4gIH1cbiAgcmV0dXJuIG1hcFN0b3JlLmdldChrZXkpO1xufTtcbmhhcmRlbihwcm92aWRlTGF6eSk7XG52YXIgbWFrZUF0b21pY1Byb3ZpZGVyID0gKHN0b3JlKSA9PiB7XG4gIGNvbnN0IHBlbmRpbmcgPSAvKiAgICAgICAgICAgKi8gbmV3IE1hcCgpO1xuICBjb25zdCBwcm92aWRlQXN5bmMgPSAoa2V5LCBtYWtlVmFsdWUsIGZpbmlzaFZhbHVlKSA9PiB7XG4gICAgaWYgKHN0b3JlLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHN0b3JlLmdldChrZXkpKTtcbiAgICB9XG4gICAgaWYgKCFwZW5kaW5nLmhhcyhrZXkpKSB7XG4gICAgICBjb25zdCB2YWxQMiA9IG1ha2VWYWx1ZShrZXkpLnRoZW4oKHYyKSA9PiB7XG4gICAgICAgIHN0b3JlLmluaXQoa2V5LCB2Mik7XG4gICAgICAgIHJldHVybiB2MjtcbiAgICAgIH0pLnRoZW4oKHYyKSA9PiB7XG4gICAgICAgIGlmIChmaW5pc2hWYWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmaW5pc2hWYWx1ZShrZXksIHYyKS50aGVuKCgpID0+IHYyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdjI7XG4gICAgICB9KS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgcGVuZGluZy5kZWxldGUoa2V5KTtcbiAgICAgIH0pO1xuICAgICAgcGVuZGluZy5zZXQoa2V5LCB2YWxQMik7XG4gICAgfVxuICAgIGNvbnN0IHZhbFAgPSBwZW5kaW5nLmdldChrZXkpO1xuICAgIGFzc2VydCh2YWxQKTtcbiAgICByZXR1cm4gdmFsUDtcbiAgfTtcbiAgcmV0dXJuIGhhcmRlbih7IHByb3ZpZGVBc3luYyB9KTtcbn07XG5oYXJkZW4obWFrZUF0b21pY1Byb3ZpZGVyKTtcbnZhciBhcHBlbmRUb1N0b3JlZEFycmF5ID0gKG1hcFN0b3JlLCBrZXksIGl0ZW0pID0+IHtcbiAgaWYgKG1hcFN0b3JlLmhhcyhrZXkpKSB7XG4gICAgY29uc3QgZXh0YW50ID0gbWFwU3RvcmUuZ2V0KGtleSk7XG4gICAgbWFwU3RvcmUuc2V0KGtleSwgaGFyZGVuKFsuLi5leHRhbnQsIGl0ZW1dKSk7XG4gIH0gZWxzZSB7XG4gICAgbWFwU3RvcmUuaW5pdChrZXksIGhhcmRlbihbaXRlbV0pKTtcbiAgfVxufTtcbmhhcmRlbihhcHBlbmRUb1N0b3JlZEFycmF5KTtcblxuLy9cbnZhciBtYWtlU2V0U3RvcmVNZXRob2RzID0gKGpzc2V0LCBhc3NlcnRLZXlPa1RvQWRkLCBhc3NlcnRLZXlPa1RvRGVsZXRlID0gdm9pZCAwLCBrZXlOYW1lID0gXCJrZXlcIikgPT4ge1xuICBjb25zdCB7IGFzc2VydFVwZGF0ZU9uQWRkLCBhc3NlcnRVcGRhdGVPbkRlbGV0ZSwgaXRlcmFibGVLZXlzIH0gPSBtYWtlQ3VycmVudEtleXNLaXQoXG4gICAgKCkgPT4ganNzZXQua2V5cygpLFxuICAgIChrKSA9PiBqc3NldC5oYXMoayksXG4gICAgY29tcGFyZVJhbmssXG4gICAgYXNzZXJ0S2V5T2tUb0FkZCxcbiAgICBhc3NlcnRLZXlPa1RvRGVsZXRlLFxuICAgIGtleU5hbWVcbiAgKTtcbiAgY29uc3Qga2V5czcgPSAoa2V5UGF0dCA9IHZvaWQgMCkgPT4ga2V5UGF0dCA9PT0gdm9pZCAwID8gaXRlcmFibGVLZXlzIDogZmlsdGVySXRlcmFibGUoaXRlcmFibGVLZXlzLCAoaykgPT4gbWF0Y2hlcyhrLCBrZXlQYXR0KSk7XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIC4uLm1ha2VXZWFrU2V0U3RvcmVNZXRob2RzKFxuICAgICAganNzZXQsXG4gICAgICBhc3NlcnRVcGRhdGVPbkFkZCxcbiAgICAgIGFzc2VydFVwZGF0ZU9uRGVsZXRlLFxuICAgICAga2V5TmFtZVxuICAgICksXG4gICAga2V5czoga2V5czcsXG4gICAgdmFsdWVzOiBrZXlzNyxcbiAgICBzbmFwc2hvdDogKGtleVBhdHQgPSB2b2lkIDApID0+IG1ha2VDb3B5U2V0KGtleXM3KGtleVBhdHQpKSxcbiAgICBnZXRTaXplOiAoa2V5UGF0dCA9IHZvaWQgMCkgPT4ga2V5UGF0dCA9PT0gdm9pZCAwID8ganNzZXQuc2l6ZSA6IFsuLi5rZXlzNyhrZXlQYXR0KV0ubGVuZ3RoLFxuICAgIGNsZWFyOiAoa2V5UGF0dCA9IHZvaWQgMCkgPT4ge1xuICAgICAgaWYgKGtleVBhdHQgPT09IHZvaWQgMCkge1xuICAgICAgICBqc3NldC5jbGVhcigpO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBrZXkgb2Yga2V5czcoa2V5UGF0dCkpIHtcbiAgICAgICAganNzZXQuZGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG52YXIgbWFrZVNjYWxhclNldFN0b3JlID0gKHRhZyA9IFwia2V5XCIsIHsga2V5U2hhcGUgPSB2b2lkIDAgfSA9IHt9KSA9PiB7XG4gIGNvbnN0IGpzc2V0ID0gLyogICAgICAgICAgICovIG5ldyBTZXQoKTtcbiAgaWYgKGtleVNoYXBlICE9PSB2b2lkIDApIHtcbiAgICBhc3NlcnRQYXR0ZXJuKGtleVNoYXBlKTtcbiAgfVxuICBjb25zdCBhc3NlcnRLZXlPa1RvQWRkID0gKGtleSkgPT4ge1xuICAgIGhhcmRlbihrZXkpO1xuICAgIGFzc2VydFNjYWxhcktleShrZXkpO1xuICAgIGlmIChrZXlTaGFwZSAhPT0gdm9pZCAwKSB7XG4gICAgICBtdXN0TWF0Y2goa2V5LCBrZXlTaGFwZSwgXCJzZXRTdG9yZSBrZXlcIik7XG4gICAgfVxuICB9O1xuICByZXR1cm4gRmFyKGBzY2FsYXIgU2V0U3RvcmUgb2YgJHtxdW90ZSh0YWcpfWAsIHtcbiAgICAuLi5tYWtlU2V0U3RvcmVNZXRob2RzKGpzc2V0LCBhc3NlcnRLZXlPa1RvQWRkLCB2b2lkIDAsIHRhZylcbiAgfSk7XG59O1xuaGFyZGVuKG1ha2VTY2FsYXJTZXRTdG9yZSk7XG5cbi8vXG52YXIgbWFrZVdlYWtNYXBTdG9yZU1ldGhvZHMgPSAoanNtYXAsIGFzc2VydEtWT2tUb0FkZCwgYXNzZXJ0S1ZPa1RvU2V0LCBhc3NlcnRLZXlPa1RvRGVsZXRlID0gdm9pZCAwLCBrZXlOYW1lID0gXCJrZXlcIikgPT4ge1xuICBjb25zdCBhc3NlcnRLZXlEb2VzTm90RXhpc3QgPSAoa2V5KSA9PiAhanNtYXAuaGFzKGtleSkgfHwgdGhyb3dSZWRhY3RlZGAke3F1b3RlKGtleU5hbWUpfSBhbHJlYWR5IHJlZ2lzdGVyZWQ6ICR7a2V5fWA7XG4gIGNvbnN0IGFzc2VydEtleUV4aXN0cyA9IChrZXkpID0+IGpzbWFwLmhhcyhrZXkpIHx8IHRocm93UmVkYWN0ZWRgJHtxdW90ZShrZXlOYW1lKX0gbm90IGZvdW5kOiAke2tleX1gO1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICBoYXM6IChrZXkpID0+IHtcbiAgICAgIHJldHVybiBqc21hcC5oYXMoa2V5KTtcbiAgICB9LFxuICAgIGdldDogKGtleSkgPT4ge1xuICAgICAgYXNzZXJ0S2V5RXhpc3RzKGtleSk7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAvKiAgICAgICAgICAgICovXG4gICAgICAgIGpzbWFwLmdldChrZXkpXG4gICAgICApO1xuICAgIH0sXG4gICAgaW5pdDogKGtleSwgdmFsdWUpID0+IHtcbiAgICAgIGFzc2VydEtleURvZXNOb3RFeGlzdChrZXkpO1xuICAgICAgYXNzZXJ0S1ZPa1RvQWRkKGtleSwgdmFsdWUpO1xuICAgICAganNtYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0OiAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgYXNzZXJ0S2V5RXhpc3RzKGtleSk7XG4gICAgICBhc3NlcnRLVk9rVG9TZXQoa2V5LCB2YWx1ZSk7XG4gICAgICBqc21hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBkZWxldGU6IChrZXkpID0+IHtcbiAgICAgIGFzc2VydEtleUV4aXN0cyhrZXkpO1xuICAgICAgaWYgKGFzc2VydEtleU9rVG9EZWxldGUgIT09IHZvaWQgMCkge1xuICAgICAgICBhc3NlcnRLZXlPa1RvRGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgICBqc21hcC5kZWxldGUoa2V5KTtcbiAgICB9LFxuICAgIGFkZEFsbDogKGVudHJpZXMxMCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBlbnRyaWVzMTBbU3ltYm9sLml0ZXJhdG9yXSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGlmIChPYmplY3QuaXNGcm96ZW4oZW50cmllczEwKSAmJiBpc0NvcHlNYXAoZW50cmllczEwKSkge1xuICAgICAgICAgIGVudHJpZXMxMCA9IGdldENvcHlNYXBFbnRyaWVzKGVudHJpZXMxMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3dSZWRhY3RlZGBwcm92aWRlZCBkYXRhIHNvdXJjZSBpcyBub3QgaXRlcmFibGU6ICR7ZW50cmllczEwfWA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAoXG4gICAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSBvZlxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIGVudHJpZXMxMFxuICAgICAgKSB7XG4gICAgICAgIGFzc2VydEtWT2tUb0FkZChrZXksIHZhbHVlKTtcbiAgICAgICAganNtYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xudmFyIG1ha2VTY2FsYXJXZWFrTWFwU3RvcmUgPSAodGFnID0gXCJrZXlcIiwgeyBsb25nTGl2ZWQgPSB0cnVlLCBrZXlTaGFwZSA9IHZvaWQgMCwgdmFsdWVTaGFwZSA9IHZvaWQgMCB9ID0ge30pID0+IHtcbiAgY29uc3QganNtYXAgPSBuZXcgKGxvbmdMaXZlZCA/IFdlYWtNYXAgOiBNYXApKCk7XG4gIGlmIChrZXlTaGFwZSAhPT0gdm9pZCAwKSB7XG4gICAgYXNzZXJ0UGF0dGVybihrZXlTaGFwZSk7XG4gIH1cbiAgaWYgKHZhbHVlU2hhcGUgIT09IHZvaWQgMCkge1xuICAgIGFzc2VydFBhdHRlcm4odmFsdWVTaGFwZSk7XG4gIH1cbiAgY29uc3QgYXNzZXJ0S1ZPa1RvU2V0ID0gKF9rZXksIHZhbHVlKSA9PiB7XG4gICAgaGFyZGVuKHZhbHVlKTtcbiAgICBhc3NlcnRQYXNzYWJsZSh2YWx1ZSk7XG4gICAgaWYgKHZhbHVlU2hhcGUgIT09IHZvaWQgMCkge1xuICAgICAgbXVzdE1hdGNoKHZhbHVlLCB2YWx1ZVNoYXBlLCBcIndlYWtNYXBTdG9yZSB2YWx1ZVwiKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGFzc2VydEtWT2tUb0FkZCA9IChrZXksIHZhbHVlKSA9PiB7XG4gICAgaGFyZGVuKGtleSk7XG4gICAgcGFzc1N0eWxlT2Yoa2V5KSA9PT0gXCJyZW1vdGFibGVcIiB8fCB0aHJvd1JlZGFjdGVkYE9ubHkgcmVtb3RhYmxlcyBjYW4gYmUga2V5cyBvZiBzY2FsYXIgV2Vha01hcFN0b3JlczogJHtrZXl9YDtcbiAgICBpZiAoa2V5U2hhcGUgIT09IHZvaWQgMCkge1xuICAgICAgbXVzdE1hdGNoKGtleSwga2V5U2hhcGUsIFwid2Vha01hcFN0b3JlIGtleVwiKTtcbiAgICB9XG4gICAgYXNzZXJ0S1ZPa1RvU2V0KGtleSwgdmFsdWUpO1xuICB9O1xuICByZXR1cm4gRmFyKGBzY2FsYXIgV2Vha01hcFN0b3JlIG9mICR7cXVvdGUodGFnKX1gLCB7XG4gICAgLi4ubWFrZVdlYWtNYXBTdG9yZU1ldGhvZHMoXG4gICAgICBqc21hcCxcbiAgICAgIGFzc2VydEtWT2tUb0FkZCxcbiAgICAgIGFzc2VydEtWT2tUb1NldCxcbiAgICAgIHZvaWQgMCxcbiAgICAgIHRhZ1xuICAgIClcbiAgfSk7XG59O1xuaGFyZGVuKG1ha2VTY2FsYXJXZWFrTWFwU3RvcmUpO1xuXG4vL1xudmFyIG1ha2VNYXBTdG9yZU1ldGhvZHMgPSAoanNtYXAsIGFzc2VydEtWT2tUb0FkZCwgYXNzZXJ0S1ZPa1RvU2V0LCBhc3NlcnRLZXlPa1RvRGVsZXRlID0gdm9pZCAwLCB0YWcgPSBcImtleVwiKSA9PiB7XG4gIGNvbnN0IHsgYXNzZXJ0VXBkYXRlT25BZGQsIGFzc2VydFVwZGF0ZU9uRGVsZXRlLCBpdGVyYWJsZUtleXMgfSA9IG1ha2VDdXJyZW50S2V5c0tpdChcbiAgICAoKSA9PiBqc21hcC5rZXlzKCksXG4gICAgKGspID0+IGpzbWFwLmhhcyhrKSxcbiAgICBjb21wYXJlUmFuayxcbiAgICBhc3NlcnRLVk9rVG9BZGQsXG4gICAgYXNzZXJ0S2V5T2tUb0RlbGV0ZSxcbiAgICB0YWdcbiAgKTtcbiAgY29uc3Qga2V5czcgPSAoa2V5UGF0dCA9IHZvaWQgMCwgdmFsdWVQYXR0ID0gdm9pZCAwKSA9PiB7XG4gICAgaWYgKGtleVBhdHQgPT09IHZvaWQgMCAmJiB2YWx1ZVBhdHQgPT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIGl0ZXJhYmxlS2V5cztcbiAgICB9XG4gICAgY29uc3QgZmlsdGVyID0gKGspID0+IHtcbiAgICAgIGlmIChrZXlQYXR0ICE9PSB2b2lkIDAgJiYgIW1hdGNoZXMoaywga2V5UGF0dCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlUGF0dCAhPT0gdm9pZCAwICYmICFtYXRjaGVzKGpzbWFwLmdldChrKSwgdmFsdWVQYXR0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIHJldHVybiBmaWx0ZXJJdGVyYWJsZShpdGVyYWJsZUtleXMsIGZpbHRlcik7XG4gIH07XG4gIGNvbnN0IHZhbHVlczggPSAoa2V5UGF0dCA9IHZvaWQgMCwgdmFsdWVQYXR0ID0gdm9pZCAwKSA9PiBtYXBJdGVyYWJsZShrZXlzNyhrZXlQYXR0LCB2YWx1ZVBhdHQpLCAoaykgPT4gKFxuICAgIC8qICAgICAgICAgICAgKi9cbiAgICBqc21hcC5nZXQoaylcbiAgKSk7XG4gIGNvbnN0IGVudHJpZXMxMCA9IChrZXlQYXR0ID0gdm9pZCAwLCB2YWx1ZVBhdHQgPSB2b2lkIDApID0+IG1hcEl0ZXJhYmxlKGtleXM3KGtleVBhdHQsIHZhbHVlUGF0dCksIChrKSA9PiBbXG4gICAgayxcbiAgICAvKiAgICAgICAgICAgICovXG4gICAganNtYXAuZ2V0KGspXG4gIF0pO1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICAuLi5tYWtlV2Vha01hcFN0b3JlTWV0aG9kcyhcbiAgICAgIGpzbWFwLFxuICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgIGFzc2VydFVwZGF0ZU9uQWRkLFxuICAgICAgYXNzZXJ0S1ZPa1RvU2V0LFxuICAgICAgYXNzZXJ0VXBkYXRlT25EZWxldGUsXG4gICAgICB0YWdcbiAgICApLFxuICAgIGtleXM6IGtleXM3LFxuICAgIHZhbHVlczogdmFsdWVzOCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzMTAsXG4gICAgc25hcHNob3Q6IChrZXlQYXR0ID0gdm9pZCAwLCB2YWx1ZVBhdHQgPSB2b2lkIDApID0+IG1ha2VDb3B5TWFwKGVudHJpZXMxMChrZXlQYXR0LCB2YWx1ZVBhdHQpKSxcbiAgICBnZXRTaXplOiAoa2V5UGF0dCA9IHZvaWQgMCwgdmFsdWVQYXR0ID0gdm9pZCAwKSA9PiBrZXlQYXR0ID09PSB2b2lkIDAgJiYgdmFsdWVQYXR0ID09PSB2b2lkIDAgPyBqc21hcC5zaXplIDogWy4uLmtleXM3KGtleVBhdHQsIHZhbHVlUGF0dCldLmxlbmd0aCxcbiAgICBjbGVhcjogKGtleVBhdHQgPSB2b2lkIDAsIHZhbHVlUGF0dCA9IHZvaWQgMCkgPT4ge1xuICAgICAgaWYgKGtleVBhdHQgPT09IHZvaWQgMCAmJiB2YWx1ZVBhdHQgPT09IHZvaWQgMCkge1xuICAgICAgICBqc21hcC5jbGVhcigpO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBrZXkgb2Yga2V5czcoa2V5UGF0dCwgdmFsdWVQYXR0KSkge1xuICAgICAgICBqc21hcC5kZWxldGUoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcbnZhciBtYWtlU2NhbGFyTWFwU3RvcmUgPSAodGFnID0gXCJrZXlcIiwgeyBrZXlTaGFwZSA9IHZvaWQgMCwgdmFsdWVTaGFwZSA9IHZvaWQgMCB9ID0ge30pID0+IHtcbiAgY29uc3QganNtYXAgPSAvKiAgICAgICAgICAgKi8gbmV3IE1hcCgpO1xuICBpZiAoa2V5U2hhcGUgIT09IHZvaWQgMCkge1xuICAgIGFzc2VydFBhdHRlcm4oa2V5U2hhcGUpO1xuICB9XG4gIGlmICh2YWx1ZVNoYXBlICE9PSB2b2lkIDApIHtcbiAgICBhc3NlcnRQYXR0ZXJuKHZhbHVlU2hhcGUpO1xuICB9XG4gIGNvbnN0IGFzc2VydEtWT2tUb1NldCA9IChfa2V5LCB2YWx1ZSkgPT4ge1xuICAgIGhhcmRlbih2YWx1ZSk7XG4gICAgYXNzZXJ0UGFzc2FibGUodmFsdWUpO1xuICAgIGlmICh2YWx1ZVNoYXBlICE9PSB2b2lkIDApIHtcbiAgICAgIG11c3RNYXRjaCh2YWx1ZSwgdmFsdWVTaGFwZSwgXCJtYXBTdG9yZSB2YWx1ZVwiKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGFzc2VydEtWT2tUb0FkZCA9IChrZXksIHZhbHVlKSA9PiB7XG4gICAgaGFyZGVuKGtleSk7XG4gICAgYXNzZXJ0U2NhbGFyS2V5KGtleSk7XG4gICAgaWYgKGtleVNoYXBlICE9PSB2b2lkIDApIHtcbiAgICAgIG11c3RNYXRjaChrZXksIGtleVNoYXBlLCBcIm1hcFN0b3JlIGtleVwiKTtcbiAgICB9XG4gICAgYXNzZXJ0S1ZPa1RvU2V0KGtleSwgdmFsdWUpO1xuICB9O1xuICByZXR1cm4gRmFyKGBzY2FsYXIgTWFwU3RvcmUgb2YgJHtxdW90ZSh0YWcpfWAsIHtcbiAgICAuLi5tYWtlTWFwU3RvcmVNZXRob2RzKFxuICAgICAganNtYXAsXG4gICAgICBhc3NlcnRLVk9rVG9BZGQsXG4gICAgICBhc3NlcnRLVk9rVG9TZXQsXG4gICAgICB2b2lkIDAsXG4gICAgICB0YWdcbiAgICApXG4gIH0pO1xufTtcbmhhcmRlbihtYWtlU2NhbGFyTWFwU3RvcmUpO1xuXG4vL1xudmFyIG1ha2VMZWdhY3lNYXAgPSAodGFnID0gXCJrZXlcIikgPT4ge1xuICBjb25zdCBtMiA9IC8qICAgICAgICAgICAqLyBuZXcgTWFwKCk7XG4gIGNvbnN0IGFzc2VydEtleURvZXNOb3RFeGlzdCA9IChrZXkpID0+ICFtMi5oYXMoa2V5KSB8fCB0aHJvd1JlZGFjdGVkYCR7cXVvdGUodGFnKX0gYWxyZWFkeSByZWdpc3RlcmVkOiAke2tleX1gO1xuICBjb25zdCBhc3NlcnRLZXlFeGlzdHMgPSAoa2V5KSA9PiBtMi5oYXMoa2V5KSB8fCB0aHJvd1JlZGFjdGVkYCR7cXVvdGUodGFnKX0gbm90IGZvdW5kOiAke2tleX1gO1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICBoYXM6IChrZXkpID0+IHtcbiAgICAgIHJldHVybiBtMi5oYXMoa2V5KTtcbiAgICB9LFxuICAgIGluaXQ6IChrZXksIHZhbHVlKSA9PiB7XG4gICAgICBhc3NlcnRLZXlEb2VzTm90RXhpc3Qoa2V5KTtcbiAgICAgIG0yLnNldChrZXksIHZhbHVlKTtcbiAgICB9LFxuICAgIGdldDogKGtleSkgPT4ge1xuICAgICAgYXNzZXJ0S2V5RXhpc3RzKGtleSk7XG4gICAgICByZXR1cm4gbTIuZ2V0KGtleSk7XG4gICAgfSxcbiAgICBzZXQ6IChrZXksIHZhbHVlKSA9PiB7XG4gICAgICBhc3NlcnRLZXlFeGlzdHMoa2V5KTtcbiAgICAgIG0yLnNldChrZXksIHZhbHVlKTtcbiAgICB9LFxuICAgIGRlbGV0ZTogKGtleSkgPT4ge1xuICAgICAgYXNzZXJ0S2V5RXhpc3RzKGtleSk7XG4gICAgICBtMi5kZWxldGUoa2V5KTtcbiAgICB9LFxuICAgIGtleXM6ICgpID0+IG0yLmtleXMoKSxcbiAgICB2YWx1ZXM6ICgpID0+IG0yLnZhbHVlcygpLFxuICAgIGVudHJpZXM6ICgpID0+IG0yLmVudHJpZXMoKSxcbiAgICBnZXRTaXplOiAoKSA9PiBtMi5zaXplLFxuICAgIGNsZWFyOiAoKSA9PiBtMi5jbGVhcigpXG4gIH0pO1xufTtcbmhhcmRlbihtYWtlTGVnYWN5TWFwKTtcblxuLy9cbnZhciBtYWtlTGVnYWN5V2Vha01hcCA9ICh0YWcgPSBcImtleVwiKSA9PiB7XG4gIGNvbnN0IHdtID0gLyogICAgICAgICAgICovIG5ldyBXZWFrTWFwKCk7XG4gIGNvbnN0IGFzc2VydEtleURvZXNOb3RFeGlzdCA9IChrZXkpID0+ICF3bS5oYXMoa2V5KSB8fCB0aHJvd1JlZGFjdGVkYCR7cXVvdGUodGFnKX0gYWxyZWFkeSByZWdpc3RlcmVkOiAke2tleX1gO1xuICBjb25zdCBhc3NlcnRLZXlFeGlzdHMgPSAoa2V5KSA9PiB3bS5oYXMoa2V5KSB8fCB0aHJvd1JlZGFjdGVkYCR7cXVvdGUodGFnKX0gbm90IGZvdW5kOiAke2tleX1gO1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICBoYXM6IChrZXkpID0+IHtcbiAgICAgIHJldHVybiB3bS5oYXMoa2V5KTtcbiAgICB9LFxuICAgIGluaXQ6IChrZXksIHZhbHVlKSA9PiB7XG4gICAgICBhc3NlcnRLZXlEb2VzTm90RXhpc3Qoa2V5KTtcbiAgICAgIHdtLnNldChrZXksIHZhbHVlKTtcbiAgICB9LFxuICAgIGdldDogKGtleSkgPT4ge1xuICAgICAgYXNzZXJ0S2V5RXhpc3RzKGtleSk7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAvKiAgICAgICAgICAgICovXG4gICAgICAgIHdtLmdldChrZXkpXG4gICAgICApO1xuICAgIH0sXG4gICAgc2V0OiAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgYXNzZXJ0S2V5RXhpc3RzKGtleSk7XG4gICAgICB3bS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBkZWxldGU6IChrZXkpID0+IHtcbiAgICAgIGFzc2VydEtleUV4aXN0cyhrZXkpO1xuICAgICAgd20uZGVsZXRlKGtleSk7XG4gICAgfVxuICB9KTtcbn07XG5oYXJkZW4obWFrZUxlZ2FjeVdlYWtNYXApO1xuXG4vL1xudmFyIG11c3RNYXRjaDIgPSBtdXN0TWF0Y2g7XG5cbi8vXG52YXIgZGVmYXVsdExhYmVsVG9LZXlzID0gKGxhYmVsKSA9PiBoYXJkZW4oW2xhYmVsXSk7XG5oYXJkZW4oZGVmYXVsdExhYmVsVG9LZXlzKTtcbnZhciBtYWtlT25jZUtpdCA9IChkZWJ1Z05hbWUsIHN0b3JlcywgYmFja2luZ1N0b3JlID0gdm9pZCAwKSA9PiB7XG4gIGNvbnN0IHVzZWRLZXlzID0gc3RvcmVzLmRldGFjaGVkKCkuc2V0U3RvcmUoYCR7ZGVidWdOYW1lfSB1c2VkIGtleXNgKTtcbiAgY29uc3QgYXNzZXJ0T25seU9uY2UgPSAoa2V5KSA9PiB7XG4gICAgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiB8fCB0aHJvd1JlZGFjdGVkYGtleSAke2tleX0gbXVzdCBiZSBhIHN0cmluZ2A7XG4gICAgIXVzZWRLZXlzLmhhcyhrZXkpIHx8IHRocm93UmVkYWN0ZWRga2V5ICR7a2V5fSBoYXMgYWxyZWFkeSBiZWVuIHVzZWQgaW4gdGhpcyB6b25lIGFuZCBpbmNhcm5hdGlvbmA7XG4gICAgdXNlZEtleXMuYWRkKGtleSk7XG4gIH07XG4gIGNvbnN0IHdyYXBQcm92aWRlciA9IChwcm92aWRlciwgbGFiZWxUb0tleXMgPSBkZWZhdWx0TGFiZWxUb0tleXMpID0+IHtcbiAgICBjb25zdCB3cmFwcGVyID0gKGxhYmVsLCAuLi5yZXN0KSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBsYWJlbFRvS2V5cyhsYWJlbCkpIHtcbiAgICAgICAgYXNzZXJ0T25seU9uY2Uoa2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcm92aWRlcihsYWJlbCwgLi4ucmVzdCk7XG4gICAgfTtcbiAgICByZXR1cm4gKFxuICAgICAgLyogICAgICAgICAgICAqL1xuICAgICAgd3JhcHBlclxuICAgICk7XG4gIH07XG4gIGNvbnN0IG1ha2VPbmNlID0gKGtleSwgbWFrZXIpID0+IHtcbiAgICBhc3NlcnRPbmx5T25jZShrZXkpO1xuICAgIGlmIChiYWNraW5nU3RvcmUgJiYgYmFja2luZ1N0b3JlLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm4gYmFja2luZ1N0b3JlLmdldChrZXkpO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IG1ha2VyKGtleSk7XG4gICAgc3RvcmVzLmlzU3RvcmFibGUodmFsdWUpIHx8IHRocm93UmVkYWN0ZWRgbWFrZXIgcmV0dXJuIHZhbHVlICR7dmFsdWV9IGlzIG5vdCBzdG9yYWJsZWA7XG4gICAgYmFja2luZ1N0b3JlICYmIGJhY2tpbmdTdG9yZS5pbml0KGtleSwgdmFsdWUpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbiAgcmV0dXJuIGhhcmRlbih7IG1ha2VPbmNlLCB3cmFwUHJvdmlkZXIgfSk7XG59O1xuaGFyZGVuKG1ha2VPbmNlS2l0KTtcblxuLy9cbnZhciBraW5kID0gKGxhYmVsKSA9PiBgJHtsYWJlbH1fa2luZEhhbmRsZWA7XG52YXIgc2luZ2xldG9uID0gKGxhYmVsKSA9PiBgJHtsYWJlbH1fc2luZ2xldG9uYDtcbnZhciBhZ29yaWNWYXREYXRhS2V5cyA9IHtcbiAgZXhvQ2xhc3M6IChsYWJlbCkgPT4gaGFyZGVuKFtraW5kKGxhYmVsKV0pLFxuICBleG9DbGFzc0tpdDogKGxhYmVsKSA9PiBoYXJkZW4oW2tpbmQobGFiZWwpXSksXG4gIGV4bzogKGxhYmVsKSA9PiBoYXJkZW4oW2tpbmQobGFiZWwpLCBzaW5nbGV0b24obGFiZWwpXSksXG4gIHN0b3JlOiAobGFiZWwpID0+IGhhcmRlbihbbGFiZWxdKSxcbiAgem9uZTogKGxhYmVsKSA9PiBoYXJkZW4oW2xhYmVsXSlcbn07XG5oYXJkZW4oYWdvcmljVmF0RGF0YUtleXMpO1xuXG4vL1xudmFyIHsgYXBwbHk6IGFwcGx5NSB9ID0gUmVmbGVjdDtcbnZhciBQcm9taXNlV2F0Y2hlckhhbmRsZXIgPSBNLmNhbGwoTS5yYXcoKSkucmVzdChNLnJhdygpKS5yZXR1cm5zKCk7XG52YXIgUHJvbWlzZVdhdGNoZXJJID0gTS5pbnRlcmZhY2UoXCJQcm9taXNlV2F0Y2hlclwiLCB7XG4gIG9uRnVsZmlsbGVkOiBQcm9taXNlV2F0Y2hlckhhbmRsZXIsXG4gIG9uUmVqZWN0ZWQ6IFByb21pc2VXYXRjaGVySGFuZGxlclxufSk7XG52YXIgUHJvbWlzZVdhdGNoZXJGdWxmaWxsZWRJID0gTS5pbnRlcmZhY2UoXCJQcm9taXNlV2F0Y2hlckZ1bGZpbGxlZFwiLCB7XG4gIG9uRnVsZmlsbGVkOiBQcm9taXNlV2F0Y2hlckhhbmRsZXJcbn0pO1xudmFyIFByb21pc2VXYXRjaGVyUmVqZWN0ZWRJID0gTS5pbnRlcmZhY2UoXCJQcm9taXNlV2F0Y2hlclJlamVjdGVkXCIsIHtcbiAgb25SZWplY3RlZDogUHJvbWlzZVdhdGNoZXJIYW5kbGVyXG59KTtcbnZhciBjYWxsTWVNYXliZSA9ICh0aGF0LCBwcm9wLCBwb3N0QXJncykgPT4ge1xuICBjb25zdCBmbiA9IHRoYXRbcHJvcF07XG4gIGlmICghZm4pIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGFzc2VydC50eXBlb2YoZm4sIFwiZnVuY3Rpb25cIik7XG4gIGNvbnN0IHdyYXBwZWQgPSAoYXJnKSA9PiB7XG4gICAgYXBwbHk1KGZuLCB0aGF0LCBbYXJnLCAuLi5wb3N0QXJnc10pO1xuICB9O1xuICByZXR1cm4gd3JhcHBlZDtcbn07XG52YXIgd2F0Y2hQcm9taXNlID0gKHA0LCB3YXRjaGVyLCAuLi53YXRjaGVyQXJncykgPT4ge1xuICBQcm9taXNlLnJlc29sdmUocDQpID09PSBwNCB8fCB0aHJvd1JlZGFjdGVkYHdhdGNoUHJvbWlzZSBvbmx5IHdhdGNoZXMgcHJvbWlzZXNgO1xuICBjb25zdCBvbkZ1bGZpbGxlZCA9IGNhbGxNZU1heWJlKHdhdGNoZXIsIFwib25GdWxmaWxsZWRcIiwgd2F0Y2hlckFyZ3MpO1xuICBjb25zdCBvblJlamVjdGVkID0gY2FsbE1lTWF5YmUod2F0Y2hlciwgXCJvblJlamVjdGVkXCIsIHdhdGNoZXJBcmdzKTtcbiAgb25GdWxmaWxsZWQgfHwgb25SZWplY3RlZCB8fCB0aHJvd1JlZGFjdGVkYHByb21pc2Ugd2F0Y2hlciBtdXN0IGltcGxlbWVudCBhdCBsZWFzdCBvbmUgaGFuZGxlciBtZXRob2RgO1xuICB2b2lkIEUud2hlbihwNCwgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xufTtcbmhhcmRlbih3YXRjaFByb21pc2UpO1xuXG4vL1xudmFyIGRldGFjaGVkSGVhcFN0b3JlcyA9IEZhcihcImhlYXBTdG9yZXNcIiwge1xuICBkZXRhY2hlZDogKCkgPT4gZGV0YWNoZWRIZWFwU3RvcmVzLFxuICBpc1N0b3JhYmxlOiBpc1Bhc3NhYmxlLFxuICBzZXRTdG9yZTogbWFrZVNjYWxhclNldFN0b3JlLFxuICBtYXBTdG9yZTogbWFrZVNjYWxhck1hcFN0b3JlLFxuICB3ZWFrTWFwU3RvcmU6IG1ha2VTY2FsYXJXZWFrTWFwU3RvcmUsXG4gIHdlYWtTZXRTdG9yZTogbWFrZVNjYWxhcldlYWtTZXRTdG9yZVxufSk7XG52YXIgbWFrZUhlYXBab25lID0gKGJhc2VMYWJlbCA9IFwiaGVhcFpvbmVcIikgPT4ge1xuICBjb25zdCB7IG1ha2VPbmNlLCB3cmFwUHJvdmlkZXIgfSA9IG1ha2VPbmNlS2l0KGJhc2VMYWJlbCwgZGV0YWNoZWRIZWFwU3RvcmVzKTtcbiAgY29uc3QgbWFrZVN1YlpvbmUgPSAobGFiZWwsIF9vcHRpb25zKSA9PiBtYWtlSGVhcFpvbmUoYCR7YmFzZUxhYmVsfS4ke2xhYmVsfWApO1xuICByZXR1cm4gRmFyKFwiaGVhcFpvbmVcIiwge1xuICAgIGV4bzogd3JhcFByb3ZpZGVyKG1ha2VFeG8sIGFnb3JpY1ZhdERhdGFLZXlzLmV4byksXG4gICAgZXhvQ2xhc3M6IHdyYXBQcm92aWRlcihkZWZpbmVFeG9DbGFzcywgYWdvcmljVmF0RGF0YUtleXMuZXhvQ2xhc3MpLFxuICAgIGV4b0NsYXNzS2l0OiB3cmFwUHJvdmlkZXIoZGVmaW5lRXhvQ2xhc3NLaXQsIGFnb3JpY1ZhdERhdGFLZXlzLmV4b0NsYXNzS2l0KSxcbiAgICBzdWJab25lOiB3cmFwUHJvdmlkZXIobWFrZVN1YlpvbmUpLFxuICAgIG1ha2VPbmNlLFxuICAgIHdhdGNoUHJvbWlzZSxcbiAgICBkZXRhY2hlZDogZGV0YWNoZWRIZWFwU3RvcmVzLmRldGFjaGVkLFxuICAgIGlzU3RvcmFibGU6IGRldGFjaGVkSGVhcFN0b3Jlcy5pc1N0b3JhYmxlLFxuICAgIG1hcFN0b3JlOiB3cmFwUHJvdmlkZXIoZGV0YWNoZWRIZWFwU3RvcmVzLm1hcFN0b3JlKSxcbiAgICBzZXRTdG9yZTogd3JhcFByb3ZpZGVyKGRldGFjaGVkSGVhcFN0b3Jlcy5zZXRTdG9yZSksXG4gICAgd2Vha01hcFN0b3JlOiB3cmFwUHJvdmlkZXIoZGV0YWNoZWRIZWFwU3RvcmVzLndlYWtNYXBTdG9yZSksXG4gICAgd2Vha1NldFN0b3JlOiB3cmFwUHJvdmlkZXIoZGV0YWNoZWRIZWFwU3RvcmVzLndlYWtTZXRTdG9yZSlcbiAgfSk7XG59O1xuaGFyZGVuKG1ha2VIZWFwWm9uZSk7XG5cbi8vXG52YXIgeyBmcm9tRW50cmllczogZnJvbUVudHJpZXM5IH0gPSBPYmplY3Q7XG52YXIgeyBvd25LZXlzOiByYXdPd25LZXlzIH0gPSBSZWZsZWN0O1xudmFyIG93bktleXMxOSA9IChcbiAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgcmF3T3duS2V5c1xuKTtcbnZhciBpc1Byb3BlcnR5S2V5ID0gKGtleSkgPT4ge1xuICBzd2l0Y2ggKHR5cGVvZiBrZXkpIHtcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgY2FzZSBcIm51bWJlclwiOlxuICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG52YXIgY2FsbFN5bmMgPSAoY2FsbGJhY2ssIC4uLmFyZ3MpID0+IHtcbiAgY29uc3QgeyB0YXJnZXQsIG1ldGhvZE5hbWUsIGJvdW5kIH0gPSBjYWxsYmFjaztcbiAgaWYgKG1ldGhvZE5hbWUgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiB0YXJnZXQoLi4uYm91bmQsIC4uLmFyZ3MpO1xuICB9XG4gIHJldHVybiB0YXJnZXRbbWV0aG9kTmFtZV0oLi4uYm91bmQsIC4uLmFyZ3MpO1xufTtcbmhhcmRlbihjYWxsU3luYyk7XG52YXIgY2FsbEUgPSAoY2FsbGJhY2ssIC4uLmFyZ3MpID0+IHtcbiAgY29uc3QgeyB0YXJnZXQsIG1ldGhvZE5hbWUsIGJvdW5kIH0gPSBjYWxsYmFjaztcbiAgaWYgKG1ldGhvZE5hbWUgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiBFKHRhcmdldCkoLi4uYm91bmQsIC4uLmFyZ3MpO1xuICB9XG4gIHJldHVybiBFKHRhcmdldClbbWV0aG9kTmFtZV0oLi4uYm91bmQsIC4uLmFyZ3MpO1xufTtcbmhhcmRlbihjYWxsRSk7XG52YXIgbWFrZVN5bmNGdW5jdGlvbkNhbGxiYWNrID0gKHRhcmdldCwgLi4uYm91bmQpID0+IHtcbiAgdHlwZW9mIHRhcmdldCA9PT0gXCJmdW5jdGlvblwiIHx8IHRocm93UmVkYWN0ZWRgc3luYyBmdW5jdGlvbiBjYWxsYmFjayB0YXJnZXQgbXVzdCBiZSBhIGZ1bmN0aW9uOiAke3RhcmdldH1gO1xuICBjb25zdCBjYiA9IGhhcmRlbih7IHRhcmdldCwgYm91bmQsIGlzU3luYzogdHJ1ZSB9KTtcbiAgcmV0dXJuIChcbiAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICBjYlxuICApO1xufTtcbmhhcmRlbihtYWtlU3luY0Z1bmN0aW9uQ2FsbGJhY2spO1xudmFyIG1ha2VGdW5jdGlvbkNhbGxiYWNrID0gKHRhcmdldCwgLi4uYm91bmQpID0+IHtcbiAgaXNPYmplY3QyKHRhcmdldCkgfHwgdGhyb3dSZWRhY3RlZGBmdW5jdGlvbiBjYWxsYmFjayB0YXJnZXQgbXVzdCBiZSBhIGZ1bmN0aW9uIHByZXNlbmNlOiAke3RhcmdldH1gO1xuICBjb25zdCBjYiA9IGhhcmRlbih7IHRhcmdldCwgYm91bmQgfSk7XG4gIHJldHVybiAoXG4gICAgLyogICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICBjYlxuICApO1xufTtcbmhhcmRlbihtYWtlRnVuY3Rpb25DYWxsYmFjayk7XG52YXIgbWFrZVN5bmNNZXRob2RDYWxsYmFjayA9ICh0YXJnZXQsIG1ldGhvZE5hbWUsIC4uLmJvdW5kKSA9PiB7XG4gIGlzT2JqZWN0Mih0YXJnZXQpIHx8IHRocm93UmVkYWN0ZWRgc3luYyBtZXRob2QgY2FsbGJhY2sgdGFyZ2V0IG11c3QgYmUgYW4gb2JqZWN0OiAke3RhcmdldH1gO1xuICB0eXBlb2YgbWV0aG9kTmFtZSA9PT0gXCJzdHJpbmdcIiB8fCBpc1Bhc3NhYmxlU3ltYm9sKG1ldGhvZE5hbWUpIHx8IHRocm93UmVkYWN0ZWRgbWV0aG9kIG5hbWUgbXVzdCBiZSBhIHN0cmluZyBvciBwYXNzYWJsZSBzeW1ib2w6ICR7bWV0aG9kTmFtZX1gO1xuICBjb25zdCBjYiA9IGhhcmRlbih7IHRhcmdldCwgbWV0aG9kTmFtZSwgYm91bmQsIGlzU3luYzogdHJ1ZSB9KTtcbiAgcmV0dXJuIChcbiAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICBjYlxuICApO1xufTtcbmhhcmRlbihtYWtlU3luY01ldGhvZENhbGxiYWNrKTtcbnZhciBtYWtlTWV0aG9kQ2FsbGJhY2sgPSAodGFyZ2V0LCBtZXRob2ROYW1lLCAuLi5ib3VuZCkgPT4ge1xuICBpc09iamVjdDIodGFyZ2V0KSB8fCB0aHJvd1JlZGFjdGVkYG1ldGhvZCBjYWxsYmFjayB0YXJnZXQgbXVzdCBiZSBhbiBvYmplY3Q6ICR7dGFyZ2V0fWA7XG4gIHR5cGVvZiBtZXRob2ROYW1lID09PSBcInN0cmluZ1wiIHx8IGlzUGFzc2FibGVTeW1ib2wobWV0aG9kTmFtZSkgfHwgdGhyb3dSZWRhY3RlZGBtZXRob2QgbmFtZSBtdXN0IGJlIGEgc3RyaW5nIG9yIHBhc3NhYmxlIHN5bWJvbDogJHttZXRob2ROYW1lfWA7XG4gIGNvbnN0IGNiID0gaGFyZGVuKHsgdGFyZ2V0LCBtZXRob2ROYW1lLCBib3VuZCB9KTtcbiAgcmV0dXJuIChcbiAgICAvKiAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIGNiXG4gICk7XG59O1xuaGFyZGVuKG1ha2VNZXRob2RDYWxsYmFjayk7XG52YXIgaXNDYWxsYmFjayA9IChjYWxsYmFjaykgPT4ge1xuICBpZiAoIWlzT2JqZWN0MihjYWxsYmFjaykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgeyB0YXJnZXQsIG1ldGhvZE5hbWUsIGJvdW5kIH0gPSBjYWxsYmFjaztcbiAgcmV0dXJuIGlzT2JqZWN0Mih0YXJnZXQpICYmIChtZXRob2ROYW1lID09PSB2b2lkIDAgfHwgdHlwZW9mIG1ldGhvZE5hbWUgPT09IFwic3RyaW5nXCIgfHwgaXNQYXNzYWJsZVN5bWJvbChtZXRob2ROYW1lKSkgJiYgQXJyYXkuaXNBcnJheShib3VuZCk7XG59O1xuaGFyZGVuKGlzQ2FsbGJhY2spO1xudmFyIHByZXBhcmVBdHRlbnVhdG9yID0gKHpvbmUsIG1ldGhvZE5hbWVzLCB7IGludGVyZmFjZUd1YXJkLCB0YWcgPSBcIkF0dGVudWF0b3JcIiB9ID0ge30pID0+IHtcbiAgY29uc3QgbWV0aG9kcyA9IChcbiAgICAvKiAgICAgICAgICAgICAgICAgICovXG4gICAgZnJvbUVudHJpZXM5KFxuICAgICAgbWV0aG9kTmFtZXMubWFwKChrZXkpID0+IHtcbiAgICAgICAgaWYgKCFpc1Byb3BlcnR5S2V5KGtleSkpIHtcbiAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYGtleSAke3F1b3RlKGtleSl9IGlzIG5vdCBhIFByb3BlcnR5S2V5YDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtMiA9IChcbiAgICAgICAgICAvKiAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAge1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvKiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFtrZXldKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgY29uc3QgY2IgPSB0aGlzLnN0YXRlLmNic1trZXldO1xuICAgICAgICAgICAgICBpZiAoIWNiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyID0gbWFrZUVycm9yKGB1bmltcGxlbWVudGVkICR7cXVvdGUodGFnKX0gbWV0aG9kICR7cXVvdGUoa2V5KX1gKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5pc1N5bmMpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGNiLmlzU3luYykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsU3luYyhjYiwgLi4uYXJncyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxFKGNiLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9W2tleV1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAvKiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgIFtrZXksIG0yXVxuICAgICAgICApO1xuICAgICAgfSlcbiAgICApXG4gICk7XG4gIGNvbnN0IG1ha2VBdHRlbnVhdG9yID0gem9uZS5leG9DbGFzcyhcbiAgICB0YWcsXG4gICAgaW50ZXJmYWNlR3VhcmQsXG4gICAgLypcblxuXG5cblxuICAgICAqL1xuICAgICh7XG4gICAgICB0YXJnZXQgPSBudWxsLFxuICAgICAgaXNTeW5jID0gZmFsc2UsXG4gICAgICBvdmVycmlkZXMgPSAoXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICB7fVxuICAgICAgKVxuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IGNicyA9IChcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIHt9XG4gICAgICApO1xuICAgICAgY29uc3QgcmVtYWluaW5nID0gbmV3IFNldChtZXRob2ROYW1lcyk7XG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBvd25LZXlzMTkob3ZlcnJpZGVzKSkge1xuICAgICAgICByZW1haW5pbmcuaGFzKGtleSkgfHwgdGhyb3dSZWRhY3RlZGAke3F1b3RlKHRhZyl9IG92ZXJyaWRlc1ske3F1b3RlKGtleSl9XSBub3QgYWxsb3dlZCBieSBtZXRob2ROYW1lc2A7XG4gICAgICAgIHJlbWFpbmluZy5kZWxldGUoa2V5KTtcbiAgICAgICAgY29uc3QgY2IgPSBvdmVycmlkZXNba2V5XTtcbiAgICAgICAgY2IgPT0gbnVsbCB8fCBpc0NhbGxiYWNrKGNiKSB8fCB0aHJvd1JlZGFjdGVkYCR7cXVvdGUodGFnKX0gb3ZlcnJpZGVzWyR7cXVvdGUoa2V5KX1dIGlzIG5vdCBhIGNhbGxiYWNrOyBnb3QgJHtjYn1gO1xuICAgICAgICBjYnNba2V5XSA9IGNiO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBrZXkgb2YgcmVtYWluaW5nKSB7XG4gICAgICAgIGlmIChpc1N5bmMpIHtcbiAgICAgICAgICBjYnNba2V5XSA9IG1ha2VTeW5jTWV0aG9kQ2FsbGJhY2sodGFyZ2V0LCBrZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNic1trZXldID0gbWFrZU1ldGhvZENhbGxiYWNrKHRhcmdldCwga2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhcmRlbih7IGNicywgaXNTeW5jIH0pO1xuICAgIH0sXG4gICAgLyogICAgICAgICAgICAgICAgICAqL1xuICAgIG1ldGhvZHNcbiAgKTtcbiAgcmV0dXJuIG1ha2VBdHRlbnVhdG9yO1xufTtcbmhhcmRlbihwcmVwYXJlQXR0ZW51YXRvcik7XG52YXIgcHJlcGFyZUd1YXJkZWRBdHRlbnVhdG9yID0gKHpvbmUsIGludGVyZmFjZUd1YXJkLCBvcHRzID0ge30pID0+IHtcbiAgY29uc3QgbWV0aG9kTmFtZXMgPSBnZXRJbnRlcmZhY2VNZXRob2RLZXlzKGludGVyZmFjZUd1YXJkKTtcbiAgY29uc3QgbWFrZUF0dGVudWF0b3IgPSBwcmVwYXJlQXR0ZW51YXRvcih6b25lLCBtZXRob2ROYW1lcywge1xuICAgIC4uLm9wdHMsXG4gICAgaW50ZXJmYWNlR3VhcmRcbiAgfSk7XG4gIHJldHVybiAoXG4gICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIG1ha2VBdHRlbnVhdG9yXG4gICk7XG59O1xuaGFyZGVuKHByZXBhcmVHdWFyZGVkQXR0ZW51YXRvcik7XG5cbi8vXG52YXIgU3RyZWFtQ2VsbFNoYXBlID0gaGFyZGVuKHtcbiAgYmxvY2tIZWlnaHQ6IE0uc3RyaW5nKCksXG4gIHZhbHVlczogTS5hcnJheSgpXG59KTtcbnZhciBDaGFpblN0b3JhZ2VOb2RlSSA9IE0uaW50ZXJmYWNlKFwiU3RvcmFnZU5vZGVcIiwge1xuICBzZXRWYWx1ZTogTS5jYWxsV2hlbihNLnN0cmluZygpKS5yZXR1cm5zKCksXG4gIGdldFBhdGg6IE0uY2FsbCgpLnJldHVybnMoTS5zdHJpbmcoKSksXG4gIGdldFN0b3JlS2V5OiBNLmNhbGxXaGVuKCkucmV0dXJucyhNLnJlY29yZCgpKSxcbiAgbWFrZUNoaWxkTm9kZTogTS5jYWxsKE0uc3RyaW5nKCkpLm9wdGlvbmFsKE0uc3BsaXRSZWNvcmQoe30sIHsgc2VxdWVuY2U6IE0uYm9vbGVhbigpIH0sIHt9KSkucmV0dXJucyhNLnJlbW90YWJsZShcIlN0b3JhZ2VOb2RlXCIpKVxufSk7XG52YXIgaXNTdHJlYW1DZWxsID0gKGNlbGwpID0+IGNlbGwgJiYgdHlwZW9mIGNlbGwgPT09IFwib2JqZWN0XCIgJiYgQXJyYXkuaXNBcnJheShjZWxsLnZhbHVlcykgJiYgdHlwZW9mIGNlbGwuYmxvY2tIZWlnaHQgPT09IFwic3RyaW5nXCIgJiYgL14wJHxeWzEtOV1bMC05XSokLy50ZXN0KGNlbGwuYmxvY2tIZWlnaHQpO1xuaGFyZGVuKGlzU3RyZWFtQ2VsbCk7XG52YXIgcGF0aFNlZ21lbnRQYXR0ZXJuID0gL15bYS16QS1aMC05Xy1dezEsMTAwfSQvO1xudmFyIGFzc2VydFBhdGhTZWdtZW50ID0gKG5hbWUpID0+IHtcbiAgcGF0aFNlZ21lbnRQYXR0ZXJuLnRlc3QobmFtZSkgfHwgdGhyb3dSZWRhY3RlZGBQYXRoIHNlZ21lbnQgbmFtZXMgbXVzdCBjb25zaXN0IG9mIDEgdG8gMTAwIGNoYXJhY3RlcnMgbGltaXRlZCB0byBBU0NJSSBhbHBoYW51bWVyaWNzLCB1bmRlcnNjb3JlcywgYW5kL29yIGRhc2hlczogJHtuYW1lfWA7XG59O1xuaGFyZGVuKGFzc2VydFBhdGhTZWdtZW50KTtcbnZhciBwcmVwYXJlQ2hhaW5TdG9yYWdlTm9kZSA9ICh6b25lKSA9PiB7XG4gIGNvbnN0IG1ha2VDaGFpblN0b3JhZ2VOb2RlID0gem9uZS5leG9DbGFzcyhcbiAgICBcIkNoYWluU3RvcmFnZU5vZGVcIixcbiAgICBDaGFpblN0b3JhZ2VOb2RlSSxcbiAgICAvKlxuXG5cblxuXG5cblxuICAgICAqL1xuICAgIChtZXNzZW5nZXIsIHBhdGgsIHsgc2VxdWVuY2UgPSBmYWxzZSB9ID0ge30pID0+IHtcbiAgICAgIGFzc2VydC50eXBlb2YocGF0aCwgXCJzdHJpbmdcIik7XG4gICAgICBhc3NlcnQudHlwZW9mKHNlcXVlbmNlLCBcImJvb2xlYW5cIik7XG4gICAgICByZXR1cm4gaGFyZGVuKHsgcGF0aCwgbWVzc2VuZ2VyLCBzZXF1ZW5jZSB9KTtcbiAgICB9LFxuICAgIHtcbiAgICAgIGdldFBhdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLnBhdGg7XG4gICAgICB9LFxuICAgICAgLypcblxuXG4gICAgICAgKi9cbiAgICAgIGFzeW5jIGdldFN0b3JlS2V5KCkge1xuICAgICAgICBjb25zdCB7IHBhdGgsIG1lc3NlbmdlciB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgcmV0dXJuIGNhbGxFKG1lc3Nlbmdlciwge1xuICAgICAgICAgIG1ldGhvZDogXCJnZXRTdG9yZUtleVwiLFxuICAgICAgICAgIGFyZ3M6IFtwYXRoXVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICAvKlxuXG5cblxuXG4gICAgICAgKi9cbiAgICAgIG1ha2VDaGlsZE5vZGUobmFtZSwgY2hpbGROb2RlT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHsgc2VxdWVuY2UsIHBhdGgsIG1lc3NlbmdlciB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgYXNzZXJ0UGF0aFNlZ21lbnQobmFtZSk7XG4gICAgICAgIGNvbnN0IG1lcmdlZE9wdGlvbnMgPSB7IHNlcXVlbmNlLCAuLi5jaGlsZE5vZGVPcHRpb25zIH07XG4gICAgICAgIHJldHVybiBtYWtlQ2hhaW5TdG9yYWdlTm9kZShcbiAgICAgICAgICBtZXNzZW5nZXIsXG4gICAgICAgICAgYCR7cGF0aH0uJHtuYW1lfWAsXG4gICAgICAgICAgbWVyZ2VkT3B0aW9uc1xuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICBhc3luYyBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCB7IHNlcXVlbmNlLCBwYXRoLCBtZXNzZW5nZXIgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGFzc2VydC50eXBlb2YodmFsdWUsIFwic3RyaW5nXCIpO1xuICAgICAgICBsZXQgZW50cnk7XG4gICAgICAgIGlmICghc2VxdWVuY2UgJiYgIXZhbHVlKSB7XG4gICAgICAgICAgZW50cnkgPSBbcGF0aF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW50cnkgPSBbcGF0aCwgdmFsdWVdO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IGNhbGxFKG1lc3Nlbmdlciwge1xuICAgICAgICAgIG1ldGhvZDogc2VxdWVuY2UgPyBcImFwcGVuZFwiIDogXCJzZXRcIixcbiAgICAgICAgICBhcmdzOiBbZW50cnldXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy9cbiAgICAgIC8vXG4gICAgICAvL1xuICAgICAgLy9cbiAgICAgIC8vXG4gICAgICAvL1xuICAgICAgLy9cbiAgICB9XG4gICk7XG4gIHJldHVybiBtYWtlQ2hhaW5TdG9yYWdlTm9kZTtcbn07XG52YXIgbWFrZUhlYXBDaGFpblN0b3JhZ2VOb2RlID0gcHJlcGFyZUNoYWluU3RvcmFnZU5vZGUobWFrZUhlYXBab25lKCkpO1xuZnVuY3Rpb24gbWFrZUNoYWluU3RvcmFnZVJvb3QoaGFuZGxlU3RvcmFnZU1lc3NhZ2UsIHJvb3RQYXRoLCByb290T3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IG1lc3NlbmdlciA9IG1ha2VGdW5jdGlvbkNhbGxiYWNrKGhhbmRsZVN0b3JhZ2VNZXNzYWdlKTtcbiAgY29uc3Qgcm9vdE5vZGUgPSBtYWtlSGVhcENoYWluU3RvcmFnZU5vZGUobWVzc2VuZ2VyLCByb290UGF0aCwgcm9vdE9wdGlvbnMpO1xuICByZXR1cm4gcm9vdE5vZGU7XG59XG52YXIgbWFrZU51bGxTdG9yYWdlTm9kZSA9ICgpID0+IHtcbiAgcmV0dXJuIG1ha2VDaGFpblN0b3JhZ2VSb290KFxuICAgIEZhcihcIk51bGxNZXNzZW5nZXJcIiwgKCkgPT4gbnVsbCksXG4gICAgXCJudWxsXCJcbiAgKTtcbn07XG5hc3luYyBmdW5jdGlvbiBtYWtlU3RvcmFnZU5vZGVDaGlsZChzdG9yYWdlTm9kZVJlZiwgY2hpbGROYW1lKSB7XG4gIGNvbnN0IGV4aXN0aW5nU3RvcmFnZU5vZGUgPSBhd2FpdCBzdG9yYWdlTm9kZVJlZjtcbiAgY29uc3Qgc3RvcmFnZU5vZGUgPSBleGlzdGluZ1N0b3JhZ2VOb2RlIHx8IG1ha2VOdWxsU3RvcmFnZU5vZGUoKTtcbiAgcmV0dXJuIEUoc3RvcmFnZU5vZGUpLm1ha2VDaGlsZE5vZGUoY2hpbGROYW1lKTtcbn1cbmhhcmRlbihtYWtlU3RvcmFnZU5vZGVDaGlsZCk7XG52YXIgbWFrZVNlcmlhbGl6ZVRvU3RvcmFnZSA9IChzdG9yYWdlTm9kZSwgbWFyc2hhbGxlcikgPT4ge1xuICByZXR1cm4gYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgY29uc3QgbWFyc2hhbGxlZCA9IGF3YWl0IEUobWFyc2hhbGxlcikudG9DYXBEYXRhKHZhbHVlKTtcbiAgICBjb25zdCBzZXJpYWxpemVkID0gSlNPTi5zdHJpbmdpZnkobWFyc2hhbGxlZCk7XG4gICAgcmV0dXJuIEUoc3RvcmFnZU5vZGUpLnNldFZhbHVlKHNlcmlhbGl6ZWQpO1xuICB9O1xufTtcblxuLy9cbnZhciBDYXBEYXRhU2hhcGUgPSB7IGJvZHk6IE0uc3RyaW5nKCksIHNsb3RzOiBNLmFycmF5KCkgfTtcbmhhcmRlbihDYXBEYXRhU2hhcGUpO1xudmFyIGFzc2VydENhcERhdGEgPSAoZGF0YSkgPT4ge1xuICBhc3NlcnQudHlwZW9mKGRhdGEsIFwib2JqZWN0XCIpO1xuICBhc3NlcnQoZGF0YSk7XG4gIHR5cGVvZiBkYXRhLmJvZHkgPT09IFwic3RyaW5nXCIgfHwgdGhyb3dSZWRhY3RlZGBkYXRhIGhhcyBub24tc3RyaW5nIC5ib2R5ICR7ZGF0YS5ib2R5fWA7XG4gIEFycmF5LmlzQXJyYXkoZGF0YS5zbG90cykgfHwgdGhyb3dSZWRhY3RlZGBkYXRhIGhhcyBub24tQXJyYXkgc2xvdHMgJHtkYXRhLnNsb3RzfWA7XG59O1xuaGFyZGVuKGFzc2VydENhcERhdGEpO1xudmFyIHVubWFyc2hhbEZyb21Wc3RvcmFnZSA9IChkYXRhLCBrZXksIGZyb21DYXBEYXRhLCBpbmRleCkgPT4ge1xuICBjb25zdCBzZXJpYWxpemVkID0gZGF0YS5nZXQoa2V5KSB8fCB0aHJvd1JlZGFjdGVkYG5vIGRhdGEgZm9yICR7a2V5fWA7XG4gIGFzc2VydC50eXBlb2Yoc2VyaWFsaXplZCwgXCJzdHJpbmdcIik7XG4gIGFzc2VydC50eXBlb2YoaW5kZXgsIFwibnVtYmVyXCIpO1xuICBjb25zdCBzdHJlYW1DZWxsID0gSlNPTi5wYXJzZShzZXJpYWxpemVkKTtcbiAgaWYgKCFpc1N0cmVhbUNlbGwoc3RyZWFtQ2VsbCkpIHtcbiAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYG5vdCBhIFN0cmVhbUNlbGw6ICR7c3RyZWFtQ2VsbH1gO1xuICB9XG4gIGNvbnN0IHsgdmFsdWVzOiB2YWx1ZXM4IH0gPSBzdHJlYW1DZWxsO1xuICB2YWx1ZXM4Lmxlbmd0aCA+IDAgfHwgdGhyb3dSZWRhY3RlZGBubyBTdHJlYW1DZWxsIHZhbHVlczogJHtzdHJlYW1DZWxsfWA7XG4gIGNvbnN0IG1hcnNoYWxsZWQgPSB2YWx1ZXM4LmF0KGluZGV4KTtcbiAgYXNzZXJ0LnR5cGVvZihtYXJzaGFsbGVkLCBcInN0cmluZ1wiKTtcbiAgY29uc3QgY2FwRGF0YSA9IGhhcmRlbihKU09OLnBhcnNlKG1hcnNoYWxsZWQpKTtcbiAgYXNzZXJ0Q2FwRGF0YShjYXBEYXRhKTtcbiAgY29uc3QgdW5tYXJzaGFsbGVkID0gZnJvbUNhcERhdGEoY2FwRGF0YSk7XG4gIHJldHVybiB1bm1hcnNoYWxsZWQ7XG59O1xuaGFyZGVuKHVubWFyc2hhbEZyb21Wc3RvcmFnZSk7XG52YXIgcmVqZWN0T0NhcCA9IChjYXApID0+IHRocm93UmVkYWN0ZWRgJHtjYXB9IGlzIG5vdCBwdXJlIGRhdGFgO1xudmFyIHB1cmVEYXRhTWFyc2hhbGxlciA9IG1ha2VNYXJzaGFsKHJlamVjdE9DYXAsIHJlamVjdE9DYXAsIHtcbiAgc2VyaWFsaXplQm9keUZvcm1hdDogXCJzbWFsbGNhcHNcIlxufSk7XG5oYXJkZW4ocHVyZURhdGFNYXJzaGFsbGVyKTtcblxuLy9cbnZhciB7IGNyZWF0ZTogY3JlYXRlNCwgZnJvbUVudHJpZXM6IGZyb21FbnRyaWVzMTAgfSA9IE9iamVjdDtcbnZhciB7IGFwcGx5OiBhcHBseTYgfSA9IFJlZmxlY3Q7XG52YXIgZ2V0TWV0aG9kTmFtZXMyID0gKHZhbCkgPT4gKFxuICAvKiAgICAgICAgICAgICAgKi9cbiAgZ2V0TWV0aG9kTmFtZXModmFsKVxuKTtcbmhhcmRlbihnZXRNZXRob2ROYW1lczIpO1xudmFyIGJpbmRBbGxNZXRob2RzID0gKG9iaikgPT4gaGFyZGVuKFxuICBjcmVhdGU0KFxuICAgIG9iaixcbiAgICBmcm9tRW50cmllczEwKFxuICAgICAgZ2V0TWV0aG9kTmFtZXMob2JqKS5tYXAoKG5hbWUpID0+IFtcbiAgICAgICAgbmFtZSxcbiAgICAgICAge1xuICAgICAgICAgIHZhbHVlOiAoLi4uYXJncykgPT4gYXBwbHk2KG9ialtuYW1lXSwgb2JqLCBhcmdzKSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIF0pXG4gICAgKVxuICApXG4pO1xuaGFyZGVuKGJpbmRBbGxNZXRob2RzKTtcblxuLy9cbnZhciBISVNUT0dSQU1fTVNfTEFURU5DWV9CT1VOREFSSUVTID0gW1xuICA1LFxuICAxMCxcbiAgMjUsXG4gIDUwLFxuICAxMDAsXG4gIDI1MCxcbiAgNTAwLFxuICAxZTMsXG4gIDI1MDAsXG4gIDVlMyxcbiAgMWU0LFxuICBJbmZpbml0eVxuXTtcbnZhciBISVNUT0dSQU1fU0VDT05EU19MQVRFTkNZX0JPVU5EQVJJRVMgPSBISVNUT0dSQU1fTVNfTEFURU5DWV9CT1VOREFSSUVTLm1hcCgobXMpID0+IG1zIC8gMWUzKTtcbnZhciBISVNUT0dSQU1fTUVUUklDUyA9IChcbiAgLyogICAgICAgICAgICAgICAgKi9cbiAge1xuICAgIHN3aW5nc2V0X2NyYW5rX3Byb2Nlc3NpbmdfdGltZToge1xuICAgICAgZGVzY3JpcHRpb246IFwiUHJvY2Vzc2luZyB0aW1lIHBlciBjcmFuayAobXMpXCIsXG4gICAgICB1bml0OiBcIm1zXCIsXG4gICAgICBib3VuZGFyaWVzOiBBcnJheS5vZigxLCAxMSwgMjEsIDMxLCA0MSwgNTEsIDYxLCA3MSwgODEsIDkxLCBJbmZpbml0eSlcbiAgICB9LFxuICAgIHN3aW5nc2V0X2Jsb2NrX3Byb2Nlc3Npbmdfc2Vjb25kczoge1xuICAgICAgZGVzY3JpcHRpb246IFwiUHJvY2Vzc2luZyB0aW1lIHBlciBibG9ja1wiLFxuICAgICAgdW5pdDogXCJzXCIsXG4gICAgICBib3VuZGFyaWVzOiBISVNUT0dSQU1fU0VDT05EU19MQVRFTkNZX0JPVU5EQVJJRVNcbiAgICB9LFxuICAgIHN3aW5nc2V0X3ZhdF9zdGFydHVwOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJWYXQgc3RhcnR1cCB0aW1lIChtcylcIixcbiAgICAgIHVuaXQ6IFwibXNcIixcbiAgICAgIGJvdW5kYXJpZXM6IEhJU1RPR1JBTV9NU19MQVRFTkNZX0JPVU5EQVJJRVNcbiAgICB9LFxuICAgIHN3aW5nc2V0X3ZhdF9kZWxpdmVyeToge1xuICAgICAgZGVzY3JpcHRpb246IFwiVmF0IGRlbGl2ZXJ5IHRpbWUgKG1zKVwiLFxuICAgICAgdW5pdDogXCJtc1wiLFxuICAgICAgYm91bmRhcmllczogSElTVE9HUkFNX01TX0xBVEVOQ1lfQk9VTkRBUklFU1xuICAgIH0sXG4gICAgc3dpbmdzZXRfbWV0ZXJfdXNhZ2U6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlZhdCBtZXRlciB1c2FnZVwiLFxuICAgICAgdW5pdDogXCJtc1wiLFxuICAgICAgYm91bmRhcmllczogSElTVE9HUkFNX01TX0xBVEVOQ1lfQk9VTkRBUklFU1xuICAgIH1cbiAgfVxuKTtcbnZhciBibG9ja0hpc3RvZ3JhbU1ldHJpY0Rlc2MgPSB7XG4gIC8vXG4gIC8vXG4gIC8vXG4gIC8vXG4gIHVuaXQ6IFwic1wiLFxuICBhZHZpY2U6IHtcbiAgICBleHBsaWNpdEJ1Y2tldEJvdW5kYXJpZXM6IFtcbiAgICAgIDAuMSxcbiAgICAgIDAuMixcbiAgICAgIDAuMyxcbiAgICAgIDAuNCxcbiAgICAgIDAuNSxcbiAgICAgIDEsXG4gICAgICAyLFxuICAgICAgMyxcbiAgICAgIDQsXG4gICAgICA1LFxuICAgICAgNixcbiAgICAgIDcsXG4gICAgICAxMCxcbiAgICAgIDE1LFxuICAgICAgMzBcbiAgICBdXG4gIH1cbn07XG52YXIgQkxPQ0tfSElTVE9HUkFNX01FVFJJQ1MgPSAoXG4gIC8qICAgICAgICAgICAgICAgICovXG4gIHtcbiAgICBzd2luZ3NldFJ1blNlY29uZHM6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlBlci1ibG9jayB0aW1lIHNwZW50IGV4ZWN1dGluZyBTd2luZ1NldFwiLFxuICAgICAgLi4uYmxvY2tIaXN0b2dyYW1NZXRyaWNEZXNjXG4gICAgfSxcbiAgICBzd2luZ3NldENoYWluU2F2ZVNlY29uZHM6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlBlci1ibG9jayB0aW1lIHNwZW50IHByb3BhZ2F0aW5nIFN3aW5nU2V0IHN0YXRlIGludG8gY29zbW9zXCIsXG4gICAgICAuLi5ibG9ja0hpc3RvZ3JhbU1ldHJpY0Rlc2NcbiAgICB9LFxuICAgIHN3aW5nc2V0Q29tbWl0U2Vjb25kczoge1xuICAgICAgZGVzY3JpcHRpb246IFwiUGVyLWJsb2NrIHRpbWUgc3BlbnQgY29tbWl0dGluZyBTd2luZ1NldCBzdGF0ZSB0byBob3N0IHN0b3JhZ2VcIixcbiAgICAgIC4uLmJsb2NrSGlzdG9ncmFtTWV0cmljRGVzY1xuICAgIH0sXG4gICAgY29zbW9zQ29tbWl0U2Vjb25kczoge1xuICAgICAgZGVzY3JpcHRpb246IFwiUGVyLWJsb2NrIHRpbWUgc3BlbnQgY29tbWl0dGluZyBjb3Ntb3Mgc3RhdGVcIixcbiAgICAgIC4uLmJsb2NrSGlzdG9ncmFtTWV0cmljRGVzY1xuICAgIH0sXG4gICAgZnVsbENvbW1pdFNlY29uZHM6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlBlci1ibG9jayB0aW1lIHNwZW50IGNvbW1pdHRpbmcgc3RhdGUsIGluY2x1c2l2ZSBvZiBDT01NSVRfQkxPQ0sgcHJvY2Vzc2luZyBwbHVzIHRpbWUgc3BlbnQgW291dHNpZGUgb2YgY29zbWljLXN3aW5nc2V0XSBiZWZvcmUgYW5kIGFmdGVyIGl0XCIsXG4gICAgICAuLi5ibG9ja0hpc3RvZ3JhbU1ldHJpY0Rlc2NcbiAgICB9LFxuICAgIGludGVyQmxvY2tTZWNvbmRzOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJUaW1lIHNwZW50IGlkbGUgYmV0d2VlbiBibG9ja3NcIixcbiAgICAgIC4uLmJsb2NrSGlzdG9ncmFtTWV0cmljRGVzY1xuICAgIH0sXG4gICAgYWZ0ZXJDb21taXRIYW5nb3ZlclNlY29uZHM6IHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlBlci1ibG9jayB0aW1lIHNwZW50IHdhaXRpbmcgZm9yIHByZXZpb3VzLWJsb2NrIGFmdGVyQ29tbWl0IHdvcmtcIixcbiAgICAgIC4uLmJsb2NrSGlzdG9ncmFtTWV0cmljRGVzY1xuICAgIH0sXG4gICAgYmxvY2tMYWdTZWNvbmRzOiB7XG4gICAgICBkZXNjcmlwdGlvbjogXCJUaGUgZGVsYXkgb2YgZWFjaCBibG9jayBmcm9tIGl0cyBleHBlY3RlZCBiZWdpbiB0aW1lXCIsXG4gICAgICAuLi5ibG9ja0hpc3RvZ3JhbU1ldHJpY0Rlc2MsXG4gICAgICAvL1xuICAgICAgYWR2aWNlOiB7XG4gICAgICAgIC4uLmJsb2NrSGlzdG9ncmFtTWV0cmljRGVzYy5hZHZpY2UsXG4gICAgICAgIGV4cGxpY2l0QnVja2V0Qm91bmRhcmllczogKFxuICAgICAgICAgIC8qICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgW1xuICAgICAgICAgICAgLi4uYmxvY2tIaXN0b2dyYW1NZXRyaWNEZXNjLmFkdmljZS5leHBsaWNpdEJ1Y2tldEJvdW5kYXJpZXMsXG4gICAgICAgICAgICAuLi5bNjAsIDEyMCwgMTgwLCAyNDAsIDMwMCwgNjAwLCAzNjAwXVxuICAgICAgICAgIF1cbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cbiAgfVxuKTtcbnZhciBNZXRyaWNUeXBlID0gKFxuICAvKiAgICAgICAgICAgICAgICAqL1xuICB7XG4gICAgQ291bnRlcjogXCJjb3VudGVyXCIsXG4gICAgR2F1Z2U6IFwiZ2F1Z2VcIlxuICB9XG4pO1xudmFyIEtFUk5FTF9TVEFUU19TVU1fTUVUUklDUyA9IFtcbiAge1xuICAgIGtleTogXCJzeXNjYWxsc1wiLFxuICAgIG5hbWU6IFwic3dpbmdzZXRfYWxsX3N5c2NhbGxfdG90YWxcIixcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQga2VybmVsIGNhbGxzXCJcbiAgfSxcbiAge1xuICAgIGtleTogXCJzeXNjYWxsU2VuZFwiLFxuICAgIG5hbWU6IFwic3dpbmdzZXRfc3lzY2FsbF90b3RhbFwiLFxuICAgIHN1YjogeyBkaW1lbnNpb246IFwic3lzY2FsbFwiLCB2YWx1ZTogXCJzZW5kXCIgfSxcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQgbWVzc2FnZSBzZW5kIGtlcm5lbCBjYWxsc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwic3lzY2FsbENhbGxOb3dcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X3N5c2NhbGxfdG90YWxcIixcbiAgICBzdWI6IHsgZGltZW5zaW9uOiBcInN5c2NhbGxcIiwgdmFsdWU6IFwiY2FsbE5vd1wiIH0sXG4gICAgZGVzY3JpcHRpb246IFwiVG90YWwgbnVtYmVyIG9mIFN3aW5nU2V0IHN5bmNocm9ub3VzIGRldmljZSBrZXJuZWwgY2FsbHNcIlxuICB9LFxuICB7XG4gICAga2V5OiBcInN5c2NhbGxTdWJzY3JpYmVcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X3N5c2NhbGxfdG90YWxcIixcbiAgICBzdWI6IHsgZGltZW5zaW9uOiBcInN5c2NhbGxcIiwgdmFsdWU6IFwic3Vic2NyaWJlXCIgfSxcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQgcHJvbWlzZSBzdWJzY3JpcHRpb24ga2VybmVsIGNhbGxzXCJcbiAgfSxcbiAge1xuICAgIGtleTogXCJzeXNjYWxsUmVzb2x2ZVwiLFxuICAgIG5hbWU6IFwic3dpbmdzZXRfc3lzY2FsbF90b3RhbFwiLFxuICAgIHN1YjogeyBkaW1lbnNpb246IFwic3lzY2FsbFwiLCB2YWx1ZTogXCJyZXNvbHZlXCIgfSxcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQgcHJvbWlzZSByZXNvbHV0aW9uIGtlcm5lbCBjYWxsc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwic3lzY2FsbEV4aXRcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X3N5c2NhbGxfdG90YWxcIixcbiAgICBzdWI6IHsgZGltZW5zaW9uOiBcInN5c2NhbGxcIiwgdmFsdWU6IFwiZXhpdFwiIH0sXG4gICAgZGVzY3JpcHRpb246IFwiVG90YWwgbnVtYmVyIG9mIFN3aW5nU2V0IHZhdCBleGl0IGtlcm5lbCBjYWxsc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwic3lzY2FsbFZhdHN0b3JlR2V0XCIsXG4gICAgbmFtZTogXCJzd2luZ3NldF9zeXNjYWxsX3RvdGFsXCIsXG4gICAgc3ViOiB7IGRpbWVuc2lvbjogXCJzeXNjYWxsXCIsIHZhbHVlOiBcInZhdHN0b3JlR2V0XCIgfSxcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQgdmF0c3RvcmUgZ2V0IGtlcm5lbCBjYWxsc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwic3lzY2FsbFZhdHN0b3JlU2V0XCIsXG4gICAgbmFtZTogXCJzd2luZ3NldF9zeXNjYWxsX3RvdGFsXCIsXG4gICAgc3ViOiB7IGRpbWVuc2lvbjogXCJzeXNjYWxsXCIsIHZhbHVlOiBcInZhdHN0b3JlU2V0XCIgfSxcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQgdmF0c3RvcmUgc2V0IGtlcm5lbCBjYWxsc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwic3lzY2FsbFZhdHN0b3JlR2V0TmV4dEtleVwiLFxuICAgIG5hbWU6IFwic3dpbmdzZXRfc3lzY2FsbF90b3RhbFwiLFxuICAgIHN1YjogeyBkaW1lbnNpb246IFwic3lzY2FsbFwiLCB2YWx1ZTogXCJ2YXRzdG9yZUdldE5leHRcIiB9LFxuICAgIGRlc2NyaXB0aW9uOiBcIlRvdGFsIG51bWJlciBvZiBTd2luZ1NldCB2YXRzdG9yZSBnZXROZXh0S2V5IGtlcm5lbCBjYWxsc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwic3lzY2FsbFZhdHN0b3JlRGVsZXRlXCIsXG4gICAgbmFtZTogXCJzd2luZ3NldF9zeXNjYWxsX3RvdGFsXCIsXG4gICAgc3ViOiB7IGRpbWVuc2lvbjogXCJzeXNjYWxsXCIsIHZhbHVlOiBcInZhdHN0b3JlRGVsZXRlXCIgfSxcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQgdmF0c3RvcmUgZGVsZXRlIGtlcm5lbCBjYWxsc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwic3lzY2FsbERyb3BJbXBvcnRzXCIsXG4gICAgbmFtZTogXCJzd2luZ3NldF9zeXNjYWxsX3RvdGFsXCIsXG4gICAgc3ViOiB7IGRpbWVuc2lvbjogXCJzeXNjYWxsXCIsIHZhbHVlOiBcImRyb3BJbXBvcnRzXCIgfSxcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQgZHJvcCBpbXBvcnRzIGtlcm5lbCBjYWxsc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwiZGlzcGF0Y2hlc1wiLFxuICAgIG5hbWU6IFwic3dpbmdzZXRfZGlzcGF0Y2hfdG90YWxcIixcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQgdmF0IGNhbGxzXCJcbiAgfSxcbiAge1xuICAgIGtleTogXCJkaXNwYXRjaERlbGl2ZXJcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X2Rpc3BhdGNoX2RlbGl2ZXJfdG90YWxcIixcbiAgICBkZXNjcmlwdGlvbjogXCJUb3RhbCBudW1iZXIgb2YgU3dpbmdTZXQgdmF0IG1lc3NhZ2UgZGVsaXZlcmllc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwiZGlzcGF0Y2hOb3RpZnlcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X2Rpc3BhdGNoX25vdGlmeV90b3RhbFwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlRvdGFsIG51bWJlciBvZiBTd2luZ1NldCB2YXQgcHJvbWlzZSBub3RpZmljYXRpb25zXCJcbiAgfVxuXTtcbnZhciBLRVJORUxfU1RBVFNfVVBET1dOX01FVFJJQ1MgPSBbXG4gIHtcbiAgICBrZXk6IFwia2VybmVsT2JqZWN0c1wiLFxuICAgIG5hbWU6IFwic3dpbmdzZXRfa2VybmVsX29iamVjdHNcIixcbiAgICBkZXNjcmlwdGlvbjogXCJBY3RpdmUga2VybmVsIG9iamVjdHNcIlxuICB9LFxuICB7XG4gICAga2V5OiBcImtlcm5lbERldmljZXNcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X2tlcm5lbF9kZXZpY2VzXCIsXG4gICAgZGVzY3JpcHRpb246IFwiQWN0aXZlIGtlcm5lbCBkZXZpY2VzXCJcbiAgfSxcbiAge1xuICAgIGtleTogXCJrZXJuZWxQcm9taXNlc1wiLFxuICAgIG5hbWU6IFwic3dpbmdzZXRfa2VybmVsX3Byb21pc2VzXCIsXG4gICAgZGVzY3JpcHRpb246IFwiQWN0aXZlIGtlcm5lbCBwcm9taXNlc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwia3BVbnJlc29sdmVkXCIsXG4gICAgbmFtZTogXCJzd2luZ3NldF91bnJlc29sdmVkX2tlcm5lbF9wcm9taXNlc1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlVucmVzb2x2ZWQga2VybmVsIHByb21pc2VzXCJcbiAgfSxcbiAge1xuICAgIGtleTogXCJrcEZ1bGZpbGxlZFwiLFxuICAgIG5hbWU6IFwic3dpbmdzZXRfZnVsZmlsbGVkX2tlcm5lbF9wcm9taXNlc1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkZ1bGZpbGxlZCBrZXJuZWwgcHJvbWlzZXNcIlxuICB9LFxuICB7XG4gICAga2V5OiBcImtwUmVqZWN0ZWRcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X3JlamVjdGVkX2tlcm5lbF9wcm9taXNlc1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlJlamVjdGVkIGtlcm5lbCBwcm9taXNlc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwicnVuUXVldWVMZW5ndGhcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X3J1bl9xdWV1ZV9sZW5ndGhcIixcbiAgICBjb25zZW5zdXM6IHRydWUsXG4gICAgZGVzY3JpcHRpb246IFwiTGVuZ3RoIG9mIHRoZSBrZXJuZWwgcnVuIHF1ZXVlXCJcbiAgfSxcbiAge1xuICAgIGtleTogXCJhY2NlcHRhbmNlUXVldWVMZW5ndGhcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X2FjY2VwdGFuY2VfcXVldWVfbGVuZ3RoXCIsXG4gICAgY29uc2Vuc3VzOiB0cnVlLFxuICAgIGRlc2NyaXB0aW9uOiBcIkxlbmd0aCBvZiB0aGUga2VybmVsIGFjY2VwdGFuY2UgcXVldWVcIlxuICB9LFxuICB7XG4gICAga2V5OiBcInByb21pc2VRdWV1ZXNMZW5ndGhcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X3Byb21pc2VfcXVldWVzX2xlbmd0aFwiLFxuICAgIGNvbnNlbnN1czogdHJ1ZSxcbiAgICBkZXNjcmlwdGlvbjogXCJDb21iaW5lZCBsZW5ndGggb2YgYWxsIGtlcm5lbCBwcm9taXNlIHF1ZXVlc1wiXG4gIH0sXG4gIHtcbiAgICBrZXk6IFwiY2xpc3RFbnRyaWVzXCIsXG4gICAgbmFtZTogXCJzd2luZ3NldF9jbGlzdF9lbnRyaWVzXCIsXG4gICAgZGVzY3JpcHRpb246IFwiTnVtYmVyIG9mIGVudHJpZXMgaW4gdGhlIGtlcm5lbCBjLWxpc3RcIlxuICB9LFxuICB7XG4gICAga2V5OiBcInZhdHNcIixcbiAgICBuYW1lOiBcInN3aW5nc2V0X3ZhdHNcIixcbiAgICBkZXNjcmlwdGlvbjogXCJOdW1iZXIgb2YgYWN0aXZlIHZhdHNcIlxuICB9XG5dO1xudmFyIHsgQ291bnRlciwgR2F1Z2UgfSA9IE1ldHJpY1R5cGU7XG52YXIgS0VSTkVMX1NUQVRTX01FVFJJQ1MgPSBoYXJkZW4oW1xuICAuLi5LRVJORUxfU1RBVFNfU1VNX01FVFJJQ1MubWFwKChtMikgPT4gKHsgLi4ubTIsIG1ldHJpY1R5cGU6IENvdW50ZXIgfSkpLFxuICAuLi5LRVJORUxfU1RBVFNfVVBET1dOX01FVFJJQ1MubWFwKChtMikgPT4gKHsgLi4ubTIsIG1ldHJpY1R5cGU6IEdhdWdlIH0pKVxuXSk7XG52YXIga2VybmVsU3RhdHNLZXlzID0gLyogICAgICAgICAgICovIG5ldyBNYXAoKTtcbmZvciAoY29uc3QgeyBrZXkgfSBvZiBLRVJORUxfU1RBVFNfTUVUUklDUykge1xuICBrZXJuZWxTdGF0c0tleXMuc2V0KGtleSwgKGtlcm5lbFN0YXRzS2V5cy5nZXQoa2V5KSB8fCAwKSArIDEpO1xufVxudmFyIGR1cGxpY2F0ZUtlcm5lbFN0YXRzS2V5cyA9IFsuLi5rZXJuZWxTdGF0c0tleXMuZW50cmllcygpXS5mbGF0TWFwKFxuICAoW2tleSwgdmFsdWVdKSA9PiB2YWx1ZSA+IDEgPyBba2V5XSA6IFtdXG4pO1xuaWYgKGR1cGxpY2F0ZUtlcm5lbFN0YXRzS2V5cy5sZW5ndGggPiAwKSB7XG4gIGNvbnN0IG1zZyA9IGBEdXBsaWNhdGUga2VybmVsIHN0YXRzIGtleXMgJHtKU09OLnN0cmluZ2lmeShkdXBsaWNhdGVLZXJuZWxTdGF0c0tleXMpfWA7XG4gIHRocm93IEVycm9yKG1zZyk7XG59XG5cbi8vXG52YXIgY29tcGFyZU5hdHMgPSAoYTIsIGIzKSA9PiB7XG4gIGNvbnN0IGRpZmYgPSArYTIgLSArYjM7XG4gIGNvbnN0IGZpbml0ZURpZmYgPSBOdW1iZXIuaXNGaW5pdGUoZGlmZikgJiYgZGlmZiB8fCAoYTIgPT09IGIzID8gMCA6IE51bWJlcihCaWdJbnQoYTIpIC0gQmlnSW50KGIzKSkgfHwgYTIubGVuZ3RoIC0gYjMubGVuZ3RoKTtcbiAgcmV0dXJuIE1hdGguc2lnbihmaW5pdGVEaWZmKTtcbn07XG52YXIgY29tcGFyZVN0cmluZ3MgPSAoYTIsIGIzKSA9PiBhMiA+IGIzID8gMSA6IGEyIDwgYjMgPyAtMSA6IDA7XG52YXIgclByZWZpeGVkRGlnaXRzID0gL14oXFxEKikoXFxkKykoXFxELip8KS9zO1xudmFyIG5hdHVyYWxDb21wYXJlID0gKGEyLCBiMykgPT4ge1xuICBjb25zdCBbX2EsIGFQcmVmaXgsIGFEaWdpdHMsIGFTdWZmaXhdID0gclByZWZpeGVkRGlnaXRzLmV4ZWMoYTIpIHx8IFtdO1xuICBpZiAoYVByZWZpeCAhPT0gdm9pZCAwKSB7XG4gICAgY29uc3QgW19iLCBiUHJlZml4LCBiRGlnaXRzLCBiU3VmZml4XSA9IHJQcmVmaXhlZERpZ2l0cy5leGVjKGIzKSB8fCBbXTtcbiAgICBpZiAoYlByZWZpeCA9PT0gYVByZWZpeCkge1xuICAgICAgcmV0dXJuIGNvbXBhcmVOYXRzKGFEaWdpdHMsIGJEaWdpdHMpIHx8IGNvbXBhcmVTdHJpbmdzKGFTdWZmaXgsIGJTdWZmaXgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY29tcGFyZVN0cmluZ3MoYTIsIGIzKTtcbn07XG5oYXJkZW4obmF0dXJhbENvbXBhcmUpO1xuXG4vL1xudmFyIHsgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczcsIGNyZWF0ZTogY3JlYXRlNSwgZnJvbUVudHJpZXM6IGZyb21FbnRyaWVzMTEgfSA9IE9iamVjdDtcbnZhciB7IG93bktleXM6IG93bktleXMyMCB9ID0gUmVmbGVjdDtcbnZhciBvYmplY3RNZXRhTWFwID0gKG9yaWdpbmFsLCBtZXRhTWFwRm4sIHByb3RvID0gT2JqZWN0LnByb3RvdHlwZSkgPT4ge1xuICBjb25zdCBkZXNjcyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM3KG9yaWdpbmFsKTtcbiAgY29uc3Qga2V5czcgPSBvd25LZXlzMjAob3JpZ2luYWwpO1xuICBjb25zdCBkZXNjRW50cmllcyA9IChcbiAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAga2V5czcubWFwKChrZXkpID0+IFtrZXksIG1ldGFNYXBGbihkZXNjc1trZXldLCBrZXkpXSkuZmlsdGVyKChbX2tleSwgb3B0RGVzY10pID0+IG9wdERlc2MgIT09IHZvaWQgMClcbiAgKTtcbiAgcmV0dXJuIGhhcmRlbihjcmVhdGU1KHByb3RvLCBmcm9tRW50cmllczExKGRlc2NFbnRyaWVzKSkpO1xufTtcbmhhcmRlbihvYmplY3RNZXRhTWFwKTtcblxuLy9cbnZhciBmcmVlemU4ID0gKFxuICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gIE9iamVjdC5mcmVlemVcbik7XG52YXIgbWFrZVF1ZXVlID0gKCkgPT4ge1xuICBsZXQgeyBwcm9taXNlOiB0YWlsUHJvbWlzZSwgcmVzb2x2ZTogdGFpbFJlc29sdmUgfSA9IG1ha2VQcm9taXNlS2l0KCk7XG4gIHJldHVybiB7XG4gICAgcHV0KHZhbHVlKSB7XG4gICAgICBjb25zdCB7IHJlc29sdmU6IHJlc29sdmUyLCBwcm9taXNlIH0gPSBtYWtlUHJvbWlzZUtpdCgpO1xuICAgICAgdGFpbFJlc29sdmUoZnJlZXplOCh7IHZhbHVlLCBwcm9taXNlIH0pKTtcbiAgICAgIHRhaWxSZXNvbHZlID0gcmVzb2x2ZTI7XG4gICAgfSxcbiAgICBnZXQoKSB7XG4gICAgICBjb25zdCBwcm9taXNlID0gdGFpbFByb21pc2UudGhlbigobmV4dCkgPT4gbmV4dC52YWx1ZSk7XG4gICAgICB0YWlsUHJvbWlzZSA9IHRhaWxQcm9taXNlLnRoZW4oKG5leHQpID0+IG5leHQucHJvbWlzZSk7XG4gICAgICByZXR1cm4gaGFyZGVuKHByb21pc2UpO1xuICAgIH1cbiAgfTtcbn07XG5oYXJkZW4obWFrZVF1ZXVlKTtcbnZhciBtYWtlU3RyZWFtID0gKGFja3MsIGRhdGEpID0+IHtcbiAgY29uc3Qgc3RyZWFtID0gaGFyZGVuKHtcbiAgICAvKlxuXG4gICAgICovXG4gICAgbmV4dCh2YWx1ZSkge1xuICAgICAgZGF0YS5wdXQoZnJlZXplOCh7IHZhbHVlLCBkb25lOiBmYWxzZSB9KSk7XG4gICAgICByZXR1cm4gYWNrcy5nZXQoKTtcbiAgICB9LFxuICAgIC8qXG5cbiAgICAgKi9cbiAgICByZXR1cm4odmFsdWUpIHtcbiAgICAgIGRhdGEucHV0KGZyZWV6ZTgoeyB2YWx1ZSwgZG9uZTogdHJ1ZSB9KSk7XG4gICAgICByZXR1cm4gYWNrcy5nZXQoKTtcbiAgICB9LFxuICAgIC8qXG5cbiAgICAgKi9cbiAgICB0aHJvdyhlcnJvcikge1xuICAgICAgZGF0YS5wdXQoaGFyZGVuKFByb21pc2UucmVqZWN0KGVycm9yKSkpO1xuICAgICAgcmV0dXJuIGFja3MuZ2V0KCk7XG4gICAgfSxcbiAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc3RyZWFtO1xufTtcbmhhcmRlbihtYWtlU3RyZWFtKTtcbnZhciBtYWtlUGlwZSA9ICgpID0+IHtcbiAgY29uc3QgZGF0YSA9IG1ha2VRdWV1ZSgpO1xuICBjb25zdCBhY2tzID0gbWFrZVF1ZXVlKCk7XG4gIGNvbnN0IHJlYWRlciA9IG1ha2VTdHJlYW0oYWNrcywgZGF0YSk7XG4gIGNvbnN0IHdyaXRlciA9IG1ha2VTdHJlYW0oZGF0YSwgYWNrcyk7XG4gIHJldHVybiBoYXJkZW4oW3dyaXRlciwgcmVhZGVyXSk7XG59O1xuaGFyZGVuKG1ha2VQaXBlKTtcbnZhciBwdW1wID0gYXN5bmMgKHdyaXRlciwgcmVhZGVyLCBwcmltZXIpID0+IHtcbiAgY29uc3QgdGljayA9IChwcm9taXNlKSA9PiBFLndoZW4oXG4gICAgcHJvbWlzZSxcbiAgICAocmVzdWx0KSA9PiB7XG4gICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0dXJuIHdyaXRlci5yZXR1cm4ocmVzdWx0LnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0b2NrKHdyaXRlci5uZXh0KHJlc3VsdC52YWx1ZSkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgKGVycm9yKSA9PiB7XG4gICAgICByZXR1cm4gd3JpdGVyLnRocm93KGVycm9yKTtcbiAgICB9XG4gICk7XG4gIGNvbnN0IHRvY2sgPSAocHJvbWlzZSkgPT4gRS53aGVuKFxuICAgIHByb21pc2UsXG4gICAgKHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgIHJldHVybiByZWFkZXIucmV0dXJuKHJlc3VsdC52YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGljayhyZWFkZXIubmV4dChyZXN1bHQudmFsdWUpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIChlcnJvcikgPT4ge1xuICAgICAgcmV0dXJuIHJlYWRlci50aHJvdyhlcnJvcik7XG4gICAgfVxuICApO1xuICBhd2FpdCB0aWNrKHJlYWRlci5uZXh0KHByaW1lcikpO1xuICByZXR1cm4gdm9pZCAwO1xufTtcbmhhcmRlbihwdW1wKTtcbnZhciBwcmltZSA9IChnZW5lcmF0b3IsIHByaW1lcikgPT4ge1xuICBjb25zdCBmaXJzdCA9IGdlbmVyYXRvci5uZXh0KHByaW1lcik7XG4gIGxldCByZXN1bHQ7XG4gIGNvbnN0IHByaW1lZCA9IGhhcmRlbih7XG4gICAgLyogICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIGFzeW5jIG5leHQodmFsdWUpIHtcbiAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkge1xuICAgICAgICByZXN1bHQgPSBhd2FpdCBmaXJzdDtcbiAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGdlbmVyYXRvci5uZXh0KHZhbHVlKTtcbiAgICB9LFxuICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgYXN5bmMgcmV0dXJuKHZhbHVlKSB7XG4gICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIHtcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgZmlyc3Q7XG4gICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBnZW5lcmF0b3IucmV0dXJuKHZhbHVlKTtcbiAgICB9LFxuICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIGFzeW5jIHRocm93KGVycm9yKSB7XG4gICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIHtcbiAgICAgICAgcmVzdWx0ID0gYXdhaXQgZmlyc3Q7XG4gICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZ2VuZXJhdG9yLnRocm93KGVycm9yKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcHJpbWVkO1xufTtcbmhhcmRlbihwcmltZSk7XG52YXIgbWFwUmVhZGVyID0gKHJlYWRlciwgdHJhbnNmb3JtKSA9PiB7XG4gIGFzeW5jIGZ1bmN0aW9uKiB0cmFuc2Zvcm1HZW5lcmF0b3IoKSB7XG4gICAgZm9yIGF3YWl0IChjb25zdCB2YWx1ZSBvZiByZWFkZXIpIHtcbiAgICAgIHlpZWxkIHRyYW5zZm9ybSh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgaGFyZGVuKHRyYW5zZm9ybUdlbmVyYXRvcik7XG4gIHJldHVybiBoYXJkZW4odHJhbnNmb3JtR2VuZXJhdG9yKCkpO1xufTtcbmhhcmRlbihtYXBSZWFkZXIpO1xudmFyIG1hcFdyaXRlciA9ICh3cml0ZXIsIHRyYW5zZm9ybSkgPT4ge1xuICBjb25zdCB0cmFuc2Zvcm1lZFdyaXRlciA9IGhhcmRlbih7XG4gICAgLypcblxuICAgICAqL1xuICAgIGFzeW5jIG5leHQodmFsdWUpIHtcbiAgICAgIHJldHVybiB3cml0ZXIubmV4dCh0cmFuc2Zvcm0odmFsdWUpKTtcbiAgICB9LFxuICAgIC8qXG5cbiAgICAgKi9cbiAgICBhc3luYyB0aHJvdyhlcnJvcikge1xuICAgICAgcmV0dXJuIHdyaXRlci50aHJvdyhlcnJvcik7XG4gICAgfSxcbiAgICAvKlxuXG4gICAgICovXG4gICAgYXN5bmMgcmV0dXJuKHZhbHVlKSB7XG4gICAgICByZXR1cm4gd3JpdGVyLnJldHVybih2YWx1ZSk7XG4gICAgfSxcbiAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgcmV0dXJuIHRyYW5zZm9ybWVkV3JpdGVyO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB0cmFuc2Zvcm1lZFdyaXRlcjtcbn07XG5oYXJkZW4obWFwV3JpdGVyKTtcblxuLy9cbnZhciBtYWtlUHJvbWlzZSA9IChleGVjdXRvcikgPT4gaGFyZGVuKG5ldyBQcm9taXNlKGV4ZWN1dG9yKSk7XG5oYXJkZW4obWFrZVByb21pc2UpO1xudmFyIG1ha2VNYXAgPSAoZW50cmllc09ySXRlcmFibGUpID0+IGhhcmRlbihuZXcgTWFwKGVudHJpZXNPckl0ZXJhYmxlKSk7XG5oYXJkZW4obWFrZU1hcCk7XG52YXIgbWFrZVNldCA9ICh2YWx1ZXM4KSA9PiBoYXJkZW4obmV3IFNldCh2YWx1ZXM4KSk7XG5oYXJkZW4obWFrZVNldCk7XG52YXIgbWFrZVdlYWtNYXAgPSAoZW50cmllczEwKSA9PiBoYXJkZW4obmV3IFdlYWtNYXAoZW50cmllczEwKSk7XG5oYXJkZW4obWFrZVdlYWtNYXApO1xudmFyIG1ha2VXZWFrU2V0ID0gKHZhbHVlczgpID0+IGhhcmRlbihuZXcgV2Vha1NldCh2YWx1ZXM4KSk7XG5oYXJkZW4obWFrZVdlYWtTZXQpO1xuXG4vL1xudmFyIGFzeW5jR2VuZXJhdGUgPSAobmV4dCkgPT4ge1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdOiAoKSA9PiB7XG4gICAgICByZXR1cm4gaGFyZGVuKHtcbiAgICAgICAgbmV4dDogYXN5bmMgKCkgPT4gaGFyZGVuKG5leHQoKSlcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuaGFyZGVuKGFzeW5jR2VuZXJhdGUpO1xuXG4vL1xudmFyIGFzeW5jRG9XaGlsZSA9IChib2R5KSA9PiB7XG4gIHJldHVybiBtYWtlUHJvbWlzZSgocmVzb2x2ZTIsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGxvb3AgPSBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBkb0NvbnRpbnVlID0gYXdhaXQgYm9keSgpO1xuICAgICAgaWYgKCFkb0NvbnRpbnVlKSB7XG4gICAgICAgIHJlc29sdmUyKHZvaWQgMCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvb3AoKS5jYXRjaChyZWplY3QpO1xuICAgIH07XG4gICAgbG9vcCgpLmNhdGNoKHJlamVjdCk7XG4gIH0pO1xufTtcbmhhcmRlbihhc3luY0RvV2hpbGUpO1xuXG4vL1xudmFyIHsgZnJvbUVudHJpZXM6IGZyb21FbnRyaWVzMTIsIGtleXMsIHZhbHVlczogdmFsdWVzNCB9ID0gT2JqZWN0O1xudmFyIG1ha2VMaW1pdGVkQ29uc29sZSA9IChtYWtlTG9nZ2VyKSA9PiB7XG4gIGNvbnN0IGxpbWl0ZWRDb25zb2xlID0gKFxuICAgIC8qICAgICAgICAgICAgICAqL1xuICAgIGZyb21FbnRyaWVzMTIobG9nTGV2ZWxzLm1hcCgobGV2ZWwpID0+IFtsZXZlbCwgbWFrZUxvZ2dlcihsZXZlbCldKSlcbiAgKTtcbiAgcmV0dXJuIChcbiAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIGhhcmRlbihsaW1pdGVkQ29uc29sZSlcbiAgKTtcbn07XG5oYXJkZW4obWFrZUxpbWl0ZWRDb25zb2xlKTtcbnZhciBhc3NlcnRBbGxEZWZpbmVkID0gKG9iaikgPT4ge1xuICBjb25zdCBtaXNzaW5nMiA9IFtdO1xuICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXMob2JqKSkge1xuICAgIGlmICh2YWwgPT09IHZvaWQgMCkge1xuICAgICAgbWlzc2luZzIucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICBpZiAobWlzc2luZzIubGVuZ3RoID4gMCkge1xuICAgIHRocm93UmVkYWN0ZWRgbWlzc2luZyAke3F1b3RlKG1pc3NpbmcyKX1gO1xuICB9XG59O1xudmFyIG5vdERvbmUgPSBoYXJkZW4oeyBkb25lOiBmYWxzZSwgdmFsdWU6IHZvaWQgMCB9KTtcbnZhciBhbHdheXNEb25lID0gaGFyZGVuKHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHZvaWQgMCB9KTtcbnZhciBmb3JldmVyID0gYXN5bmNHZW5lcmF0ZSgoKSA9PiBub3REb25lKTtcbnZhciB6aXAgPSAoeHMsIHlzKSA9PiBoYXJkZW4oeHMubWFwKCh4LCBpMykgPT4gW3gsIHlzWytpM11dKSk7XG52YXIgYWxsVmFsdWVzID0gYXN5bmMgKG9iaikgPT4ge1xuICBjb25zdCByZXNvbHZlZCA9IGF3YWl0IFByb21pc2UuYWxsKHZhbHVlczQob2JqKSk7XG4gIHJldHVybiBoYXJkZW4oZnJvbUVudHJpZXMxMih6aXAoa2V5cyhvYmopLCByZXNvbHZlZCkpKTtcbn07XG5cbi8vXG52YXIgbXVzdE1hdGNoMyA9IG11c3RNYXRjaDtcblxuLy9cbnZhciBTdG9yYWdlTm9kZVNoYXBlID0gTS5yZW1vdGFibGUoXCJTdG9yYWdlTm9kZVwiKTtcbnZhciBVbmd1YXJkZWRIZWxwZXJJID0gTS5pbnRlcmZhY2UoXG4gIFwiaGVscGVyXCIsXG4gIHt9LFxuICAvL1xuICB7IHNsb3BweTogdHJ1ZSB9XG4pO1xudmFyIEJyaWRnZUJpZ0ludFNoYXBlID0gTS5vcihNLm51bWJlcigpLCBNLnN0cmluZygpKTtcblxuLy9cbnZhciBwYWRkaW5nID0gXCI9XCI7XG52YXIgYWxwaGFiZXQ2NCA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xudmFyIG1vbm9kdTY0ID0ge307XG5mb3IgKGxldCBpMyA9IDA7IGkzIDwgYWxwaGFiZXQ2NC5sZW5ndGg7IGkzICs9IDEpIHtcbiAgY29uc3QgYzIgPSBhbHBoYWJldDY0W2kzXTtcbiAgbW9ub2R1NjRbYzJdID0gaTM7XG59XG5cbi8vXG52YXIganNFbmNvZGVCYXNlNjQgPSAoZGF0YSkgPT4ge1xuICBsZXQgc3RyaW5nID0gXCJcIjtcbiAgbGV0IHJlZ2lzdGVyID0gMDtcbiAgbGV0IHF1YW50dW0gPSAwO1xuICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgZGF0YS5sZW5ndGg7IGkzICs9IDEpIHtcbiAgICBjb25zdCBiMyA9IGRhdGFbaTNdO1xuICAgIHJlZ2lzdGVyID0gcmVnaXN0ZXIgPDwgOCB8IGIzO1xuICAgIHF1YW50dW0gKz0gODtcbiAgICBpZiAocXVhbnR1bSA9PT0gMjQpIHtcbiAgICAgIHN0cmluZyArPSBhbHBoYWJldDY0W3JlZ2lzdGVyID4+PiAxOCAmIDYzXSArIGFscGhhYmV0NjRbcmVnaXN0ZXIgPj4+IDEyICYgNjNdICsgYWxwaGFiZXQ2NFtyZWdpc3RlciA+Pj4gNiAmIDYzXSArIGFscGhhYmV0NjRbcmVnaXN0ZXIgPj4+IDAgJiA2M107XG4gICAgICByZWdpc3RlciA9IDA7XG4gICAgICBxdWFudHVtID0gMDtcbiAgICB9XG4gIH1cbiAgc3dpdGNoIChxdWFudHVtKSB7XG4gICAgY2FzZSAwOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSA4OlxuICAgICAgc3RyaW5nICs9IGFscGhhYmV0NjRbcmVnaXN0ZXIgPj4+IDIgJiA2M10gKyBhbHBoYWJldDY0W3JlZ2lzdGVyIDw8IDQgJiA2M10gKyBwYWRkaW5nICsgcGFkZGluZztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTY6XG4gICAgICBzdHJpbmcgKz0gYWxwaGFiZXQ2NFtyZWdpc3RlciA+Pj4gMTAgJiA2M10gKyBhbHBoYWJldDY0W3JlZ2lzdGVyID4+PiA0ICYgNjNdICsgYWxwaGFiZXQ2NFtyZWdpc3RlciA8PCAyICYgNjNdICsgcGFkZGluZztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBFcnJvcihgaW50ZXJuYWw6IGJhZCBxdWFudHVtICR7cXVhbnR1bX1gKTtcbiAgfVxuICByZXR1cm4gc3RyaW5nO1xufTtcbnZhciBlbmNvZGVCYXNlNjQgPSBnbG9iYWxUaGlzLkJhc2U2NCAhPT0gdm9pZCAwID8gZ2xvYmFsVGhpcy5CYXNlNjQuZW5jb2RlIDoganNFbmNvZGVCYXNlNjQ7XG5cbi8vXG52YXIganNEZWNvZGVCYXNlNjQgPSAoc3RyaW5nLCBuYW1lID0gXCI8dW5rbm93bj5cIikgPT4ge1xuICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoTWF0aC5jZWlsKHN0cmluZy5sZW5ndGggKiA0IC8gMykpO1xuICBsZXQgcmVnaXN0ZXIgPSAwO1xuICBsZXQgcXVhbnR1bSA9IDA7XG4gIGxldCBpMyA9IDA7XG4gIGxldCBqID0gMDtcbiAgd2hpbGUgKGkzIDwgc3RyaW5nLmxlbmd0aCAmJiBzdHJpbmdbaTNdICE9PSBwYWRkaW5nKSB7XG4gICAgY29uc3QgbnVtYmVyMiA9IG1vbm9kdTY0W3N0cmluZ1tpM11dO1xuICAgIGlmIChudW1iZXIyID09PSB2b2lkIDApIHtcbiAgICAgIHRocm93IEVycm9yKGBJbnZhbGlkIGJhc2U2NCBjaGFyYWN0ZXIgJHtzdHJpbmdbaTNdfSBpbiBzdHJpbmcgJHtuYW1lfWApO1xuICAgIH1cbiAgICByZWdpc3RlciA9IHJlZ2lzdGVyIDw8IDYgfCBudW1iZXIyO1xuICAgIHF1YW50dW0gKz0gNjtcbiAgICBpZiAocXVhbnR1bSA+PSA4KSB7XG4gICAgICBxdWFudHVtIC09IDg7XG4gICAgICBkYXRhW2pdID0gcmVnaXN0ZXIgPj4+IHF1YW50dW07XG4gICAgICBqICs9IDE7XG4gICAgICByZWdpc3RlciAmPSAoMSA8PCBxdWFudHVtKSAtIDE7XG4gICAgfVxuICAgIGkzICs9IDE7XG4gIH1cbiAgd2hpbGUgKHF1YW50dW0gPiAwKSB7XG4gICAgaWYgKGkzID09PSBzdHJpbmcubGVuZ3RoIHx8IHN0cmluZ1tpM10gIT09IHBhZGRpbmcpIHtcbiAgICAgIHRocm93IEVycm9yKGBNaXNzaW5nIHBhZGRpbmcgYXQgb2Zmc2V0ICR7aTN9IG9mIHN0cmluZyAke25hbWV9YCk7XG4gICAgfVxuICAgIGkzICs9IDE7XG4gICAgcXVhbnR1bSAtPSAyO1xuICB9XG4gIGlmIChpMyA8IHN0cmluZy5sZW5ndGgpIHtcbiAgICB0aHJvdyBFcnJvcihcbiAgICAgIGBCYXNlNjQgc3RyaW5nIGhhcyB0cmFpbGluZyBnYXJiYWdlICR7c3RyaW5nLnN1YnN0cihcbiAgICAgICAgaTNcbiAgICAgICl9IGluIHN0cmluZyAke25hbWV9YFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGRhdGEuc3ViYXJyYXkoMCwgaik7XG59O1xudmFyIGFkYXB0RGVjb2RlciA9IChuYXRpdmVEZWNvZGVCYXNlNjQpID0+ICguLi5hcmdzKSA9PiB7XG4gIGNvbnN0IGRlY29kZWQgPSBuYXRpdmVEZWNvZGVCYXNlNjQoLi4uYXJncyk7XG4gIGlmIChkZWNvZGVkIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgIHJldHVybiBkZWNvZGVkO1xuICB9XG4gIHJldHVybiBuZXcgVWludDhBcnJheShkZWNvZGVkKTtcbn07XG52YXIgZGVjb2RlQmFzZTY0ID0gZ2xvYmFsVGhpcy5CYXNlNjQgIT09IHZvaWQgMCA/IGFkYXB0RGVjb2RlcihnbG9iYWxUaGlzLkJhc2U2NC5kZWNvZGUpIDoganNEZWNvZGVCYXNlNjQ7XG5cbi8vXG52YXIgYXRvYjIgPSAoZW5jb2RlZERhdGEpID0+IHtcbiAgY29uc3QgYnVmID0gZGVjb2RlQmFzZTY0KGVuY29kZWREYXRhKTtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoLi4uYnVmKTtcbn07XG5cbi8vXG52YXIgY29lcmNlVG9CeXRlQXJyYXkgPSAoY29udGVudHMpID0+IHtcbiAgaWYgKHR5cGVvZiBjb250ZW50cyA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oY29udGVudHMsIChjMikgPT4ge1xuICAgICAgY29uc3QgYjMgPSBjMi5jaGFyQ29kZUF0KDApO1xuICAgICAgYjMgPD0gMjU1IHx8IHRocm93UmVkYWN0ZWRgY2hhcmFjdGVyIGNhbm5vdCBiZSBjb2VyY2VkIHRvIGFuIG9jdGV0OiAke2MyfWA7XG4gICAgICByZXR1cm4gYjM7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoY29udGVudHMgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KFxuICAgICAgY29udGVudHMuYnVmZmVyLFxuICAgICAgY29udGVudHMuYnl0ZU9mZnNldCxcbiAgICAgIGNvbnRlbnRzLmJ5dGVMZW5ndGhcbiAgICApO1xuICB9XG4gIHJldHVybiBuZXcgVWludDhBcnJheShjb250ZW50cyk7XG59O1xuZnVuY3Rpb24gdG9CeXRlcyhieXRlU291cmNlKSB7XG4gIGNvbnN0IGJ1ZiA9IGNvZXJjZVRvQnl0ZUFycmF5KGJ5dGVTb3VyY2UpO1xuICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSguLi5idWYpO1xufVxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyhzdHJpbmcpIHtcbiAgcmV0dXJuIHRvQnl0ZXMoZGVjb2RlQmFzZTY0KHN0cmluZykpO1xufVxuXG4vL1xudmFyIFNoYXBlMSA9IChcbiAgLyogICAgICAgICAgICAgICAgKi9cbiAge1xuICAgIC8qXG5cblxuICAgICAqL1xuICAgIERhdGE6IE0uc3RyaW5nKCksXG4gICAgQnl0ZXM6IE0uc3RyaW5nKCksXG4gICAgRW5kcG9pbnQ6IE0uc3RyaW5nKCksXG4gICAgVm93OiBNLnRhZ2dlZChcbiAgICAgIFwiVm93XCIsXG4gICAgICBoYXJkZW4oe1xuICAgICAgICB2b3dWMDogTS5yZW1vdGFibGUoXCJWb3dWMFwiKVxuICAgICAgfSlcbiAgICApLFxuICAgIENvbm5lY3Rpb25IYW5kbGVyOiBNLnJlbW90YWJsZShcIkNvbm5lY3Rpb25IYW5kbGVyXCIpLFxuICAgIENvbm5lY3Rpb246IE0ucmVtb3RhYmxlKFwiQ29ubmVjdGlvblwiKSxcbiAgICBJbmJvdW5kQXR0ZW1wdDogTS5yZW1vdGFibGUoXCJJbmJvdW5kQXR0ZW1wdFwiKSxcbiAgICBMaXN0ZW5lcjogTS5yZW1vdGFibGUoXCJMaXN0ZW5lclwiKSxcbiAgICBMaXN0ZW5IYW5kbGVyOiBNLnJlbW90YWJsZShcIkxpc3RlbkhhbmRsZXJcIiksXG4gICAgUG9ydDogTS5yZW1vdGFibGUoXCJQb3J0XCIpLFxuICAgIFByb3RvY29sSGFuZGxlcjogTS5yZW1vdGFibGUoXCJQcm90b2NvbEhhbmRsZXJcIiksXG4gICAgUHJvdG9jb2xJbXBsOiBNLnJlbW90YWJsZShcIlByb3RvY29sSW1wbFwiKVxuICB9XG4pO1xudmFyIFNlbmRPcHRpb25zU2hhcGUgPSBNLnNwbGl0UmVjb3JkKFxuICB7fSxcbiAgeyByZWxhdGl2ZVRpbWVvdXROczogTS5iaWdpbnQoKSB9XG4pO1xudmFyIFNoYXBlMiA9IChcbiAgLyogICAgICAgICAgICAgICAgKi9cbiAge1xuICAgIC4uLlNoYXBlMSxcbiAgICBWb3ckOiAoc2hhcGUpID0+IE0ub3Ioc2hhcGUsIFNoYXBlMS5Wb3cpLFxuICAgIEF0dGVtcHREZXNjcmlwdGlvbjogTS5zcGxpdFJlY29yZChcbiAgICAgIHsgaGFuZGxlcjogU2hhcGUxLkNvbm5lY3Rpb25IYW5kbGVyIH0sXG4gICAgICB7IHJlbW90ZUFkZHJlc3M6IFNoYXBlMS5FbmRwb2ludCwgbG9jYWxBZGRyZXNzOiBTaGFwZTEuRW5kcG9pbnQgfVxuICAgICksXG4gICAgT3B0czogU2VuZE9wdGlvbnNTaGFwZVxuICB9XG4pO1xudmFyIFNoYXBlID0gKFxuICAvKiAgICAgICAgICAgICAgICAqL1xuICBoYXJkZW4oe1xuICAgIC4uLlNoYXBlMixcbiAgICBDb25uZWN0aW9uSToge1xuICAgICAgY29ubmVjdGlvbjogTS5pbnRlcmZhY2UoXCJDb25uZWN0aW9uXCIsIHtcbiAgICAgICAgc2VuZDogTS5jYWxsV2hlbihTaGFwZTIuRGF0YSkub3B0aW9uYWwoU2hhcGUyLk9wdHMpLnJldHVybnMoU2hhcGUyLlZvdyQoU2hhcGUyLkJ5dGVzKSksXG4gICAgICAgIGNsb3NlOiBNLmNhbGxXaGVuKCkucmV0dXJucyhTaGFwZTIuVm93JChNLnVuZGVmaW5lZCgpKSksXG4gICAgICAgIGdldExvY2FsQWRkcmVzczogTS5jYWxsKCkucmV0dXJucyhTaGFwZTIuRW5kcG9pbnQpLFxuICAgICAgICBnZXRSZW1vdGVBZGRyZXNzOiBNLmNhbGwoKS5yZXR1cm5zKFNoYXBlMi5FbmRwb2ludClcbiAgICAgIH0pLFxuICAgICAgb3BlbkNvbm5lY3Rpb25BY2tXYXRjaGVyOiBNLmludGVyZmFjZShcIk9wZW5Db25uZWN0aW9uQWNrV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hbnkoKSkucmVzdChNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICB9KSxcbiAgICAgIHJldGhyb3dVbmxlc3NNaXNzaW5nV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJSZXRocm93VW5sZXNzTWlzc2luZ1dhdGNoZXJcIiwge1xuICAgICAgICBvblJlamVjdGVkOiBNLmNhbGwoTS5hbnkoKSkucmVzdChNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICB9KSxcbiAgICAgIHNpbmtXYXRjaGVyOiBNLmludGVyZmFjZShcIlNpbmtXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFueSgpKS5yZXN0KE0uYW55KCkpLnJldHVybnMoKVxuICAgICAgfSlcbiAgICB9LFxuICAgIEluYm91bmRBdHRlbXB0SToge1xuICAgICAgaW5ib3VuZEF0dGVtcHQ6IE0uaW50ZXJmYWNlKFwiSW5ib3VuZEF0dGVtcHRcIiwge1xuICAgICAgICBhY2NlcHQ6IE0uY2FsbFdoZW4oU2hhcGUyLkF0dGVtcHREZXNjcmlwdGlvbikucmV0dXJucyhcbiAgICAgICAgICBTaGFwZTIuVm93JChTaGFwZTIuQ29ubmVjdGlvbilcbiAgICAgICAgKSxcbiAgICAgICAgZ2V0TG9jYWxBZGRyZXNzOiBNLmNhbGwoKS5yZXR1cm5zKFNoYXBlMi5FbmRwb2ludCksXG4gICAgICAgIGdldFJlbW90ZUFkZHJlc3M6IE0uY2FsbCgpLnJldHVybnMoU2hhcGUyLkVuZHBvaW50KSxcbiAgICAgICAgY2xvc2U6IE0uY2FsbFdoZW4oKS5yZXR1cm5zKFNoYXBlMi5Wb3ckKE0udW5kZWZpbmVkKCkpKVxuICAgICAgfSksXG4gICAgICBpbmJvdW5kQXR0ZW1wdEFjY2VwdFdhdGNoZXI6IE0uaW50ZXJmYWNlKFwiSW5ib3VuZEF0dGVtcHRBY2NlcHRXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFueSgpKS5yZXN0KE0uYW55KCkpLnJldHVybnMoTS5hbnkoKSlcbiAgICAgIH0pLFxuICAgICAgcmV0aHJvd1VubGVzc01pc3NpbmdXYXRjaGVyOiBNLmludGVyZmFjZShcIlJldGhyb3dVbmxlc3NNaXNzaW5nV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uUmVqZWN0ZWQ6IE0uY2FsbChNLmFueSgpKS5yZXN0KE0uYW55KCkpLnJldHVybnMoTS5hbnkoKSlcbiAgICAgIH0pLFxuICAgICAgc2lua1dhdGNoZXI6IE0uaW50ZXJmYWNlKFwiU2lua1dhdGNoZXJcIiwge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uYW55KCkpLnJlc3QoTS5hbnkoKSkucmV0dXJucygpXG4gICAgICB9KVxuICAgIH0sXG4gICAgUG9ydEk6IHtcbiAgICAgIHBvcnQ6IE0uaW50ZXJmYWNlKFwiUG9ydFwiLCB7XG4gICAgICAgIGdldExvY2FsQWRkcmVzczogTS5jYWxsKCkucmV0dXJucyhTaGFwZTIuRW5kcG9pbnQpLFxuICAgICAgICBhZGRMaXN0ZW5lcjogTS5jYWxsV2hlbihTaGFwZTIuTGlzdGVuZXIpLnJldHVybnMoXG4gICAgICAgICAgU2hhcGUyLlZvdyQoTS51bmRlZmluZWQoKSlcbiAgICAgICAgKSxcbiAgICAgICAgY29ubmVjdDogTS5jYWxsV2hlbihTaGFwZTIuRW5kcG9pbnQpLm9wdGlvbmFsKFNoYXBlMi5Db25uZWN0aW9uSGFuZGxlcikucmV0dXJucyhTaGFwZTIuVm93JChTaGFwZTIuQ29ubmVjdGlvbikpLFxuICAgICAgICByZW1vdmVMaXN0ZW5lcjogTS5jYWxsV2hlbihTaGFwZTIuTGlzdGVuZXIpLnJldHVybnMoXG4gICAgICAgICAgU2hhcGUyLlZvdyQoTS51bmRlZmluZWQoKSlcbiAgICAgICAgKSxcbiAgICAgICAgcmV2b2tlOiBNLmNhbGxXaGVuKCkucmV0dXJucyhTaGFwZTIuVm93JChNLnVuZGVmaW5lZCgpKSlcbiAgICAgIH0pLFxuICAgICAgcG9ydEFkZExpc3RlbmVyV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJQb3J0QWRkTGlzdGVuZXJXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFueSgpKS5yZXN0KE0uYW55KCkpLnJldHVybnMoTS5hbnkoKSlcbiAgICAgIH0pLFxuICAgICAgcG9ydFJlbW92ZUxpc3RlbmVyV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJQb3J0UmVtb3ZlTGlzdGVuZXJXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFueSgpKS5yZXN0KE0uYW55KCkpLnJldHVybnMoTS5hbnkoKSlcbiAgICAgIH0pLFxuICAgICAgcG9ydENvbm5lY3RXYXRjaGVyOiBNLmludGVyZmFjZShcIlBvcnRDb25uZWN0V2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hbnkoKSkucmVzdChNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICB9KSxcbiAgICAgIHBvcnRSZXZva2VXYXRjaGVyOiBNLmludGVyZmFjZShcIlBvcnRSZXZva2VXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFueSgpKS5yZXN0KE0uYW55KCkpLnJldHVybnMoTS5hbnkoKSlcbiAgICAgIH0pLFxuICAgICAgcG9ydFJldm9rZUNsZWFudXBXYXRjaGVyOiBNLmludGVyZmFjZShcIlBvcnRSZXZva2VDbGVhbnVwV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hbnkoKSkucmVzdChNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICB9KSxcbiAgICAgIHJldGhyb3dVbmxlc3NNaXNzaW5nV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJSZXRocm93VW5sZXNzTWlzc2luZ1dhdGNoZXJcIiwge1xuICAgICAgICBvblJlamVjdGVkOiBNLmNhbGwoTS5hbnkoKSkucmVzdChNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICB9KSxcbiAgICAgIHNpbmtXYXRjaGVyOiBNLmludGVyZmFjZShcIlNpbmtXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFueSgpKS5yZXN0KE0uYW55KCkpLnJldHVybnMoKSxcbiAgICAgICAgb25SZWplY3RlZDogTS5jYWxsKE0uYW55KCkpLnJlc3QoTS5hbnkoKSkucmV0dXJucyhNLmFueSgpKVxuICAgICAgfSlcbiAgICB9LFxuICAgIFByb3RvY29sSGFuZGxlckk6IHtcbiAgICAgIHByb3RvY29sSGFuZGxlcjogTS5pbnRlcmZhY2UoXCJQcm90b2NvbEhhbmRsZXJcIiwge1xuICAgICAgICBvbkNyZWF0ZTogTS5jYWxsV2hlbihNLnJlbW90YWJsZSgpLCBTaGFwZTIuUHJvdG9jb2xIYW5kbGVyKS5yZXR1cm5zKFxuICAgICAgICAgIFNoYXBlMi5Wb3ckKE0udW5kZWZpbmVkKCkpXG4gICAgICAgICksXG4gICAgICAgIGdlbmVyYXRlUG9ydElEOiBNLmNhbGxXaGVuKFxuICAgICAgICAgIFNoYXBlMi5FbmRwb2ludCxcbiAgICAgICAgICBTaGFwZTIuUHJvdG9jb2xIYW5kbGVyXG4gICAgICAgICkucmV0dXJucyhTaGFwZTIuVm93JChNLnN0cmluZygpKSksXG4gICAgICAgIG9uQmluZDogTS5jYWxsV2hlbihcbiAgICAgICAgICBTaGFwZTIuUG9ydCxcbiAgICAgICAgICBTaGFwZTIuRW5kcG9pbnQsXG4gICAgICAgICAgU2hhcGUyLlByb3RvY29sSGFuZGxlclxuICAgICAgICApLnJldHVybnMoU2hhcGUyLlZvdyQoTS51bmRlZmluZWQoKSkpLFxuICAgICAgICBvbkxpc3RlbjogTS5jYWxsV2hlbihcbiAgICAgICAgICBTaGFwZTIuUG9ydCxcbiAgICAgICAgICBTaGFwZTIuRW5kcG9pbnQsXG4gICAgICAgICAgU2hhcGUyLkxpc3RlbkhhbmRsZXIsXG4gICAgICAgICAgU2hhcGUyLlByb3RvY29sSGFuZGxlclxuICAgICAgICApLnJldHVybnMoU2hhcGUyLlZvdyQoTS51bmRlZmluZWQoKSkpLFxuICAgICAgICBvbkxpc3RlblJlbW92ZTogTS5jYWxsV2hlbihcbiAgICAgICAgICBTaGFwZTIuUG9ydCxcbiAgICAgICAgICBTaGFwZTIuRW5kcG9pbnQsXG4gICAgICAgICAgU2hhcGUyLkxpc3RlbkhhbmRsZXIsXG4gICAgICAgICAgU2hhcGUyLlByb3RvY29sSGFuZGxlclxuICAgICAgICApLnJldHVybnMoU2hhcGUyLlZvdyQoTS51bmRlZmluZWQoKSkpLFxuICAgICAgICBvbkluc3RhbnRpYXRlOiBNLmNhbGxXaGVuKFxuICAgICAgICAgIFNoYXBlMi5Qb3J0LFxuICAgICAgICAgIFNoYXBlMi5FbmRwb2ludCxcbiAgICAgICAgICBTaGFwZTIuRW5kcG9pbnQsXG4gICAgICAgICAgU2hhcGUyLlByb3RvY29sSGFuZGxlclxuICAgICAgICApLnJldHVybnMoU2hhcGUyLlZvdyQoU2hhcGUyLkVuZHBvaW50KSksXG4gICAgICAgIG9uQ29ubmVjdDogTS5jYWxsV2hlbihcbiAgICAgICAgICBTaGFwZTIuUG9ydCxcbiAgICAgICAgICBTaGFwZTIuRW5kcG9pbnQsXG4gICAgICAgICAgU2hhcGUyLkVuZHBvaW50LFxuICAgICAgICAgIFNoYXBlMi5Db25uZWN0aW9uSGFuZGxlcixcbiAgICAgICAgICBTaGFwZTIuUHJvdG9jb2xIYW5kbGVyXG4gICAgICAgICkucmV0dXJucyhTaGFwZTIuVm93JChTaGFwZTIuQXR0ZW1wdERlc2NyaXB0aW9uKSksXG4gICAgICAgIG9uUmV2b2tlOiBNLmNhbGxXaGVuKFxuICAgICAgICAgIFNoYXBlMi5Qb3J0LFxuICAgICAgICAgIFNoYXBlMi5FbmRwb2ludCxcbiAgICAgICAgICBTaGFwZTIuUHJvdG9jb2xIYW5kbGVyXG4gICAgICAgICkucmV0dXJucyhTaGFwZTIuVm93JChNLnVuZGVmaW5lZCgpKSlcbiAgICAgIH0pLFxuICAgICAgcHJvdG9jb2xIYW5kbGVyQWNjZXB0V2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJQcm90b2NvbEhhbmRsZXJBY2NlcHRXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFueSgpKS5yZXN0KE0uYW55KCkpLnJldHVybnMoTS5hbnkoKSlcbiAgICAgIH0pLFxuICAgICAgcHJvdG9jb2xIYW5kbGVySW5zdGFudGlhdGVXYXRjaGVyOiBNLmludGVyZmFjZShcbiAgICAgICAgXCJQcm90b2NvbEhhbmRsZXJJbnN0YW50aWF0ZVdhdGNoZXJcIixcbiAgICAgICAge1xuICAgICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hbnkoKSkucmVzdChNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICAgIH1cbiAgICAgICksXG4gICAgICBwcm90b2NvbEhhbmRsZXJDb25uZWN0V2F0Y2hlcjogTS5pbnRlcmZhY2UoXG4gICAgICAgIFwiUHJvdG9jb2xIYW5kbGVyQ29ubmVjdFdhdGNoZXJcIixcbiAgICAgICAge1xuICAgICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hbnkoKSkucmVzdChNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICAgIH1cbiAgICAgICksXG4gICAgICByZXRocm93VW5sZXNzTWlzc2luZ1dhdGNoZXI6IE0uaW50ZXJmYWNlKFwiUmV0aHJvd1VubGVzc01pc3NpbmdXYXRjaGVyXCIsIHtcbiAgICAgICAgb25SZWplY3RlZDogTS5jYWxsKE0uYW55KCkpLnJlc3QoTS5hbnkoKSkucmV0dXJucyhNLmFueSgpKVxuICAgICAgfSlcbiAgICB9LFxuICAgIFByb3RvY29sSW1wbEk6IE0uaW50ZXJmYWNlKFwiUHJvdG9jb2xJbXBsXCIsIHtcbiAgICAgIGJpbmRQb3J0OiBNLmNhbGxXaGVuKFNoYXBlMi5FbmRwb2ludCkucmV0dXJucyhTaGFwZTIuVm93JChTaGFwZTIuUG9ydCkpLFxuICAgICAgaW5ib3VuZDogTS5jYWxsV2hlbihTaGFwZTIuRW5kcG9pbnQsIFNoYXBlMi5FbmRwb2ludCkucmV0dXJucyhcbiAgICAgICAgU2hhcGUyLlZvdyQoU2hhcGUyLkluYm91bmRBdHRlbXB0KVxuICAgICAgKSxcbiAgICAgIG91dGJvdW5kOiBNLmNhbGxXaGVuKFxuICAgICAgICBTaGFwZTIuUG9ydCxcbiAgICAgICAgU2hhcGUyLkVuZHBvaW50LFxuICAgICAgICBTaGFwZTIuQ29ubmVjdGlvbkhhbmRsZXJcbiAgICAgICkucmV0dXJucyhTaGFwZTIuVm93JChTaGFwZTIuQ29ubmVjdGlvbikpXG4gICAgfSlcbiAgfSlcbik7XG5cbi8vXG52YXIgc2luayA9ICgpID0+IHtcbn07XG5oYXJkZW4oc2luayk7XG52YXIgQ0xPU0VfUkVBU09OX0ZJTkFMSVpFUiA9IFwiY2xvc2VkLWJ5LWZpbmFsaXplclwiO1xudmFyIFJldm9rZVN0YXRlID0gKFxuICAvKiAgICAgICAgICAgICAgICAqL1xuICB7XG4gICAgTk9UX1JFVk9LRUQ6IDAsXG4gICAgUkVWT0tJTkc6IDEsXG4gICAgUkVWT0tFRDogMlxuICB9XG4pO1xuaGFyZGVuKFJldm9rZVN0YXRlKTtcbnZhciBwcmVwYXJlRmluYWxpemVyID0gKHpvbmUsIHsgd2F0Y2ggfSkgPT4ge1xuICBjb25zdCBvYmpUb0ZpbmFsaXplckluZm8gPSB6b25lLm1hcFN0b3JlKFwib2JqVG9GaW5hbGl6ZXJJbmZvXCIpO1xuICByZXR1cm4gem9uZS5leG8oXCJOZXR3b3JrRmluYWxpemVyXCIsIHZvaWQgMCwge1xuICAgIGhhcyhvYmopIHtcbiAgICAgIHJldHVybiBvYmpUb0ZpbmFsaXplckluZm8uaGFzKG9iaik7XG4gICAgfSxcbiAgICAvKlxuXG5cblxuXG4gICAgICovXG4gICAgaW5pdENvbm5lY3Rpb24oY29ubiwgaGFuZGxlcikge1xuICAgICAgb2JqVG9GaW5hbGl6ZXJJbmZvLmluaXQoY29ubiwgaGFyZGVuKHsgY29ubiwgaGFuZGxlciB9KSk7XG4gICAgfSxcbiAgICAvKlxuXG5cblxuICAgICAqL1xuICAgIGluaXRDbG9zZXIoY2xvc2VyKSB7XG4gICAgICBvYmpUb0ZpbmFsaXplckluZm8uaW5pdChjbG9zZXIsIGhhcmRlbih7IGNsb3NlciB9KSk7XG4gICAgfSxcbiAgICBmaW5hbGl6ZShvYmopIHtcbiAgICAgIGlmICghb2JqVG9GaW5hbGl6ZXJJbmZvLmhhcyhvYmopKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRpc3Bvc2VJbmZvID0gb2JqVG9GaW5hbGl6ZXJJbmZvLmdldChvYmopO1xuICAgICAgaWYgKFwiY29ublwiIGluIGRpc3Bvc2VJbmZvKSB7XG4gICAgICAgIGNvbnN0IHsgY29ubiwgaGFuZGxlciB9ID0gZGlzcG9zZUluZm87XG4gICAgICAgIG9ialRvRmluYWxpemVySW5mby5kZWxldGUob2JqKTtcbiAgICAgICAgcmV0dXJuIHdhdGNoKEUoaGFuZGxlcikub25DbG9zZShjb25uLCBDTE9TRV9SRUFTT05fRklOQUxJWkVSLCBoYW5kbGVyKSk7XG4gICAgICB9IGVsc2UgaWYgKFwiY2xvc2VyXCIgaW4gZGlzcG9zZUluZm8pIHtcbiAgICAgICAgY29uc3QgeyBjbG9zZXIgfSA9IGRpc3Bvc2VJbmZvO1xuICAgICAgICBvYmpUb0ZpbmFsaXplckluZm8uZGVsZXRlKG9iaik7XG4gICAgICAgIHJldHVybiB3YXRjaChFKGNsb3NlcikuY2xvc2UoKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB1bnBpbihvYmopIHtcbiAgICAgIG9ialRvRmluYWxpemVySW5mby5kZWxldGUob2JqKTtcbiAgICB9XG4gIH0pO1xufTtcbmhhcmRlbihwcmVwYXJlRmluYWxpemVyKTtcblxuLy9cbnZhciBSb3V0ZXJJID0gTS5pbnRlcmZhY2UoXCJSb3V0ZXJcIiwge1xuICBnZXRSb3V0ZXM6IE0uY2FsbChTaGFwZS5FbmRwb2ludCkucmV0dXJucyhNLmFycmF5T2YoW00uc3RyaW5nKCksIE0uYW55KCldKSksXG4gIHJlZ2lzdGVyOiBNLmNhbGwoTS5zdHJpbmcoKSwgTS5hbnkoKSkucmV0dXJucyhNLnVuZGVmaW5lZCgpKSxcbiAgdW5yZWdpc3RlcjogTS5jYWxsKE0uc3RyaW5nKCksIE0uYW55KCkpLnJldHVybnMoTS51bmRlZmluZWQoKSlcbn0pO1xuXG4vL1xudmFyIFZhdERhdGFHbG9iYWw7XG5pZiAoXCJWYXREYXRhXCIgaW4gZ2xvYmFsVGhpcykge1xuICBnbG9iYWxUaGlzLlZhdERhdGEgfHwgdGhyb3dSZWRhY3RlZGBWYXREYXRhIGRlZmluZWQgaW4gZ2xvYmFsIGFzIG51bGwgb3IgdW5kZWZpbmVkYDtcbiAgVmF0RGF0YUdsb2JhbCA9IC8qICAgICAgICAgICAgICAqL1xuICBnbG9iYWxUaGlzLlZhdERhdGE7XG59IGVsc2Uge1xuICBjb25zdCB1bmF2YWlsYWJsZSA9ICgpID0+IHRocm93UmVkYWN0ZWRgVmF0RGF0YSB1bmF2YWlsYWJsZWA7XG4gIFZhdERhdGFHbG9iYWwgPSB7XG4gICAgZGVmaW5lS2luZDogdW5hdmFpbGFibGUsXG4gICAgZGVmaW5lS2luZE11bHRpOiB1bmF2YWlsYWJsZSxcbiAgICBkZWZpbmVEdXJhYmxlS2luZDogdW5hdmFpbGFibGUsXG4gICAgZGVmaW5lRHVyYWJsZUtpbmRNdWx0aTogdW5hdmFpbGFibGUsXG4gICAgbWFrZUtpbmRIYW5kbGU6IHVuYXZhaWxhYmxlLFxuICAgIHByb3ZpZGVQcm9taXNlV2F0Y2hlcjogdW5hdmFpbGFibGUsXG4gICAgd2F0Y2hQcm9taXNlOiB1bmF2YWlsYWJsZSxcbiAgICBtYWtlU2NhbGFyQmlnTWFwU3RvcmU6IHVuYXZhaWxhYmxlLFxuICAgIG1ha2VTY2FsYXJCaWdXZWFrTWFwU3RvcmU6IHVuYXZhaWxhYmxlLFxuICAgIG1ha2VTY2FsYXJCaWdTZXRTdG9yZTogdW5hdmFpbGFibGUsXG4gICAgbWFrZVNjYWxhckJpZ1dlYWtTZXRTdG9yZTogdW5hdmFpbGFibGUsXG4gICAgY2FuQmVEdXJhYmxlOiB1bmF2YWlsYWJsZVxuICB9O1xufVxudmFyIFZhdERhdGFFeHBvcnQgPSBWYXREYXRhR2xvYmFsO1xudmFyIHtcbiAgZGVmaW5lS2luZCxcbiAgZGVmaW5lS2luZE11bHRpLFxuICBkZWZpbmVEdXJhYmxlS2luZCxcbiAgZGVmaW5lRHVyYWJsZUtpbmRNdWx0aVxufSA9IFZhdERhdGFHbG9iYWw7XG52YXIge1xuICBtYWtlS2luZEhhbmRsZSxcbiAgcHJvdmlkZVByb21pc2VXYXRjaGVyLFxuICB3YXRjaFByb21pc2U6IHdhdGNoUHJvbWlzZTIsXG4gIG1ha2VTY2FsYXJCaWdNYXBTdG9yZSxcbiAgbWFrZVNjYWxhckJpZ1dlYWtNYXBTdG9yZSxcbiAgbWFrZVNjYWxhckJpZ1NldFN0b3JlLFxuICBtYWtlU2NhbGFyQmlnV2Vha1NldFN0b3JlLFxuICBjYW5CZUR1cmFibGVcbn0gPSBWYXREYXRhR2xvYmFsO1xudmFyIHBpY2tGYWNldCA9IChtYWtlciwgZmFjZXROYW1lKSA9PiAoLi4uYXJncykgPT4gbWFrZXIoLi4uYXJncylbZmFjZXROYW1lXTtcbmhhcmRlbihwaWNrRmFjZXQpO1xudmFyIHBhcnRpYWxBc3NpZ24gPSAodGFyZ2V0LCBzb3VyY2UpID0+IHtcbiAgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSk7XG59O1xuaGFyZGVuKHBhcnRpYWxBc3NpZ24pO1xudmFyIHByb3ZpZGUgPSAoXG4gIC8vXG4gIC8qXG5cblxuXG5cblxuICAgKi9cbiAgcHJvdmlkZUxhenlcbik7XG52YXIgbWFrZVN0b3JlVXRpbHMgPSAoVmF0RGF0YSkgPT4ge1xuICBjb25zdCB7XG4gICAgLy9cbiAgICBtYWtlU2NhbGFyQmlnTWFwU3RvcmU6IG1ha2VTY2FsYXJCaWdNYXBTdG9yZTIsXG4gICAgLy9cbiAgICBtYWtlU2NhbGFyQmlnV2Vha01hcFN0b3JlOiBtYWtlU2NhbGFyQmlnV2Vha01hcFN0b3JlMixcbiAgICAvL1xuICAgIG1ha2VTY2FsYXJCaWdTZXRTdG9yZTogbWFrZVNjYWxhckJpZ1NldFN0b3JlMixcbiAgICAvL1xuICAgIG1ha2VTY2FsYXJCaWdXZWFrU2V0U3RvcmU6IG1ha2VTY2FsYXJCaWdXZWFrU2V0U3RvcmUyXG4gIH0gPSBWYXREYXRhO1xuICBjb25zdCBwcm92aWRlRHVyYWJsZU1hcFN0b3JlMiA9IChiYWdnYWdlLCBuYW1lLCBvcHRpb25zID0ge30pID0+IHByb3ZpZGUoXG4gICAgYmFnZ2FnZSxcbiAgICBuYW1lLFxuICAgICgpID0+IG1ha2VTY2FsYXJCaWdNYXBTdG9yZTIobmFtZSwgeyBkdXJhYmxlOiB0cnVlLCAuLi5vcHRpb25zIH0pXG4gICk7XG4gIGhhcmRlbihwcm92aWRlRHVyYWJsZU1hcFN0b3JlMik7XG4gIGNvbnN0IHByb3ZpZGVEdXJhYmxlV2Vha01hcFN0b3JlMiA9IChiYWdnYWdlLCBuYW1lLCBvcHRpb25zID0ge30pID0+IHByb3ZpZGUoXG4gICAgYmFnZ2FnZSxcbiAgICBuYW1lLFxuICAgICgpID0+IG1ha2VTY2FsYXJCaWdXZWFrTWFwU3RvcmUyKG5hbWUsIHsgZHVyYWJsZTogdHJ1ZSwgLi4ub3B0aW9ucyB9KVxuICApO1xuICBoYXJkZW4ocHJvdmlkZUR1cmFibGVXZWFrTWFwU3RvcmUyKTtcbiAgY29uc3QgcHJvdmlkZUR1cmFibGVTZXRTdG9yZTIgPSAoYmFnZ2FnZSwgbmFtZSwgb3B0aW9ucyA9IHt9KSA9PiBwcm92aWRlKFxuICAgIGJhZ2dhZ2UsXG4gICAgbmFtZSxcbiAgICAoKSA9PiBtYWtlU2NhbGFyQmlnU2V0U3RvcmUyKG5hbWUsIHsgZHVyYWJsZTogdHJ1ZSwgLi4ub3B0aW9ucyB9KVxuICApO1xuICBoYXJkZW4ocHJvdmlkZUR1cmFibGVTZXRTdG9yZTIpO1xuICBjb25zdCBwcm92aWRlRHVyYWJsZVdlYWtTZXRTdG9yZTIgPSAoYmFnZ2FnZSwgbmFtZSwgb3B0aW9ucyA9IHt9KSA9PiBwcm92aWRlKFxuICAgIGJhZ2dhZ2UsXG4gICAgbmFtZSxcbiAgICAoKSA9PiBtYWtlU2NhbGFyQmlnV2Vha1NldFN0b3JlMihuYW1lLCB7IGR1cmFibGU6IHRydWUsIC4uLm9wdGlvbnMgfSlcbiAgKTtcbiAgaGFyZGVuKHByb3ZpZGVEdXJhYmxlV2Vha1NldFN0b3JlMik7XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIHByb3ZpZGVEdXJhYmxlTWFwU3RvcmU6IHByb3ZpZGVEdXJhYmxlTWFwU3RvcmUyLFxuICAgIHByb3ZpZGVEdXJhYmxlV2Vha01hcFN0b3JlOiBwcm92aWRlRHVyYWJsZVdlYWtNYXBTdG9yZTIsXG4gICAgcHJvdmlkZUR1cmFibGVTZXRTdG9yZTogcHJvdmlkZUR1cmFibGVTZXRTdG9yZTIsXG4gICAgcHJvdmlkZUR1cmFibGVXZWFrU2V0U3RvcmU6IHByb3ZpZGVEdXJhYmxlV2Vha1NldFN0b3JlMlxuICB9KTtcbn07XG52YXIgZ2xvYmFsU3RvcmVVdGlscyA9IG1ha2VTdG9yZVV0aWxzKFZhdERhdGFHbG9iYWwpO1xudmFyIHtcbiAgcHJvdmlkZUR1cmFibGVNYXBTdG9yZSxcbiAgcHJvdmlkZUR1cmFibGVXZWFrTWFwU3RvcmUsXG4gIHByb3ZpZGVEdXJhYmxlU2V0U3RvcmUsXG4gIHByb3ZpZGVEdXJhYmxlV2Vha1NldFN0b3JlXG59ID0gZ2xvYmFsU3RvcmVVdGlscztcblxuLy9cbnZhciBpZ25vcmVDb250ZXh0ID0gKGZuKSA9PiAoX2NvbnRleHQsIC4uLmFyZ3MpID0+IGZuKC4uLmFyZ3MpO1xuaGFyZGVuKGlnbm9yZUNvbnRleHQpO1xudmFyIG1ha2VFeG9VdGlscyA9IChWYXREYXRhKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBkZWZpbmVLaW5kOiBkZWZpbmVLaW5kMixcbiAgICBkZWZpbmVLaW5kTXVsdGk6IGRlZmluZUtpbmRNdWx0aTIsXG4gICAgZGVmaW5lRHVyYWJsZUtpbmQ6IGRlZmluZUR1cmFibGVLaW5kMixcbiAgICBkZWZpbmVEdXJhYmxlS2luZE11bHRpOiBkZWZpbmVEdXJhYmxlS2luZE11bHRpMixcbiAgICBtYWtlS2luZEhhbmRsZTogbWFrZUtpbmRIYW5kbGUyXG4gIH0gPSBWYXREYXRhO1xuICBjb25zdCBwcm92aWRlS2luZEhhbmRsZTIgPSAoYmFnZ2FnZSwga2luZE5hbWUpID0+IHByb3ZpZGUoYmFnZ2FnZSwgYCR7a2luZE5hbWV9X2tpbmRIYW5kbGVgLCAoKSA9PiBtYWtlS2luZEhhbmRsZTIoa2luZE5hbWUpKTtcbiAgaGFyZGVuKHByb3ZpZGVLaW5kSGFuZGxlMik7XG4gIGNvbnN0IHByZXBhcmVLaW5kMiA9IChiYWdnYWdlLCBraW5kTmFtZSwgaW5pdCwgYmVoYXZpb3IsIG9wdGlvbnMgPSB2b2lkIDApID0+IGRlZmluZUR1cmFibGVLaW5kMihcbiAgICBwcm92aWRlS2luZEhhbmRsZTIoYmFnZ2FnZSwga2luZE5hbWUpLFxuICAgIGluaXQsXG4gICAgYmVoYXZpb3IsXG4gICAgb3B0aW9uc1xuICApO1xuICBoYXJkZW4ocHJlcGFyZUtpbmQyKTtcbiAgY29uc3QgcHJlcGFyZUtpbmRNdWx0aTIgPSAoYmFnZ2FnZSwga2luZE5hbWUsIGluaXQsIGJlaGF2aW9yLCBvcHRpb25zID0gdm9pZCAwKSA9PiBkZWZpbmVEdXJhYmxlS2luZE11bHRpMihcbiAgICBwcm92aWRlS2luZEhhbmRsZTIoYmFnZ2FnZSwga2luZE5hbWUpLFxuICAgIGluaXQsXG4gICAgYmVoYXZpb3IsXG4gICAgb3B0aW9uc1xuICApO1xuICBoYXJkZW4ocHJlcGFyZUtpbmRNdWx0aTIpO1xuICBjb25zdCBkZWZpbmVWaXJ0dWFsRXhvQ2xhc3MyID0gKHRhZywgaW50ZXJmYWNlR3VhcmQsIGluaXQsIG1ldGhvZHMsIG9wdGlvbnMpID0+IChcbiAgICAvL1xuICAgIGRlZmluZUtpbmQyKHRhZywgaW5pdCwgbWV0aG9kcywge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHRoaXNmdWxNZXRob2RzOiB0cnVlLFxuICAgICAgaW50ZXJmYWNlR3VhcmRcbiAgICB9KVxuICApO1xuICBoYXJkZW4oZGVmaW5lVmlydHVhbEV4b0NsYXNzMik7XG4gIGNvbnN0IGRlZmluZVZpcnR1YWxFeG9DbGFzc0tpdDIgPSAodGFnLCBpbnRlcmZhY2VHdWFyZEtpdCwgaW5pdCwgZmFjZXRzLCBvcHRpb25zKSA9PiAoXG4gICAgLy9cbiAgICBkZWZpbmVLaW5kTXVsdGkyKHRhZywgaW5pdCwgZmFjZXRzLCB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgdGhpc2Z1bE1ldGhvZHM6IHRydWUsXG4gICAgICBpbnRlcmZhY2VHdWFyZEtpdFxuICAgIH0pXG4gICk7XG4gIGhhcmRlbihkZWZpbmVWaXJ0dWFsRXhvQ2xhc3NLaXQyKTtcbiAgY29uc3QgZGVmaW5lRHVyYWJsZUV4b0NsYXNzMiA9IChraW5kSGFuZGxlLCBpbnRlcmZhY2VHdWFyZCwgaW5pdCwgbWV0aG9kcywgb3B0aW9ucykgPT4gKFxuICAgIC8vXG4gICAgZGVmaW5lRHVyYWJsZUtpbmQyKGtpbmRIYW5kbGUsIGluaXQsIG1ldGhvZHMsIHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICB0aGlzZnVsTWV0aG9kczogdHJ1ZSxcbiAgICAgIGludGVyZmFjZUd1YXJkXG4gICAgfSlcbiAgKTtcbiAgaGFyZGVuKGRlZmluZUR1cmFibGVFeG9DbGFzczIpO1xuICBjb25zdCBkZWZpbmVEdXJhYmxlRXhvQ2xhc3NLaXQyID0gKGtpbmRIYW5kbGUsIGludGVyZmFjZUd1YXJkS2l0LCBpbml0LCBmYWNldHMsIG9wdGlvbnMpID0+IChcbiAgICAvL1xuICAgIGRlZmluZUR1cmFibGVLaW5kTXVsdGkyKGtpbmRIYW5kbGUsIGluaXQsIGZhY2V0cywge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHRoaXNmdWxNZXRob2RzOiB0cnVlLFxuICAgICAgaW50ZXJmYWNlR3VhcmRLaXRcbiAgICB9KVxuICApO1xuICBoYXJkZW4oZGVmaW5lRHVyYWJsZUV4b0NsYXNzS2l0Mik7XG4gIGNvbnN0IHByZXBhcmVFeG9DbGFzczIgPSAoYmFnZ2FnZSwga2luZE5hbWUsIGludGVyZmFjZUd1YXJkLCBpbml0LCBtZXRob2RzLCBvcHRpb25zID0gdm9pZCAwKSA9PiBkZWZpbmVEdXJhYmxlRXhvQ2xhc3MyKFxuICAgIHByb3ZpZGVLaW5kSGFuZGxlMihiYWdnYWdlLCBraW5kTmFtZSksXG4gICAgaW50ZXJmYWNlR3VhcmQsXG4gICAgaW5pdCxcbiAgICBtZXRob2RzLFxuICAgIG9wdGlvbnNcbiAgKTtcbiAgaGFyZGVuKHByZXBhcmVFeG9DbGFzczIpO1xuICBjb25zdCBwcmVwYXJlRXhvQ2xhc3NLaXQyID0gKGJhZ2dhZ2UsIGtpbmROYW1lLCBpbnRlcmZhY2VHdWFyZEtpdCwgaW5pdCwgZmFjZXRzLCBvcHRpb25zID0gdm9pZCAwKSA9PiBkZWZpbmVEdXJhYmxlRXhvQ2xhc3NLaXQyKFxuICAgIHByb3ZpZGVLaW5kSGFuZGxlMihiYWdnYWdlLCBraW5kTmFtZSksXG4gICAgaW50ZXJmYWNlR3VhcmRLaXQsXG4gICAgaW5pdCxcbiAgICBmYWNldHMsXG4gICAgb3B0aW9uc1xuICApO1xuICBoYXJkZW4ocHJlcGFyZUV4b0NsYXNzS2l0Mik7XG4gIGNvbnN0IHByZXBhcmVFeG8yID0gKGJhZ2dhZ2UsIGtpbmROYW1lLCBpbnRlcmZhY2VHdWFyZCwgbWV0aG9kcywgb3B0aW9ucyA9IHZvaWQgMCkgPT4ge1xuICAgIGNvbnN0IG1ha2VTaW5nbGV0b24gPSBwcmVwYXJlRXhvQ2xhc3MyKFxuICAgICAgYmFnZ2FnZSxcbiAgICAgIGtpbmROYW1lLFxuICAgICAgaW50ZXJmYWNlR3VhcmQsXG4gICAgICBpbml0RW1wdHksXG4gICAgICBtZXRob2RzLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gICAgcmV0dXJuIHByb3ZpZGUoYmFnZ2FnZSwgYCR7a2luZE5hbWV9X3NpbmdsZXRvbmAsICgpID0+IG1ha2VTaW5nbGV0b24oKSk7XG4gIH07XG4gIGhhcmRlbihwcmVwYXJlRXhvMik7XG4gIGNvbnN0IHByZXBhcmVTaW5nbGV0b24yID0gKGJhZ2dhZ2UsIGtpbmROYW1lLCBtZXRob2RzLCBvcHRpb25zID0gdm9pZCAwKSA9PiBwcmVwYXJlRXhvMihiYWdnYWdlLCBraW5kTmFtZSwgdm9pZCAwLCBtZXRob2RzLCBvcHRpb25zKTtcbiAgaGFyZGVuKHByZXBhcmVTaW5nbGV0b24yKTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgZGVmaW5lVmlydHVhbEV4b0NsYXNzOiBkZWZpbmVWaXJ0dWFsRXhvQ2xhc3MyLFxuICAgIGRlZmluZVZpcnR1YWxFeG9DbGFzc0tpdDogZGVmaW5lVmlydHVhbEV4b0NsYXNzS2l0MixcbiAgICBkZWZpbmVEdXJhYmxlRXhvQ2xhc3M6IGRlZmluZUR1cmFibGVFeG9DbGFzczIsXG4gICAgZGVmaW5lRHVyYWJsZUV4b0NsYXNzS2l0OiBkZWZpbmVEdXJhYmxlRXhvQ2xhc3NLaXQyLFxuICAgIHByZXBhcmVFeG9DbGFzczogcHJlcGFyZUV4b0NsYXNzMixcbiAgICBwcmVwYXJlRXhvQ2xhc3NLaXQ6IHByZXBhcmVFeG9DbGFzc0tpdDIsXG4gICAgcHJlcGFyZUV4bzogcHJlcGFyZUV4bzIsXG4gICAgcHJlcGFyZVNpbmdsZXRvbjogcHJlcGFyZVNpbmdsZXRvbjIsXG4gICAgcHJvdmlkZUtpbmRIYW5kbGU6IHByb3ZpZGVLaW5kSGFuZGxlMixcbiAgICBwcmVwYXJlS2luZDogcHJlcGFyZUtpbmQyLFxuICAgIHByZXBhcmVLaW5kTXVsdGk6IHByZXBhcmVLaW5kTXVsdGkyXG4gIH0pO1xufTtcbnZhciBnbG9iYWxFeG9VdGlscyA9IG1ha2VFeG9VdGlscyhWYXREYXRhRXhwb3J0KTtcbnZhciB7XG4gIGRlZmluZVZpcnR1YWxFeG9DbGFzcyxcbiAgZGVmaW5lVmlydHVhbEV4b0NsYXNzS2l0LFxuICBkZWZpbmVEdXJhYmxlRXhvQ2xhc3MsXG4gIGRlZmluZUR1cmFibGVFeG9DbGFzc0tpdCxcbiAgcHJlcGFyZUV4b0NsYXNzLFxuICBwcmVwYXJlRXhvQ2xhc3NLaXQsXG4gIHByZXBhcmVFeG8sXG4gIHByZXBhcmVTaW5nbGV0b25cbn0gPSBnbG9iYWxFeG9VdGlscztcbnZhciB7IHByb3ZpZGVLaW5kSGFuZGxlLCBwcmVwYXJlS2luZCwgcHJlcGFyZUtpbmRNdWx0aSB9ID0gZ2xvYmFsRXhvVXRpbHM7XG5cbi8vXG52YXIgaW1wb3J0X2VuY29kaW5nID0gX190b0VTTShyZXF1aXJlX2J1aWxkKCksIDEpO1xuXG4vL1xuZnVuY3Rpb24gYmFzZShBTFBIQUJFVDIpIHtcbiAgaWYgKEFMUEhBQkVUMi5sZW5ndGggPj0gMjU1KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFscGhhYmV0IHRvbyBsb25nXCIpO1xuICB9XG4gIGNvbnN0IEJBU0VfTUFQID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbiAgZm9yIChsZXQgaiA9IDA7IGogPCBCQVNFX01BUC5sZW5ndGg7IGorKykge1xuICAgIEJBU0VfTUFQW2pdID0gMjU1O1xuICB9XG4gIGZvciAobGV0IGkzID0gMDsgaTMgPCBBTFBIQUJFVDIubGVuZ3RoOyBpMysrKSB7XG4gICAgY29uc3QgeCA9IEFMUEhBQkVUMi5jaGFyQXQoaTMpO1xuICAgIGNvbnN0IHhjID0geC5jaGFyQ29kZUF0KDApO1xuICAgIGlmIChCQVNFX01BUFt4Y10gIT09IDI1NSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcih4ICsgXCIgaXMgYW1iaWd1b3VzXCIpO1xuICAgIH1cbiAgICBCQVNFX01BUFt4Y10gPSBpMztcbiAgfVxuICBjb25zdCBCQVNFID0gQUxQSEFCRVQyLmxlbmd0aDtcbiAgY29uc3QgTEVBREVSID0gQUxQSEFCRVQyLmNoYXJBdCgwKTtcbiAgY29uc3QgRkFDVE9SID0gTWF0aC5sb2coQkFTRSkgLyBNYXRoLmxvZygyNTYpO1xuICBjb25zdCBpRkFDVE9SID0gTWF0aC5sb2coMjU2KSAvIE1hdGgubG9nKEJBU0UpO1xuICBmdW5jdGlvbiBlbmNvZGUyKHNvdXJjZSkge1xuICAgIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgfSBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoc291cmNlKSkge1xuICAgICAgc291cmNlID0gbmV3IFVpbnQ4QXJyYXkoc291cmNlLmJ1ZmZlciwgc291cmNlLmJ5dGVPZmZzZXQsIHNvdXJjZS5ieXRlTGVuZ3RoKTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgc291cmNlID0gVWludDhBcnJheS5mcm9tKHNvdXJjZSk7XG4gICAgfVxuICAgIGlmICghKHNvdXJjZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgVWludDhBcnJheVwiKTtcbiAgICB9XG4gICAgaWYgKHNvdXJjZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBsZXQgemVyb2VzMiA9IDA7XG4gICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgbGV0IHBiZWdpbiA9IDA7XG4gICAgY29uc3QgcGVuZCA9IHNvdXJjZS5sZW5ndGg7XG4gICAgd2hpbGUgKHBiZWdpbiAhPT0gcGVuZCAmJiBzb3VyY2VbcGJlZ2luXSA9PT0gMCkge1xuICAgICAgcGJlZ2luKys7XG4gICAgICB6ZXJvZXMyKys7XG4gICAgfVxuICAgIGNvbnN0IHNpemUgPSAocGVuZCAtIHBiZWdpbikgKiBpRkFDVE9SICsgMSA+Pj4gMDtcbiAgICBjb25zdCBiNTggPSBuZXcgVWludDhBcnJheShzaXplKTtcbiAgICB3aGlsZSAocGJlZ2luICE9PSBwZW5kKSB7XG4gICAgICBsZXQgY2FycnkgPSBzb3VyY2VbcGJlZ2luXTtcbiAgICAgIGxldCBpMyA9IDA7XG4gICAgICBmb3IgKGxldCBpdDEgPSBzaXplIC0gMTsgKGNhcnJ5ICE9PSAwIHx8IGkzIDwgbGVuZ3RoKSAmJiBpdDEgIT09IC0xOyBpdDEtLSwgaTMrKykge1xuICAgICAgICBjYXJyeSArPSAyNTYgKiBiNThbaXQxXSA+Pj4gMDtcbiAgICAgICAgYjU4W2l0MV0gPSBjYXJyeSAlIEJBU0UgPj4+IDA7XG4gICAgICAgIGNhcnJ5ID0gY2FycnkgLyBCQVNFID4+PiAwO1xuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vbi16ZXJvIGNhcnJ5XCIpO1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gaTM7XG4gICAgICBwYmVnaW4rKztcbiAgICB9XG4gICAgbGV0IGl0MiA9IHNpemUgLSBsZW5ndGg7XG4gICAgd2hpbGUgKGl0MiAhPT0gc2l6ZSAmJiBiNThbaXQyXSA9PT0gMCkge1xuICAgICAgaXQyKys7XG4gICAgfVxuICAgIGxldCBzdHIgPSBMRUFERVIucmVwZWF0KHplcm9lczIpO1xuICAgIGZvciAoOyBpdDIgPCBzaXplOyArK2l0Mikge1xuICAgICAgc3RyICs9IEFMUEhBQkVUMi5jaGFyQXQoYjU4W2l0Ml0pO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9XG4gIGZ1bmN0aW9uIGRlY29kZVVuc2FmZShzb3VyY2UpIHtcbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIFN0cmluZ1wiKTtcbiAgICB9XG4gICAgaWYgKHNvdXJjZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSgpO1xuICAgIH1cbiAgICBsZXQgcHN6ID0gMDtcbiAgICBsZXQgemVyb2VzMiA9IDA7XG4gICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgd2hpbGUgKHNvdXJjZVtwc3pdID09PSBMRUFERVIpIHtcbiAgICAgIHplcm9lczIrKztcbiAgICAgIHBzeisrO1xuICAgIH1cbiAgICBjb25zdCBzaXplID0gKHNvdXJjZS5sZW5ndGggLSBwc3opICogRkFDVE9SICsgMSA+Pj4gMDtcbiAgICBjb25zdCBiMjU2ID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7XG4gICAgd2hpbGUgKHBzeiA8IHNvdXJjZS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQocHN6KTtcbiAgICAgIGlmIChjaGFyQ29kZSA+IDI1NSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQgY2FycnkgPSBCQVNFX01BUFtjaGFyQ29kZV07XG4gICAgICBpZiAoY2FycnkgPT09IDI1NSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQgaTMgPSAwO1xuICAgICAgZm9yIChsZXQgaXQzID0gc2l6ZSAtIDE7IChjYXJyeSAhPT0gMCB8fCBpMyA8IGxlbmd0aCkgJiYgaXQzICE9PSAtMTsgaXQzLS0sIGkzKyspIHtcbiAgICAgICAgY2FycnkgKz0gQkFTRSAqIGIyNTZbaXQzXSA+Pj4gMDtcbiAgICAgICAgYjI1NltpdDNdID0gY2FycnkgJSAyNTYgPj4+IDA7XG4gICAgICAgIGNhcnJ5ID0gY2FycnkgLyAyNTYgPj4+IDA7XG4gICAgICB9XG4gICAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm9uLXplcm8gY2FycnlcIik7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBpMztcbiAgICAgIHBzeisrO1xuICAgIH1cbiAgICBsZXQgaXQ0ID0gc2l6ZSAtIGxlbmd0aDtcbiAgICB3aGlsZSAoaXQ0ICE9PSBzaXplICYmIGIyNTZbaXQ0XSA9PT0gMCkge1xuICAgICAgaXQ0Kys7XG4gICAgfVxuICAgIGNvbnN0IHZjaCA9IG5ldyBVaW50OEFycmF5KHplcm9lczIgKyAoc2l6ZSAtIGl0NCkpO1xuICAgIGxldCBqID0gemVyb2VzMjtcbiAgICB3aGlsZSAoaXQ0ICE9PSBzaXplKSB7XG4gICAgICB2Y2hbaisrXSA9IGIyNTZbaXQ0KytdO1xuICAgIH1cbiAgICByZXR1cm4gdmNoO1xuICB9XG4gIGZ1bmN0aW9uIGRlY29kZTMoc3RyaW5nKSB7XG4gICAgY29uc3QgYnVmZmVyID0gZGVjb2RlVW5zYWZlKHN0cmluZyk7XG4gICAgaWYgKGJ1ZmZlcikge1xuICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm9uLWJhc2VcIiArIEJBU0UgKyBcIiBjaGFyYWN0ZXJcIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBlbmNvZGU6IGVuY29kZTIsXG4gICAgZGVjb2RlVW5zYWZlLFxuICAgIGRlY29kZTogZGVjb2RlM1xuICB9O1xufVxudmFyIGVzbV9kZWZhdWx0ID0gYmFzZTtcblxuLy9cbnZhciBBTFBIQUJFVCA9IFwiMTIzNDU2Nzg5QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaYWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5elwiO1xudmFyIGVzbV9kZWZhdWx0MiA9IGVzbV9kZWZhdWx0KEFMUEhBQkVUKTtcblxuLy9cbnZhciBtYWtlSUNBQ2hhbm5lbEFkZHJlc3MgPSAoaG9zdENvbm5lY3Rpb25JZCwgY29udHJvbGxlckNvbm5lY3Rpb25JZCwge1xuICB2ZXJzaW9uID0gXCJpY3MyNy0xXCIsXG4gIGVuY29kaW5nID0gXCJwcm90bzNcIixcbiAgb3JkZXJpbmcgPSBcIm9yZGVyZWRcIixcbiAgdHhUeXBlID0gXCJzZGtfbXVsdGlfbXNnXCJcbn0gPSB7fSkgPT4ge1xuICBob3N0Q29ubmVjdGlvbklkIHx8IHRocm93UmVkYWN0ZWRgaG9zdENvbm5lY3Rpb25JZCBpcyByZXF1aXJlZGA7XG4gIGNvbnRyb2xsZXJDb25uZWN0aW9uSWQgfHwgdGhyb3dSZWRhY3RlZGBjb250cm9sbGVyQ29ubmVjdGlvbklkIGlzIHJlcXVpcmVkYDtcbiAgY29uc3QgY29ublN0cmluZyA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICB2ZXJzaW9uLFxuICAgIGNvbnRyb2xsZXJDb25uZWN0aW9uSWQsXG4gICAgaG9zdENvbm5lY3Rpb25JZCxcbiAgICBhZGRyZXNzOiBcIlwiLFxuICAgIC8vXG4gICAgZW5jb2RpbmcsXG4gICAgdHhUeXBlXG4gIH0pO1xuICByZXR1cm4gYC9pYmMtaG9wLyR7Y29udHJvbGxlckNvbm5lY3Rpb25JZH0vaWJjLXBvcnQvaWNhaG9zdC8ke29yZGVyaW5nfS8ke2Nvbm5TdHJpbmd9YDtcbn07XG5oYXJkZW4obWFrZUlDQUNoYW5uZWxBZGRyZXNzKTtcbnZhciBERUZBVUxUX0lDUV9WRVJTSU9OID0gXCJpY3EtMVwiO1xudmFyIG1ha2VJQ1FDaGFubmVsQWRkcmVzcyA9IChjb250cm9sbGVyQ29ubmVjdGlvbklkLCB2ZXJzaW9uID0gREVGQVVMVF9JQ1FfVkVSU0lPTikgPT4ge1xuICBjb250cm9sbGVyQ29ubmVjdGlvbklkIHx8IHRocm93UmVkYWN0ZWRgY29udHJvbGxlckNvbm5lY3Rpb25JZCBpcyByZXF1aXJlZGA7XG4gIHJldHVybiBgL2liYy1ob3AvJHtjb250cm9sbGVyQ29ubmVjdGlvbklkfS9pYmMtcG9ydC9pY3Fob3N0L3Vub3JkZXJlZC8ke3ZlcnNpb259YDtcbn07XG5oYXJkZW4obWFrZUlDUUNoYW5uZWxBZGRyZXNzKTtcbnZhciBmaW5kQWRkcmVzc0ZpZWxkID0gKHJlbW90ZUFkZHJlc3NTdHJpbmcpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBqc29uU3RyID0gcmVtb3RlQWRkcmVzc1N0cmluZz8ubWF0Y2goL3suKj99Lyk/LlswXTtcbiAgICBjb25zdCBqc29uT2JqID0ganNvblN0ciA/IEpTT04ucGFyc2UoanNvblN0cikgOiB2b2lkIDA7XG4gICAgaWYgKCFqc29uT2JqPy5hZGRyZXNzPy5sZW5ndGgpIHJldHVybiB2b2lkIDA7XG4gICAgcmV0dXJuIGpzb25PYmouYWRkcmVzcztcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG59O1xuaGFyZGVuKGZpbmRBZGRyZXNzRmllbGQpO1xudmFyIGdldEJlY2gzMlByZWZpeCA9IChhZGRyZXNzKSA9PiB7XG4gIGFzc2VydChhZGRyZXNzLCBcImFkZHJlc3MgaXMgcmVxdWlyZWRcIik7XG4gIGNvbnN0IHNwbGl0MiA9IGFkZHJlc3MubGFzdEluZGV4T2YoXCIxXCIpO1xuICBpZiAoc3BsaXQyID09PSAtMSkgcmV0dXJuIHRocm93UmVkYWN0ZWRgTm8gc2VwYXJhdG9yIGNoYXJhY3RlciBmb3IgJHtxdW90ZShhZGRyZXNzKX1gO1xuICBpZiAoc3BsaXQyID09PSAwKSByZXR1cm4gdGhyb3dSZWRhY3RlZGBNaXNzaW5nIHByZWZpeCBmb3IgJHtxdW90ZShhZGRyZXNzKX1gO1xuICByZXR1cm4gYWRkcmVzcy5zbGljZSgwLCBzcGxpdDIpO1xufTtcbnZhciBjb2VyY2VBY2NvdW50SWQgPSAoaWRBcmcpID0+IHtcbiAgaWYgKHR5cGVvZiBpZEFyZyA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBpZEFyZztcbiAgfVxuICByZXR1cm4gYGNvc21vczoke2lkQXJnLmNoYWluSWR9OiR7aWRBcmcudmFsdWV9YDtcbn07XG5oYXJkZW4oY29lcmNlQWNjb3VudElkKTtcbnZhciBwYXJzZUFjY291bnRJZEFyZyA9IChpZEFyZykgPT4ge1xuICBpZiAodHlwZW9mIGlkQXJnID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHBhcnNlQWNjb3VudElkKGlkQXJnKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG5hbWVzcGFjZTogXCJjb3Ntb3NcIixcbiAgICByZWZlcmVuY2U6IGlkQXJnLmNoYWluSWQsXG4gICAgYWNjb3VudEFkZHJlc3M6IGlkQXJnLnZhbHVlXG4gIH07XG59O1xuaGFyZGVuKHBhcnNlQWNjb3VudElkQXJnKTtcbnZhciBwYXJzZUFjY291bnRJZCA9IChhY2NvdW50SWQpID0+IHtcbiAgY29uc3QgcGFydHMgPSBhY2NvdW50SWQuc3BsaXQoXCI6XCIpO1xuICBwYXJ0cy5sZW5ndGggPT09IDMgfHwgdGhyb3dSZWRhY3RlZGBtYWxmb3JtZWQgQ0FJUC0xMCBhY2NvdW50SWQ6ICR7cXVvdGUoYWNjb3VudElkKX1gO1xuICBjb25zdCBbbmFtZXNwYWNlLCByZWZlcmVuY2UsIGFjY291bnRBZGRyZXNzXSA9IHBhcnRzO1xuICByZXR1cm4ge1xuICAgIG5hbWVzcGFjZSxcbiAgICByZWZlcmVuY2UsXG4gICAgYWNjb3VudEFkZHJlc3NcbiAgfTtcbn07XG5oYXJkZW4ocGFyc2VBY2NvdW50SWQpO1xudmFyIGlzQmVjaDMyQWRkcmVzcyA9IChhZGRyZXNzKSA9PiB7XG4gIGlmICh0eXBlb2YgYWRkcmVzcyAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB0cnkge1xuICAgIGNvbnN0IGRlY29kZWQgPSAoMCwgaW1wb3J0X2VuY29kaW5nLmZyb21CZWNoMzIpKGFkZHJlc3MpO1xuICAgIHJldHVybiAhIWRlY29kZWQgJiYgZGVjb2RlZC5kYXRhLmxlbmd0aCA+IDA7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuaGFyZGVuKGlzQmVjaDMyQWRkcmVzcyk7XG52YXIgYXNzZXJ0QmVjaDMyQWRkcmVzcyA9IChhZGRyZXNzKSA9PiB7XG4gIGlmICghaXNCZWNoMzJBZGRyZXNzKGFkZHJlc3MpKSB7XG4gICAgdGhyb3dSZWRhY3RlZGBFeHBlY3RlZCBhIHZhbGlkIEJlY2gzMiBhZGRyZXNzLCBnb3QgJHtxdW90ZShhZGRyZXNzKX1gO1xuICB9XG59O1xuaGFyZGVuKGFzc2VydEJlY2gzMkFkZHJlc3MpO1xudmFyIGxlZnRQYWRFdGhBZGRyZXNzVG8zMkJ5dGVzID0gKHJhd0FkZHJlc3MpID0+IHtcbiAgY29uc3QgY2xlYW5lZEFkZHJlc3MgPSByYXdBZGRyZXNzLnJlcGxhY2UoL14weC8sIFwiXCIpO1xuICBjb25zdCB6ZXJvZXNOZWVkZWQgPSA2NCAtIGNsZWFuZWRBZGRyZXNzLmxlbmd0aDtcbiAgY29uc3QgcGFkZGVkQWRkcmVzcyA9IFwiMFwiLnJlcGVhdCh6ZXJvZXNOZWVkZWQpICsgY2xlYW5lZEFkZHJlc3M7XG4gIHJldHVybiAoMCwgaW1wb3J0X2VuY29kaW5nLmZyb21IZXgpKHBhZGRlZEFkZHJlc3MpO1xufTtcbnZhciBzb2xhbmFBZGRyZXNzVG9DY3RwUmVjaXBpZW50ID0gKHNvbGFuYUFkZHJlc3MpID0+IGVzbV9kZWZhdWx0Mi5kZWNvZGUoc29sYW5hQWRkcmVzcyk7XG52YXIgYWNjb3VudElkVG8zMkJ5dGVzID0gKGFjY291bnRJZCkgPT4ge1xuICBjb25zdCB7IG5hbWVzcGFjZSwgYWNjb3VudEFkZHJlc3MgfSA9IHBhcnNlQWNjb3VudElkKGFjY291bnRJZCk7XG4gIHN3aXRjaCAobmFtZXNwYWNlKSB7XG4gICAgY2FzZSBcImVpcDE1NVwiOlxuICAgICAgcmV0dXJuIGxlZnRQYWRFdGhBZGRyZXNzVG8zMkJ5dGVzKGFjY291bnRBZGRyZXNzKTtcbiAgICBjYXNlIFwic29sYW5hXCI6XG4gICAgICByZXR1cm4gc29sYW5hQWRkcmVzc1RvQ2N0cFJlY2lwaWVudChhY2NvdW50QWRkcmVzcyk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgbmFtZXNwYWNlICR7bmFtZXNwYWNlfSBub3Qgc3VwcG9ydGVkYCk7XG4gIH1cbn07XG5cbi8vXG52YXIgeyBpc0Zyb3plbjogaXNGcm96ZW42IH0gPSBPYmplY3Q7XG52YXIgVXBncmFkZURpc2Nvbm5lY3Rpb25TaGFwZSA9IGhhcmRlbih7XG4gIG5hbWU6IFwidmF0VXBncmFkZWRcIixcbiAgdXBncmFkZU1lc3NhZ2U6IE0uc3RyaW5nKCksXG4gIGluY2FybmF0aW9uTnVtYmVyOiBNLm51bWJlcigpXG59KTtcbnZhciBtYWtlVXBncmFkZURpc2Nvbm5lY3Rpb24gPSAodXBncmFkZU1lc3NhZ2UsIHRvSW5jYXJuYXRpb25OdW1iZXIpID0+IGhhcmRlbih7XG4gIG5hbWU6IFwidmF0VXBncmFkZWRcIixcbiAgdXBncmFkZU1lc3NhZ2UsXG4gIGluY2FybmF0aW9uTnVtYmVyOiB0b0luY2FybmF0aW9uTnVtYmVyXG59KTtcbmhhcmRlbihtYWtlVXBncmFkZURpc2Nvbm5lY3Rpb24pO1xudmFyIGlzVXBncmFkZURpc2Nvbm5lY3Rpb24gPSAocmVhc29uKSA9PiByZWFzb24gIT0gbnVsbCAmJiAvL1xuaXNGcm96ZW42KHJlYXNvbikgJiYgbWF0Y2hlcyhyZWFzb24sIFVwZ3JhZGVEaXNjb25uZWN0aW9uU2hhcGUpO1xuaGFyZGVuKGlzVXBncmFkZURpc2Nvbm5lY3Rpb24pO1xudmFyIGlzQWJhbmRvbmVkRXJyb3IgPSAocmVhc29uKSA9PiByZWFzb24gIT0gbnVsbCAmJiAvL1xuaXNGcm96ZW42KHJlYXNvbikgJiYgbWF0Y2hlcyhyZWFzb24sIE0uZXJyb3IoKSkgJiYgLy9cbi8vXG5yZWFzb24ubWVzc2FnZSA9PT0gXCJ2YXQgdGVybWluYXRlZFwiO1xuaGFyZGVuKGlzQWJhbmRvbmVkRXJyb3IpO1xuXG4vL1xudmFyIHNpbmsyID0gKCkgPT4ge1xufTtcbmhhcmRlbihzaW5rMik7XG52YXIgVm93U2hhcGUgPSBNLnRhZ2dlZChcbiAgXCJWb3dcIixcbiAgTS5zcGxpdFJlY29yZCh7XG4gICAgdm93VjA6IE0ucmVtb3RhYmxlKFwiVm93VjBcIilcbiAgfSlcbik7XG52YXIgaXNWb3cgPSAoc3BlY2ltZW4pID0+IGlzUGFzc2FibGUoc3BlY2ltZW4pICYmIG1hdGNoZXMoc3BlY2ltZW4sIFZvd1NoYXBlKTtcbmhhcmRlbihpc1Zvdyk7XG52YXIgZ2V0Vm93UGF5bG9hZCA9IChzcGVjaW1lbikgPT4ge1xuICBpZiAoIWlzVm93KHNwZWNpbWVuKSkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgY29uc3Qgdm93ID0gKFxuICAgIC8qICAgICAgICAgICAgICAgICAqL1xuICAgIC8qICAgICAgICAgICAgICAgICAgKi9cbiAgICBzcGVjaW1lblxuICApO1xuICByZXR1cm4gdm93LnBheWxvYWQ7XG59O1xuaGFyZGVuKGdldFZvd1BheWxvYWQpO1xudmFyIHRvUGFzc2FibGVDYXAgPSAoaykgPT4ge1xuICBjb25zdCBwYXlsb2FkID0gZ2V0Vm93UGF5bG9hZChrKTtcbiAgaWYgKHBheWxvYWQgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiAoXG4gICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAga1xuICAgICk7XG4gIH1cbiAgY29uc3QgeyB2b3dWMCB9ID0gcGF5bG9hZDtcbiAgcmV0dXJuIHZvd1YwO1xufTtcbmhhcmRlbih0b1Bhc3NhYmxlQ2FwKTtcbnZhciBtYWtlQXNWb3cgPSAobWFrZVZvd0tpdCkgPT4ge1xuICBjb25zdCBhc1ZvdyA9IChmbikgPT4ge1xuICAgIGxldCByZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGZuKCk7XG4gICAgfSBjYXRjaCAoZTIpIHtcbiAgICAgIHJlc3VsdCA9IFByb21pc2UucmVqZWN0KGUyKTtcbiAgICB9XG4gICAgaWYgKGlzVm93KHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNvbnN0IHsgdm93LCByZXNvbHZlciB9ID0gbWFrZVZvd0tpdCgpO1xuICAgIHJlc29sdmVyLnJlc29sdmUocmVzdWx0KTtcbiAgICByZXR1cm4gdm93O1xuICB9O1xuICByZXR1cm4gaGFyZGVuKGFzVm93KTtcbn07XG5oYXJkZW4obWFrZUFzVm93KTtcblxuLy9cbnZhciB7IGRldGFpbHM6IFgzIH0gPSBhc3NlcnQ7XG52YXIgbm9vcCA9ICgpID0+IHtcbn07XG5oYXJkZW4obm9vcCk7XG52YXIgcHJlcGFyZVZvd0tpdCA9ICh6b25lLCB2b3dSZWplY3Rpb25UcmFja2VyKSA9PiB7XG4gIGNvbnN0IHJlc29sdmVyVG9FcGhlbWVyYSA9IC8qICAgICAgICAgICAqLyBuZXcgV2Vha01hcCgpO1xuICBjb25zdCByZXNvbHZlclRvTm9uU3RvcmVkVmFsdWUgPSAvKiAgICAgICAgICAgKi8gbmV3IFdlYWtNYXAoKTtcbiAgY29uc3QgcHJvdmlkZUVwaGVtZXJhID0gKHJlc29sdmVyLCBvcHRpb25zKSA9PiB7XG4gICAgbGV0IGVwaGVtZXJhID0gcmVzb2x2ZXJUb0VwaGVtZXJhLmdldChyZXNvbHZlcik7XG4gICAgaWYgKCFlcGhlbWVyYSkge1xuICAgICAgZXBoZW1lcmEgPSBtYWtlUHJvbWlzZUtpdCgpO1xuICAgICAgZXBoZW1lcmEucHJvbWlzZS5jYXRjaChub29wKTtcbiAgICB9XG4gICAgZXBoZW1lcmEgPSBoYXJkZW4oeyAuLi5lcGhlbWVyYSwgLi4ub3B0aW9ucyB9KTtcbiAgICByZXNvbHZlclRvRXBoZW1lcmEuc2V0KHJlc29sdmVyLCBlcGhlbWVyYSk7XG4gICAgcmV0dXJuIGVwaGVtZXJhO1xuICB9O1xuICBjb25zdCBwcm92aWRlRXBoZW1lcmFGb3JSZXNvbHV0aW9uID0gKHJlc29sdmVyKSA9PiB7XG4gICAgY29uc3QgZXBoZW1lcmEgPSBwcm92aWRlRXBoZW1lcmEocmVzb2x2ZXIpO1xuICAgIGlmIChlcGhlbWVyYS5yZXNvbHZlKSB7XG4gICAgICBjb25zdCB7IHJlc29sdmU6IF8xLCByZWplY3Q6IF8yLCAuLi5yZXN0IH0gPSBlcGhlbWVyYTtcbiAgICAgIHJlc29sdmVyVG9FcGhlbWVyYS5zZXQocmVzb2x2ZXIsIGhhcmRlbihyZXN0KSk7XG4gICAgfVxuICAgIHJldHVybiBlcGhlbWVyYTtcbiAgfTtcbiAgY29uc3QgbWFrZVZvd0ludGVybmFsc0tpdCA9IHpvbmUuZXhvQ2xhc3NLaXQoXG4gICAgXCJWb3dJbnRlcm5hbHNLaXRcIixcbiAgICB7XG4gICAgICB2b3dWMDogTS5pbnRlcmZhY2UoXCJWb3dWMFwiLCB7XG4gICAgICAgIHNob3J0ZW46IE0uY2FsbCgpLnJldHVybnMoTS5wcm9taXNlKCkpXG4gICAgICB9KSxcbiAgICAgIHJlc29sdmVyOiBNLmludGVyZmFjZShcIlZvd1Jlc29sdmVyXCIsIHtcbiAgICAgICAgcmVzb2x2ZTogTS5jYWxsKCkub3B0aW9uYWwoTS5yYXcoKSkucmV0dXJucygpLFxuICAgICAgICByZWplY3Q6IE0uY2FsbCgpLm9wdGlvbmFsKE0ucmF3KCkpLnJldHVybnMoKVxuICAgICAgfSksXG4gICAgICB3YXRjaE5leHRTdGVwOiBQcm9taXNlV2F0Y2hlcklcbiAgICB9LFxuICAgICgpID0+ICh7XG4gICAgICAvKiAgICAgICAgICAgICAgKi9cbiAgICAgIHZhbHVlOiB2b2lkIDAsXG4gICAgICAvKlxuXG5cbiAgICAgICAqL1xuICAgICAgc3RlcFN0YXR1czogbnVsbCxcbiAgICAgIGlzU3RvcmVkVmFsdWU6IGZhbHNlLFxuICAgICAgLypcblxuXG5cbiAgICAgICAqL1xuICAgICAgdm93SXNIYW5kbGVkOiBmYWxzZSxcbiAgICAgIC8qXG5cblxuXG4gICAgICAgKi9cbiAgICAgIGV4dHJhOiB2b2lkIDBcbiAgICB9KSxcbiAgICB7XG4gICAgICB2b3dWMDoge1xuICAgICAgICAvKlxuXG4gICAgICAgICAqL1xuICAgICAgICBhc3luYyBzaG9ydGVuKCkge1xuICAgICAgICAgIGNvbnN0IHsgc3RlcFN0YXR1cywgaXNTdG9yZWRWYWx1ZSwgdmFsdWUsIHZvd0lzSGFuZGxlZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBjb25zdCB7IHJlc29sdmVyLCB2b3dWMCB9ID0gdGhpcy5mYWNldHM7XG4gICAgICAgICAgc3dpdGNoIChzdGVwU3RhdHVzKSB7XG4gICAgICAgICAgICBjYXNlIFwiZnVsZmlsbGVkXCI6IHtcbiAgICAgICAgICAgICAgaWYgKHZvd0lzSGFuZGxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnZvd0lzSGFuZGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGlzU3RvcmVkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzb2x2ZXJUb05vblN0b3JlZFZhbHVlLmhhcyhyZXNvbHZlcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZXJUb05vblN0b3JlZFZhbHVlLmdldChyZXNvbHZlcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhyb3cgdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwicmVqZWN0ZWRcIjoge1xuICAgICAgICAgICAgICBpZiAodm93SXNIYW5kbGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUudm93SXNIYW5kbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2b3dSZWplY3Rpb25UcmFja2VyPy5oYW5kbGUodm93VjApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnN0IHJlYXNvbiA9IHJlc29sdmVyVG9Ob25TdG9yZWRWYWx1ZS5oYXMocmVzb2x2ZXIpID8gcmVzb2x2ZXJUb05vblN0b3JlZFZhbHVlLmdldChyZXNvbHZlcikgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgdGhyb3cgcmVhc29uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBudWxsOlxuICAgICAgICAgICAgY2FzZSBcInBlbmRpbmdcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVFcGhlbWVyYSh0aGlzLmZhY2V0cy5yZXNvbHZlciwge1xuICAgICAgICAgICAgICAgIHBvdGVudGlhbGx5SGFuZGxlZDogdHJ1ZVxuICAgICAgICAgICAgICB9KS5wcm9taXNlO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKGB1bmV4cGVjdGVkIHN0ZXBTdGF0dXMgJHtzdGVwU3RhdHVzfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlc29sdmVyOiB7XG4gICAgICAgIC8qXG5cbiAgICAgICAgICovXG4gICAgICAgIHJlc29sdmUodmFsdWUpIHtcbiAgICAgICAgICBjb25zdCB7IHN0ZXBTdGF0dXMgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgaWYgKHN0ZXBTdGF0dXMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5zdGF0ZS5zdGVwU3RhdHVzID0gXCJwZW5kaW5nXCI7XG4gICAgICAgICAgY29uc3QgeyByZXNvbHZlciB9ID0gdGhpcy5mYWNldHM7XG4gICAgICAgICAgY29uc3QgeyByZXNvbHZlOiByZXNvbHZlMiB9ID0gcHJvdmlkZUVwaGVtZXJhRm9yUmVzb2x1dGlvbihyZXNvbHZlcik7XG4gICAgICAgICAgcmVzb2x2ZTIgJiYgcmVzb2x2ZTIodmFsdWUpO1xuICAgICAgICAgIHpvbmUud2F0Y2hQcm9taXNlKFxuICAgICAgICAgICAgSGFuZGxlZFByb21pc2UucmVzb2x2ZSh2YWx1ZSksXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy53YXRjaE5leHRTdGVwXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgLypcblxuICAgICAgICAgKi9cbiAgICAgICAgcmVqZWN0KHJlYXNvbikge1xuICAgICAgICAgIGNvbnN0IHsgc3RlcFN0YXR1cyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBpZiAoc3RlcFN0YXR1cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnN0YXRlLnN0ZXBTdGF0dXMgPSBcInJlamVjdGVkXCI7XG4gICAgICAgICAgY29uc3QgeyByZXNvbHZlciwgd2F0Y2hOZXh0U3RlcCB9ID0gdGhpcy5mYWNldHM7XG4gICAgICAgICAgY29uc3QgeyByZWplY3QgfSA9IHByb3ZpZGVFcGhlbWVyYUZvclJlc29sdXRpb24ocmVzb2x2ZXIpO1xuICAgICAgICAgIHJlamVjdCAmJiByZWplY3QocmVhc29uKTtcbiAgICAgICAgICB3YXRjaE5leHRTdGVwLm9uUmVqZWN0ZWQocmVhc29uKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHdhdGNoTmV4dFN0ZXA6IHtcbiAgICAgICAgb25GdWxmaWxsZWQodmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlLnN0ZXBTdGF0dXMgPSBcImZ1bGZpbGxlZFwiO1xuICAgICAgICAgIGNvbnN0IHsgcmVzb2x2ZXIgfSA9IHRoaXMuZmFjZXRzO1xuICAgICAgICAgIGNvbnN0IHsgcmVzb2x2ZTogcmVzb2x2ZTIgfSA9IHByb3ZpZGVFcGhlbWVyYUZvclJlc29sdXRpb24ocmVzb2x2ZXIpO1xuICAgICAgICAgIGhhcmRlbih2YWx1ZSk7XG4gICAgICAgICAgcmVzb2x2ZTIgJiYgcmVzb2x2ZTIodmFsdWUpO1xuICAgICAgICAgIHRoaXMuc3RhdGUuaXNTdG9yZWRWYWx1ZSA9IHpvbmUuaXNTdG9yYWJsZSh2YWx1ZSk7XG4gICAgICAgICAgaWYgKHRoaXMuc3RhdGUuaXNTdG9yZWRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlclRvTm9uU3RvcmVkVmFsdWUuc2V0KHJlc29sdmVyLCB2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnZhbHVlID0gYXNzZXJ0LmVycm9yKFxuICAgICAgICAgICAgICBYM2BWb3cgZnVsZmlsbG1lbnQgdmFsdWUgd2FzIG5vdCBzdG9yZWQ6ICR7dmFsdWV9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uUmVqZWN0ZWQocmVhc29uKSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5zdGVwU3RhdHVzID0gXCJyZWplY3RlZFwiO1xuICAgICAgICAgIGNvbnN0IHsgcmVzb2x2ZXIsIHZvd1YwIH0gPSB0aGlzLmZhY2V0cztcbiAgICAgICAgICBjb25zdCB7IHJlamVjdCwgcG90ZW50aWFsbHlIYW5kbGVkIH0gPSBwcm92aWRlRXBoZW1lcmFGb3JSZXNvbHV0aW9uKHJlc29sdmVyKTtcbiAgICAgICAgICBoYXJkZW4ocmVhc29uKTtcbiAgICAgICAgICByZWplY3QgJiYgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgaWYgKHRoaXMuc3RhdGUudm93SXNIYW5kbGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKHBvdGVudGlhbGx5SGFuZGxlZCkge1xuICAgICAgICAgICAgICB0aGlzLnN0YXRlLnZvd0lzSGFuZGxlZCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2b3dSZWplY3Rpb25UcmFja2VyPy5yZWplY3Qodm93VjAsIHJlYXNvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuc3RhdGUuaXNTdG9yZWRWYWx1ZSA9IHpvbmUuaXNTdG9yYWJsZShyZWFzb24pO1xuICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmlzU3RvcmVkVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUudmFsdWUgPSByZWFzb247XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmVyVG9Ob25TdG9yZWRWYWx1ZS5zZXQocmVzb2x2ZXIsIHJlYXNvbik7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnZhbHVlID0gYXNzZXJ0LmVycm9yKFxuICAgICAgICAgICAgICBYM2BWb3cgcmVqZWN0aW9uIHJlYXNvbiB3YXMgbm90IHN0b3JlZDogJHtyZWFzb259YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIGNvbnN0IG1ha2VWb3dLaXQgPSAoKSA9PiB7XG4gICAgY29uc3QgeyByZXNvbHZlciwgdm93VjAgfSA9IG1ha2VWb3dJbnRlcm5hbHNLaXQoKTtcbiAgICBjb25zdCB2b3cgPSBtYWtlVGFnZ2VkKFwiVm93XCIsIGhhcmRlbih7IHZvd1YwIH0pKTtcbiAgICByZXR1cm4gaGFyZGVuKHsgcmVzb2x2ZXIsIHZvdyB9KTtcbiAgfTtcbiAgcmV0dXJuIG1ha2VWb3dLaXQ7XG59O1xuaGFyZGVuKHByZXBhcmVWb3dLaXQpO1xuXG4vL1xudmFyIHsgRmFpbDogRmFpbDUsIGJhcmU6IGJhcmUyLCBkZXRhaWxzOiBYNCB9ID0gYXNzZXJ0O1xudmFyIFZvd1NoYXBlMiA9IE0udGFnZ2VkKFxuICBcIlZvd1wiLFxuICBoYXJkZW4oe1xuICAgIHZvd1YwOiBNLnJlbW90YWJsZShcIlZvd1YwXCIpXG4gIH0pXG4pO1xudmFyIHByZXBhcmVXYXRjaFV0aWxzID0gKHpvbmUsIHsgd2F0Y2gsIHdoZW4sIG1ha2VWb3dLaXQsIGlzUmV0cnlhYmxlUmVhc29uOiBpc1JldHJ5YWJsZVJlYXNvbjIgfSkgPT4ge1xuICBjb25zdCBkZXRhY2hlZCA9IHpvbmUuZGV0YWNoZWQoKTtcbiAgY29uc3QgdXRpbHNUb05vblN0b3JhYmxlUmVzdWx0cyA9IC8qICAgICAgICAgICAqLyBuZXcgV2Vha01hcCgpO1xuICBjb25zdCBtYWtlV2F0Y2hVdGlsc0tpdCA9IHpvbmUuZXhvQ2xhc3NLaXQoXG4gICAgXCJXYXRjaFV0aWxzXCIsXG4gICAge1xuICAgICAgdXRpbHM6IE0uaW50ZXJmYWNlKFwiVXRpbHNcIiwge1xuICAgICAgICBhbGw6IE0uY2FsbChNLmFycmF5T2YoTS5hbnkoKSkpLnJldHVybnMoVm93U2hhcGUyKSxcbiAgICAgICAgYWxsU2V0dGxlZDogTS5jYWxsKE0uYXJyYXlPZihNLmFueSgpKSkucmV0dXJucyhWb3dTaGFwZTIpLFxuICAgICAgICBhc1Byb21pc2U6IE0uY2FsbChNLnJhdygpKS5yZXN0KE0ucmF3KCkpLnJldHVybnMoTS5wcm9taXNlKCkpXG4gICAgICB9KSxcbiAgICAgIHdhdGNoZXI6IE0uaW50ZXJmYWNlKFwiV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5yYXcoKSkucmVzdChNLnJhdygpKS5yZXR1cm5zKE0ucmF3KCkpLFxuICAgICAgICBvblJlamVjdGVkOiBNLmNhbGwoTS5yYXcoKSkucmVzdChNLnJhdygpKS5yZXR1cm5zKE0ucmF3KCkpXG4gICAgICB9KSxcbiAgICAgIGhlbHBlcjogTS5pbnRlcmZhY2UoXCJIZWxwZXJcIiwge1xuICAgICAgICBjcmVhdGVWb3c6IE0uY2FsbChNLmFycmF5T2YoTS5hbnkoKSksIE0uYm9vbGVhbigpKS5yZXR1cm5zKFZvd1NoYXBlMiksXG4gICAgICAgIHByb2Nlc3NSZXN1bHQ6IE0uY2FsbChNLnJhdygpKS5yZXN0KE0ucmF3KCkpLnJldHVybnMoTS51bmRlZmluZWQoKSlcbiAgICAgIH0pLFxuICAgICAgcmV0cnlSZWplY3Rpb25Qcm9taXNlV2F0Y2hlcjogUHJvbWlzZVdhdGNoZXJJXG4gICAgfSxcbiAgICAoKSA9PiB7XG4gICAgICBjb25zdCBpZFRvVm93U3RhdGUgPSBkZXRhY2hlZC5tYXBTdG9yZShcImlkVG9Wb3dTdGF0ZVwiKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHRJZDogMG4sXG4gICAgICAgIGlkVG9Wb3dTdGF0ZVxuICAgICAgfTtcbiAgICB9LFxuICAgIHtcbiAgICAgIHV0aWxzOiB7XG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIGFsbChzcGVjaW1lbnMpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5mYWNldHMuaGVscGVyLmNyZWF0ZVZvdyhzcGVjaW1lbnMsIGZhbHNlKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgYWxsU2V0dGxlZChzcGVjaW1lbnMpIHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy5oZWxwZXIuY3JlYXRlVm93KHNwZWNpbWVucywgdHJ1ZSlcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICBhc1Byb21pc2Uoc3BlY2ltZW5QLCAuLi53YXRjaGVyQXJncykge1xuICAgICAgICAgIGNvbnN0IHZvdyA9IHdhdGNoKHNwZWNpbWVuUCwgLi4ud2F0Y2hlckFyZ3MpO1xuICAgICAgICAgIGNvbnN0IHByb21pc2UgPSB3aGVuKHZvdyk7XG4gICAgICAgICAgem9uZS53YXRjaFByb21pc2UocHJvbWlzZSwgdGhpcy5mYWNldHMucmV0cnlSZWplY3Rpb25Qcm9taXNlV2F0Y2hlcik7XG4gICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB3YXRjaGVyOiB7XG4gICAgICAgIC8qXG5cblxuXG5cblxuXG4gICAgICAgICAqL1xuICAgICAgICBvbkZ1bGZpbGxlZCh2YWx1ZSwgY3R4KSB7XG4gICAgICAgICAgdGhpcy5mYWNldHMuaGVscGVyLnByb2Nlc3NSZXN1bHQodmFsdWUsIGN0eCwgXCJmdWxmaWxsZWRcIik7XG4gICAgICAgIH0sXG4gICAgICAgIC8qXG5cblxuXG5cblxuXG4gICAgICAgICAqL1xuICAgICAgICBvblJlamVjdGVkKHJlYXNvbiwgY3R4KSB7XG4gICAgICAgICAgdGhpcy5mYWNldHMuaGVscGVyLnByb2Nlc3NSZXN1bHQocmVhc29uLCBjdHgsIFwicmVqZWN0ZWRcIik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBoZWxwZXI6IHtcbiAgICAgICAgLypcblxuXG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVWb3coc3BlY2ltZW5zLCBpc0FsbFNldHRsZWQpIHtcbiAgICAgICAgICBjb25zdCB7IG5leHRJZDogaWQsIGlkVG9Wb3dTdGF0ZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBjb25zdCBraXQgPSBtYWtlVm93S2l0KCk7XG4gICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHNwZWNpbWVucy5sZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAgICAgICAgIHdhdGNoKHNwZWNpbWVuc1tpbmRleF0sIHRoaXMuZmFjZXRzLndhdGNoZXIsIHtcbiAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICBudW1SZXN1bHRzOiBzcGVjaW1lbnMubGVuZ3RoLFxuICAgICAgICAgICAgICBpc0FsbFNldHRsZWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3BlY2ltZW5zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUubmV4dElkICs9IDFuO1xuICAgICAgICAgICAgaWRUb1Zvd1N0YXRlLmluaXQoXG4gICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICBoYXJkZW4oe1xuICAgICAgICAgICAgICAgIHJlc29sdmVyOiBraXQucmVzb2x2ZXIsXG4gICAgICAgICAgICAgICAgcmVtYWluaW5nOiBzcGVjaW1lbnMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHJlc3VsdHNNYXA6IGRldGFjaGVkLm1hcFN0b3JlKFwicmVzdWx0c01hcFwiKSxcbiAgICAgICAgICAgICAgICBpc0FsbFNldHRsZWRcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCBpZFRvTm9uU3RvcmFibGVSZXN1bHRzID0gcHJvdmlkZUxhenlNYXAoXG4gICAgICAgICAgICAgIHV0aWxzVG9Ob25TdG9yYWJsZVJlc3VsdHMsXG4gICAgICAgICAgICAgIHRoaXMuZmFjZXRzLnV0aWxzLFxuICAgICAgICAgICAgICAoKSA9PiAvKiAgICAgICAgICAgKi8gbmV3IE1hcCgpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWRUb05vblN0b3JhYmxlUmVzdWx0cy5zZXQoaWQsIC8qICAgICAgICAgICAqLyBuZXcgTWFwKCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBraXQucmVzb2x2ZXIucmVzb2x2ZShoYXJkZW4oW10pKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGtpdC52b3c7XG4gICAgICAgIH0sXG4gICAgICAgIC8qXG5cblxuXG5cblxuXG5cbiAgICAgICAgICovXG4gICAgICAgIHByb2Nlc3NSZXN1bHQocmVzdWx0LCB7IGlkLCBpbmRleCwgbnVtUmVzdWx0cywgaXNBbGxTZXR0bGVkIH0sIHN0YXR1cykge1xuICAgICAgICAgIGNvbnN0IHsgaWRUb1Zvd1N0YXRlIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIGlmICghaWRUb1Zvd1N0YXRlLmhhcyhpZCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgaWRUb05vblN0b3JhYmxlUmVzdWx0cyA9IHByb3ZpZGVMYXp5TWFwKFxuICAgICAgICAgICAgdXRpbHNUb05vblN0b3JhYmxlUmVzdWx0cyxcbiAgICAgICAgICAgIHRoaXMuZmFjZXRzLnV0aWxzLFxuICAgICAgICAgICAgKCkgPT4gLyogICAgICAgICAgICovIG5ldyBNYXAoKVxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgeyByZW1haW5pbmcsIHJlc3VsdHNNYXAsIHJlc29sdmVyIH0gPSBpZFRvVm93U3RhdGUuZ2V0KGlkKTtcbiAgICAgICAgICBpZiAoIWlzQWxsU2V0dGxlZCAmJiBzdGF0dXMgPT09IFwicmVqZWN0ZWRcIikge1xuICAgICAgICAgICAgaWRUb1Zvd1N0YXRlLmRlbGV0ZShpZCk7XG4gICAgICAgICAgICBpZFRvTm9uU3RvcmFibGVSZXN1bHRzLmRlbGV0ZShpZCk7XG4gICAgICAgICAgICByZXNvbHZlci5yZWplY3QocmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgcG9zc2libHlXcmFwcGVkUmVzdWx0ID0gaXNBbGxTZXR0bGVkID8gaGFyZGVuKHtcbiAgICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICAgIFtzdGF0dXMgPT09IFwiZnVsZmlsbGVkXCIgPyBcInZhbHVlXCIgOiBcInJlYXNvblwiXTogcmVzdWx0XG4gICAgICAgICAgfSkgOiByZXN1bHQ7XG4gICAgICAgICAgY29uc3Qgbm9uU3RvcmFibGVSZXN1bHRzID0gcHJvdmlkZUxhenlNYXAoXG4gICAgICAgICAgICBpZFRvTm9uU3RvcmFibGVSZXN1bHRzLFxuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAoKSA9PiAvKiAgICAgICAgICAgKi8gbmV3IE1hcCgpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoem9uZS5pc1N0b3JhYmxlKHBvc3NpYmx5V3JhcHBlZFJlc3VsdCkpIHtcbiAgICAgICAgICAgIHJlc3VsdHNNYXAuaW5pdChpbmRleCwgcG9zc2libHlXcmFwcGVkUmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9uU3RvcmFibGVSZXN1bHRzLnNldChpbmRleCwgcG9zc2libHlXcmFwcGVkUmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgdm93U3RhdGUgPSBoYXJkZW4oe1xuICAgICAgICAgICAgcmVtYWluaW5nOiByZW1haW5pbmcgLSAxLFxuICAgICAgICAgICAgcmVzdWx0c01hcCxcbiAgICAgICAgICAgIHJlc29sdmVyLFxuICAgICAgICAgICAgaXNBbGxTZXR0bGVkXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKHZvd1N0YXRlLnJlbWFpbmluZyA+IDApIHtcbiAgICAgICAgICAgIGlkVG9Wb3dTdGF0ZS5zZXQoaWQsIHZvd1N0YXRlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWRUb1Zvd1N0YXRlLmRlbGV0ZShpZCk7XG4gICAgICAgICAgaWRUb05vblN0b3JhYmxlUmVzdWx0cy5kZWxldGUoaWQpO1xuICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBuZXcgQXJyYXkobnVtUmVzdWx0cyk7XG4gICAgICAgICAgbGV0IG51bUxvc3QgPSAwO1xuICAgICAgICAgIGZvciAobGV0IGkzID0gMDsgaTMgPCBudW1SZXN1bHRzOyBpMyArPSAxKSB7XG4gICAgICAgICAgICBpZiAobm9uU3RvcmFibGVSZXN1bHRzLmhhcyhpMykpIHtcbiAgICAgICAgICAgICAgcmVzdWx0c1tpM10gPSBub25TdG9yYWJsZVJlc3VsdHMuZ2V0KGkzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0c01hcC5oYXMoaTMpKSB7XG4gICAgICAgICAgICAgIHJlc3VsdHNbaTNdID0gcmVzdWx0c01hcC5nZXQoaTMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbnVtTG9zdCArPSAxO1xuICAgICAgICAgICAgICByZXN1bHRzW2kzXSA9IGlzQWxsU2V0dGxlZCA/IHsgc3RhdHVzOiBcInJlamVjdGVkXCIsIHJlYXNvbjogXCJVbnN0b3JhYmxlIHJlc3VsdCB3YXMgbG9zdFwiIH0gOiB2b2lkIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChudW1Mb3N0ID4gMCAmJiAhaXNBbGxTZXR0bGVkKSB7XG4gICAgICAgICAgICByZXNvbHZlci5yZWplY3QoXG4gICAgICAgICAgICAgIGFzc2VydC5lcnJvcihYNGAke251bUxvc3R9IHVuc3RvcmFibGUgcmVzdWx0cyB3ZXJlIGxvc3RgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZXIucmVzb2x2ZShoYXJkZW4ocmVzdWx0cykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJldHJ5UmVqZWN0aW9uUHJvbWlzZVdhdGNoZXI6IHtcbiAgICAgICAgb25GdWxmaWxsZWQoX3Jlc3VsdCkge1xuICAgICAgICB9LFxuICAgICAgICBvblJlamVjdGVkKHJlYXNvbiwgZmFpbGVkT3ApIHtcbiAgICAgICAgICBpZiAoaXNSZXRyeWFibGVSZWFzb24yKHJlYXNvbiwgdm9pZCAwKSkge1xuICAgICAgICAgICAgRmFpbDVgUGVuZGluZyAke2JhcmUyKGZhaWxlZE9wKX0gY291bGQgbm90IHJldHJ5OyAke3JlYXNvbn1gO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgKTtcbiAgY29uc3QgbWFrZVdhdGNoVXRpbCA9ICgpID0+IHtcbiAgICBjb25zdCB7IHV0aWxzIH0gPSBtYWtlV2F0Y2hVdGlsc0tpdCgpO1xuICAgIHJldHVybiBoYXJkZW4odXRpbHMpO1xuICB9O1xuICByZXR1cm4gbWFrZVdhdGNoVXRpbDtcbn07XG5oYXJkZW4ocHJlcGFyZVdhdGNoVXRpbHMpO1xuXG4vL1xudmFyIHsgYXBwbHk6IGFwcGx5NyB9ID0gUmVmbGVjdDtcbnZhciBtYWtlV2F0Y2hOZXh0U3RlcCA9ICh6b25lKSA9PiAoXG4gIC8qXG5cblxuXG5cblxuXG4gICAqL1xuICAoc3BlY2ltZW4sIHByb21pc2VXYXRjaGVyKSA9PiB7XG4gICAgbGV0IHByb21pc2U7XG4gICAgY29uc3QgcGF5bG9hZCA9IGdldFZvd1BheWxvYWQoc3BlY2ltZW4pO1xuICAgIGlmIChwYXlsb2FkKSB7XG4gICAgICBwcm9taXNlID0gRShwYXlsb2FkLnZvd1YwKS5zaG9ydGVuKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UgPSBFLnJlc29sdmUoc3BlY2ltZW4pO1xuICAgIH1cbiAgICB6b25lLndhdGNoUHJvbWlzZShwcm9taXNlLCBwcm9taXNlV2F0Y2hlcik7XG4gIH1cbik7XG52YXIgc2V0dGxlID0gYXN5bmMgKHJlc29sdmVyLCB3YXRjaGVyLCB3Y2IsIHZhbHVlLCB3YXRjaGVyQXJncyA9IFtdKSA9PiB7XG4gIGF3YWl0IG51bGw7XG4gIHRyeSB7XG4gICAgbGV0IGNoYWluZWRWYWx1ZSA9IHZhbHVlO1xuICAgIGNvbnN0IHcyID0gd2F0Y2hlciAmJiB3YXRjaGVyW3djYl07XG4gICAgaWYgKHcyKSB7XG4gICAgICBjaGFpbmVkVmFsdWUgPSBhcHBseTcodzIsIHdhdGNoZXIsIFt2YWx1ZSwgLi4ud2F0Y2hlckFyZ3NdKTtcbiAgICB9IGVsc2UgaWYgKHdjYiA9PT0gXCJvblJlamVjdGVkXCIpIHtcbiAgICAgIHRocm93IHZhbHVlO1xuICAgIH1cbiAgICBpZiAocmVzb2x2ZXIpIHtcbiAgICAgIHJlc29sdmVyLnJlc29sdmUoY2hhaW5lZFZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXdhaXQgY2hhaW5lZFZhbHVlO1xuICB9IGNhdGNoIChlMikge1xuICAgIGlmIChyZXNvbHZlcikge1xuICAgICAgcmVzb2x2ZXIucmVqZWN0KGUyKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhyb3cgZTI7XG4gIH1cbn07XG52YXIgcHJlcGFyZVByb21pc2VXYXRjaGVyID0gKHpvbmUsIGlzUmV0cnlhYmxlUmVhc29uMiwgd2F0Y2hOZXh0U3RlcCkgPT4ge1xuICBjb25zdCB3YXRjaGVyU2VlblBheWxvYWRzID0gLyogICAgICAgICAgICovIG5ldyBXZWFrTWFwKCk7XG4gIGNvbnN0IGdldFNlZW5QYXlsb2FkcyA9ICh3YXRjaGVyKSA9PiB7XG4gICAgbGV0IHNlZW5QYXlsb2FkcyA9IHdhdGNoZXJTZWVuUGF5bG9hZHMuZ2V0KHdhdGNoZXIpO1xuICAgIGlmICghc2VlblBheWxvYWRzKSB7XG4gICAgICBzZWVuUGF5bG9hZHMgPSAvKiAgICAgICAgICAgKi8gbmV3IFdlYWtTZXQoKTtcbiAgICAgIHdhdGNoZXJTZWVuUGF5bG9hZHMuc2V0KHdhdGNoZXIsIHNlZW5QYXlsb2Fkcyk7XG4gICAgfVxuICAgIHJldHVybiBzZWVuUGF5bG9hZHM7XG4gIH07XG4gIHJldHVybiB6b25lLmV4b0NsYXNzKFxuICAgIFwiUHJvbWlzZVdhdGNoZXJcIixcbiAgICBQcm9taXNlV2F0Y2hlckksXG4gICAgLypcblxuXG5cblxuXG5cbiAgICAgKi9cbiAgICAocmVzb2x2ZXIsIHdhdGNoZXIsIHdhdGNoZXJBcmdzKSA9PiB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHtcbiAgICAgICAgdm93OiAoXG4gICAgICAgICAgLyogICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgIHZvaWQgMFxuICAgICAgICApLFxuICAgICAgICBwcmlvclJldHJ5VmFsdWU6IChcbiAgICAgICAgICAvKiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICB2b2lkIDBcbiAgICAgICAgKSxcbiAgICAgICAgcmVzb2x2ZXIsXG4gICAgICAgIHdhdGNoZXIsXG4gICAgICAgIHdhdGNoZXJBcmdzOiBoYXJkZW4od2F0Y2hlckFyZ3MpXG4gICAgICB9O1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIHN0YXRlXG4gICAgICApO1xuICAgIH0sXG4gICAge1xuICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICBvbkZ1bGZpbGxlZCh2YWx1ZSkge1xuICAgICAgICBjb25zdCB7IHdhdGNoZXIsIHdhdGNoZXJBcmdzLCByZXNvbHZlciB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgaWYgKCFyZXNvbHZlcikge1xuICAgICAgICAgIHRocm93IEVycm9yKFwiVW5leHBlY3RlZCBtdWx0aXBsZSBjYWxscyB0byBQcm9taXNlV2F0Y2hlclwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXlsb2FkID0gZ2V0Vm93UGF5bG9hZCh2YWx1ZSk7XG4gICAgICAgIGlmIChwYXlsb2FkKSB7XG4gICAgICAgICAgY29uc3Qgc2VlblBheWxvYWRzID0gZ2V0U2VlblBheWxvYWRzKHRoaXMuc2VsZik7XG4gICAgICAgICAgaWYgKHNlZW5QYXlsb2Fkcy5oYXMocGF5bG9hZC52b3dWMCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbGYub25SZWplY3RlZChFcnJvcihcIlZvdyByZXNvbHV0aW9uIGN5Y2xlIGRldGVjdGVkXCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VlblBheWxvYWRzLmFkZChwYXlsb2FkLnZvd1YwKTtcbiAgICAgICAgICB0aGlzLnN0YXRlLnZvdyA9IHZhbHVlO1xuICAgICAgICAgIHdhdGNoTmV4dFN0ZXAodmFsdWUsIHRoaXMuc2VsZik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHdhdGNoZXJTZWVuUGF5bG9hZHMuZGVsZXRlKHRoaXMuc2VsZik7XG4gICAgICAgIHRoaXMuc3RhdGUucHJpb3JSZXRyeVZhbHVlID0gdm9pZCAwO1xuICAgICAgICB0aGlzLnN0YXRlLndhdGNoZXIgPSB2b2lkIDA7XG4gICAgICAgIHRoaXMuc3RhdGUucmVzb2x2ZXIgPSB2b2lkIDA7XG4gICAgICAgIHZvaWQgc2V0dGxlKHJlc29sdmVyLCB3YXRjaGVyLCBcIm9uRnVsZmlsbGVkXCIsIHZhbHVlLCB3YXRjaGVyQXJncyk7XG4gICAgICB9LFxuICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgIG9uUmVqZWN0ZWQocmVhc29uKSB7XG4gICAgICAgIGNvbnN0IHsgdm93LCB3YXRjaGVyLCB3YXRjaGVyQXJncywgcmVzb2x2ZXIsIHByaW9yUmV0cnlWYWx1ZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgaWYgKCFyZXNvbHZlcikge1xuICAgICAgICAgIHRocm93IEVycm9yKFwiVW5leHBlY3RlZCBtdWx0aXBsZSBjYWxscyB0byBQcm9taXNlV2F0Y2hlclwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXRyeVZhbHVlID0gaXNSZXRyeWFibGVSZWFzb24yKHJlYXNvbiwgcHJpb3JSZXRyeVZhbHVlKTtcbiAgICAgICAgaWYgKHJldHJ5VmFsdWUpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlLnByaW9yUmV0cnlWYWx1ZSA9IHJldHJ5VmFsdWU7XG4gICAgICAgICAgaWYgKHZvdykge1xuICAgICAgICAgICAgd2F0Y2hOZXh0U3RlcCh2b3csIHRoaXMuc2VsZik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdhdGNoZXJTZWVuUGF5bG9hZHMuZGVsZXRlKHRoaXMuc2VsZik7XG4gICAgICAgIHRoaXMuc3RhdGUucHJpb3JSZXRyeVZhbHVlID0gdm9pZCAwO1xuICAgICAgICB0aGlzLnN0YXRlLnJlc29sdmVyID0gdm9pZCAwO1xuICAgICAgICB0aGlzLnN0YXRlLndhdGNoZXIgPSB2b2lkIDA7XG4gICAgICAgIHZvaWQgc2V0dGxlKHJlc29sdmVyLCB3YXRjaGVyLCBcIm9uUmVqZWN0ZWRcIiwgcmVhc29uLCB3YXRjaGVyQXJncyk7XG4gICAgICB9XG4gICAgfVxuICApO1xufTtcbnZhciBwcmVwYXJlV2F0Y2ggPSAoem9uZSwgbWFrZVZvd0tpdCwgaXNSZXRyeWFibGVSZWFzb24yID0gKF9yZWFzb24sIF9sYXN0VmFsdWUpID0+IHZvaWQgMCkgPT4ge1xuICBjb25zdCB3YXRjaE5leHRTdGVwID0gbWFrZVdhdGNoTmV4dFN0ZXAoem9uZSk7XG4gIGNvbnN0IG1ha2VQcm9taXNlV2F0Y2hlciA9IHByZXBhcmVQcm9taXNlV2F0Y2hlcihcbiAgICB6b25lLFxuICAgIGlzUmV0cnlhYmxlUmVhc29uMixcbiAgICB3YXRjaE5leHRTdGVwXG4gICk7XG4gIGNvbnN0IHdhdGNoID0gKHNwZWNpbWVuUCwgd2F0Y2hlciwgLi4ud2F0Y2hlckFyZ3MpID0+IHtcbiAgICBjb25zdCB7IHJlc29sdmVyLCB2b3cgfSA9IG1ha2VWb3dLaXQoKTtcbiAgICBjb25zdCBwcm9taXNlV2F0Y2hlciA9IG1ha2VQcm9taXNlV2F0Y2hlcihyZXNvbHZlciwgd2F0Y2hlciwgd2F0Y2hlckFyZ3MpO1xuICAgIGNvbnN0IHByb21pc2UgPSBFLnJlc29sdmUoc3BlY2ltZW5QKTtcbiAgICB6b25lLndhdGNoUHJvbWlzZShwcm9taXNlLCBwcm9taXNlV2F0Y2hlcik7XG4gICAgcmV0dXJuIHZvdztcbiAgfTtcbiAgaGFyZGVuKHdhdGNoKTtcbiAgcmV0dXJuIHdhdGNoO1xufTtcbmhhcmRlbihwcmVwYXJlV2F0Y2gpO1xuXG4vL1xudmFyIG1ha2VVbmhhbmRsZWRSZWplY3Rpb25DYW5jZWxsZXIgPSAocmVqZWN0ZWQsIHVwZ3JhZGVkUEspID0+IHtcbiAgcmV0dXJuICgpID0+IHtcbiAgICByZWplY3RlZD8uY2F0Y2goc2luazIpO1xuICAgIHVwZ3JhZGVkUEs/LnJlc29sdmUoKTtcbiAgfTtcbn07XG52YXIgcHJlcGFyZVZvd1JlamVjdGlvblRyYWNrZXIgPSAoem9uZSkgPT4ge1xuICBjb25zdCB2b3dUb0NhbmNlbFVuaGFuZGxlZFJlamVjdGlvbiA9IC8qICAgICAgICAgICAqLyBuZXcgV2Vha01hcCgpO1xuICBjb25zdCB1cGdyYWRlUmVqZWN0aW9uV2F0Y2hlciA9IHpvbmUuZXhvKFxuICAgIFwiVXBncmFkZVJlamVjdGlvbldhdGNoZXJcIixcbiAgICBNLmludGVyZmFjZShcIlVwZ3JhZGVSZWplY3Rpb25XYXRjaGVyXCIsIHtcbiAgICAgIG9uUmVqZWN0ZWQ6IE0uY2FsbChNLnJhdygpLCBNLnJhdygpKS5yZXR1cm5zKClcbiAgICB9KSxcbiAgICB7XG4gICAgICBvblJlamVjdGVkKHVwZ3JhZGVSZWFzb24sIGJhc2VSZWFzb24pIHtcbiAgICAgICAgY29uc3QgcmVhc29uID0gYXNzZXJ0LmVycm9yKFxuICAgICAgICAgIHJlZGFjdGVkYFZPV19SRUpFQ1RJT04gJHtiYXNlUmVhc29ufSBub3QgaGFuZGxlZCBiZWZvcmUgdXBncmFkZSAke3VwZ3JhZGVSZWFzb259YFxuICAgICAgICApO1xuICAgICAgICB0aHJvdyByZWFzb247XG4gICAgICB9XG4gICAgfVxuICApO1xuICBjb25zdCB2b3dSZWplY3Rpb25UcmFja2VyID0gem9uZS5leG8oXG4gICAgXCJWb3dSZWplY3Rpb25UcmFja2VyXCIsXG4gICAgTS5pbnRlcmZhY2UoXCJWb3dSZWplY3Rpb25UcmFja2VyXCIsIHtcbiAgICAgIGhhbmRsZTogTS5jYWxsKE0ucmVtb3RhYmxlKCkpLnJldHVybnMoKSxcbiAgICAgIHJlamVjdDogTS5jYWxsKE0ucmVtb3RhYmxlKCksIE0ucmF3KCkpLnJldHVybnMoKVxuICAgIH0pLFxuICAgIHtcbiAgICAgIC8qXG5cbiAgICAgICAqL1xuICAgICAgaGFuZGxlKHZvd0NhcCkge1xuICAgICAgICBjb25zdCBjYW5jZWwgPSB2b3dUb0NhbmNlbFVuaGFuZGxlZFJlamVjdGlvbi5nZXQodm93Q2FwKTtcbiAgICAgICAgaWYgKCFjYW5jZWwpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBhc3NlcnQuZXJyb3IoXG4gICAgICAgICAgICAgIHJlZGFjdGVkYE5vdyBoYW5kbGluZyBhIFZPV19SRUpFQ1RJT04gZnJvbSBhIHByaW9yIGluY2FybmF0aW9uIGZvciAke3Zvd0NhcH1gXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdm93VG9DYW5jZWxVbmhhbmRsZWRSZWplY3Rpb24uZGVsZXRlKHZvd0NhcCk7XG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgfSxcbiAgICAgIC8qXG5cblxuICAgICAgICovXG4gICAgICByZWplY3Qodm93Q2FwLCByZWFzb24pIHtcbiAgICAgICAgaWYgKHZvd1RvQ2FuY2VsVW5oYW5kbGVkUmVqZWN0aW9uLmhhcyh2b3dDYXApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGhhcmRlbihyZWFzb24pO1xuICAgICAgICBjb25zdCBiYXNlUmVhc29uID0gem9uZS5pc1N0b3JhYmxlKHJlYXNvbikgPyByZWFzb24gOiBhc3NlcnQuZXJyb3IocmVkYWN0ZWRgVm93IHJlamVjdGlvbiByZWFzb24gd2FzIG5vdCBzdG9yZWQ6ICR7cmVhc29ufWApO1xuICAgICAgICBjb25zdCB1cGdyYWRlZFBLID0gbWFrZVByb21pc2VLaXQoKTtcbiAgICAgICAgem9uZS53YXRjaFByb21pc2UoXG4gICAgICAgICAgdXBncmFkZWRQSy5wcm9taXNlLFxuICAgICAgICAgIHVwZ3JhZGVSZWplY3Rpb25XYXRjaGVyLFxuICAgICAgICAgIGJhc2VSZWFzb25cbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgcmVqZWN0ZWQgPSBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICAgICAgICBjb25zdCBjYW5jZWwgPSBtYWtlVW5oYW5kbGVkUmVqZWN0aW9uQ2FuY2VsbGVyKHJlamVjdGVkLCB1cGdyYWRlZFBLKTtcbiAgICAgICAgdm93VG9DYW5jZWxVbmhhbmRsZWRSZWplY3Rpb24uc2V0KHZvd0NhcCwgY2FuY2VsKTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIHJldHVybiB2b3dSZWplY3Rpb25UcmFja2VyO1xufTtcblxuLy9cbnZhciB7IGRlZmluZVByb3BlcnRpZXM6IGRlZmluZVByb3BlcnRpZXM0IH0gPSBPYmplY3Q7XG52YXIgUmV0cnlhYmxlRmxvd0lLaXQgPSBoYXJkZW4oe1xuICBmbG93OiBNLmludGVyZmFjZShcIkZsb3dcIiwge1xuICAgIHJlc3RhcnQ6IE0uY2FsbCgpLnJldHVybnMoKSxcbiAgICBnZXRPdXRjb21lOiBNLmNhbGwoKS5yZXR1cm5zKFZvd1NoYXBlKVxuICB9KSxcbiAgcmVzdWx0V2F0Y2hlcjogUHJvbWlzZVdhdGNoZXJJXG59KTtcbnZhciBBZG1pblJldHJ5YWJsZUZsb3dJID0gTS5pbnRlcmZhY2UoXCJSZXRyeWFibGVGbG93QWRtaW5cIiwge1xuICBnZXRGbG93Rm9yT3V0Y29tZVZvdzogTS5jYWxsKFZvd1NoYXBlKS5yZXR1cm5zKE0ub3B0KE0ucmVtb3RhYmxlKFwiZmxvd1wiKSkpXG59KTtcbnZhciBwcmVwYXJlUmV0cnlhYmxlVG9vbHMgPSAob3V0ZXJab25lLCBvdXRlck9wdGlvbnMpID0+IHtcbiAgY29uc3QgeyBtYWtlVm93S2l0LCBpc1JldHJ5YWJsZVJlYXNvbjogaXNSZXRyeWFibGVSZWFzb24yIH0gPSBvdXRlck9wdGlvbnM7XG4gIGNvbnN0IGFzVm93ID0gbWFrZUFzVm93KG1ha2VWb3dLaXQpO1xuICBjb25zdCBmbG93Rm9yT3V0Y29tZVZvd0tleSA9IChcbiAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICBvdXRlclpvbmUubWFwU3RvcmUoXCJyZXRyeWFibGVGbG93Rm9yT3V0Y29tZVZvd1wiLCB7XG4gICAgICBrZXlTaGFwZTogTS5yZW1vdGFibGUoXCJ0b1Bhc3NhYmxlQ2FwXCIpLFxuICAgICAgdmFsdWVTaGFwZTogTS5yZW1vdGFibGUoXCJmbG93XCIpXG4gICAgICAvL1xuICAgIH0pXG4gICk7XG4gIGNvbnN0IHByZXBhcmVSZXRyeWFibGVGbG93S2l0ID0gKHpvbmUsIHRhZywgcmV0cnlhYmxlRnVuYykgPT4ge1xuICAgIHR5cGVvZiByZXRyeWFibGVGdW5jID09PSBcImZ1bmN0aW9uXCIgfHwgdGhyb3dSZWRhY3RlZGByZXRyeWFibGVGdW5jIG11c3QgYmUgYSBjYWxsYWJsZSBmdW5jdGlvbiAke3JldHJ5YWJsZUZ1bmN9YDtcbiAgICBjb25zdCBpbnRlcm5hbE1ha2VSZXRyeWFibGVGbG93S2l0ID0gem9uZS5leG9DbGFzc0tpdChcbiAgICAgIHRhZyxcbiAgICAgIFJldHJ5YWJsZUZsb3dJS2l0LFxuICAgICAgKGFjdGl2YXRpb25BcmdzKSA9PiB7XG4gICAgICAgIGhhcmRlbihhY3RpdmF0aW9uQXJncyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYWN0aXZhdGlvbkFyZ3MsXG4gICAgICAgICAgLy9cbiAgICAgICAgICBvdXRjb21lS2l0OiBtYWtlVm93S2l0KCksXG4gICAgICAgICAgLy9cbiAgICAgICAgICBsYXN0UmV0cnlSZWFzb246IHZvaWQgMCxcbiAgICAgICAgICBydW5zOiAwbixcbiAgICAgICAgICBpc0RvbmU6IGZhbHNlXG4gICAgICAgICAgLy9cbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGZsb3c6IHtcbiAgICAgICAgICAvKlxuXG5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICByZXN0YXJ0KCkge1xuICAgICAgICAgICAgY29uc3QgeyBzdGF0ZSwgZmFjZXRzIH0gPSB0aGlzO1xuICAgICAgICAgICAgY29uc3QgeyBhY3RpdmF0aW9uQXJncywgaXNEb25lIH0gPSBzdGF0ZTtcbiAgICAgICAgICAgIGNvbnN0IHsgZmxvdywgcmVzdWx0V2F0Y2hlciB9ID0gZmFjZXRzO1xuICAgICAgICAgICAgIWlzRG9uZSB8fCAvL1xuICAgICAgICAgICAgdGhyb3dSZWRhY3RlZGBDYW5ub3QgcmVzdGFydCBhIGRvbmUgcmV0cnlhYmxlIGZsb3cgJHtmbG93fWA7XG4gICAgICAgICAgICBjb25zdCBydW5JZCA9IHN0YXRlLnJ1bnMgKyAxbjtcbiAgICAgICAgICAgIHN0YXRlLnJ1bnMgPSBydW5JZDtcbiAgICAgICAgICAgIGxldCByZXN1bHRQO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmVzdWx0UCA9IFByb21pc2UucmVzb2x2ZShyZXRyeWFibGVGdW5jKC4uLmFjdGl2YXRpb25BcmdzKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgcmVzdWx0UCA9IFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXRlclpvbmUud2F0Y2hQcm9taXNlKGhhcmRlbihyZXN1bHRQKSwgcmVzdWx0V2F0Y2hlciwgcnVuSWQpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2V0T3V0Y29tZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgc3RhdGUgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IG91dGNvbWVLaXQgfSA9IHN0YXRlO1xuICAgICAgICAgICAgcmV0dXJuIG91dGNvbWVLaXQudm93O1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzdWx0V2F0Y2hlcjoge1xuICAgICAgICAgIG9uRnVsZmlsbGVkKHZhbHVlLCBydW5JZCkge1xuICAgICAgICAgICAgY29uc3QgeyBzdGF0ZSB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IHsgcnVucywgb3V0Y29tZUtpdCB9ID0gc3RhdGU7XG4gICAgICAgICAgICBpZiAocnVuSWQgIT09IHJ1bnMpIHJldHVybjtcbiAgICAgICAgICAgICFzdGF0ZS5pc0RvbmUgfHwgdGhyb3dSZWRhY3RlZGBDYW5ub3QgcmVzb2x2ZSBhIGRvbmUgcmV0cnlhYmxlIGZsb3cgJHt0aGlzLmZhY2V0cy5mbG93fWA7XG4gICAgICAgICAgICBvdXRjb21lS2l0LnJlc29sdmVyLnJlc29sdmUodmFsdWUpO1xuICAgICAgICAgICAgZmxvd0Zvck91dGNvbWVWb3dLZXkuZGVsZXRlKHRvUGFzc2FibGVDYXAob3V0Y29tZUtpdC52b3cpKTtcbiAgICAgICAgICAgIHN0YXRlLmlzRG9uZSA9IHRydWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvblJlamVjdGVkKHJlYXNvbiwgcnVuSWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgc3RhdGUgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IHJ1bnMsIG91dGNvbWVLaXQgfSA9IHN0YXRlO1xuICAgICAgICAgICAgaWYgKHJ1bklkICE9PSBydW5zKSByZXR1cm47XG4gICAgICAgICAgICAhc3RhdGUuaXNEb25lIHx8IHRocm93UmVkYWN0ZWRgQ2Fubm90IHJlamVjdCBhIGRvbmUgcmV0cnlhYmxlIGZsb3cgJHt0aGlzLmZhY2V0cy5mbG93fWA7XG4gICAgICAgICAgICBjb25zdCByZXRyeVJlYXNvbiA9IGlzUmV0cnlhYmxlUmVhc29uMihcbiAgICAgICAgICAgICAgcmVhc29uLFxuICAgICAgICAgICAgICBzdGF0ZS5sYXN0UmV0cnlSZWFzb25cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAocmV0cnlSZWFzb24pIHtcbiAgICAgICAgICAgICAgc3RhdGUubGFzdFJldHJ5UmVhc29uID0gcmV0cnlSZWFzb247XG4gICAgICAgICAgICAgIHRoaXMuZmFjZXRzLmZsb3cucmVzdGFydCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb3V0Y29tZUtpdC5yZXNvbHZlci5yZWplY3QocmVhc29uKTtcbiAgICAgICAgICAgICAgZmxvd0Zvck91dGNvbWVWb3dLZXkuZGVsZXRlKHRvUGFzc2FibGVDYXAob3V0Y29tZUtpdC52b3cpKTtcbiAgICAgICAgICAgICAgc3RhdGUuaXNEb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICAgIGNvbnN0IG1ha2VSZXRyeWFibGVGbG93S2l0ID0gKGFjdGl2YXRpb25BcmdzKSA9PiB7XG4gICAgICBjb25zdCByZXRyeWFibGVLaXQgPSBpbnRlcm5hbE1ha2VSZXRyeWFibGVGbG93S2l0KGFjdGl2YXRpb25BcmdzKTtcbiAgICAgIGNvbnN0IHsgZmxvdyB9ID0gcmV0cnlhYmxlS2l0O1xuICAgICAgY29uc3Qgdm93ID0gZmxvdy5nZXRPdXRjb21lKCk7XG4gICAgICBmbG93Rm9yT3V0Y29tZVZvd0tleS5pbml0KHRvUGFzc2FibGVDYXAodm93KSwgZmxvdyk7XG4gICAgICBmbG93LnJlc3RhcnQoKTtcbiAgICAgIHJldHVybiByZXRyeWFibGVLaXQ7XG4gICAgfTtcbiAgICByZXR1cm4gaGFyZGVuKG1ha2VSZXRyeWFibGVGbG93S2l0KTtcbiAgfTtcbiAgY29uc3QgcmV0cnlhYmxlID0gKHpvbmUsIHRhZywgcmV0cnlhYmxlRnVuYykgPT4ge1xuICAgIGNvbnN0IG1ha2VSZXRyeWFibGVLaXQgPSBwcmVwYXJlUmV0cnlhYmxlRmxvd0tpdCh6b25lLCB0YWcsIHJldHJ5YWJsZUZ1bmMpO1xuICAgIGNvbnN0IHdyYXBwZXJGdW5jTmFtZSA9IGAke3RhZ31fcmV0cnlhYmxlYDtcbiAgICBjb25zdCB3cmFwcGVyRnVuYyA9IHtcbiAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICBbd3JhcHBlckZ1bmNOYW1lXSguLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgem9uZS5pc1N0b3JhYmxlKGhhcmRlbihhcmdzKSkgfHwgdGhyb3dSZWRhY3RlZGByZXRyeWFibGUgYXJndW1lbnRzIG11c3QgYmUgc3RvcmFibGUgJHthcmdzfWA7XG4gICAgICAgICAgY29uc3QgeyBmbG93IH0gPSBtYWtlUmV0cnlhYmxlS2l0KGFyZ3MpO1xuICAgICAgICAgIHJldHVybiBmbG93LmdldE91dGNvbWUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVt3cmFwcGVyRnVuY05hbWVdO1xuICAgIGRlZmluZVByb3BlcnRpZXM0KHdyYXBwZXJGdW5jLCB7XG4gICAgICBsZW5ndGg6IHsgdmFsdWU6IHJldHJ5YWJsZUZ1bmMubGVuZ3RoIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaGFyZGVuKHdyYXBwZXJGdW5jKTtcbiAgfTtcbiAgY29uc3QgYWRtaW5SZXRyeWFibGVGbG93ID0gb3V0ZXJab25lLmV4byhcbiAgICBcIkFkbWluUmV0cnlhYmxlRmxvd1wiLFxuICAgIEFkbWluUmV0cnlhYmxlRmxvd0ksXG4gICAge1xuICAgICAgLypcblxuICAgICAgICovXG4gICAgICBnZXRGbG93Rm9yT3V0Y29tZVZvdyhvdXRjb21lVm93KSB7XG4gICAgICAgIHJldHVybiBmbG93Rm9yT3V0Y29tZVZvd0tleS5nZXQodG9QYXNzYWJsZUNhcChvdXRjb21lVm93KSk7XG4gICAgICB9XG4gICAgfVxuICApO1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICBwcmVwYXJlUmV0cnlhYmxlRmxvd0tpdCxcbiAgICBhZG1pblJldHJ5YWJsZUZsb3csXG4gICAgcmV0cnlhYmxlXG4gIH0pO1xufTtcbmhhcmRlbihwcmVwYXJlUmV0cnlhYmxlVG9vbHMpO1xuXG4vL1xudmFyIG1ha2VXaGVuID0gKGlzUmV0cnlhYmxlUmVhc29uMiA9IChcbiAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgKCkgPT4gZmFsc2VcbikpID0+IHtcbiAgY29uc3QgdW53cmFwID0gYXN5bmMgKHNwZWNpbWVuUCkgPT4ge1xuICAgIGF3YWl0IG51bGw7XG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHNwZWNpbWVuUDtcbiAgICBsZXQgcGF5bG9hZCA9IGdldFZvd1BheWxvYWQocmVzdWx0KTtcbiAgICBsZXQgcHJpb3JSZXRyeVZhbHVlO1xuICAgIGNvbnN0IHNlZW5QYXlsb2FkcyA9IC8qICAgICAgICAgICAqLyBuZXcgV2Vha1NldCgpO1xuICAgIHdoaWxlIChwYXlsb2FkKSB7XG4gICAgICBjb25zdCB7IHZvd1YwIH0gPSBwYXlsb2FkO1xuICAgICAgaWYgKHNlZW5QYXlsb2Fkcy5oYXModm93VjApKSB7XG4gICAgICAgIHRocm93IEVycm9yKFwiVm93IHJlc29sdXRpb24gY3ljbGUgZGV0ZWN0ZWRcIik7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBFKHZvd1YwKS5zaG9ydGVuKCk7XG4gICAgICAgIHNlZW5QYXlsb2Fkcy5hZGQodm93VjApO1xuICAgICAgICBwcmlvclJldHJ5VmFsdWUgPSB2b2lkIDA7XG4gICAgICAgIHJlc3VsdCA9IHJlcztcbiAgICAgIH0gY2F0Y2ggKGUyKSB7XG4gICAgICAgIGNvbnN0IG5leHRSZXRyeVZhbHVlID0gaXNSZXRyeWFibGVSZWFzb24yKGUyLCBwcmlvclJldHJ5VmFsdWUpO1xuICAgICAgICBpZiAoIW5leHRSZXRyeVZhbHVlKSB7XG4gICAgICAgICAgdGhyb3cgZTI7XG4gICAgICAgIH1cbiAgICAgICAgcHJpb3JSZXRyeVZhbHVlID0gbmV4dFJldHJ5VmFsdWU7XG4gICAgICB9XG4gICAgICBwYXlsb2FkID0gZ2V0Vm93UGF5bG9hZChyZXN1bHQpO1xuICAgIH1cbiAgICBjb25zdCB1bndyYXBwZWQgPSAoXG4gICAgICAvKiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICByZXN1bHRcbiAgICApO1xuICAgIHJldHVybiB1bndyYXBwZWQ7XG4gIH07XG4gIGNvbnN0IHdoZW4gPSAoc3BlY2ltZW5QLCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkgPT4ge1xuICAgIGNvbnN0IHVud3JhcHBlZCA9IHVud3JhcChzcGVjaW1lblApO1xuICAgIGlmIChvbkZ1bGZpbGxlZCA9PSBudWxsICYmIG9uUmVqZWN0ZWQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgdW53cmFwcGVkXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gRS5yZXNvbHZlKHVud3JhcHBlZCkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG4gIH07XG4gIGhhcmRlbih3aGVuKTtcbiAgcmV0dXJuIHdoZW47XG59O1xuaGFyZGVuKG1ha2VXaGVuKTtcblxuLy9cbnZhciBwcmVwYXJlQmFzaWNWb3dUb29scyA9ICh6b25lLCBwb3dlcnMgPSB7fSkgPT4ge1xuICBjb25zdCB7IGlzUmV0cnlhYmxlUmVhc29uOiBpc1JldHJ5YWJsZVJlYXNvbjIgPSAoXG4gICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAoKSA9PiBmYWxzZVxuICApIH0gPSBwb3dlcnM7XG4gIGNvbnN0IHZvd1JlamVjdGlvblRyYWNrZXIgPSBwcmVwYXJlVm93UmVqZWN0aW9uVHJhY2tlcih6b25lKTtcbiAgY29uc3QgbWFrZVZvd0tpdCA9IHByZXBhcmVWb3dLaXQoem9uZSwgdm93UmVqZWN0aW9uVHJhY2tlcik7XG4gIGNvbnN0IHdoZW4gPSBtYWtlV2hlbihpc1JldHJ5YWJsZVJlYXNvbjIpO1xuICBjb25zdCB3YXRjaCA9IHByZXBhcmVXYXRjaCh6b25lLCBtYWtlVm93S2l0LCBpc1JldHJ5YWJsZVJlYXNvbjIpO1xuICBjb25zdCBtYWtlV2F0Y2hVdGlscyA9IHByZXBhcmVXYXRjaFV0aWxzKHpvbmUsIHtcbiAgICB3YXRjaCxcbiAgICB3aGVuLFxuICAgIG1ha2VWb3dLaXQsXG4gICAgaXNSZXRyeWFibGVSZWFzb246IGlzUmV0cnlhYmxlUmVhc29uMlxuICB9KTtcbiAgY29uc3Qgd2F0Y2hVdGlscyA9IG1ha2VXYXRjaFV0aWxzKCk7XG4gIGNvbnN0IGFzVm93ID0gbWFrZUFzVm93KG1ha2VWb3dLaXQpO1xuICBjb25zdCB7IHJldHJ5YWJsZSB9ID0gcHJlcGFyZVJldHJ5YWJsZVRvb2xzKHpvbmUsIHtcbiAgICBtYWtlVm93S2l0LFxuICAgIGlzUmV0cnlhYmxlUmVhc29uOiBpc1JldHJ5YWJsZVJlYXNvbjJcbiAgfSk7XG4gIGNvbnN0IGFsbCA9IChtYXliZVZvd3MpID0+IHdhdGNoVXRpbHMuYWxsKG1heWJlVm93cyk7XG4gIGNvbnN0IGFsbFZvd3MgPSBhbGw7XG4gIGNvbnN0IGFsbFNldHRsZWQgPSAobWF5YmVWb3dzKSA9PiB3YXRjaFV0aWxzLmFsbFNldHRsZWQobWF5YmVWb3dzKTtcbiAgY29uc3QgYXNQcm9taXNlID0gKHNwZWNpbWVuUCwgLi4ud2F0Y2hlckFyZ3MpID0+IHdhdGNoVXRpbHMuYXNQcm9taXNlKHNwZWNpbWVuUCwgLi4ud2F0Y2hlckFyZ3MpO1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICB3aGVuLFxuICAgIHdhdGNoLFxuICAgIG1ha2VWb3dLaXQsXG4gICAgYWxsLFxuICAgIGFsbFZvd3MsXG4gICAgYWxsU2V0dGxlZCxcbiAgICBhc1ZvdyxcbiAgICBhc1Byb21pc2UsXG4gICAgcmV0cnlhYmxlLFxuICAgIHJldHJpYWJsZTogcmV0cnlhYmxlXG4gICAgLy9cbiAgfSk7XG59O1xuaGFyZGVuKHByZXBhcmVCYXNpY1Zvd1Rvb2xzKTtcblxuLy9cbnZhciBoaWRkZW5QcmlvckVycm9yMjtcbnZhciBoaWRkZW5DdXJyZW50VHVybjIgPSAwO1xudmFyIGhpZGRlbkN1cnJlbnRFdmVudDIgPSAwO1xudmFyIFZFUkJPU0UyID0gZW52aXJvbm1lbnRPcHRpb25zTGlzdEhhcyhcIkRFQlVHXCIsIFwidHJhY2stdHVybnNcIik7XG52YXIgRU5BQkxFRDIgPSBnZXRFbnZpcm9ubWVudE9wdGlvbihcIlRSQUNLX1RVUk5TXCIsIFwiZGlzYWJsZWRcIiwgW1wiZW5hYmxlZFwiXSkgPT09IFwiZW5hYmxlZFwiO1xudmFyIGFkZFJlamVjdGlvbk5vdGUyID0gKGRldGFpbHNOb3RlKSA9PiAocmVhc29uKSA9PiB7XG4gIGlmIChyZWFzb24gaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIG5vdGUocmVhc29uLCBkZXRhaWxzTm90ZSk7XG4gIH1cbiAgaWYgKFZFUkJPU0UyKSB7XG4gICAgY29uc29sZS5sb2coXCJSRUpFQ1RFRCBhdCB0b3Agb2YgZXZlbnQgbG9vcFwiLCByZWFzb24pO1xuICB9XG59O1xudmFyIHdyYXBGdW5jdGlvbjIgPSAoZnVuYywgc2VuZGluZ0Vycm9yKSA9PiAoLi4uYXJncykgPT4ge1xuICBoaWRkZW5QcmlvckVycm9yMiA9IHNlbmRpbmdFcnJvcjtcbiAgaGlkZGVuQ3VycmVudFR1cm4yICs9IDE7XG4gIGhpZGRlbkN1cnJlbnRFdmVudDIgPSAwO1xuICB0cnkge1xuICAgIGxldCByZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGZ1bmMoLi4uYXJncyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgbm90ZShcbiAgICAgICAgICBlcnIsXG4gICAgICAgICAgcmVkYWN0ZWRgVGhyb3duIGZyb206ICR7aGlkZGVuUHJpb3JFcnJvcjJ9OiR7aGlkZGVuQ3VycmVudFR1cm4yfS4ke2hpZGRlbkN1cnJlbnRFdmVudDJ9YFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKFZFUkJPU0UyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVEhST1dOIHRvIHRvcCBvZiBldmVudCBsb29wXCIsIGVycik7XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIGNvbnN0IGRldGFpbHNOb3RlID0gcmVkYWN0ZWRgUmVqZWN0aW9uIGZyb206ICR7aGlkZGVuUHJpb3JFcnJvcjJ9OiR7aGlkZGVuQ3VycmVudFR1cm4yfS4ke2hpZGRlbkN1cnJlbnRFdmVudDJ9YDtcbiAgICBQcm9taXNlLnJlc29sdmUocmVzdWx0KS5jYXRjaChhZGRSZWplY3Rpb25Ob3RlMihkZXRhaWxzTm90ZSkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gZmluYWxseSB7XG4gICAgaGlkZGVuUHJpb3JFcnJvcjIgPSB2b2lkIDA7XG4gIH1cbn07XG52YXIgdHJhY2tUdXJuczIgPSAoZnVuY3MpID0+IHtcbiAgaWYgKCFFTkFCTEVEMiB8fCB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhZ2xvYmFsVGhpcy5hc3NlcnQpIHtcbiAgICByZXR1cm4gZnVuY3M7XG4gIH1cbiAgaGlkZGVuQ3VycmVudEV2ZW50MiArPSAxO1xuICBjb25zdCBzZW5kaW5nRXJyb3IgPSBFcnJvcihcbiAgICBgRXZlbnQ6ICR7aGlkZGVuQ3VycmVudFR1cm4yfS4ke2hpZGRlbkN1cnJlbnRFdmVudDJ9YFxuICApO1xuICBpZiAoaGlkZGVuUHJpb3JFcnJvcjIgIT09IHZvaWQgMCkge1xuICAgIG5vdGUoc2VuZGluZ0Vycm9yLCByZWRhY3RlZGBDYXVzZWQgYnk6ICR7aGlkZGVuUHJpb3JFcnJvcjJ9YCk7XG4gIH1cbiAgcmV0dXJuIChcbiAgICAvKiAgICAgICAgICAgICovXG4gICAgZnVuY3MubWFwKChmdW5jKSA9PiBmdW5jICYmIHdyYXBGdW5jdGlvbjIoZnVuYywgc2VuZGluZ0Vycm9yKSlcbiAgKTtcbn07XG5cbi8vXG52YXIgeyBoYXNPd246IGhhc093bjMsIGZyZWV6ZTogZnJlZXplOSwgZW50cmllczogZW50cmllczggfSA9IE9iamVjdDtcbnZhciBpc0pTT05SZWNvcmQyID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJvYmplY3RcIiAmJiB2YWwgIT09IG51bGwgJiYgIUFycmF5LmlzQXJyYXkodmFsKTtcbnZhciBzaW1wbGlmeVRhZzIgPSAodGFnKSA9PiB7XG4gIGZvciAoY29uc3QgcHJlZml4IG9mIFtcIkFsbGVnZWQ6IFwiLCBcIkRlYnVnTmFtZTogXCJdKSB7XG4gICAgaWYgKHRhZy5zdGFydHNXaXRoKHByZWZpeCkpIHtcbiAgICAgIHJldHVybiB0YWcuc2xpY2UocHJlZml4Lmxlbmd0aCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0YWc7XG59O1xudmFyIG1ha2VNZXNzYWdlQnJlYWtwb2ludFRlc3RlcjIgPSAob3B0aW9uTmFtZSkgPT4ge1xuICBsZXQgYnJlYWtwb2ludHMgPSBKU09OLnBhcnNlKGdldEVudmlyb25tZW50T3B0aW9uKG9wdGlvbk5hbWUsIFwibnVsbFwiKSk7XG4gIGlmIChicmVha3BvaW50cyA9PT0gbnVsbCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgbGV0IGJyZWFrcG9pbnRzVGFibGU7XG4gIGNvbnN0IGdldEJyZWFrcG9pbnRzID0gKCkgPT4gYnJlYWtwb2ludHM7XG4gIGZyZWV6ZTkoZ2V0QnJlYWtwb2ludHMpO1xuICBjb25zdCBzZXRCcmVha3BvaW50cyA9IChuZXdCcmVha3BvaW50cyA9IGJyZWFrcG9pbnRzKSA9PiB7XG4gICAgaXNKU09OUmVjb3JkMihuZXdCcmVha3BvaW50cykgfHwgdGhyb3dSZWRhY3RlZGBFeHBlY3RlZCAke3F1b3RlKG9wdGlvbk5hbWUpfSBvcHRpb24gdG8gYmUgYSBKU09OIGJyZWFrcG9pbnRzIHJlY29yZGA7XG4gICAgY29uc3QgbmV3QnJlYWtwb2ludHNUYWJsZSA9IHsgX19wcm90b19fOiBudWxsIH07XG4gICAgZm9yIChjb25zdCBbdGFnLCBtZXRob2RCUHNdIG9mIGVudHJpZXM4KG5ld0JyZWFrcG9pbnRzKSkge1xuICAgICAgdGFnID09PSBzaW1wbGlmeVRhZzIodGFnKSB8fCB0aHJvd1JlZGFjdGVkYEp1c3QgdXNlIHNpbXBsZSB0YWcgJHtxdW90ZShzaW1wbGlmeVRhZzIodGFnKSl9IHJhdGhlciB0aGFuICR7cXVvdGUodGFnKX1gO1xuICAgICAgaXNKU09OUmVjb3JkMihtZXRob2RCUHMpIHx8IHRocm93UmVkYWN0ZWRgRXhwZWN0ZWQgJHtxdW90ZShvcHRpb25OYW1lKX0gb3B0aW9uJ3MgJHtxdW90ZShcbiAgICAgICAgdGFnXG4gICAgICApfSB0byBiZSBhIEpTT04gbWV0aG9kcyBicmVha3BvaW50cyByZWNvcmRgO1xuICAgICAgZm9yIChjb25zdCBbbWV0aG9kTmFtZSwgY291bnRdIG9mIGVudHJpZXM4KG1ldGhvZEJQcykpIHtcbiAgICAgICAgY291bnQgPT09IFwiKlwiIHx8IHR5cGVvZiBjb3VudCA9PT0gXCJudW1iZXJcIiAmJiBOdW1iZXIuaXNTYWZlSW50ZWdlcihjb3VudCkgJiYgY291bnQgPj0gMCB8fCB0aHJvd1JlZGFjdGVkYEV4cGVjdGVkICR7cXVvdGUob3B0aW9uTmFtZSl9IG9wdGlvbidzICR7cXVvdGUodGFnKX0uJHtxdW90ZShcbiAgICAgICAgICBtZXRob2ROYW1lXG4gICAgICAgICl9IHRvIGJlIFwiKlwiIG9yIGEgbm9uLW5lZ2F0aXZlIGludGVnZXJgO1xuICAgICAgICBjb25zdCBjbGFzc0JQcyA9IGhhc093bjMobmV3QnJlYWtwb2ludHNUYWJsZSwgbWV0aG9kTmFtZSkgPyBuZXdCcmVha3BvaW50c1RhYmxlW21ldGhvZE5hbWVdIDogbmV3QnJlYWtwb2ludHNUYWJsZVttZXRob2ROYW1lXSA9IHtcbiAgICAgICAgICAvL1xuICAgICAgICAgIF9fcHJvdG9fXzogbnVsbFxuICAgICAgICB9O1xuICAgICAgICBjbGFzc0JQc1t0YWddID0gY291bnQ7XG4gICAgICB9XG4gICAgfVxuICAgIGJyZWFrcG9pbnRzID0gbmV3QnJlYWtwb2ludHM7XG4gICAgYnJlYWtwb2ludHNUYWJsZSA9IG5ld0JyZWFrcG9pbnRzVGFibGU7XG4gIH07XG4gIGZyZWV6ZTkoc2V0QnJlYWtwb2ludHMpO1xuICBjb25zdCBzaG91bGRCcmVha3BvaW50ID0gKHJlY2lwaWVudCwgbWV0aG9kTmFtZSkgPT4ge1xuICAgIGlmIChtZXRob2ROYW1lID09PSB2b2lkIDAgfHwgbWV0aG9kTmFtZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBjbGFzc0JQcyA9IGJyZWFrcG9pbnRzVGFibGVbbWV0aG9kTmFtZV0gfHwgYnJlYWtwb2ludHNUYWJsZVtcIipcIl07XG4gICAgaWYgKGNsYXNzQlBzID09PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IHRhZyA9IHNpbXBsaWZ5VGFnMihyZWNpcGllbnRbU3ltYm9sLnRvU3RyaW5nVGFnXSk7XG4gICAgbGV0IGNvdW50ID0gY2xhc3NCUHNbdGFnXTtcbiAgICBpZiAoY291bnQgPT09IHZvaWQgMCkge1xuICAgICAgdGFnID0gXCIqXCI7XG4gICAgICBjb3VudCA9IGNsYXNzQlBzW3RhZ107XG4gICAgICBpZiAoY291bnQgPT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjb3VudCA9PT0gXCIqXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoY291bnQgPT09IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBhc3NlcnQodHlwZW9mIGNvdW50ID09PSBcIm51bWJlclwiICYmIGNvdW50ID49IDEpO1xuICAgIGNsYXNzQlBzW3RhZ10gPSBjb3VudCAtIDE7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuICBmcmVlemU5KHNob3VsZEJyZWFrcG9pbnQpO1xuICBjb25zdCBicmVha3BvaW50VGVzdGVyID0gZnJlZXplOSh7XG4gICAgZ2V0QnJlYWtwb2ludHMsXG4gICAgc2V0QnJlYWtwb2ludHMsXG4gICAgc2hvdWxkQnJlYWtwb2ludFxuICB9KTtcbiAgYnJlYWtwb2ludFRlc3Rlci5zZXRCcmVha3BvaW50cygpO1xuICByZXR1cm4gYnJlYWtwb2ludFRlc3Rlcjtcbn07XG5mcmVlemU5KG1ha2VNZXNzYWdlQnJlYWtwb2ludFRlc3RlcjIpO1xuXG4vL1xudmFyIHsgYXNzaWduOiBhc3NpZ24yLCBjcmVhdGU6IGNyZWF0ZTYgfSA9IE9iamVjdDtcbnZhciBvblNlbmQyID0gbWFrZU1lc3NhZ2VCcmVha3BvaW50VGVzdGVyMihcIkVORE9fU0VORF9CUkVBS1BPSU5UU1wiKTtcbnZhciBiYXNlRnJlZXphYmxlUHJveHlIYW5kbGVyMiA9IHtcbiAgc2V0KF90YXJnZXQsIF9wcm9wLCBfdmFsdWUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGlzRXh0ZW5zaWJsZShfdGFyZ2V0KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBzZXRQcm90b3R5cGVPZihfdGFyZ2V0LCBfdmFsdWUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGRlbGV0ZVByb3BlcnR5KF90YXJnZXQsIF9wcm9wKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xudmFyIG1ha2VFUHJveHlIYW5kbGVyMiA9IChyZWNpcGllbnQsIEhhbmRsZWRQcm9taXNlMiwgdW53cmFwKSA9PiBoYXJkZW4oe1xuICAuLi5iYXNlRnJlZXphYmxlUHJveHlIYW5kbGVyMixcbiAgZ2V0OiAoX3RhcmdldCwgcHJvcGVydHlLZXksIHJlY2VpdmVyKSA9PiB7XG4gICAgcmV0dXJuIGhhcmRlbihcbiAgICAgIHtcbiAgICAgICAgLypcblxuXG5cblxuXG4gICAgICAgICAqL1xuICAgICAgICBbcHJvcGVydHlLZXldKC4uLmFyZ3MpIHtcbiAgICAgICAgICBpZiAodGhpcyAhPT0gcmVjZWl2ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBIYW5kbGVkUHJvbWlzZTIucmVqZWN0KFxuICAgICAgICAgICAgICBtYWtlRXJyb3IoXG4gICAgICAgICAgICAgICAgcmVkYWN0ZWRgVW5leHBlY3RlZCByZWNlaXZlciBmb3IgXCIke3F1b3RlKHByb3BlcnR5S2V5KX1cIiBtZXRob2Qgb2YgRSgke3F1b3RlKFxuICAgICAgICAgICAgICAgICAgcmVjaXBpZW50XG4gICAgICAgICAgICAgICAgKX0pYFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob25TZW5kMiAmJiBvblNlbmQyLnNob3VsZEJyZWFrcG9pbnQocmVjaXBpZW50LCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdW53cmFwKFxuICAgICAgICAgICAgSGFuZGxlZFByb21pc2UyLmFwcGx5TWV0aG9kKHVud3JhcChyZWNpcGllbnQpLCBwcm9wZXJ0eUtleSwgYXJncylcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIC8vXG4gICAgICB9W3Byb3BlcnR5S2V5XVxuICAgICk7XG4gIH0sXG4gIGFwcGx5OiAoX3RhcmdldCwgX3RoaXNBcmcsIGFyZ0FycmF5ID0gW10pID0+IHtcbiAgICBpZiAob25TZW5kMiAmJiBvblNlbmQyLnNob3VsZEJyZWFrcG9pbnQocmVjaXBpZW50LCB2b2lkIDApKSB7XG4gICAgICBkZWJ1Z2dlcjtcbiAgICB9XG4gICAgcmV0dXJuIHVud3JhcChIYW5kbGVkUHJvbWlzZTIuYXBwbHlGdW5jdGlvbih1bndyYXAocmVjaXBpZW50KSwgYXJnQXJyYXkpKTtcbiAgfSxcbiAgaGFzOiAoX3RhcmdldCwgX3ApID0+IHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufSk7XG52YXIgbWFrZUVTZW5kT25seVByb3h5SGFuZGxlcjIgPSAocmVjaXBpZW50LCBIYW5kbGVkUHJvbWlzZTIsIHVud3JhcCkgPT4gaGFyZGVuKHtcbiAgLi4uYmFzZUZyZWV6YWJsZVByb3h5SGFuZGxlcjIsXG4gIGdldDogKF90YXJnZXQsIHByb3BlcnR5S2V5LCByZWNlaXZlcikgPT4ge1xuICAgIHJldHVybiBoYXJkZW4oXG4gICAgICB7XG4gICAgICAgIC8qXG5cblxuXG5cblxuICAgICAgICAgKi9cbiAgICAgICAgW3Byb3BlcnR5S2V5XSguLi5hcmdzKSB7XG4gICAgICAgICAgdGhpcyA9PT0gcmVjZWl2ZXIgfHwgdGhyb3dSZWRhY3RlZGBVbmV4cGVjdGVkIHJlY2VpdmVyIGZvciBcIiR7cXVvdGUoXG4gICAgICAgICAgICBwcm9wZXJ0eUtleVxuICAgICAgICAgICl9XCIgbWV0aG9kIG9mIEUuc2VuZE9ubHkoJHtxdW90ZShyZWNpcGllbnQpfSlgO1xuICAgICAgICAgIGlmIChvblNlbmQyICYmIG9uU2VuZDIuc2hvdWxkQnJlYWtwb2ludChyZWNpcGllbnQsIHByb3BlcnR5S2V5KSkge1xuICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIEhhbmRsZWRQcm9taXNlMi5hcHBseU1ldGhvZFNlbmRPbmx5KFxuICAgICAgICAgICAgdW53cmFwKHJlY2lwaWVudCksXG4gICAgICAgICAgICBwcm9wZXJ0eUtleSxcbiAgICAgICAgICAgIGFyZ3NcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgLy9cbiAgICAgIH1bcHJvcGVydHlLZXldXG4gICAgKTtcbiAgfSxcbiAgYXBwbHk6IChfdGFyZ2V0LCBfdGhpc0FyZywgYXJnc0FycmF5ID0gW10pID0+IHtcbiAgICBpZiAob25TZW5kMiAmJiBvblNlbmQyLnNob3VsZEJyZWFrcG9pbnQocmVjaXBpZW50LCB2b2lkIDApKSB7XG4gICAgICBkZWJ1Z2dlcjtcbiAgICB9XG4gICAgSGFuZGxlZFByb21pc2UyLmFwcGx5RnVuY3Rpb25TZW5kT25seSh1bndyYXAocmVjaXBpZW50KSwgYXJnc0FycmF5KTtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9LFxuICBoYXM6IChfdGFyZ2V0LCBfcCkgPT4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59KTtcbnZhciBtYWtlRUdldFByb3h5SGFuZGxlcjIgPSAoeCwgSGFuZGxlZFByb21pc2UyLCB1bndyYXApID0+IGhhcmRlbih7XG4gIC4uLmJhc2VGcmVlemFibGVQcm94eUhhbmRsZXIyLFxuICBoYXM6IChfdGFyZ2V0LCBfcHJvcCkgPT4gdHJ1ZSxcbiAgZ2V0OiAoX3RhcmdldCwgcHJvcCkgPT4gSGFuZGxlZFByb21pc2UyLmdldCh1bndyYXAoeCksIHByb3ApXG59KTtcbnZhciByZXNvbHZlID0gKHgpID0+IEhhbmRsZWRQcm9taXNlLnJlc29sdmUoeCk7XG52YXIgbWFrZUUyID0gKEhhbmRsZWRQcm9taXNlMiwgcG93ZXJzID0ge30pID0+IHtcbiAgY29uc3Qge1xuICAgIGFkZGl0aW9uYWwgPSAoXG4gICAgICAvKiAgICAgICAgICAgICovXG4gICAgICB7fVxuICAgICksXG4gICAgdW53cmFwID0gKFxuICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICByZXNvbHZlXG4gICAgKVxuICB9ID0gcG93ZXJzO1xuICByZXR1cm4gaGFyZGVuKFxuICAgIGFzc2lnbjIoXG4gICAgICAvKlxuXG5cblxuXG5cblxuXG4gICAgICAgKi9cbiAgICAgICh4KSA9PiBoYXJkZW4oXG4gICAgICAgIG5ldyBQcm94eSgoKSA9PiB7XG4gICAgICAgIH0sIG1ha2VFUHJveHlIYW5kbGVyMih4LCBIYW5kbGVkUHJvbWlzZTIsIHVud3JhcCkpXG4gICAgICApLFxuICAgICAge1xuICAgICAgICAvKlxuXG5cblxuXG5cblxuXG5cblxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiAoeCkgPT4gaGFyZGVuKFxuICAgICAgICAgIG5ldyBQcm94eShcbiAgICAgICAgICAgIGNyZWF0ZTYobnVsbCksXG4gICAgICAgICAgICBtYWtlRUdldFByb3h5SGFuZGxlcjIoeCwgSGFuZGxlZFByb21pc2UyLCB1bndyYXApXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICAvKlxuXG5cblxuXG5cblxuXG4gICAgICAgICAqL1xuICAgICAgICByZXNvbHZlOiAoeCkgPT4gcmVzb2x2ZSh1bndyYXAoeCkpLFxuICAgICAgICAvKlxuXG5cblxuXG5cblxuXG4gICAgICAgICAqL1xuICAgICAgICBzZW5kT25seTogKHgpID0+IGhhcmRlbihcbiAgICAgICAgICBuZXcgUHJveHkoXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWFrZUVTZW5kT25seVByb3h5SGFuZGxlcjIoeCwgSGFuZGxlZFByb21pc2UyLCB1bndyYXApXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICAvKlxuXG5cblxuXG5cblxuXG5cblxuXG5cbiAgICAgICAgICovXG4gICAgICAgIHdoZW46ICh4LCBvbmZ1bGZpbGxlZCwgb25yZWplY3RlZCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHVud3JhcHBlZCA9IHJlc29sdmUodW53cmFwKHgpKTtcbiAgICAgICAgICBpZiAob25mdWxmaWxsZWQgPT0gbnVsbCAmJiBvbnJlamVjdGVkID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB1bndyYXBwZWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB1bndyYXBwZWQudGhlbihcbiAgICAgICAgICAgIC4uLnRyYWNrVHVybnMyKFxuICAgICAgICAgICAgICAvKiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICBbb25mdWxmaWxsZWQsIG9ucmVqZWN0ZWRdXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGFkZGl0aW9uYWxcbiAgICApXG4gICk7XG59O1xudmFyIEVfZGVmYXVsdDIgPSBtYWtlRTI7XG5cbi8vXG52YXIgaXNSZXRyeWFibGVSZWFzb24gPSAocmVhc29uLCBwcmlvclJldHJ5VmFsdWUpID0+IHtcbiAgaWYgKGlzVXBncmFkZURpc2Nvbm5lY3Rpb24ocmVhc29uKSAmJiAoIWlzVXBncmFkZURpc2Nvbm5lY3Rpb24ocHJpb3JSZXRyeVZhbHVlKSB8fCByZWFzb24uaW5jYXJuYXRpb25OdW1iZXIgPiBwcmlvclJldHJ5VmFsdWUuaW5jYXJuYXRpb25OdW1iZXIpKSB7XG4gICAgcmV0dXJuIHJlYXNvbjtcbiAgfVxuICBpZiAoaXNBYmFuZG9uZWRFcnJvcihyZWFzb24pICYmICFpc0FiYW5kb25lZEVycm9yKHByaW9yUmV0cnlWYWx1ZSkpIHtcbiAgICByZXR1cm4gcmVhc29uO1xuICB9XG4gIHJldHVybiB2b2lkIDA7XG59O1xudmFyIGRlZmF1bHRQb3dlcnMgPSBoYXJkZW4oe1xuICBpc1JldHJ5YWJsZVJlYXNvblxufSk7XG52YXIgcHJlcGFyZVN3aW5nc2V0Vm93VG9vbHMgPSAoem9uZSwgcG93ZXJzID0ge30pID0+IHByZXBhcmVCYXNpY1Zvd1Rvb2xzKHpvbmUsIHsgLi4uZGVmYXVsdFBvd2VycywgLi4ucG93ZXJzIH0pO1xuaGFyZGVuKHByZXBhcmVTd2luZ3NldFZvd1Rvb2xzKTtcbnZhciBoZWFwVm93VG9vbHMgPSBwcmVwYXJlU3dpbmdzZXRWb3dUb29scyhtYWtlSGVhcFpvbmUoKSk7XG52YXIgaGVhcFZvd0UgPSBFX2RlZmF1bHQyKGdsb2JhbFRoaXMuSGFuZGxlZFByb21pc2UsIHtcbiAgdW53cmFwOiBoZWFwVm93VG9vbHMud2hlbixcbiAgYWRkaXRpb25hbDogeyB3aGVuOiBoZWFwVm93VG9vbHMud2hlbiB9XG59KTtcblxuLy9cbnZhciBCcmFuZFNoYXBlID0gTS5yZW1vdGFibGUoXCJCcmFuZFwiKTtcbnZhciBJc3N1ZXJTaGFwZSA9IE0ucmVtb3RhYmxlKFwiSXNzdWVyXCIpO1xudmFyIFBheW1lbnRTaGFwZSA9IE0ucmVtb3RhYmxlKFwiUGF5bWVudFwiKTtcbnZhciBQdXJzZVNoYXBlID0gTS5yZW1vdGFibGUoXCJQdXJzZVwiKTtcbnZhciBEZXBvc2l0RmFjZXRTaGFwZSA9IE0ucmVtb3RhYmxlKFwiRGVwb3NpdEZhY2V0XCIpO1xudmFyIE5vdGlmaWVyU2hhcGUgPSBNLnJlbW90YWJsZShcIk5vdGlmaWVyXCIpO1xudmFyIE1pbnRTaGFwZSA9IE0ucmVtb3RhYmxlKFwiTWludFwiKTtcbnZhciBOYXRWYWx1ZVNoYXBlID0gTS5uYXQoKTtcbnZhciBDb3B5U2V0VmFsdWVTaGFwZSA9IE0uc2V0KCk7XG52YXIgU2V0VmFsdWVTaGFwZSA9IE0uYXJyYXlPZihNLmtleSgpKTtcbnZhciBDb3B5QmFnVmFsdWVTaGFwZSA9IE0uYmFnKCk7XG52YXIgQW1vdW50VmFsdWVTaGFwZSA9IE0ub3IoXG4gIE5hdFZhbHVlU2hhcGUsXG4gIENvcHlTZXRWYWx1ZVNoYXBlLFxuICBTZXRWYWx1ZVNoYXBlLFxuICBDb3B5QmFnVmFsdWVTaGFwZVxuKTtcbnZhciBBbW91bnRTaGFwZSA9IHsgYnJhbmQ6IEJyYW5kU2hhcGUsIHZhbHVlOiBBbW91bnRWYWx1ZVNoYXBlIH07XG5oYXJkZW4oQW1vdW50U2hhcGUpO1xudmFyIEFtb3VudFBhdHRlcm5TaGFwZSA9IE0ucGF0dGVybigpO1xudmFyIFJhdGlvU2hhcGUgPSB7IG51bWVyYXRvcjogQW1vdW50U2hhcGUsIGRlbm9taW5hdG9yOiBBbW91bnRTaGFwZSB9O1xuaGFyZGVuKFJhdGlvU2hhcGUpO1xudmFyIGlzTmF0VmFsdWUgPSAodmFsdWUpID0+IG1hdGNoZXModmFsdWUsIE5hdFZhbHVlU2hhcGUpO1xuaGFyZGVuKGlzTmF0VmFsdWUpO1xudmFyIGlzQ29weVNldFZhbHVlID0gKHZhbHVlKSA9PiBtYXRjaGVzKHZhbHVlLCBDb3B5U2V0VmFsdWVTaGFwZSk7XG5oYXJkZW4oaXNDb3B5U2V0VmFsdWUpO1xudmFyIGlzU2V0VmFsdWUgPSAodmFsdWUpID0+IG1hdGNoZXModmFsdWUsIFNldFZhbHVlU2hhcGUpO1xuaGFyZGVuKGlzU2V0VmFsdWUpO1xudmFyIGlzQ29weUJhZ1ZhbHVlID0gKHZhbHVlKSA9PiBtYXRjaGVzKHZhbHVlLCBDb3B5QmFnVmFsdWVTaGFwZSk7XG5oYXJkZW4oaXNDb3B5QmFnVmFsdWUpO1xudmFyIE1BWF9BQlNPTFVURV9ERUNJTUFMX1BMQUNFUyA9IDEwMDtcbnZhciBBc3NldEtpbmRTaGFwZSA9IE0ub3IoXCJuYXRcIiwgXCJzZXRcIiwgXCJjb3B5U2V0XCIsIFwiY29weUJhZ1wiKTtcbnZhciBEaXNwbGF5SW5mb1NoYXBlID0gTS5zcGxpdFJlY29yZChcbiAge30sXG4gIHtcbiAgICBkZWNpbWFsUGxhY2VzOiBNLmFuZChcbiAgICAgIE0uZ3RlKC1NQVhfQUJTT0xVVEVfREVDSU1BTF9QTEFDRVMpLFxuICAgICAgTS5sdGUoTUFYX0FCU09MVVRFX0RFQ0lNQUxfUExBQ0VTKVxuICAgICksXG4gICAgYXNzZXRLaW5kOiBBc3NldEtpbmRTaGFwZVxuICB9LFxuICB7XG4gICAgLy9cbiAgICAvL1xuICB9XG4pO1xudmFyIElzc3VlcktpdFNoYXBlID0ge1xuICBicmFuZDogQnJhbmRTaGFwZSxcbiAgbWludDogTWludFNoYXBlLFxuICBtaW50UmVjb3ZlcnlQdXJzZTogUHVyc2VTaGFwZSxcbiAgaXNzdWVyOiBJc3N1ZXJTaGFwZSxcbiAgZGlzcGxheUluZm86IERpc3BsYXlJbmZvU2hhcGVcbn07XG5oYXJkZW4oSXNzdWVyS2l0U2hhcGUpO1xudmFyIEJyYW5kSSA9IE0uaW50ZXJmYWNlKFwiQnJhbmRcIiwge1xuICBpc015SXNzdWVyOiBNLmNhbGxXaGVuKE0uYXdhaXQoSXNzdWVyU2hhcGUpKS5yZXR1cm5zKE0uYm9vbGVhbigpKSxcbiAgZ2V0QWxsZWdlZE5hbWU6IE0uY2FsbCgpLnJldHVybnMoTS5zdHJpbmcoKSksXG4gIGdldERpc3BsYXlJbmZvOiBNLmNhbGwoKS5yZXR1cm5zKERpc3BsYXlJbmZvU2hhcGUpLFxuICBnZXRBbW91bnRTaGFwZTogTS5jYWxsKCkucmV0dXJucyhNLnBhdHRlcm4oKSlcbn0pO1xudmFyIG1ha2VJc3N1ZXJJbnRlcmZhY2VzID0gKGJyYW5kU2hhcGUgPSBCcmFuZFNoYXBlLCBhc3NldEtpbmRTaGFwZSA9IEFzc2V0S2luZFNoYXBlLCBhbW91bnRTaGFwZSA9IEFtb3VudFNoYXBlKSA9PiB7XG4gIGNvbnN0IElzc3VlckkgPSBNLmludGVyZmFjZShcIklzc3VlclwiLCB7XG4gICAgZ2V0QnJhbmQ6IE0uY2FsbCgpLnJldHVybnMoYnJhbmRTaGFwZSksXG4gICAgZ2V0QWxsZWdlZE5hbWU6IE0uY2FsbCgpLnJldHVybnMoTS5zdHJpbmcoKSksXG4gICAgZ2V0QXNzZXRLaW5kOiBNLmNhbGwoKS5yZXR1cm5zKGFzc2V0S2luZFNoYXBlKSxcbiAgICBnZXREaXNwbGF5SW5mbzogTS5jYWxsKCkucmV0dXJucyhEaXNwbGF5SW5mb1NoYXBlKSxcbiAgICBtYWtlRW1wdHlQdXJzZTogTS5jYWxsKCkucmV0dXJucyhQdXJzZVNoYXBlKSxcbiAgICBpc0xpdmU6IE0uY2FsbFdoZW4oTS5hd2FpdChQYXltZW50U2hhcGUpKS5yZXR1cm5zKE0uYm9vbGVhbigpKSxcbiAgICBnZXRBbW91bnRPZjogTS5jYWxsV2hlbihNLmF3YWl0KFBheW1lbnRTaGFwZSkpLnJldHVybnMoYW1vdW50U2hhcGUpLFxuICAgIGJ1cm46IE0uY2FsbFdoZW4oTS5hd2FpdChQYXltZW50U2hhcGUpKS5vcHRpb25hbChBbW91bnRQYXR0ZXJuU2hhcGUpLnJldHVybnMoYW1vdW50U2hhcGUpXG4gIH0pO1xuICBjb25zdCBNaW50SSA9IE0uaW50ZXJmYWNlKFwiTWludFwiLCB7XG4gICAgZ2V0SXNzdWVyOiBNLmNhbGwoKS5yZXR1cm5zKElzc3VlclNoYXBlKSxcbiAgICBtaW50UGF5bWVudDogTS5jYWxsKGFtb3VudFNoYXBlKS5yZXR1cm5zKFBheW1lbnRTaGFwZSlcbiAgfSk7XG4gIGNvbnN0IFBheW1lbnRJID0gTS5pbnRlcmZhY2UoXCJQYXltZW50XCIsIHtcbiAgICBnZXRBbGxlZ2VkQnJhbmQ6IE0uY2FsbCgpLnJldHVybnMoYnJhbmRTaGFwZSlcbiAgfSk7XG4gIGNvbnN0IFB1cnNlSSA9IE0uaW50ZXJmYWNlKFwiUHVyc2VcIiwge1xuICAgIGdldEFsbGVnZWRCcmFuZDogTS5jYWxsKCkucmV0dXJucyhicmFuZFNoYXBlKSxcbiAgICBnZXRDdXJyZW50QW1vdW50OiBNLmNhbGwoKS5yZXR1cm5zKGFtb3VudFNoYXBlKSxcbiAgICBnZXRDdXJyZW50QW1vdW50Tm90aWZpZXI6IE0uY2FsbCgpLnJldHVybnMoTm90aWZpZXJTaGFwZSksXG4gICAgLy9cbiAgICAvL1xuICAgIC8vXG4gICAgLy9cbiAgICAvL1xuICAgIC8vXG4gICAgLy9cbiAgICAvL1xuICAgIC8vXG4gICAgLy9cbiAgICBkZXBvc2l0OiBNLmNhbGwoUGF5bWVudFNoYXBlKS5vcHRpb25hbChBbW91bnRQYXR0ZXJuU2hhcGUpLnJldHVybnMoYW1vdW50U2hhcGUpLFxuICAgIGdldERlcG9zaXRGYWNldDogTS5jYWxsKCkucmV0dXJucyhEZXBvc2l0RmFjZXRTaGFwZSksXG4gICAgd2l0aGRyYXc6IE0uY2FsbChhbW91bnRTaGFwZSkucmV0dXJucyhQYXltZW50U2hhcGUpLFxuICAgIGdldFJlY292ZXJ5U2V0OiBNLmNhbGwoKS5yZXR1cm5zKE0uc2V0T2YoUGF5bWVudFNoYXBlKSksXG4gICAgcmVjb3ZlckFsbDogTS5jYWxsKCkucmV0dXJucyhhbW91bnRTaGFwZSlcbiAgfSk7XG4gIGNvbnN0IERlcG9zaXRGYWNldEkgPSBNLmludGVyZmFjZShcIkRlcG9zaXRGYWNldFwiLCB7XG4gICAgcmVjZWl2ZTogZ2V0SW50ZXJmYWNlR3VhcmRQYXlsb2FkKFB1cnNlSSkubWV0aG9kR3VhcmRzLmRlcG9zaXRcbiAgfSk7XG4gIGNvbnN0IFB1cnNlSUtpdCA9IHtcbiAgICBwdXJzZTogUHVyc2VJLFxuICAgIGRlcG9zaXRGYWNldDogRGVwb3NpdEZhY2V0SVxuICB9O1xuICBoYXJkZW4oUHVyc2VJS2l0KTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgSXNzdWVySSxcbiAgICBNaW50SSxcbiAgICBQYXltZW50SSxcbiAgICBQdXJzZUlLaXRcbiAgfSk7XG59O1xuaGFyZGVuKG1ha2VJc3N1ZXJJbnRlcmZhY2VzKTtcblxuLy9cbnZhciBPdXRib3VuZENvbm5lY3Rpb25IYW5kbGVySSA9IE0uaW50ZXJmYWNlKFxuICBcIk91dGJvdW5kQ29ubmVjdGlvbkhhbmRsZXJcIixcbiAge1xuICAgIG9uT3BlbjogTS5jYWxsV2hlbihNLmFueSgpLCBNLnN0cmluZygpLCBNLnN0cmluZygpLCBNLmFueSgpKS5yZXR1cm5zKFxuICAgICAgTS5hbnkoKVxuICAgICksXG4gICAgb25DbG9zZTogTS5jYWxsV2hlbihNLmFueSgpLCBNLmFueSgpLCBNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpXG4gIH1cbik7XG52YXIgQ29zbW9zQ2hhaW5BZGRyZXNzU2hhcGUgPSB7XG4gIGNoYWluSWQ6IE0uc3RyaW5nKCksXG4gIC8vXG4gIGVuY29kaW5nOiBNLnN0cmluZygpLFxuICB2YWx1ZTogTS5zdHJpbmcoKVxufTtcbmhhcmRlbihDb3Ntb3NDaGFpbkFkZHJlc3NTaGFwZSk7XG52YXIgQ2FpcDEwUmVjb3JkU2hhcGUgPSB7XG4gIG5hbWVzcGFjZTogTS5zdHJpbmcoKSxcbiAgcmVmZXJlbmNlOiBNLnN0cmluZygpLFxuICBhY2NvdW50QWRkcmVzczogTS5zdHJpbmcoKVxufTtcbmhhcmRlbihDYWlwMTBSZWNvcmRTaGFwZSk7XG52YXIgQWNjb3VudElkQXJnU2hhcGUgPSBNLm9yKE0uc3RyaW5nKCksIENvc21vc0NoYWluQWRkcmVzc1NoYXBlKTtcbnZhciBQcm90bzNTaGFwZSA9IHsgdHlwZVVybDogTS5zdHJpbmcoKSwgdmFsdWU6IE0uc3RyaW5nKCkgfTtcbmhhcmRlbihQcm90bzNTaGFwZSk7XG52YXIgSUJDQ2hhbm5lbElEU2hhcGUgPSBNLnN0cmluZygpO1xudmFyIElCQ0NoYW5uZWxJbmZvU2hhcGUgPSBNLnNwbGl0UmVjb3JkKHtcbiAgcG9ydElkOiBNLnN0cmluZygpLFxuICBjaGFubmVsSWQ6IElCQ0NoYW5uZWxJRFNoYXBlLFxuICBjb3VudGVyUGFydHlQb3J0SWQ6IE0uc3RyaW5nKCksXG4gIGNvdW50ZXJQYXJ0eUNoYW5uZWxJZDogSUJDQ2hhbm5lbElEU2hhcGUsXG4gIG9yZGVyaW5nOiBNLnNjYWxhcigpLFxuICAvL1xuICBzdGF0ZTogTS5zY2FsYXIoKSxcbiAgLy9cbiAgdmVyc2lvbjogTS5zdHJpbmcoKVxufSk7XG52YXIgSUJDQ29ubmVjdGlvbklEU2hhcGUgPSBNLnN0cmluZygpO1xudmFyIElCQ0Nvbm5lY3Rpb25JbmZvU2hhcGUgPSBNLnNwbGl0UmVjb3JkKHtcbiAgaWQ6IElCQ0Nvbm5lY3Rpb25JRFNoYXBlLFxuICBjbGllbnRfaWQ6IE0uc3RyaW5nKCksXG4gIHN0YXRlOiBNLnNjYWxhcigpLFxuICAvL1xuICBjb3VudGVycGFydHk6IHtcbiAgICBjbGllbnRfaWQ6IE0uc3RyaW5nKCksXG4gICAgY29ubmVjdGlvbl9pZDogSUJDQ29ubmVjdGlvbklEU2hhcGVcbiAgfSxcbiAgdHJhbnNmZXJDaGFubmVsOiBJQkNDaGFubmVsSW5mb1NoYXBlXG59KTtcbnZhciBDb3Ntb3NBc3NldEluZm9TaGFwZSA9IE0uc3BsaXRSZWNvcmQoe1xuICBiYXNlOiBNLnN0cmluZygpLFxuICBuYW1lOiBNLnN0cmluZygpLFxuICBkaXNwbGF5OiBNLnN0cmluZygpLFxuICBzeW1ib2w6IE0uc3RyaW5nKCksXG4gIGRlbm9tX3VuaXRzOiBNLmFycmF5T2YoXG4gICAgTS5zcGxpdFJlY29yZCh7IGRlbm9tOiBNLnN0cmluZygpLCBleHBvbmVudDogTS5udW1iZXIoKSB9KVxuICApXG59KTtcbnZhciBDaGFpbkluZm9SZXF1aXJlZFNoYXBlID0ge1xuICBuYW1lc3BhY2U6IE0uc3RyaW5nKCksXG4gIHJlZmVyZW5jZTogTS5zdHJpbmcoKVxufTtcbnZhciBDaGFpbkluZm9PcHRpb25hbFNoYXBlID0ge1xuICBjY3RwRGVzdGluYXRpb25Eb21haW46IE0ubnVtYmVyKClcbn07XG52YXIgQmFzZUNoYWluSW5mb1NoYXBlID0gTS5zcGxpdFJlY29yZChcbiAgQ2hhaW5JbmZvUmVxdWlyZWRTaGFwZSxcbiAgQ2hhaW5JbmZvT3B0aW9uYWxTaGFwZVxuKTtcbmhhcmRlbihCYXNlQ2hhaW5JbmZvU2hhcGUpO1xudmFyIENvc21vc0NoYWluSW5mb1NoYXBlID0gTS5zcGxpdFJlY29yZChcbiAge1xuICAgIGNoYWluSWQ6IE0uc3RyaW5nKCksXG4gICAgYmVjaDMyUHJlZml4OiBNLnN0cmluZygpLFxuICAgIC4uLkNoYWluSW5mb1JlcXVpcmVkU2hhcGVcbiAgfSxcbiAge1xuICAgIGNvbm5lY3Rpb25zOiBNLnJlY29yZCgpLFxuICAgIC8vXG4gICAgaWNxRW5hYmxlZDogTS5ib29sZWFuKCksXG4gICAgcGZtRW5hYmxlZDogTS5ib29sZWFuKCksXG4gICAgc3Rha2luZ1Rva2VuczogTS5hcnJheU9mKHsgZGVub206IE0uc3RyaW5nKCkgfSksXG4gICAgLi4uQ2hhaW5JbmZvT3B0aW9uYWxTaGFwZVxuICB9XG4pO1xuaGFyZGVuKENvc21vc0NoYWluSW5mb1NoYXBlKTtcbnZhciBDaGFpbkluZm9TaGFwZSA9IE0ub3IoQ29zbW9zQ2hhaW5JbmZvU2hhcGUsIEJhc2VDaGFpbkluZm9TaGFwZSk7XG5oYXJkZW4oQ2hhaW5JbmZvU2hhcGUpO1xudmFyIERlbm9tU2hhcGUgPSBNLnN0cmluZygpO1xudmFyIENvaW5TaGFwZSA9IHtcbiAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgYW1vdW50OiBNLnN0cmluZygpLFxuICBkZW5vbTogRGVub21TaGFwZVxufTtcbmhhcmRlbihDb2luU2hhcGUpO1xudmFyIERlbm9tSW5mb1NoYXBlID0ge1xuICBjaGFpbjogTS5yZW1vdGFibGUoXCJDaGFpblwiKSxcbiAgYmFzZTogTS5yZW1vdGFibGUoXCJDaGFpblwiKSxcbiAgYnJhbmQ6IE0ub3IoTS5yZW1vdGFibGUoXCJCcmFuZFwiKSwgTS51bmRlZmluZWQoKSksXG4gIGJhc2VEZW5vbTogTS5zdHJpbmcoKVxufTtcbmhhcmRlbihEZW5vbUluZm9TaGFwZSk7XG52YXIgRGVub21EZXRhaWxTaGFwZSA9IE0uc3BsaXRSZWNvcmQoXG4gIHsgY2hhaW5OYW1lOiBNLnN0cmluZygpLCBiYXNlTmFtZTogTS5zdHJpbmcoKSwgYmFzZURlbm9tOiBNLnN0cmluZygpIH0sXG4gIHsgYnJhbmQ6IEJyYW5kU2hhcGUgfVxuKTtcbmhhcmRlbihEZW5vbURldGFpbFNoYXBlKTtcbnZhciBEZW5vbUFtb3VudFNoYXBlID0geyBkZW5vbTogRGVub21TaGFwZSwgdmFsdWU6IE0ubmF0KCkgfTtcbmhhcmRlbihEZW5vbUFtb3VudFNoYXBlKTtcbnZhciBBbnlOYXRBbW91bnRTaGFwZSA9IHtcbiAgYnJhbmQ6IE0ucmVtb3RhYmxlKFwiQnJhbmRcIiksXG4gIHZhbHVlOiBNLm5hdCgpXG59O1xuaGFyZGVuKEFueU5hdEFtb3VudFNoYXBlKTtcbnZhciBBbW91bnRBcmdTaGFwZSA9IE0ub3IoQW55TmF0QW1vdW50U2hhcGUsIERlbm9tQW1vdW50U2hhcGUpO1xudmFyIERlbGVnYXRpb25TaGFwZSA9IE0uc3BsaXRSZWNvcmQoXG4gIHtcbiAgICB2YWxpZGF0b3I6IENvc21vc0NoYWluQWRkcmVzc1NoYXBlLFxuICAgIGFtb3VudDogQW1vdW50QXJnU2hhcGVcbiAgfSxcbiAgeyBkZWxlZ2F0b3I6IENvc21vc0NoYWluQWRkcmVzc1NoYXBlIH1cbik7XG52YXIgSUNRTXNnU2hhcGUgPSBNLnNwbGl0UmVjb3JkKFxuICB7IHBhdGg6IE0uc3RyaW5nKCksIGRhdGE6IE0uc3RyaW5nKCkgfSxcbiAgeyBoZWlnaHQ6IE0uc3RyaW5nKCksIHByb3ZlOiBNLmJvb2xlYW4oKSB9XG4pO1xudmFyIFR5cGVkSnNvblNoYXBlID0gTS5zcGxpdFJlY29yZCh7IFwiQHR5cGVcIjogTS5zdHJpbmcoKSB9KTtcbnZhciBjaGFpbkZhY2FkZU1ldGhvZHMgPSB7XG4gIGdldENoYWluSW5mbzogTS5jYWxsKCkucmV0dXJucyhWb3dTaGFwZSksXG4gIG1ha2VBY2NvdW50OiBNLmNhbGwoKS5yZXR1cm5zKFZvd1NoYXBlKVxufTtcbmhhcmRlbihjaGFpbkZhY2FkZU1ldGhvZHMpO1xudmFyIFRpbWVzdGFtcFByb3RvU2hhcGUgPSB7IHNlY29uZHM6IE0uc3RyaW5nKCksIG5hbm9zOiBNLm51bWJlcigpIH07XG5oYXJkZW4oVGltZXN0YW1wUHJvdG9TaGFwZSk7XG52YXIgRXhlY3V0ZUlDQVR4T3B0c1NoYXBlID0gTS5zcGxpdFJlY29yZChcbiAge30sXG4gIHtcbiAgICBtZW1vOiBNLnN0cmluZygpLFxuICAgIHRpbWVvdXRIZWlnaHQ6IE0uYmlnaW50KCksXG4gICAgZXh0ZW5zaW9uT3B0aW9uczogTS5hcnJheU9mKE0uYW55KCkpLFxuICAgIG5vbkNyaXRpY2FsRXh0ZW5zaW9uT3B0aW9uczogTS5hcnJheU9mKE0uYW55KCkpLFxuICAgIHNlbmRPcHRzOiBTZW5kT3B0aW9uc1NoYXBlXG4gIH1cbik7XG52YXIgQW55TmF0QW1vdW50c1JlY29yZCA9IE0uYW5kKFxuICBNLnJlY29yZE9mKE0uc3RyaW5nKCksIEFueU5hdEFtb3VudFNoYXBlKSxcbiAgTS5ub3Qoe30pXG4pO1xudmFyIE9yY2hlc3RyYXRpb25Qb3dlcnNTaGFwZSA9IHtcbiAgYWdvcmljTmFtZXM6IE0ucmVtb3RhYmxlKCksXG4gIGxvY2FsY2hhaW46IE0ucmVtb3RhYmxlKCksXG4gIG9yY2hlc3RyYXRpb25TZXJ2aWNlOiBNLnJlbW90YWJsZSgpLFxuICBzdG9yYWdlTm9kZTogTS5yZW1vdGFibGUoKSxcbiAgdGltZXJTZXJ2aWNlOiBNLnJlbW90YWJsZSgpXG59O1xuaGFyZGVuKE9yY2hlc3RyYXRpb25Qb3dlcnNTaGFwZSk7XG52YXIgRm9yd2FyZEFyZ3NTaGFwZSA9IHtcbiAgcmVjZWl2ZXI6IE0uc3RyaW5nKCksXG4gIHBvcnQ6IFwidHJhbnNmZXJcIixcbiAgY2hhbm5lbDogTS5zdHJpbmcoKSxcbiAgdGltZW91dDogTS5zdHJpbmcoKSxcbiAgcmV0cmllczogTS5udW1iZXIoKVxufTtcbmhhcmRlbihGb3J3YXJkQXJnc1NoYXBlKTtcbnZhciBGb3J3YXJkSW5mb1NoYXBlID0ge1xuICBmb3J3YXJkOiBNLnNwbGl0UmVjb3JkKEZvcndhcmRBcmdzU2hhcGUsIHtcbiAgICAvKlxuXG5cbiAgICAgKi9cbiAgICBuZXh0OiB7XG4gICAgICBmb3J3YXJkOiBGb3J3YXJkQXJnc1NoYXBlXG4gICAgfVxuICB9KVxufTtcbmhhcmRlbihGb3J3YXJkSW5mb1NoYXBlKTtcbnZhciBGb3J3YXJkT3B0c1NoYXBlID0gTS5zcGxpdFJlY29yZChcbiAge30sXG4gIHtcbiAgICB0aW1lb3V0OiBNLnN0cmluZygpLFxuICAgIHJldHJpZXM6IE0ubnVtYmVyKCksXG4gICAgaW50ZXJtZWRpYXRlUmVjaXBpZW50OiBDb3Ntb3NDaGFpbkFkZHJlc3NTaGFwZVxuICB9LFxuICB7fVxuKTtcbnZhciBJQkNUcmFuc2Zlck9wdGlvbnNTaGFwZSA9IE0uc3BsaXRSZWNvcmQoXG4gIHt9LFxuICB7XG4gICAgdGltZW91dFRpbWVzdGFtcDogTS5iaWdpbnQoKSxcbiAgICB0aW1lb3V0SGVpZ2h0OiB7XG4gICAgICByZXZpc2lvbkhlaWdodDogTS5iaWdpbnQoKSxcbiAgICAgIHJldmlzaW9uTnVtYmVyOiBNLmJpZ2ludCgpXG4gICAgfSxcbiAgICB0aW1lb3V0UmVsYXRpdmVTZWNvbmRzOiBNLmJpZ2ludCgpLFxuICAgIG1lbW86IE0uc3RyaW5nKCksXG4gICAgZm9yd2FyZE9wdHM6IEZvcndhcmRPcHRzU2hhcGVcbiAgfVxuKTtcblxuLy9cbmZ1bmN0aW9uIHV0ZjhMZW5ndGgodDUpIHtcbiAgbGV0IHI1ID0gMCwgZTIgPSAwO1xuICBmb3IgKGxldCBvMiA9IDA7IG8yIDwgdDUubGVuZ3RoOyArK28yKSBlMiA9IHQ1LmNoYXJDb2RlQXQobzIpLCBlMiA8IDEyOCA/IHI1ICs9IDEgOiBlMiA8IDIwNDggPyByNSArPSAyIDogNTUyOTYgPT0gKDY0NTEyICYgZTIpICYmIDU2MzIwID09ICg2NDUxMiAmIHQ1LmNoYXJDb2RlQXQobzIgKyAxKSkgPyAoKytvMiwgcjUgKz0gNCkgOiByNSArPSAzO1xuICByZXR1cm4gcjU7XG59XG5mdW5jdGlvbiB1dGY4UmVhZCh0NSwgcjUsIGUyKSB7XG4gIGlmIChlMiAtIHI1IDwgMSkgcmV0dXJuIFwiXCI7XG4gIGNvbnN0IG8yID0gW107XG4gIGxldCBuMiwgZjIgPSBbXSwgaCA9IDA7XG4gIGZvciAoOyByNSA8IGUyOyApIG4yID0gdDVbcjUrK10sIG4yIDwgMTI4ID8gbzJbaCsrXSA9IG4yIDogbjIgPiAxOTEgJiYgbjIgPCAyMjQgPyBvMltoKytdID0gKDMxICYgbjIpIDw8IDYgfCA2MyAmIHQ1W3I1KytdIDogbjIgPiAyMzkgJiYgbjIgPCAzNjUgPyAobjIgPSAoKDcgJiBuMikgPDwgMTggfCAoNjMgJiB0NVtyNSsrXSkgPDwgMTIgfCAoNjMgJiB0NVtyNSsrXSkgPDwgNiB8IDYzICYgdDVbcjUrK10pIC0gNjU1MzYsIG8yW2grK10gPSA1NTI5NiArIChuMiA+PiAxMCksIG8yW2grK10gPSA1NjMyMCArICgxMDIzICYgbjIpKSA6IG8yW2grK10gPSAoMTUgJiBuMikgPDwgMTIgfCAoNjMgJiB0NVtyNSsrXSkgPDwgNiB8IDYzICYgdDVbcjUrK10sIGggPiA4MTkxICYmICgoZjIgfHwgKGYyID0gW10pKS5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoLi4ubzIpKSwgaCA9IDApO1xuICByZXR1cm4gZjIgPyAoaCAmJiBmMi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoLi4ubzIuc2xpY2UoMCwgaCkpKSwgZjIuam9pbihcIlwiKSkgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKC4uLm8yLnNsaWNlKDAsIGgpKTtcbn1cbmZ1bmN0aW9uIHV0ZjhXcml0ZSh0NSwgcjUsIGUyKSB7XG4gIGNvbnN0IG8yID0gZTI7XG4gIGxldCBuMiwgZjI7XG4gIGZvciAobGV0IG8zID0gMDsgbzMgPCB0NS5sZW5ndGg7ICsrbzMpIG4yID0gdDUuY2hhckNvZGVBdChvMyksIG4yIDwgMTI4ID8gcjVbZTIrK10gPSBuMiA6IG4yIDwgMjA0OCA/IChyNVtlMisrXSA9IG4yID4+IDYgfCAxOTIsIHI1W2UyKytdID0gNjMgJiBuMiB8IDEyOCkgOiA1NTI5NiA9PSAoNjQ1MTIgJiBuMikgJiYgNTYzMjAgPT0gKDY0NTEyICYgKGYyID0gdDUuY2hhckNvZGVBdChvMyArIDEpKSkgPyAobjIgPSA2NTUzNiArICgoMTAyMyAmIG4yKSA8PCAxMCkgKyAoMTAyMyAmIGYyKSwgKytvMywgcjVbZTIrK10gPSBuMiA+PiAxOCB8IDI0MCwgcjVbZTIrK10gPSBuMiA+PiAxMiAmIDYzIHwgMTI4LCByNVtlMisrXSA9IG4yID4+IDYgJiA2MyB8IDEyOCwgcjVbZTIrK10gPSA2MyAmIG4yIHwgMTI4KSA6IChyNVtlMisrXSA9IG4yID4+IDEyIHwgMjI0LCByNVtlMisrXSA9IG4yID4+IDYgJiA2MyB8IDEyOCwgcjVbZTIrK10gPSA2MyAmIG4yIHwgMTI4KTtcbiAgcmV0dXJuIGUyIC0gbzI7XG59XG5cbi8vXG5mdW5jdGlvbiB2YXJpbnQ2NHJlYWQoKSB7XG4gIGxldCB0NSA9IDAsIHI1ID0gMDtcbiAgZm9yIChsZXQgbjMgPSAwOyBuMyA8IDI4OyBuMyArPSA3KSB7XG4gICAgbGV0IG8yID0gdGhpcy5idWZbdGhpcy5wb3MrK107XG4gICAgaWYgKHQ1IHw9ICgxMjcgJiBvMikgPDwgbjMsICEoMTI4ICYgbzIpKSByZXR1cm4gdGhpcy5hc3NlcnRCb3VuZHMoKSwgW3Q1LCByNV07XG4gIH1cbiAgbGV0IG4yID0gdGhpcy5idWZbdGhpcy5wb3MrK107XG4gIGlmICh0NSB8PSAoMTUgJiBuMikgPDwgMjgsIHI1ID0gKDExMiAmIG4yKSA+PiA0LCAhKDEyOCAmIG4yKSkgcmV0dXJuIHRoaXMuYXNzZXJ0Qm91bmRzKCksIFt0NSwgcjVdO1xuICBmb3IgKGxldCBuMyA9IDM7IG4zIDw9IDMxOyBuMyArPSA3KSB7XG4gICAgbGV0IG8yID0gdGhpcy5idWZbdGhpcy5wb3MrK107XG4gICAgaWYgKHI1IHw9ICgxMjcgJiBvMikgPDwgbjMsICEoMTI4ICYgbzIpKSByZXR1cm4gdGhpcy5hc3NlcnRCb3VuZHMoKSwgW3Q1LCByNV07XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB2YXJpbnRcIik7XG59XG52YXIgdCA9IDQyOTQ5NjcyOTY7XG5mdW5jdGlvbiBpbnQ2NEZyb21TdHJpbmcobzIpIHtcbiAgY29uc3QgaTMgPSBcIi1cIiA9PT0gbzJbMF07XG4gIGkzICYmIChvMiA9IG8yLnNsaWNlKDEpKTtcbiAgY29uc3QgZTIgPSAxZTY7XG4gIGxldCBzMyA9IDAsIHUgPSAwO1xuICBmdW5jdGlvbiBmMihyNSwgbjIpIHtcbiAgICBjb25zdCBpNCA9IE51bWJlcihvMi5zbGljZShyNSwgbjIpKTtcbiAgICB1ICo9IGUyLCBzMyA9IHMzICogZTIgKyBpNCwgczMgPj0gdCAmJiAodSArPSBzMyAvIHQgfCAwLCBzMyAlPSB0KTtcbiAgfVxuICByZXR1cm4gZjIoLTI0LCAtMTgpLCBmMigtMTgsIC0xMiksIGYyKC0xMiwgLTYpLCBmMigtNiksIGkzID8gbihzMywgdSkgOiByKHMzLCB1KTtcbn1cbmZ1bmN0aW9uIGludDY0VG9TdHJpbmcodDUsIG8yKSB7XG4gIGxldCBpMyA9IHIodDUsIG8yKTtcbiAgY29uc3QgZTIgPSAyMTQ3NDgzNjQ4ICYgaTMuaGk7XG4gIGUyICYmIChpMyA9IG4oaTMubG8sIGkzLmhpKSk7XG4gIGNvbnN0IHMzID0gdUludDY0VG9TdHJpbmcoaTMubG8sIGkzLmhpKTtcbiAgcmV0dXJuIGUyID8gXCItXCIgKyBzMyA6IHMzO1xufVxuZnVuY3Rpb24gdUludDY0VG9TdHJpbmcocjUsIG4yKSB7XG4gIGlmICh7IGxvOiByNSwgaGk6IG4yIH0gPSBmdW5jdGlvbih0NSwgcjYpIHtcbiAgICByZXR1cm4geyBsbzogdDUgPj4+IDAsIGhpOiByNiA+Pj4gMCB9O1xuICB9KHI1LCBuMiksIG4yIDw9IDIwOTcxNTEpIHJldHVybiBTdHJpbmcodCAqIG4yICsgcjUpO1xuICBjb25zdCBpMyA9IDE2Nzc3MjE1ICYgKHI1ID4+PiAyNCB8IG4yIDw8IDgpLCBlMiA9IG4yID4+IDE2ICYgNjU1MzU7XG4gIGxldCBzMyA9ICgxNjc3NzIxNSAmIHI1KSArIDY3NzcyMTYgKiBpMyArIDY3MTA2NTYgKiBlMiwgdSA9IGkzICsgODE0NzQ5NyAqIGUyLCBmMiA9IDIgKiBlMjtcbiAgY29uc3QgaCA9IDFlNztcbiAgcmV0dXJuIHMzID49IGggJiYgKHUgKz0gTWF0aC5mbG9vcihzMyAvIGgpLCBzMyAlPSBoKSwgdSA+PSBoICYmIChmMiArPSBNYXRoLmZsb29yKHUgLyBoKSwgdSAlPSBoKSwgZjIudG9TdHJpbmcoKSArIG8odSkgKyBvKHMzKTtcbn1cbmZ1bmN0aW9uIHIodDUsIHI1KSB7XG4gIHJldHVybiB7IGxvOiAwIHwgdDUsIGhpOiAwIHwgcjUgfTtcbn1cbmZ1bmN0aW9uIG4odDUsIG4yKSB7XG4gIHJldHVybiBuMiA9IH5uMiwgdDUgPyB0NSA9IDEgKyB+dDUgOiBuMiArPSAxLCByKHQ1LCBuMik7XG59XG52YXIgbyA9ICh0NSkgPT4ge1xuICBjb25zdCByNSA9IFN0cmluZyh0NSk7XG4gIHJldHVybiBcIjAwMDAwMDBcIi5zbGljZShyNS5sZW5ndGgpICsgcjU7XG59O1xuZnVuY3Rpb24gdmFyaW50MzJyZWFkKCkge1xuICBsZXQgdDUgPSB0aGlzLmJ1Zlt0aGlzLnBvcysrXSwgcjUgPSAxMjcgJiB0NTtcbiAgaWYgKCEoMTI4ICYgdDUpKSByZXR1cm4gdGhpcy5hc3NlcnRCb3VuZHMoKSwgcjU7XG4gIGlmICh0NSA9IHRoaXMuYnVmW3RoaXMucG9zKytdLCByNSB8PSAoMTI3ICYgdDUpIDw8IDcsICEoMTI4ICYgdDUpKSByZXR1cm4gdGhpcy5hc3NlcnRCb3VuZHMoKSwgcjU7XG4gIGlmICh0NSA9IHRoaXMuYnVmW3RoaXMucG9zKytdLCByNSB8PSAoMTI3ICYgdDUpIDw8IDE0LCAhKDEyOCAmIHQ1KSkgcmV0dXJuIHRoaXMuYXNzZXJ0Qm91bmRzKCksIHI1O1xuICBpZiAodDUgPSB0aGlzLmJ1Zlt0aGlzLnBvcysrXSwgcjUgfD0gKDEyNyAmIHQ1KSA8PCAyMSwgISgxMjggJiB0NSkpIHJldHVybiB0aGlzLmFzc2VydEJvdW5kcygpLCByNTtcbiAgdDUgPSB0aGlzLmJ1Zlt0aGlzLnBvcysrXSwgcjUgfD0gKDE1ICYgdDUpIDw8IDI4O1xuICBmb3IgKGxldCByNiA9IDU7IDEyOCAmIHQ1ICYmIHI2IDwgMTA7IHI2KyspIHQ1ID0gdGhpcy5idWZbdGhpcy5wb3MrK107XG4gIGlmICgxMjggJiB0NSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB2YXJpbnRcIik7XG4gIHJldHVybiB0aGlzLmFzc2VydEJvdW5kcygpLCByNSA+Pj4gMDtcbn1cbmZ1bmN0aW9uIHp6RW5jb2RlKHQ1LCByNSkge1xuICBsZXQgbjIgPSByNSA+PiAzMTtcbiAgcmV0dXJuIHI1ID0gKChyNSA8PCAxIHwgdDUgPj4+IDMxKSBeIG4yKSA+Pj4gMCwgW3Q1ID0gKHQ1IDw8IDEgXiBuMikgPj4+IDAsIHI1XTtcbn1cbmZ1bmN0aW9uIHp6RGVjb2RlKHQ1LCByNSkge1xuICBsZXQgbjIgPSAtKDEgJiB0NSk7XG4gIHJldHVybiBbdDUgPSAoKHQ1ID4+PiAxIHwgcjUgPDwgMzEpIF4gbjIpID4+PiAwLCByNSA9IChyNSA+Pj4gMSBeIG4yKSA+Pj4gMF07XG59XG5mdW5jdGlvbiByZWFkVUludDMyKHQ1LCByNSkge1xuICByZXR1cm4gKHQ1W3I1XSB8IHQ1W3I1ICsgMV0gPDwgOCB8IHQ1W3I1ICsgMl0gPDwgMTYpICsgMTY3NzcyMTYgKiB0NVtyNSArIDNdO1xufVxuZnVuY3Rpb24gcmVhZEludDMyKHQ1LCByNSkge1xuICByZXR1cm4gKHQ1W3I1XSB8IHQ1W3I1ICsgMV0gPDwgOCB8IHQ1W3I1ICsgMl0gPDwgMTYpICsgKHQ1W3I1ICsgM10gPDwgMjQpO1xufVxuZnVuY3Rpb24gd3JpdGVWYXJpbnQzMih0NSwgcjUsIG4yKSB7XG4gIGZvciAoOyB0NSA+IDEyNzsgKSByNVtuMisrXSA9IDEyNyAmIHQ1IHwgMTI4LCB0NSA+Pj49IDc7XG4gIHI1W24yXSA9IHQ1O1xufVxuZnVuY3Rpb24gd3JpdGVWYXJpbnQ2NCh0NSwgcjUsIG4yKSB7XG4gIGZvciAoOyB0NS5oaTsgKSByNVtuMisrXSA9IDEyNyAmIHQ1LmxvIHwgMTI4LCB0NS5sbyA9ICh0NS5sbyA+Pj4gNyB8IHQ1LmhpIDw8IDI1KSA+Pj4gMCwgdDUuaGkgPj4+PSA3O1xuICBmb3IgKDsgdDUubG8gPiAxMjc7ICkgcjVbbjIrK10gPSAxMjcgJiB0NS5sbyB8IDEyOCwgdDUubG8gPSB0NS5sbyA+Pj4gNztcbiAgcjVbbjIrK10gPSB0NS5sbztcbn1cbmZ1bmN0aW9uIGludDY0TGVuZ3RoKHQ1LCByNSkge1xuICBsZXQgbjIgPSAodDUgPj4+IDI4IHwgcjUgPDwgNCkgPj4+IDAsIG8yID0gcjUgPj4+IDI0O1xuICByZXR1cm4gMCA9PT0gbzIgPyAwID09PSBuMiA/IHQ1IDwgMTYzODQgPyB0NSA8IDEyOCA/IDEgOiAyIDogdDUgPCAyMDk3MTUyID8gMyA6IDQgOiBuMiA8IDE2Mzg0ID8gbjIgPCAxMjggPyA1IDogNiA6IG4yIDwgMjA5NzE1MiA/IDcgOiA4IDogbzIgPCAxMjggPyA5IDogMTA7XG59XG5mdW5jdGlvbiB3cml0ZUZpeGVkMzIodDUsIHI1LCBuMikge1xuICByNVtuMl0gPSAyNTUgJiB0NSwgcjVbbjIgKyAxXSA9IHQ1ID4+PiA4ICYgMjU1LCByNVtuMiArIDJdID0gdDUgPj4+IDE2ICYgMjU1LCByNVtuMiArIDNdID0gdDUgPj4+IDI0O1xufVxuZnVuY3Rpb24gd3JpdGVCeXRlKHQ1LCByNSwgbjIpIHtcbiAgcjVbbjJdID0gMjU1ICYgdDU7XG59XG5cbi8vXG52YXIgV2lyZVR5cGU7XG4hZnVuY3Rpb24odDUpIHtcbiAgdDVbdDUuVmFyaW50ID0gMF0gPSBcIlZhcmludFwiLCB0NVt0NS5GaXhlZDY0ID0gMV0gPSBcIkZpeGVkNjRcIiwgdDVbdDUuQnl0ZXMgPSAyXSA9IFwiQnl0ZXNcIiwgdDVbdDUuRml4ZWQzMiA9IDVdID0gXCJGaXhlZDMyXCI7XG59KFdpcmVUeXBlIHx8IChXaXJlVHlwZSA9IHt9KSk7XG52YXIgQmluYXJ5UmVhZGVyID0gY2xhc3Mge1xuICBidWY7XG4gIHBvcztcbiAgdHlwZTtcbiAgbGVuO1xuICBhc3NlcnRCb3VuZHMoKSB7XG4gICAgaWYgKHRoaXMucG9zID4gdGhpcy5sZW4pIHRocm93IG5ldyBSYW5nZUVycm9yKFwicHJlbWF0dXJlIEVPRlwiKTtcbiAgfVxuICBjb25zdHJ1Y3Rvcih0NSkge1xuICAgIHRoaXMuYnVmID0gdDUgPyBuZXcgVWludDhBcnJheSh0NSkgOiBuZXcgVWludDhBcnJheSgwKSwgdGhpcy5wb3MgPSAwLCB0aGlzLnR5cGUgPSAwLCB0aGlzLmxlbiA9IHRoaXMuYnVmLmxlbmd0aDtcbiAgfVxuICB0YWcoKSB7XG4gICAgY29uc3QgdDUgPSB0aGlzLnVpbnQzMigpLCBpMyA9IHQ1ID4+PiAzLCBzMyA9IDcgJiB0NTtcbiAgICBpZiAoaTMgPD0gMCB8fCBzMyA8IDAgfHwgczMgPiA1KSB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIHRhZzogZmllbGQgbm8gXCIgKyBpMyArIFwiIHdpcmUgdHlwZSBcIiArIHMzKTtcbiAgICByZXR1cm4gW2kzLCBzMywgdDVdO1xuICB9XG4gIHNraXAodDUpIHtcbiAgICBpZiAoXCJudW1iZXJcIiA9PSB0eXBlb2YgdDUpIHtcbiAgICAgIGlmICh0aGlzLnBvcyArIHQ1ID4gdGhpcy5sZW4pIHRocm93IEIodGhpcywgdDUpO1xuICAgICAgdGhpcy5wb3MgKz0gdDU7XG4gICAgfSBlbHNlIGRvIHtcbiAgICAgIGlmICh0aGlzLnBvcyA+PSB0aGlzLmxlbikgdGhyb3cgQih0aGlzKTtcbiAgICB9IHdoaWxlICgxMjggJiB0aGlzLmJ1Zlt0aGlzLnBvcysrXSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgc2tpcFR5cGUodDUpIHtcbiAgICBzd2l0Y2ggKHQ1KSB7XG4gICAgICBjYXNlIFdpcmVUeXBlLlZhcmludDpcbiAgICAgICAgdGhpcy5za2lwKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBXaXJlVHlwZS5GaXhlZDY0OlxuICAgICAgICB0aGlzLnNraXAoOCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBXaXJlVHlwZS5CeXRlczpcbiAgICAgICAgdGhpcy5za2lwKHRoaXMudWludDMyKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgZm9yICg7IDQgIT0gKHQ1ID0gNyAmIHRoaXMudWludDMyKCkpOyApIHRoaXMuc2tpcFR5cGUodDUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgV2lyZVR5cGUuRml4ZWQzMjpcbiAgICAgICAgdGhpcy5za2lwKDQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IEVycm9yKFwiaW52YWxpZCB3aXJlIHR5cGUgXCIgKyB0NSArIFwiIGF0IG9mZnNldCBcIiArIHRoaXMucG9zKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgdWludDMyKCkge1xuICAgIHJldHVybiB2YXJpbnQzMnJlYWQuYmluZCh0aGlzKSgpO1xuICB9XG4gIGludDMyKCkge1xuICAgIHJldHVybiAwIHwgdGhpcy51aW50MzIoKTtcbiAgfVxuICBzaW50MzIoKSB7XG4gICAgY29uc3QgdDUgPSB0aGlzLnVpbnQzMigpO1xuICAgIHJldHVybiB0NSAlIDIgPT0gMSA/ICh0NSArIDEpIC8gLTIgOiB0NSAvIDI7XG4gIH1cbiAgZml4ZWQzMigpIHtcbiAgICBjb25zdCB0NSA9IHJlYWRVSW50MzIodGhpcy5idWYsIHRoaXMucG9zKTtcbiAgICByZXR1cm4gdGhpcy5wb3MgKz0gNCwgdDU7XG4gIH1cbiAgc2ZpeGVkMzIoKSB7XG4gICAgY29uc3QgdDUgPSByZWFkSW50MzIodGhpcy5idWYsIHRoaXMucG9zKTtcbiAgICByZXR1cm4gdGhpcy5wb3MgKz0gNCwgdDU7XG4gIH1cbiAgaW50NjQoKSB7XG4gICAgY29uc3QgW3Q1LCBpM10gPSB2YXJpbnQ2NHJlYWQuYmluZCh0aGlzKSgpO1xuICAgIHJldHVybiBCaWdJbnQoaW50NjRUb1N0cmluZyh0NSwgaTMpKTtcbiAgfVxuICB1aW50NjQoKSB7XG4gICAgY29uc3QgW3Q1LCBpM10gPSB2YXJpbnQ2NHJlYWQuYmluZCh0aGlzKSgpO1xuICAgIHJldHVybiBCaWdJbnQodUludDY0VG9TdHJpbmcodDUsIGkzKSk7XG4gIH1cbiAgc2ludDY0KCkge1xuICAgIGxldCBbdDUsIGkzXSA9IHZhcmludDY0cmVhZC5iaW5kKHRoaXMpKCk7XG4gICAgcmV0dXJuIFt0NSwgaTNdID0genpEZWNvZGUodDUsIGkzKSwgQmlnSW50KGludDY0VG9TdHJpbmcodDUsIGkzKSk7XG4gIH1cbiAgZml4ZWQ2NCgpIHtcbiAgICBjb25zdCB0NSA9IHRoaXMuc2ZpeGVkMzIoKSwgaTMgPSB0aGlzLnNmaXhlZDMyKCk7XG4gICAgcmV0dXJuIEJpZ0ludCh1SW50NjRUb1N0cmluZyh0NSwgaTMpKTtcbiAgfVxuICBzZml4ZWQ2NCgpIHtcbiAgICBjb25zdCB0NSA9IHRoaXMuc2ZpeGVkMzIoKSwgaTMgPSB0aGlzLnNmaXhlZDMyKCk7XG4gICAgcmV0dXJuIEJpZ0ludChpbnQ2NFRvU3RyaW5nKHQ1LCBpMykpO1xuICB9XG4gIGZsb2F0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZsb2F0IG5vdCBzdXBwb3J0ZWRcIik7XG4gIH1cbiAgZG91YmxlKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImRvdWJsZSBub3Qgc3VwcG9ydGVkXCIpO1xuICB9XG4gIGJvb2woKSB7XG4gICAgY29uc3QgW3Q1LCBpM10gPSB2YXJpbnQ2NHJlYWQuYmluZCh0aGlzKSgpO1xuICAgIHJldHVybiAwICE9PSB0NSB8fCAwICE9PSBpMztcbiAgfVxuICBieXRlcygpIHtcbiAgICBjb25zdCB0NSA9IHRoaXMudWludDMyKCksIGkzID0gdGhpcy5wb3M7XG4gICAgcmV0dXJuIHRoaXMucG9zICs9IHQ1LCB0aGlzLmFzc2VydEJvdW5kcygpLCB0aGlzLmJ1Zi5zdWJhcnJheShpMywgaTMgKyB0NSk7XG4gIH1cbiAgc3RyaW5nKCkge1xuICAgIGNvbnN0IHQ1ID0gdGhpcy5ieXRlcygpO1xuICAgIHJldHVybiB1dGY4UmVhZCh0NSwgMCwgdDUubGVuZ3RoKTtcbiAgfVxufTtcbnZhciB3ID0gY2xhc3Mge1xuICBmbjtcbiAgbGVuO1xuICB2YWw7XG4gIG5leHQ7XG4gIGNvbnN0cnVjdG9yKHQ1LCBpMywgczMpIHtcbiAgICB0aGlzLmZuID0gdDUsIHRoaXMubGVuID0gaTMsIHRoaXMudmFsID0gczM7XG4gIH1cbiAgcHJvY2VlZCh0NSwgaTMpIHtcbiAgICB0aGlzLmZuICYmIHRoaXMuZm4odGhpcy52YWwsIHQ1LCBpMyk7XG4gIH1cbn07XG52YXIgYiA9IGNsYXNzIHtcbiAgaGVhZDtcbiAgdGFpbDtcbiAgbGVuO1xuICBuZXh0O1xuICBjb25zdHJ1Y3Rvcih0NSkge1xuICAgIHRoaXMuaGVhZCA9IHQ1LmhlYWQsIHRoaXMudGFpbCA9IHQ1LnRhaWwsIHRoaXMubGVuID0gdDUubGVuLCB0aGlzLm5leHQgPSB0NS5zdGF0ZXM7XG4gIH1cbn07XG52YXIgQmluYXJ5V3JpdGVyID0gY2xhc3MgX0JpbmFyeVdyaXRlciB7XG4gIGxlbiA9IDA7XG4gIGhlYWQ7XG4gIHRhaWw7XG4gIHN0YXRlcztcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5oZWFkID0gbmV3IHcobnVsbCwgMCwgMCksIHRoaXMudGFpbCA9IHRoaXMuaGVhZCwgdGhpcy5zdGF0ZXMgPSBudWxsO1xuICB9XG4gIHN0YXRpYyBjcmVhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyBfQmluYXJ5V3JpdGVyKCk7XG4gIH1cbiAgc3RhdGljIGFsbG9jKHQ1KSB7XG4gICAgcmV0dXJuIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFVpbnQ4QXJyYXkgPyBmdW5jdGlvbih0NiwgaTMsIHMzKSB7XG4gICAgICBjb25zdCBlMiA9IHMzIHx8IDgxOTIsIG4yID0gZTIgPj4+IDE7XG4gICAgICBsZXQgcjUgPSBudWxsLCBoID0gZTI7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oczQpIHtcbiAgICAgICAgaWYgKHM0IDwgMSB8fCBzNCA+IG4yKSByZXR1cm4gdDYoczQpO1xuICAgICAgICBoICsgczQgPiBlMiAmJiAocjUgPSB0NihlMiksIGggPSAwKTtcbiAgICAgICAgY29uc3QgbzIgPSBpMy5jYWxsKHI1LCBoLCBoICs9IHM0KTtcbiAgICAgICAgcmV0dXJuIDcgJiBoICYmIChoID0gMSArICg3IHwgaCkpLCBvMjtcbiAgICAgIH07XG4gICAgfSgodDYpID0+IG5ldyBVaW50OEFycmF5KHQ2KSwgVWludDhBcnJheS5wcm90b3R5cGUuc3ViYXJyYXkpKHQ1KSA6IG5ldyBBcnJheSh0NSk7XG4gIH1cbiAgX3B1c2godDUsIGkzLCBzMykge1xuICAgIHJldHVybiB0aGlzLnRhaWwgPSB0aGlzLnRhaWwubmV4dCA9IG5ldyB3KHQ1LCBpMywgczMpLCB0aGlzLmxlbiArPSBpMywgdGhpcztcbiAgfVxuICBmaW5pc2goKSB7XG4gICAgbGV0IHQ1ID0gdGhpcy5oZWFkLm5leHQsIGkzID0gMDtcbiAgICBjb25zdCBzMyA9IF9CaW5hcnlXcml0ZXIuYWxsb2ModGhpcy5sZW4pO1xuICAgIGZvciAoOyB0NTsgKSB0NS5wcm9jZWVkKHMzLCBpMyksIGkzICs9IHQ1LmxlbiwgdDUgPSB0NS5uZXh0O1xuICAgIHJldHVybiBzMztcbiAgfVxuICBmb3JrKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlcyA9IG5ldyBiKHRoaXMpLCB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBuZXcgdyhudWxsLCAwLCAwKSwgdGhpcy5sZW4gPSAwLCB0aGlzO1xuICB9XG4gIHJlc2V0KCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlcyA/ICh0aGlzLmhlYWQgPSB0aGlzLnN0YXRlcy5oZWFkLCB0aGlzLnRhaWwgPSB0aGlzLnN0YXRlcy50YWlsLCB0aGlzLmxlbiA9IHRoaXMuc3RhdGVzLmxlbiwgdGhpcy5zdGF0ZXMgPSB0aGlzLnN0YXRlcy5uZXh0KSA6ICh0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBuZXcgdyhudWxsLCAwLCAwKSwgdGhpcy5sZW4gPSAwKSwgdGhpcztcbiAgfVxuICBsZGVsaW0oKSB7XG4gICAgY29uc3QgdDUgPSB0aGlzLmhlYWQsIGkzID0gdGhpcy50YWlsLCBzMyA9IHRoaXMubGVuO1xuICAgIHJldHVybiB0aGlzLnJlc2V0KCkudWludDMyKHMzKSwgczMgJiYgKHRoaXMudGFpbC5uZXh0ID0gdDUubmV4dCwgdGhpcy50YWlsID0gaTMsIHRoaXMubGVuICs9IHMzKSwgdGhpcztcbiAgfVxuICB0YWcodDUsIGkzKSB7XG4gICAgcmV0dXJuIHRoaXMudWludDMyKCh0NSA8PCAzIHwgaTMpID4+PiAwKTtcbiAgfVxuICB1aW50MzIodDUpIHtcbiAgICByZXR1cm4gdGhpcy5sZW4gKz0gKHRoaXMudGFpbCA9IHRoaXMudGFpbC5uZXh0ID0gbmV3IHcod3JpdGVWYXJpbnQzMiwgKHQ1ID4+Pj0gMCkgPCAxMjggPyAxIDogdDUgPCAxNjM4NCA/IDIgOiB0NSA8IDIwOTcxNTIgPyAzIDogdDUgPCAyNjg0MzU0NTYgPyA0IDogNSwgdDUpKS5sZW4sIHRoaXM7XG4gIH1cbiAgaW50MzIodDUpIHtcbiAgICByZXR1cm4gdDUgPCAwID8gdGhpcy5fcHVzaCh3cml0ZVZhcmludDY0LCAxMCwgaW50NjRGcm9tU3RyaW5nKHQ1LnRvU3RyaW5nKCkpKSA6IHRoaXMudWludDMyKHQ1KTtcbiAgfVxuICBzaW50MzIodDUpIHtcbiAgICByZXR1cm4gdGhpcy51aW50MzIoKHQ1IDw8IDEgXiB0NSA+PiAzMSkgPj4+IDApO1xuICB9XG4gIGludDY0KHQ1KSB7XG4gICAgY29uc3QgeyBsbzogaTMsIGhpOiBzMyB9ID0gaW50NjRGcm9tU3RyaW5nKHQ1LnRvU3RyaW5nKCkpO1xuICAgIHJldHVybiB0aGlzLl9wdXNoKHdyaXRlVmFyaW50NjQsIGludDY0TGVuZ3RoKGkzLCBzMyksIHsgbG86IGkzLCBoaTogczMgfSk7XG4gIH1cbiAgdWludDY0ID0gX0JpbmFyeVdyaXRlci5wcm90b3R5cGUuaW50NjQ7XG4gIHNpbnQ2NCh0NSkge1xuICAgIGxldCB7IGxvOiBpMywgaGk6IHMzIH0gPSBpbnQ2NEZyb21TdHJpbmcodDUudG9TdHJpbmcoKSk7XG4gICAgcmV0dXJuIFtpMywgczNdID0genpFbmNvZGUoaTMsIHMzKSwgdGhpcy5fcHVzaCh3cml0ZVZhcmludDY0LCBpbnQ2NExlbmd0aChpMywgczMpLCB7IGxvOiBpMywgaGk6IHMzIH0pO1xuICB9XG4gIGZpeGVkNjQodDUpIHtcbiAgICBjb25zdCB7IGxvOiBpMywgaGk6IHMzIH0gPSBpbnQ2NEZyb21TdHJpbmcodDUudG9TdHJpbmcoKSk7XG4gICAgcmV0dXJuIHRoaXMuX3B1c2god3JpdGVGaXhlZDMyLCA0LCBpMykuX3B1c2god3JpdGVGaXhlZDMyLCA0LCBzMyk7XG4gIH1cbiAgc2ZpeGVkNjQgPSBfQmluYXJ5V3JpdGVyLnByb3RvdHlwZS5maXhlZDY0O1xuICBib29sKHQ1KSB7XG4gICAgcmV0dXJuIHRoaXMuX3B1c2god3JpdGVCeXRlLCAxLCB0NSA/IDEgOiAwKTtcbiAgfVxuICBmaXhlZDMyKHQ1KSB7XG4gICAgcmV0dXJuIHRoaXMuX3B1c2god3JpdGVGaXhlZDMyLCA0LCB0NSA+Pj4gMCk7XG4gIH1cbiAgc2ZpeGVkMzIgPSBfQmluYXJ5V3JpdGVyLnByb3RvdHlwZS5maXhlZDMyO1xuICBmbG9hdCh0NSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZsb2F0IG5vdCBzdXBwb3J0ZWRcIiArIHQ1KTtcbiAgfVxuICBkb3VibGUodDUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJkb3VibGUgbm90IHN1cHBvcnRlZFwiICsgdDUpO1xuICB9XG4gIGJ5dGVzKHQ1KSB7XG4gICAgY29uc3QgaTMgPSB0NS5sZW5ndGggPj4+IDA7XG4gICAgcmV0dXJuIGkzID8gdGhpcy51aW50MzIoaTMpLl9wdXNoKGcsIGkzLCB0NSkgOiB0aGlzLl9wdXNoKHdyaXRlQnl0ZSwgMSwgMCk7XG4gIH1cbiAgc3RyaW5nKGkzKSB7XG4gICAgY29uc3QgZTIgPSB1dGY4TGVuZ3RoKGkzKTtcbiAgICByZXR1cm4gZTIgPyB0aGlzLnVpbnQzMihlMikuX3B1c2godXRmOFdyaXRlLCBlMiwgaTMpIDogdGhpcy5fcHVzaCh3cml0ZUJ5dGUsIDEsIDApO1xuICB9XG59O1xuZnVuY3Rpb24gZyh0NSwgaTMsIHMzKSB7XG4gIGlmIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBVaW50OEFycmF5KSBpMy5zZXQodDUsIHMzKTtcbiAgZWxzZSBmb3IgKGxldCBlMiA9IDA7IGUyIDwgdDUubGVuZ3RoOyArK2UyKSBpM1tzMyArIGUyXSA9IHQ1W2UyXTtcbn1cbmZ1bmN0aW9uIEIodDUsIGkzKSB7XG4gIHJldHVybiBSYW5nZUVycm9yKFwiaW5kZXggb3V0IG9mIHJhbmdlOiBcIiArIHQ1LnBvcyArIFwiICsgXCIgKyAoaTMgfHwgMSkgKyBcIiA+IFwiICsgdDUubGVuKTtcbn1cblxuLy9cbmZ1bmN0aW9uIGlzU2V0KHQ1KSB7XG4gIHJldHVybiBudWxsICE9IHQ1O1xufVxuZnVuY3Rpb24gdG9UaW1lc3RhbXAodDUpIHtcbiAgdmFyIG4yO1xuICByZXR1cm4geyBzZWNvbmRzOiAobjIgPSB0NS5nZXRUaW1lKCkgLyAxZTMsIEJpZ0ludChNYXRoLnRydW5jKG4yKSkpLCBuYW5vczogdDUuZ2V0VGltZSgpICUgMWUzICogMWU2IH07XG59XG5mdW5jdGlvbiBmcm9tVGltZXN0YW1wKHQ1KSB7XG4gIGxldCBuMiA9IDFlMyAqIE51bWJlcih0NS5zZWNvbmRzKTtcbiAgcmV0dXJuIG4yICs9IHQ1Lm5hbm9zIC8gMWU2LCBuZXcgRGF0ZShuMik7XG59XG5mdW5jdGlvbiBmcm9tSnNvblRpbWVzdGFtcCh0NSkge1xuICByZXR1cm4gdDUgaW5zdGFuY2VvZiBEYXRlID8gdG9UaW1lc3RhbXAodDUpIDogXCJzdHJpbmdcIiA9PSB0eXBlb2YgdDUgPyB0b1RpbWVzdGFtcChuZXcgRGF0ZSh0NSkpIDogeyBzZWNvbmRzOiBpc1NldCgobjIgPSB0NSkuc2Vjb25kcykgPyBCaWdJbnQobjIuc2Vjb25kcy50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgbmFub3M6IGlzU2V0KG4yLm5hbm9zKSA/IE51bWJlcihuMi5uYW5vcykgOiAwIH07XG4gIHZhciBuMjtcbn1cblxuLy9cbmZ1bmN0aW9uIGwoKSB7XG4gIHJldHVybiB7ICR0eXBlVXJsOiBcIi9nb29nbGUucHJvdG9idWYuQW55XCIsIHR5cGVVcmw6IFwiXCIsIHZhbHVlOiBuZXcgVWludDhBcnJheSgpIH07XG59XG52YXIgQW55ID0geyB0eXBlVXJsOiBcIi9nb29nbGUucHJvdG9idWYuQW55XCIsIGVuY29kZTogKGUyLCBvMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKFwiXCIgIT09IGUyLnR5cGVVcmwgJiYgbzIudWludDMyKDEwKS5zdHJpbmcoZTIudHlwZVVybCksIDAgIT09IGUyLnZhbHVlLmxlbmd0aCAmJiBvMi51aW50MzIoMTgpLmJ5dGVzKGUyLnZhbHVlKSwgbzIpLCBkZWNvZGUocjUsIG8yKSB7XG4gIGNvbnN0IHQ1ID0gcjUgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyByNSA6IG5ldyBCaW5hcnlSZWFkZXIocjUpO1xuICBsZXQgbjIgPSB2b2lkIDAgPT09IG8yID8gdDUubGVuIDogdDUucG9zICsgbzI7XG4gIGNvbnN0IGEyID0gbCgpO1xuICBmb3IgKDsgdDUucG9zIDwgbjI7ICkge1xuICAgIGNvbnN0IGUyID0gdDUudWludDMyKCk7XG4gICAgc3dpdGNoIChlMiA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBhMi50eXBlVXJsID0gdDUuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBhMi52YWx1ZSA9IHQ1LmJ5dGVzKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdDUuc2tpcFR5cGUoNyAmIGUyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGEyO1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgdHlwZVVybDogaXNTZXQoZTIudHlwZVVybCkgPyBTdHJpbmcoZTIudHlwZVVybCkgOiBcIlwiLCB2YWx1ZTogaXNTZXQoZTIudmFsdWUpID8gZGVjb2RlQmFzZTY0KGUyLnZhbHVlKSA6IG5ldyBVaW50OEFycmF5KCkgfSksIHRvSlNPTihlMikge1xuICBjb25zdCByNSA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi50eXBlVXJsICYmIChyNS50eXBlVXJsID0gZTIudHlwZVVybCksIHZvaWQgMCAhPT0gZTIudmFsdWUgJiYgKHI1LnZhbHVlID0gZW5jb2RlQmFzZTY0KHZvaWQgMCAhPT0gZTIudmFsdWUgPyBlMi52YWx1ZSA6IG5ldyBVaW50OEFycmF5KCkpKSwgcjU7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCByNSA9IGwoKTtcbiAgcmV0dXJuIHI1LnR5cGVVcmwgPSBlMi50eXBlVXJsID8/IFwiXCIsIHI1LnZhbHVlID0gZTIudmFsdWUgPz8gbmV3IFVpbnQ4QXJyYXkoKSwgcjU7XG59LCBmcm9tUHJvdG9Nc2c6IChlMikgPT4gQW55LmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gQW55LmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvZ29vZ2xlLnByb3RvYnVmLkFueVwiLCB2YWx1ZTogQW55LmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcblxuLy9cbnZhciBTaWduTW9kZTtcbiFmdW5jdGlvbihlMikge1xuICBlMltlMi5TSUdOX01PREVfVU5TUEVDSUZJRUQgPSAwXSA9IFwiU0lHTl9NT0RFX1VOU1BFQ0lGSUVEXCIsIGUyW2UyLlNJR05fTU9ERV9ESVJFQ1QgPSAxXSA9IFwiU0lHTl9NT0RFX0RJUkVDVFwiLCBlMltlMi5TSUdOX01PREVfVEVYVFVBTCA9IDJdID0gXCJTSUdOX01PREVfVEVYVFVBTFwiLCBlMltlMi5TSUdOX01PREVfRElSRUNUX0FVWCA9IDNdID0gXCJTSUdOX01PREVfRElSRUNUX0FVWFwiLCBlMltlMi5TSUdOX01PREVfTEVHQUNZX0FNSU5PX0pTT04gPSAxMjddID0gXCJTSUdOX01PREVfTEVHQUNZX0FNSU5PX0pTT05cIiwgZTJbZTIuU0lHTl9NT0RFX0VJUF8xOTEgPSAxOTFdID0gXCJTSUdOX01PREVfRUlQXzE5MVwiLCBlMltlMi5VTlJFQ09HTklaRUQgPSAtMV0gPSBcIlVOUkVDT0dOSVpFRFwiO1xufShTaWduTW9kZSB8fCAoU2lnbk1vZGUgPSB7fSkpO1xuXG4vL1xudmFyIERlY2ltYWwgPSBjbGFzcyBfRGVjaW1hbCB7XG4gIHN0YXRpYyBmcm9tVXNlcklucHV0KHQ1LCBpMykge1xuICAgIF9EZWNpbWFsLnZlcmlmeUZyYWN0aW9uYWxEaWdpdHMoaTMpO1xuICAgIGNvbnN0IHI1ID0gdDUubWF0Y2goL1teMC05Ll0vKTtcbiAgICBpZiAocjUpIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBjaGFyYWN0ZXIgYXQgcG9zaXRpb24gJHtyNS5pbmRleCArIDF9YCk7XG4gICAgbGV0IGEyLCBlMjtcbiAgICBpZiAoXCJcIiA9PT0gdDUpIGEyID0gXCIwXCIsIGUyID0gXCJcIjtcbiAgICBlbHNlIGlmICgtMSA9PT0gdDUuc2VhcmNoKC9cXC4vKSkgYTIgPSB0NSwgZTIgPSBcIlwiO1xuICAgIGVsc2Uge1xuICAgICAgY29uc3QgaTQgPSB0NS5zcGxpdChcIi5cIik7XG4gICAgICBzd2l0Y2ggKGk0Lmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGZXdlciB0aGFuIHR3byBlbGVtZW50cyBpbiBzcGxpdCByZXN1bHQuIFRoaXMgbXVzdCBub3QgaGFwcGVuIGhlcmUuXCIpO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgaWYgKCFpNFsxXSkgdGhyb3cgbmV3IEVycm9yKFwiRnJhY3Rpb25hbCBwYXJ0IG1pc3NpbmdcIik7XG4gICAgICAgICAgYTIgPSBpNFswXSwgZTIgPSBpNFsxXS5yZXBsYWNlKC8wKyQvLCBcIlwiKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNb3JlIHRoYW4gb25lIHNlcGFyYXRvciBmb3VuZFwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGUyLmxlbmd0aCA+IGkzKSB0aHJvdyBuZXcgRXJyb3IoXCJHb3QgbW9yZSBmcmFjdGlvbmFsIGRpZ2l0cyB0aGFuIHN1cHBvcnRlZFwiKTtcbiAgICBjb25zdCBuMiA9IGAke2EyfSR7ZTIucGFkRW5kKGkzLCBcIjBcIil9YDtcbiAgICByZXR1cm4gbmV3IF9EZWNpbWFsKG4yLCBpMyk7XG4gIH1cbiAgc3RhdGljIGZyb21BdG9taWNzKHQ1LCBpMykge1xuICAgIHJldHVybiBfRGVjaW1hbC52ZXJpZnlGcmFjdGlvbmFsRGlnaXRzKGkzKSwgbmV3IF9EZWNpbWFsKHQ1LCBpMyk7XG4gIH1cbiAgc3RhdGljIHZlcmlmeUZyYWN0aW9uYWxEaWdpdHModDUpIHtcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIodDUpKSB0aHJvdyBuZXcgRXJyb3IoXCJGcmFjdGlvbmFsIGRpZ2l0cyBpcyBub3QgYW4gaW50ZWdlclwiKTtcbiAgICBpZiAodDUgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJGcmFjdGlvbmFsIGRpZ2l0cyBtdXN0IG5vdCBiZSBuZWdhdGl2ZVwiKTtcbiAgICBpZiAodDUgPiAzMCkgdGhyb3cgbmV3IEVycm9yKFwiRnJhY3Rpb25hbCBkaWdpdHMgbXVzdCBub3QgZXhjZWVkIDMwXCIpO1xuICB9XG4gIGdldCBhdG9taWNzKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGEuYXRvbWljcy50b1N0cmluZygpO1xuICB9XG4gIGdldCBmcmFjdGlvbmFsRGlnaXRzKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGEuZnJhY3Rpb25hbERpZ2l0cztcbiAgfVxuICBkYXRhO1xuICBjb25zdHJ1Y3Rvcih0NSwgaTMpIHtcbiAgICBpZiAoIXQ1Lm1hdGNoKC9eWzAtOV0rJC8pKSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHN0cmluZyBmb3JtYXQuIE9ubHkgbm9uLW5lZ2F0aXZlIGludGVnZXJzIGluIGRlY2ltYWwgcmVwcmVzZW50YXRpb24gc3VwcG9ydGVkLlwiKTtcbiAgICB0aGlzLmRhdGEgPSB7IGF0b21pY3M6IEJpZ0ludCh0NSksIGZyYWN0aW9uYWxEaWdpdHM6IGkzIH07XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgY29uc3QgdDUgPSBCaWdJbnQoMTApICoqIEJpZ0ludCh0aGlzLmRhdGEuZnJhY3Rpb25hbERpZ2l0cyksIGkzID0gdGhpcy5kYXRhLmF0b21pY3MgLyB0NSwgcjUgPSB0aGlzLmRhdGEuYXRvbWljcyAlIHQ1O1xuICAgIGlmICgwbiA9PT0gcjUpIHJldHVybiBpMy50b1N0cmluZygpO1xuICAgIHtcbiAgICAgIGNvbnN0IHQ2ID0gcjUudG9TdHJpbmcoKS5wYWRTdGFydCh0aGlzLmRhdGEuZnJhY3Rpb25hbERpZ2l0cywgXCIwXCIpLnJlcGxhY2UoLzArJC8sIFwiXCIpO1xuICAgICAgcmV0dXJuIGAke2kzLnRvU3RyaW5nKCl9LiR7dDZ9YDtcbiAgICB9XG4gIH1cbn07XG5cbi8vXG52YXIgQ29pbiA9IHsgdHlwZVVybDogXCIvY29zbW9zLmJhc2UudjFiZXRhMS5Db2luXCIsIGVuY29kZTogKG8yLCBuMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKFwiXCIgIT09IG8yLmRlbm9tICYmIG4yLnVpbnQzMigxMCkuc3RyaW5nKG8yLmRlbm9tKSwgXCJcIiAhPT0gbzIuYW1vdW50ICYmIG4yLnVpbnQzMigxOCkuc3RyaW5nKG8yLmFtb3VudCksIG4yKSwgZGVjb2RlKHQ1LCBuMikge1xuICBjb25zdCBlMiA9IHQ1IGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gdDUgOiBuZXcgQmluYXJ5UmVhZGVyKHQ1KTtcbiAgbGV0IHI1ID0gdm9pZCAwID09PSBuMiA/IGUyLmxlbiA6IGUyLnBvcyArIG4yO1xuICBjb25zdCBzMyA9IHsgZGVub206IFwiXCIsIGFtb3VudDogXCJcIiB9O1xuICBmb3IgKDsgZTIucG9zIDwgcjU7ICkge1xuICAgIGNvbnN0IG8yID0gZTIudWludDMyKCk7XG4gICAgc3dpdGNoIChvMiA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBzMy5kZW5vbSA9IGUyLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgczMuYW1vdW50ID0gZTIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZTIuc2tpcFR5cGUoNyAmIG8yKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHMzO1xufSwgZnJvbUpTT046IChvMikgPT4gKHsgZGVub206IGlzU2V0KG8yLmRlbm9tKSA/IFN0cmluZyhvMi5kZW5vbSkgOiBcIlwiLCBhbW91bnQ6IGlzU2V0KG8yLmFtb3VudCkgPyBTdHJpbmcobzIuYW1vdW50KSA6IFwiXCIgfSksIHRvSlNPTihvMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBvMi5kZW5vbSAmJiAodDUuZGVub20gPSBvMi5kZW5vbSksIHZvaWQgMCAhPT0gbzIuYW1vdW50ICYmICh0NS5hbW91bnQgPSBvMi5hbW91bnQpLCB0NTtcbn0sIGZyb21QYXJ0aWFsKG8yKSB7XG4gIGNvbnN0IHQ1ID0geyBkZW5vbTogXCJcIiwgYW1vdW50OiBcIlwiIH07XG4gIHJldHVybiB0NS5kZW5vbSA9IG8yLmRlbm9tID8/IFwiXCIsIHQ1LmFtb3VudCA9IG8yLmFtb3VudCA/PyBcIlwiLCB0NTtcbn0sIGZyb21Qcm90b01zZzogKG8yKSA9PiBDb2luLmRlY29kZShvMi52YWx1ZSksIHRvUHJvdG86IChvMikgPT4gQ29pbi5lbmNvZGUobzIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAobzIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5iYXNlLnYxYmV0YTEuQ29pblwiLCB2YWx1ZTogQ29pbi5lbmNvZGUobzIpLmZpbmlzaCgpIH0pIH07XG52YXIgRGVjQ29pbiA9IHsgdHlwZVVybDogXCIvY29zbW9zLmJhc2UudjFiZXRhMS5EZWNDb2luXCIsIGVuY29kZTogKG8yLCBuMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKFwiXCIgIT09IG8yLmRlbm9tICYmIG4yLnVpbnQzMigxMCkuc3RyaW5nKG8yLmRlbm9tKSwgXCJcIiAhPT0gbzIuYW1vdW50ICYmIG4yLnVpbnQzMigxOCkuc3RyaW5nKERlY2ltYWwuZnJvbVVzZXJJbnB1dChvMi5hbW91bnQsIDE4KS5hdG9taWNzKSwgbjIpLCBkZWNvZGUodDUsIG4yKSB7XG4gIGNvbnN0IHI1ID0gdDUgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyB0NSA6IG5ldyBCaW5hcnlSZWFkZXIodDUpO1xuICBsZXQgczMgPSB2b2lkIDAgPT09IG4yID8gcjUubGVuIDogcjUucG9zICsgbjI7XG4gIGNvbnN0IGkzID0geyBkZW5vbTogXCJcIiwgYW1vdW50OiBcIlwiIH07XG4gIGZvciAoOyByNS5wb3MgPCBzMzsgKSB7XG4gICAgY29uc3QgbzIgPSByNS51aW50MzIoKTtcbiAgICBzd2l0Y2ggKG8yID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGkzLmRlbm9tID0gcjUuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBpMy5hbW91bnQgPSBEZWNpbWFsLmZyb21BdG9taWNzKHI1LnN0cmluZygpLCAxOCkudG9TdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByNS5za2lwVHlwZSg3ICYgbzIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTM7XG59LCBmcm9tSlNPTjogKG8yKSA9PiAoeyBkZW5vbTogaXNTZXQobzIuZGVub20pID8gU3RyaW5nKG8yLmRlbm9tKSA6IFwiXCIsIGFtb3VudDogaXNTZXQobzIuYW1vdW50KSA/IFN0cmluZyhvMi5hbW91bnQpIDogXCJcIiB9KSwgdG9KU09OKG8yKSB7XG4gIGNvbnN0IHQ1ID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IG8yLmRlbm9tICYmICh0NS5kZW5vbSA9IG8yLmRlbm9tKSwgdm9pZCAwICE9PSBvMi5hbW91bnQgJiYgKHQ1LmFtb3VudCA9IG8yLmFtb3VudCksIHQ1O1xufSwgZnJvbVBhcnRpYWwobzIpIHtcbiAgY29uc3QgdDUgPSB7IGRlbm9tOiBcIlwiLCBhbW91bnQ6IFwiXCIgfTtcbiAgcmV0dXJuIHQ1LmRlbm9tID0gbzIuZGVub20gPz8gXCJcIiwgdDUuYW1vdW50ID0gbzIuYW1vdW50ID8/IFwiXCIsIHQ1O1xufSwgZnJvbVByb3RvTXNnOiAobzIpID0+IERlY0NvaW4uZGVjb2RlKG8yLnZhbHVlKSwgdG9Qcm90bzogKG8yKSA9PiBEZWNDb2luLmVuY29kZShvMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChvMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLmJhc2UudjFiZXRhMS5EZWNDb2luXCIsIHZhbHVlOiBEZWNDb2luLmVuY29kZShvMikuZmluaXNoKCkgfSkgfTtcblxuLy9cbmZ1bmN0aW9uIGcyKCkge1xuICByZXR1cm4geyBtZXNzYWdlczogW10sIG1lbW86IFwiXCIsIHRpbWVvdXRIZWlnaHQ6IEJpZ0ludCgwKSwgZXh0ZW5zaW9uT3B0aW9uczogW10sIG5vbkNyaXRpY2FsRXh0ZW5zaW9uT3B0aW9uczogW10gfTtcbn1cbnZhciBUeEJvZHkgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy50eC52MWJldGExLlR4Qm9keVwiLCBlbmNvZGUoZTIsIHQ1ID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSB7XG4gIGZvciAoY29uc3QgbjIgb2YgZTIubWVzc2FnZXMpIEFueS5lbmNvZGUobjIsIHQ1LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgXCJcIiAhPT0gZTIubWVtbyAmJiB0NS51aW50MzIoMTgpLnN0cmluZyhlMi5tZW1vKSwgZTIudGltZW91dEhlaWdodCAhPT0gQmlnSW50KDApICYmIHQ1LnVpbnQzMigyNCkudWludDY0KGUyLnRpbWVvdXRIZWlnaHQpO1xuICBmb3IgKGNvbnN0IG4yIG9mIGUyLmV4dGVuc2lvbk9wdGlvbnMpIEFueS5lbmNvZGUobjIsIHQ1LnVpbnQzMig4MTg2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICBmb3IgKGNvbnN0IG4yIG9mIGUyLm5vbkNyaXRpY2FsRXh0ZW5zaW9uT3B0aW9ucykgQW55LmVuY29kZShuMiwgdDUudWludDMyKDE2Mzc4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICByZXR1cm4gdDU7XG59LCBkZWNvZGUoZTIsIHQ1KSB7XG4gIGNvbnN0IG4yID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgaTMgPSB2b2lkIDAgPT09IHQ1ID8gbjIubGVuIDogbjIucG9zICsgdDU7XG4gIGNvbnN0IHI1ID0gZzIoKTtcbiAgZm9yICg7IG4yLnBvcyA8IGkzOyApIHtcbiAgICBjb25zdCBlMyA9IG4yLnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcjUubWVzc2FnZXMucHVzaChBbnkuZGVjb2RlKG4yLCBuMi51aW50MzIoKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcjUubWVtbyA9IG4yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcjUudGltZW91dEhlaWdodCA9IG4yLnVpbnQ2NCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTAyMzpcbiAgICAgICAgcjUuZXh0ZW5zaW9uT3B0aW9ucy5wdXNoKEFueS5kZWNvZGUobjIsIG4yLnVpbnQzMigpKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyMDQ3OlxuICAgICAgICByNS5ub25Dcml0aWNhbEV4dGVuc2lvbk9wdGlvbnMucHVzaChBbnkuZGVjb2RlKG4yLCBuMi51aW50MzIoKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG4yLnNraXBUeXBlKDcgJiBlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiByNTtcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IG1lc3NhZ2VzOiBBcnJheS5pc0FycmF5KGUyPy5tZXNzYWdlcykgPyBlMi5tZXNzYWdlcy5tYXAoKGUzKSA9PiBBbnkuZnJvbUpTT04oZTMpKSA6IFtdLCBtZW1vOiBpc1NldChlMi5tZW1vKSA/IFN0cmluZyhlMi5tZW1vKSA6IFwiXCIsIHRpbWVvdXRIZWlnaHQ6IGlzU2V0KGUyLnRpbWVvdXRIZWlnaHQpID8gQmlnSW50KGUyLnRpbWVvdXRIZWlnaHQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIGV4dGVuc2lvbk9wdGlvbnM6IEFycmF5LmlzQXJyYXkoZTI/LmV4dGVuc2lvbk9wdGlvbnMpID8gZTIuZXh0ZW5zaW9uT3B0aW9ucy5tYXAoKGUzKSA9PiBBbnkuZnJvbUpTT04oZTMpKSA6IFtdLCBub25Dcml0aWNhbEV4dGVuc2lvbk9wdGlvbnM6IEFycmF5LmlzQXJyYXkoZTI/Lm5vbkNyaXRpY2FsRXh0ZW5zaW9uT3B0aW9ucykgPyBlMi5ub25Dcml0aWNhbEV4dGVuc2lvbk9wdGlvbnMubWFwKChlMykgPT4gQW55LmZyb21KU09OKGUzKSkgOiBbXSB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IHQ1ID0ge307XG4gIHJldHVybiBlMi5tZXNzYWdlcyA/IHQ1Lm1lc3NhZ2VzID0gZTIubWVzc2FnZXMubWFwKChlMykgPT4gZTMgPyBBbnkudG9KU09OKGUzKSA6IHZvaWQgMCkgOiB0NS5tZXNzYWdlcyA9IFtdLCB2b2lkIDAgIT09IGUyLm1lbW8gJiYgKHQ1Lm1lbW8gPSBlMi5tZW1vKSwgdm9pZCAwICE9PSBlMi50aW1lb3V0SGVpZ2h0ICYmICh0NS50aW1lb3V0SGVpZ2h0ID0gKGUyLnRpbWVvdXRIZWlnaHQgfHwgQmlnSW50KDApKS50b1N0cmluZygpKSwgZTIuZXh0ZW5zaW9uT3B0aW9ucyA/IHQ1LmV4dGVuc2lvbk9wdGlvbnMgPSBlMi5leHRlbnNpb25PcHRpb25zLm1hcCgoZTMpID0+IGUzID8gQW55LnRvSlNPTihlMykgOiB2b2lkIDApIDogdDUuZXh0ZW5zaW9uT3B0aW9ucyA9IFtdLCBlMi5ub25Dcml0aWNhbEV4dGVuc2lvbk9wdGlvbnMgPyB0NS5ub25Dcml0aWNhbEV4dGVuc2lvbk9wdGlvbnMgPSBlMi5ub25Dcml0aWNhbEV4dGVuc2lvbk9wdGlvbnMubWFwKChlMykgPT4gZTMgPyBBbnkudG9KU09OKGUzKSA6IHZvaWQgMCkgOiB0NS5ub25Dcml0aWNhbEV4dGVuc2lvbk9wdGlvbnMgPSBbXSwgdDU7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCB0NSA9IGcyKCk7XG4gIHJldHVybiB0NS5tZXNzYWdlcyA9IGUyLm1lc3NhZ2VzPy5tYXAoKGUzKSA9PiBBbnkuZnJvbVBhcnRpYWwoZTMpKSB8fCBbXSwgdDUubWVtbyA9IGUyLm1lbW8gPz8gXCJcIiwgdDUudGltZW91dEhlaWdodCA9IHZvaWQgMCAhPT0gZTIudGltZW91dEhlaWdodCAmJiBudWxsICE9PSBlMi50aW1lb3V0SGVpZ2h0ID8gQmlnSW50KGUyLnRpbWVvdXRIZWlnaHQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIHQ1LmV4dGVuc2lvbk9wdGlvbnMgPSBlMi5leHRlbnNpb25PcHRpb25zPy5tYXAoKGUzKSA9PiBBbnkuZnJvbVBhcnRpYWwoZTMpKSB8fCBbXSwgdDUubm9uQ3JpdGljYWxFeHRlbnNpb25PcHRpb25zID0gZTIubm9uQ3JpdGljYWxFeHRlbnNpb25PcHRpb25zPy5tYXAoKGUzKSA9PiBBbnkuZnJvbVBhcnRpYWwoZTMpKSB8fCBbXSwgdDU7XG59LCBmcm9tUHJvdG9Nc2c6IChvMikgPT4gVHhCb2R5LmRlY29kZShvMi52YWx1ZSksIHRvUHJvdG86IChvMikgPT4gVHhCb2R5LmVuY29kZShvMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChvMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLnR4LnYxYmV0YTEuVHhCb2R5XCIsIHZhbHVlOiBUeEJvZHkuZW5jb2RlKG8yKS5maW5pc2goKSB9KSB9O1xuXG4vL1xuZnVuY3Rpb24gcygpIHtcbiAgcmV0dXJuIHsgdHlwZTogXCJcIiwga2V5OiBuZXcgVWludDhBcnJheSgpLCBkYXRhOiBuZXcgVWludDhBcnJheSgpIH07XG59XG52YXIgUHJvb2ZPcCA9IHsgdHlwZVVybDogXCIvdGVuZGVybWludC5jcnlwdG8uUHJvb2ZPcFwiLCBlbmNvZGU6ICh0NSwgZTIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+IChcIlwiICE9PSB0NS50eXBlICYmIGUyLnVpbnQzMigxMCkuc3RyaW5nKHQ1LnR5cGUpLCAwICE9PSB0NS5rZXkubGVuZ3RoICYmIGUyLnVpbnQzMigxOCkuYnl0ZXModDUua2V5KSwgMCAhPT0gdDUuZGF0YS5sZW5ndGggJiYgZTIudWludDMyKDI2KS5ieXRlcyh0NS5kYXRhKSwgZTIpLCBkZWNvZGUobzIsIGUyKSB7XG4gIGNvbnN0IG4yID0gbzIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBvMiA6IG5ldyBCaW5hcnlSZWFkZXIobzIpO1xuICBsZXQgcjUgPSB2b2lkIDAgPT09IGUyID8gbjIubGVuIDogbjIucG9zICsgZTI7XG4gIGNvbnN0IGkzID0gcygpO1xuICBmb3IgKDsgbjIucG9zIDwgcjU7ICkge1xuICAgIGNvbnN0IHQ1ID0gbjIudWludDMyKCk7XG4gICAgc3dpdGNoICh0NSA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBpMy50eXBlID0gbjIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBpMy5rZXkgPSBuMi5ieXRlcygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaTMuZGF0YSA9IG4yLmJ5dGVzKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbjIuc2tpcFR5cGUoNyAmIHQ1KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkzO1xufSwgZnJvbUpTT046ICh0NSkgPT4gKHsgdHlwZTogaXNTZXQodDUudHlwZSkgPyBTdHJpbmcodDUudHlwZSkgOiBcIlwiLCBrZXk6IGlzU2V0KHQ1LmtleSkgPyBkZWNvZGVCYXNlNjQodDUua2V5KSA6IG5ldyBVaW50OEFycmF5KCksIGRhdGE6IGlzU2V0KHQ1LmRhdGEpID8gZGVjb2RlQmFzZTY0KHQ1LmRhdGEpIDogbmV3IFVpbnQ4QXJyYXkoKSB9KSwgdG9KU09OKHQ1KSB7XG4gIGNvbnN0IG8yID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IHQ1LnR5cGUgJiYgKG8yLnR5cGUgPSB0NS50eXBlKSwgdm9pZCAwICE9PSB0NS5rZXkgJiYgKG8yLmtleSA9IGVuY29kZUJhc2U2NCh2b2lkIDAgIT09IHQ1LmtleSA/IHQ1LmtleSA6IG5ldyBVaW50OEFycmF5KCkpKSwgdm9pZCAwICE9PSB0NS5kYXRhICYmIChvMi5kYXRhID0gZW5jb2RlQmFzZTY0KHZvaWQgMCAhPT0gdDUuZGF0YSA/IHQ1LmRhdGEgOiBuZXcgVWludDhBcnJheSgpKSksIG8yO1xufSwgZnJvbVBhcnRpYWwodDUpIHtcbiAgY29uc3QgbzIgPSBzKCk7XG4gIHJldHVybiBvMi50eXBlID0gdDUudHlwZSA/PyBcIlwiLCBvMi5rZXkgPSB0NS5rZXkgPz8gbmV3IFVpbnQ4QXJyYXkoKSwgbzIuZGF0YSA9IHQ1LmRhdGEgPz8gbmV3IFVpbnQ4QXJyYXkoKSwgbzI7XG59LCBmcm9tUHJvdG9Nc2c6ICh0NSkgPT4gUHJvb2ZPcC5kZWNvZGUodDUudmFsdWUpLCB0b1Byb3RvOiAodDUpID0+IFByb29mT3AuZW5jb2RlKHQ1KS5maW5pc2goKSwgdG9Qcm90b01zZzogKHQ1KSA9PiAoeyB0eXBlVXJsOiBcIi90ZW5kZXJtaW50LmNyeXB0by5Qcm9vZk9wXCIsIHZhbHVlOiBQcm9vZk9wLmVuY29kZSh0NSkuZmluaXNoKCkgfSkgfTtcbnZhciBQcm9vZk9wcyA9IHsgdHlwZVVybDogXCIvdGVuZGVybWludC5jcnlwdG8uUHJvb2ZPcHNcIiwgZW5jb2RlKHQ1LCBlMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkge1xuICBmb3IgKGNvbnN0IG8yIG9mIHQ1Lm9wcykgUHJvb2ZPcC5lbmNvZGUobzIsIGUyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgcmV0dXJuIGUyO1xufSwgZGVjb2RlKG8yLCBlMikge1xuICBjb25zdCBuMiA9IG8yIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gbzIgOiBuZXcgQmluYXJ5UmVhZGVyKG8yKTtcbiAgbGV0IHI1ID0gdm9pZCAwID09PSBlMiA/IG4yLmxlbiA6IG4yLnBvcyArIGUyO1xuICBjb25zdCBpMyA9IHsgb3BzOiBbXSB9O1xuICBmb3IgKDsgbjIucG9zIDwgcjU7ICkge1xuICAgIGNvbnN0IHQ1ID0gbjIudWludDMyKCk7XG4gICAgaWYgKHQ1ID4+PiAzID09IDEpIGkzLm9wcy5wdXNoKFByb29mT3AuZGVjb2RlKG4yLCBuMi51aW50MzIoKSkpO1xuICAgIGVsc2UgbjIuc2tpcFR5cGUoNyAmIHQ1KTtcbiAgfVxuICByZXR1cm4gaTM7XG59LCBmcm9tSlNPTjogKHQ1KSA9PiAoeyBvcHM6IEFycmF5LmlzQXJyYXkodDU/Lm9wcykgPyB0NS5vcHMubWFwKCh0NikgPT4gUHJvb2ZPcC5mcm9tSlNPTih0NikpIDogW10gfSksIHRvSlNPTih0NSkge1xuICBjb25zdCBvMiA9IHt9O1xuICByZXR1cm4gdDUub3BzID8gbzIub3BzID0gdDUub3BzLm1hcCgodDYpID0+IHQ2ID8gUHJvb2ZPcC50b0pTT04odDYpIDogdm9pZCAwKSA6IG8yLm9wcyA9IFtdLCBvMjtcbn0sIGZyb21QYXJ0aWFsKHQ1KSB7XG4gIGNvbnN0IG8yID0geyBvcHM6IFtdIH07XG4gIHJldHVybiBvMi5vcHMgPSB0NS5vcHM/Lm1hcCgodDYpID0+IFByb29mT3AuZnJvbVBhcnRpYWwodDYpKSB8fCBbXSwgbzI7XG59LCBmcm9tUHJvdG9Nc2c6ICh0NSkgPT4gUHJvb2ZPcHMuZGVjb2RlKHQ1LnZhbHVlKSwgdG9Qcm90bzogKHQ1KSA9PiBQcm9vZk9wcy5lbmNvZGUodDUpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAodDUpID0+ICh7IHR5cGVVcmw6IFwiL3RlbmRlcm1pbnQuY3J5cHRvLlByb29mT3BzXCIsIHZhbHVlOiBQcm9vZk9wcy5lbmNvZGUodDUpLmZpbmlzaCgpIH0pIH07XG5cbi8vXG5mdW5jdGlvbiB0MigpIHtcbiAgcmV0dXJuIHsgc2Vjb25kczogQmlnSW50KDApLCBuYW5vczogMCB9O1xufVxudmFyIFRpbWVzdGFtcCA9IHsgdHlwZVVybDogXCIvZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcFwiLCBlbmNvZGU6IChuMiwgczMgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+IChuMi5zZWNvbmRzICE9PSBCaWdJbnQoMCkgJiYgczMudWludDMyKDgpLmludDY0KG4yLnNlY29uZHMpLCAwICE9PSBuMi5uYW5vcyAmJiBzMy51aW50MzIoMTYpLmludDMyKG4yLm5hbm9zKSwgczMpLCBkZWNvZGUobzIsIHMzKSB7XG4gIGNvbnN0IGUyID0gbzIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBvMiA6IG5ldyBCaW5hcnlSZWFkZXIobzIpO1xuICBsZXQgaTMgPSB2b2lkIDAgPT09IHMzID8gZTIubGVuIDogZTIucG9zICsgczM7XG4gIGNvbnN0IHI1ID0gdDIoKTtcbiAgZm9yICg7IGUyLnBvcyA8IGkzOyApIHtcbiAgICBjb25zdCBuMiA9IGUyLnVpbnQzMigpO1xuICAgIHN3aXRjaCAobjIgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcjUuc2Vjb25kcyA9IGUyLmludDY0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByNS5uYW5vcyA9IGUyLmludDMyKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZTIuc2tpcFR5cGUoNyAmIG4yKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHI1O1xufSwgZnJvbUpTT046IChuMikgPT4gKHsgc2Vjb25kczogaXNTZXQobjIuc2Vjb25kcykgPyBCaWdJbnQobjIuc2Vjb25kcy50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgbmFub3M6IGlzU2V0KG4yLm5hbm9zKSA/IE51bWJlcihuMi5uYW5vcykgOiAwIH0pLCB0b0pTT04objIpIHtcbiAgY29uc3QgbzIgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gbjIuc2Vjb25kcyAmJiAobzIuc2Vjb25kcyA9IChuMi5zZWNvbmRzIHx8IEJpZ0ludCgwKSkudG9TdHJpbmcoKSksIHZvaWQgMCAhPT0gbjIubmFub3MgJiYgKG8yLm5hbm9zID0gTWF0aC5yb3VuZChuMi5uYW5vcykpLCBvMjtcbn0sIGZyb21QYXJ0aWFsKG4yKSB7XG4gIGNvbnN0IG8yID0gdDIoKTtcbiAgcmV0dXJuIG8yLnNlY29uZHMgPSB2b2lkIDAgIT09IG4yLnNlY29uZHMgJiYgbnVsbCAhPT0gbjIuc2Vjb25kcyA/IEJpZ0ludChuMi5zZWNvbmRzLnRvU3RyaW5nKCkpIDogQmlnSW50KDApLCBvMi5uYW5vcyA9IG4yLm5hbm9zID8/IDAsIG8yO1xufSwgZnJvbVByb3RvTXNnOiAobjIpID0+IFRpbWVzdGFtcC5kZWNvZGUobjIudmFsdWUpLCB0b1Byb3RvOiAobjIpID0+IFRpbWVzdGFtcC5lbmNvZGUobjIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAobjIpID0+ICh7IHR5cGVVcmw6IFwiL2dvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBcIiwgdmFsdWU6IFRpbWVzdGFtcC5lbmNvZGUobjIpLmZpbmlzaCgpIH0pIH07XG5cbi8vXG52YXIgQmxvY2tJREZsYWc7XG4hZnVuY3Rpb24oZTIpIHtcbiAgZTJbZTIuQkxPQ0tfSURfRkxBR19VTktOT1dOID0gMF0gPSBcIkJMT0NLX0lEX0ZMQUdfVU5LTk9XTlwiLCBlMltlMi5CTE9DS19JRF9GTEFHX0FCU0VOVCA9IDFdID0gXCJCTE9DS19JRF9GTEFHX0FCU0VOVFwiLCBlMltlMi5CTE9DS19JRF9GTEFHX0NPTU1JVCA9IDJdID0gXCJCTE9DS19JRF9GTEFHX0NPTU1JVFwiLCBlMltlMi5CTE9DS19JRF9GTEFHX05JTCA9IDNdID0gXCJCTE9DS19JRF9GTEFHX05JTFwiLCBlMltlMi5VTlJFQ09HTklaRUQgPSAtMV0gPSBcIlVOUkVDT0dOSVpFRFwiO1xufShCbG9ja0lERmxhZyB8fCAoQmxvY2tJREZsYWcgPSB7fSkpO1xudmFyIFNpZ25lZE1zZ1R5cGU7XG4hZnVuY3Rpb24oZTIpIHtcbiAgZTJbZTIuU0lHTkVEX01TR19UWVBFX1VOS05PV04gPSAwXSA9IFwiU0lHTkVEX01TR19UWVBFX1VOS05PV05cIiwgZTJbZTIuU0lHTkVEX01TR19UWVBFX1BSRVZPVEUgPSAxXSA9IFwiU0lHTkVEX01TR19UWVBFX1BSRVZPVEVcIiwgZTJbZTIuU0lHTkVEX01TR19UWVBFX1BSRUNPTU1JVCA9IDJdID0gXCJTSUdORURfTVNHX1RZUEVfUFJFQ09NTUlUXCIsIGUyW2UyLlNJR05FRF9NU0dfVFlQRV9QUk9QT1NBTCA9IDMyXSA9IFwiU0lHTkVEX01TR19UWVBFX1BST1BPU0FMXCIsIGUyW2UyLlVOUkVDT0dOSVpFRCA9IC0xXSA9IFwiVU5SRUNPR05JWkVEXCI7XG59KFNpZ25lZE1zZ1R5cGUgfHwgKFNpZ25lZE1zZ1R5cGUgPSB7fSkpO1xuXG4vL1xudmFyIENoZWNrVHhUeXBlO1xuIWZ1bmN0aW9uKGUyKSB7XG4gIGUyW2UyLk5FVyA9IDBdID0gXCJORVdcIiwgZTJbZTIuUkVDSEVDSyA9IDFdID0gXCJSRUNIRUNLXCIsIGUyW2UyLlVOUkVDT0dOSVpFRCA9IC0xXSA9IFwiVU5SRUNPR05JWkVEXCI7XG59KENoZWNrVHhUeXBlIHx8IChDaGVja1R4VHlwZSA9IHt9KSk7XG52YXIgRXZpZGVuY2VUeXBlO1xuIWZ1bmN0aW9uKGUyKSB7XG4gIGUyW2UyLlVOS05PV04gPSAwXSA9IFwiVU5LTk9XTlwiLCBlMltlMi5EVVBMSUNBVEVfVk9URSA9IDFdID0gXCJEVVBMSUNBVEVfVk9URVwiLCBlMltlMi5MSUdIVF9DTElFTlRfQVRUQUNLID0gMl0gPSBcIkxJR0hUX0NMSUVOVF9BVFRBQ0tcIiwgZTJbZTIuVU5SRUNPR05JWkVEID0gLTFdID0gXCJVTlJFQ09HTklaRURcIjtcbn0oRXZpZGVuY2VUeXBlIHx8IChFdmlkZW5jZVR5cGUgPSB7fSkpO1xuZnVuY3Rpb24gcCgpIHtcbiAgcmV0dXJuIHsgZGF0YTogbmV3IFVpbnQ4QXJyYXkoKSwgcGF0aDogXCJcIiwgaGVpZ2h0OiBCaWdJbnQoMCksIHByb3ZlOiBmYWxzZSB9O1xufVxudmFyIFJlcXVlc3RRdWVyeSA9IHsgdHlwZVVybDogXCIvdGVuZGVybWludC5hYmNpLlJlcXVlc3RRdWVyeVwiLCBlbmNvZGU6IChlMiwgdDUgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+ICgwICE9PSBlMi5kYXRhLmxlbmd0aCAmJiB0NS51aW50MzIoMTApLmJ5dGVzKGUyLmRhdGEpLCBcIlwiICE9PSBlMi5wYXRoICYmIHQ1LnVpbnQzMigxOCkuc3RyaW5nKGUyLnBhdGgpLCBlMi5oZWlnaHQgIT09IEJpZ0ludCgwKSAmJiB0NS51aW50MzIoMjQpLmludDY0KGUyLmhlaWdodCksIHRydWUgPT09IGUyLnByb3ZlICYmIHQ1LnVpbnQzMigzMikuYm9vbChlMi5wcm92ZSksIHQ1KSwgZGVjb2RlKGUyLCB0NSkge1xuICBjb25zdCBvMiA9IGUyIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gZTIgOiBuZXcgQmluYXJ5UmVhZGVyKGUyKTtcbiAgbGV0IG4yID0gdm9pZCAwID09PSB0NSA/IG8yLmxlbiA6IG8yLnBvcyArIHQ1O1xuICBjb25zdCBpMyA9IHAoKTtcbiAgZm9yICg7IG8yLnBvcyA8IG4yOyApIHtcbiAgICBjb25zdCBlMyA9IG8yLnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaTMuZGF0YSA9IG8yLmJ5dGVzKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBpMy5wYXRoID0gbzIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBpMy5oZWlnaHQgPSBvMi5pbnQ2NCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgaTMucHJvdmUgPSBvMi5ib29sKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbzIuc2tpcFR5cGUoNyAmIGUzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkzO1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgZGF0YTogaXNTZXQoZTIuZGF0YSkgPyBkZWNvZGVCYXNlNjQoZTIuZGF0YSkgOiBuZXcgVWludDhBcnJheSgpLCBwYXRoOiBpc1NldChlMi5wYXRoKSA/IFN0cmluZyhlMi5wYXRoKSA6IFwiXCIsIGhlaWdodDogaXNTZXQoZTIuaGVpZ2h0KSA/IEJpZ0ludChlMi5oZWlnaHQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIHByb3ZlOiAhIWlzU2V0KGUyLnByb3ZlKSAmJiBCb29sZWFuKGUyLnByb3ZlKSB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IHQ1ID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLmRhdGEgJiYgKHQ1LmRhdGEgPSBlbmNvZGVCYXNlNjQodm9pZCAwICE9PSBlMi5kYXRhID8gZTIuZGF0YSA6IG5ldyBVaW50OEFycmF5KCkpKSwgdm9pZCAwICE9PSBlMi5wYXRoICYmICh0NS5wYXRoID0gZTIucGF0aCksIHZvaWQgMCAhPT0gZTIuaGVpZ2h0ICYmICh0NS5oZWlnaHQgPSAoZTIuaGVpZ2h0IHx8IEJpZ0ludCgwKSkudG9TdHJpbmcoKSksIHZvaWQgMCAhPT0gZTIucHJvdmUgJiYgKHQ1LnByb3ZlID0gZTIucHJvdmUpLCB0NTtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IHQ1ID0gcCgpO1xuICByZXR1cm4gdDUuZGF0YSA9IGUyLmRhdGEgPz8gbmV3IFVpbnQ4QXJyYXkoKSwgdDUucGF0aCA9IGUyLnBhdGggPz8gXCJcIiwgdDUuaGVpZ2h0ID0gdm9pZCAwICE9PSBlMi5oZWlnaHQgJiYgbnVsbCAhPT0gZTIuaGVpZ2h0ID8gQmlnSW50KGUyLmhlaWdodC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgdDUucHJvdmUgPSBlMi5wcm92ZSA/PyBmYWxzZSwgdDU7XG59LCBmcm9tUHJvdG9Nc2c6IChlMikgPT4gUmVxdWVzdFF1ZXJ5LmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gUmVxdWVzdFF1ZXJ5LmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvdGVuZGVybWludC5hYmNpLlJlcXVlc3RRdWVyeVwiLCB2YWx1ZTogUmVxdWVzdFF1ZXJ5LmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcbmZ1bmN0aW9uIG0oKSB7XG4gIHJldHVybiB7IGNvZGU6IDAsIGxvZzogXCJcIiwgaW5mbzogXCJcIiwgaW5kZXg6IEJpZ0ludCgwKSwga2V5OiBuZXcgVWludDhBcnJheSgpLCB2YWx1ZTogbmV3IFVpbnQ4QXJyYXkoKSwgcHJvb2ZPcHM6IHZvaWQgMCwgaGVpZ2h0OiBCaWdJbnQoMCksIGNvZGVzcGFjZTogXCJcIiB9O1xufVxudmFyIFJlc3BvbnNlUXVlcnkgPSB7IHR5cGVVcmw6IFwiL3RlbmRlcm1pbnQuYWJjaS5SZXNwb25zZVF1ZXJ5XCIsIGVuY29kZTogKGUyLCBvMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKDAgIT09IGUyLmNvZGUgJiYgbzIudWludDMyKDgpLnVpbnQzMihlMi5jb2RlKSwgXCJcIiAhPT0gZTIubG9nICYmIG8yLnVpbnQzMigyNikuc3RyaW5nKGUyLmxvZyksIFwiXCIgIT09IGUyLmluZm8gJiYgbzIudWludDMyKDM0KS5zdHJpbmcoZTIuaW5mbyksIGUyLmluZGV4ICE9PSBCaWdJbnQoMCkgJiYgbzIudWludDMyKDQwKS5pbnQ2NChlMi5pbmRleCksIDAgIT09IGUyLmtleS5sZW5ndGggJiYgbzIudWludDMyKDUwKS5ieXRlcyhlMi5rZXkpLCAwICE9PSBlMi52YWx1ZS5sZW5ndGggJiYgbzIudWludDMyKDU4KS5ieXRlcyhlMi52YWx1ZSksIHZvaWQgMCAhPT0gZTIucHJvb2ZPcHMgJiYgUHJvb2ZPcHMuZW5jb2RlKGUyLnByb29mT3BzLCBvMi51aW50MzIoNjYpLmZvcmsoKSkubGRlbGltKCksIGUyLmhlaWdodCAhPT0gQmlnSW50KDApICYmIG8yLnVpbnQzMig3MikuaW50NjQoZTIuaGVpZ2h0KSwgXCJcIiAhPT0gZTIuY29kZXNwYWNlICYmIG8yLnVpbnQzMig4Mikuc3RyaW5nKGUyLmNvZGVzcGFjZSksIG8yKSwgZGVjb2RlKGUyLCBvMikge1xuICBjb25zdCBuMiA9IGUyIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gZTIgOiBuZXcgQmluYXJ5UmVhZGVyKGUyKTtcbiAgbGV0IGkzID0gdm9pZCAwID09PSBvMiA/IG4yLmxlbiA6IG4yLnBvcyArIG8yO1xuICBjb25zdCBhMiA9IG0oKTtcbiAgZm9yICg7IG4yLnBvcyA8IGkzOyApIHtcbiAgICBjb25zdCBlMyA9IG4yLnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgYTIuY29kZSA9IG4yLnVpbnQzMigpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgYTIubG9nID0gbjIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICBhMi5pbmZvID0gbjIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA1OlxuICAgICAgICBhMi5pbmRleCA9IG4yLmludDY0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA2OlxuICAgICAgICBhMi5rZXkgPSBuMi5ieXRlcygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNzpcbiAgICAgICAgYTIudmFsdWUgPSBuMi5ieXRlcygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgODpcbiAgICAgICAgYTIucHJvb2ZPcHMgPSBQcm9vZk9wcy5kZWNvZGUobjIsIG4yLnVpbnQzMigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDk6XG4gICAgICAgIGEyLmhlaWdodCA9IG4yLmludDY0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxMDpcbiAgICAgICAgYTIuY29kZXNwYWNlID0gbjIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbjIuc2tpcFR5cGUoNyAmIGUzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGEyO1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgY29kZTogaXNTZXQoZTIuY29kZSkgPyBOdW1iZXIoZTIuY29kZSkgOiAwLCBsb2c6IGlzU2V0KGUyLmxvZykgPyBTdHJpbmcoZTIubG9nKSA6IFwiXCIsIGluZm86IGlzU2V0KGUyLmluZm8pID8gU3RyaW5nKGUyLmluZm8pIDogXCJcIiwgaW5kZXg6IGlzU2V0KGUyLmluZGV4KSA/IEJpZ0ludChlMi5pbmRleC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwga2V5OiBpc1NldChlMi5rZXkpID8gZGVjb2RlQmFzZTY0KGUyLmtleSkgOiBuZXcgVWludDhBcnJheSgpLCB2YWx1ZTogaXNTZXQoZTIudmFsdWUpID8gZGVjb2RlQmFzZTY0KGUyLnZhbHVlKSA6IG5ldyBVaW50OEFycmF5KCksIHByb29mT3BzOiBpc1NldChlMi5wcm9vZk9wcykgPyBQcm9vZk9wcy5mcm9tSlNPTihlMi5wcm9vZk9wcykgOiB2b2lkIDAsIGhlaWdodDogaXNTZXQoZTIuaGVpZ2h0KSA/IEJpZ0ludChlMi5oZWlnaHQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIGNvZGVzcGFjZTogaXNTZXQoZTIuY29kZXNwYWNlKSA/IFN0cmluZyhlMi5jb2Rlc3BhY2UpIDogXCJcIiB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IG8yID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLmNvZGUgJiYgKG8yLmNvZGUgPSBNYXRoLnJvdW5kKGUyLmNvZGUpKSwgdm9pZCAwICE9PSBlMi5sb2cgJiYgKG8yLmxvZyA9IGUyLmxvZyksIHZvaWQgMCAhPT0gZTIuaW5mbyAmJiAobzIuaW5mbyA9IGUyLmluZm8pLCB2b2lkIDAgIT09IGUyLmluZGV4ICYmIChvMi5pbmRleCA9IChlMi5pbmRleCB8fCBCaWdJbnQoMCkpLnRvU3RyaW5nKCkpLCB2b2lkIDAgIT09IGUyLmtleSAmJiAobzIua2V5ID0gZW5jb2RlQmFzZTY0KHZvaWQgMCAhPT0gZTIua2V5ID8gZTIua2V5IDogbmV3IFVpbnQ4QXJyYXkoKSkpLCB2b2lkIDAgIT09IGUyLnZhbHVlICYmIChvMi52YWx1ZSA9IGVuY29kZUJhc2U2NCh2b2lkIDAgIT09IGUyLnZhbHVlID8gZTIudmFsdWUgOiBuZXcgVWludDhBcnJheSgpKSksIHZvaWQgMCAhPT0gZTIucHJvb2ZPcHMgJiYgKG8yLnByb29mT3BzID0gZTIucHJvb2ZPcHMgPyBQcm9vZk9wcy50b0pTT04oZTIucHJvb2ZPcHMpIDogdm9pZCAwKSwgdm9pZCAwICE9PSBlMi5oZWlnaHQgJiYgKG8yLmhlaWdodCA9IChlMi5oZWlnaHQgfHwgQmlnSW50KDApKS50b1N0cmluZygpKSwgdm9pZCAwICE9PSBlMi5jb2Rlc3BhY2UgJiYgKG8yLmNvZGVzcGFjZSA9IGUyLmNvZGVzcGFjZSksIG8yO1xufSwgZnJvbVBhcnRpYWwoZTIpIHtcbiAgY29uc3QgbzIgPSBtKCk7XG4gIHJldHVybiBvMi5jb2RlID0gZTIuY29kZSA/PyAwLCBvMi5sb2cgPSBlMi5sb2cgPz8gXCJcIiwgbzIuaW5mbyA9IGUyLmluZm8gPz8gXCJcIiwgbzIuaW5kZXggPSB2b2lkIDAgIT09IGUyLmluZGV4ICYmIG51bGwgIT09IGUyLmluZGV4ID8gQmlnSW50KGUyLmluZGV4LnRvU3RyaW5nKCkpIDogQmlnSW50KDApLCBvMi5rZXkgPSBlMi5rZXkgPz8gbmV3IFVpbnQ4QXJyYXkoKSwgbzIudmFsdWUgPSBlMi52YWx1ZSA/PyBuZXcgVWludDhBcnJheSgpLCBvMi5wcm9vZk9wcyA9IHZvaWQgMCAhPT0gZTIucHJvb2ZPcHMgJiYgbnVsbCAhPT0gZTIucHJvb2ZPcHMgPyBQcm9vZk9wcy5mcm9tUGFydGlhbChlMi5wcm9vZk9wcykgOiB2b2lkIDAsIG8yLmhlaWdodCA9IHZvaWQgMCAhPT0gZTIuaGVpZ2h0ICYmIG51bGwgIT09IGUyLmhlaWdodCA/IEJpZ0ludChlMi5oZWlnaHQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIG8yLmNvZGVzcGFjZSA9IGUyLmNvZGVzcGFjZSA/PyBcIlwiLCBvMjtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBSZXNwb25zZVF1ZXJ5LmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gUmVzcG9uc2VRdWVyeS5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL3RlbmRlcm1pbnQuYWJjaS5SZXNwb25zZVF1ZXJ5XCIsIHZhbHVlOiBSZXNwb25zZVF1ZXJ5LmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcblxuLy9cbnZhciBDb3Ntb3NRdWVyeSA9IHsgdHlwZVVybDogXCIvaWNxLnYxLkNvc21vc1F1ZXJ5XCIsIGVuY29kZShvMiwgdDUgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpIHtcbiAgZm9yIChjb25zdCByNSBvZiBvMi5yZXF1ZXN0cykgUmVxdWVzdFF1ZXJ5LmVuY29kZShyNSwgdDUudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICByZXR1cm4gdDU7XG59LCBkZWNvZGUobzIsIHI1KSB7XG4gIGNvbnN0IHMzID0gbzIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBvMiA6IG5ldyBCaW5hcnlSZWFkZXIobzIpO1xuICBsZXQgbjIgPSB2b2lkIDAgPT09IHI1ID8gczMubGVuIDogczMucG9zICsgcjU7XG4gIGNvbnN0IGEyID0geyByZXF1ZXN0czogW10gfTtcbiAgZm9yICg7IHMzLnBvcyA8IG4yOyApIHtcbiAgICBjb25zdCBvMyA9IHMzLnVpbnQzMigpO1xuICAgIGlmIChvMyA+Pj4gMyA9PSAxKSBhMi5yZXF1ZXN0cy5wdXNoKFJlcXVlc3RRdWVyeS5kZWNvZGUoczMsIHMzLnVpbnQzMigpKSk7XG4gICAgZWxzZSBzMy5za2lwVHlwZSg3ICYgbzMpO1xuICB9XG4gIHJldHVybiBhMjtcbn0sIGZyb21KU09OOiAobzIpID0+ICh7IHJlcXVlc3RzOiBBcnJheS5pc0FycmF5KG8yPy5yZXF1ZXN0cykgPyBvMi5yZXF1ZXN0cy5tYXAoKG8zKSA9PiBSZXF1ZXN0UXVlcnkuZnJvbUpTT04obzMpKSA6IFtdIH0pLCB0b0pTT04obzIpIHtcbiAgY29uc3QgdDUgPSB7fTtcbiAgcmV0dXJuIG8yLnJlcXVlc3RzID8gdDUucmVxdWVzdHMgPSBvMi5yZXF1ZXN0cy5tYXAoKG8zKSA9PiBvMyA/IFJlcXVlc3RRdWVyeS50b0pTT04obzMpIDogdm9pZCAwKSA6IHQ1LnJlcXVlc3RzID0gW10sIHQ1O1xufSwgZnJvbVBhcnRpYWwobzIpIHtcbiAgY29uc3QgdDUgPSB7IHJlcXVlc3RzOiBbXSB9O1xuICByZXR1cm4gdDUucmVxdWVzdHMgPSBvMi5yZXF1ZXN0cz8ubWFwKChvMykgPT4gUmVxdWVzdFF1ZXJ5LmZyb21QYXJ0aWFsKG8zKSkgfHwgW10sIHQ1O1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IENvc21vc1F1ZXJ5LmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gQ29zbW9zUXVlcnkuZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9pY3EudjEuQ29zbW9zUXVlcnlcIiwgdmFsdWU6IENvc21vc1F1ZXJ5LmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcbnZhciBDb3Ntb3NSZXNwb25zZSA9IHsgdHlwZVVybDogXCIvaWNxLnYxLkNvc21vc1Jlc3BvbnNlXCIsIGVuY29kZShlMiwgdDUgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpIHtcbiAgZm9yIChjb25zdCByNSBvZiBlMi5yZXNwb25zZXMpIFJlc3BvbnNlUXVlcnkuZW5jb2RlKHI1LCB0NS51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gIHJldHVybiB0NTtcbn0sIGRlY29kZShlMiwgcjUpIHtcbiAgY29uc3QgczMgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCBuMiA9IHZvaWQgMCA9PT0gcjUgPyBzMy5sZW4gOiBzMy5wb3MgKyByNTtcbiAgY29uc3QgYTIgPSB7IHJlc3BvbnNlczogW10gfTtcbiAgZm9yICg7IHMzLnBvcyA8IG4yOyApIHtcbiAgICBjb25zdCBlMyA9IHMzLnVpbnQzMigpO1xuICAgIGlmIChlMyA+Pj4gMyA9PSAxKSBhMi5yZXNwb25zZXMucHVzaChSZXNwb25zZVF1ZXJ5LmRlY29kZShzMywgczMudWludDMyKCkpKTtcbiAgICBlbHNlIHMzLnNraXBUeXBlKDcgJiBlMyk7XG4gIH1cbiAgcmV0dXJuIGEyO1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgcmVzcG9uc2VzOiBBcnJheS5pc0FycmF5KGUyPy5yZXNwb25zZXMpID8gZTIucmVzcG9uc2VzLm1hcCgoZTMpID0+IFJlc3BvbnNlUXVlcnkuZnJvbUpTT04oZTMpKSA6IFtdIH0pLCB0b0pTT04oZTIpIHtcbiAgY29uc3QgdDUgPSB7fTtcbiAgcmV0dXJuIGUyLnJlc3BvbnNlcyA/IHQ1LnJlc3BvbnNlcyA9IGUyLnJlc3BvbnNlcy5tYXAoKGUzKSA9PiBlMyA/IFJlc3BvbnNlUXVlcnkudG9KU09OKGUzKSA6IHZvaWQgMCkgOiB0NS5yZXNwb25zZXMgPSBbXSwgdDU7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCB0NSA9IHsgcmVzcG9uc2VzOiBbXSB9O1xuICByZXR1cm4gdDUucmVzcG9uc2VzID0gZTIucmVzcG9uc2VzPy5tYXAoKGUzKSA9PiBSZXNwb25zZVF1ZXJ5LmZyb21QYXJ0aWFsKGUzKSkgfHwgW10sIHQ1O1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IENvc21vc1Jlc3BvbnNlLmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gQ29zbW9zUmVzcG9uc2UuZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9pY3EudjEuQ29zbW9zUmVzcG9uc2VcIiwgdmFsdWU6IENvc21vc1Jlc3BvbnNlLmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcblxuLy9cbnZhciBUeXBlO1xuIWZ1bmN0aW9uKGUyKSB7XG4gIGUyW2UyLlRZUEVfVU5TUEVDSUZJRUQgPSAwXSA9IFwiVFlQRV9VTlNQRUNJRklFRFwiLCBlMltlMi5UWVBFX0VYRUNVVEVfVFggPSAxXSA9IFwiVFlQRV9FWEVDVVRFX1RYXCIsIGUyW2UyLlVOUkVDT0dOSVpFRCA9IC0xXSA9IFwiVU5SRUNPR05JWkVEXCI7XG59KFR5cGUgfHwgKFR5cGUgPSB7fSkpO1xuXG4vL1xuZnVuY3Rpb24gbWFrZVR4UGFja2V0KG1zZ3MsIG9wdHMpIHtcbiAgY29uc3QgbWVzc2FnZXMgPSBtc2dzLm1hcChBbnkuZnJvbUpTT04pO1xuICBjb25zdCBieXRlczIgPSBUeEJvZHkuZW5jb2RlKFxuICAgIFR4Qm9keS5mcm9tUGFydGlhbCh7XG4gICAgICBtZXNzYWdlcyxcbiAgICAgIC4uLm9wdHNcbiAgICB9KVxuICApLmZpbmlzaCgpO1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoXG4gICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIHtcbiAgICAgIHR5cGU6IFR5cGUuVFlQRV9FWEVDVVRFX1RYLFxuICAgICAgZGF0YTogZW5jb2RlQmFzZTY0KGJ5dGVzMiksXG4gICAgICBtZW1vOiBcIlwiXG4gICAgfVxuICApO1xufVxuaGFyZGVuKG1ha2VUeFBhY2tldCk7XG5mdW5jdGlvbiBtYWtlUXVlcnlQYWNrZXQobXNncykge1xuICBjb25zdCBieXRlczIgPSBDb3Ntb3NRdWVyeS5lbmNvZGUoXG4gICAgQ29zbW9zUXVlcnkuZnJvbVBhcnRpYWwoe1xuICAgICAgcmVxdWVzdHM6IG1zZ3MubWFwKFJlcXVlc3RRdWVyeS5mcm9tSlNPTilcbiAgICB9KVxuICApLmZpbmlzaCgpO1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoXG4gICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICB7XG4gICAgICBkYXRhOiBlbmNvZGVCYXNlNjQoYnl0ZXMyKSxcbiAgICAgIG1lbW86IFwiXCJcbiAgICB9XG4gICk7XG59XG5oYXJkZW4obWFrZVF1ZXJ5UGFja2V0KTtcbmZ1bmN0aW9uIHBhcnNlVHhQYWNrZXQocmVzcG9uc2UpIHtcbiAgY29uc3QgeyByZXN1bHQsIGVycm9yIH0gPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcbiAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgZWxzZSBpZiAoZXJyb3IpIHRocm93IEVycm9yKGVycm9yKTtcbiAgZWxzZSB0aHJvdyB0aHJvd1JlZGFjdGVkYGV4cGVjdGVkIGVpdGhlciByZXN1bHQgb3IgZXJyb3I6ICR7cmVzcG9uc2V9YDtcbn1cbmhhcmRlbihwYXJzZVR4UGFja2V0KTtcbmZ1bmN0aW9uIHBhcnNlUXVlcnlQYWNrZXQocmVzcG9uc2UpIHtcbiAgY29uc3QgcmVzdWx0ID0gcGFyc2VUeFBhY2tldChyZXNwb25zZSk7XG4gIGNvbnN0IHsgZGF0YSB9ID0gSlNPTi5wYXJzZShhdG9iMihyZXN1bHQpKTtcbiAgY29uc3QgeyByZXNwb25zZXMgPSBbXSB9ID0gQ29zbW9zUmVzcG9uc2UuZGVjb2RlKGRlY29kZUJhc2U2NChkYXRhKSk7XG4gIHJldHVybiBoYXJkZW4ocmVzcG9uc2VzLm1hcChSZXNwb25zZVF1ZXJ5LnRvSlNPTikpO1xufVxuaGFyZGVuKHBhcnNlUXVlcnlQYWNrZXQpO1xuXG4vL1xudmFyIHRyYWNlID0gbWFrZVRyYWNlcihcIkljYUFjY291bnRLaXRcIik7XG52YXIgVU5QQVJTQUJMRV9DSEFJTl9BRERSRVNTID0gXCJVTlBBUlNBQkxFX0NIQUlOX0FERFJFU1NcIjtcbnZhciBJY2FBY2NvdW50SSA9IE0uaW50ZXJmYWNlKFwiSWNhQWNjb3VudFwiLCB7XG4gIGdldEFkZHJlc3M6IE0uY2FsbCgpLnJldHVybnMoQ29zbW9zQ2hhaW5BZGRyZXNzU2hhcGUpLFxuICBnZXRMb2NhbEFkZHJlc3M6IE0uY2FsbCgpLnJldHVybnMoTS5zdHJpbmcoKSksXG4gIGdldFJlbW90ZUFkZHJlc3M6IE0uY2FsbCgpLnJldHVybnMoTS5zdHJpbmcoKSksXG4gIGdldFBvcnQ6IE0uY2FsbCgpLnJldHVybnMoTS5yZW1vdGFibGUoXCJQb3J0XCIpKSxcbiAgZXhlY3V0ZVR4OiBNLmNhbGwoTS5hcnJheU9mKE0ucmVjb3JkKCkpKS5yZXR1cm5zKFZvd1NoYXBlKSxcbiAgZXhlY3V0ZUVuY29kZWRUeDogTS5jYWxsKE0uYXJyYXlPZihQcm90bzNTaGFwZSkpLm9wdGlvbmFsKEV4ZWN1dGVJQ0FUeE9wdHNTaGFwZSkucmV0dXJucyhWb3dTaGFwZSksXG4gIGRlYWN0aXZhdGU6IE0uY2FsbCgpLnJldHVybnMoVm93U2hhcGUpLFxuICByZWFjdGl2YXRlOiBNLmNhbGwoKS5yZXR1cm5zKFZvd1NoYXBlKVxufSk7XG52YXIgcHJlcGFyZUljYUFjY291bnRLaXQgPSAoem9uZSwgeyB3YXRjaCwgYXNWb3cgfSkgPT4gem9uZS5leG9DbGFzc0tpdChcbiAgXCJJY2FBY2NvdW50S2l0XCIsXG4gIHtcbiAgICBhY2NvdW50OiBJY2FBY2NvdW50SSxcbiAgICBjb25uZWN0aW9uSGFuZGxlcjogT3V0Ym91bmRDb25uZWN0aW9uSGFuZGxlckksXG4gICAgcGFyc2VUeFBhY2tldFdhdGNoZXI6IE0uaW50ZXJmYWNlKFwiUGFyc2VUeFBhY2tldFdhdGNoZXJcIiwge1xuICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLnN0cmluZygpKS5vcHRpb25hbChNLmFycmF5T2YoTS51bmRlZmluZWQoKSkpLnJldHVybnMoTS5zdHJpbmcoKSlcbiAgICB9KVxuICB9LFxuICAvKlxuXG5cblxuICAgKi9cbiAgKGNoYWluSWQsIHBvcnQsIHJlcXVlc3RlZFJlbW90ZUFkZHJlc3MpID0+IChcbiAgICAvKiAgICAgICAgICAgICAgICAqL1xuICAgIHtcbiAgICAgIGNoYWluSWQsXG4gICAgICBwb3J0LFxuICAgICAgY29ubmVjdGlvbjogdm9pZCAwLFxuICAgICAgcmVxdWVzdGVkUmVtb3RlQWRkcmVzcyxcbiAgICAgIHJlbW90ZUFkZHJlc3M6IHZvaWQgMCxcbiAgICAgIGNoYWluQWRkcmVzczogdm9pZCAwLFxuICAgICAgbG9jYWxBZGRyZXNzOiB2b2lkIDAsXG4gICAgICBpc0luaXRpYXRpbmdDbG9zZTogZmFsc2VcbiAgICB9XG4gICksXG4gIHtcbiAgICBwYXJzZVR4UGFja2V0V2F0Y2hlcjoge1xuICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgIG9uRnVsZmlsbGVkKGFjaykge1xuICAgICAgICByZXR1cm4gcGFyc2VUeFBhY2tldChhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgYWNjb3VudDoge1xuICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICBnZXRBZGRyZXNzKCkge1xuICAgICAgICByZXR1cm4gTm9uTnVsbGlzaChcbiAgICAgICAgICB0aGlzLnN0YXRlLmNoYWluQWRkcmVzcyxcbiAgICAgICAgICBcIklDQSBjaGFubmVsIGNyZWF0aW9uIGFja25vd2xlZGdlbWVudCBub3QgeWV0IHJlY2VpdmVkLlwiXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgZ2V0TG9jYWxBZGRyZXNzKCkge1xuICAgICAgICByZXR1cm4gTm9uTnVsbGlzaChcbiAgICAgICAgICB0aGlzLnN0YXRlLmxvY2FsQWRkcmVzcyxcbiAgICAgICAgICBcImxvY2FsIGFkZHJlc3Mgbm90IGF2YWlsYWJsZVwiXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgZ2V0UmVtb3RlQWRkcmVzcygpIHtcbiAgICAgICAgcmV0dXJuIE5vbk51bGxpc2goXG4gICAgICAgICAgdGhpcy5zdGF0ZS5yZW1vdGVBZGRyZXNzLFxuICAgICAgICAgIFwicmVtb3RlIGFkZHJlc3Mgbm90IGF2YWlsYWJsZVwiXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgZ2V0UG9ydCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUucG9ydDtcbiAgICAgIH0sXG4gICAgICBleGVjdXRlVHgoKSB7XG4gICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB0aHJvd1JlZGFjdGVkYG5vdCB5ZXQgaW1wbGVtZW50ZWRgKTtcbiAgICAgIH0sXG4gICAgICAvKlxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuICAgICAgICovXG4gICAgICBleGVjdXRlRW5jb2RlZFR4KG1zZ3MsIG9wdHMgPSB7fSkge1xuICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgY29ubmVjdGlvbiB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBpZiAoIWNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgQWNjb3VudCBub3QgYXZhaWxhYmxlIG9yIGRlYWN0aXZhdGVkLmA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHsgc2VuZE9wdHMsIC4uLnR4Qm9keU9wdHMgfSA9IG9wdHM7XG4gICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgRShjb25uZWN0aW9uKS5zZW5kKG1ha2VUeFBhY2tldChtc2dzLCB0eEJvZHlPcHRzKSwgc2VuZE9wdHMpLFxuICAgICAgICAgICAgdGhpcy5mYWNldHMucGFyc2VUeFBhY2tldFdhdGNoZXJcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgZGVhY3RpdmF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICBjb25zdCB7IGNvbm5lY3Rpb24gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgaWYgKCFjb25uZWN0aW9uKSB0aHJvdyB0aHJvd1JlZGFjdGVkYEFjY291bnQgbm90IGF2YWlsYWJsZSBvciBkZWFjdGl2YXRlZC5gO1xuICAgICAgICAgIHRoaXMuc3RhdGUuaXNJbml0aWF0aW5nQ2xvc2UgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBFKGNvbm5lY3Rpb24pLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICByZWFjdGl2YXRlKCkge1xuICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgY29ubmVjdGlvbiwgcG9ydCwgcmVxdWVzdGVkUmVtb3RlQWRkcmVzcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBpZiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBBY2NvdW50IGlzIGFscmVhZHkgYWN0aXZlLmA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICAgIEUocG9ydCkuY29ubmVjdChcbiAgICAgICAgICAgICAgcmVxdWVzdGVkUmVtb3RlQWRkcmVzcyxcbiAgICAgICAgICAgICAgdGhpcy5mYWNldHMuY29ubmVjdGlvbkhhbmRsZXJcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbm5lY3Rpb25IYW5kbGVyOiB7XG4gICAgICAvKlxuXG5cblxuICAgICAgICovXG4gICAgICBhc3luYyBvbk9wZW4oY29ubmVjdGlvbiwgbG9jYWxBZGRyLCByZW1vdGVBZGRyKSB7XG4gICAgICAgIHRyYWNlKGBJQ0EgQ2hhbm5lbCBPcGVuZWQgZm9yICR7bG9jYWxBZGRyfSBhdCAke3JlbW90ZUFkZHJ9YCk7XG4gICAgICAgIHRoaXMuc3RhdGUuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XG4gICAgICAgIHRoaXMuc3RhdGUucmVtb3RlQWRkcmVzcyA9IHJlbW90ZUFkZHI7XG4gICAgICAgIHRoaXMuc3RhdGUubG9jYWxBZGRyZXNzID0gbG9jYWxBZGRyO1xuICAgICAgICBjb25zdCBhZGRyZXNzID0gZmluZEFkZHJlc3NGaWVsZChyZW1vdGVBZGRyKTtcbiAgICAgICAgaWYgKCFhZGRyZXNzKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIlxcdTI2QTBcXHVGRTBGIGZhaWxlZCB0byBwYXJzZSBjaGFpbiBhZGRyZXNzXCIsIHJlbW90ZUFkZHIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUuY2hhaW5BZGRyZXNzID0gaGFyZGVuKHtcbiAgICAgICAgICB2YWx1ZTogYWRkcmVzcyB8fCBVTlBBUlNBQkxFX0NIQUlOX0FERFJFU1MsXG4gICAgICAgICAgY2hhaW5JZDogdGhpcy5zdGF0ZS5jaGFpbklkLFxuICAgICAgICAgIGVuY29kaW5nOiBcImJlY2gzMlwiXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIC8qXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4gICAgICAgKi9cbiAgICAgIGFzeW5jIG9uQ2xvc2UoX2Nvbm5lY3Rpb24sIHJlYXNvbikge1xuICAgICAgICB0cmFjZShgSUNBIENoYW5uZWwgY2xvc2VkLiBSZWFzb246ICR7cmVhc29ufWApO1xuICAgICAgICB0aGlzLnN0YXRlLmNvbm5lY3Rpb24gPSB2b2lkIDA7XG4gICAgICAgIHRoaXMuc3RhdGUubG9jYWxBZGRyZXNzID0gdm9pZCAwO1xuICAgICAgICB0aGlzLnN0YXRlLnJlbW90ZUFkZHJlc3MgPSB2b2lkIDA7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmlzSW5pdGlhdGluZ0Nsb3NlID09PSB0cnVlKSB7XG4gICAgICAgICAgdHJhY2UoXCJBY2NvdW50IGRlYWN0aXZhdGVkIGJ5IGhvbGRlci4gU2tpcHBpbmcgcmVhY3RpdmF0aW9uLlwiKTtcbiAgICAgICAgICB0aGlzLnN0YXRlLmlzSW5pdGlhdGluZ0Nsb3NlID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJhY2UoXCJBY2NvdW50IGNsb3NlZCB1bmV4cGVjdGVkbHkuIEF1dG9tYXRpY2FsbHkgcmVhY3RpdmF0aW5nLlwiKTtcbiAgICAgICAgICB2b2lkIHdhdGNoKHRoaXMuZmFjZXRzLmFjY291bnQucmVhY3RpdmF0ZSgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuKTtcblxuLy9cbnZhciB0cmFjZTIgPSBtYWtlVHJhY2VyKFwiT3JjaGVzdHJhdGlvbjpJQ1FDb25uZWN0aW9uXCIpO1xudmFyIElDUUNvbm5lY3Rpb25JID0gTS5pbnRlcmZhY2UoXCJJQ1FDb25uZWN0aW9uXCIsIHtcbiAgZ2V0TG9jYWxBZGRyZXNzOiBNLmNhbGwoKS5yZXR1cm5zKE0uc3RyaW5nKCkpLFxuICBnZXRSZW1vdGVBZGRyZXNzOiBNLmNhbGwoKS5yZXR1cm5zKE0uc3RyaW5nKCkpLFxuICBxdWVyeTogTS5jYWxsKE0uYXJyYXlPZihJQ1FNc2dTaGFwZSkpLnJldHVybnMoVm93U2hhcGUpXG59KTtcbnZhciBwcmVwYXJlSUNRQ29ubmVjdGlvbktpdCA9ICh6b25lLCB7IHdhdGNoLCBhc1ZvdyB9KSA9PiB6b25lLmV4b0NsYXNzS2l0KFxuICBcIklDUUNvbm5lY3Rpb25LaXRcIixcbiAge1xuICAgIGNvbm5lY3Rpb246IElDUUNvbm5lY3Rpb25JLFxuICAgIGNvbm5lY3Rpb25IYW5kbGVyOiBPdXRib3VuZENvbm5lY3Rpb25IYW5kbGVySSxcbiAgICBwYXJzZVF1ZXJ5UGFja2V0V2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJQYXJzZVF1ZXJ5UGFja2V0V2F0Y2hlclwiLCB7XG4gICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uc3RyaW5nKCkpLm9wdGlvbmFsKE0uYXJyYXlPZihNLnVuZGVmaW5lZCgpKSkucmV0dXJucyhNLmFycmF5T2YoTS5yZWNvcmQoKSkpXG4gICAgfSlcbiAgfSxcbiAgLyogICAgICAgICAgICAgICAgICAgICAqL1xuICAocG9ydCkgPT4gKFxuICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIHtcbiAgICAgIHBvcnQsXG4gICAgICBjb25uZWN0aW9uOiB2b2lkIDAsXG4gICAgICByZW1vdGVBZGRyZXNzOiB2b2lkIDAsXG4gICAgICBsb2NhbEFkZHJlc3M6IHZvaWQgMFxuICAgIH1cbiAgKSxcbiAge1xuICAgIGNvbm5lY3Rpb246IHtcbiAgICAgIGdldExvY2FsQWRkcmVzcygpIHtcbiAgICAgICAgcmV0dXJuIE5vbk51bGxpc2goXG4gICAgICAgICAgdGhpcy5zdGF0ZS5sb2NhbEFkZHJlc3MsXG4gICAgICAgICAgXCJsb2NhbCBhZGRyZXNzIG5vdCBhdmFpbGFibGVcIlxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIGdldFJlbW90ZUFkZHJlc3MoKSB7XG4gICAgICAgIHJldHVybiBOb25OdWxsaXNoKFxuICAgICAgICAgIHRoaXMuc3RhdGUucmVtb3RlQWRkcmVzcyxcbiAgICAgICAgICBcInJlbW90ZSBhZGRyZXNzIG5vdCBhdmFpbGFibGVcIlxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIC8qXG5cblxuXG5cbiAgICAgICAqL1xuICAgICAgcXVlcnkobXNncykge1xuICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgY29ubmVjdGlvbiB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBpZiAoIWNvbm5lY3Rpb24pIHRocm93IHRocm93UmVkYWN0ZWRgY29ubmVjdGlvbiBub3QgYXZhaWxhYmxlYDtcbiAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICBFKGNvbm5lY3Rpb24pLnNlbmQobWFrZVF1ZXJ5UGFja2V0KG1zZ3MpKSxcbiAgICAgICAgICAgIHRoaXMuZmFjZXRzLnBhcnNlUXVlcnlQYWNrZXRXYXRjaGVyXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBwYXJzZVF1ZXJ5UGFja2V0V2F0Y2hlcjoge1xuICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgIG9uRnVsZmlsbGVkKGFjaykge1xuICAgICAgICByZXR1cm4gcGFyc2VRdWVyeVBhY2tldChhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgY29ubmVjdGlvbkhhbmRsZXI6IHtcbiAgICAgIC8qXG5cblxuXG4gICAgICAgKi9cbiAgICAgIGFzeW5jIG9uT3Blbihjb25uZWN0aW9uLCBsb2NhbEFkZHIsIHJlbW90ZUFkZHIpIHtcbiAgICAgICAgdHJhY2UyKGBJQ1EgQ2hhbm5lbCBPcGVuZWQgZm9yICR7bG9jYWxBZGRyfSBhdCAke3JlbW90ZUFkZHJ9YCk7XG4gICAgICAgIHRoaXMuc3RhdGUuY29ubmVjdGlvbiA9IGNvbm5lY3Rpb247XG4gICAgICAgIHRoaXMuc3RhdGUucmVtb3RlQWRkcmVzcyA9IHJlbW90ZUFkZHI7XG4gICAgICAgIHRoaXMuc3RhdGUubG9jYWxBZGRyZXNzID0gbG9jYWxBZGRyO1xuICAgICAgfSxcbiAgICAgIGFzeW5jIG9uQ2xvc2UoX2Nvbm5lY3Rpb24sIHJlYXNvbikge1xuICAgICAgICB0cmFjZTIoYElDUSBDaGFubmVsIGNsb3NlZC4gUmVhc29uOiAke3JlYXNvbn1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbik7XG5cbi8vXG52YXIgeyBWb3ckIH0gPSBTaGFwZTtcbnZhciBnZXRJQ1FDb25uZWN0aW9uS2V5ID0gKGNvbnRyb2xsZXJDb25uZWN0aW9uSWQsIHZlcnNpb24pID0+IHtcbiAgcmV0dXJuIGAke2NvbnRyb2xsZXJDb25uZWN0aW9uSWR9OiR7dmVyc2lvbiB8fCBERUZBVUxUX0lDUV9WRVJTSU9OfWA7XG59O1xudmFyIHByZXBhcmVDb3Ntb3NPcmNoZXN0cmF0aW9uU2VydmljZUtpdCA9ICh6b25lLCB7IHdhdGNoLCBhc1ZvdyB9LCBtYWtlSWNhQWNjb3VudEtpdCwgbWFrZUlDUUNvbm5lY3Rpb25LaXQpID0+IHpvbmUuZXhvQ2xhc3NLaXQoXG4gIFwiT3JjaGVzdHJhdGlvblwiLFxuICB7XG4gICAgcmVxdWVzdElDQUNoYW5uZWxXYXRjaGVyOiBNLmludGVyZmFjZShcIlJlcXVlc3RJQ0FDaGFubmVsV2F0Y2hlclwiLCB7XG4gICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0ucmVtb3RhYmxlKFwiUG9ydFwiKSkub3B0aW9uYWwoeyBjaGFpbklkOiBNLnN0cmluZygpLCByZW1vdGVDb25uQWRkcjogTS5zdHJpbmcoKSB9KS5yZXR1cm5zKFZvdyQoU2hhcGUuQ29ubmVjdGlvbikpXG4gICAgfSksXG4gICAgcmVxdWVzdElDUUNoYW5uZWxXYXRjaGVyOiBNLmludGVyZmFjZShcIlJlcXVlc3RJQ1FDaGFubmVsV2F0Y2hlclwiLCB7XG4gICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0ucmVtb3RhYmxlKFwiUG9ydFwiKSkub3B0aW9uYWwoe1xuICAgICAgICByZW1vdGVDb25uQWRkcjogTS5zdHJpbmcoKSxcbiAgICAgICAgaWNxTG9va3VwS2V5OiBNLnN0cmluZygpXG4gICAgICB9KS5yZXR1cm5zKFZvdyQoU2hhcGUuQ29ubmVjdGlvbikpXG4gICAgfSksXG4gICAgY2hhbm5lbE9wZW5XYXRjaGVyOiBNLmludGVyZmFjZShcIkNoYW5uZWxPcGVuV2F0Y2hlclwiLCB7XG4gICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0ucmVtb3RhYmxlKFwiQ29ubmVjdGlvblwiKSkub3B0aW9uYWwoXG4gICAgICAgIE0uc3BsaXRSZWNvcmQoXG4gICAgICAgICAgeyBjb25uZWN0aW9uS2l0OiBNLnJlY29yZCgpLCByZXR1cm5GYWNldDogTS5zdHJpbmcoKSB9LFxuICAgICAgICAgIHsgaWNxTG9va3VwS2V5OiBNLnN0cmluZygpIH1cbiAgICAgICAgKVxuICAgICAgKS5yZXR1cm5zKE0ucmVtb3RhYmxlKFwiQ29ubmVjdGlvbktpdCBIb2xkZXIgZmFjZXRcIikpXG4gICAgfSksXG4gICAgcHVibGljOiBNLmludGVyZmFjZShcIkNvc21vc0ludGVyY2hhaW5TZXJ2aWNlXCIsIHtcbiAgICAgIG1ha2VBY2NvdW50OiBNLmNhbGwoTS5zdHJpbmcoKSwgTS5zdHJpbmcoKSwgTS5zdHJpbmcoKSkub3B0aW9uYWwoTS5yZWNvcmQoKSkucmV0dXJucyhWb3ckKE0ucmVtb3RhYmxlKFwiSWNhQWNjb3VudEtpdFwiKSkpLFxuICAgICAgcHJvdmlkZUlDUUNvbm5lY3Rpb246IE0uY2FsbChNLnN0cmluZygpKS5vcHRpb25hbChNLnN0cmluZygpKS5yZXR1cm5zKFZvdyQoTS5yZW1vdGFibGUoXCJJQ1FDb25uZWN0aW9uXCIpKSlcbiAgICB9KVxuICB9LFxuICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgKHBvd2VycykgPT4ge1xuICAgIG11c3RNYXRjaChwb3dlcnM/LnBvcnRBbGxvY2F0b3IsIE0ucmVtb3RhYmxlKFwiUG9ydEFsbG9jYXRvclwiKSk7XG4gICAgY29uc3QgaWNxQ29ubmVjdGlvbnMgPSB6b25lLmRldGFjaGVkKCkubWFwU3RvcmUoXCJJQ1FDb25uZWN0aW9uc1wiKTtcbiAgICByZXR1cm4gKFxuICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICB7XG4gICAgICAgIGljcUNvbm5lY3Rpb25zLFxuICAgICAgICBzaGFyZWRJQ1FQb3J0OiB2b2lkIDAsXG4gICAgICAgIHJlc2VydmVkOiB2b2lkIDAsXG4gICAgICAgIC4uLnBvd2Vyc1xuICAgICAgfVxuICAgICk7XG4gIH0sXG4gIHtcbiAgICByZXF1ZXN0SUNBQ2hhbm5lbFdhdGNoZXI6IHtcbiAgICAgIC8qXG5cblxuXG5cblxuICAgICAgICovXG4gICAgICBvbkZ1bGZpbGxlZChwb3J0LCB7IGNoYWluSWQsIHJlbW90ZUNvbm5BZGRyIH0pIHtcbiAgICAgICAgY29uc3QgY29ubmVjdGlvbktpdCA9IG1ha2VJY2FBY2NvdW50S2l0KFxuICAgICAgICAgIGNoYWluSWQsXG4gICAgICAgICAgcG9ydCxcbiAgICAgICAgICByZW1vdGVDb25uQWRkclxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgRShwb3J0KS5jb25uZWN0KHJlbW90ZUNvbm5BZGRyLCBjb25uZWN0aW9uS2l0LmNvbm5lY3Rpb25IYW5kbGVyKSxcbiAgICAgICAgICB0aGlzLmZhY2V0cy5jaGFubmVsT3BlbldhdGNoZXIsXG4gICAgICAgICAgeyByZXR1cm5GYWNldDogXCJhY2NvdW50XCIsIGNvbm5lY3Rpb25LaXQgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVxdWVzdElDUUNoYW5uZWxXYXRjaGVyOiB7XG4gICAgICAvKlxuXG5cblxuXG5cbiAgICAgICAqL1xuICAgICAgb25GdWxmaWxsZWQocG9ydCwgeyByZW1vdGVDb25uQWRkciwgaWNxTG9va3VwS2V5IH0pIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLnNoYXJlZElDUVBvcnQpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlLnNoYXJlZElDUVBvcnQgPSBwb3J0O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb25LaXQgPSBtYWtlSUNRQ29ubmVjdGlvbktpdChwb3J0KTtcbiAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgIEUocG9ydCkuY29ubmVjdChyZW1vdGVDb25uQWRkciwgY29ubmVjdGlvbktpdC5jb25uZWN0aW9uSGFuZGxlciksXG4gICAgICAgICAgdGhpcy5mYWNldHMuY2hhbm5lbE9wZW5XYXRjaGVyLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb25LaXQsXG4gICAgICAgICAgICByZXR1cm5GYWNldDogXCJjb25uZWN0aW9uXCIsXG4gICAgICAgICAgICBpY3FMb29rdXBLZXlcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgICAvKlxuXG5cblxuICAgICAqL1xuICAgIGNoYW5uZWxPcGVuV2F0Y2hlcjoge1xuICAgICAgLypcblxuXG5cblxuXG5cbiAgICAgICAqL1xuICAgICAgb25GdWxmaWxsZWQoX2Nvbm5lY3Rpb24sIHsgY29ubmVjdGlvbktpdCwgcmV0dXJuRmFjZXQsIGljcUxvb2t1cEtleSB9KSB7XG4gICAgICAgIGlmIChpY3FMb29rdXBLZXkpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlLmljcUNvbm5lY3Rpb25zLmluaXQoXG4gICAgICAgICAgICBpY3FMb29rdXBLZXksXG4gICAgICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25uZWN0aW9uS2l0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29ubmVjdGlvbktpdFtyZXR1cm5GYWNldF07XG4gICAgICB9XG4gICAgfSxcbiAgICBwdWJsaWM6IHtcbiAgICAgIC8qXG5cblxuXG5cblxuXG5cblxuICAgICAgICovXG4gICAgICBtYWtlQWNjb3VudChjaGFpbklkLCBob3N0Q29ubmVjdGlvbklkLCBjb250cm9sbGVyQ29ubmVjdGlvbklkLCBvcHRzKSB7XG4gICAgICAgIGNvbnN0IHJlbW90ZUNvbm5BZGRyID0gbWFrZUlDQUNoYW5uZWxBZGRyZXNzKFxuICAgICAgICAgIGhvc3RDb25uZWN0aW9uSWQsXG4gICAgICAgICAgY29udHJvbGxlckNvbm5lY3Rpb25JZCxcbiAgICAgICAgICBvcHRzXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHsgcG9ydEFsbG9jYXRvciB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgIEUocG9ydEFsbG9jYXRvcikuYWxsb2NhdGVJQ0FDb250cm9sbGVyUG9ydCgpLFxuICAgICAgICAgIHRoaXMuZmFjZXRzLnJlcXVlc3RJQ0FDaGFubmVsV2F0Y2hlcixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjaGFpbklkLFxuICAgICAgICAgICAgcmVtb3RlQ29ubkFkZHJcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgLypcblxuXG5cblxuICAgICAgICovXG4gICAgICBwcm92aWRlSUNRQ29ubmVjdGlvbihjb250cm9sbGVyQ29ubmVjdGlvbklkLCB2ZXJzaW9uKSB7XG4gICAgICAgIGNvbnN0IGljcUxvb2t1cEtleSA9IGdldElDUUNvbm5lY3Rpb25LZXkoXG4gICAgICAgICAgY29udHJvbGxlckNvbm5lY3Rpb25JZCxcbiAgICAgICAgICB2ZXJzaW9uXG4gICAgICAgICk7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmljcUNvbm5lY3Rpb25zLmhhcyhpY3FMb29rdXBLZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KFxuICAgICAgICAgICAgKCkgPT4gdGhpcy5zdGF0ZS5pY3FDb25uZWN0aW9ucy5nZXQoaWNxTG9va3VwS2V5KS5jb25uZWN0aW9uXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZW1vdGVDb25uQWRkciA9IG1ha2VJQ1FDaGFubmVsQWRkcmVzcyhcbiAgICAgICAgICBjb250cm9sbGVyQ29ubmVjdGlvbklkLFxuICAgICAgICAgIHZlcnNpb25cbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgeyBwb3J0QWxsb2NhdG9yLCBzaGFyZWRJQ1FQb3J0IH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCBwb3J0T3JQb3J0Vm93ID0gc2hhcmVkSUNRUG9ydCB8fCBFKHBvcnRBbGxvY2F0b3IpLmFsbG9jYXRlSUNRQ29udHJvbGxlclBvcnQoKTtcbiAgICAgICAgcmV0dXJuIHdhdGNoKHBvcnRPclBvcnRWb3csIHRoaXMuZmFjZXRzLnJlcXVlc3RJQ1FDaGFubmVsV2F0Y2hlciwge1xuICAgICAgICAgIHJlbW90ZUNvbm5BZGRyLFxuICAgICAgICAgIGljcUxvb2t1cEtleVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICBzdGF0ZVNoYXBlOiB7XG4gICAgICBpY3FDb25uZWN0aW9uczogTS5yZW1vdGFibGUoXCJpY3FDb25uZWN0aW9ucyBtYXBTdG9yZVwiKSxcbiAgICAgIHNoYXJlZElDUVBvcnQ6IE0ub3IoTS5yZW1vdGFibGUoXCJQb3J0XCIpLCBNLnVuZGVmaW5lZCgpKSxcbiAgICAgIHBvcnRBbGxvY2F0b3I6IE0ucmVtb3RhYmxlKFwiUG9ydEFsbG9jYXRvclwiKSxcbiAgICAgIHJlc2VydmVkOiBNLmFueSgpXG4gICAgfVxuICB9XG4pO1xudmFyIHByZXBhcmVDb3Ntb3NJbnRlcmNoYWluU2VydmljZSA9ICh6b25lLCB2b3dUb29scykgPT4ge1xuICBjb25zdCBtYWtlSWNhQWNjb3VudEtpdCA9IHByZXBhcmVJY2FBY2NvdW50S2l0KHpvbmUsIHZvd1Rvb2xzKTtcbiAgY29uc3QgbWFrZUlDUUNvbm5lY3Rpb25LaXQgPSBwcmVwYXJlSUNRQ29ubmVjdGlvbktpdCh6b25lLCB2b3dUb29scyk7XG4gIGNvbnN0IG1ha2VDb3Ntb3NPcmNoZXN0cmF0aW9uU2VydmljZUtpdCA9IHByZXBhcmVDb3Ntb3NPcmNoZXN0cmF0aW9uU2VydmljZUtpdChcbiAgICB6b25lLFxuICAgIHZvd1Rvb2xzLFxuICAgIG1ha2VJY2FBY2NvdW50S2l0LFxuICAgIG1ha2VJQ1FDb25uZWN0aW9uS2l0XG4gICk7XG4gIGNvbnN0IG1ha2VDb3Ntb3NJbnRlcmNoYWluU2VydmljZSA9IHBpY2tGYWNldChcbiAgICBtYWtlQ29zbW9zT3JjaGVzdHJhdGlvblNlcnZpY2VLaXQsXG4gICAgXCJwdWJsaWNcIlxuICApO1xuICByZXR1cm4gbWFrZUNvc21vc0ludGVyY2hhaW5TZXJ2aWNlO1xufTtcbmhhcmRlbihwcmVwYXJlQ29zbW9zSW50ZXJjaGFpblNlcnZpY2UpO1xuXG4vL1xudmFyIG1ha2VDb252ZXJ0ID0gKGNvbnZlcnRSZW1vdGFibGUsIGNvbnZlcnRQcm9taXNlT3JWb3csIGNvbnZlcnRFcnJvcikgPT4ge1xuICBjb25zdCBjb252ZXJ0UmVjdXIgPSAoc3BlY2ltZW4sIGxhYmVsKSA9PiB7XG4gICAgaWYgKGxhYmVsID09PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiBpbm5lckNvbnZlcnQoc3BlY2ltZW4pO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGlubmVyQ29udmVydChzcGVjaW1lbik7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aHJvd0xhYmVsZWQoZXJyLCBsYWJlbCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBpbm5lckNvbnZlcnQgPSAoc3BlY2ltZW4pID0+IHtcbiAgICBpZiAoIWlzT2JqZWN0MihzcGVjaW1lbikpIHtcbiAgICAgIHJldHVybiBzcGVjaW1lbjtcbiAgICB9XG4gICAgY29uc3QgcGFzc1N0eWxlID0gcGFzc1N0eWxlT2Yoc3BlY2ltZW4pO1xuICAgIHN3aXRjaCAocGFzc1N0eWxlKSB7XG4gICAgICBjYXNlIFwiY29weUFycmF5XCI6IHtcbiAgICAgICAgcmV0dXJuIHNwZWNpbWVuLm1hcCgoZWxlbWVudCwgaTMpID0+IGNvbnZlcnRSZWN1cihlbGVtZW50LCBpMykpO1xuICAgICAgfVxuICAgICAgY2FzZSBcImNvcHlSZWNvcmRcIjoge1xuICAgICAgICByZXR1cm4gb2JqZWN0TWFwKHNwZWNpbWVuLCAodmFsdWUsIG5hbWUpID0+IGNvbnZlcnRSZWN1cih2YWx1ZSwgbmFtZSkpO1xuICAgICAgfVxuICAgICAgY2FzZSBcInRhZ2dlZFwiOiB7XG4gICAgICAgIGlmIChpc1ZvdyhzcGVjaW1lbikpIHtcbiAgICAgICAgICByZXR1cm4gY29udmVydFByb21pc2VPclZvdyhzcGVjaW1lbik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFnID0gZ2V0VGFnKHNwZWNpbWVuKTtcbiAgICAgICAgY29uc3QgeyBwYXlsb2FkIH0gPSBzcGVjaW1lbjtcbiAgICAgICAgcmV0dXJuIG1ha2VUYWdnZWQodGFnLCBjb252ZXJ0UmVjdXIocGF5bG9hZCwgYCR7dGFnfSBwYXlsb2FkYCkpO1xuICAgICAgfVxuICAgICAgY2FzZSBcImVycm9yXCI6IHtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnRFcnJvcihzcGVjaW1lbik7XG4gICAgICB9XG4gICAgICBjYXNlIFwicmVtb3RhYmxlXCI6IHtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnRSZW1vdGFibGUoc3BlY2ltZW4pO1xuICAgICAgfVxuICAgICAgY2FzZSBcInByb21pc2VcIjoge1xuICAgICAgICByZXR1cm4gY29udmVydFByb21pc2VPclZvdyhzcGVjaW1lbik7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgdW5leHBlY3RlZCBwYXNzU3R5bGUgJHtxdW90ZShwYXNzU3R5bGUpfWA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBjb252ZXJ0ID0gKHNwZWNpbWVuLCBsYWJlbCA9IHZvaWQgMCkgPT4gY29udmVydFJlY3VyKGhhcmRlbihzcGVjaW1lbiksIGxhYmVsKTtcbiAgcmV0dXJuIGhhcmRlbihjb252ZXJ0KTtcbn07XG52YXIgbWFrZUNvbnZlcnRLaXQgPSAoYmlqZWN0aW9uLCBtYWtlR3Vlc3RGb3JIb3N0UmVtb3RhYmxlLCBtYWtlR3Vlc3RGb3JIb3N0Vm93KSA9PiB7XG4gIGNvbnN0IGd1ZXN0VG9Ib3N0ID0gbWFrZUNvbnZlcnQoXG4gICAgKGdSZW0pID0+IHtcbiAgICAgIGlmIChiaWplY3Rpb24uaGFzR3Vlc3QoZ1JlbSkpIHtcbiAgICAgICAgcmV0dXJuIGJpamVjdGlvbi5ndWVzdFRvSG9zdChnUmVtKTtcbiAgICAgIH1cbiAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgY2Fubm90IHlldCBzZW5kIGd1ZXN0IHJlbW90YWJsZXMgJHtnUmVtfWA7XG4gICAgfSxcbiAgICAoZ1Byb20pID0+IHtcbiAgICAgIGlmIChiaWplY3Rpb24uaGFzR3Vlc3QoZ1Byb20pKSB7XG4gICAgICAgIHJldHVybiBiaWplY3Rpb24uZ3Vlc3RUb0hvc3QoZ1Byb20pO1xuICAgICAgfVxuICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBjYW5ub3QgeWV0IHNlbmQgZ3Vlc3QgcHJvbWlzZXMgJHtnUHJvbX1gO1xuICAgIH0sXG4gICAgKGdFcnIpID0+IHtcbiAgICAgIGNvbnN0IGhFcnIgPSBoYXJkZW4oXG4gICAgICAgIG1ha2VFcnJvcihnRXJyLm1lc3NhZ2UsIGdldEVycm9yQ29uc3RydWN0b3IoZ0Vyci5uYW1lKSlcbiAgICAgICk7XG4gICAgICBub3RlKGhFcnIsIHJlZGFjdGVkYGZyb20gZ3Vlc3QgZXJyb3IgJHtnRXJyfWApO1xuICAgICAgcmV0dXJuIGhFcnI7XG4gICAgfVxuICApO1xuICBjb25zdCBob3N0VG9HdWVzdCA9IG1ha2VDb252ZXJ0KFxuICAgIChoUmVtKSA9PiB7XG4gICAgICBpZiAoYmlqZWN0aW9uLmhhc0hvc3QoaFJlbSkpIHtcbiAgICAgICAgcmV0dXJuIGJpamVjdGlvbi5ob3N0VG9HdWVzdChoUmVtKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGdSZW0gPSBtYWtlR3Vlc3RGb3JIb3N0UmVtb3RhYmxlKGhSZW0pO1xuICAgICAgcmV0dXJuIGJpamVjdGlvbi51bndyYXBJbml0KGdSZW0sIGhSZW0pO1xuICAgIH0sXG4gICAgKGhWb3cpID0+IHtcbiAgICAgIGlmIChiaWplY3Rpb24uaGFzSG9zdChoVm93KSkge1xuICAgICAgICByZXR1cm4gYmlqZWN0aW9uLmhvc3RUb0d1ZXN0KGhWb3cpO1xuICAgICAgfVxuICAgICAgY29uc3QgZ1AgPSBtYWtlR3Vlc3RGb3JIb3N0Vm93KGhWb3cpO1xuICAgICAgcmV0dXJuIGJpamVjdGlvbi51bndyYXBJbml0KGdQLCBoVm93KTtcbiAgICB9LFxuICAgIChoRXJyKSA9PiB7XG4gICAgICBjb25zdCBnRXJyID0gaGFyZGVuKFxuICAgICAgICBtYWtlRXJyb3IoaEVyci5tZXNzYWdlLCBnZXRFcnJvckNvbnN0cnVjdG9yKGhFcnIubmFtZSkpXG4gICAgICApO1xuICAgICAgbm90ZShnRXJyLCByZWRhY3RlZGBmcm9tIGhvc3QgZXJyb3IgJHtoRXJyfWApO1xuICAgICAgcmV0dXJuIGdFcnI7XG4gICAgfVxuICApO1xuICByZXR1cm4gaGFyZGVuKHsgZ3Vlc3RUb0hvc3QsIGhvc3RUb0d1ZXN0IH0pO1xufTtcbmhhcmRlbihtYWtlQ29udmVydEtpdCk7XG5cbi8vXG52YXIgeyBpczogaXM1IH0gPSBPYmplY3Q7XG52YXIgbWFrZUVxdWF0ZSA9IChiaWplY3Rpb24pID0+IHtcbiAgY29uc3QgZXF1YXRlID0gKGczLCBoLCBsYWJlbCkgPT4ge1xuICAgIGlmIChsYWJlbCA9PT0gdm9pZCAwKSB7XG4gICAgICBpbm5lckVxdWF0ZShnMywgaCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBpbm5lckVxdWF0ZShnMywgaCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aHJvd0xhYmVsZWQoZXJyLCBsYWJlbCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBpbm5lckVxdWF0ZSA9IChnMywgaCkgPT4ge1xuICAgIGlmICghaXNPYmplY3QyKGczKSkge1xuICAgICAgaXM1KGczLCBoKSB8fCAvL1xuICAgICAgdGhyb3dSZWRhY3RlZGB1bmVxdWFsICR7ZzN9IHZzICR7aH1gO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoYmlqZWN0aW9uLmhhc0d1ZXN0KGczKSAmJiBiaWplY3Rpb24uZ3Vlc3RUb0hvc3QoZzMpID09PSBoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGdQYXNzU3R5bGUgPSBwYXNzU3R5bGVPZihnMyk7XG4gICAgaWYgKGdQYXNzU3R5bGUgPT09IFwicHJvbWlzZVwiICYmIGlzVm93KGgpKSB7XG4gICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYGd1ZXN0IHByb21pc2VzIG5vdCB5ZXQgcGFzc2FibGVgO1xuICAgIH1cbiAgICBjb25zdCBoUGFzc1N0eWxlID0gcGFzc1N0eWxlT2YoaCk7XG4gICAgZ1Bhc3NTdHlsZSA9PT0gaFBhc3NTdHlsZSB8fCB0aHJvd1JlZGFjdGVkYHVuZXF1YWwgcGFzc1N0eWxlcyAke3F1b3RlKGdQYXNzU3R5bGUpfSB2cyAke3F1b3RlKGhQYXNzU3R5bGUpfWA7XG4gICAgc3dpdGNoIChnUGFzc1N0eWxlKSB7XG4gICAgICBjYXNlIFwiY29weUFycmF5XCI6IHtcbiAgICAgICAgZXF1YXRlKGczLmxlbmd0aCwgaC5sZW5ndGgsIFwibGVuZ3RoXCIpO1xuICAgICAgICBnMy5mb3JFYWNoKChnRWwsIGkzKSA9PiBlcXVhdGUoZ0VsLCBoW2kzXSwgaTMpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY2FzZSBcImNvcHlSZWNvcmRcIjoge1xuICAgICAgICBjb25zdCBnTmFtZXMgPSByZWNvcmROYW1lcyhnMyk7XG4gICAgICAgIGNvbnN0IGhOYW1lcyA9IHJlY29yZE5hbWVzKGgpO1xuICAgICAgICBlcXVhdGUoZ05hbWVzLCBoTmFtZXMsIFwicHJvcGVydHlOYW1lc1wiKTtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIGdOYW1lcykge1xuICAgICAgICAgIGVxdWF0ZShnM1tuYW1lXSwgaFtuYW1lXSwgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY2FzZSBcInRhZ2dlZFwiOiB7XG4gICAgICAgIGVxdWF0ZShnZXRUYWcoZzMpLCBnZXRUYWcoaCksIFwidGFnXCIpO1xuICAgICAgICBlcXVhdGUoZzMucGF5bG9hZCwgaC5wYXlsb2FkLCBcInBheWxvYWRcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJlcnJvclwiOiB7XG4gICAgICAgIGVxdWF0ZShnMy5uYW1lLCBoLm5hbWUsIFwiZXJyb3IgbmFtZVwiKTtcbiAgICAgICAgbm90ZShnMywgcmVkYWN0ZWRgcmVwbGF5IG9mIGVycm9yICR7aH1gKTtcbiAgICAgICAgbm90ZShoLCByZWRhY3RlZGByZXBsYXllZCBhcyBlcnJvciAke2czfWApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjYXNlIFwicmVtb3RhYmxlXCI6IHtcbiAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBjYW5ub3QgeWV0IHNlbmQgZ3Vlc3QgcmVtb3RhYmxlcyB0byBob3N0ICR7ZzN9IHZzICR7aH1gO1xuICAgICAgfVxuICAgICAgY2FzZSBcInByb21pc2VcIjoge1xuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYGNhbm5vdCB5ZXQgc2VuZCBndWVzdCBwcm9taXNlcyB0byBob3N0ICR7ZzN9IHZzICR7aH1gO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYHVuZXhwZWN0ZWQgcGFzc1N0eWxlICR7cXVvdGUoZ1Bhc3NTdHlsZSl9YDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBoYXJkZW4oZXF1YXRlKTtcbn07XG5oYXJkZW4obWFrZUVxdWF0ZSk7XG5cbi8vXG52YXIgeyBmcm9tRW50cmllczogZnJvbUVudHJpZXMxMywgZGVmaW5lUHJvcGVydGllczogZGVmaW5lUHJvcGVydGllczUsIGFzc2lnbjogYXNzaWduMyB9ID0gT2JqZWN0O1xudmFyIG1ha2VSZXBsYXlNZW1icmFuZSA9IChhcmcpID0+IHtcbiAgY29uc3Qgbm9EdW5kZXJBcmcgPSAoXG4gICAgLyogICAgICAgICAgICAgICAgICAgICAqL1xuICAgIE9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhhcmcpLmZpbHRlcigoW2tdKSA9PiAhay5zdGFydHNXaXRoKFwiX19cIikpKVxuICApO1xuICByZXR1cm4gbWFrZVJlcGxheU1lbWJyYW5lRm9yVGVzdGluZyhub0R1bmRlckFyZyk7XG59O1xudmFyIG1ha2VSZXBsYXlNZW1icmFuZUZvclRlc3RpbmcgPSAoe1xuICBsb2csXG4gIGJpamVjdGlvbixcbiAgdm93VG9vbHMsXG4gIHdhdGNoV2FrZSxcbiAgcGFuaWMsXG4gIF9fZXZlbnR1YWxTZW5kRm9yVGVzdGluZ1xufSkgPT4ge1xuICBjb25zdCB7IHdoZW4sIG1ha2VWb3dLaXQgfSA9IHZvd1Rvb2xzO1xuICBjb25zdCBlcXVhdGUgPSBtYWtlRXF1YXRlKGJpamVjdGlvbik7XG4gIGNvbnN0IGd1ZXN0UHJvbWlzZU1hcCA9IC8qICAgICAgICAgICAqLyBuZXcgV2Vha01hcCgpO1xuICBsZXQgc3RvcHBlZCA9IGZhbHNlO1xuICBjb25zdCBQYW5pYyA9ICh0ZW1wbGF0ZSwgLi4uYXJncykgPT4gcGFuaWMobWFrZUVycm9yKHJlZGFjdGVkKHRlbXBsYXRlLCAuLi5hcmdzKSkpO1xuICBjb25zdCBzdGFydEdlbmVyYXRpb24gPSAoZ2VuZXJhdGlvbikgPT4ge1xuICAgIE51bWJlci5pc1NhZmVJbnRlZ2VyKGdlbmVyYXRpb24pIHx8IHRocm93UmVkYWN0ZWRgZ2VuZXJhdGlvbiBleHBlY3RlZCBpbnRlZ2VyOyBnb3QgJHtnZW5lcmF0aW9ufWA7XG4gICAgZ2VuZXJhdGlvbiA+PSAwIHx8IHRocm93UmVkYWN0ZWRgZ2VuZXJhdGlvbiBleHBlY3RlZCBub24tbmVnYXRpdmU7IGdvdCAke2dlbmVyYXRpb259YDtcbiAgfTtcbiAgY29uc3QgZG9GdWxmaWxsID0gKGhvc3RWb3csIGhvc3RGdWxmaWxsbWVudCkgPT4ge1xuICAgIGNvbnN0IGd1ZXN0UHJvbWlzZSA9IGhvc3RUb0d1ZXN0KGhvc3RWb3cpO1xuICAgIGNvbnN0IHN0YXR1cyA9IGd1ZXN0UHJvbWlzZU1hcC5nZXQoZ3Vlc3RQcm9taXNlKTtcbiAgICBpZiAoIXN0YXR1cyB8fCBzdGF0dXMgPT09IFwic2V0dGxlZFwiKSB7XG4gICAgICB0aHJvd1JlZGFjdGVkYGRvRnVsZmlsbCBzaG91bGQgb25seSBiZSBjYWxsZWQgb24gYSByZWdpc3RlcmVkIHVucmVzb2x2ZWQgcHJvbWlzZWA7XG4gICAgfVxuICAgIGNvbnN0IGd1ZXN0RnVsZmlsbG1lbnQgPSBob3N0VG9HdWVzdChob3N0RnVsZmlsbG1lbnQpO1xuICAgIHN0YXR1cy5yZXNvbHZlKGd1ZXN0RnVsZmlsbG1lbnQpO1xuICAgIGd1ZXN0UHJvbWlzZU1hcC5zZXQoZ3Vlc3RQcm9taXNlLCBcInNldHRsZWRcIik7XG4gIH07XG4gIGNvbnN0IGRvUmVqZWN0ID0gKGhvc3RWb3csIGhvc3RSZWFzb24pID0+IHtcbiAgICBjb25zdCBndWVzdFByb21pc2UgPSBob3N0VG9HdWVzdChob3N0Vm93KTtcbiAgICBjb25zdCBzdGF0dXMgPSBndWVzdFByb21pc2VNYXAuZ2V0KGd1ZXN0UHJvbWlzZSk7XG4gICAgaWYgKCFzdGF0dXMgfHwgc3RhdHVzID09PSBcInNldHRsZWRcIikge1xuICAgICAgdGhyb3dSZWRhY3RlZGBkb1JlamVjdCBzaG91bGQgb25seSBiZSBjYWxsZWQgb24gYSByZWdpc3RlcmVkIHVucmVzb2x2ZWQgcHJvbWlzZWA7XG4gICAgfVxuICAgIGNvbnN0IGd1ZXN0UmVhc29uID0gaG9zdFRvR3Vlc3QoaG9zdFJlYXNvbik7XG4gICAgc3RhdHVzLnJlamVjdChndWVzdFJlYXNvbik7XG4gICAgZ3Vlc3RQcm9taXNlTWFwLnNldChndWVzdFByb21pc2UsIFwic2V0dGxlZFwiKTtcbiAgfTtcbiAgY29uc3QgZG9SZXR1cm4gPSAoY2FsbEluZGV4LCBob3N0UmVzdWx0KSA9PiB7XG4gICAgdW5uZXN0SW50ZXJwcmV0ZXIoY2FsbEluZGV4KTtcbiAgICBjb25zdCBndWVzdFJlc3VsdCA9IGhvc3RUb0d1ZXN0KGhvc3RSZXN1bHQpO1xuICAgIHJldHVybiBoYXJkZW4oe1xuICAgICAga2luZDogXCJyZXR1cm5cIixcbiAgICAgIHJlc3VsdDogZ3Vlc3RSZXN1bHRcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZG9UaHJvdyA9IChjYWxsSW5kZXgsIGhvc3RQcm9ibGVtKSA9PiB7XG4gICAgdW5uZXN0SW50ZXJwcmV0ZXIoY2FsbEluZGV4KTtcbiAgICBjb25zdCBndWVzdFByb2JsZW0gPSBob3N0VG9HdWVzdChob3N0UHJvYmxlbSk7XG4gICAgcmV0dXJuIGhhcmRlbih7XG4gICAgICBraW5kOiBcInRocm93XCIsXG4gICAgICBwcm9ibGVtOiBndWVzdFByb2JsZW1cbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgcGVyZm9ybUNhbGwgPSAoaG9zdFRhcmdldCwgb3B0VmVyYiwgaG9zdEFyZ3MsIGNhbGxJbmRleCkgPT4ge1xuICAgIGxldCBob3N0UmVzdWx0O1xuICAgIHRyeSB7XG4gICAgICBob3N0UmVzdWx0ID0gb3B0VmVyYiA/IGhvc3RUYXJnZXRbb3B0VmVyYl0oLi4uaG9zdEFyZ3MpIDogaG9zdFRhcmdldCguLi5ob3N0QXJncyk7XG4gICAgICBob3N0VG9HdWVzdChob3N0UmVzdWx0LCBgY29udmVydGluZyAke29wdFZlcmIgfHwgXCJob3N0XCJ9IHJlc3VsdGApO1xuICAgIH0gY2F0Y2ggKGhvc3RQcm9ibGVtKSB7XG4gICAgICByZXR1cm4gbG9nRG8obmVzdERpc3BhdGNoLCBoYXJkZW4oW1wiZG9UaHJvd1wiLCBjYWxsSW5kZXgsIGhvc3RQcm9ibGVtXSkpO1xuICAgIH1cbiAgICByZXR1cm4gbG9nRG8obmVzdERpc3BhdGNoLCBoYXJkZW4oW1wiZG9SZXR1cm5cIiwgY2FsbEluZGV4LCBob3N0UmVzdWx0XSkpO1xuICB9O1xuICBjb25zdCBndWVzdENhbGxzSG9zdCA9IChndWVzdFRhcmdldCwgb3B0VmVyYiwgZ3Vlc3RBcmdzLCBjYWxsSW5kZXgpID0+IHtcbiAgICBpZiAoc3RvcHBlZCB8fCAhYmlqZWN0aW9uLmhhc0d1ZXN0KGd1ZXN0VGFyZ2V0KSkge1xuICAgICAgY29uc3QgZXh0cmFEaWFnbm9zdGljID0gY2FsbFN0YWNrLmxlbmd0aCA9PT0gMCA/IFwiXCIgOiAoXG4gICAgICAgIC8vXG4gICAgICAgIGAgd2l0aCBub24tZW1wdHkgY2FsbHN0YWNrICR7cXVvdGUoY2FsbFN0YWNrKX07YFxuICAgICAgKTtcbiAgICAgIHRocm93UmVkYWN0ZWRgQ2FsbGVkIGZyb20gYSBwcmV2aW91cyBydW46ICR7Z3Vlc3RUYXJnZXR9JHtiYXJlT3JRdW90ZShleHRyYURpYWdub3N0aWMpfWA7XG4gICAgfVxuICAgIGxldCBvdXRjb21lO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBndWVzdEVudHJ5ID0gaGFyZGVuKFtcbiAgICAgICAgXCJjaGVja0NhbGxcIixcbiAgICAgICAgZ3Vlc3RUYXJnZXQsXG4gICAgICAgIG9wdFZlcmIsXG4gICAgICAgIGd1ZXN0QXJncyxcbiAgICAgICAgY2FsbEluZGV4XG4gICAgICBdKTtcbiAgICAgIGlmIChsb2cuaXNSZXBsYXlpbmcoKSkge1xuICAgICAgICBjb25zdCBlbnRyeSA9IGxvZy5uZXh0RW50cnkoKTtcbiAgICAgICAgZXF1YXRlKFxuICAgICAgICAgIGd1ZXN0RW50cnksXG4gICAgICAgICAgZW50cnksXG4gICAgICAgICAgYHJlcGxheSAke2NhbGxJbmRleH06XG4gICAgICR7cXVvdGUoZ3Vlc3RFbnRyeSl9XG4gIHZzICR7cXVvdGUoZW50cnkpfVxuICAgIGBcbiAgICAgICAgKTtcbiAgICAgICAgb3V0Y29tZSA9IC8qICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgbmVzdEludGVycHJldGVyKGNhbGxJbmRleCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBlbnRyeSA9IGd1ZXN0VG9Ib3N0KGd1ZXN0RW50cnkpO1xuICAgICAgICBsb2cucHVzaEVudHJ5KGVudHJ5KTtcbiAgICAgICAgY29uc3QgW18sIC4uLmFyZ3NdID0gZW50cnk7XG4gICAgICAgIG5lc3RJbnRlcnByZXRlcihjYWxsSW5kZXgpO1xuICAgICAgICBvdXRjb21lID0gcGVyZm9ybUNhbGwoLi4uYXJncyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZmF0YWxFcnJvcikge1xuICAgICAgdGhyb3cgcGFuaWMoZmF0YWxFcnJvcik7XG4gICAgfVxuICAgIHN3aXRjaCAob3V0Y29tZS5raW5kKSB7XG4gICAgICBjYXNlIFwicmV0dXJuXCI6IHtcbiAgICAgICAgcmV0dXJuIG91dGNvbWUucmVzdWx0O1xuICAgICAgfVxuICAgICAgY2FzZSBcInRocm93XCI6IHtcbiAgICAgICAgdGhyb3cgb3V0Y29tZS5wcm9ibGVtO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aHJvdyBQYW5pY2B1bmV4cGVjdGVkIG91dGNvbWUga2luZCAke3F1b3RlKG91dGNvbWUua2luZCl9YDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IHBlcmZvcm1TZW5kT25seSA9IChob3N0VGFyZ2V0LCBvcHRWZXJiLCBob3N0QXJncykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBvcHRWZXJiID09PSB2b2lkIDAgPyBoZWFwVm93RS5zZW5kT25seShob3N0VGFyZ2V0KSguLi5ob3N0QXJncykgOiBoZWFwVm93RS5zZW5kT25seShob3N0VGFyZ2V0KVtvcHRWZXJiXSguLi5ob3N0QXJncyk7XG4gICAgfSBjYXRjaCAoaG9zdFByb2JsZW0pIHtcbiAgICAgIHRocm93IFBhbmljYGludGVybmFsOiBldmVudHVhbCBzZW5kT25seSBzeW5jaHJvbm91c2x5IGZhaWxlZCAke2hvc3RQcm9ibGVtfWA7XG4gICAgfVxuICB9O1xuICBjb25zdCBwZXJmb3JtU2VuZCA9IChob3N0VGFyZ2V0LCBvcHRWZXJiLCBob3N0QXJncywgY2FsbEluZGV4LCBob3N0UmVzdWx0S2l0LCBndWVzdFJldHVybmVkUCkgPT4ge1xuICAgIGNvbnN0IHsgdm93LCByZXNvbHZlciB9ID0gaG9zdFJlc3VsdEtpdDtcbiAgICB0cnkge1xuICAgICAgY29uc3QgaG9zdFByb21pc2UgPSBvcHRWZXJiID09PSB2b2lkIDAgPyBoZWFwVm93RShob3N0VGFyZ2V0KSguLi5ob3N0QXJncykgOiBoZWFwVm93RShob3N0VGFyZ2V0KVtvcHRWZXJiXSguLi5ob3N0QXJncyk7XG4gICAgICByZXNvbHZlci5yZXNvbHZlKGhvc3RQcm9taXNlKTtcbiAgICB9IGNhdGNoIChob3N0UHJvYmxlbSkge1xuICAgICAgdGhyb3cgUGFuaWNgaW50ZXJuYWw6IGV2ZW50dWFsIHNlbmQgc3luY2hyb25vdXNseSBmYWlsZWQgJHtob3N0UHJvYmxlbX1gO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3QgZW50cnkgPSBoYXJkZW4oW1wiZG9SZXR1cm5cIiwgY2FsbEluZGV4LCB2b3ddKTtcbiAgICAgIGxvZy5wdXNoRW50cnkoZW50cnkpO1xuICAgICAgY29uc3QgZ3Vlc3RQcm9taXNlID0gbWFrZUd1ZXN0Rm9ySG9zdFZvdyh2b3csIGd1ZXN0UmV0dXJuZWRQKTtcbiAgICAgIGRvUmV0dXJuKGNhbGxJbmRleCwgdm93KTtcbiAgICAgIHJldHVybiBoYXJkZW4oe1xuICAgICAgICBraW5kOiBcInJldHVyblwiLFxuICAgICAgICByZXN1bHQ6IGd1ZXN0UHJvbWlzZVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAocHJvYmxlbSkge1xuICAgICAgdGhyb3cgcGFuaWMocHJvYmxlbSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBndWVzdEhhbmRsZXIgPSBoYXJkZW4oe1xuICAgIGFwcGx5TWV0aG9kU2VuZE9ubHkoZ3Vlc3RUYXJnZXQsIG9wdFZlcmIsIGd1ZXN0QXJncykge1xuICAgICAgX19ldmVudHVhbFNlbmRGb3JUZXN0aW5nIHx8IFBhbmljYGd1ZXN0IGV2ZW50dWFsIGFwcGx5TWV0aG9kU2VuZE9ubHkgbm90IHlldCBzdXBwb3J0ZWQ6ICR7Z3Vlc3RUYXJnZXR9LiR7YmFyZU9yUXVvdGUob3B0VmVyYil9YDtcbiAgICAgIGNvbnN0IGNhbGxJbmRleCA9IGxvZy5nZXRJbmRleCgpO1xuICAgICAgaWYgKHN0b3BwZWQgfHwgIWJpamVjdGlvbi5oYXNHdWVzdChndWVzdFRhcmdldCkpIHtcbiAgICAgICAgdGhyb3dSZWRhY3RlZGBTZW50IGZyb20gYSBwcmV2aW91cyBydW46ICR7Z3Vlc3RUYXJnZXR9YDtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGd1ZXN0RW50cnkgPSBoYXJkZW4oW1xuICAgICAgICAgIFwiY2hlY2tTZW5kT25seVwiLFxuICAgICAgICAgIGd1ZXN0VGFyZ2V0LFxuICAgICAgICAgIG9wdFZlcmIsXG4gICAgICAgICAgZ3Vlc3RBcmdzLFxuICAgICAgICAgIGNhbGxJbmRleFxuICAgICAgICBdKTtcbiAgICAgICAgaWYgKGxvZy5pc1JlcGxheWluZygpKSB7XG4gICAgICAgICAgY29uc3QgZW50cnkgPSBsb2cubmV4dEVudHJ5KCk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGVxdWF0ZShndWVzdEVudHJ5LCBlbnRyeSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXF1YXRlRXJyKSB7XG4gICAgICAgICAgICB0aHJvd0xhYmVsZWQoXG4gICAgICAgICAgICAgIGVxdWF0ZUVycixcbiAgICAgICAgICAgICAgYHJlcGxheSAke2NhbGxJbmRleH06XG4gICAgICR7cXVvdGUoZ3Vlc3RFbnRyeSl9XG4gIHZzICR7cXVvdGUoZW50cnkpfVxuICAgIGBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGVudHJ5ID0gZ3Vlc3RUb0hvc3QoZ3Vlc3RFbnRyeSk7XG4gICAgICAgICAgbG9nLnB1c2hFbnRyeShlbnRyeSk7XG4gICAgICAgICAgY29uc3QgW19vcCwgaG9zdFRhcmdldCwgX29wdFZlcmIsIGhvc3RBcmdzLCBfY2FsbEluZGV4XSA9IGVudHJ5O1xuICAgICAgICAgIHBlcmZvcm1TZW5kT25seShob3N0VGFyZ2V0LCBvcHRWZXJiLCBob3N0QXJncyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGZhdGFsRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgcGFuaWMoZmF0YWxFcnJvcik7XG4gICAgICB9XG4gICAgfSxcbiAgICBhcHBseU1ldGhvZChndWVzdFRhcmdldCwgb3B0VmVyYiwgZ3Vlc3RBcmdzLCBndWVzdFJldHVybmVkUCkge1xuICAgICAgX19ldmVudHVhbFNlbmRGb3JUZXN0aW5nIHx8IFBhbmljYGd1ZXN0IGV2ZW50dWFsIGFwcGx5TWV0aG9kIG5vdCB5ZXQgc3VwcG9ydGVkOiAke2d1ZXN0VGFyZ2V0fS4ke2JhcmVPclF1b3RlKG9wdFZlcmIpfSAtPiAke2JhcmVPclF1b3RlKGd1ZXN0UmV0dXJuZWRQKX1gO1xuICAgICAgY29uc3QgY2FsbEluZGV4ID0gbG9nLmdldEluZGV4KCk7XG4gICAgICBpZiAoc3RvcHBlZCB8fCAhYmlqZWN0aW9uLmhhc0d1ZXN0KGd1ZXN0VGFyZ2V0KSkge1xuICAgICAgICB0aHJvd1JlZGFjdGVkYFNlbnQgZnJvbSBhIHByZXZpb3VzIHJ1bjogJHtndWVzdFRhcmdldH1gO1xuICAgICAgfVxuICAgICAgY29uc3QgaG9zdFJlc3VsdEtpdCA9IG1ha2VWb3dLaXQoKTtcbiAgICAgIGNvbnN0IGczID0gYmlqZWN0aW9uLnVud3JhcEluaXQoZ3Vlc3RSZXR1cm5lZFAsIGhvc3RSZXN1bHRLaXQudm93KTtcbiAgICAgIGczID09PSBndWVzdFJldHVybmVkUCB8fCB0aHJvd1JlZGFjdGVkYGludGVybmFsOiBndWVzdFJldHVybmVkUCBzaG91bGQgbm90IHVud3JhcDogJHtnM30gdnMgJHtndWVzdFJldHVybmVkUH1gO1xuICAgICAgbGV0IG91dGNvbWU7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBndWVzdEVudHJ5ID0gaGFyZGVuKFtcbiAgICAgICAgICBcImNoZWNrU2VuZFwiLFxuICAgICAgICAgIGd1ZXN0VGFyZ2V0LFxuICAgICAgICAgIG9wdFZlcmIsXG4gICAgICAgICAgZ3Vlc3RBcmdzLFxuICAgICAgICAgIGNhbGxJbmRleFxuICAgICAgICBdKTtcbiAgICAgICAgaWYgKGxvZy5pc1JlcGxheWluZygpKSB7XG4gICAgICAgICAgY29uc3QgZW50cnkgPSBsb2cubmV4dEVudHJ5KCk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGVxdWF0ZShndWVzdEVudHJ5LCBlbnRyeSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXF1YXRlRXJyKSB7XG4gICAgICAgICAgICB0aHJvd0xhYmVsZWQoXG4gICAgICAgICAgICAgIGVxdWF0ZUVycixcbiAgICAgICAgICAgICAgYHJlcGxheSAke2NhbGxJbmRleH06XG4gICAgICR7cXVvdGUoZ3Vlc3RFbnRyeSl9XG4gIHZzICR7cXVvdGUoZW50cnkpfVxuICAgIGBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dGNvbWUgPSAvKiAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgbmVzdEludGVycHJldGVyKGNhbGxJbmRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgZW50cnkgPSBndWVzdFRvSG9zdChndWVzdEVudHJ5KTtcbiAgICAgICAgICBsb2cucHVzaEVudHJ5KGVudHJ5KTtcbiAgICAgICAgICBjb25zdCBbX29wLCBob3N0VGFyZ2V0LCBfb3B0VmVyYiwgaG9zdEFyZ3MsIF9jYWxsSW5kZXhdID0gZW50cnk7XG4gICAgICAgICAgbmVzdEludGVycHJldGVyKGNhbGxJbmRleCk7XG4gICAgICAgICAgb3V0Y29tZSA9IHBlcmZvcm1TZW5kKFxuICAgICAgICAgICAgaG9zdFRhcmdldCxcbiAgICAgICAgICAgIG9wdFZlcmIsXG4gICAgICAgICAgICBob3N0QXJncyxcbiAgICAgICAgICAgIGNhbGxJbmRleCxcbiAgICAgICAgICAgIGhvc3RSZXN1bHRLaXQsXG4gICAgICAgICAgICBndWVzdFJldHVybmVkUFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGZhdGFsRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgcGFuaWMoZmF0YWxFcnJvcik7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKG91dGNvbWUua2luZCkge1xuICAgICAgICBjYXNlIFwicmV0dXJuXCI6IHtcbiAgICAgICAgICByZXR1cm4gb3V0Y29tZS5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInRocm93XCI6IHtcbiAgICAgICAgICB0aHJvdyBvdXRjb21lLnByb2JsZW07XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIHRocm93IFBhbmljYHVuZXhwZWN0ZWQgb3V0Y29tZSBraW5kICR7cXVvdGUob3V0Y29tZS5raW5kKX1gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBhcHBseUZ1bmN0aW9uU2VuZE9ubHkoZ3Vlc3RUYXJnZXQsIGd1ZXN0QXJncykge1xuICAgICAgX19ldmVudHVhbFNlbmRGb3JUZXN0aW5nIHx8IFBhbmljYGd1ZXN0IGV2ZW50dWFsIGFwcGx5RnVuY3Rpb25TZW5kT25seSBub3QgeWV0IHN1cHBvcnRlZDogJHtndWVzdFRhcmdldH1gO1xuICAgICAgcmV0dXJuIGd1ZXN0SGFuZGxlci5hcHBseU1ldGhvZFNlbmRPbmx5KFxuICAgICAgICBndWVzdFRhcmdldCxcbiAgICAgICAgdm9pZCAwLFxuICAgICAgICBndWVzdEFyZ3NcbiAgICAgICk7XG4gICAgfSxcbiAgICBhcHBseUZ1bmN0aW9uKGd1ZXN0VGFyZ2V0LCBndWVzdEFyZ3MsIGd1ZXN0UmV0dXJuZWRQKSB7XG4gICAgICBfX2V2ZW50dWFsU2VuZEZvclRlc3RpbmcgfHwgUGFuaWNgZ3Vlc3QgZXZlbnR1YWwgYXBwbHlGdW5jdGlvbiBub3QgeWV0IHN1cHBvcnRlZDogJHtndWVzdFRhcmdldH0gLT4gJHtiYXJlT3JRdW90ZShndWVzdFJldHVybmVkUCl9YDtcbiAgICAgIHJldHVybiBndWVzdEhhbmRsZXIuYXBwbHlNZXRob2QoXG4gICAgICAgIGd1ZXN0VGFyZ2V0LFxuICAgICAgICB2b2lkIDAsXG4gICAgICAgIGd1ZXN0QXJncyxcbiAgICAgICAgZ3Vlc3RSZXR1cm5lZFBcbiAgICAgICk7XG4gICAgfSxcbiAgICBnZXRTZW5kT25seShndWVzdFRhcmdldCwgcHJvcCkge1xuICAgICAgdGhyb3cgUGFuaWNgZ3Vlc3QgZXZlbnR1YWwgZ2V0U2VuZE9ubHkgbm90IHlldCBzdXBwb3J0ZWQ6ICR7Z3Vlc3RUYXJnZXR9LiR7YmFyZU9yUXVvdGUocHJvcCl9YDtcbiAgICB9LFxuICAgIGdldChndWVzdFRhcmdldCwgcHJvcCwgZ3Vlc3RSZXR1cm5lZFApIHtcbiAgICAgIHRocm93IFBhbmljYGd1ZXN0IGV2ZW50dWFsIGdldCBub3QgeWV0IHN1cHBvcnRlZDogJHtndWVzdFRhcmdldH0uJHtiYXJlT3JRdW90ZShwcm9wKX0gLT4gJHtiYXJlT3JRdW90ZShndWVzdFJldHVybmVkUCl9YDtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBtYWtlR3Vlc3RQcmVzZW5jZSA9IChpZmFjZSwgbWV0aG9kRW50cmllcykgPT4ge1xuICAgIGxldCBndWVzdFByZXNlbmNlO1xuICAgIHZvaWQgbmV3IEhhbmRsZWRQcm9taXNlKChfcmVzLCBfcmVqLCByZXNvbHZlV2l0aFByZXNlbmNlKSA9PiB7XG4gICAgICBndWVzdFByZXNlbmNlID0gcmVzb2x2ZVdpdGhQcmVzZW5jZShndWVzdEhhbmRsZXIpO1xuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgZ3Vlc3RQcmVzZW5jZSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBwcmVzZW5jZSBleHBlY3RlZCB0byBiZSBvYmplY3QgJHtndWVzdFByZXNlbmNlfWA7XG4gICAgfVxuICAgIGFzc2lnbjMoZ3Vlc3RQcmVzZW5jZSwgZnJvbUVudHJpZXMxMyhtZXRob2RFbnRyaWVzKSk7XG4gICAgY29uc3QgcmVzdWx0ID0gUmVtb3RhYmxlKGlmYWNlLCB2b2lkIDAsIGd1ZXN0UHJlc2VuY2UpO1xuICAgIHJlc3VsdCA9PT0gZ3Vlc3RQcmVzZW5jZSB8fCB0aHJvd1JlZGFjdGVkYFJlbW90YWJsZSBleHBlY3RlZCB0byBtYWtlIHByZXNlbmNlIGluIHBsYWNlOiAke2d1ZXN0UHJlc2VuY2V9IHZzICR7cmVzdWx0fWA7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgY29uc3QgbWFrZUd1ZXN0UHJvbWlzZUtpdCA9ICgpID0+IHtcbiAgICBsZXQgcmVzb2x2ZTI7XG4gICAgbGV0IHJlamVjdDtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IEhhbmRsZWRQcm9taXNlKChyZXMsIHJlaiwgX3Jlc1ByZXMpID0+IHtcbiAgICAgIHJlc29sdmUyID0gcmVzO1xuICAgICAgcmVqZWN0ID0gcmVqO1xuICAgIH0sIGd1ZXN0SGFuZGxlcik7XG4gICAgcmV0dXJuIGhhcmRlbih7IHByb21pc2UsIHJlc29sdmU6IHJlc29sdmUyLCByZWplY3QgfSk7XG4gIH07XG4gIGNvbnN0IG1ha2VHdWVzdEZvckhvc3RSZW1vdGFibGUgPSAoaFJlbSkgPT4ge1xuICAgIGxldCBnUmVtO1xuICAgIGNvbnN0IG1ha2VHdWVzdE1ldGhvZCA9IChvcHRWZXJiID0gdm9pZCAwKSA9PiB7XG4gICAgICBjb25zdCBndWVzdE1ldGhvZCA9ICguLi5ndWVzdEFyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgY2FsbEluZGV4ID0gbG9nLmdldEluZGV4KCk7XG4gICAgICAgIHJldHVybiBndWVzdENhbGxzSG9zdChnUmVtLCBvcHRWZXJiLCBndWVzdEFyZ3MsIGNhbGxJbmRleCk7XG4gICAgICB9O1xuICAgICAgaWYgKG9wdFZlcmIpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydGllczUoZ3Vlc3RNZXRob2QsIHtcbiAgICAgICAgICBuYW1lOiB7IHZhbHVlOiBTdHJpbmcoaFJlbVtvcHRWZXJiXS5uYW1lIHx8IG9wdFZlcmIpIH0sXG4gICAgICAgICAgbGVuZ3RoOiB7IHZhbHVlOiBOdW1iZXIoaFJlbVtvcHRWZXJiXS5sZW5ndGggfHwgMCkgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlZmluZVByb3BlcnRpZXM1KGd1ZXN0TWV0aG9kLCB7XG4gICAgICAgICAgbmFtZTogeyB2YWx1ZTogU3RyaW5nKGhSZW0ubmFtZSB8fCBcImFub25cIikgfSxcbiAgICAgICAgICBsZW5ndGg6IHsgdmFsdWU6IE51bWJlcihoUmVtLmxlbmd0aCB8fCAwKSB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGd1ZXN0TWV0aG9kO1xuICAgIH07XG4gICAgY29uc3QgaWZhY2UgPSBTdHJpbmcoZ2V0SW50ZXJmYWNlT2YoaFJlbSkgfHwgXCJyZW1vdGFibGVcIik7XG4gICAgY29uc3QgZ3Vlc3RJZmFjZSA9IGAke2lmYWNlfSBndWVzdCB3cmFwcGVyYDtcbiAgICBpZiAodHlwZW9mIGhSZW0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgZ1JlbSA9IFJlbW90YWJsZShndWVzdElmYWNlLCB2b2lkIDAsIG1ha2VHdWVzdE1ldGhvZCgpKTtcbiAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgaG9zdCBmYXIgZnVuY3Rpb25zIG5vdCB5ZXQgcGFzc2FibGVgO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBtZXRob2ROYW1lcyA9IGdldE1ldGhvZE5hbWVzKGhSZW0pO1xuICAgICAgY29uc3QgZ3Vlc3RNZXRob2RzID0gbWV0aG9kTmFtZXMubWFwKChuYW1lKSA9PiBbXG4gICAgICAgIG5hbWUsXG4gICAgICAgIG1ha2VHdWVzdE1ldGhvZChuYW1lKVxuICAgICAgXSk7XG4gICAgICBnUmVtID0gbWFrZUd1ZXN0UHJlc2VuY2UoZ3Vlc3RJZmFjZSwgZ3Vlc3RNZXRob2RzKTtcbiAgICB9XG4gICAgaFJlbSA9IHZvaWQgMDtcbiAgICByZXR1cm4gZ1JlbTtcbiAgfTtcbiAgaGFyZGVuKG1ha2VHdWVzdEZvckhvc3RSZW1vdGFibGUpO1xuICBjb25zdCBtYWtlR3Vlc3RGb3JIb3N0Vm93ID0gKGhWb3csIHByb21pc2VLZXkgPSB2b2lkIDApID0+IHtcbiAgICBpc1ZvdyhoVm93KSB8fCB0aHJvd1JlZGFjdGVkYHZvdyBleHBlY3RlZCAke2hWb3d9YDtcbiAgICBjb25zdCB7IHByb21pc2UsIHJlc29sdmU6IHJlc29sdmUyLCByZWplY3QgfSA9IG1ha2VHdWVzdFByb21pc2VLaXQoKTtcbiAgICBwcm9taXNlS2V5ID8/PSBwcm9taXNlO1xuICAgIGd1ZXN0UHJvbWlzZU1hcC5zZXQocHJvbWlzZUtleSwgaGFyZGVuKHsgcmVzb2x2ZTogcmVzb2x2ZTIsIHJlamVjdCB9KSk7XG4gICAgd2F0Y2hXYWtlKGhWb3cpO1xuICAgIHZvaWQgd2hlbihcbiAgICAgIGhWb3csXG4gICAgICBhc3luYyAoaG9zdEZ1bGZpbGxtZW50KSA9PiB7XG4gICAgICAgIGF3YWl0IGxvZy5wcm9taXNlUmVwbGF5RG9uZSgpO1xuICAgICAgICBpZiAoIXN0b3BwZWQgJiYgZ3Vlc3RQcm9taXNlTWFwLmdldChwcm9taXNlS2V5KSAhPT0gXCJzZXR0bGVkXCIpIHtcbiAgICAgICAgICBjb25zdCBlbnRyeSA9IGhhcmRlbihbXCJkb0Z1bGZpbGxcIiwgaFZvdywgaG9zdEZ1bGZpbGxtZW50XSk7XG4gICAgICAgICAgbG9nLnB1c2hFbnRyeShlbnRyeSk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGludGVycHJldE9uZSh0b3BEaXNwYXRjaCwgZW50cnkpO1xuICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGFzeW5jIChob3N0UmVhc29uKSA9PiB7XG4gICAgICAgIGF3YWl0IGxvZy5wcm9taXNlUmVwbGF5RG9uZSgpO1xuICAgICAgICBpZiAoIXN0b3BwZWQgJiYgZ3Vlc3RQcm9taXNlTWFwLmdldChwcm9taXNlS2V5KSAhPT0gXCJzZXR0bGVkXCIpIHtcbiAgICAgICAgICBjb25zdCBlbnRyeSA9IGhhcmRlbihbXCJkb1JlamVjdFwiLCBoVm93LCBob3N0UmVhc29uXSk7XG4gICAgICAgICAgbG9nLnB1c2hFbnRyeShlbnRyeSk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGludGVycHJldE9uZSh0b3BEaXNwYXRjaCwgZW50cnkpO1xuICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG4gIGhhcmRlbihtYWtlR3Vlc3RGb3JIb3N0Vm93KTtcbiAgY29uc3QgeyBndWVzdFRvSG9zdCwgaG9zdFRvR3Vlc3QgfSA9IG1ha2VDb252ZXJ0S2l0KFxuICAgIGJpamVjdGlvbixcbiAgICBtYWtlR3Vlc3RGb3JIb3N0UmVtb3RhYmxlLFxuICAgIG1ha2VHdWVzdEZvckhvc3RWb3dcbiAgKTtcbiAgY29uc3QgdG9wRGlzcGF0Y2ggPSBoYXJkZW4oe1xuICAgIHN0YXJ0R2VuZXJhdGlvbixcbiAgICBkb0Z1bGZpbGwsXG4gICAgZG9SZWplY3RcbiAgICAvL1xuICB9KTtcbiAgY29uc3QgbmVzdERpc3BhdGNoID0gaGFyZGVuKHtcbiAgICBkb1JldHVybixcbiAgICBkb1Rocm93XG4gICAgLy9cbiAgfSk7XG4gIGNvbnN0IGludGVycHJldE9uZSA9IChkaXNwYXRjaCwgW29wLCAuLi5hcmdzXSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBvcCBpbiBkaXNwYXRjaCB8fCAvL1xuICAgICAgdGhyb3dSZWRhY3RlZGB1bmV4cGVjdGVkIGRpc3BhdGNoIG9wOiAke3F1b3RlKG9wKX1gO1xuICAgICAgcmV0dXJuIGRpc3BhdGNoW29wXSguLi5hcmdzKTtcbiAgICB9IGNhdGNoIChwcm9ibGVtKSB7XG4gICAgICB0aHJvdyBwYW5pYyhwcm9ibGVtKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGxvZ0RvID0gKGRpc3BhdGNoLCBlbnRyeSkgPT4ge1xuICAgIGxvZy5wdXNoRW50cnkoZW50cnkpO1xuICAgIHJldHVybiBpbnRlcnByZXRPbmUoZGlzcGF0Y2gsIGVudHJ5KTtcbiAgfTtcbiAgY29uc3QgY2FsbFN0YWNrID0gW107XG4gIGxldCB1bm5lc3RGbGFnID0gZmFsc2U7XG4gIGNvbnN0IG5lc3RJbnRlcnByZXRlciA9IChjYWxsSW5kZXgpID0+IHtcbiAgICBjYWxsU3RhY2sucHVzaChjYWxsSW5kZXgpO1xuICAgIHdoaWxlIChsb2cuaXNSZXBsYXlpbmcoKSAmJiAhc3RvcHBlZCkge1xuICAgICAgY29uc3QgZW50cnkgPSBsb2cubmV4dFVuZmlsdGVyZWRFbnRyeSgpO1xuICAgICAgY29uc3Qgb3B0T3V0Y29tZSA9IGludGVycHJldE9uZShuZXN0RGlzcGF0Y2gsIGVudHJ5KTtcbiAgICAgIGlmICh1bm5lc3RGbGFnKSB7XG4gICAgICAgIG9wdE91dGNvbWUgfHwgLy9cbiAgICAgICAgdGhyb3dSZWRhY3RlZGBvbmx5IHVubmVzdCB3aXRoIGFuIG91dGNvbWU6ICR7cXVvdGUoZW50cnlbMF0pfWA7XG4gICAgICAgIHVubmVzdEZsYWcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIG9wdE91dGNvbWU7XG4gICAgICB9XG4gICAgfVxuICAgIHVubmVzdEZsYWcgPSBmYWxzZTtcbiAgfTtcbiAgY29uc3QgdW5uZXN0SW50ZXJwcmV0ZXIgPSAoY2FsbEluZGV4KSA9PiB7XG4gICAgIXN0b3BwZWQgfHwgdGhyb3dSZWRhY3RlZGBUaGlzIG1lbWJyYW5lIHN0b3BwZWQuIFJlc3RhcnQgd2l0aCBuZXcgbWVtYnJhbmUgJHtyZXBsYXlNZW1icmFuZX1gO1xuICAgIGNhbGxTdGFjay5sZW5ndGggPj0gMSB8fCAvL1xuICAgIHRocm93UmVkYWN0ZWRgVW5tYXRjaGVkIHVubmVzdDogJHtxdW90ZShjYWxsSW5kZXgpfWA7XG4gICAgY29uc3QgaTMgPSBjYWxsU3RhY2sucG9wKCk7XG4gICAgaTMgPT09IGNhbGxJbmRleCB8fCAvL1xuICAgIHRocm93UmVkYWN0ZWRgVW5leHBlY3RlZCB1bm5lc3Q6ICR7cXVvdGUoY2FsbEluZGV4KX0gdnMgJHtxdW90ZShpMyl9YDtcbiAgICB1bm5lc3RGbGFnID0gdHJ1ZTtcbiAgICBpZiAoY2FsbFN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdm9pZCBFLndoZW4odm9pZCAwLCB3YWtlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHdha2UgPSAoKSA9PiB7XG4gICAgd2hpbGUgKGxvZy5pc1JlcGxheWluZygpICYmICFzdG9wcGVkKSB7XG4gICAgICBjYWxsU3RhY2subGVuZ3RoID09PSAwIHx8IHRocm93UmVkYWN0ZWRgd2FrZSBvbmx5IHdpdGggZW1wdHkgY2FsbFN0YWNrOiAke3F1b3RlKGNhbGxTdGFjayl9YDtcbiAgICAgIGNvbnN0IGVudHJ5ID0gbG9nLnBlZWtFbnRyeSgpO1xuICAgICAgY29uc3Qgb3AgPSBlbnRyeVswXTtcbiAgICAgIGlmICghKG9wIGluIHRvcERpc3BhdGNoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2b2lkIGxvZy5uZXh0VW5maWx0ZXJlZEVudHJ5KCk7XG4gICAgICBpbnRlcnByZXRPbmUodG9wRGlzcGF0Y2gsIGVudHJ5KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHN0b3AgPSAoKSA9PiB7XG4gICAgc3RvcHBlZCA9IHRydWU7XG4gIH07XG4gIGNvbnN0IHJlcGxheU1lbWJyYW5lID0gRmFyKFwicmVwbGF5TWVtYnJhbmVcIiwge1xuICAgIGhvc3RUb0d1ZXN0LFxuICAgIGd1ZXN0VG9Ib3N0LFxuICAgIHdha2UsXG4gICAgc3RvcFxuICB9KTtcbiAgcmV0dXJuIHJlcGxheU1lbWJyYW5lO1xufTtcbmhhcmRlbihtYWtlUmVwbGF5TWVtYnJhbmUpO1xuXG4vL1xudmFyIEZsb3dTdGF0ZVNoYXBlID0gTS5vcihcbiAgXCJSdW5uaW5nXCIsXG4gIFwiU2xlZXBpbmdcIixcbiAgXCJSZXBsYXlpbmdcIixcbiAgXCJGYWlsZWRcIixcbiAgXCJEb25lXCJcbik7XG52YXIgUHJvcGVydHlLZXlTaGFwZSA9IE0ub3IoTS5zdHJpbmcoKSwgTS5zeW1ib2woKSk7XG52YXIgTG9nRW50cnlTaGFwZSA9IE0ub3IoXG4gIFtcInN0YXJ0R2VuZXJhdGlvblwiLCBNLm51bWJlcigpXSxcbiAgLy9cbiAgW1wiZG9GdWxmaWxsXCIsIFZvd1NoYXBlLCBNLmFueSgpXSxcbiAgW1wiZG9SZWplY3RcIiwgVm93U2hhcGUsIE0uYW55KCldLFxuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICAvL1xuICBbXCJkb1JldHVyblwiLCBNLm51bWJlcigpLCBNLmFueSgpXSxcbiAgW1wiZG9UaHJvd1wiLCBNLm51bWJlcigpLCBNLmFueSgpXSxcbiAgLy9cbiAgLy9cbiAgLy9cbiAgW1xuICAgIFwiY2hlY2tDYWxsXCIsXG4gICAgTS5yZW1vdGFibGUoXCJob3N0IHRhcmdldFwiKSxcbiAgICBNLm9wdChQcm9wZXJ0eUtleVNoYXBlKSxcbiAgICBNLmFycmF5T2YoTS5hbnkoKSksXG4gICAgTS5udW1iZXIoKVxuICBdLFxuICBbXG4gICAgXCJjaGVja1NlbmRPbmx5XCIsXG4gICAgTS5vcihNLnJlbW90YWJsZShcImhvc3QgdGFyZ2V0XCIpLCBWb3dTaGFwZSksXG4gICAgTS5vcHQoUHJvcGVydHlLZXlTaGFwZSksXG4gICAgTS5hcnJheU9mKE0uYW55KCkpLFxuICAgIE0ubnVtYmVyKClcbiAgXSxcbiAgW1xuICAgIFwiY2hlY2tTZW5kXCIsXG4gICAgTS5vcihNLnJlbW90YWJsZShcImhvc3QgdGFyZ2V0XCIpLCBWb3dTaGFwZSksXG4gICAgTS5vcHQoUHJvcGVydHlLZXlTaGFwZSksXG4gICAgTS5hcnJheU9mKE0uYW55KCkpLFxuICAgIE0ubnVtYmVyKClcbiAgXVxuICAvL1xuICAvL1xuKTtcblxuLy9cbnZhciBtYWtlRXBoZW1lcmEgPSAocmVpbml0KSA9PiB7XG4gIGNvbnN0IG1hcCA9IC8qICAgICAgICAgICAqLyBuZXcgV2Vha01hcCgpO1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICBmb3Ioc2VsZikge1xuICAgICAgaWYgKCFtYXAuaGFzKHNlbGYpKSB7XG4gICAgICAgIG1hcC5zZXQoc2VsZiwgcmVpbml0KHNlbGYpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoXG4gICAgICAgIC8qICAgICAgICAgICAgKi9cbiAgICAgICAgbWFwLmdldChzZWxmKVxuICAgICAgKTtcbiAgICB9LFxuICAgIHJlc2V0Rm9yKHNlbGYpIHtcbiAgICAgIHJldHVybiBtYXAuZGVsZXRlKHNlbGYpO1xuICAgIH1cbiAgfSk7XG59O1xuaGFyZGVuKG1ha2VFcGhlbWVyYSk7XG5cbi8vXG52YXIgTG9nU3RvcmVJID0gTS5pbnRlcmZhY2UoXCJMb2dTdG9yZVwiLCB7XG4gIHJlc2V0OiBNLmNhbGwoKS5yZXR1cm5zKCksXG4gIGRpc3Bvc2U6IE0uY2FsbCgpLnJldHVybnMoKSxcbiAgZ2V0VW5maWx0ZXJlZEluZGV4OiBNLmNhbGwoKS5yZXR1cm5zKE0ubnVtYmVyKCkpLFxuICBnZXRJbmRleDogTS5jYWxsKCkucmV0dXJucyhNLm51bWJlcigpKSxcbiAgZ2V0TGVuZ3RoOiBNLmNhbGwoKS5yZXR1cm5zKE0ubnVtYmVyKCkpLFxuICBpc1JlcGxheWluZzogTS5jYWxsKCkucmV0dXJucyhNLmJvb2xlYW4oKSksXG4gIHBlZWtFbnRyeTogTS5jYWxsKCkucmV0dXJucyhMb2dFbnRyeVNoYXBlKSxcbiAgbmV4dEVudHJ5OiBNLmNhbGwoKS5yZXR1cm5zKExvZ0VudHJ5U2hhcGUpLFxuICBuZXh0VW5maWx0ZXJlZEVudHJ5OiBNLmNhbGwoKS5yZXR1cm5zKExvZ0VudHJ5U2hhcGUpLFxuICBwdXNoRW50cnk6IE0uY2FsbChMb2dFbnRyeVNoYXBlKS5yZXR1cm5zKE0ubnVtYmVyKCkpLFxuICBkdW1wVW5maWx0ZXJlZDogTS5jYWxsKCkucmV0dXJucyhNLmFycmF5T2YoTG9nRW50cnlTaGFwZSkpLFxuICBkdW1wOiBNLmNhbGwoKS5yZXR1cm5zKE0uYXJyYXlPZihMb2dFbnRyeVNoYXBlKSksXG4gIHByb21pc2VSZXBsYXlEb25lOiBNLmNhbGwoKS5yZXR1cm5zKE0ucHJvbWlzZSgpKVxufSk7XG52YXIgbmV4dEdlbmVyYXRpb24gPSAoem9uZSkgPT4ge1xuICBjb25zdCBsb2dTdG9yZU1ldGFkYXRhID0gem9uZS5tYXBTdG9yZShcIkxvZ1N0b3JlTWV0YWRhdGFcIik7XG4gIGNvbnN0IGdlbmVyYXRpb25LZXkgPSBcImdlbmVyYXRpb25cIjtcbiAgaWYgKCFsb2dTdG9yZU1ldGFkYXRhLmhhcyhnZW5lcmF0aW9uS2V5KSkge1xuICAgIGNvbnN0IGZpcnN0R2VuID0gMDtcbiAgICBsb2dTdG9yZU1ldGFkYXRhLmluaXQoZ2VuZXJhdGlvbktleSwgZmlyc3RHZW4pO1xuICAgIHJldHVybiBmaXJzdEdlbjtcbiAgfVxuICBjb25zdCBuZXh0R2VuID0gbG9nU3RvcmVNZXRhZGF0YS5nZXQoZ2VuZXJhdGlvbktleSkgKyAxO1xuICBsb2dTdG9yZU1ldGFkYXRhLnNldChnZW5lcmF0aW9uS2V5LCBuZXh0R2VuKTtcbiAgcmV0dXJuIG5leHRHZW47XG59O1xudmFyIHByZXBhcmVMb2dTdG9yZSA9ICh6b25lKSA9PiB7XG4gIGNvbnN0IGluaXRpYWxQdXNoID0gaGFyZGVuKFtbXCJzdGFydEdlbmVyYXRpb25cIiwgbmV4dEdlbmVyYXRpb24oem9uZSldXSk7XG4gIGNvbnN0IGVudHJ5SXNWaXNpYmxlID0gKGVudHJ5KSA9PiBlbnRyeVswXSAhPT0gXCJzdGFydEdlbmVyYXRpb25cIjtcbiAgY29uc3QgdG1wID0gbWFrZUVwaGVtZXJhKChsb2cpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICBpbmRleDogMCxcbiAgICAgIHVuZmlsdGVyZWRJbmRleDogMCxcbiAgICAgIGluaXRpYWxQdXNoLFxuICAgICAgcmVwbGF5RG9uZUtpdDogbWFrZVByb21pc2VLaXQoKVxuICAgIH07XG4gICAgaWYgKGxvZy5nZXRMZW5ndGgoKSA9PT0gMCkge1xuICAgICAgcmVzdWx0LnJlcGxheURvbmVLaXQucmVzb2x2ZSh2b2lkIDApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9KTtcbiAgcmV0dXJuIHpvbmUuZXhvQ2xhc3MoXG4gICAgXCJMb2dTdG9yZVwiLFxuICAgIExvZ1N0b3JlSSxcbiAgICAoKSA9PiB7XG4gICAgICBjb25zdCBtYXBTdG9yZSA9IHpvbmUuZGV0YWNoZWQoKS5tYXBTdG9yZShcImxvZ01hcFN0b3JlXCIsIHtcbiAgICAgICAga2V5U2hhcGU6IE0ubnVtYmVyKCksXG4gICAgICAgIHZhbHVlU2hhcGU6IExvZ0VudHJ5U2hhcGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWFwU3RvcmVcbiAgICAgIH07XG4gICAgfSxcbiAgICB7XG4gICAgICByZXNldCgpIHtcbiAgICAgICAgY29uc3QgeyBzZWxmIH0gPSB0aGlzO1xuICAgICAgICB0bXAucmVzZXRGb3Ioc2VsZik7XG4gICAgICB9LFxuICAgICAgZGlzcG9zZSgpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0ZSwgc2VsZiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBtYXBTdG9yZSB9ID0gc3RhdGU7XG4gICAgICAgIHRtcC5yZXNldEZvcihzZWxmKTtcbiAgICAgICAgbWFwU3RvcmUuY2xlYXIoKTtcbiAgICAgIH0sXG4gICAgICBnZXRVbmZpbHRlcmVkSW5kZXgoKSB7XG4gICAgICAgIGNvbnN0IHsgc2VsZiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZXBoID0gdG1wLmZvcihzZWxmKTtcbiAgICAgICAgcmV0dXJuIGVwaC51bmZpbHRlcmVkSW5kZXg7XG4gICAgICB9LFxuICAgICAgZ2V0SW5kZXgoKSB7XG4gICAgICAgIGNvbnN0IHsgc2VsZiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZXBoID0gdG1wLmZvcihzZWxmKTtcbiAgICAgICAgcmV0dXJuIGVwaC5pbmRleDtcbiAgICAgIH0sXG4gICAgICBnZXRMZW5ndGgoKSB7XG4gICAgICAgIGNvbnN0IHsgc3RhdGUgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgbWFwU3RvcmUgfSA9IHN0YXRlO1xuICAgICAgICByZXR1cm4gbWFwU3RvcmUuZ2V0U2l6ZSgpO1xuICAgICAgfSxcbiAgICAgIGlzUmVwbGF5aW5nKCkge1xuICAgICAgICBjb25zdCB7IHN0YXRlLCBzZWxmIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IG1hcFN0b3JlIH0gPSBzdGF0ZTtcbiAgICAgICAgY29uc3QgZXBoID0gdG1wLmZvcihzZWxmKTtcbiAgICAgICAgcmV0dXJuIGVwaC51bmZpbHRlcmVkSW5kZXggPCBtYXBTdG9yZS5nZXRTaXplKCk7XG4gICAgICB9LFxuICAgICAgLypcblxuICAgICAgICovXG4gICAgICBwZWVrRW50cnkoKSB7XG4gICAgICAgIGNvbnN0IHsgc3RhdGUsIHNlbGYgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgbWFwU3RvcmUgfSA9IHN0YXRlO1xuICAgICAgICBjb25zdCBlcGggPSB0bXAuZm9yKHNlbGYpO1xuICAgICAgICBzZWxmLmlzUmVwbGF5aW5nKCkgfHwgdGhyb3dSZWRhY3RlZGBObyBsb25nZXIgcmVwbGF5aW5nOiAke3F1b3RlKGVwaC51bmZpbHRlcmVkSW5kZXgpfSB2cyAke3F1b3RlKFxuICAgICAgICAgIG1hcFN0b3JlLmdldFNpemUoKVxuICAgICAgICApfWA7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG1hcFN0b3JlLmdldChlcGgudW5maWx0ZXJlZEluZGV4KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0sXG4gICAgICAvKlxuXG4gICAgICAgKi9cbiAgICAgIG5leHRVbmZpbHRlcmVkRW50cnkoKSB7XG4gICAgICAgIGNvbnN0IHsgc2VsZiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZXBoID0gdG1wLmZvcihzZWxmKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc2VsZi5wZWVrRW50cnkoKTtcbiAgICAgICAgZXBoLnVuZmlsdGVyZWRJbmRleCArPSAxO1xuICAgICAgICBpZiAoZW50cnlJc1Zpc2libGUocmVzdWx0KSkge1xuICAgICAgICAgIGVwaC5pbmRleCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2VsZi5pc1JlcGxheWluZygpKSB7XG4gICAgICAgICAgZXBoLnJlcGxheURvbmVLaXQucmVzb2x2ZSh2b2lkIDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9LFxuICAgICAgLypcblxuICAgICAgICovXG4gICAgICBuZXh0RW50cnkoKSB7XG4gICAgICAgIGNvbnN0IHsgc2VsZiB9ID0gdGhpcztcbiAgICAgICAgbGV0IHJlc3VsdCA9IHNlbGYubmV4dFVuZmlsdGVyZWRFbnRyeSgpO1xuICAgICAgICB3aGlsZSAoIWVudHJ5SXNWaXNpYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICBzZWxmLmlzUmVwbGF5aW5nKCkgfHwgdGhyb3dSZWRhY3RlZGBVbmV4cGVjdGVkIGVudHJ5IGF0IGxvZyB0YWlsOiAke3Jlc3VsdH1gO1xuICAgICAgICAgIHJlc3VsdCA9IHNlbGYubmV4dFVuZmlsdGVyZWRFbnRyeSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9LFxuICAgICAgLypcblxuICAgICAgICovXG4gICAgICBwdXNoRW50cnkobGF0ZXN0RW50cnkpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0ZSwgc2VsZiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBtYXBTdG9yZSB9ID0gc3RhdGU7XG4gICAgICAgIGNvbnN0IGVwaCA9IHRtcC5mb3Ioc2VsZik7XG4gICAgICAgICFzZWxmLmlzUmVwbGF5aW5nKCkgfHwgdGhyb3dSZWRhY3RlZGBzdGlsbCByZXBsYXlpbmc6ICR7cXVvdGUoZXBoLnVuZmlsdGVyZWRJbmRleCl9IHZzICR7cXVvdGUobWFwU3RvcmUuZ2V0U2l6ZSgpKX1gO1xuICAgICAgICBjb25zdCBwdXNoT25lID0gKGVudHJ5KSA9PiB7XG4gICAgICAgICAgZXBoLnVuZmlsdGVyZWRJbmRleCA9PT0gbWFwU3RvcmUuZ2V0U2l6ZSgpIHx8IHRocm93UmVkYWN0ZWRgaW50ZXJuYWw6IHVuZmlsdGVyZWRJbmRleCBjb25mdXNpb24gJHtxdW90ZShlcGgudW5maWx0ZXJlZEluZGV4KX0gdnMgJHtxdW90ZShcbiAgICAgICAgICAgIG1hcFN0b3JlLmdldFNpemUoKVxuICAgICAgICAgICl9YDtcbiAgICAgICAgICBtYXBTdG9yZS5pbml0KGVwaC51bmZpbHRlcmVkSW5kZXgsIGVudHJ5KTtcbiAgICAgICAgICBlcGgudW5maWx0ZXJlZEluZGV4ICs9IDE7XG4gICAgICAgICAgaWYgKGVudHJ5SXNWaXNpYmxlKGVudHJ5KSkge1xuICAgICAgICAgICAgZXBoLmluZGV4ICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVwaC51bmZpbHRlcmVkSW5kZXggPT09IG1hcFN0b3JlLmdldFNpemUoKSB8fCB0aHJvd1JlZGFjdGVkYGludGVybmFsOiB1bmZpbHRlcmVkSW5kZXggY29uZnVzaW9uICR7cXVvdGUoZXBoLnVuZmlsdGVyZWRJbmRleCl9IHZzICR7cXVvdGUoXG4gICAgICAgICAgICBtYXBTdG9yZS5nZXRTaXplKClcbiAgICAgICAgICApfWA7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChlcGguaW5pdGlhbFB1c2gpIHtcbiAgICAgICAgICBjb25zdCBpbml0aWFsRW50cmllcyA9IGVwaC5pbml0aWFsUHVzaDtcbiAgICAgICAgICBlcGguaW5pdGlhbFB1c2ggPSB2b2lkIDA7XG4gICAgICAgICAgZm9yIChjb25zdCBpbml0aWFsRW50cnkgb2YgaW5pdGlhbEVudHJpZXMpIHtcbiAgICAgICAgICAgIHB1c2hPbmUoaW5pdGlhbEVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHVzaE9uZShsYXRlc3RFbnRyeSk7XG4gICAgICAgIHJldHVybiBlcGgudW5maWx0ZXJlZEluZGV4O1xuICAgICAgfSxcbiAgICAgIC8qXG5cbiAgICAgICAqL1xuICAgICAgZHVtcFVuZmlsdGVyZWQoKSB7XG4gICAgICAgIGNvbnN0IHsgc3RhdGUgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgbWFwU3RvcmUgfSA9IHN0YXRlO1xuICAgICAgICBjb25zdCBsZW4gPSBtYXBTdG9yZS5nZXRTaXplKCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpMyA9IDA7IGkzIDwgbGVuOyBpMyArPSAxKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2gobWFwU3RvcmUuZ2V0KGkzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhhcmRlbihyZXN1bHQpO1xuICAgICAgfSxcbiAgICAgIGR1bXAoKSB7XG4gICAgICAgIGNvbnN0IHsgc2VsZiB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGhhcmRlbihzZWxmLmR1bXBVbmZpbHRlcmVkKCkuZmlsdGVyKGVudHJ5SXNWaXNpYmxlKSk7XG4gICAgICB9LFxuICAgICAgcHJvbWlzZVJlcGxheURvbmUoKSB7XG4gICAgICAgIGNvbnN0IHsgc2VsZiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZXBoID0gdG1wLmZvcihzZWxmKTtcbiAgICAgICAgcmV0dXJuIGVwaC5yZXBsYXlEb25lS2l0LnByb21pc2U7XG4gICAgICB9XG4gICAgfVxuICApO1xufTtcblxuLy9cbnZhciBCaWplY3Rpb25JID0gTS5pbnRlcmZhY2UoXCJCaWplY3Rpb25cIiwge1xuICByZXNldDogTS5jYWxsKCkucmV0dXJucygpLFxuICB1bndyYXBJbml0OiBNLmNhbGwoTS5yYXcoKSwgTS5hbnkoKSkucmV0dXJucyhNLnJhdygpKSxcbiAgaGFzR3Vlc3Q6IE0uY2FsbChNLnJhdygpKS5yZXR1cm5zKE0uYm9vbGVhbigpKSxcbiAgaGFzSG9zdDogTS5jYWxsKE0uYW55KCkpLnJldHVybnMoTS5ib29sZWFuKCkpLFxuICBoYXM6IE0uY2FsbChNLnJhdygpLCBNLmFueSgpKS5yZXR1cm5zKE0uYm9vbGVhbigpKSxcbiAgZ3Vlc3RUb0hvc3Q6IE0uY2FsbChNLnJhdygpKS5yZXR1cm5zKE0uYW55KCkpLFxuICBob3N0VG9HdWVzdDogTS5jYWxsKE0uYW55KCkpLnJldHVybnMoTS5yYXcoKSlcbn0pO1xudmFyIHRvS2V5ID0gKGspID0+IChcbiAgLy9cbiAgaXNQYXNzYWJsZShrKSA/IHRvUGFzc2FibGVDYXAoaykgOiBrXG4pO1xudmFyIG1ha2VWb3dpc2hTdG9yZSA9IChuYW1lKSA9PiB7XG4gIGNvbnN0IG1hcCA9IC8qICAgICAgICAgICAqLyBuZXcgTWFwKCk7XG4gIHJldHVybiBGYXIobmFtZSwge1xuICAgIGluaXQ6IChrLCB2MikgPT4ge1xuICAgICAgY29uc3QgazIgPSB0b0tleShrKTtcbiAgICAgICFtYXAuaGFzKGsyKSB8fCAvL1xuICAgICAgdGhyb3dSZWRhY3RlZGAke2JhcmVPclF1b3RlKG5hbWUpfSBrZXkgYWxyZWFkeSBib3VuZDogJHtrfSAtPiAke21hcC5nZXQoazIpfSB2cyAke3YyfWA7XG4gICAgICBtYXAuc2V0KGsyLCB2Mik7XG4gICAgfSxcbiAgICBoYXM6IChrKSA9PiBtYXAuaGFzKHRvS2V5KGspKSxcbiAgICBnZXQ6IChrKSA9PiB7XG4gICAgICBjb25zdCBrMiA9IHRvS2V5KGspO1xuICAgICAgbWFwLmhhcyhrMikgfHwgLy9cbiAgICAgIHRocm93UmVkYWN0ZWRgJHtiYXJlT3JRdW90ZShuYW1lKX0ga2V5IG5vdCBmb3VuZDogJHtrfWA7XG4gICAgICByZXR1cm4gbWFwLmdldChrMik7XG4gICAgfVxuICB9KTtcbn07XG52YXIgcHJlcGFyZUJpamVjdGlvbiA9ICh6b25lLCB1bndyYXAgPSAoX2hvc3RXcmFwcGVyLCBndWVzdFdyYXBwZXIpID0+IGd1ZXN0V3JhcHBlcikgPT4ge1xuICBjb25zdCBnMmggPSBtYWtlRXBoZW1lcmEoKCkgPT4gbWFrZVZvd2lzaFN0b3JlKFwiZ3Vlc3RUb0hvc3RcIikpO1xuICBjb25zdCBoMmcgPSBtYWtlRXBoZW1lcmEoKCkgPT4gbWFrZVZvd2lzaFN0b3JlKFwiaG9zdFRvR3Vlc3RcIikpO1xuICByZXR1cm4gem9uZS5leG9DbGFzcyhcIkJpamVjdGlvblwiLCBCaWplY3Rpb25JLCAoKSA9PiAoe30pLCB7XG4gICAgcmVzZXQoKSB7XG4gICAgICBjb25zdCB7IHNlbGYgfSA9IHRoaXM7XG4gICAgICBnMmgucmVzZXRGb3Ioc2VsZik7XG4gICAgICBoMmcucmVzZXRGb3Ioc2VsZik7XG4gICAgfSxcbiAgICB1bndyYXBJbml0KGczLCBoKSB7XG4gICAgICBoYXJkZW4oZzMpO1xuICAgICAgY29uc3QgeyBzZWxmIH0gPSB0aGlzO1xuICAgICAgY29uc3QgZ3Vlc3RUb0hvc3QgPSBnMmguZm9yKHNlbGYpO1xuICAgICAgY29uc3QgaG9zdFRvR3Vlc3QgPSBoMmcuZm9yKHNlbGYpO1xuICAgICAgY29uc3QgZ1Vud3JhcHBlZCA9IHVud3JhcChoLCBnMyk7XG4gICAgICAhaG9zdFRvR3Vlc3QuaGFzKGgpIHx8IHRocm93UmVkYWN0ZWRgaG9zdFRvR3Vlc3Qga2V5IGFscmVhZHkgYm91bmQ6ICR7aH0gLT4gJHtob3N0VG9HdWVzdC5nZXQoaCl9IHZzICR7Z1Vud3JhcHBlZH1gO1xuICAgICAgZ3Vlc3RUb0hvc3QuaW5pdChnVW53cmFwcGVkLCBoKTtcbiAgICAgIGhvc3RUb0d1ZXN0LmluaXQoaCwgZ1Vud3JhcHBlZCk7XG4gICAgICBzZWxmLmhhcyhnVW53cmFwcGVkLCBoKSB8fCAvL1xuICAgICAgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbDogJHtnM30gPC0+ICR7aH1gO1xuICAgICAgaWYgKGczICE9PSBnVW53cmFwcGVkKSB7XG4gICAgICAgICFndWVzdFRvSG9zdC5oYXMoZzMpIHx8IC8vXG4gICAgICAgIHRocm93UmVkYWN0ZWRgaGlkZGVuIGd1ZXN0IHdyYXBwZXIgYWxyZWFkeSBib3VuZCAke2czfWA7XG4gICAgICAgIGd1ZXN0VG9Ib3N0LmluaXQoZzMsIGgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGdVbndyYXBwZWQ7XG4gICAgfSxcbiAgICBoYXNHdWVzdChnMykge1xuICAgICAgaGFyZGVuKGczKTtcbiAgICAgIGNvbnN0IHsgc2VsZiB9ID0gdGhpcztcbiAgICAgIGNvbnN0IGd1ZXN0VG9Ib3N0ID0gZzJoLmZvcihzZWxmKTtcbiAgICAgIHJldHVybiBndWVzdFRvSG9zdC5oYXMoZzMpO1xuICAgIH0sXG4gICAgaGFzSG9zdChoKSB7XG4gICAgICBjb25zdCB7IHNlbGYgfSA9IHRoaXM7XG4gICAgICBjb25zdCBob3N0VG9HdWVzdCA9IGgyZy5mb3Ioc2VsZik7XG4gICAgICByZXR1cm4gaG9zdFRvR3Vlc3QuaGFzKGgpO1xuICAgIH0sXG4gICAgaGFzKGczLCBoKSB7XG4gICAgICBoYXJkZW4oZzMpO1xuICAgICAgY29uc3QgeyBzZWxmIH0gPSB0aGlzO1xuICAgICAgY29uc3QgZ3Vlc3RUb0hvc3QgPSBnMmguZm9yKHNlbGYpO1xuICAgICAgY29uc3QgaG9zdFRvR3Vlc3QgPSBoMmcuZm9yKHNlbGYpO1xuICAgICAgaWYgKGd1ZXN0VG9Ib3N0LmhhcyhnMykpIHtcbiAgICAgICAgdG9QYXNzYWJsZUNhcChndWVzdFRvSG9zdC5nZXQoZzMpKSA9PT0gdG9QYXNzYWJsZUNhcChoKSB8fCB0aHJvd1JlZGFjdGVkYGludGVybmFsOiBnLT5oICR7ZzN9IC0+ICR7aH0gdnMgJHtndWVzdFRvSG9zdC5nZXQoZzMpfWA7XG4gICAgICAgIGhvc3RUb0d1ZXN0LmdldChoKSA9PT0gZzMgfHwgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbCBoLT5nOiAke2h9IC0+ICR7ZzN9IHZzICR7aG9zdFRvR3Vlc3QuZ2V0KGgpfWA7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgIWhvc3RUb0d1ZXN0LmhhcyhoKSB8fCB0aHJvd1JlZGFjdGVkYGludGVybmFsOiB1bmV4cGVjdGVkIGgtPmcgJHtofSAtPiAke2hvc3RUb0d1ZXN0LmdldChoKX1gO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBndWVzdFRvSG9zdChnMykge1xuICAgICAgaGFyZGVuKGczKTtcbiAgICAgIGNvbnN0IHsgc2VsZiB9ID0gdGhpcztcbiAgICAgIGNvbnN0IGd1ZXN0VG9Ib3N0ID0gZzJoLmZvcihzZWxmKTtcbiAgICAgIHJldHVybiBndWVzdFRvSG9zdC5nZXQoZzMpO1xuICAgIH0sXG4gICAgaG9zdFRvR3Vlc3QoaCkge1xuICAgICAgY29uc3QgeyBzZWxmIH0gPSB0aGlzO1xuICAgICAgY29uc3QgaG9zdFRvR3Vlc3QgPSBoMmcuZm9yKHNlbGYpO1xuICAgICAgcmV0dXJuIGhvc3RUb0d1ZXN0LmdldChoKTtcbiAgICB9XG4gIH0pO1xufTtcbmhhcmRlbihwcmVwYXJlQmlqZWN0aW9uKTtcblxuLy9cbnZhciB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yMyxcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczgsXG4gIGNyZWF0ZTogY3JlYXRlNyxcbiAgZnJvbUVudHJpZXM6IGZyb21FbnRyaWVzMTQsXG4gIGVudHJpZXM6IGVudHJpZXM5LFxuICBwcm90b3R5cGU6IG9iamVjdFByb3RvdHlwZTZcbn0gPSBPYmplY3Q7XG52YXIgeyBvd25LZXlzOiBvd25LZXlzMjEgfSA9IFJlZmxlY3Q7XG52YXIgRnVuY3Rpb25XcmFwcGVySSA9IE0uaW50ZXJmYWNlKFwiRnVuY3Rpb25XcmFwcGVyXCIsIHtcbiAgYXBwbHk6IE0uY2FsbChNLmFycmF5KCkpLnJldHVybnMoTS5hbnkoKSlcbn0pO1xudmFyIFN0YXRlQWNjZXNzb3JJID0gTS5pbnRlcmZhY2UoXCJTdGF0ZUFjY2Vzc29yXCIsIHtcbiAgZ2V0OiBNLmNhbGwoUHJvcGVydHlLZXlTaGFwZSkucmV0dXJucyhNLmFueSgpKSxcbiAgc2V0OiBNLmNhbGwoUHJvcGVydHlLZXlTaGFwZSwgTS5hbnkoKSkucmV0dXJucygpXG59KTtcbnZhciBVbndyYXBwZXJJID0gTS5pbnRlcmZhY2UoXCJVbndyYXBwZXJcIiwge1xuICB1bndyYXA6IE0uY2FsbChNLnJlbW90YWJsZShcImd1ZXN0V3JhcHBlZFwiKSkucmV0dXJucyhNLnJhdygpKVxufSk7XG52YXIgZm9yd2FyZGluZ01ldGhvZHMgPSAocmVtKSA9PiB7XG4gIGNvbnN0IGtleXM3ID0gcmVtW0dFVF9NRVRIT0RfTkFNRVNdKCk7XG4gIGNvbnN0IG1ha2VNZXRob2RFbnRyeSA9IChrZXkpID0+IGVudHJpZXM5KHtcbiAgICBba2V5XSguLi5hcmdzKSB7XG4gICAgICByZXR1cm4gcmVtW2tleV0oLi4uYXJncyk7XG4gICAgfVxuICB9KVswXTtcbiAgcmV0dXJuIGZyb21FbnRyaWVzMTQoa2V5czcubWFwKG1ha2VNZXRob2RFbnRyeSkpO1xufTtcbnZhciBwcmVwYXJlRW5kb3dtZW50VG9vbHMgPSAob3V0ZXJab25lLCBvdXRlck9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCB7IHZvd1Rvb2xzID0gcHJlcGFyZVN3aW5nc2V0Vm93VG9vbHMob3V0ZXJab25lKSB9ID0gb3V0ZXJPcHRpb25zO1xuICBjb25zdCB7IG1ha2VWb3dLaXQgfSA9IHZvd1Rvb2xzO1xuICBjb25zdCBmdW5jdGlvblVud3JhcHBlciA9IG91dGVyWm9uZS5leG8oXCJGdW5jdGlvblVud3JhcHBlclwiLCBVbndyYXBwZXJJLCB7XG4gICAgdW53cmFwKGd1ZXN0V3JhcHBlZCkge1xuICAgICAgcmV0dXJuIEZhcihcIlVud3JhcHBlZEZ1bmN0aW9uXCIsICguLi5hcmdzKSA9PiBndWVzdFdyYXBwZWQuYXBwbHkoYXJncykpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IG1ha2VTdGF0ZVVud3JhcHBlciA9IG91dGVyWm9uZS5leG9DbGFzcyhcbiAgICBcIlN0YXRlVW53cmFwcGVyXCIsXG4gICAgVW53cmFwcGVySSxcbiAgICAoa2V5czcpID0+ICh7IGtleXM6IGtleXM3IH0pLFxuICAgIHtcbiAgICAgIHVud3JhcChndWVzdFdyYXBwZWQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0ZSB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBrZXlzOiBrZXlzNyB9ID0gc3RhdGU7XG4gICAgICAgIHJldHVybiBoYXJkZW4oXG4gICAgICAgICAgY3JlYXRlNyhcbiAgICAgICAgICAgIG9iamVjdFByb3RvdHlwZTYsXG4gICAgICAgICAgICBmcm9tRW50cmllczE0KFxuICAgICAgICAgICAgICBrZXlzNy5mbGF0TWFwKFxuICAgICAgICAgICAgICAgIChrZXkpID0+IGVudHJpZXM5KFxuICAgICAgICAgICAgICAgICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczgoe1xuICAgICAgICAgICAgICAgICAgICBnZXQgW2tleV0oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGd1ZXN0V3JhcHBlZC5nZXQoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc2V0IFtrZXldKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZ3Vlc3RXcmFwcGVkLnNldChrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICApO1xuICBjb25zdCBlbmRvd21lbnRLaW5kT2YgPSAoZTIpID0+IHtcbiAgICBoYXJkZW4oZTIpO1xuICAgIGlmIChpc1Byb21pc2UoZTIpKSB7XG4gICAgICByZXR1cm4gXCJwcm9taXNlXCI7XG4gICAgfSBlbHNlIGlmIChvdXRlclpvbmUuaXNTdG9yYWJsZShlMikpIHtcbiAgICAgIHJldHVybiBcInN0b3JhYmxlXCI7XG4gICAgfSBlbHNlIGlmIChpc1Bhc3NhYmxlKGUyKSAmJiBpc1JlbW90YWJsZShlMikpIHtcbiAgICAgIHJldHVybiBcImZhclwiO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGUyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiBcImZ1bmN0aW9uXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZTIgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIGlmIChlMiA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYGludGVybmFsOiBudWxsIGlzIGFsd2F5cyBzdG9yYWJsZWA7XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShlMikpIHtcbiAgICAgICAgcmV0dXJuIFwiYXJyYXlcIjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGtleXM3ID0gb3duS2V5czIxKGUyKTtcbiAgICAgIGtleXM3Lmxlbmd0aCA+PSAxIHx8IHRocm93UmVkYWN0ZWRgZW1wdHkgcmVjb3JkIHNob3VsZCBiZSBzdG9yYWJsZSAke2UyfWA7XG4gICAgICBjb25zdCBkZXNjID0gKFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yMyhlMiwga2V5czdbMF0pXG4gICAgICApO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7XG4gICAgICAgIHJldHVybiBcInJlY29yZFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgXCJnZXRcIiBpbiBkZXNjIHx8IHRocm93UmVkYWN0ZWRgaW50ZXJuYWw6IHVuZXhwZWN0ZWQgZGVzY3JpcHRvciAke2Rlc2N9YDtcbiAgICAgICAgcmV0dXJuIFwic3RhdGVcIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGB1bmV4cGVjdGVkIGVuZG93bWVudCAke2UyfWA7XG4gICAgfVxuICB9O1xuICBoYXJkZW4oZW5kb3dtZW50S2luZE9mKTtcbiAgY29uc3QgdW53cmFwTWFwID0gb3V0ZXJab25lLndlYWtNYXBTdG9yZShcInVud3JhcE1hcFwiLCB7XG4gICAga2V5U2hhcGU6IE0ucmVtb3RhYmxlKFwid3JhcHBlZFwiKSxcbiAgICB2YWx1ZVNoYXBlOiBNLnJlbW90YWJsZShcInVud3JhcHBlclwiKVxuICB9KTtcbiAgY29uc3QgdW53cmFwTWFwSGFzID0gKGspID0+IHtcbiAgICBpZiAoaXNWb3coaykgfHwgaXNSZW1vdGFibGUoaykpIHtcbiAgICAgIHJldHVybiB1bndyYXBNYXAuaGFzKHRvUGFzc2FibGVDYXAoaykpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuICBjb25zdCB1bndyYXBNYXBHZXQgPSAoaykgPT4gdW53cmFwTWFwLmdldCh0b1Bhc3NhYmxlQ2FwKGspKTtcbiAgY29uc3QgdW53cmFwTWFwU2V0ID0gKGssIHYyKSA9PiB7XG4gICAgY29uc3QgazIgPSB0b1Bhc3NhYmxlQ2FwKGspO1xuICAgIGlmICh1bndyYXBNYXBIYXMoaykpIHtcbiAgICAgIHVud3JhcE1hcC5zZXQoazIsIHYyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdW53cmFwTWFwLmluaXQoazIsIHYyKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHByZXBhcmVFbmRvd21lbnQgPSAoem9uZSwgdGFnLCBlMikgPT4ge1xuICAgIGNvbnN0IGVLaW5kID0gZW5kb3dtZW50S2luZE9mKGUyKTtcbiAgICBzd2l0Y2ggKGVLaW5kKSB7XG4gICAgICBjYXNlIFwicHJvbWlzZVwiOiB7XG4gICAgICAgIGNvbnN0IHA0ID0gKFxuICAgICAgICAgIC8qICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICBlMlxuICAgICAgICApO1xuICAgICAgICBjb25zdCB7IHZvdywgcmVzb2x2ZXIgfSA9IG1ha2VWb3dLaXQoKTtcbiAgICAgICAgdm9pZCBFLndoZW4oXG4gICAgICAgICAgcDQsXG4gICAgICAgICAgKHYyKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlci5yZXNvbHZlKHYyKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIChyZWFzb24pID0+IHtcbiAgICAgICAgICAgIGlmICghaXNVcGdyYWRlRGlzY29ubmVjdGlvbihyZWFzb24pKSB7XG4gICAgICAgICAgICAgIHJlc29sdmVyLnJlamVjdChyZWFzb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHZvdztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJzdG9yYWJsZVwiOiB7XG4gICAgICAgIHJldHVybiBlMjtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJmYXJcIjoge1xuICAgICAgICBjb25zdCByNSA9IChcbiAgICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICBlMlxuICAgICAgICApO1xuICAgICAgICBjb25zdCBtZXRob2RzID0gZm9yd2FyZGluZ01ldGhvZHMocjUpO1xuICAgICAgICByZXR1cm4gem9uZS5leG8oXG4gICAgICAgICAgdGFnLFxuICAgICAgICAgIE0uaW50ZXJmYWNlKFwiRmFyV3JhcHBlZFwiLCB7fSwgeyBkZWZhdWx0R3VhcmRzOiBcInJhd1wiIH0pLFxuICAgICAgICAgIG1ldGhvZHNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJmdW5jdGlvblwiOiB7XG4gICAgICAgIGNvbnN0IGYyID0gKFxuICAgICAgICAgIC8qICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgZTJcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3Qgd3JhcHBlZCA9IHpvbmUuZXhvKHRhZywgRnVuY3Rpb25XcmFwcGVySSwge1xuICAgICAgICAgIGFwcGx5KGFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiBmMiguLi5hcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB1bndyYXBNYXBTZXQod3JhcHBlZCwgZnVuY3Rpb25VbndyYXBwZXIpO1xuICAgICAgICByZXR1cm4gd3JhcHBlZDtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJhcnJheVwiOiB7XG4gICAgICAgIGNvbnN0IGEyID0gKFxuICAgICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgIGUyXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHN1YlpvbmUgPSB6b25lLnN1YlpvbmUodGFnKTtcbiAgICAgICAgcmV0dXJuIGEyLm1hcCgoc3ViRSwgaTMpID0+IHByZXBhcmVFbmRvd21lbnQoc3ViWm9uZSwgYCR7aTN9YCwgc3ViRSkpO1xuICAgICAgfVxuICAgICAgY2FzZSBcInJlY29yZFwiOiB7XG4gICAgICAgIGNvbnN0IHI1ID0gKFxuICAgICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICBlMlxuICAgICAgICApO1xuICAgICAgICBjb25zdCBzdWJab25lID0gem9uZS5zdWJab25lKHRhZyk7XG4gICAgICAgIHJldHVybiBvYmplY3RNYXAoXG4gICAgICAgICAgcjUsXG4gICAgICAgICAgKHN1YkUsIGspID0+IHByZXBhcmVFbmRvd21lbnQoc3ViWm9uZSwgU3RyaW5nKGspLCBzdWJFKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY2FzZSBcInN0YXRlXCI6IHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSAoXG4gICAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgIGUyXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGtleXM3ID0gaGFyZGVuKG93bktleXMyMShzdGF0ZSkpO1xuICAgICAgICBjb25zdCB3cmFwcGVkID0gem9uZS5leG8odGFnLCBTdGF0ZUFjY2Vzc29ySSwge1xuICAgICAgICAgIGdldChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZVtrZXldO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0KGtleSwgbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHN0YXRlW2tleV0gPSBuZXdWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzdGF0ZVVud3JhcHBlciA9IG1ha2VTdGF0ZVVud3JhcHBlcihrZXlzNyk7XG4gICAgICAgIHVud3JhcE1hcFNldCh3cmFwcGVkLCBzdGF0ZVVud3JhcHBlcik7XG4gICAgICAgIHJldHVybiB3cmFwcGVkO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYHVuZXhwZWN0ZWQgZW5kb3dtZW50ICR7ZTJ9YDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IHVud3JhcCA9ICh3cmFwcGVkLCBndWVzdFdyYXBwZWQpID0+IHtcbiAgICBpZiAodW53cmFwTWFwSGFzKHdyYXBwZWQpKSB7XG4gICAgICBjb25zdCB1bndyYXBwZXIgPSB1bndyYXBNYXBHZXQod3JhcHBlZCk7XG4gICAgICByZXR1cm4gdW53cmFwcGVyLnVud3JhcChndWVzdFdyYXBwZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ3Vlc3RXcmFwcGVkO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhhcmRlbih7IHByZXBhcmVFbmRvd21lbnQsIHVud3JhcCB9KTtcbn07XG5oYXJkZW4ocHJlcGFyZUVuZG93bWVudFRvb2xzKTtcblxuLy9cbnZhciB7IGRlZmluZVByb3BlcnRpZXM6IGRlZmluZVByb3BlcnRpZXM2IH0gPSBPYmplY3Q7XG52YXIgQXN5bmNGbG93SUtpdCA9IGhhcmRlbih7XG4gIGZsb3c6IE0uaW50ZXJmYWNlKFwiRmxvd1wiLCB7XG4gICAgZ2V0Rmxvd1N0YXRlOiBNLmNhbGwoKS5yZXR1cm5zKEZsb3dTdGF0ZVNoYXBlKSxcbiAgICByZXN0YXJ0OiBNLmNhbGwoKS5vcHRpb25hbChNLmJvb2xlYW4oKSkucmV0dXJucygpLFxuICAgIHdha2U6IE0uY2FsbCgpLnJldHVybnMoKSxcbiAgICBnZXRPdXRjb21lOiBNLmNhbGwoKS5yZXR1cm5zKFZvd1NoYXBlKSxcbiAgICBkdW1wOiBNLmNhbGwoKS5yZXR1cm5zKE0uYXJyYXlPZihMb2dFbnRyeVNoYXBlKSksXG4gICAgZ2V0T3B0RmF0YWxQcm9ibGVtOiBNLmNhbGwoKS5yZXR1cm5zKE0ub3B0KE0uZXJyb3IoKSkpXG4gIH0pLFxuICBhZG1pbjogTS5pbnRlcmZhY2UoXCJGbG93QWRtaW5cIiwge1xuICAgIHJlc2V0OiBNLmNhbGwoKS5yZXR1cm5zKCksXG4gICAgY29tcGxldGU6IE0uY2FsbCgpLnJldHVybnMoKSxcbiAgICBwYW5pYzogTS5jYWxsKE0uZXJyb3IoKSkucmV0dXJucyhNLm5vdChNLmFueSgpKSlcbiAgICAvL1xuICB9KSxcbiAgd2FrZVdhdGNoZXI6IFByb21pc2VXYXRjaGVySVxufSk7XG52YXIgQWRtaW5Bc3luY0Zsb3dJID0gTS5pbnRlcmZhY2UoXCJBc3luY0Zsb3dBZG1pblwiLCB7XG4gIGdldEZhaWx1cmVzOiBNLmNhbGwoKS5yZXR1cm5zKE0ubWFwT2YoTS5yZW1vdGFibGUoXCJhc3luY0Zsb3dcIiksIE0uZXJyb3IoKSkpLFxuICB3YWtlQWxsOiBNLmNhbGwoKS5yZXR1cm5zKCksXG4gIGdldEZsb3dGb3JPdXRjb21lVm93OiBNLmNhbGwoVm93U2hhcGUpLnJldHVybnMoTS5vcHQoTS5yZW1vdGFibGUoXCJmbG93XCIpKSlcbn0pO1xudmFyIHByZXBhcmVBc3luY0Zsb3dUb29scyA9IChvdXRlclpvbmUsIG91dGVyT3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IHtcbiAgICB2b3dUb29scyA9IHByZXBhcmVTd2luZ3NldFZvd1Rvb2xzKG91dGVyWm9uZSksXG4gICAgbWFrZUxvZ1N0b3JlID0gcHJlcGFyZUxvZ1N0b3JlKG91dGVyWm9uZSksXG4gICAgZW5kb3dtZW50VG9vbHM6IHsgcHJlcGFyZUVuZG93bWVudCwgdW53cmFwIH0gPSBwcmVwYXJlRW5kb3dtZW50VG9vbHMoXG4gICAgICBvdXRlclpvbmUsXG4gICAgICB7IHZvd1Rvb2xzIH1cbiAgICApLFxuICAgIG1ha2VCaWplY3Rpb24gPSBwcmVwYXJlQmlqZWN0aW9uKG91dGVyWm9uZSwgdW53cmFwKSxcbiAgICBwYW5pY0hhbmRsZXIgPSAoZXJyKSA9PiB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9ID0gb3V0ZXJPcHRpb25zO1xuICBjb25zdCB7IHdhdGNoLCBtYWtlVm93S2l0IH0gPSB2b3dUb29scztcbiAgY29uc3QgZmFpbHVyZXMgPSBvdXRlclpvbmUubWFwU3RvcmUoXCJhc3luY0Z1bmNGYWlsdXJlc1wiLCB7XG4gICAga2V5U2hhcGU6IE0ucmVtb3RhYmxlKFwiZmxvd1wiKSxcbiAgICAvL1xuICAgIHZhbHVlU2hhcGU6IE0uZXJyb3IoKVxuICB9KTtcbiAgY29uc3QgZWFnZXJXYWtlcnMgPSBvdXRlclpvbmUuc2V0U3RvcmUoYGFzeW5jRnVuY0VhZ2VyV2FrZXJzYCwge1xuICAgIGtleVNoYXBlOiBNLnJlbW90YWJsZShcImZsb3dcIilcbiAgICAvL1xuICB9KTtcbiAgY29uc3QgbWVtYnJhbmVNYXAgPSBtYWtlU2NhbGFyV2Vha01hcFN0b3JlKFwibWVtYnJhbmVGb3JcIiwge1xuICAgIGtleVNoYXBlOiBNLnJlbW90YWJsZShcImZsb3dcIiksXG4gICAgdmFsdWVTaGFwZTogTS5yZW1vdGFibGUoXCJtZW1icmFuZVwiKVxuICB9KTtcbiAgY29uc3QgaGFzTWVtYnJhbmUgPSAoZmxvdykgPT4gbWVtYnJhbmVNYXAuaGFzKGZsb3cpO1xuICBjb25zdCBnZXRNZW1icmFuZSA9IChmbG93KSA9PiBtZW1icmFuZU1hcC5nZXQoZmxvdyk7XG4gIGNvbnN0IGluaXRNZW1icmFuZSA9IChmbG93LCBtZW1icmFuZSkgPT4gbWVtYnJhbmVNYXAuaW5pdChmbG93LCBtZW1icmFuZSk7XG4gIGNvbnN0IGRlbGV0ZU1lbWJyYW5lID0gKGZsb3cpID0+IG1lbWJyYW5lTWFwLmRlbGV0ZShmbG93KTtcbiAgY29uc3QgZmxvd0Zvck91dGNvbWVWb3dLZXkgPSBvdXRlclpvbmUubWFwU3RvcmUoXCJmbG93Rm9yT3V0Y29tZVZvd1wiLCB7XG4gICAga2V5U2hhcGU6IE0ucmVtb3RhYmxlKFwidG9QYXNzYWJsZUNhcFwiKSxcbiAgICB2YWx1ZVNoYXBlOiBNLnJlbW90YWJsZShcImZsb3dcIilcbiAgICAvL1xuICB9KTtcbiAgY29uc3QgcHJlcGFyZUFzeW5jRmxvd0tpdCA9ICh6b25lLCB0YWcsIGd1ZXN0QXN5bmNGdW5jLCBvcHRpb25zID0ge30pID0+IHtcbiAgICB0eXBlb2YgZ3Vlc3RBc3luY0Z1bmMgPT09IFwiZnVuY3Rpb25cIiB8fCB0aHJvd1JlZGFjdGVkYGd1ZXN0QXN5bmNGdW5jIG11c3QgYmUgYSBjYWxsYWJsZSBmdW5jdGlvbiAke2d1ZXN0QXN5bmNGdW5jfWA7XG4gICAgY29uc3Qge1xuICAgICAgLy9cbiAgICAgIHN0YXJ0RWFnZXIgPSB0cnVlXG4gICAgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgaW50ZXJuYWxNYWtlQXN5bmNGbG93S2l0ID0gem9uZS5leG9DbGFzc0tpdChcbiAgICAgIHRhZyxcbiAgICAgIEFzeW5jRmxvd0lLaXQsXG4gICAgICAoYWN0aXZhdGlvbkFyZ3MpID0+IHtcbiAgICAgICAgaGFyZGVuKGFjdGl2YXRpb25BcmdzKTtcbiAgICAgICAgY29uc3QgbG9nID0gbWFrZUxvZ1N0b3JlKCk7XG4gICAgICAgIGNvbnN0IGJpamVjdGlvbiA9IG1ha2VCaWplY3Rpb24oKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBhY3RpdmF0aW9uQXJncyxcbiAgICAgICAgICAvL1xuICAgICAgICAgIGxvZyxcbiAgICAgICAgICAvL1xuICAgICAgICAgIGJpamVjdGlvbixcbiAgICAgICAgICAvL1xuICAgICAgICAgIG91dGNvbWVLaXQ6IG1ha2VWb3dLaXQoKSxcbiAgICAgICAgICAvL1xuICAgICAgICAgIGlzRG9uZTogZmFsc2VcbiAgICAgICAgICAvL1xuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZmxvdzoge1xuICAgICAgICAgIC8qXG5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBnZXRGbG93U3RhdGUoKSB7XG4gICAgICAgICAgICBjb25zdCB7IHN0YXRlLCBmYWNldHMgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IGxvZywgb3V0Y29tZUtpdCwgaXNEb25lIH0gPSBzdGF0ZTtcbiAgICAgICAgICAgIGNvbnN0IHsgZmxvdyB9ID0gZmFjZXRzO1xuICAgICAgICAgICAgaWYgKGlzRG9uZSkge1xuICAgICAgICAgICAgICAhaGFzTWVtYnJhbmUoZmxvdykgfHwgdGhyb3dSZWRhY3RlZGBEb25lIGZsb3cgbXVzdCBkcm9wIG1lbWJyYW5lICR7Zmxvd30gJHtnZXRNZW1icmFuZShmbG93KX1gO1xuICAgICAgICAgICAgICAhZmFpbHVyZXMuaGFzKGZsb3cpIHx8IHRocm93UmVkYWN0ZWRgRG9uZSBmbG93IG11c3Qgbm90IGJlIGluIGZhaWx1cmVzICR7Zmxvd30gJHtmYWlsdXJlcy5nZXQoZmxvdyl9YDtcbiAgICAgICAgICAgICAgIWVhZ2VyV2FrZXJzLmhhcyhmbG93KSB8fCB0aHJvd1JlZGFjdGVkYERvbmUgZmxvdyBtdXN0IG5vdCBiZSBpbiBlYWdlcldha2VycyAke2Zsb3d9YDtcbiAgICAgICAgICAgICAgIWZsb3dGb3JPdXRjb21lVm93S2V5LmhhcyhvdXRjb21lS2l0LnZvdykgfHwgdGhyb3dSZWRhY3RlZGBEb25lIGZsb3cgbXVzdCBkcm9wIGZsb3cgbG9va3VwIGZyb20gdm93ICR7b3V0Y29tZUtpdC52b3d9YDtcbiAgICAgICAgICAgICAgbG9nLmdldEluZGV4KCkgPT09IDAgJiYgbG9nLmdldExlbmd0aCgpID09PSAwIHx8IHRocm93UmVkYWN0ZWRgRG9uZSBmbG93IG11c3QgZW1wdHkgbG9nICR7Zmxvd30gJHtsb2d9YDtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiRG9uZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZhaWx1cmVzLmhhcyhmbG93KSkge1xuICAgICAgICAgICAgICByZXR1cm4gXCJGYWlsZWRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaGFzTWVtYnJhbmUoZmxvdykpIHtcbiAgICAgICAgICAgICAgbG9nLmdldEluZGV4KCkgPT09IDAgfHwgdGhyb3dSZWRhY3RlZGBTbGVlcGluZyBmbG93IG11c3QgcGxheSBmcm9tIGxvZyBzdGFydCAke2Zsb3d9ICR7bG9nLmdldEluZGV4KCl9YDtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiU2xlZXBpbmdcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsb2cuaXNSZXBsYXlpbmcoKSkge1xuICAgICAgICAgICAgICByZXR1cm4gXCJSZXBsYXlpbmdcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcIlJ1bm5pbmdcIjtcbiAgICAgICAgICB9LFxuICAgICAgICAgIC8qXG5cblxuXG5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICByZXN0YXJ0KGVhZ2VyID0gc3RhcnRFYWdlcikge1xuICAgICAgICAgICAgY29uc3QgeyBzdGF0ZSwgZmFjZXRzIH0gPSB0aGlzO1xuICAgICAgICAgICAgY29uc3QgeyBhY3RpdmF0aW9uQXJncywgbG9nLCBiaWplY3Rpb24sIG91dGNvbWVLaXQgfSA9IHN0YXRlO1xuICAgICAgICAgICAgY29uc3QgeyBmbG93LCBhZG1pbiwgd2FrZVdhdGNoZXIgfSA9IGZhY2V0cztcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0Rmxvd1N0YXRlID0gZmxvdy5nZXRGbG93U3RhdGUoKTtcbiAgICAgICAgICAgIHN0YXJ0Rmxvd1N0YXRlICE9PSBcIkRvbmVcIiB8fCAvL1xuICAgICAgICAgICAgdGhyb3dSZWRhY3RlZGBDYW5ub3QgcmVzdGFydCBhIGRvbmUgZmxvdyAke2Zsb3d9YDtcbiAgICAgICAgICAgIGFkbWluLnJlc2V0KCk7XG4gICAgICAgICAgICBpZiAoZWFnZXIpIHtcbiAgICAgICAgICAgICAgZWFnZXJXYWtlcnMuYWRkKGZsb3cpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlYWdlcldha2Vycy5oYXMoZmxvdykpIHtcbiAgICAgICAgICAgICAgZWFnZXJXYWtlcnMuZGVsZXRlKGZsb3cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgd2F0Y2hXYWtlID0gKHZvd2lzaCkgPT4ge1xuICAgICAgICAgICAgICB6b25lLmlzU3RvcmFibGUodm93aXNoKSB8fCB0aHJvd1JlZGFjdGVkYHZvd2lzaCBtdXN0IGJlIHN0b3JhYmxlIGluIHRoaXMgem9uZSAodXN1YWxseSwgbXVzdCBiZSBkdXJhYmxlKTogJHt2b3dpc2h9YDtcbiAgICAgICAgICAgICAgem9uZS5pc1N0b3JhYmxlKHdha2VXYXRjaGVyKSB8fCB0aHJvd1JlZGFjdGVkYHdha2VXYXRjaGVyIG11c3QgYmUgc3RvcmFibGUgaW4gdGhpcyB6b25lICh1c3VhbGx5LCBtdXN0IGJlIGR1cmFibGUpOiAke3dha2VXYXRjaGVyfWA7XG4gICAgICAgICAgICAgIHdhdGNoKHZvd2lzaCwgd2FrZVdhdGNoZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHBhbmljID0gKGVycikgPT4gYWRtaW4ucGFuaWMoZXJyKTtcbiAgICAgICAgICAgIGNvbnN0IG1lbWJyYW5lID0gbWFrZVJlcGxheU1lbWJyYW5lKHtcbiAgICAgICAgICAgICAgbG9nLFxuICAgICAgICAgICAgICBiaWplY3Rpb24sXG4gICAgICAgICAgICAgIHZvd1Rvb2xzLFxuICAgICAgICAgICAgICB3YXRjaFdha2UsXG4gICAgICAgICAgICAgIHBhbmljXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGluaXRNZW1icmFuZShmbG93LCBtZW1icmFuZSk7XG4gICAgICAgICAgICBjb25zdCBndWVzdEFyZ3MgPSBtZW1icmFuZS5ob3N0VG9HdWVzdChhY3RpdmF0aW9uQXJncyk7XG4gICAgICAgICAgICBjb25zdCBmbG93U3RhdGUgPSBmbG93LmdldEZsb3dTdGF0ZSgpO1xuICAgICAgICAgICAgZmxvd1N0YXRlID09PSBcIlJ1bm5pbmdcIiB8fCBmbG93U3RhdGUgPT09IFwiUmVwbGF5aW5nXCIgfHwgdGhyb3dSZWRhY3RlZGBSZXN0YXJ0ZWQgZmxvdyBtdXN0IGJlIFJ1bm5pbmcgb3IgUmVwbGF5aW5nICR7Zmxvd31gO1xuICAgICAgICAgICAgbWVtYnJhbmUud2FrZSgpO1xuICAgICAgICAgICAgY29uc3QgZ3Vlc3RSZXN1bHRQID0gKGFzeW5jICgpID0+IChcbiAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgZ3Vlc3RBc3luY0Z1bmMoLi4uZ3Vlc3RBcmdzKVxuICAgICAgICAgICAgKSkoKTtcbiAgICAgICAgICAgIGlmIChmbG93LmdldEZsb3dTdGF0ZSgpICE9PSBcIkZhaWxlZFwiKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGczID0gYmlqZWN0aW9uLnVud3JhcEluaXQoZ3Vlc3RSZXN1bHRQLCBvdXRjb21lS2l0LnZvdyk7XG4gICAgICAgICAgICAgIGczID09PSBndWVzdFJlc3VsdFAgfHwgdGhyb3dSZWRhY3RlZGBpbnRlcm5hbDogcHJvbWlzZXMgc2hvdWxkIG5vdCBiZSB1bndyYXBwZWQgJHtnM31gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdm9pZCBFLndoZW4oXG4gICAgICAgICAgICAgIGd1ZXN0UmVzdWx0UCxcbiAgICAgICAgICAgICAgKGdGdWxmaWxsbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChiaWplY3Rpb24uaGFzR3Vlc3QoZ3Vlc3RSZXN1bHRQKSkge1xuICAgICAgICAgICAgICAgICAgIWxvZy5pc1JlcGxheWluZygpIHx8IHBhbmljKFxuICAgICAgICAgICAgICAgICAgICBtYWtlRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgcmVkYWN0ZWRgZ3Vlc3QgZnVsZmlsbGVkIHdpdGggJHtnRnVsZmlsbG1lbnR9IGJlZm9yZSBmaW5pc2hpbmcgcmVwbGF5YFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgb3V0Y29tZUtpdC5yZXNvbHZlci5yZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgICBtZW1icmFuZS5ndWVzdFRvSG9zdChnRnVsZmlsbG1lbnQpXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgYWRtaW4uY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIChndWVzdFJlYXNvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChiaWplY3Rpb24uaGFzR3Vlc3QoZ3Vlc3RSZXN1bHRQKSkge1xuICAgICAgICAgICAgICAgICAgIWxvZy5pc1JlcGxheWluZygpIHx8IHBhbmljKFxuICAgICAgICAgICAgICAgICAgICBtYWtlRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgcmVkYWN0ZWRgZ3Vlc3QgcmVqZWN0ZWQgd2l0aCAke2d1ZXN0UmVhc29ufSBiZWZvcmUgZmluaXNoaW5nIHJlcGxheWBcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIG91dGNvbWVLaXQucmVzb2x2ZXIucmVqZWN0KG1lbWJyYW5lLmd1ZXN0VG9Ib3N0KGd1ZXN0UmVhc29uKSk7XG4gICAgICAgICAgICAgICAgICBhZG1pbi5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKS50aGVuKFxuICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGZsb3cuZ2V0Rmxvd1N0YXRlKCkgPT09IFwiRmFpbGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IGZsb3cuZ2V0T3B0RmF0YWxQcm9ibGVtKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAobWF5YmVQYW5pY1JlYXNvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChmbG93LmdldEZsb3dTdGF0ZSgpID09PSBcIkZhaWxlZFwiKSB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBlcnIyID0gZmxvdy5nZXRPcHRGYXRhbFByb2JsZW0oKTtcbiAgICAgICAgICAgICAgICAgIHRocm93IGVycjI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IG1ha2VFcnJvcihcbiAgICAgICAgICAgICAgICAgIHJlZGFjdGVkYGludGVybmFsOiB1bmV4cGVjdGVkIGVycm9yIGluIGd1ZXN0IGNvbXBsZXRpb24gaGFuZGxpbmcgJHttYXliZVBhbmljUmVhc29ufWBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBwYW5pYyhlcnIpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKF9lKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLmNhdGNoKHBhbmljSGFuZGxlcik7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB3YWtlKCkge1xuICAgICAgICAgICAgY29uc3QgeyBmYWNldHMgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IGZsb3cgfSA9IGZhY2V0cztcbiAgICAgICAgICAgIGNvbnN0IGZsb3dTdGF0ZSA9IGZsb3cuZ2V0Rmxvd1N0YXRlKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKGZsb3dTdGF0ZSkge1xuICAgICAgICAgICAgICBjYXNlIFwiRG9uZVwiOlxuICAgICAgICAgICAgICBjYXNlIFwiRmFpbGVkXCI6IHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2FzZSBcIlJ1bm5pbmdcIjpcbiAgICAgICAgICAgICAgY2FzZSBcIlJlcGxheWluZ1wiOiB7XG4gICAgICAgICAgICAgICAgZ2V0TWVtYnJhbmUoZmxvdykud2FrZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXNlIFwiU2xlZXBpbmdcIjoge1xuICAgICAgICAgICAgICAgIGZsb3cucmVzdGFydCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGB1bmV4cGVjdGVkIGZsb3dTdGF0ZSAke3F1b3RlKGZsb3dTdGF0ZSl9YDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2V0T3V0Y29tZSgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgc3RhdGUgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IG91dGNvbWVLaXQgfSA9IHN0YXRlO1xuICAgICAgICAgICAgcmV0dXJuIG91dGNvbWVLaXQudm93O1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZHVtcCgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgc3RhdGUgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IGxvZyB9ID0gc3RhdGU7XG4gICAgICAgICAgICByZXR1cm4gbG9nLmR1bXAoKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGdldE9wdEZhdGFsUHJvYmxlbSgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZmFjZXRzIH0gPSB0aGlzO1xuICAgICAgICAgICAgY29uc3QgeyBmbG93IH0gPSBmYWNldHM7XG4gICAgICAgICAgICByZXR1cm4gZmFpbHVyZXMuaGFzKGZsb3cpID8gZmFpbHVyZXMuZ2V0KGZsb3cpIDogdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWRtaW46IHtcbiAgICAgICAgICByZXNldCgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgc3RhdGUsIGZhY2V0cyB9ID0gdGhpcztcbiAgICAgICAgICAgIGNvbnN0IHsgYmlqZWN0aW9uLCBsb2cgfSA9IHN0YXRlO1xuICAgICAgICAgICAgY29uc3QgeyBmbG93IH0gPSBmYWNldHM7XG4gICAgICAgICAgICAhc3RhdGUuaXNEb25lIHx8IHRocm93UmVkYWN0ZWRgQ2Fubm90IHJlc2V0IGEgZG9uZSBmbG93YDtcbiAgICAgICAgICAgIGlmIChmYWlsdXJlcy5oYXMoZmxvdykpIHtcbiAgICAgICAgICAgICAgZmFpbHVyZXMuZGVsZXRlKGZsb3cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc01lbWJyYW5lKGZsb3cpKSB7XG4gICAgICAgICAgICAgIGdldE1lbWJyYW5lKGZsb3cpLnN0b3AoKTtcbiAgICAgICAgICAgICAgZGVsZXRlTWVtYnJhbmUoZmxvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2cucmVzZXQoKTtcbiAgICAgICAgICAgIGJpamVjdGlvbi5yZXNldCgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29tcGxldGUoKSB7XG4gICAgICAgICAgICBjb25zdCB7IHN0YXRlLCBmYWNldHMgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IGxvZyB9ID0gc3RhdGU7XG4gICAgICAgICAgICBjb25zdCB7IGZsb3csIGFkbWluIH0gPSBmYWNldHM7XG4gICAgICAgICAgICBhZG1pbi5yZXNldCgpO1xuICAgICAgICAgICAgaWYgKGVhZ2VyV2FrZXJzLmhhcyhmbG93KSkge1xuICAgICAgICAgICAgICBlYWdlcldha2Vycy5kZWxldGUoZmxvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmbG93Rm9yT3V0Y29tZVZvd0tleS5kZWxldGUodG9QYXNzYWJsZUNhcChmbG93LmdldE91dGNvbWUoKSkpO1xuICAgICAgICAgICAgc3RhdGUuaXNEb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIGxvZy5kaXNwb3NlKCk7XG4gICAgICAgICAgICBmbG93LmdldEZsb3dTdGF0ZSgpID09PSBcIkRvbmVcIiB8fCB0aHJvd1JlZGFjdGVkYENvbXBsZXRlIGZsb3cgbXVzdCBiZSBEb25lICR7Zmxvd31gO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcGFuaWMoZmF0YWxQcm9ibGVtKSB7XG4gICAgICAgICAgICBjb25zdCB7IHN0YXRlLCBmYWNldHMgfSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB7IGJpamVjdGlvbiwgbG9nIH0gPSBzdGF0ZTtcbiAgICAgICAgICAgIGNvbnN0IHsgZmxvdyB9ID0gZmFjZXRzO1xuICAgICAgICAgICAgaWYgKGZhaWx1cmVzLmhhcyhmbG93KSkge1xuICAgICAgICAgICAgICBjb25zdCBwcmV2RXJyID0gZmFpbHVyZXMuZ2V0KGZsb3cpO1xuICAgICAgICAgICAgICBub3RlKFxuICAgICAgICAgICAgICAgIHByZXZFcnIsXG4gICAgICAgICAgICAgICAgcmVkYWN0ZWRgZG91Ymx5IGZhaWxlZCBzb21laG93IHdpdGggJHtmYXRhbFByb2JsZW19YFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBmYXRhbFByb2JsZW0gPSBwcmV2RXJyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZmFpbHVyZXMuaW5pdChmbG93LCBmYXRhbFByb2JsZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc01lbWJyYW5lKGZsb3cpKSB7XG4gICAgICAgICAgICAgIGdldE1lbWJyYW5lKGZsb3cpLnN0b3AoKTtcbiAgICAgICAgICAgICAgZGVsZXRlTWVtYnJhbmUoZmxvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2cucmVzZXQoKTtcbiAgICAgICAgICAgIGJpamVjdGlvbi5yZXNldCgpO1xuICAgICAgICAgICAgZmxvdy5nZXRGbG93U3RhdGUoKSA9PT0gXCJGYWlsZWRcIiB8fCB0aHJvd1JlZGFjdGVkYFBhbmlja2VkIGZsb3cgbXVzdCBiZSBGYWlsZWQgJHtmbG93fWA7XG4gICAgICAgICAgICBjb25zdCBlcnIgPSBtYWtlRXJyb3IoXG4gICAgICAgICAgICAgIHJlZGFjdGVkYEluIGEgRmFpbGVkIHN0YXRlOiBzZWUgZ2V0RmFpbHVyZXMoKSBvciBnZXRPcHRGYXRhbFByb2JsZW0oKSBmb3IgbW9yZSBpbmZvcm1hdGlvbmBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBub3RlKGVyciwgcmVkYWN0ZWRgZHVlIHRvICR7ZmF0YWxQcm9ibGVtfWApO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2FrZVdhdGNoZXI6IHtcbiAgICAgICAgICBvbkZ1bGZpbGxlZChfZnVsZmlsbG1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZmFjZXRzIH0gPSB0aGlzO1xuICAgICAgICAgICAgZmFjZXRzLmZsb3cud2FrZSgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb25SZWplY3RlZChfZnVsZmlsbG1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZmFjZXRzIH0gPSB0aGlzO1xuICAgICAgICAgICAgZmFjZXRzLmZsb3cud2FrZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gICAgY29uc3QgbWFrZUFzeW5jRmxvd0tpdCA9IChhY3RpdmF0aW9uQXJncykgPT4ge1xuICAgICAgY29uc3QgYXN5bmNGbG93S2l0ID0gaW50ZXJuYWxNYWtlQXN5bmNGbG93S2l0KGFjdGl2YXRpb25BcmdzKTtcbiAgICAgIGNvbnN0IHsgZmxvdyB9ID0gYXN5bmNGbG93S2l0O1xuICAgICAgY29uc3Qgdm93ID0gZmxvdy5nZXRPdXRjb21lKCk7XG4gICAgICBmbG93Rm9yT3V0Y29tZVZvd0tleS5pbml0KHRvUGFzc2FibGVDYXAodm93KSwgZmxvdyk7XG4gICAgICBmbG93LnJlc3RhcnQoKTtcbiAgICAgIHJldHVybiBhc3luY0Zsb3dLaXQ7XG4gICAgfTtcbiAgICByZXR1cm4gaGFyZGVuKG1ha2VBc3luY0Zsb3dLaXQpO1xuICB9O1xuICBjb25zdCBhc3luY0Zsb3cgPSAoem9uZSwgdGFnLCBndWVzdEZ1bmMsIG9wdGlvbnMgPSB2b2lkIDApID0+IHtcbiAgICBjb25zdCBtYWtlQXN5bmNGbG93S2l0ID0gcHJlcGFyZUFzeW5jRmxvd0tpdCh6b25lLCB0YWcsIGd1ZXN0RnVuYywgb3B0aW9ucyk7XG4gICAgY29uc3QgaG9zdEZ1bmNOYW1lID0gYCR7dGFnfV9ob3N0Rmxvd2A7XG4gICAgY29uc3Qgd3JhcHBlckZ1bmMgPSAoXG4gICAgICAvKiAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgIHtcbiAgICAgICAgW2hvc3RGdW5jTmFtZV0oLi4uYXJncykge1xuICAgICAgICAgIGNvbnN0IHsgZmxvdyB9ID0gbWFrZUFzeW5jRmxvd0tpdChhcmdzKTtcbiAgICAgICAgICByZXR1cm4gZmxvdy5nZXRPdXRjb21lKCk7XG4gICAgICAgIH1cbiAgICAgIH1baG9zdEZ1bmNOYW1lXVxuICAgICk7XG4gICAgZGVmaW5lUHJvcGVydGllczYod3JhcHBlckZ1bmMsIHtcbiAgICAgIGxlbmd0aDogeyB2YWx1ZTogZ3Vlc3RGdW5jLmxlbmd0aCB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGhhcmRlbih3cmFwcGVyRnVuYyk7XG4gIH07XG4gIGNvbnN0IGFkbWluQXN5bmNGbG93ID0gb3V0ZXJab25lLmV4byhcIkFkbWluQXN5bmNGbG93XCIsIEFkbWluQXN5bmNGbG93SSwge1xuICAgIGdldEZhaWx1cmVzKCkge1xuICAgICAgcmV0dXJuIGZhaWx1cmVzLnNuYXBzaG90KCk7XG4gICAgfSxcbiAgICB3YWtlQWxsKCkge1xuICAgICAgY29uc3QgZmFpbHVyZXNUb1Jlc3RhcnQgPSBbLi4uZmFpbHVyZXMua2V5cygpXTtcbiAgICAgIGNvbnN0IGZsb3dzVG9XYWtlID0gWy4uLmVhZ2VyV2FrZXJzLmtleXMoKV07XG4gICAgICBmb3IgKGNvbnN0IGZsb3cgb2YgZmFpbHVyZXNUb1Jlc3RhcnQpIHtcbiAgICAgICAgZmxvdy5yZXN0YXJ0KCk7XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IGZsb3cgb2YgZmxvd3NUb1dha2UpIHtcbiAgICAgICAgZmxvdy53YWtlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXRGbG93Rm9yT3V0Y29tZVZvdyhvdXRjb21lVm93KSB7XG4gICAgICByZXR1cm4gZmxvd0Zvck91dGNvbWVWb3dLZXkuZ2V0KHRvUGFzc2FibGVDYXAob3V0Y29tZVZvdykpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGFsbFdva2VuUCA9IEUud2hlbihudWxsLCAoKSA9PiBhZG1pbkFzeW5jRmxvdy53YWtlQWxsKCkpO1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICBwcmVwYXJlQXN5bmNGbG93S2l0LFxuICAgIGFzeW5jRmxvdyxcbiAgICBhZG1pbkFzeW5jRmxvdyxcbiAgICBhbGxXb2tlblAsXG4gICAgcHJlcGFyZUVuZG93bWVudFxuICB9KTtcbn07XG5oYXJkZW4ocHJlcGFyZUFzeW5jRmxvd1Rvb2xzKTtcblxuLy9cbnZhciBzaW5rMyA9ICgpID0+IHtcbn07XG52YXIgbWFrZVF1aWV0UmVqZWN0aW9uID0gKHJlYXNvbikgPT4ge1xuICBjb25zdCByZWplY3Rpb24gPSBoYXJkZW4oUHJvbWlzZS5yZWplY3QocmVhc29uKSk7XG4gIHZvaWQgRS53aGVuKHJlamVjdGlvbiwgc2luazMsIHNpbmszKTtcbiAgcmV0dXJuIHJlamVjdGlvbjtcbn07XG52YXIgdG9vRmFyUmVqZWN0aW9uID0gbWFrZVF1aWV0UmVqZWN0aW9uKFxuICBoYXJkZW4oRXJyb3IoXCJDYW5ub3QgcmVhZCBwYXN0IGVuZCBvZiBpdGVyYXRpb24uXCIpKVxuKTtcbnZhciBQdWJsaXNoZXJJID0gTS5pbnRlcmZhY2UoXCJQdWJsaXNoZXJcIiwge1xuICBwdWJsaXNoOiBNLmNhbGwoTS5hbnkoKSkucmV0dXJucygpLFxuICBmaW5pc2g6IE0uY2FsbChNLmFueSgpKS5yZXR1cm5zKCksXG4gIGZhaWw6IE0uY2FsbChNLmFueSgpKS5yZXR1cm5zKClcbn0pO1xudmFyIFVwZGF0ZUNvdW50U2hhcGUgPSBNLm9yKE0uYmlnaW50KCksIE0ubnVtYmVyKCkpO1xudmFyIFN1YnNjcmliZXJJID0gTS5pbnRlcmZhY2UoXCJTdWJzY3JpYmVyXCIsIHtcbiAgc3Vic2NyaWJlQWZ0ZXI6IE0uY2FsbCgpLm9wdGlvbmFsKE0uYmlnaW50KCkpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICBnZXRVcGRhdGVTaW5jZTogTS5jYWxsKCkub3B0aW9uYWwoVXBkYXRlQ291bnRTaGFwZSkucmV0dXJucyhNLnByb21pc2UoKSlcbn0pO1xudmFyIHB1Ymxpc2hLaXRJS2l0ID0gaGFyZGVuKHtcbiAgcHVibGlzaGVyOiBQdWJsaXNoZXJJLFxuICBzdWJzY3JpYmVyOiBTdWJzY3JpYmVySVxufSk7XG52YXIgRm9ya2FibGVBc3luY0l0ZXJhYmxlSXRlcmF0b3JTaGFwZSA9IE0uaW50ZXJmYWNlKFxuICBcIkZvcmthYmxlQXN5bmNJdGVyYWJsZUl0ZXJhdG9yXCIsXG4gIHtcbiAgICBmb3JrOiBNLmNhbGwoKS5yZXR1cm5zKE0uYW55KCkpLFxuICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl06IE0uY2FsbCgpLnJldHVybnMoTS5hbnkoKSksXG4gICAgLy9cbiAgICBuZXh0OiBNLmNhbGxXaGVuKCkucmV0dXJucyhNLmFueSgpKVxuICB9XG4pO1xudmFyIEl0ZXJhYmxlRWFjaFRvcGljSSA9IE0uaW50ZXJmYWNlKFwiSXRlcmFibGVFYWNoVG9waWNcIiwge1xuICBzdWJzY3JpYmVBZnRlcjogZ2V0SW50ZXJmYWNlR3VhcmRQYXlsb2FkKFN1YnNjcmliZXJJKS5tZXRob2RHdWFyZHMuc3Vic2NyaWJlQWZ0ZXIsXG4gIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl06IE0uY2FsbCgpLnJldHVybnMoXG4gICAgTS5yZW1vdGFibGUoXCJGb3JrYWJsZUFzeW5jSXRlcmFibGVJdGVyYXRvclwiKVxuICApXG59KTtcbnZhciBJdGVyYWJsZUxhdGVzdFRvcGljSSA9IE0uaW50ZXJmYWNlKFwiSXRlcmFibGVMYXRlc3RUb3BpY1wiLCB7XG4gIGdldFVwZGF0ZVNpbmNlOiBnZXRJbnRlcmZhY2VHdWFyZFBheWxvYWQoU3Vic2NyaWJlckkpLm1ldGhvZEd1YXJkcy5nZXRVcGRhdGVTaW5jZSxcbiAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTogTS5jYWxsKCkucmV0dXJucyhcbiAgICBNLnJlbW90YWJsZShcIkZvcmthYmxlQXN5bmNJdGVyYWJsZUl0ZXJhdG9yXCIpXG4gIClcbn0pO1xudmFyIHdlYWtNZW1vaXplVW5hcnkgPSAoZm4pID0+IHtcbiAgY29uc3QgY2FjaGUgPSAvKiAgICAgICAgICAgKi8gbmV3IFdlYWtNYXAoKTtcbiAgcmV0dXJuIChhcmcpID0+IHtcbiAgICBjb25zdCBvYXJnID0gYXJnO1xuICAgIGlmIChjYWNoZS5oYXMob2FyZykpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQob2FyZyk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGZuKGFyZyk7XG4gICAgY2FjaGUuc2V0KG9hcmcsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG52YXIgbWFrZVVwZGF0ZVJlY29yZEZyb21QdWJsaWNhdGlvblJlY29yZCA9IChyZWNvcmQpID0+IHtcbiAgY29uc3Qge1xuICAgIGhlYWQ6IHsgdmFsdWUsIGRvbmUgfSxcbiAgICBwdWJsaXNoQ291bnRcbiAgfSA9IHJlY29yZDtcbiAgaWYgKGRvbmUpIHtcbiAgICByZXR1cm4gaGFyZGVuKHsgdmFsdWUsIHVwZGF0ZUNvdW50OiB2b2lkIDAgfSk7XG4gIH1cbiAgcmV0dXJuIGhhcmRlbih7IHZhbHVlLCB1cGRhdGVDb3VudDogcHVibGlzaENvdW50IH0pO1xufTtcbnZhciBtYWtlUHVibGlzaEtpdCA9ICgpID0+IHtcbiAgbGV0IHRhaWxQO1xuICBsZXQgdGFpbFI7XG4gICh7IHByb21pc2U6IHRhaWxQLCByZXNvbHZlOiB0YWlsUiB9ID0gbWFrZVByb21pc2VLaXQoKSk7XG4gIGxldCBjdXJyZW50UHVibGlzaENvdW50ID0gMG47XG4gIGxldCBjdXJyZW50UCA9IHRhaWxQO1xuICBjb25zdCBhZHZhbmNlQ3VycmVudCA9IChkb25lLCB2YWx1ZSwgcmVqZWN0aW9uKSA9PiB7XG4gICAgaWYgKHRhaWxSID09PSB2b2lkIDApIHtcbiAgICAgIHRocm93IEVycm9yKFwiQ2Fubm90IHVwZGF0ZSBzdGF0ZSBhZnRlciB0ZXJtaW5hdGlvbi5cIik7XG4gICAgfVxuICAgIGN1cnJlbnRQdWJsaXNoQ291bnQgKz0gMW47XG4gICAgY3VycmVudFAgPSB0YWlsUDtcbiAgICBjb25zdCByZXNvbHZlQ3VycmVudCA9IHRhaWxSO1xuICAgIGlmIChkb25lKSB7XG4gICAgICB0YWlsUCA9IHRvb0ZhclJlamVjdGlvbjtcbiAgICAgIHRhaWxSID0gdm9pZCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAoeyBwcm9taXNlOiB0YWlsUCwgcmVzb2x2ZTogdGFpbFIgfSA9IG1ha2VQcm9taXNlS2l0KCkpO1xuICAgIH1cbiAgICBpZiAocmVqZWN0aW9uKSB7XG4gICAgICByZXNvbHZlQ3VycmVudChyZWplY3Rpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNvbHZlQ3VycmVudChcbiAgICAgICAgaGFyZGVuKHtcbiAgICAgICAgICBoZWFkOiB7IHZhbHVlLCBkb25lIH0sXG4gICAgICAgICAgcHVibGlzaENvdW50OiBjdXJyZW50UHVibGlzaENvdW50LFxuICAgICAgICAgIHRhaWw6IHRhaWxQXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgbWFrZU1lbW9pemVkVXBkYXRlUmVjb3JkID0gd2Vha01lbW9pemVVbmFyeShcbiAgICBtYWtlVXBkYXRlUmVjb3JkRnJvbVB1YmxpY2F0aW9uUmVjb3JkXG4gICk7XG4gIGNvbnN0IHN1YnNjcmliZXIgPSBGYXIoXCJTdWJzY3JpYmVyXCIsIHtcbiAgICBzdWJzY3JpYmVBZnRlcjogKHB1Ymxpc2hDb3VudCA9IC0xbikgPT4ge1xuICAgICAgYXNzZXJ0LnR5cGVvZihwdWJsaXNoQ291bnQsIFwiYmlnaW50XCIpO1xuICAgICAgaWYgKHB1Ymxpc2hDb3VudCA9PT0gY3VycmVudFB1Ymxpc2hDb3VudCkge1xuICAgICAgICByZXR1cm4gdGFpbFA7XG4gICAgICB9IGVsc2UgaWYgKHB1Ymxpc2hDb3VudCA8IGN1cnJlbnRQdWJsaXNoQ291bnQpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRQO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgXCJzdWJzY3JpYmVBZnRlciBhcmd1bWVudCBtdXN0IGJlIGEgcHJldmlvdXNseS1pc3N1ZWQgcHVibGlzaENvdW50LlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXRVcGRhdGVTaW5jZTogKHVwZGF0ZUNvdW50KSA9PiB7XG4gICAgICBpZiAodXBkYXRlQ291bnQgPT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlci5zdWJzY3JpYmVBZnRlcigpLnRoZW4obWFrZU1lbW9pemVkVXBkYXRlUmVjb3JkKTtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZUNvdW50ID0gQmlnSW50KHVwZGF0ZUNvdW50KTtcbiAgICAgIHJldHVybiBzdWJzY3JpYmVyLnN1YnNjcmliZUFmdGVyKHVwZGF0ZUNvdW50KS50aGVuKCgpID0+IHN1YnNjcmliZXIuZ2V0VXBkYXRlU2luY2UoKSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgcHVibGlzaGVyID0gRmFyKFwiUHVibGlzaGVyXCIsIHtcbiAgICBwdWJsaXNoOiAodmFsdWUpID0+IHtcbiAgICAgIGFkdmFuY2VDdXJyZW50KGZhbHNlLCB2YWx1ZSk7XG4gICAgfSxcbiAgICBmaW5pc2g6IChmaW5hbFZhbHVlKSA9PiB7XG4gICAgICBhZHZhbmNlQ3VycmVudCh0cnVlLCBmaW5hbFZhbHVlKTtcbiAgICB9LFxuICAgIGZhaWw6IChyZWFzb24pID0+IHtcbiAgICAgIGFkdmFuY2VDdXJyZW50KHRydWUsIHZvaWQgMCwgbWFrZVF1aWV0UmVqZWN0aW9uKHJlYXNvbikpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBoYXJkZW4oeyBwdWJsaXNoZXIsIHN1YnNjcmliZXIgfSk7XG59O1xuaGFyZGVuKG1ha2VQdWJsaXNoS2l0KTtcbnZhciBEdXJhYmxlUHVibGlzaEtpdFN0YXRlU2hhcGUgPSBoYXJkZW4oe1xuICB2YWx1ZUR1cmFiaWxpdHk6IE0uYW55KCksXG4gIHB1Ymxpc2hDb3VudDogTS5hbnkoKSxcbiAgc3RhdHVzOiBNLmFueSgpLFxuICBoYXNWYWx1ZTogTS5hbnkoKSxcbiAgdmFsdWU6IE0uYW55KClcbn0pO1xudmFyIGluaXREdXJhYmxlUHVibGlzaEtpdFN0YXRlID0gKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCB7IHZhbHVlRHVyYWJpbGl0eSA9IFwibWFuZGF0b3J5XCIgfSA9IG9wdGlvbnM7XG4gIGFzc2VydC5lcXVhbCh2YWx1ZUR1cmFiaWxpdHksIFwibWFuZGF0b3J5XCIpO1xuICByZXR1cm4ge1xuICAgIC8vXG4gICAgdmFsdWVEdXJhYmlsaXR5LFxuICAgIC8vXG4gICAgcHVibGlzaENvdW50OiAwbixcbiAgICBzdGF0dXM6IFwibGl2ZVwiLFxuICAgIC8vXG4gICAgLy9cbiAgICAvL1xuICAgIC8vXG4gICAgaGFzVmFsdWU6IGZhbHNlLFxuICAgIHZhbHVlOiB2b2lkIDBcbiAgfTtcbn07XG52YXIgZ2V0RXBoZW1lcmFsS2V5ID0gKGZhY2V0cykgPT4gZmFjZXRzLnB1Ymxpc2hlcjtcbnZhciBkdXJhYmxlUHVibGlzaEtpdEVwaGVtZXJhbERhdGEgPSAvKiAgICAgICAgICAgKi8gbmV3IFdlYWtNYXAoKTtcbnZhciBwcm92aWRlQ3VycmVudFAgPSAoc3RhdGUsIGZhY2V0cywgdGFpbCkgPT4ge1xuICBjb25zdCBlcGhlbWVyYWxLZXkgPSBnZXRFcGhlbWVyYWxLZXkoZmFjZXRzKTtcbiAgY29uc3QgZm91bmREYXRhID0gZHVyYWJsZVB1Ymxpc2hLaXRFcGhlbWVyYWxEYXRhLmdldChlcGhlbWVyYWxLZXkpO1xuICBjb25zdCBjdXJyZW50UCA9IGZvdW5kRGF0YSAmJiBmb3VuZERhdGEuY3VycmVudFA7XG4gIGlmIChjdXJyZW50UCkge1xuICAgIHJldHVybiBjdXJyZW50UDtcbiAgfVxuICBjb25zdCB7IHB1Ymxpc2hDb3VudCwgc3RhdHVzLCBoYXNWYWx1ZSwgdmFsdWUgfSA9IHN0YXRlO1xuICBpZiAoIWhhc1ZhbHVlKSB7XG4gICAgYXNzZXJ0KHN0YXR1cyA9PT0gXCJsaXZlXCIpO1xuICAgIHJldHVybiB0YWlsO1xuICB9XG4gIGlmIChzdGF0dXMgPT09IFwibGl2ZVwiIHx8IHN0YXR1cyA9PT0gXCJmaW5pc2hlZFwiKSB7XG4gICAgY29uc3QgY2VsbCA9IGhhcmRlbih7XG4gICAgICBoZWFkOiB7IHZhbHVlLCBkb25lOiBzdGF0dXMgIT09IFwibGl2ZVwiIH0sXG4gICAgICBwdWJsaXNoQ291bnQsXG4gICAgICB0YWlsXG4gICAgfSk7XG4gICAgcmV0dXJuIEUucmVzb2x2ZShjZWxsKTtcbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IFwiZmFpbGVkXCIpIHtcbiAgICByZXR1cm4gbWFrZVF1aWV0UmVqZWN0aW9uKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYEludmFsaWQgZHVyYWJsZSBwcm9taXNlIGtpdCBzdGF0dXM6ICR7cXVvdGUoc3RhdHVzKX1gO1xuICB9XG59O1xudmFyIHByb3ZpZGVEdXJhYmxlUHVibGlzaEtpdEVwaGVtZXJhbERhdGEgPSAoc3RhdGUsIGZhY2V0cykgPT4ge1xuICBjb25zdCBlcGhlbWVyYWxLZXkgPSBnZXRFcGhlbWVyYWxLZXkoZmFjZXRzKTtcbiAgY29uc3QgZm91bmREYXRhID0gZHVyYWJsZVB1Ymxpc2hLaXRFcGhlbWVyYWxEYXRhLmdldChlcGhlbWVyYWxLZXkpO1xuICBpZiAoZm91bmREYXRhKSB7XG4gICAgcmV0dXJuIGZvdW5kRGF0YTtcbiAgfVxuICBjb25zdCB7IHN0YXR1cyB9ID0gc3RhdGU7XG4gIGxldCB0YWlsUDtcbiAgbGV0IHRhaWxSO1xuICBpZiAoc3RhdHVzID09PSBcImxpdmVcIikge1xuICAgICh7IHByb21pc2U6IHRhaWxQLCByZXNvbHZlOiB0YWlsUiB9ID0gbWFrZVByb21pc2VLaXQoKSk7XG4gICAgdm9pZCBFLndoZW4odGFpbFAsIHNpbmszLCBzaW5rMyk7XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSBcImZpbmlzaGVkXCIgfHwgc3RhdHVzID09PSBcImZhaWxlZFwiKSB7XG4gICAgdGFpbFAgPSB0b29GYXJSZWplY3Rpb247XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBJbnZhbGlkIGR1cmFibGUgcHJvbWlzZSBraXQgc3RhdHVzOiAke3F1b3RlKHN0YXR1cyl9YDtcbiAgfVxuICBjb25zdCBvYmogPSBoYXJkZW4oeyBjdXJyZW50UDogdm9pZCAwLCB0YWlsUCwgdGFpbFIgfSk7XG4gIGR1cmFibGVQdWJsaXNoS2l0RXBoZW1lcmFsRGF0YS5zZXQoZXBoZW1lcmFsS2V5LCBvYmopO1xuICByZXR1cm4gb2JqO1xufTtcbnZhciBhZHZhbmNlRHVyYWJsZVB1Ymxpc2hLaXQgPSAoY29udGV4dCwgdmFsdWUsIHRhcmdldFN0YXR1cyA9IFwibGl2ZVwiKSA9PiB7XG4gIGNvbnN0IHsgc3RhdGUsIGZhY2V0cyB9ID0gY29udGV4dDtcbiAgY29uc3QgeyB2YWx1ZUR1cmFiaWxpdHksIHN0YXR1cyB9ID0gc3RhdGU7XG4gIGlmIChzdGF0dXMgIT09IFwibGl2ZVwiKSB7XG4gICAgdGhyb3cgRXJyb3IoXCJDYW5ub3QgdXBkYXRlIHN0YXRlIGFmdGVyIHRlcm1pbmF0aW9uLlwiKTtcbiAgfVxuICBjb25zdCBkb25lID0gdGFyZ2V0U3RhdHVzICE9PSBcImxpdmVcIjtcbiAgaWYgKGRvbmUgfHwgdmFsdWVEdXJhYmlsaXR5ID09PSBcIm1hbmRhdG9yeVwiKSB7XG4gICAgY2FuQmVEdXJhYmxlKHZhbHVlKSB8fCB0aHJvd1JlZGFjdGVkYENhbm5vdCBhY2NlcHQgbm9uLWR1cmFibGUgdmFsdWU6ICR7dmFsdWV9YDtcbiAgfVxuICBjb25zdCB7IHRhaWxQOiBvbGRUYWlsUCwgdGFpbFI6IHJlc29sdmVPbGRUYWlsIH0gPSBwcm92aWRlRHVyYWJsZVB1Ymxpc2hLaXRFcGhlbWVyYWxEYXRhKHN0YXRlLCBmYWNldHMpO1xuICBhc3NlcnQudHlwZW9mKHJlc29sdmVPbGRUYWlsLCBcImZ1bmN0aW9uXCIpO1xuICBjb25zdCBwdWJsaXNoQ291bnQgPSBzdGF0ZS5wdWJsaXNoQ291bnQgKyAxbjtcbiAgc3RhdGUucHVibGlzaENvdW50ID0gcHVibGlzaENvdW50O1xuICBsZXQgdGFpbFA7XG4gIGxldCB0YWlsUjtcbiAgaWYgKGRvbmUpIHtcbiAgICBzdGF0ZS5zdGF0dXMgPSB0YXJnZXRTdGF0dXM7XG4gICAgdGFpbFAgPSB0b29GYXJSZWplY3Rpb247XG4gICAgdGFpbFIgPSB2b2lkIDA7XG4gIH0gZWxzZSB7XG4gICAgKHsgcHJvbWlzZTogdGFpbFAsIHJlc29sdmU6IHRhaWxSIH0gPSBtYWtlUHJvbWlzZUtpdCgpKTtcbiAgICB2b2lkIEUud2hlbih0YWlsUCwgc2luazMsIHNpbmszKTtcbiAgfVxuICBsZXQgY3VycmVudFA7XG4gIGlmICh0YXJnZXRTdGF0dXMgPT09IFwiZmFpbGVkXCIpIHtcbiAgICBzdGF0ZS5oYXNWYWx1ZSA9IHRydWU7XG4gICAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICBjb25zdCByZWplY3Rpb24gPSBtYWtlUXVpZXRSZWplY3Rpb24odmFsdWUpO1xuICAgIHJlc29sdmVPbGRUYWlsKHJlamVjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRvbmUgfHwgdmFsdWVEdXJhYmlsaXR5ICE9PSBcImlnbm9yZWRcIiAmJiBjYW5CZUR1cmFibGUodmFsdWUpKSB7XG4gICAgICBzdGF0ZS5oYXNWYWx1ZSA9IHRydWU7XG4gICAgICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5oYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgc3RhdGUudmFsdWUgPSB2b2lkIDA7XG4gICAgICBjdXJyZW50UCA9IG9sZFRhaWxQO1xuICAgIH1cbiAgICByZXNvbHZlT2xkVGFpbChcbiAgICAgIGhhcmRlbih7XG4gICAgICAgIGhlYWQ6IHsgdmFsdWUsIGRvbmUgfSxcbiAgICAgICAgcHVibGlzaENvdW50LFxuICAgICAgICB0YWlsOiB0YWlsUFxuICAgICAgfSlcbiAgICApO1xuICB9XG4gIGR1cmFibGVQdWJsaXNoS2l0RXBoZW1lcmFsRGF0YS5zZXQoXG4gICAgZ2V0RXBoZW1lcmFsS2V5KGZhY2V0cyksXG4gICAgaGFyZGVuKHsgY3VycmVudFAsIHRhaWxQLCB0YWlsUiB9KVxuICApO1xufTtcbnZhciBwcmVwYXJlRHVyYWJsZVB1Ymxpc2hLaXQgPSAoYmFnZ2FnZSwga2luZE5hbWUpID0+IHtcbiAgY29uc3QgbWFrZU1lbW9pemVkVXBkYXRlUmVjb3JkID0gbWFrZVVwZGF0ZVJlY29yZEZyb21QdWJsaWNhdGlvblJlY29yZDtcbiAgcmV0dXJuIHByZXBhcmVFeG9DbGFzc0tpdChcbiAgICBiYWdnYWdlLFxuICAgIGtpbmROYW1lLFxuICAgIHB1Ymxpc2hLaXRJS2l0LFxuICAgIGluaXREdXJhYmxlUHVibGlzaEtpdFN0YXRlLFxuICAgIHtcbiAgICAgIC8vXG4gICAgICAvL1xuICAgICAgcHVibGlzaGVyOiB7XG4gICAgICAgIHB1Ymxpc2godmFsdWUpIHtcbiAgICAgICAgICBhZHZhbmNlRHVyYWJsZVB1Ymxpc2hLaXQodGhpcywgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBmaW5pc2goZmluYWxWYWx1ZSkge1xuICAgICAgICAgIGFkdmFuY2VEdXJhYmxlUHVibGlzaEtpdCh0aGlzLCBmaW5hbFZhbHVlLCBcImZpbmlzaGVkXCIpO1xuICAgICAgICB9LFxuICAgICAgICBmYWlsKHJlYXNvbikge1xuICAgICAgICAgIGFkdmFuY2VEdXJhYmxlUHVibGlzaEtpdCh0aGlzLCByZWFzb24sIFwiZmFpbGVkXCIpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy9cbiAgICAgIC8vXG4gICAgICBzdWJzY3JpYmVyOiB7XG4gICAgICAgIHN1YnNjcmliZUFmdGVyKHB1Ymxpc2hDb3VudCA9IC0xbikge1xuICAgICAgICAgIGNvbnN0IHsgc3RhdGUsIGZhY2V0cyB9ID0gdGhpcztcbiAgICAgICAgICBjb25zdCB7IHB1Ymxpc2hDb3VudDogY3VycmVudFB1Ymxpc2hDb3VudCB9ID0gc3RhdGU7XG4gICAgICAgICAgY29uc3QgeyBjdXJyZW50UCwgdGFpbFAgfSA9IHByb3ZpZGVEdXJhYmxlUHVibGlzaEtpdEVwaGVtZXJhbERhdGEoXG4gICAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICAgIGZhY2V0c1xuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKHB1Ymxpc2hDb3VudCA9PT0gY3VycmVudFB1Ymxpc2hDb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhaWxQO1xuICAgICAgICAgIH0gZWxzZSBpZiAocHVibGlzaENvdW50IDwgY3VycmVudFB1Ymxpc2hDb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRQIHx8IHByb3ZpZGVDdXJyZW50UChzdGF0ZSwgZmFjZXRzLCB0YWlsUCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgICBcInN1YnNjcmliZUFmdGVyIGFyZ3VtZW50IG11c3QgYmUgYSBwcmV2aW91c2x5LWlzc3VlZCBwdWJsaXNoQ291bnQuXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBnZXRVcGRhdGVTaW5jZSh1cGRhdGVDb3VudCkge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGZhY2V0czogeyBzdWJzY3JpYmVyIH1cbiAgICAgICAgICB9ID0gdGhpcztcbiAgICAgICAgICBpZiAodXBkYXRlQ291bnQgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmliZXIuc3Vic2NyaWJlQWZ0ZXIoKS50aGVuKG1ha2VNZW1vaXplZFVwZGF0ZVJlY29yZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHVwZGF0ZUNvdW50ID0gQmlnSW50KHVwZGF0ZUNvdW50KTtcbiAgICAgICAgICByZXR1cm4gc3Vic2NyaWJlci5zdWJzY3JpYmVBZnRlcih1cGRhdGVDb3VudCkudGhlbigoKSA9PiBzdWJzY3JpYmVyLmdldFVwZGF0ZVNpbmNlKCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBzdGF0ZVNoYXBlOiBEdXJhYmxlUHVibGlzaEtpdFN0YXRlU2hhcGVcbiAgICB9XG4gICk7XG59O1xuaGFyZGVuKHByZXBhcmVEdXJhYmxlUHVibGlzaEtpdCk7XG52YXIgU3Vic2NyaWJlclNoYXBlID0gTS5yZW1vdGFibGUoXCJTdWJzY3JpYmVyXCIpO1xuXG4vL1xudmFyIHNpbms0ID0gKCkgPT4ge1xufTtcbnZhciByZWNvbm5lY3RBc05lZWRlZCA9IGFzeW5jIChnZXR0ZXIsIHNlZWQgPSBbXSkgPT4ge1xuICBsZXQgZGlzY29ubmVjdGlvbjtcbiAgbGV0IGxhc3RWZXJzaW9uID0gLUluZmluaXR5O1xuICBhd2FpdCBudWxsO1xuICBmb3IgKGxldCBpMyA9IDA7IDsgaTMgKz0gMSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHRQID0gaTMgPCBzZWVkLmxlbmd0aCA/IHNlZWRbaTNdIDogZ2V0dGVyKCk7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXN1bHRQO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChpc1VwZ3JhZGVEaXNjb25uZWN0aW9uKGVycikpIHtcbiAgICAgICAgaWYgKCFkaXNjb25uZWN0aW9uKSB7XG4gICAgICAgICAgZGlzY29ubmVjdGlvbiA9IGVycjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGluY2FybmF0aW9uTnVtYmVyOiB2ZXJzaW9uIH0gPSBlcnI7XG4gICAgICAgIGlmICh2ZXJzaW9uID4gbGFzdFZlcnNpb24pIHtcbiAgICAgICAgICBsYXN0VmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdDIoZXJyKSAmJiBkaXNjb25uZWN0aW9uICYmIGRpc2Nvbm5lY3Rpb24gIT09IGVycikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG5vdGUoXG4gICAgICAgICAgICBlcnIsXG4gICAgICAgICAgICByZWRhY3RlZGBBdHRlbXB0aW5nIHRvIHJlY292ZXIgZnJvbSBkaXNjb25uZWN0aW9uOiAke2Rpc2Nvbm5lY3Rpb259YFxuICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKF9lcnIpIHtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxufTtcbnZhciBtYWtlRWFjaEl0ZXJhdG9yID0gKHRvcGljLCBuZXh0Q2VsbFApID0+IHtcbiAgY29uc3Qgc2VsZiA9IEZhcihcIkVhY2hJdGVyYXRvclwiLCB7XG4gICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTogKCkgPT4gc2VsZixcbiAgICBuZXh0OiAoKSA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGhlYWQ6IHJlc3VsdFAsXG4gICAgICAgIHB1Ymxpc2hDb3VudDogcHVibGlzaENvdW50UCxcbiAgICAgICAgdGFpbDogdGFpbFBcbiAgICAgIH0gPSBFLmdldChuZXh0Q2VsbFApO1xuICAgICAgY29uc3QgZ2V0U3VjY2Vzc29yID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBwdWJsaXNoQ291bnQgPSBhd2FpdCBwdWJsaXNoQ291bnRQO1xuICAgICAgICBhc3NlcnQudHlwZW9mKHB1Ymxpc2hDb3VudCwgXCJiaWdpbnRcIik7XG4gICAgICAgIGNvbnN0IHN1Y2Nlc3NvciA9IGF3YWl0IEUodG9waWMpLnN1YnNjcmliZUFmdGVyKHB1Ymxpc2hDb3VudCk7XG4gICAgICAgIGNvbnN0IG5ld1B1Ymxpc2hDb3VudCA9IHN1Y2Nlc3Nvci5wdWJsaXNoQ291bnQ7XG4gICAgICAgIGlmIChuZXdQdWJsaXNoQ291bnQgIT09IHB1Ymxpc2hDb3VudCArIDFuKSB7XG4gICAgICAgICAgdGhyb3dSZWRhY3RlZGBlYWNoSXRlcmF0b3IgYnJva2VuIGJ5IGdhcCBmcm9tIHB1Ymxpc2hDb3VudCAke3B1Ymxpc2hDb3VudH0gdG8gJHtuZXdQdWJsaXNoQ291bnR9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VjY2Vzc29yO1xuICAgICAgfTtcbiAgICAgIG5leHRDZWxsUCA9IHJlY29ubmVjdEFzTmVlZGVkKGdldFN1Y2Nlc3NvciwgW3RhaWxQXSk7XG4gICAgICB2b2lkIEUud2hlbihwdWJsaXNoQ291bnRQLCBzaW5rNCwgc2luazQpO1xuICAgICAgdm9pZCBFLndoZW4obmV4dENlbGxQLCBzaW5rNCwgc2luazQpO1xuICAgICAgcmV0dXJuIHJlc3VsdFA7XG4gICAgfSxcbiAgICBmb3JrOiAoKSA9PiBtYWtlRWFjaEl0ZXJhdG9yKHRvcGljLCBuZXh0Q2VsbFApXG4gIH0pO1xuICByZXR1cm4gc2VsZjtcbn07XG52YXIgc3Vic2NyaWJlRWFjaCA9ICh0b3BpYykgPT4ge1xuICBjb25zdCBpdGVyYWJsZSA9IEZhcihcIkVhY2hJdGVyYWJsZVwiLCB7XG4gICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTogKCkgPT4ge1xuICAgICAgY29uc3QgZmlyc3RDZWxsUCA9IHJlY29ubmVjdEFzTmVlZGVkKCgpID0+IEUodG9waWMpLnN1YnNjcmliZUFmdGVyKCkpO1xuICAgICAgcmV0dXJuIG1ha2VFYWNoSXRlcmF0b3IodG9waWMsIGZpcnN0Q2VsbFApO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBpdGVyYWJsZTtcbn07XG5oYXJkZW4oc3Vic2NyaWJlRWFjaCk7XG52YXIgY2xvbmVMYXRlc3RJdGVyYXRvciA9ICh0b3BpYywgbG9jYWxVcGRhdGVDb3VudCwgdGVybWluYWxSZXN1bHQpID0+IHtcbiAgbGV0IG11dGV4ID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIGNvbnN0IG1heWJlUmVxdWVzdE5leHRSZXN1bHQgPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKHRlcm1pbmFsUmVzdWx0KSB7XG4gICAgICByZXR1cm4gdGVybWluYWxSZXN1bHQ7XG4gICAgfVxuICAgIGNvbnN0IHsgdmFsdWUsIHVwZGF0ZUNvdW50IH0gPSBhd2FpdCByZWNvbm5lY3RBc05lZWRlZChcbiAgICAgICgpID0+IEUodG9waWMpLmdldFVwZGF0ZVNpbmNlKGxvY2FsVXBkYXRlQ291bnQpXG4gICAgKTtcbiAgICBsb2NhbFVwZGF0ZUNvdW50ID0gdXBkYXRlQ291bnQ7XG4gICAgaWYgKHVwZGF0ZUNvdW50ID09PSB2b2lkIDApIHtcbiAgICAgIHRlcm1pbmFsUmVzdWx0ID0gaGFyZGVuKHsgZG9uZTogdHJ1ZSwgdmFsdWUgfSk7XG4gICAgICByZXR1cm4gdGVybWluYWxSZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBoYXJkZW4oeyBkb25lOiBmYWxzZSwgdmFsdWUgfSk7XG4gIH07XG4gIGNvbnN0IHNlbGYgPSBGYXIoXCJMYXRlc3RJdGVyYXRvclwiLCB7XG4gICAgZm9yazogKCkgPT4gY2xvbmVMYXRlc3RJdGVyYXRvcih0b3BpYywgbG9jYWxVcGRhdGVDb3VudCwgdGVybWluYWxSZXN1bHQpLFxuICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl06ICgpID0+IHNlbGYsXG4gICAgbmV4dDogYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKHRlcm1pbmFsUmVzdWx0KSB7XG4gICAgICAgIHJldHVybiB0ZXJtaW5hbFJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5leHRSZXN1bHQgPSBtdXRleC50aGVuKG1heWJlUmVxdWVzdE5leHRSZXN1bHQpO1xuICAgICAgbXV0ZXggPSBuZXh0UmVzdWx0LnRoZW4oc2luazQsIHNpbms0KTtcbiAgICAgIHJldHVybiBuZXh0UmVzdWx0O1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzZWxmO1xufTtcbnZhciBtYWtlTGF0ZXN0SXRlcmF0b3IgPSAodG9waWMpID0+IGNsb25lTGF0ZXN0SXRlcmF0b3IodG9waWMpO1xudmFyIHN1YnNjcmliZUxhdGVzdCA9ICh0b3BpYykgPT4ge1xuICBjb25zdCBpdGVyYWJsZSA9IEZhcihcIkxhdGVzdEl0ZXJhYmxlXCIsIHtcbiAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdOiAoKSA9PiBtYWtlTGF0ZXN0SXRlcmF0b3IodG9waWMpXG4gIH0pO1xuICByZXR1cm4gaXRlcmFibGU7XG59O1xuaGFyZGVuKHN1YnNjcmliZUxhdGVzdCk7XG5cbi8vXG52YXIgbWFrZU5vdGlmaWVyID0gKHNoYXJhYmxlSW50ZXJuYWxzUCkgPT4ge1xuICBjb25zdCBub3RpZmllciA9IEZhcihcIm5vdGlmaWVyXCIsIHtcbiAgICAuLi5zdWJzY3JpYmVMYXRlc3Qoc2hhcmFibGVJbnRlcm5hbHNQKSxcbiAgICBnZXRVcGRhdGVTaW5jZTogYXN5bmMgKHVwZGF0ZUNvdW50KSA9PiBFKHNoYXJhYmxlSW50ZXJuYWxzUCkuZ2V0VXBkYXRlU2luY2UodXBkYXRlQ291bnQpLFxuICAgIC8qXG5cblxuXG5cbiAgICAgKi9cbiAgICBnZXRTaGFyYWJsZU5vdGlmaWVySW50ZXJuYWxzOiBhc3luYyAoKSA9PiBzaGFyYWJsZUludGVybmFsc1AsXG4gICAgLypcblxuXG5cbiAgICAgKi9cbiAgICBnZXRTdG9yZUtleTogKCkgPT4gaGFyZGVuKHsgbm90aWZpZXIgfSlcbiAgfSk7XG4gIHJldHVybiBub3RpZmllcjtcbn07XG52YXIgbWFrZU5vdGlmaWVyRnJvbVN1YnNjcmliZXIgPSAoc3Vic2NyaWJlcikgPT4ge1xuICBjb25zdCBiYXNlTm90aWZpZXIgPSBoYXJkZW4oe1xuICAgIGdldFVwZGF0ZVNpbmNlOiAodXBkYXRlQ291bnQgPSB2b2lkIDApID0+IEUoc3Vic2NyaWJlcikuZ2V0VXBkYXRlU2luY2UodXBkYXRlQ291bnQpXG4gIH0pO1xuICBjb25zdCBub3RpZmllciA9IEZhcihcIm5vdGlmaWVyXCIsIHtcbiAgICAuLi5tYWtlTm90aWZpZXIoYmFzZU5vdGlmaWVyKSxcbiAgICAuLi5iYXNlTm90aWZpZXJcbiAgfSk7XG4gIHJldHVybiBub3RpZmllcjtcbn07XG5oYXJkZW4obWFrZU5vdGlmaWVyRnJvbVN1YnNjcmliZXIpO1xudmFyIG1ha2VOb3RpZmllcktpdCA9ICguLi5pbml0aWFsU3RhdGVBcnIpID0+IHtcbiAgY29uc3QgeyBwdWJsaXNoZXIsIHN1YnNjcmliZXIgfSA9IG1ha2VQdWJsaXNoS2l0KCk7XG4gIGNvbnN0IG5vdGlmaWVyID0gbWFrZU5vdGlmaWVyRnJvbVN1YnNjcmliZXIoc3Vic2NyaWJlcik7XG4gIGNvbnN0IHVwZGF0ZXIgPSBGYXIoXCJ1cGRhdGVyXCIsIHtcbiAgICB1cGRhdGVTdGF0ZTogKHN0YXRlKSA9PiBwdWJsaXNoZXIucHVibGlzaChzdGF0ZSksXG4gICAgZmluaXNoOiAoY29tcGxldGlvbikgPT4gcHVibGlzaGVyLmZpbmlzaChjb21wbGV0aW9uKSxcbiAgICBmYWlsOiAocmVhc29uKSA9PiBwdWJsaXNoZXIuZmFpbChyZWFzb24pXG4gIH0pO1xuICBhc3NlcnQyKGluaXRpYWxTdGF0ZUFyci5sZW5ndGggPD0gMSwgXCJ0b28gbWFueSBhcmd1bWVudHNcIik7XG4gIGlmIChpbml0aWFsU3RhdGVBcnIubGVuZ3RoID09PSAxKSB7XG4gICAgdXBkYXRlci51cGRhdGVTdGF0ZShpbml0aWFsU3RhdGVBcnJbMF0pO1xuICB9XG4gIHJldHVybiBoYXJkZW4oeyBub3RpZmllciwgdXBkYXRlciB9KTtcbn07XG52YXIgbWFrZU5vdGlmaWVyRnJvbUFzeW5jSXRlcmFibGUgPSAoYXN5bmNJdGVyYWJsZVApID0+IHtcbiAgY29uc3QgaXRlcmF0b3JQID0gRShhc3luY0l0ZXJhYmxlUClbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gIGxldCBvcHROZXh0UHJvbWlzZTtcbiAgbGV0IGN1cnJlbnRVcGRhdGVDb3VudCA9IDBuO1xuICBsZXQgY3VycmVudFJlc3BvbnNlO1xuICBsZXQgZmluYWwgPSBmYWxzZTtcbiAgY29uc3QgYmFzZU5vdGlmaWVyID0gRmFyKFwiYmFzZU5vdGlmaWVyXCIsIHtcbiAgICBnZXRVcGRhdGVTaW5jZSh1cGRhdGVDb3VudCA9IC0xbikge1xuICAgICAgaWYgKHVwZGF0ZUNvdW50IDwgY3VycmVudFVwZGF0ZUNvdW50KSB7XG4gICAgICAgIGlmIChjdXJyZW50UmVzcG9uc2UpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGN1cnJlbnRSZXNwb25zZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodXBkYXRlQ291bnQgIT09IGN1cnJlbnRVcGRhdGVDb3VudCkge1xuICAgICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgICBcImdldFVwZGF0ZVNpbmNlIGFyZ3VtZW50IG11c3QgYmUgYSBwcmV2aW91c2x5LWlzc3VlZCB1cGRhdGVDb3VudC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGZpbmFsKSB7XG4gICAgICAgIGFzc2VydDIoY3VycmVudFJlc3BvbnNlICE9PSB2b2lkIDApO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGN1cnJlbnRSZXNwb25zZSk7XG4gICAgICB9XG4gICAgICBpZiAoIW9wdE5leHRQcm9taXNlKSB7XG4gICAgICAgIGNvbnN0IG5leHRJdGVyUmVzdWx0UCA9IEUoaXRlcmF0b3JQKS5uZXh0KCk7XG4gICAgICAgIG9wdE5leHRQcm9taXNlID0gRS53aGVuKFxuICAgICAgICAgIG5leHRJdGVyUmVzdWx0UCxcbiAgICAgICAgICAoeyBkb25lLCB2YWx1ZSB9KSA9PiB7XG4gICAgICAgICAgICBhc3NlcnQyKCFmaW5hbCk7XG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICBmaW5hbCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50VXBkYXRlQ291bnQgKz0gMW47XG4gICAgICAgICAgICBjdXJyZW50UmVzcG9uc2UgPSBoYXJkZW4oe1xuICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgdXBkYXRlQ291bnQ6IGRvbmUgPyB2b2lkIDAgOiBjdXJyZW50VXBkYXRlQ291bnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgb3B0TmV4dFByb21pc2UgPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFJlc3BvbnNlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgKF9yZWFzb24pID0+IHtcbiAgICAgICAgICAgIGZpbmFsID0gdHJ1ZTtcbiAgICAgICAgICAgIGN1cnJlbnRSZXNwb25zZSA9IC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbmV4dEl0ZXJSZXN1bHRQO1xuICAgICAgICAgICAgb3B0TmV4dFByb21pc2UgPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFJlc3BvbnNlO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcHROZXh0UHJvbWlzZTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBub3RpZmllciA9IEZhcihcIm5vdGlmaWVyXCIsIHtcbiAgICAvL1xuICAgIC8vXG4gICAgLi4ubWFrZU5vdGlmaWVyKGJhc2VOb3RpZmllciksXG4gICAgLi4uYmFzZU5vdGlmaWVyXG4gIH0pO1xuICByZXR1cm4gbm90aWZpZXI7XG59O1xuaGFyZGVuKG1ha2VOb3RpZmllckZyb21Bc3luY0l0ZXJhYmxlKTtcblxuLy9cbnZhciBtYWtlUGlubmVkSGlzdG9yeVRvcGljID0gKHRvcGljKSA9PiB7XG4gIGNvbnN0IHBpbm5lZFB1Ykxpc3QgPSB0b3BpYy5zdWJzY3JpYmVBZnRlcigpO1xuICByZXR1cm4gRmFyKFwiUGlubmVkSGlzdG9yeVRvcGljXCIsIHtcbiAgICBzdWJzY3JpYmVBZnRlcjogYXN5bmMgKHB1Ymxpc2hDb3VudCA9IC0xbikgPT4ge1xuICAgICAgaWYgKHB1Ymxpc2hDb3VudCA9PT0gLTFuKSB7XG4gICAgICAgIHJldHVybiBwaW5uZWRQdWJMaXN0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRvcGljLnN1YnNjcmliZUFmdGVyKHB1Ymxpc2hDb3VudCk7XG4gICAgfSxcbiAgICBnZXRVcGRhdGVTaW5jZTogYXN5bmMgKHVwZGF0ZUNvdW50ID0gdm9pZCAwKSA9PiB7XG4gICAgICByZXR1cm4gdG9waWMuZ2V0VXBkYXRlU2luY2UodXBkYXRlQ291bnQpO1xuICAgIH1cbiAgfSk7XG59O1xuaGFyZGVuKG1ha2VQaW5uZWRIaXN0b3J5VG9waWMpO1xuXG4vL1xudmFyIG1ha2VTdWJzY3JpcHRpb24gPSAodG9waWMpID0+IHtcbiAgY29uc3Qgc3Vic2NyaXB0aW9uID0gRmFyKFwiU3Vic2NyaXB0aW9uXCIsIHtcbiAgICAuLi5zdWJzY3JpYmVFYWNoKHRvcGljKSxcbiAgICBzdWJzY3JpYmVBZnRlcjogYXN5bmMgKHB1Ymxpc2hDb3VudCkgPT4gRSh0b3BpYykuc3Vic2NyaWJlQWZ0ZXIocHVibGlzaENvdW50KSxcbiAgICAvKlxuXG5cblxuXG4gICAgICovXG4gICAgZ2V0U2hhcmFibGVTdWJzY3JpcHRpb25JbnRlcm5hbHM6IGFzeW5jICgpID0+IHRvcGljLFxuICAgIGdldFN0b3JlS2V5OiAoKSA9PiBoYXJkZW4oeyBzdWJzY3JpcHRpb24gfSlcbiAgfSk7XG4gIHJldHVybiBzdWJzY3JpcHRpb247XG59O1xuaGFyZGVuKG1ha2VTdWJzY3JpcHRpb24pO1xudmFyIG1ha2VTdWJzY3JpcHRpb25LaXQgPSAoKSA9PiB7XG4gIGNvbnN0IHsgcHVibGlzaGVyLCBzdWJzY3JpYmVyIH0gPSBtYWtlUHVibGlzaEtpdCgpO1xuICBjb25zdCBwaW5uZWRIaXN0b3J5VG9waWMgPSBtYWtlUGlubmVkSGlzdG9yeVRvcGljKHN1YnNjcmliZXIpO1xuICBjb25zdCBzdWJzY3JpcHRpb24gPSBtYWtlU3Vic2NyaXB0aW9uKHBpbm5lZEhpc3RvcnlUb3BpYyk7XG4gIGNvbnN0IHB1YmxpY2F0aW9uID0gRmFyKFwicHVibGljYXRpb25cIiwge1xuICAgIHVwZGF0ZVN0YXRlOiAobm9uRmluYWxWYWx1ZSkgPT4gcHVibGlzaGVyLnB1Ymxpc2gobm9uRmluYWxWYWx1ZSksXG4gICAgZmluaXNoOiAoY29tcGxldGlvbikgPT4gcHVibGlzaGVyLmZpbmlzaChjb21wbGV0aW9uKSxcbiAgICBmYWlsOiAocmVhc29uKSA9PiBwdWJsaXNoZXIuZmFpbChyZWFzb24pXG4gIH0pO1xuICByZXR1cm4gaGFyZGVuKHsgcHVibGljYXRpb24sIHN1YnNjcmlwdGlvbiB9KTtcbn07XG5oYXJkZW4obWFrZVN1YnNjcmlwdGlvbktpdCk7XG5cbi8vXG52YXIgb2JzZXJ2ZUl0ZXJhdG9yID0gKGFzeW5jSXRlcmF0b3JQLCBpdGVyYXRpb25PYnNlcnZlcikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKGFjaywgb2JzZXJ2ZXJFcnJvcikgPT4ge1xuICAgIGNvbnN0IHJlY3VyID0gKCkgPT4ge1xuICAgICAgRS53aGVuKFxuICAgICAgICBFKGFzeW5jSXRlcmF0b3JQKS5uZXh0KCksXG4gICAgICAgICh7IHZhbHVlLCBkb25lIH0pID0+IHtcbiAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgaXRlcmF0aW9uT2JzZXJ2ZXIuZmluaXNoICYmIGl0ZXJhdGlvbk9ic2VydmVyLmZpbmlzaCh2YWx1ZSk7XG4gICAgICAgICAgICBhY2sodm9pZCAwKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlcmF0aW9uT2JzZXJ2ZXIudXBkYXRlU3RhdGUgJiYgaXRlcmF0aW9uT2JzZXJ2ZXIudXBkYXRlU3RhdGUodmFsdWUpO1xuICAgICAgICAgICAgcmVjdXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIChyZWFzb24pID0+IHtcbiAgICAgICAgICBpdGVyYXRpb25PYnNlcnZlci5mYWlsICYmIGl0ZXJhdGlvbk9ic2VydmVyLmZhaWwocmVhc29uKTtcbiAgICAgICAgICBhY2sodm9pZCAwKTtcbiAgICAgICAgfVxuICAgICAgKS5jYXRjaChvYnNlcnZlckVycm9yKTtcbiAgICB9O1xuICAgIHJlY3VyKCk7XG4gIH0pO1xufTtcbnZhciBvYnNlcnZlSXRlcmF0aW9uID0gKGFzeW5jSXRlcmFibGVQLCBpdGVyYXRpb25PYnNlcnZlcikgPT4ge1xuICBjb25zdCBpdGVyYXRvclAgPSBFKGFzeW5jSXRlcmFibGVQKVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgcmV0dXJuIG9ic2VydmVJdGVyYXRvcihpdGVyYXRvclAsIGl0ZXJhdGlvbk9ic2VydmVyKTtcbn07XG5cbi8vXG52YXIgZm9yRWFjaFB1YmxpY2F0aW9uUmVjb3JkID0gYXN5bmMgKHN1YnNjcmliZXIsIGNvbnN1bWVWYWx1ZSkgPT4ge1xuICBjb25zdCBpdGVyYXRvciA9IHN1YnNjcmliZUVhY2goc3Vic2NyaWJlcilbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gIGxldCBmaW5pc2hlZCA9IGZhbHNlO1xuICBhd2FpdCBudWxsO1xuICB3aGlsZSAoIWZpbmlzaGVkKSB7XG4gICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gYXdhaXQgaXRlcmF0b3IubmV4dCgpO1xuICAgIGF3YWl0IGNvbnN1bWVWYWx1ZSh2YWx1ZSk7XG4gICAgZmluaXNoZWQgPSAhIWRvbmU7XG4gIH1cbn07XG52YXIgbWFrZVN0b3JlZFN1YnNjcmliZXIgPSAoc3Vic2NyaWJlciwgc3RvcmFnZU5vZGUsIG1hcnNoYWxsZXIpID0+IHtcbiAgYXNzZXJ0QWxsRGVmaW5lZCh7IHN1YnNjcmliZXIsIHN0b3JhZ2VOb2RlLCBtYXJzaGFsbGVyIH0pO1xuICBjb25zdCBtYXJzaGFsbFRvU3RvcmFnZSA9IG1ha2VTZXJpYWxpemVUb1N0b3JhZ2Uoc3RvcmFnZU5vZGUsIG1hcnNoYWxsZXIpO1xuICBmb3JFYWNoUHVibGljYXRpb25SZWNvcmQoc3Vic2NyaWJlciwgbWFyc2hhbGxUb1N0b3JhZ2UpLmNhdGNoKChlcnIpID0+IHtcbiAgICBjb25zb2xlLmVycm9yKFwiU3RvcmVkU3Vic2NyaWJlciBmYWlsZWQgdG8gaXRlcmF0ZVwiLCBlcnIpO1xuICB9KTtcbiAgY29uc3QgdW5zZXJpYWxpemVyID0gRmFyKFwidW5zZXJpYWxpemVyXCIsIHtcbiAgICBmcm9tQ2FwRGF0YTogKGRhdGEpID0+IEUobWFyc2hhbGxlcikuZnJvbUNhcERhdGEoZGF0YSksXG4gICAgdW5zZXJpYWxpemU6IChkYXRhKSA9PiBFKG1hcnNoYWxsZXIpLmZyb21DYXBEYXRhKGRhdGEpXG4gIH0pO1xuICBjb25zdCBzdG9yZXN1YiA9IEZhcihcIlN0b3JlZFN1YnNjcmliZXJcIiwge1xuICAgIHN1YnNjcmliZUFmdGVyOiAocHVibGlzaENvdW50KSA9PiBzdWJzY3JpYmVyLnN1YnNjcmliZUFmdGVyKHB1Ymxpc2hDb3VudCksXG4gICAgZ2V0VXBkYXRlU2luY2U6ICh1cGRhdGVDb3VudCkgPT4gc3Vic2NyaWJlci5nZXRVcGRhdGVTaW5jZSh1cGRhdGVDb3VudCksXG4gICAgZ2V0UGF0aDogKCkgPT4gRShzdG9yYWdlTm9kZSkuZ2V0UGF0aCgpLFxuICAgIGdldFN0b3JlS2V5OiAoKSA9PiBFKHN0b3JhZ2VOb2RlKS5nZXRTdG9yZUtleSgpLFxuICAgIGdldFVuc2VyaWFsaXplcjogKCkgPT4gdW5zZXJpYWxpemVyXG4gIH0pO1xuICByZXR1cm4gc3RvcmVzdWI7XG59O1xudmFyIG1ha2VTdG9yZWRTdWJzY3JpcHRpb24gPSAoc3Vic2NyaXB0aW9uLCBzdG9yYWdlTm9kZSwgbWFyc2hhbGxlciA9IG1ha2VNYXJzaGFsKHZvaWQgMCwgdm9pZCAwLCB7XG4gIG1hcnNoYWxTYXZlRXJyb3I6ICgpID0+IHtcbiAgfSxcbiAgc2VyaWFsaXplQm9keUZvcm1hdDogXCJzbWFsbGNhcHNcIlxufSkpID0+IHtcbiAgY29uc3QgdW5zZXJpYWxpemVyID0gRmFyKFwidW5zZXJpYWxpemVyXCIsIHtcbiAgICBmcm9tQ2FwRGF0YTogKGRhdGEpID0+IEUobWFyc2hhbGxlcikuZnJvbUNhcERhdGEoZGF0YSksXG4gICAgdW5zZXJpYWxpemU6IChkYXRhKSA9PiBFKG1hcnNoYWxsZXIpLmZyb21DYXBEYXRhKGRhdGEpXG4gIH0pO1xuICBsZXQgcHVibGlzaEZhaWxlZCA9IGZhbHNlO1xuICBsZXQgcHVibGlzaEV4Y2VwdGlvbjtcbiAgY29uc3QgZmFpbCA9IChlcnIpID0+IHtcbiAgICBwdWJsaXNoRmFpbGVkID0gdHJ1ZTtcbiAgICBwdWJsaXNoRXhjZXB0aW9uID0gZXJyO1xuICB9O1xuICBjb25zdCBwdWJsaXNoVmFsdWUgPSAob2JqKSA9PiB7XG4gICAgYXNzZXJ0KHN0b3JhZ2VOb2RlKTtcbiAgICBpZiAocHVibGlzaEZhaWxlZCkge1xuICAgICAgdGhyb3cgcHVibGlzaEV4Y2VwdGlvbjtcbiAgICB9XG4gICAgRShtYXJzaGFsbGVyKS50b0NhcERhdGEob2JqKS50aGVuKChzZXJpYWxpemVkKSA9PiB7XG4gICAgICBjb25zdCBlbmNvZGVkID0gSlNPTi5zdHJpbmdpZnkoc2VyaWFsaXplZCk7XG4gICAgICByZXR1cm4gRShzdG9yYWdlTm9kZSkuc2V0VmFsdWUoZW5jb2RlZCk7XG4gICAgfSkuY2F0Y2goZmFpbCk7XG4gIH07XG4gIGlmIChzdG9yYWdlTm9kZSkge1xuICAgIG9ic2VydmVJdGVyYXRpb24oc3Vic2NyaXB0aW9uLCB7XG4gICAgICB1cGRhdGVTdGF0ZTogcHVibGlzaFZhbHVlLFxuICAgICAgZmluaXNoOiBwdWJsaXNoVmFsdWVcbiAgICB9KS5jYXRjaChmYWlsKTtcbiAgfVxuICBjb25zdCBzdG9yZXN1YiA9IEZhcihcIlN0b3JlZFN1YnNjcmlwdGlvblwiLCB7XG4gICAgLy9cbiAgICBnZXRTdG9yZUtleTogYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKCFzdG9yYWdlTm9kZSkge1xuICAgICAgICByZXR1cm4gaGFyZGVuKHsgc3Vic2NyaXB0aW9uIH0pO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3RvcmVLZXkgPSBhd2FpdCBFKHN0b3JhZ2VOb2RlKS5nZXRTdG9yZUtleSgpO1xuICAgICAgcmV0dXJuIGhhcmRlbih7IC4uLnN0b3JlS2V5LCBzdWJzY3JpcHRpb24gfSk7XG4gICAgfSxcbiAgICBnZXRVbnNlcmlhbGl6ZXI6ICgpID0+IHVuc2VyaWFsaXplcixcbiAgICBnZXRTaGFyYWJsZVN1YnNjcmlwdGlvbkludGVybmFsczogKCkgPT4gc3Vic2NyaXB0aW9uLmdldFNoYXJhYmxlU3Vic2NyaXB0aW9uSW50ZXJuYWxzKCksXG4gICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTogKCkgPT4gc3Vic2NyaXB0aW9uW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpLFxuICAgIHN1YnNjcmliZUFmdGVyOiAocHVibGlzaENvdW50KSA9PiBzdWJzY3JpcHRpb24uc3Vic2NyaWJlQWZ0ZXIocHVibGlzaENvdW50KVxuICB9KTtcbiAgcmV0dXJuIHN0b3Jlc3ViO1xufTtcbmhhcmRlbihtYWtlU3RvcmVkU3Vic2NyaXB0aW9uKTtcbnZhciBtYWtlU3RvcmVkUHVibGlzaEtpdCA9IChzdG9yYWdlTm9kZSwgbWFyc2hhbGxlcikgPT4ge1xuICBjb25zdCB7IHB1Ymxpc2hlciwgc3Vic2NyaWJlciB9ID0gbWFrZVB1Ymxpc2hLaXQoKTtcbiAgcmV0dXJuIHtcbiAgICBwdWJsaXNoZXIsXG4gICAgLy9cbiAgICBzdWJzY3JpYmVyOiBtYWtlU3RvcmVkU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBzdG9yYWdlTm9kZSwgbWFyc2hhbGxlcilcbiAgfTtcbn07XG5oYXJkZW4obWFrZVN0b3JlZFB1Ymxpc2hLaXQpO1xuXG4vL1xudmFyIGV2ZW50TG9vcEl0ZXJhdGlvbiA9IGFzeW5jICgpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlMikgPT4gc2V0SW1tZWRpYXRlKHJlc29sdmUyKSk7XG5oYXJkZW4oZXZlbnRMb29wSXRlcmF0aW9uKTtcbnZhciBzdHJpbmdPclRhZyA9ICh2YWx1ZSkgPT4ge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiBTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWVbU3ltYm9sLnRvU3RyaW5nVGFnXTtcbiAgfVxuICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbn07XG52YXIgaW5zcGVjdE1hcFN0b3JlID0gKHN0b3JlKSA9PiB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBmb3IgKGNvbnN0IGtleSBvZiBzdG9yZS5rZXlzKCkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHN0b3JlLmdldChrZXkpO1xuICAgIGNvbnN0IGhhc0tleXMgPSB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgXCJrZXlzXCIgaW4gdmFsdWU7XG4gICAgY29uc3QgaW5kZXggPSBzdHJpbmdPclRhZyhrZXkpO1xuICAgIGlmIChoYXNLZXlzICYmIFwiZ2V0XCIgaW4gdmFsdWUpIHtcbiAgICAgIG9ialtpbmRleF0gPSBpbnNwZWN0TWFwU3RvcmUodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoaGFzS2V5cykge1xuICAgICAgb2JqW2luZGV4XSA9IEFycmF5LmZyb20odmFsdWUua2V5cygpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2luZGV4XSA9IHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0ICYmIFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWx1ZSA/IHZhbHVlW1N5bWJvbC50b1N0cmluZ1RhZ10gOiB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG5oYXJkZW4oaW5zcGVjdE1hcFN0b3JlKTtcblxuLy9cbnZhciBtYWtlRmFrZVN0b3JhZ2UgPSAocGF0aCwgcHVibGljYXRpb24pID0+IHtcbiAgbGV0IHNldFZhbHVlQ2FsbHMgPSAwO1xuICBjb25zdCBmdWxsUGF0aCA9IGBwdWJsaXNoLiR7cGF0aH1gO1xuICBjb25zdCBzdG9yZUtleSA9IGhhcmRlbih7XG4gICAgc3RvcmVOYW1lOiBcInN3aW5nc2V0XCIsXG4gICAgc3RvcmVTdWJrZXk6IGBzd2luZ3NldC9kYXRhOiR7ZnVsbFBhdGh9YCxcbiAgICBkYXRhUHJlZml4Qnl0ZXM6IFwiXCJcbiAgfSk7XG4gIGNvbnN0IHN0b3JhZ2UgPSBGYXIoXCJTdG9yYWdlTm9kZVwiLCB7XG4gICAgZ2V0UGF0aDogKCkgPT4gcGF0aCxcbiAgICBnZXRTdG9yZUtleTogYXN5bmMgKCkgPT4gc3RvcmVLZXksXG4gICAgc2V0VmFsdWU6IGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgc2V0VmFsdWVDYWxscyArPSAxO1xuICAgICAgYXNzZXJ0LnR5cGVvZih2YWx1ZSwgXCJzdHJpbmdcIik7XG4gICAgICBpZiAocHVibGljYXRpb24pIHtcbiAgICAgICAgcHVibGljYXRpb24udXBkYXRlU3RhdGUodmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbWFrZUNoaWxkTm9kZTogKCkgPT4gc3RvcmFnZSxcbiAgICBjb3VudFNldFZhbHVlQ2FsbHM6ICgpID0+IHNldFZhbHVlQ2FsbHNcbiAgfSk7XG4gIHJldHVybiBzdG9yYWdlO1xufTtcbmhhcmRlbihtYWtlRmFrZVN0b3JhZ2UpO1xudmFyIG1ha2VGYWtlTWFyc2hhbGxlciA9ICgpID0+IG1ha2VNYXJzaGFsKHZvaWQgMCwgdm9pZCAwLCB7XG4gIG1hcnNoYWxTYXZlRXJyb3I6ICgpID0+IHtcbiAgfVxufSk7XG5oYXJkZW4obWFrZUZha2VNYXJzaGFsbGVyKTtcblxuLy9cbnZhciBwcmVwYXJlUmVjb3JkZXIgPSAoYmFnZ2FnZSwgbWFyc2hhbGxlcikgPT4ge1xuICBjb25zdCBtYWtlUmVjb3JkZXIgPSBwcmVwYXJlRXhvQ2xhc3MoXG4gICAgYmFnZ2FnZSxcbiAgICBcIlJlY29yZGVyXCIsXG4gICAgTS5pbnRlcmZhY2UoXCJSZWNvcmRlclwiLCB7XG4gICAgICBnZXRTdG9yYWdlTm9kZTogTS5jYWxsKCkucmV0dXJucyhTdG9yYWdlTm9kZVNoYXBlKSxcbiAgICAgIGdldFN0b3JhZ2VQYXRoOiBNLmNhbGwoKS5yZXR1cm5zKE0ucHJvbWlzZShcbiAgICAgICAgLyogICAgICAgICovXG4gICAgICApKSxcbiAgICAgIHdyaXRlOiBNLmNhbGwoTS5hbnkoKSkucmV0dXJucyhNLnByb21pc2UoKSksXG4gICAgICB3cml0ZUZpbmFsOiBNLmNhbGwoTS5hbnkoKSkucmV0dXJucyhNLnByb21pc2UoKSlcbiAgICB9KSxcbiAgICAvKlxuXG5cblxuXG4gICAgICovXG4gICAgKHB1Ymxpc2hlciwgc3RvcmFnZU5vZGUsIHZhbHVlU2hhcGUgPSAoXG4gICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgTS5hbnkoKVxuICAgICkpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNsb3NlZDogZmFsc2UsXG4gICAgICAgIHB1Ymxpc2hlcixcbiAgICAgICAgc3RvcmFnZU5vZGUsXG4gICAgICAgIHN0b3JhZ2VQYXRoOiAoXG4gICAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgdm9pZCAwXG4gICAgICAgICksXG4gICAgICAgIHZhbHVlU2hhcGVcbiAgICAgIH07XG4gICAgfSxcbiAgICB7XG4gICAgICBnZXRTdG9yYWdlTm9kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuc3RvcmFnZU5vZGU7XG4gICAgICB9LFxuICAgICAgLypcblxuXG5cbiAgICAgICAqL1xuICAgICAgYXN5bmMgZ2V0U3RvcmFnZVBhdGgoKSB7XG4gICAgICAgIGNvbnN0IHsgc3RvcmFnZVBhdGg6IGhlbGRQYXRoIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBhd2FpdCBudWxsO1xuICAgICAgICBpZiAoaGVsZFBhdGggIT09IHZvaWQgMCkge1xuICAgICAgICAgIHJldHVybiBoZWxkUGF0aDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXRoID0gYXdhaXQgRSh0aGlzLnN0YXRlLnN0b3JhZ2VOb2RlKS5nZXRQYXRoKCk7XG4gICAgICAgIHRoaXMuc3RhdGUuc3RvcmFnZVBhdGggPSBwYXRoO1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgIH0sXG4gICAgICAvKlxuXG5cblxuXG4gICAgICAgKi9cbiAgICAgIGFzeW5jIHdyaXRlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHsgY2xvc2VkLCBwdWJsaXNoZXIsIHN0b3JhZ2VOb2RlLCB2YWx1ZVNoYXBlIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAhY2xvc2VkIHx8IHRocm93UmVkYWN0ZWRgY2Fubm90IHdyaXRlIHRvIGNsb3NlZCByZWNvcmRlcmA7XG4gICAgICAgIG11c3RNYXRjaDIodmFsdWUsIHZhbHVlU2hhcGUpO1xuICAgICAgICBjb25zdCBlbmNvZGVkID0gYXdhaXQgRShtYXJzaGFsbGVyKS50b0NhcERhdGEodmFsdWUpO1xuICAgICAgICBjb25zdCBzZXJpYWxpemVkID0gSlNPTi5zdHJpbmdpZnkoZW5jb2RlZCk7XG4gICAgICAgIGF3YWl0IEUoc3RvcmFnZU5vZGUpLnNldFZhbHVlKHNlcmlhbGl6ZWQpO1xuICAgICAgICByZXR1cm4gcHVibGlzaGVyLnB1Ymxpc2godmFsdWUpO1xuICAgICAgfSxcbiAgICAgIC8qXG5cblxuXG5cbiAgICAgICAqL1xuICAgICAgYXN5bmMgd3JpdGVGaW5hbCh2YWx1ZSkge1xuICAgICAgICBjb25zdCB7IGNsb3NlZCwgcHVibGlzaGVyLCBzdG9yYWdlTm9kZSwgdmFsdWVTaGFwZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgIWNsb3NlZCB8fCB0aHJvd1JlZGFjdGVkYGNhbm5vdCB3cml0ZSB0byBjbG9zZWQgcmVjb3JkZXJgO1xuICAgICAgICBtdXN0TWF0Y2gyKHZhbHVlLCB2YWx1ZVNoYXBlKTtcbiAgICAgICAgY29uc3QgZW5jb2RlZCA9IGF3YWl0IEUobWFyc2hhbGxlcikudG9DYXBEYXRhKHZhbHVlKTtcbiAgICAgICAgY29uc3Qgc2VyaWFsaXplZCA9IEpTT04uc3RyaW5naWZ5KGVuY29kZWQpO1xuICAgICAgICBhd2FpdCBFKHN0b3JhZ2VOb2RlKS5zZXRWYWx1ZShzZXJpYWxpemVkKTtcbiAgICAgICAgdGhpcy5zdGF0ZS5jbG9zZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gcHVibGlzaGVyLmZpbmlzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICApO1xuICByZXR1cm4gbWFrZVJlY29yZGVyO1xufTtcbmhhcmRlbihwcmVwYXJlUmVjb3JkZXIpO1xudmFyIGRlZmluZVJlY29yZGVyS2l0ID0gKHsgbWFrZVJlY29yZGVyLCBtYWtlRHVyYWJsZVB1Ymxpc2hLaXQgfSkgPT4ge1xuICBjb25zdCBtYWtlUmVjb3JkZXJLaXQgPSAoc3RvcmFnZU5vZGUsIHZhbHVlU2hhcGUpID0+IHtcbiAgICBjb25zdCB7IHN1YnNjcmliZXIsIHB1Ymxpc2hlciB9ID0gbWFrZUR1cmFibGVQdWJsaXNoS2l0KCk7XG4gICAgY29uc3QgcmVjb3JkZXIgPSBtYWtlUmVjb3JkZXIoXG4gICAgICBwdWJsaXNoZXIsXG4gICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgc3RvcmFnZU5vZGUsXG4gICAgICB2YWx1ZVNoYXBlXG4gICAgKTtcbiAgICByZXR1cm4gaGFyZGVuKHsgc3Vic2NyaWJlciwgcmVjb3JkZXIgfSk7XG4gIH07XG4gIHJldHVybiBtYWtlUmVjb3JkZXJLaXQ7XG59O1xudmFyIGRlZmluZUVSZWNvcmRlcktpdCA9ICh7IG1ha2VSZWNvcmRlciwgbWFrZUR1cmFibGVQdWJsaXNoS2l0IH0pID0+IHtcbiAgY29uc3QgbWFrZUVSZWNvcmRlcktpdCA9IChzdG9yYWdlTm9kZVAsIHZhbHVlU2hhcGUpID0+IHtcbiAgICBjb25zdCB7IHB1Ymxpc2hlciwgc3Vic2NyaWJlciB9ID0gbWFrZUR1cmFibGVQdWJsaXNoS2l0KCk7XG4gICAgY29uc3QgcmVjb3JkZXJQID0gRS53aGVuKFxuICAgICAgc3RvcmFnZU5vZGVQLFxuICAgICAgKHN0b3JhZ2VOb2RlKSA9PiBtYWtlUmVjb3JkZXIoXG4gICAgICAgIHB1Ymxpc2hlcixcbiAgICAgICAgLy9cbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgc3RvcmFnZU5vZGUsXG4gICAgICAgIHZhbHVlU2hhcGVcbiAgICAgIClcbiAgICApO1xuICAgIHJldHVybiB7IHN1YnNjcmliZXIsIHJlY29yZGVyUCB9O1xuICB9O1xuICByZXR1cm4gbWFrZUVSZWNvcmRlcktpdDtcbn07XG5oYXJkZW4oZGVmaW5lRVJlY29yZGVyS2l0KTtcbnZhciBwcmVwYXJlUmVjb3JkZXJLaXRNYWtlcnMgPSAoYmFnZ2FnZSwgbWFyc2hhbGxlcikgPT4ge1xuICBjb25zdCBtYWtlRHVyYWJsZVB1Ymxpc2hLaXQgPSBwcmVwYXJlRHVyYWJsZVB1Ymxpc2hLaXQoXG4gICAgYmFnZ2FnZSxcbiAgICBcIkR1cmFibGUgUHVibGlzaCBLaXRcIlxuICApO1xuICBjb25zdCBtYWtlUmVjb3JkZXIgPSBwcmVwYXJlUmVjb3JkZXIoYmFnZ2FnZSwgbWFyc2hhbGxlcik7XG4gIGNvbnN0IG1ha2VSZWNvcmRlcktpdCA9IGRlZmluZVJlY29yZGVyS2l0KHtcbiAgICBtYWtlUmVjb3JkZXIsXG4gICAgbWFrZUR1cmFibGVQdWJsaXNoS2l0XG4gIH0pO1xuICBjb25zdCBtYWtlRVJlY29yZGVyS2l0ID0gZGVmaW5lRVJlY29yZGVyS2l0KHtcbiAgICBtYWtlUmVjb3JkZXIsXG4gICAgbWFrZUR1cmFibGVQdWJsaXNoS2l0XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIG1ha2VEdXJhYmxlUHVibGlzaEtpdCxcbiAgICBtYWtlUmVjb3JkZXIsXG4gICAgbWFrZVJlY29yZGVyS2l0LFxuICAgIG1ha2VFUmVjb3JkZXJLaXRcbiAgfTtcbn07XG52YXIgUmVjb3JkZXJLaXRTaGFwZSA9IHtcbiAgcmVjb3JkZXI6IE0ucmVtb3RhYmxlKCksXG4gIHN1YnNjcmliZXI6IE0ucmVtb3RhYmxlKClcbn07XG5oYXJkZW4oUmVjb3JkZXJLaXRTaGFwZSk7XG5cbi8vXG52YXIgaXNTdG9yYWJsZSA9IChzcGVjaW1lbikgPT4gaXNQYXNzYWJsZShzcGVjaW1lbikgJiYgY2FuQmVEdXJhYmxlKHNwZWNpbWVuKTtcbmhhcmRlbihpc1N0b3JhYmxlKTtcbnZhciBhdHRhY2hEdXJhYmxlU3RvcmVzID0gKGdldEJhZ2dhZ2UpID0+IHtcbiAgY29uc3QgbWFwU3RvcmUgPSAobGFiZWwsIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBiYWdnYWdlID0gZ2V0QmFnZ2FnZSgpO1xuICAgIGNvbnN0IHJldCA9IHByb3ZpZGVEdXJhYmxlTWFwU3RvcmUoYmFnZ2FnZSwgbGFiZWwsIG9wdGlvbnMpO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG4gIGNvbnN0IHNldFN0b3JlID0gKGxhYmVsLCBvcHRpb25zKSA9PiBwcm92aWRlRHVyYWJsZVNldFN0b3JlKGdldEJhZ2dhZ2UoKSwgbGFiZWwsIG9wdGlvbnMpO1xuICBjb25zdCB3ZWFrU2V0U3RvcmUgPSAobGFiZWwsIG9wdGlvbnMpID0+IHByb3ZpZGVEdXJhYmxlV2Vha1NldFN0b3JlKGdldEJhZ2dhZ2UoKSwgbGFiZWwsIG9wdGlvbnMpO1xuICBjb25zdCB3ZWFrTWFwU3RvcmUgPSAobGFiZWwsIG9wdGlvbnMpID0+IHByb3ZpZGVEdXJhYmxlV2Vha01hcFN0b3JlKGdldEJhZ2dhZ2UoKSwgbGFiZWwsIG9wdGlvbnMpO1xuICByZXR1cm4gRmFyKFwiZHVyYWJsZVN0b3Jlc1wiLCB7XG4gICAgZGV0YWNoZWQ6ICgpID0+IGRldGFjaGVkRHVyYWJsZVN0b3JlcyxcbiAgICBpc1N0b3JhYmxlLFxuICAgIG1hcFN0b3JlLFxuICAgIHNldFN0b3JlLFxuICAgIHdlYWtNYXBTdG9yZSxcbiAgICB3ZWFrU2V0U3RvcmVcbiAgfSk7XG59O1xudmFyIGRldGFjaGVkRHVyYWJsZVN0b3JlcyA9IGF0dGFjaER1cmFibGVTdG9yZXMoXG4gICgpID0+IG1ha2VTY2FsYXJNYXBTdG9yZShcImRldGFjaGVkXCIpXG4pO1xudmFyIG1ha2VEdXJhYmxlWm9uZSA9IChiYWdnYWdlLCBiYXNlTGFiZWwgPSBcImR1cmFibGVab25lXCIpID0+IHtcbiAgYmFnZ2FnZSB8fCB0aHJvd1JlZGFjdGVkYGJhZ2dhZ2UgcmVxdWlyZWRgO1xuICBjb25zdCBhdHRhY2hlZFN0b3JlcyA9IGF0dGFjaER1cmFibGVTdG9yZXMoKCkgPT4gYmFnZ2FnZSk7XG4gIGNvbnN0IHsgbWFrZU9uY2UsIHdyYXBQcm92aWRlciB9ID0gbWFrZU9uY2VLaXQoXG4gICAgYmFzZUxhYmVsLFxuICAgIGF0dGFjaGVkU3RvcmVzLFxuICAgIGJhZ2dhZ2VcbiAgKTtcbiAgY29uc3QgZXhvQ2xhc3MgPSAoLi4uYXJncykgPT4gcHJlcGFyZUV4b0NsYXNzKGJhZ2dhZ2UsIC4uLmFyZ3MpO1xuICBjb25zdCBleG9DbGFzc0tpdCA9ICguLi5hcmdzKSA9PiBwcmVwYXJlRXhvQ2xhc3NLaXQoYmFnZ2FnZSwgLi4uYXJncyk7XG4gIGNvbnN0IGV4byA9ICguLi5hcmdzKSA9PiBwcmVwYXJlRXhvKGJhZ2dhZ2UsIC4uLmFyZ3MpO1xuICBjb25zdCBzdWJab25lU3RvcmUgPSB3cmFwUHJvdmlkZXIoYXR0YWNoZWRTdG9yZXMubWFwU3RvcmUsIGFnb3JpY1ZhdERhdGFLZXlzLnpvbmUpO1xuICBjb25zdCBzdWJab25lID0gKGxhYmVsLCBvcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCBzdWJCYWdnYWdlID0gc3ViWm9uZVN0b3JlKGxhYmVsLCBvcHRpb25zKTtcbiAgICByZXR1cm4gbWFrZUR1cmFibGVab25lKHN1YkJhZ2dhZ2UsIGAke2Jhc2VMYWJlbH0uJHtsYWJlbH1gKTtcbiAgfTtcbiAgcmV0dXJuIEZhcihcImR1cmFibGVab25lXCIsIHtcbiAgICBleG86IHdyYXBQcm92aWRlcihleG8sIGFnb3JpY1ZhdERhdGFLZXlzLmV4byksXG4gICAgZXhvQ2xhc3M6IHdyYXBQcm92aWRlcihleG9DbGFzcywgYWdvcmljVmF0RGF0YUtleXMuZXhvQ2xhc3MpLFxuICAgIGV4b0NsYXNzS2l0OiB3cmFwUHJvdmlkZXIoZXhvQ2xhc3NLaXQsIGFnb3JpY1ZhdERhdGFLZXlzLmV4b0NsYXNzS2l0KSxcbiAgICBzdWJab25lLFxuICAgIG1ha2VPbmNlLFxuICAgIHdhdGNoUHJvbWlzZTogd2F0Y2hQcm9taXNlMixcbiAgICBkZXRhY2hlZDogYXR0YWNoZWRTdG9yZXMuZGV0YWNoZWQsXG4gICAgaXNTdG9yYWJsZTogYXR0YWNoZWRTdG9yZXMuaXNTdG9yYWJsZSxcbiAgICBtYXBTdG9yZTogd3JhcFByb3ZpZGVyKGF0dGFjaGVkU3RvcmVzLm1hcFN0b3JlLCBhZ29yaWNWYXREYXRhS2V5cy5zdG9yZSksXG4gICAgc2V0U3RvcmU6IHdyYXBQcm92aWRlcihhdHRhY2hlZFN0b3Jlcy5zZXRTdG9yZSwgYWdvcmljVmF0RGF0YUtleXMuc3RvcmUpLFxuICAgIHdlYWtNYXBTdG9yZTogd3JhcFByb3ZpZGVyKGF0dGFjaGVkU3RvcmVzLndlYWtNYXBTdG9yZSwgYWdvcmljVmF0RGF0YUtleXMuc3RvcmUpLFxuICAgIHdlYWtTZXRTdG9yZTogd3JhcFByb3ZpZGVyKGF0dGFjaGVkU3RvcmVzLndlYWtTZXRTdG9yZSwgYWdvcmljVmF0RGF0YUtleXMuc3RvcmUpXG4gIH0pO1xufTtcbmhhcmRlbihtYWtlRHVyYWJsZVpvbmUpO1xuXG4vL1xudmFyIGNhaXBJZEZyb21JbmZvID0gKGluZm8pID0+IHtcbiAgcmV0dXJuIGAke2luZm8ubmFtZXNwYWNlfToke2luZm8ucmVmZXJlbmNlfWA7XG59O1xuXG4vL1xudmFyIFBGTV9SRUNFSVZFUiA9IChcbiAgLyogICAgICAgICAgICAgICAgKi9cbiAgXCJwZm1cIlxuKTtcbnZhciBIdWJOYW1lID0gKFxuICAvKiAgICAgICAgICAgICAgICAqL1xuICB7XG4gICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIENoYWluOiBcImNoYWluXCIsXG4gICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgQ2hhaW5Bc3NldHM6IFwiY2hhaW5Bc3NldHNcIixcbiAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgQ2hhaW5Db25uZWN0aW9uOiBcImNoYWluQ29ubmVjdGlvblwiXG4gIH1cbik7XG5oYXJkZW4oSHViTmFtZSk7XG52YXIgQ0hBSU5fS0VZID0gSHViTmFtZS5DaGFpbjtcbnZhciBDT05ORUNUSU9OU19LRVkgPSBIdWJOYW1lLkNoYWluQ29ubmVjdGlvbjtcbnZhciBBU1NFVFNfS0VZID0gSHViTmFtZS5DaGFpbkFzc2V0cztcbnZhciBDSEFJTl9JRF9TRVBBUkFUT1IgPSBcIl9cIjtcbnZhciBlbmNvZGVDaGFpbklkID0gKGNoYWluSWQpID0+IGNoYWluSWQucmVwbGFjZUFsbChcbiAgQ0hBSU5fSURfU0VQQVJBVE9SLFxuICBgJHtDSEFJTl9JRF9TRVBBUkFUT1J9JHtDSEFJTl9JRF9TRVBBUkFUT1J9YFxuKTtcbnZhciBjb25uZWN0aW9uS2V5ID0gKGNoYWluSWQxLCBjaGFpbklkMikgPT4ge1xuICBjb25zdCBjaGFpbklkMVNhbml0aXplZCA9IGVuY29kZUNoYWluSWQoY2hhaW5JZDEpO1xuICBjb25zdCBjaGFpbklkMlNhbml0aXplZCA9IGVuY29kZUNoYWluSWQoY2hhaW5JZDIpO1xuICByZXR1cm4gKFxuICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICBbY2hhaW5JZDFTYW5pdGl6ZWQsIGNoYWluSWQyU2FuaXRpemVkXS5zb3J0KCkuam9pbihDSEFJTl9JRF9TRVBBUkFUT1IpXG4gICk7XG59O1xudmFyIHJldmVyc2VDb25uSW5mbyA9IChjb25uSW5mbykgPT4ge1xuICBjb25zdCB7IHRyYW5zZmVyQ2hhbm5lbCB9ID0gY29ubkluZm87XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIGlkOiBjb25uSW5mby5jb3VudGVycGFydHkuY29ubmVjdGlvbl9pZCxcbiAgICBjbGllbnRfaWQ6IGNvbm5JbmZvLmNvdW50ZXJwYXJ0eS5jbGllbnRfaWQsXG4gICAgY291bnRlcnBhcnR5OiB7XG4gICAgICBjbGllbnRfaWQ6IGNvbm5JbmZvLmNsaWVudF9pZCxcbiAgICAgIGNvbm5lY3Rpb25faWQ6IGNvbm5JbmZvLmlkXG4gICAgfSxcbiAgICBzdGF0ZTogY29ubkluZm8uc3RhdGUsXG4gICAgdHJhbnNmZXJDaGFubmVsOiB7XG4gICAgICAuLi50cmFuc2ZlckNoYW5uZWwsXG4gICAgICBjaGFubmVsSWQ6IHRyYW5zZmVyQ2hhbm5lbC5jb3VudGVyUGFydHlDaGFubmVsSWQsXG4gICAgICBjb3VudGVyUGFydHlDaGFubmVsSWQ6IHRyYW5zZmVyQ2hhbm5lbC5jaGFubmVsSWQsXG4gICAgICBwb3J0SWQ6IHRyYW5zZmVyQ2hhbm5lbC5jb3VudGVyUGFydHlQb3J0SWQsXG4gICAgICBjb3VudGVyUGFydHlQb3J0SWQ6IHRyYW5zZmVyQ2hhbm5lbC5wb3J0SWRcbiAgICB9XG4gIH0pO1xufTtcbnZhciBub3JtYWxpemVDb25uZWN0aW9uSW5mbyA9IChwcmltYXJ5Q2hhaW5JZCwgY291bnRlckNoYWluSWQsIGRpcmVjdGVkKSA9PiB7XG4gIGNvbnN0IGtleSA9IGNvbm5lY3Rpb25LZXkocHJpbWFyeUNoYWluSWQsIGNvdW50ZXJDaGFpbklkKTtcbiAgaWYgKHByaW1hcnlDaGFpbklkIDwgY291bnRlckNoYWluSWQpIHtcbiAgICByZXR1cm4gW2tleSwgZGlyZWN0ZWRdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBba2V5LCByZXZlcnNlQ29ubkluZm8oZGlyZWN0ZWQpXTtcbiAgfVxufTtcbnZhciBkZW5vcm1hbGl6ZUNvbm5lY3Rpb25JbmZvID0gKHByaW1hcnlDaGFpbklkLCBjb3VudGVyQ2hhaW5JZCwgbm9ybWFsaXplZCkgPT4ge1xuICBpZiAocHJpbWFyeUNoYWluSWQgPCBjb3VudGVyQ2hhaW5JZCkge1xuICAgIHJldHVybiBub3JtYWxpemVkO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXZlcnNlQ29ubkluZm8obm9ybWFsaXplZCk7XG4gIH1cbn07XG52YXIgQ2hhaW5JZEFyZ1NoYXBlID0gTS5vcihcbiAgTS5zdHJpbmcoKSxcbiAgTS5zcGxpdFJlY29yZChcbiAgICB7XG4gICAgICBjaGFpbklkOiBNLnN0cmluZygpXG4gICAgfSxcbiAgICB2b2lkIDAsXG4gICAgTS5hbnkoKVxuICApXG4pO1xudmFyIERlZmF1bHRQZm1UaW1lb3V0T3B0cyA9IGhhcmRlbihcbiAgLyogICAgICAgICAgICAgICAgKi9cbiAge1xuICAgIHJldHJpZXM6IDMsXG4gICAgdGltZW91dDogKFxuICAgICAgLyogICAgICAgICAgICAgICAgKi9cbiAgICAgIFwiMTBtXCJcbiAgICApXG4gIH1cbik7XG52YXIgVHJhbnNmZXJSb3V0ZVNoYXBlID0gTS5zcGxpdFJlY29yZChcbiAge1xuICAgIHNvdXJjZVBvcnQ6IE0uc3RyaW5nKCksXG4gICAgc291cmNlQ2hhbm5lbDogSUJDQ2hhbm5lbElEU2hhcGUsXG4gICAgdG9rZW46IENvaW5TaGFwZSxcbiAgICByZWNlaXZlcjogTS5zdHJpbmcoKVxuICB9LFxuICB7IGZvcndhcmRJbmZvOiBGb3J3YXJkSW5mb1NoYXBlIH0sXG4gIHt9XG4pO1xudmFyIENoYWluSHViSSA9IE0uaW50ZXJmYWNlKFwiQ2hhaW5IdWJcIiwge1xuICByZWdpc3RlckNoYWluOiBNLmNhbGwoTS5zdHJpbmcoKSwgQ2hhaW5JbmZvU2hhcGUpLnJldHVybnMoKSxcbiAgdXBkYXRlQ2hhaW46IE0uY2FsbChNLnN0cmluZygpLCBDaGFpbkluZm9TaGFwZSkucmV0dXJucygpLFxuICBnZXRDaGFpbkluZm86IE0uY2FsbChNLnN0cmluZygpKS5yZXR1cm5zKFZvd1NoYXBlKSxcbiAgZ2V0Q2hhaW5JbmZvQnlDaGFpbklkOiBNLmNhbGwoTS5zdHJpbmcoKSkucmV0dXJucyhDaGFpbkluZm9TaGFwZSksXG4gIHJlZ2lzdGVyQ29ubmVjdGlvbjogTS5jYWxsKFxuICAgIE0uc3RyaW5nKCksXG4gICAgTS5zdHJpbmcoKSxcbiAgICBJQkNDb25uZWN0aW9uSW5mb1NoYXBlXG4gICkucmV0dXJucygpLFxuICB1cGRhdGVDb25uZWN0aW9uOiBNLmNhbGwoXG4gICAgTS5zdHJpbmcoKSxcbiAgICBNLnN0cmluZygpLFxuICAgIElCQ0Nvbm5lY3Rpb25JbmZvU2hhcGVcbiAgKS5yZXR1cm5zKCksXG4gIGdldENvbm5lY3Rpb25JbmZvOiBNLmNhbGwoQ2hhaW5JZEFyZ1NoYXBlLCBDaGFpbklkQXJnU2hhcGUpLnJldHVybnMoVm93U2hhcGUpLFxuICBnZXRDaGFpbnNBbmRDb25uZWN0aW9uOiBNLmNhbGwoTS5zdHJpbmcoKSwgTS5zdHJpbmcoKSkucmV0dXJucyhWb3dTaGFwZSksXG4gIHJlZ2lzdGVyQXNzZXQ6IE0uY2FsbChNLnN0cmluZygpLCBEZW5vbURldGFpbFNoYXBlKS5yZXR1cm5zKCksXG4gIHVwZGF0ZUFzc2V0OiBNLmNhbGwoTS5zdHJpbmcoKSwgRGVub21EZXRhaWxTaGFwZSkucmV0dXJucygpLFxuICBnZXRBc3NldDogTS5jYWxsKE0uc3RyaW5nKCksIE0uc3RyaW5nKCkpLnJldHVybnMoXG4gICAgTS5vcihEZW5vbURldGFpbFNoYXBlLCBNLnVuZGVmaW5lZCgpKVxuICApLFxuICBnZXREZW5vbTogTS5jYWxsKEJyYW5kU2hhcGUpLnJldHVybnMoTS5vcihNLnN0cmluZygpLCBNLnVuZGVmaW5lZCgpKSksXG4gIGNvZXJjZUNvc21vc0FkZHJlc3M6IE0uY2FsbChBY2NvdW50SWRBcmdTaGFwZSkucmV0dXJucyhcbiAgICBDb3Ntb3NDaGFpbkFkZHJlc3NTaGFwZVxuICApLFxuICByZXNvbHZlQWNjb3VudElkOiBNLmNhbGwoTS5zdHJpbmcoKSkucmV0dXJucyhNLnN0cmluZygpKSxcbiAgbWFrZVRyYW5zZmVyUm91dGU6IE0uY2FsbChBY2NvdW50SWRBcmdTaGFwZSwgRGVub21BbW91bnRTaGFwZSwgTS5zdHJpbmcoKSkub3B0aW9uYWwoRm9yd2FyZE9wdHNTaGFwZSkucmV0dXJucyhNLm9yKE0udW5kZWZpbmVkKCksIFRyYW5zZmVyUm91dGVTaGFwZSkpXG59KTtcbnZhciBtYWtlQ2hhaW5IdWIgPSAoem9uZSwgYWdvcmljTmFtZXMsIHZvd1Rvb2xzLCB7IGNoYWluSW5mb1ZhbHVlU2hhcGUgPSAoXG4gIC8qICAgICAgICAgICAgICAgICAgKi9cbiAgQ2hhaW5JbmZvU2hhcGVcbikgfSA9IHt9KSA9PiB7XG4gIGNvbnN0IGNoYWluSW5mb3MgPSB6b25lLm1hcFN0b3JlKFwiY2hhaW5JbmZvc1wiLCB7XG4gICAga2V5U2hhcGU6IE0uc3RyaW5nKCksXG4gICAgdmFsdWVTaGFwZTogY2hhaW5JbmZvVmFsdWVTaGFwZVxuICB9KTtcbiAgY29uc3QgY29ubmVjdGlvbkluZm9zID0gem9uZS5tYXBTdG9yZShcImNvbm5lY3Rpb25JbmZvc1wiLCB7XG4gICAga2V5U2hhcGU6IE0uc3RyaW5nKCksXG4gICAgdmFsdWVTaGFwZTogSUJDQ29ubmVjdGlvbkluZm9TaGFwZVxuICB9KTtcbiAgY29uc3QgZGVub21EZXRhaWxzID0gem9uZS5tYXBTdG9yZShcImRlbm9tXCIsIHtcbiAgICBrZXlTaGFwZTogTS5zdHJpbmcoKSxcbiAgICB2YWx1ZVNoYXBlOiBEZW5vbURldGFpbFNoYXBlXG4gIH0pO1xuICBjb25zdCBicmFuZERlbm9tcyA9IHpvbmUubWFwU3RvcmUoXCJicmFuZERlbm9tXCIsIHtcbiAgICBrZXlTaGFwZTogQnJhbmRTaGFwZSxcbiAgICB2YWx1ZVNoYXBlOiBNLnN0cmluZygpXG4gIH0pO1xuICBjb25zdCBiZWNoMzJQcmVmaXhUb0NoYWluTmFtZSA9IHpvbmUubWFwU3RvcmUoXCJiZWNoMzJQcmVmaXhUb0NoYWluTmFtZVwiLCB7XG4gICAga2V5U2hhcGU6IE0uc3RyaW5nKCksXG4gICAgdmFsdWVTaGFwZTogTS5zdHJpbmcoKVxuICB9KTtcbiAgY29uc3QgY2hhaW5JZFRvQ2hhaW5OYW1lID0gem9uZS5tYXBTdG9yZShcImNoYWluSWRUb0NoYWluTmFtZVwiLCB7XG4gICAga2V5U2hhcGU6IE0uc3RyaW5nKCksXG4gICAgdmFsdWVTaGFwZTogTS5zdHJpbmcoKVxuICB9KTtcbiAgY29uc3QgbWFrZURlbm9tS2V5ID0gKGRlbm9tLCBzcmNDaGFpbk5hbWUpID0+IGAke3NyY0NoYWluTmFtZX06JHtkZW5vbX1gO1xuICBjb25zdCByZXNvbHZlQ29zbW9zQ2hhaW5JZCA9IChhZGRyZXNzKSA9PiB7XG4gICAgY29uc3QgcHJlZml4ID0gZ2V0QmVjaDMyUHJlZml4KGFkZHJlc3MpO1xuICAgIGlmICghYmVjaDMyUHJlZml4VG9DaGFpbk5hbWUuaGFzKHByZWZpeCkpIHtcbiAgICAgIHRocm93IG1ha2VFcnJvcihgQ2hhaW4gaW5mbyBub3QgZm91bmQgZm9yIGJlY2gzMlByZWZpeCAke3F1b3RlKHByZWZpeCl9YCk7XG4gICAgfVxuICAgIGNvbnN0IGNoYWluTmFtZSA9IGJlY2gzMlByZWZpeFRvQ2hhaW5OYW1lLmdldChwcmVmaXgpO1xuICAgIGNvbnN0IHsgY2hhaW5JZCB9ID0gKFxuICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICBjaGFpbkluZm9zLmdldChjaGFpbk5hbWUpXG4gICAgKTtcbiAgICByZXR1cm4gY2hhaW5JZDtcbiAgfTtcbiAgY29uc3QgbG9va3VwQ2hhaW5JbmZvID0gdm93VG9vbHMucmV0cnlhYmxlKFxuICAgIHpvbmUsXG4gICAgXCJsb29rdXBDaGFpbkluZm9cIixcbiAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIC8vXG4gICAgYXN5bmMgKGNoYWluTmFtZSkgPT4ge1xuICAgICAgYXdhaXQgbnVsbDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNoYWluSW5mbyA9IGF3YWl0IEUoYWdvcmljTmFtZXMpLmxvb2t1cChIdWJOYW1lLkNoYWluLCBjaGFpbk5hbWUpO1xuICAgICAgICBpZiAoIWNoYWluSW5mb3MuaGFzKGNoYWluTmFtZSkpIHtcbiAgICAgICAgICBjaGFpbkluZm9zLmluaXQoY2hhaW5OYW1lLCBjaGFpbkluZm8pO1xuICAgICAgICAgIGNoYWluSWRUb0NoYWluTmFtZS5pbml0KGNhaXBJZEZyb21JbmZvKGNoYWluSW5mbyksIGNoYWluTmFtZSk7XG4gICAgICAgICAgaWYgKGNoYWluSW5mby5iZWNoMzJQcmVmaXgpIHtcbiAgICAgICAgICAgIGJlY2gzMlByZWZpeFRvQ2hhaW5OYW1lLmluaXQoY2hhaW5JbmZvLmJlY2gzMlByZWZpeCwgY2hhaW5OYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoYWluSW5mbztcbiAgICAgIH0gY2F0Y2ggKGUyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJsb29rdXBDaGFpbkluZm9cIiwgY2hhaW5OYW1lLCBcImVycm9yXCIsIGUyKTtcbiAgICAgICAgdGhyb3cgbWFrZUVycm9yKGBjaGFpbiBub3QgZm91bmQ6JHtjaGFpbk5hbWV9YCk7XG4gICAgICB9XG4gICAgfVxuICApO1xuICBjb25zdCBsb29rdXBDb25uZWN0aW9uSW5mbyA9IHZvd1Rvb2xzLnJldHJ5YWJsZShcbiAgICB6b25lLFxuICAgIFwibG9va3VwQ29ubmVjdGlvbkluZm9cIixcbiAgICAvKlxuXG5cbiAgICAgKi9cbiAgICAvL1xuICAgIGFzeW5jIChjaGFpbklkMSwgY2hhaW5JZDIpID0+IHtcbiAgICAgIGF3YWl0IG51bGw7XG4gICAgICBjb25zdCBrZXkgPSBjb25uZWN0aW9uS2V5KGNoYWluSWQxLCBjaGFpbklkMik7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBjb25uZWN0aW9uSW5mbyA9IGF3YWl0IEUoYWdvcmljTmFtZXMpLmxvb2t1cChcbiAgICAgICAgICBIdWJOYW1lLkNoYWluQ29ubmVjdGlvbixcbiAgICAgICAgICBrZXlcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKCFjb25uZWN0aW9uSW5mb3MuaGFzKGtleSkpIHtcbiAgICAgICAgICBjb25uZWN0aW9uSW5mb3MuaW5pdChrZXksIGNvbm5lY3Rpb25JbmZvKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVub3JtYWxpemVDb25uZWN0aW9uSW5mbyhjaGFpbklkMSwgY2hhaW5JZDIsIGNvbm5lY3Rpb25JbmZvKTtcbiAgICAgIH0gY2F0Y2ggKGUyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJsb29rdXBDb25uZWN0aW9uSW5mb1wiLCBjaGFpbklkMSwgY2hhaW5JZDIsIFwiZXJyb3JcIiwgZTIpO1xuICAgICAgICB0aHJvdyBtYWtlRXJyb3IoYGNvbm5lY3Rpb24gbm90IGZvdW5kOiAke2NoYWluSWQxfTwtPiR7Y2hhaW5JZDJ9YCk7XG4gICAgICB9XG4gICAgfVxuICApO1xuICBjb25zdCBsb29rdXBDaGFpbnNBbmRDb25uZWN0aW9uID0gdm93VG9vbHMucmV0cnlhYmxlKFxuICAgIHpvbmUsXG4gICAgXCJsb29rdXBDaGFpbnNBbmRDb25uZWN0aW9uXCIsXG4gICAgLypcblxuXG5cblxuXG5cblxuXG5cblxuXG4gICAgICovXG4gICAgLy9cbiAgICBhc3luYyAocHJpbWFyeU5hbWUsIGNvdW50ZXJOYW1lKSA9PiB7XG4gICAgICBjb25zdCBbcHJpbWFyeSwgY291bnRlcl0gPSBhd2FpdCB2b3dUb29scy5hc1Byb21pc2UoXG4gICAgICAgIHZvd1Rvb2xzLmFsbFZvd3MoW1xuICAgICAgICAgIGNoYWluSHViLmdldENoYWluSW5mbyhwcmltYXJ5TmFtZSksXG4gICAgICAgICAgY2hhaW5IdWIuZ2V0Q2hhaW5JbmZvKGNvdW50ZXJOYW1lKVxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IGNvbm5lY3Rpb25JbmZvID0gcHJpbWFyeS5uYW1lc3BhY2UgPT09IFwiY29zbW9zXCIgJiYgY291bnRlci5uYW1lc3BhY2UgPT09IFwiY29zbW9zXCIgPyBhd2FpdCB2b3dUb29scy5hc1Byb21pc2UoXG4gICAgICAgIGNoYWluSHViLmdldENvbm5lY3Rpb25JbmZvKHByaW1hcnksIGNvdW50ZXIpXG4gICAgICApIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgLypcblxuXG5cblxuXG4gICAgICAgICAqL1xuICAgICAgICBbcHJpbWFyeSwgY291bnRlciwgY29ubmVjdGlvbkluZm9dXG4gICAgICApO1xuICAgIH1cbiAgKTtcbiAgY29uc3QgY2hhaW5IdWIgPSB6b25lLmV4byhcIkNoYWluSHViXCIsIENoYWluSHViSSwge1xuICAgIC8qXG5cblxuXG5cblxuXG5cblxuXG5cbiAgICAgKi9cbiAgICByZWdpc3RlckNoYWluKG5hbWUsIGNoYWluSW5mbykge1xuICAgICAgY2hhaW5JbmZvcy5pbml0KG5hbWUsIGNoYWluSW5mbyk7XG4gICAgICBjaGFpbklkVG9DaGFpbk5hbWUuaW5pdChjYWlwSWRGcm9tSW5mbyhjaGFpbkluZm8pLCBuYW1lKTtcbiAgICAgIGlmIChjaGFpbkluZm8ubmFtZXNwYWNlID09PSBcImNvc21vc1wiICYmIGNoYWluSW5mby5iZWNoMzJQcmVmaXgpIHtcbiAgICAgICAgYmVjaDMyUHJlZml4VG9DaGFpbk5hbWUuaW5pdChjaGFpbkluZm8uYmVjaDMyUHJlZml4LCBuYW1lKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qXG5cblxuXG5cblxuICAgICAqL1xuICAgIHVwZGF0ZUNoYWluKGNoYWluTmFtZSwgY2hhaW5JbmZvKSB7XG4gICAgICBpZiAoIWNoYWluSW5mb3MuaGFzKGNoYWluTmFtZSkpIHtcbiAgICAgICAgdGhyb3cgbWFrZUVycm9yKGBDaGFpbiAke3F1b3RlKGNoYWluTmFtZSl9IG5vdCByZWdpc3RlcmVkYCk7XG4gICAgICB9XG4gICAgICBjb25zdCBvbGRJbmZvID0gY2hhaW5JbmZvcy5nZXQoY2hhaW5OYW1lKTtcbiAgICAgIGlmIChjaGFpbklkVG9DaGFpbk5hbWUuaGFzKGNhaXBJZEZyb21JbmZvKG9sZEluZm8pKSkge1xuICAgICAgICBjaGFpbklkVG9DaGFpbk5hbWUuZGVsZXRlKGNhaXBJZEZyb21JbmZvKG9sZEluZm8pKTtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIG9sZEluZm8uYmVjaDMyUHJlZml4XG4gICAgICApIHtcbiAgICAgICAgYmVjaDMyUHJlZml4VG9DaGFpbk5hbWUuZGVsZXRlKFxuICAgICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgIG9sZEluZm8uYmVjaDMyUHJlZml4XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjaGFpbkluZm9zLnNldChjaGFpbk5hbWUsIGNoYWluSW5mbyk7XG4gICAgICBjaGFpbklkVG9DaGFpbk5hbWUuaW5pdChjYWlwSWRGcm9tSW5mbyhjaGFpbkluZm8pLCBjaGFpbk5hbWUpO1xuICAgICAgaWYgKFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgY2hhaW5JbmZvLmJlY2gzMlByZWZpeFxuICAgICAgKSB7XG4gICAgICAgIGJlY2gzMlByZWZpeFRvQ2hhaW5OYW1lLmluaXQoXG4gICAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgY2hhaW5JbmZvLmJlY2gzMlByZWZpeCxcbiAgICAgICAgICBjaGFpbk5hbWVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qXG5cblxuXG4gICAgICovXG4gICAgZ2V0Q2hhaW5JbmZvKGNoYWluTmFtZSkge1xuICAgICAgY2hhaW5OYW1lLmluY2x1ZGVzKFwiOlwiKSAmJiB0aHJvd1JlZGFjdGVkYCR7Y2hhaW5OYW1lfSBtdXN0IGJlIGEgYmFyZSBjaGFpbiBuYW1lLiBNYXliZSB0cnkgZ2V0Q2hhaW5JbmZvQnlDaGFpbklkKClgO1xuICAgICAgaWYgKGNoYWluSW5mb3MuaGFzKGNoYWluTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgIHZvd1Rvb2xzLmFzVm93KFxuICAgICAgICAgICAgKCkgPT4gKFxuICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICBjaGFpbkluZm9zLmdldChjaGFpbk5hbWUpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvb2t1cENoYWluSW5mbyhjaGFpbk5hbWUpO1xuICAgIH0sXG4gICAgLypcblxuXG4gICAgICovXG4gICAgZ2V0Q2hhaW5JbmZvQnlDaGFpbklkKGNoYWluSWQpIHtcbiAgICAgIGNoYWluSWRUb0NoYWluTmFtZS5oYXMoY2hhaW5JZCkgfHwgdGhyb3dSZWRhY3RlZGBDaGFpbiBuYW1lIG5vdCBmb3VuZCBmb3IgJHtxdW90ZShjaGFpbklkKX1gO1xuICAgICAgY29uc3QgY2hhaW5OYW1lID0gY2hhaW5JZFRvQ2hhaW5OYW1lLmdldChjaGFpbklkKTtcbiAgICAgIGNoYWluSW5mb3MuaGFzKGNoYWluTmFtZSkgfHwgdGhyb3dSZWRhY3RlZGBDaGFpbiBJbmZvIG5vdCBmb3VuZCBmb3IgJHtxdW90ZShjaGFpbklkKX1gO1xuICAgICAgcmV0dXJuIGNoYWluSW5mb3MuZ2V0KGNoYWluTmFtZSk7XG4gICAgfSxcbiAgICAvKlxuXG5cblxuXG5cbiAgICAgKi9cbiAgICByZWdpc3RlckNvbm5lY3Rpb24ocHJpbWFyeUNoYWluSWQsIGNvdW50ZXJwYXJ0eUNoYWluSWQsIGNvbm5lY3Rpb25JbmZvKSB7XG4gICAgICBjb25zdCBba2V5LCBub3JtYWxpemVkXSA9IG5vcm1hbGl6ZUNvbm5lY3Rpb25JbmZvKFxuICAgICAgICBwcmltYXJ5Q2hhaW5JZCxcbiAgICAgICAgY291bnRlcnBhcnR5Q2hhaW5JZCxcbiAgICAgICAgY29ubmVjdGlvbkluZm9cbiAgICAgICk7XG4gICAgICBjb25uZWN0aW9uSW5mb3MuaW5pdChrZXksIG5vcm1hbGl6ZWQpO1xuICAgIH0sXG4gICAgLypcblxuXG5cblxuXG5cblxuICAgICAqL1xuICAgIHVwZGF0ZUNvbm5lY3Rpb24ocHJpbWFyeUNoYWluSWQsIGNvdW50ZXJwYXJ0eUNoYWluSWQsIGNvbm5lY3Rpb25JbmZvKSB7XG4gICAgICBjb25zdCBrZXkgPSBjb25uZWN0aW9uS2V5KHByaW1hcnlDaGFpbklkLCBjb3VudGVycGFydHlDaGFpbklkKTtcbiAgICAgIGlmICghY29ubmVjdGlvbkluZm9zLmhhcyhrZXkpKSB7XG4gICAgICAgIHRocm93IG1ha2VFcnJvcihcbiAgICAgICAgICBgQ29ubmVjdGlvbiAke3F1b3RlKHByaW1hcnlDaGFpbklkKX08LT4ke3F1b3RlKGNvdW50ZXJwYXJ0eUNoYWluSWQpfSBub3QgcmVnaXN0ZXJlZGBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IFtfLCBub3JtYWxpemVkSW5mb10gPSBub3JtYWxpemVDb25uZWN0aW9uSW5mbyhcbiAgICAgICAgcHJpbWFyeUNoYWluSWQsXG4gICAgICAgIGNvdW50ZXJwYXJ0eUNoYWluSWQsXG4gICAgICAgIGNvbm5lY3Rpb25JbmZvXG4gICAgICApO1xuICAgICAgY29ubmVjdGlvbkluZm9zLnNldChrZXksIG5vcm1hbGl6ZWRJbmZvKTtcbiAgICB9LFxuICAgIC8qXG5cblxuXG4gICAgICovXG4gICAgZ2V0Q29ubmVjdGlvbkluZm8ocHJpbWFyeSwgY291bnRlcikge1xuICAgICAgY29uc3QgcHJpbWFyeUlkID0gdHlwZW9mIHByaW1hcnkgPT09IFwic3RyaW5nXCIgPyBwcmltYXJ5IDogcHJpbWFyeS5jaGFpbklkO1xuICAgICAgY29uc3QgY291bnRlcklkID0gdHlwZW9mIGNvdW50ZXIgPT09IFwic3RyaW5nXCIgPyBjb3VudGVyIDogY291bnRlci5jaGFpbklkO1xuICAgICAgY29uc3Qga2V5ID0gY29ubmVjdGlvbktleShwcmltYXJ5SWQsIGNvdW50ZXJJZCk7XG4gICAgICBpZiAoY29ubmVjdGlvbkluZm9zLmhhcyhrZXkpKSB7XG4gICAgICAgIHJldHVybiB2b3dUb29scy5hc1ZvdyhcbiAgICAgICAgICAoKSA9PiBkZW5vcm1hbGl6ZUNvbm5lY3Rpb25JbmZvKFxuICAgICAgICAgICAgcHJpbWFyeUlkLFxuICAgICAgICAgICAgY291bnRlcklkLFxuICAgICAgICAgICAgY29ubmVjdGlvbkluZm9zLmdldChrZXkpXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvb2t1cENvbm5lY3Rpb25JbmZvKHByaW1hcnlJZCwgY291bnRlcklkKTtcbiAgICB9LFxuICAgIC8qXG5cblxuXG5cblxuXG5cbiAgICAgKi9cbiAgICBnZXRDaGFpbnNBbmRDb25uZWN0aW9uKHByaW1hcnlOYW1lLCBjb3VudGVyTmFtZSkge1xuICAgICAgcmV0dXJuIGxvb2t1cENoYWluc0FuZENvbm5lY3Rpb24ocHJpbWFyeU5hbWUsIGNvdW50ZXJOYW1lKTtcbiAgICB9LFxuICAgIC8qXG5cblxuXG5cblxuXG4gICAgICovXG4gICAgcmVnaXN0ZXJBc3NldChkZW5vbSwgZGV0YWlsKSB7XG4gICAgICBjb25zdCB7IGNoYWluTmFtZSwgYmFzZU5hbWUgfSA9IGRldGFpbDtcbiAgICAgIGNoYWluSW5mb3MuaGFzKGNoYWluTmFtZSkgfHwgdGhyb3dSZWRhY3RlZGBtdXN0IHJlZ2lzdGVyIGNoYWluICR7cXVvdGUoY2hhaW5OYW1lKX0gZmlyc3RgO1xuICAgICAgY2hhaW5JbmZvcy5oYXMoYmFzZU5hbWUpIHx8IHRocm93UmVkYWN0ZWRgbXVzdCByZWdpc3RlciBjaGFpbiAke3F1b3RlKGJhc2VOYW1lKX0gZmlyc3RgO1xuICAgICAgY29uc3QgZGVub21LZXkgPSBtYWtlRGVub21LZXkoZGVub20sIGRldGFpbC5jaGFpbk5hbWUpO1xuICAgICAgZGVub21EZXRhaWxzLmhhcyhkZW5vbUtleSkgJiYgdGhyb3dSZWRhY3RlZGBhbHJlYWR5IHJlZ2lzdGVyZWQgJHtxdW90ZShkZW5vbSl9IG9uICR7cXVvdGUoY2hhaW5OYW1lKX1gO1xuICAgICAgZGVub21EZXRhaWxzLmluaXQoZGVub21LZXksIGRldGFpbCk7XG4gICAgICBpZiAoZGV0YWlsLmJyYW5kKSB7XG4gICAgICAgIGNoYWluTmFtZSA9PT0gXCJhZ29yaWNcIiB8fCB0aHJvd1JlZGFjdGVkYGJyYW5kcyBvbmx5IHJlZ2lzdGVyYWJsZSBmb3IgYWdvcmljLWhlbGQgYXNzZXRzYDtcbiAgICAgICAgYnJhbmREZW5vbXMuaW5pdChkZXRhaWwuYnJhbmQsIGRlbm9tKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qXG5cblxuXG5cblxuXG4gICAgICovXG4gICAgdXBkYXRlQXNzZXQoZGVub20sIGRldGFpbCkge1xuICAgICAgY29uc3QgeyBiYXNlTmFtZSwgYnJhbmQsIGNoYWluTmFtZSB9ID0gZGV0YWlsO1xuICAgICAgY29uc3QgZGVub21LZXkgPSBtYWtlRGVub21LZXkoZGVub20sIGNoYWluTmFtZSk7XG4gICAgICBpZiAoIWRlbm9tRGV0YWlscy5oYXMoZGVub21LZXkpKSB7XG4gICAgICAgIHRocm93IG1ha2VFcnJvcihgQXNzZXQgJHtxdW90ZShkZW5vbSl9IG9uICR7cXVvdGUoY2hhaW5OYW1lKX0gbm90IHJlZ2lzdGVyZWRgKTtcbiAgICAgIH1cbiAgICAgIGlmICghY2hhaW5JbmZvcy5oYXMoY2hhaW5OYW1lKSkge1xuICAgICAgICB0aHJvdyBtYWtlRXJyb3IoYENoYWluICR7cXVvdGUoY2hhaW5OYW1lKX0gbm90IHJlZ2lzdGVyZWRgKTtcbiAgICAgIH1cbiAgICAgIGlmICghY2hhaW5JbmZvcy5oYXMoYmFzZU5hbWUpKSB7XG4gICAgICAgIHRocm93IG1ha2VFcnJvcihgQ2hhaW4gJHtxdW90ZShiYXNlTmFtZSl9IG5vdCByZWdpc3RlcmVkYCk7XG4gICAgICB9XG4gICAgICBpZiAoYnJhbmQpIHtcbiAgICAgICAgaWYgKGNoYWluTmFtZSAhPT0gXCJhZ29yaWNcIikge1xuICAgICAgICAgIHRocm93IG1ha2VFcnJvcihcIkJyYW5kcyBvbmx5IHJlZ2lzdGVyYWJsZSBmb3IgYWdvcmljLWhlbGQgYXNzZXRzXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBvbGREZXRhaWwgPSBkZW5vbURldGFpbHMuZ2V0KGRlbm9tS2V5KTtcbiAgICAgIGlmIChvbGREZXRhaWwuYnJhbmQpIHtcbiAgICAgICAgYnJhbmREZW5vbXMuZGVsZXRlKG9sZERldGFpbC5icmFuZCk7XG4gICAgICB9XG4gICAgICBkZW5vbURldGFpbHMuc2V0KGRlbm9tS2V5LCBkZXRhaWwpO1xuICAgICAgaWYgKGJyYW5kKSB7XG4gICAgICAgIGJyYW5kRGVub21zLmluaXQoYnJhbmQsIGRlbm9tKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qXG5cblxuXG5cblxuICAgICAqL1xuICAgIGdldEFzc2V0KGRlbm9tLCBzcmNDaGFpbk5hbWUpIHtcbiAgICAgIGNvbnN0IGRlbm9tS2V5ID0gbWFrZURlbm9tS2V5KGRlbm9tLCBzcmNDaGFpbk5hbWUpO1xuICAgICAgaWYgKGRlbm9tRGV0YWlscy5oYXMoZGVub21LZXkpKSB7XG4gICAgICAgIHJldHVybiBkZW5vbURldGFpbHMuZ2V0KGRlbm9tS2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfSxcbiAgICAvKlxuXG5cblxuXG4gICAgICovXG4gICAgZ2V0RGVub20oYnJhbmQpIHtcbiAgICAgIGlmIChicmFuZERlbm9tcy5oYXMoYnJhbmQpKSB7XG4gICAgICAgIHJldHVybiBicmFuZERlbm9tcy5nZXQoYnJhbmQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9LFxuICAgIC8qXG5cblxuXG5cbiAgICAgKi9cbiAgICByZXNvbHZlQWNjb3VudElkKHBhcnRpYWxJZCkge1xuICAgICAgaWYgKHBhcnRpYWxJZC5zcGxpdChcIjpcIikubGVuZ3RoID09PSAzKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgcGFydGlhbElkXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCBjb3Ntb3NDaGFpbklkID0gcmVzb2x2ZUNvc21vc0NoYWluSWQoXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgcGFydGlhbElkXG4gICAgICApO1xuICAgICAgcmV0dXJuIGBjb3Ntb3M6JHtjb3Ntb3NDaGFpbklkfToke3BhcnRpYWxJZH1gO1xuICAgIH0sXG4gICAgLypcblxuXG5cblxuXG5cbiAgICAgKi9cbiAgICBjb2VyY2VDb3Ntb3NBZGRyZXNzKHBhcnRpYWxJZCkge1xuICAgICAgaWYgKHR5cGVvZiBwYXJ0aWFsSWQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHBhcnRpYWxJZDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBhcnRzID0gcGFydGlhbElkLnNwbGl0KFwiOlwiKTtcbiAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgYXNzZXJ0LmVxdWFsKHBhcnRzWzBdLCBcImNvc21vc1wiKTtcbiAgICAgICAgcmV0dXJuIGhhcmRlbih7XG4gICAgICAgICAgY2hhaW5JZDogcGFydHNbMV0sXG4gICAgICAgICAgZW5jb2Rpbmc6IFwiYmVjaDMyXCIsXG4gICAgICAgICAgdmFsdWU6IChcbiAgICAgICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHBhcnRzWzJdXG4gICAgICAgICAgKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGFzc2VydC5lcXVhbChwYXJ0cy5sZW5ndGgsIDEpO1xuICAgICAgY29uc3QgdmFsdWUgPSAoXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgcGFydGlhbElkXG4gICAgICApO1xuICAgICAgY29uc3QgY29zbW9zQ2hhaW5JZCA9IHJlc29sdmVDb3Ntb3NDaGFpbklkKHZhbHVlKTtcbiAgICAgIHJldHVybiBoYXJkZW4oe1xuICAgICAgICBjaGFpbklkOiBjb3Ntb3NDaGFpbklkLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgZW5jb2Rpbmc6IChcbiAgICAgICAgICAvKiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgIFwiYmVjaDMyXCJcbiAgICAgICAgKVxuICAgICAgfSk7XG4gICAgfSxcbiAgICAvKlxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiAgICAgKi9cbiAgICBtYWtlVHJhbnNmZXJSb3V0ZShkZXN0aW5hdGlvbiwgZGVub21BbW91bnQsIHNyY0NoYWluTmFtZSwgZm9yd2FyZE9wdHMpIHtcbiAgICAgIGNoYWluSW5mb3MuaGFzKHNyY0NoYWluTmFtZSkgfHwgdGhyb3dSZWRhY3RlZGBjaGFpbiBpbmZvIG5vdCBmb3VuZCBmb3IgaG9sZGluZyBjaGFpbjogJHtxdW90ZShzcmNDaGFpbk5hbWUpfWA7XG4gICAgICBjb25zdCBkZW5vbURldGFpbCA9IGNoYWluSHViLmdldEFzc2V0KGRlbm9tQW1vdW50LmRlbm9tLCBzcmNDaGFpbk5hbWUpO1xuICAgICAgZGVub21EZXRhaWwgfHwgdGhyb3dSZWRhY3RlZGBubyBkZW5vbSBkZXRhaWwgZm9yOiAke3F1b3RlKGRlbm9tQW1vdW50LmRlbm9tKX0gb24gJHtxdW90ZShzcmNDaGFpbk5hbWUpfS4gZW5zdXJlIGl0IGlzIHJlZ2lzdGVyZWQgaW4gY2hhaW5IdWIuYDtcbiAgICAgIGNvbnN0IHsgYmFzZU5hbWUsIGNoYWluTmFtZSB9ID0gKFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICBkZW5vbURldGFpbFxuICAgICAgKTtcbiAgICAgIGNoYWluTmFtZSA9PT0gc3JjQ2hhaW5OYW1lIHx8IHRocm93UmVkYWN0ZWRgY2Fubm90IHRyYW5zZmVyIGFzc2V0ICR7cXVvdGUoZGVub21BbW91bnQuZGVub20pfS4gaGVsZCBvbiAke3F1b3RlKGNoYWluTmFtZSl9IG5vdCAke3F1b3RlKHNyY0NoYWluTmFtZSl9LmA7XG4gICAgICBjaGFpbkluZm9zLmhhcyhiYXNlTmFtZSkgfHwgdGhyb3dSZWRhY3RlZGBjaGFpbiBpbmZvIG5vdCBmb3VuZCBmb3IgaXNzdWluZyBjaGFpbjogJHtxdW90ZShiYXNlTmFtZSl9YDtcbiAgICAgIGNvbnN0IGJhc2VDaGFpbkluZm8gPSBjaGFpbkluZm9zLmdldChiYXNlTmFtZSk7XG4gICAgICBpZiAoYmFzZUNoYWluSW5mby5uYW1lc3BhY2UgIT09IFwiY29zbW9zXCIpXG4gICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgT25seSBjb3Ntb3Mgc3VwcG9ydGVkOyBnb3QgJHtxdW90ZShiYXNlQ2hhaW5JbmZvLm5hbWVzcGFjZSl9YDtcbiAgICAgIGNvbnN0IHsgY2hhaW5JZDogYmFzZUNoYWluSWQsIHBmbUVuYWJsZWQgfSA9IGJhc2VDaGFpbkluZm87XG4gICAgICBjb25zdCBob2xkaW5nQ2hhaW5JbmZvID0gY2hhaW5JbmZvcy5nZXQoc3JjQ2hhaW5OYW1lKTtcbiAgICAgIGlmIChob2xkaW5nQ2hhaW5JbmZvLm5hbWVzcGFjZSAhPT0gXCJjb3Ntb3NcIikge1xuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYE9ubHkgY29zbW9zIHN1cHBvcnRlZDsgZ290ICR7cXVvdGUoaG9sZGluZ0NoYWluSW5mby5uYW1lc3BhY2UpfWA7XG4gICAgICB9XG4gICAgICBjb25zdCB7IGNoYWluSWQ6IGhvbGRpbmdDaGFpbklkIH0gPSBob2xkaW5nQ2hhaW5JbmZvO1xuICAgICAgY29uc3QgY29zbW9zRGVzdCA9IGNoYWluSHViLmNvZXJjZUNvc21vc0FkZHJlc3MoZGVzdGluYXRpb24pO1xuICAgICAgaWYgKGJhc2VDaGFpbklkID09PSBjb3Ntb3NEZXN0LmNoYWluSWQgfHwgYmFzZU5hbWUgPT09IHNyY0NoYWluTmFtZSkge1xuICAgICAgICBjb25zdCBjb25uS2V5ID0gY29ubmVjdGlvbktleShob2xkaW5nQ2hhaW5JZCwgY29zbW9zRGVzdC5jaGFpbklkKTtcbiAgICAgICAgY29ubmVjdGlvbkluZm9zLmhhcyhjb25uS2V5KSB8fCB0aHJvd1JlZGFjdGVkYG5vIGNvbm5lY3Rpb24gaW5mbyBmb3VuZCBmb3IgJHtob2xkaW5nQ2hhaW5JZH08LT4ke2Nvc21vc0Rlc3QuY2hhaW5JZH1gO1xuICAgICAgICBjb25zdCB7IHRyYW5zZmVyQ2hhbm5lbCB9ID0gZGVub3JtYWxpemVDb25uZWN0aW9uSW5mbyhcbiAgICAgICAgICBob2xkaW5nQ2hhaW5JZCxcbiAgICAgICAgICAvL1xuICAgICAgICAgIGNvc21vc0Rlc3QuY2hhaW5JZCxcbiAgICAgICAgICAvL1xuICAgICAgICAgIGNvbm5lY3Rpb25JbmZvcy5nZXQoY29ubktleSlcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGhhcmRlbih7XG4gICAgICAgICAgc291cmNlUG9ydDogdHJhbnNmZXJDaGFubmVsLnBvcnRJZCxcbiAgICAgICAgICBzb3VyY2VDaGFubmVsOiB0cmFuc2ZlckNoYW5uZWwuY2hhbm5lbElkLFxuICAgICAgICAgIHRva2VuOiB7XG4gICAgICAgICAgICBhbW91bnQ6IFN0cmluZyhkZW5vbUFtb3VudC52YWx1ZSksXG4gICAgICAgICAgICBkZW5vbTogZGVub21BbW91bnQuZGVub21cbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlY2VpdmVyOiBjb3Ntb3NEZXN0LnZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcGZtRW5hYmxlZCB8fCB0aHJvd1JlZGFjdGVkYHBmbSBub3QgZW5hYmxlZCBvbiBpc3N1aW5nIGNoYWluOiAke3F1b3RlKGJhc2VOYW1lKX1gO1xuICAgICAgY29uc3QgY3VyclRvSXNzdWVyS2V5ID0gY29ubmVjdGlvbktleShob2xkaW5nQ2hhaW5JZCwgYmFzZUNoYWluSWQpO1xuICAgICAgY29ubmVjdGlvbkluZm9zLmhhcyhjdXJyVG9Jc3N1ZXJLZXkpIHx8IHRocm93UmVkYWN0ZWRgbm8gY29ubmVjdGlvbiBpbmZvIGZvdW5kIGZvciAke2hvbGRpbmdDaGFpbklkfTwtPiR7YmFzZUNoYWluSWR9YDtcbiAgICAgIGNvbnN0IGlzc3VlclRvRGVzdEtleSA9IGNvbm5lY3Rpb25LZXkoYmFzZUNoYWluSWQsIGNvc21vc0Rlc3QuY2hhaW5JZCk7XG4gICAgICBjb25uZWN0aW9uSW5mb3MuaGFzKGlzc3VlclRvRGVzdEtleSkgfHwgdGhyb3dSZWRhY3RlZGBubyBjb25uZWN0aW9uIGluZm8gZm91bmQgZm9yICR7YmFzZUNoYWluSWR9PC0+JHtjb3Ntb3NEZXN0LmNoYWluSWR9YDtcbiAgICAgIGNvbnN0IGN1cnJUb0lzc3VlciA9IGRlbm9ybWFsaXplQ29ubmVjdGlvbkluZm8oXG4gICAgICAgIGhvbGRpbmdDaGFpbklkLFxuICAgICAgICBiYXNlQ2hhaW5JZCxcbiAgICAgICAgY29ubmVjdGlvbkluZm9zLmdldChjdXJyVG9Jc3N1ZXJLZXkpXG4gICAgICApO1xuICAgICAgY29uc3QgaXNzdWVyVG9EZXN0ID0gZGVub3JtYWxpemVDb25uZWN0aW9uSW5mbyhcbiAgICAgICAgYmFzZUNoYWluSWQsXG4gICAgICAgIGNvc21vc0Rlc3QuY2hhaW5JZCxcbiAgICAgICAgY29ubmVjdGlvbkluZm9zLmdldChpc3N1ZXJUb0Rlc3RLZXkpXG4gICAgICApO1xuICAgICAgY29uc3QgeyBpbnRlcm1lZGlhdGVSZWNpcGllbnQsIC4uLnJlc3QgfSA9IGZvcndhcmRPcHRzID8/IHt9O1xuICAgICAgY29uc3QgZm9yd2FyZEluZm8gPSBoYXJkZW4oe1xuICAgICAgICBmb3J3YXJkOiB7XG4gICAgICAgICAgcmVjZWl2ZXI6IGNvc21vc0Rlc3QudmFsdWUsXG4gICAgICAgICAgcG9ydDogaXNzdWVyVG9EZXN0LnRyYW5zZmVyQ2hhbm5lbC5wb3J0SWQsXG4gICAgICAgICAgY2hhbm5lbDogaXNzdWVyVG9EZXN0LnRyYW5zZmVyQ2hhbm5lbC5jaGFubmVsSWQsXG4gICAgICAgICAgLi4uRGVmYXVsdFBmbVRpbWVvdXRPcHRzLFxuICAgICAgICAgIC4uLi8qICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgcmVzdFxuICAgICAgICAgIC8vXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGhhcmRlbih7XG4gICAgICAgIHNvdXJjZVBvcnQ6IGN1cnJUb0lzc3Vlci50cmFuc2ZlckNoYW5uZWwucG9ydElkLFxuICAgICAgICBzb3VyY2VDaGFubmVsOiBjdXJyVG9Jc3N1ZXIudHJhbnNmZXJDaGFubmVsLmNoYW5uZWxJZCxcbiAgICAgICAgdG9rZW46IHtcbiAgICAgICAgICBhbW91bnQ6IFN0cmluZyhkZW5vbUFtb3VudC52YWx1ZSksXG4gICAgICAgICAgZGVub206IGRlbm9tQW1vdW50LmRlbm9tXG4gICAgICAgIH0sXG4gICAgICAgIC8qXG5cblxuICAgICAgICAgKi9cbiAgICAgICAgcmVjZWl2ZXI6IGludGVybWVkaWF0ZVJlY2lwaWVudD8udmFsdWUgfHwgUEZNX1JFQ0VJVkVSLFxuICAgICAgICBmb3J3YXJkSW5mb1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNoYWluSHViO1xufTtcblxuLy9cbnZhciB0eXBlZEpzb24gPSAoZTIsIHQ1KSA9PiAoeyBcIkB0eXBlXCI6IGUyLCAuLi50NSB9KTtcbnZhciB0MyA9IC9eXFwvKD88c2VydmljZU5hbWU+XFx3Kyg/OlxcLlxcdyspKilcXC5RdWVyeSg/PG1ldGhvZE5hbWU+XFx3KylSZXF1ZXN0JC87XG52YXIgdHlwZVVybFRvR3JwY1BhdGggPSAoZTIpID0+IHtcbiAgY29uc3QgcjUgPSBlMi5tYXRjaCh0Myk7XG4gIGlmICghcjUgfHwgIXI1Lmdyb3VwcykgdGhyb3cgVHlwZUVycm9yKGBJbnZhbGlkIHR5cGVVcmw6ICR7ZTJ9LiBNdXN0IGJlIGEgUXVlcnkgUmVxdWVzdC5gKTtcbiAgY29uc3QgeyBzZXJ2aWNlTmFtZTogbzIsIG1ldGhvZE5hbWU6IHMzIH0gPSByNS5ncm91cHM7XG4gIHJldHVybiBgLyR7bzJ9LlF1ZXJ5LyR7czN9YDtcbn07XG52YXIgdG9SZXF1ZXN0UXVlcnlKc29uID0gKHQ1LCByNSA9IHt9KSA9PiBSZXF1ZXN0UXVlcnkudG9KU09OKFJlcXVlc3RRdWVyeS5mcm9tUGFydGlhbCh7IHBhdGg6IHR5cGVVcmxUb0dycGNQYXRoKHQ1LnR5cGVVcmwpLCBkYXRhOiB0NS52YWx1ZSwgLi4ucjUgfSkpO1xuXG4vL1xuZnVuY3Rpb24gcjIoKSB7XG4gIHJldHVybiB7IGZyb206IFwiXCIsIGFtb3VudDogXCJcIiwgZGVzdGluYXRpb25Eb21haW46IDAsIG1pbnRSZWNpcGllbnQ6IG5ldyBVaW50OEFycmF5KCksIGJ1cm5Ub2tlbjogXCJcIiB9O1xufVxudmFyIE1zZ0RlcG9zaXRGb3JCdXJuID0geyB0eXBlVXJsOiBcIi9jaXJjbGUuY2N0cC52MS5Nc2dEZXBvc2l0Rm9yQnVyblwiLCBlbmNvZGU6IChuMiwgZTIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+IChcIlwiICE9PSBuMi5mcm9tICYmIGUyLnVpbnQzMigxMCkuc3RyaW5nKG4yLmZyb20pLCBcIlwiICE9PSBuMi5hbW91bnQgJiYgZTIudWludDMyKDE4KS5zdHJpbmcobjIuYW1vdW50KSwgMCAhPT0gbjIuZGVzdGluYXRpb25Eb21haW4gJiYgZTIudWludDMyKDI0KS51aW50MzIobjIuZGVzdGluYXRpb25Eb21haW4pLCAwICE9PSBuMi5taW50UmVjaXBpZW50Lmxlbmd0aCAmJiBlMi51aW50MzIoMzQpLmJ5dGVzKG4yLm1pbnRSZWNpcGllbnQpLCBcIlwiICE9PSBuMi5idXJuVG9rZW4gJiYgZTIudWludDMyKDQyKS5zdHJpbmcobjIuYnVyblRva2VuKSwgZTIpLCBkZWNvZGUodDUsIGUyKSB7XG4gIGNvbnN0IG8yID0gdDUgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyB0NSA6IG5ldyBCaW5hcnlSZWFkZXIodDUpO1xuICBsZXQgaTMgPSB2b2lkIDAgPT09IGUyID8gbzIubGVuIDogbzIucG9zICsgZTI7XG4gIGNvbnN0IHMzID0gcjIoKTtcbiAgZm9yICg7IG8yLnBvcyA8IGkzOyApIHtcbiAgICBjb25zdCBuMiA9IG8yLnVpbnQzMigpO1xuICAgIHN3aXRjaCAobjIgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgczMuZnJvbSA9IG8yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgczMuYW1vdW50ID0gbzIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBzMy5kZXN0aW5hdGlvbkRvbWFpbiA9IG8yLnVpbnQzMigpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgczMubWludFJlY2lwaWVudCA9IG8yLmJ5dGVzKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA1OlxuICAgICAgICBzMy5idXJuVG9rZW4gPSBvMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBvMi5za2lwVHlwZSg3ICYgbjIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gczM7XG59LCBmcm9tSlNPTjogKG4yKSA9PiAoeyBmcm9tOiBpc1NldChuMi5mcm9tKSA/IFN0cmluZyhuMi5mcm9tKSA6IFwiXCIsIGFtb3VudDogaXNTZXQobjIuYW1vdW50KSA/IFN0cmluZyhuMi5hbW91bnQpIDogXCJcIiwgZGVzdGluYXRpb25Eb21haW46IGlzU2V0KG4yLmRlc3RpbmF0aW9uRG9tYWluKSA/IE51bWJlcihuMi5kZXN0aW5hdGlvbkRvbWFpbikgOiAwLCBtaW50UmVjaXBpZW50OiBpc1NldChuMi5taW50UmVjaXBpZW50KSA/IGRlY29kZUJhc2U2NChuMi5taW50UmVjaXBpZW50KSA6IG5ldyBVaW50OEFycmF5KCksIGJ1cm5Ub2tlbjogaXNTZXQobjIuYnVyblRva2VuKSA/IFN0cmluZyhuMi5idXJuVG9rZW4pIDogXCJcIiB9KSwgdG9KU09OKG4yKSB7XG4gIGNvbnN0IHQ1ID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IG4yLmZyb20gJiYgKHQ1LmZyb20gPSBuMi5mcm9tKSwgdm9pZCAwICE9PSBuMi5hbW91bnQgJiYgKHQ1LmFtb3VudCA9IG4yLmFtb3VudCksIHZvaWQgMCAhPT0gbjIuZGVzdGluYXRpb25Eb21haW4gJiYgKHQ1LmRlc3RpbmF0aW9uRG9tYWluID0gTWF0aC5yb3VuZChuMi5kZXN0aW5hdGlvbkRvbWFpbikpLCB2b2lkIDAgIT09IG4yLm1pbnRSZWNpcGllbnQgJiYgKHQ1Lm1pbnRSZWNpcGllbnQgPSBlbmNvZGVCYXNlNjQodm9pZCAwICE9PSBuMi5taW50UmVjaXBpZW50ID8gbjIubWludFJlY2lwaWVudCA6IG5ldyBVaW50OEFycmF5KCkpKSwgdm9pZCAwICE9PSBuMi5idXJuVG9rZW4gJiYgKHQ1LmJ1cm5Ub2tlbiA9IG4yLmJ1cm5Ub2tlbiksIHQ1O1xufSwgZnJvbVBhcnRpYWwobjIpIHtcbiAgY29uc3QgdDUgPSByMigpO1xuICByZXR1cm4gdDUuZnJvbSA9IG4yLmZyb20gPz8gXCJcIiwgdDUuYW1vdW50ID0gbjIuYW1vdW50ID8/IFwiXCIsIHQ1LmRlc3RpbmF0aW9uRG9tYWluID0gbjIuZGVzdGluYXRpb25Eb21haW4gPz8gMCwgdDUubWludFJlY2lwaWVudCA9IG4yLm1pbnRSZWNpcGllbnQgPz8gbmV3IFVpbnQ4QXJyYXkoKSwgdDUuYnVyblRva2VuID0gbjIuYnVyblRva2VuID8/IFwiXCIsIHQ1O1xufSwgZnJvbVByb3RvTXNnOiAobjIpID0+IE1zZ0RlcG9zaXRGb3JCdXJuLmRlY29kZShuMi52YWx1ZSksIHRvUHJvdG86IChuMikgPT4gTXNnRGVwb3NpdEZvckJ1cm4uZW5jb2RlKG4yKS5maW5pc2goKSwgdG9Qcm90b01zZzogKG4yKSA9PiAoeyB0eXBlVXJsOiBcIi9jaXJjbGUuY2N0cC52MS5Nc2dEZXBvc2l0Rm9yQnVyblwiLCB2YWx1ZTogTXNnRGVwb3NpdEZvckJ1cm4uZW5jb2RlKG4yKS5maW5pc2goKSB9KSB9O1xuZnVuY3Rpb24gYSgpIHtcbiAgcmV0dXJuIHsgZnJvbTogXCJcIiwgYW1vdW50OiBcIlwiLCBkZXN0aW5hdGlvbkRvbWFpbjogMCwgbWludFJlY2lwaWVudDogbmV3IFVpbnQ4QXJyYXkoKSwgYnVyblRva2VuOiBcIlwiLCBkZXN0aW5hdGlvbkNhbGxlcjogbmV3IFVpbnQ4QXJyYXkoKSB9O1xufVxudmFyIE1zZ0RlcG9zaXRGb3JCdXJuV2l0aENhbGxlciA9IHsgdHlwZVVybDogXCIvY2lyY2xlLmNjdHAudjEuTXNnRGVwb3NpdEZvckJ1cm5XaXRoQ2FsbGVyXCIsIGVuY29kZTogKG4yLCBlMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKFwiXCIgIT09IG4yLmZyb20gJiYgZTIudWludDMyKDEwKS5zdHJpbmcobjIuZnJvbSksIFwiXCIgIT09IG4yLmFtb3VudCAmJiBlMi51aW50MzIoMTgpLnN0cmluZyhuMi5hbW91bnQpLCAwICE9PSBuMi5kZXN0aW5hdGlvbkRvbWFpbiAmJiBlMi51aW50MzIoMjQpLnVpbnQzMihuMi5kZXN0aW5hdGlvbkRvbWFpbiksIDAgIT09IG4yLm1pbnRSZWNpcGllbnQubGVuZ3RoICYmIGUyLnVpbnQzMigzNCkuYnl0ZXMobjIubWludFJlY2lwaWVudCksIFwiXCIgIT09IG4yLmJ1cm5Ub2tlbiAmJiBlMi51aW50MzIoNDIpLnN0cmluZyhuMi5idXJuVG9rZW4pLCAwICE9PSBuMi5kZXN0aW5hdGlvbkNhbGxlci5sZW5ndGggJiYgZTIudWludDMyKDUwKS5ieXRlcyhuMi5kZXN0aW5hdGlvbkNhbGxlciksIGUyKSwgZGVjb2RlKHQ1LCBlMikge1xuICBjb25zdCBvMiA9IHQ1IGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gdDUgOiBuZXcgQmluYXJ5UmVhZGVyKHQ1KTtcbiAgbGV0IGkzID0gdm9pZCAwID09PSBlMiA/IG8yLmxlbiA6IG8yLnBvcyArIGUyO1xuICBjb25zdCByNSA9IGEoKTtcbiAgZm9yICg7IG8yLnBvcyA8IGkzOyApIHtcbiAgICBjb25zdCBuMiA9IG8yLnVpbnQzMigpO1xuICAgIHN3aXRjaCAobjIgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcjUuZnJvbSA9IG8yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcjUuYW1vdW50ID0gbzIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICByNS5kZXN0aW5hdGlvbkRvbWFpbiA9IG8yLnVpbnQzMigpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgcjUubWludFJlY2lwaWVudCA9IG8yLmJ5dGVzKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA1OlxuICAgICAgICByNS5idXJuVG9rZW4gPSBvMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDY6XG4gICAgICAgIHI1LmRlc3RpbmF0aW9uQ2FsbGVyID0gbzIuYnl0ZXMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBvMi5za2lwVHlwZSg3ICYgbjIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcjU7XG59LCBmcm9tSlNPTjogKG4yKSA9PiAoeyBmcm9tOiBpc1NldChuMi5mcm9tKSA/IFN0cmluZyhuMi5mcm9tKSA6IFwiXCIsIGFtb3VudDogaXNTZXQobjIuYW1vdW50KSA/IFN0cmluZyhuMi5hbW91bnQpIDogXCJcIiwgZGVzdGluYXRpb25Eb21haW46IGlzU2V0KG4yLmRlc3RpbmF0aW9uRG9tYWluKSA/IE51bWJlcihuMi5kZXN0aW5hdGlvbkRvbWFpbikgOiAwLCBtaW50UmVjaXBpZW50OiBpc1NldChuMi5taW50UmVjaXBpZW50KSA/IGRlY29kZUJhc2U2NChuMi5taW50UmVjaXBpZW50KSA6IG5ldyBVaW50OEFycmF5KCksIGJ1cm5Ub2tlbjogaXNTZXQobjIuYnVyblRva2VuKSA/IFN0cmluZyhuMi5idXJuVG9rZW4pIDogXCJcIiwgZGVzdGluYXRpb25DYWxsZXI6IGlzU2V0KG4yLmRlc3RpbmF0aW9uQ2FsbGVyKSA/IGRlY29kZUJhc2U2NChuMi5kZXN0aW5hdGlvbkNhbGxlcikgOiBuZXcgVWludDhBcnJheSgpIH0pLCB0b0pTT04objIpIHtcbiAgY29uc3QgdDUgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gbjIuZnJvbSAmJiAodDUuZnJvbSA9IG4yLmZyb20pLCB2b2lkIDAgIT09IG4yLmFtb3VudCAmJiAodDUuYW1vdW50ID0gbjIuYW1vdW50KSwgdm9pZCAwICE9PSBuMi5kZXN0aW5hdGlvbkRvbWFpbiAmJiAodDUuZGVzdGluYXRpb25Eb21haW4gPSBNYXRoLnJvdW5kKG4yLmRlc3RpbmF0aW9uRG9tYWluKSksIHZvaWQgMCAhPT0gbjIubWludFJlY2lwaWVudCAmJiAodDUubWludFJlY2lwaWVudCA9IGVuY29kZUJhc2U2NCh2b2lkIDAgIT09IG4yLm1pbnRSZWNpcGllbnQgPyBuMi5taW50UmVjaXBpZW50IDogbmV3IFVpbnQ4QXJyYXkoKSkpLCB2b2lkIDAgIT09IG4yLmJ1cm5Ub2tlbiAmJiAodDUuYnVyblRva2VuID0gbjIuYnVyblRva2VuKSwgdm9pZCAwICE9PSBuMi5kZXN0aW5hdGlvbkNhbGxlciAmJiAodDUuZGVzdGluYXRpb25DYWxsZXIgPSBlbmNvZGVCYXNlNjQodm9pZCAwICE9PSBuMi5kZXN0aW5hdGlvbkNhbGxlciA/IG4yLmRlc3RpbmF0aW9uQ2FsbGVyIDogbmV3IFVpbnQ4QXJyYXkoKSkpLCB0NTtcbn0sIGZyb21QYXJ0aWFsKG4yKSB7XG4gIGNvbnN0IHQ1ID0gYSgpO1xuICByZXR1cm4gdDUuZnJvbSA9IG4yLmZyb20gPz8gXCJcIiwgdDUuYW1vdW50ID0gbjIuYW1vdW50ID8/IFwiXCIsIHQ1LmRlc3RpbmF0aW9uRG9tYWluID0gbjIuZGVzdGluYXRpb25Eb21haW4gPz8gMCwgdDUubWludFJlY2lwaWVudCA9IG4yLm1pbnRSZWNpcGllbnQgPz8gbmV3IFVpbnQ4QXJyYXkoKSwgdDUuYnVyblRva2VuID0gbjIuYnVyblRva2VuID8/IFwiXCIsIHQ1LmRlc3RpbmF0aW9uQ2FsbGVyID0gbjIuZGVzdGluYXRpb25DYWxsZXIgPz8gbmV3IFVpbnQ4QXJyYXkoKSwgdDU7XG59LCBmcm9tUHJvdG9Nc2c6IChuMikgPT4gTXNnRGVwb3NpdEZvckJ1cm5XaXRoQ2FsbGVyLmRlY29kZShuMi52YWx1ZSksIHRvUHJvdG86IChuMikgPT4gTXNnRGVwb3NpdEZvckJ1cm5XaXRoQ2FsbGVyLmVuY29kZShuMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChuMikgPT4gKHsgdHlwZVVybDogXCIvY2lyY2xlLmNjdHAudjEuTXNnRGVwb3NpdEZvckJ1cm5XaXRoQ2FsbGVyXCIsIHZhbHVlOiBNc2dEZXBvc2l0Rm9yQnVybldpdGhDYWxsZXIuZW5jb2RlKG4yKS5maW5pc2goKSB9KSB9O1xuXG4vL1xuZnVuY3Rpb24gcjMoKSB7XG4gIHJldHVybiB7IGtleTogbmV3IFVpbnQ4QXJyYXkoKSwgb2Zmc2V0OiBCaWdJbnQoMCksIGxpbWl0OiBCaWdJbnQoMCksIGNvdW50VG90YWw6IGZhbHNlLCByZXZlcnNlOiBmYWxzZSB9O1xufVxudmFyIFBhZ2VSZXF1ZXN0ID0geyB0eXBlVXJsOiBcIi9jb3Ntb3MuYmFzZS5xdWVyeS52MWJldGExLlBhZ2VSZXF1ZXN0XCIsIGVuY29kZTogKGUyLCBvMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKDAgIT09IGUyLmtleS5sZW5ndGggJiYgbzIudWludDMyKDEwKS5ieXRlcyhlMi5rZXkpLCBlMi5vZmZzZXQgIT09IEJpZ0ludCgwKSAmJiBvMi51aW50MzIoMTYpLnVpbnQ2NChlMi5vZmZzZXQpLCBlMi5saW1pdCAhPT0gQmlnSW50KDApICYmIG8yLnVpbnQzMigyNCkudWludDY0KGUyLmxpbWl0KSwgdHJ1ZSA9PT0gZTIuY291bnRUb3RhbCAmJiBvMi51aW50MzIoMzIpLmJvb2woZTIuY291bnRUb3RhbCksIHRydWUgPT09IGUyLnJldmVyc2UgJiYgbzIudWludDMyKDQwKS5ib29sKGUyLnJldmVyc2UpLCBvMiksIGRlY29kZSh0NSwgbzIpIHtcbiAgY29uc3QgbjIgPSB0NSBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IHQ1IDogbmV3IEJpbmFyeVJlYWRlcih0NSk7XG4gIGxldCBpMyA9IHZvaWQgMCA9PT0gbzIgPyBuMi5sZW4gOiBuMi5wb3MgKyBvMjtcbiAgY29uc3QgczMgPSByMygpO1xuICBmb3IgKDsgbjIucG9zIDwgaTM7ICkge1xuICAgIGNvbnN0IGUyID0gbjIudWludDMyKCk7XG4gICAgc3dpdGNoIChlMiA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBzMy5rZXkgPSBuMi5ieXRlcygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgczMub2Zmc2V0ID0gbjIudWludDY0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBzMy5saW1pdCA9IG4yLnVpbnQ2NCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgczMuY291bnRUb3RhbCA9IG4yLmJvb2woKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDU6XG4gICAgICAgIHMzLnJldmVyc2UgPSBuMi5ib29sKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbjIuc2tpcFR5cGUoNyAmIGUyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHMzO1xufSwgZnJvbUpTT046IChlMikgPT4gKHsga2V5OiBpc1NldChlMi5rZXkpID8gZGVjb2RlQmFzZTY0KGUyLmtleSkgOiBuZXcgVWludDhBcnJheSgpLCBvZmZzZXQ6IGlzU2V0KGUyLm9mZnNldCkgPyBCaWdJbnQoZTIub2Zmc2V0LnRvU3RyaW5nKCkpIDogQmlnSW50KDApLCBsaW1pdDogaXNTZXQoZTIubGltaXQpID8gQmlnSW50KGUyLmxpbWl0LnRvU3RyaW5nKCkpIDogQmlnSW50KDApLCBjb3VudFRvdGFsOiAhIWlzU2V0KGUyLmNvdW50VG90YWwpICYmIEJvb2xlYW4oZTIuY291bnRUb3RhbCksIHJldmVyc2U6ICEhaXNTZXQoZTIucmV2ZXJzZSkgJiYgQm9vbGVhbihlMi5yZXZlcnNlKSB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IHQ1ID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLmtleSAmJiAodDUua2V5ID0gZW5jb2RlQmFzZTY0KHZvaWQgMCAhPT0gZTIua2V5ID8gZTIua2V5IDogbmV3IFVpbnQ4QXJyYXkoKSkpLCB2b2lkIDAgIT09IGUyLm9mZnNldCAmJiAodDUub2Zmc2V0ID0gKGUyLm9mZnNldCB8fCBCaWdJbnQoMCkpLnRvU3RyaW5nKCkpLCB2b2lkIDAgIT09IGUyLmxpbWl0ICYmICh0NS5saW1pdCA9IChlMi5saW1pdCB8fCBCaWdJbnQoMCkpLnRvU3RyaW5nKCkpLCB2b2lkIDAgIT09IGUyLmNvdW50VG90YWwgJiYgKHQ1LmNvdW50VG90YWwgPSBlMi5jb3VudFRvdGFsKSwgdm9pZCAwICE9PSBlMi5yZXZlcnNlICYmICh0NS5yZXZlcnNlID0gZTIucmV2ZXJzZSksIHQ1O1xufSwgZnJvbVBhcnRpYWwoZTIpIHtcbiAgY29uc3QgdDUgPSByMygpO1xuICByZXR1cm4gdDUua2V5ID0gZTIua2V5ID8/IG5ldyBVaW50OEFycmF5KCksIHQ1Lm9mZnNldCA9IHZvaWQgMCAhPT0gZTIub2Zmc2V0ICYmIG51bGwgIT09IGUyLm9mZnNldCA/IEJpZ0ludChlMi5vZmZzZXQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIHQ1LmxpbWl0ID0gdm9pZCAwICE9PSBlMi5saW1pdCAmJiBudWxsICE9PSBlMi5saW1pdCA/IEJpZ0ludChlMi5saW1pdC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgdDUuY291bnRUb3RhbCA9IGUyLmNvdW50VG90YWwgPz8gZmFsc2UsIHQ1LnJldmVyc2UgPSBlMi5yZXZlcnNlID8/IGZhbHNlLCB0NTtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBQYWdlUmVxdWVzdC5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IFBhZ2VSZXF1ZXN0LmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLmJhc2UucXVlcnkudjFiZXRhMS5QYWdlUmVxdWVzdFwiLCB2YWx1ZTogUGFnZVJlcXVlc3QuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xuZnVuY3Rpb24gczIoKSB7XG4gIHJldHVybiB7IG5leHRLZXk6IG5ldyBVaW50OEFycmF5KCksIHRvdGFsOiBCaWdJbnQoMCkgfTtcbn1cbnZhciBQYWdlUmVzcG9uc2UgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5iYXNlLnF1ZXJ5LnYxYmV0YTEuUGFnZVJlc3BvbnNlXCIsIGVuY29kZTogKGUyLCBvMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKDAgIT09IGUyLm5leHRLZXkubGVuZ3RoICYmIG8yLnVpbnQzMigxMCkuYnl0ZXMoZTIubmV4dEtleSksIGUyLnRvdGFsICE9PSBCaWdJbnQoMCkgJiYgbzIudWludDMyKDE2KS51aW50NjQoZTIudG90YWwpLCBvMiksIGRlY29kZSh0NSwgbzIpIHtcbiAgY29uc3QgbjIgPSB0NSBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IHQ1IDogbmV3IEJpbmFyeVJlYWRlcih0NSk7XG4gIGxldCBpMyA9IHZvaWQgMCA9PT0gbzIgPyBuMi5sZW4gOiBuMi5wb3MgKyBvMjtcbiAgY29uc3QgcjUgPSBzMigpO1xuICBmb3IgKDsgbjIucG9zIDwgaTM7ICkge1xuICAgIGNvbnN0IGUyID0gbjIudWludDMyKCk7XG4gICAgc3dpdGNoIChlMiA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByNS5uZXh0S2V5ID0gbjIuYnl0ZXMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHI1LnRvdGFsID0gbjIudWludDY0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbjIuc2tpcFR5cGUoNyAmIGUyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHI1O1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgbmV4dEtleTogaXNTZXQoZTIubmV4dEtleSkgPyBkZWNvZGVCYXNlNjQoZTIubmV4dEtleSkgOiBuZXcgVWludDhBcnJheSgpLCB0b3RhbDogaXNTZXQoZTIudG90YWwpID8gQmlnSW50KGUyLnRvdGFsLnRvU3RyaW5nKCkpIDogQmlnSW50KDApIH0pLCB0b0pTT04oZTIpIHtcbiAgY29uc3QgdDUgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gZTIubmV4dEtleSAmJiAodDUubmV4dEtleSA9IGVuY29kZUJhc2U2NCh2b2lkIDAgIT09IGUyLm5leHRLZXkgPyBlMi5uZXh0S2V5IDogbmV3IFVpbnQ4QXJyYXkoKSkpLCB2b2lkIDAgIT09IGUyLnRvdGFsICYmICh0NS50b3RhbCA9IChlMi50b3RhbCB8fCBCaWdJbnQoMCkpLnRvU3RyaW5nKCkpLCB0NTtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IHQ1ID0gczIoKTtcbiAgcmV0dXJuIHQ1Lm5leHRLZXkgPSBlMi5uZXh0S2V5ID8/IG5ldyBVaW50OEFycmF5KCksIHQ1LnRvdGFsID0gdm9pZCAwICE9PSBlMi50b3RhbCAmJiBudWxsICE9PSBlMi50b3RhbCA/IEJpZ0ludChlMi50b3RhbC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgdDU7XG59LCBmcm9tUHJvdG9Nc2c6IChlMikgPT4gUGFnZVJlc3BvbnNlLmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gUGFnZVJlc3BvbnNlLmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLmJhc2UucXVlcnkudjFiZXRhMS5QYWdlUmVzcG9uc2VcIiwgdmFsdWU6IFBhZ2VSZXNwb25zZS5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG5cbi8vXG52YXIgUXVlcnlCYWxhbmNlUmVxdWVzdCA9IHsgdHlwZVVybDogXCIvY29zbW9zLmJhbmsudjFiZXRhMS5RdWVyeUJhbGFuY2VSZXF1ZXN0XCIsIGVuY29kZTogKGUyLCBvMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKFwiXCIgIT09IGUyLmFkZHJlc3MgJiYgbzIudWludDMyKDEwKS5zdHJpbmcoZTIuYWRkcmVzcyksIFwiXCIgIT09IGUyLmRlbm9tICYmIG8yLnVpbnQzMigxOCkuc3RyaW5nKGUyLmRlbm9tKSwgbzIpLCBkZWNvZGUoZTIsIG8yKSB7XG4gIGNvbnN0IG4yID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgYTIgPSB2b2lkIDAgPT09IG8yID8gbjIubGVuIDogbjIucG9zICsgbzI7XG4gIGNvbnN0IHQ1ID0geyBhZGRyZXNzOiBcIlwiLCBkZW5vbTogXCJcIiB9O1xuICBmb3IgKDsgbjIucG9zIDwgYTI7ICkge1xuICAgIGNvbnN0IGUzID0gbjIudWludDMyKCk7XG4gICAgc3dpdGNoIChlMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICB0NS5hZGRyZXNzID0gbjIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICB0NS5kZW5vbSA9IG4yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG4yLnNraXBUeXBlKDcgJiBlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0NTtcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IGFkZHJlc3M6IGlzU2V0KGUyLmFkZHJlc3MpID8gU3RyaW5nKGUyLmFkZHJlc3MpIDogXCJcIiwgZGVub206IGlzU2V0KGUyLmRlbm9tKSA/IFN0cmluZyhlMi5kZW5vbSkgOiBcIlwiIH0pLCB0b0pTT04oZTIpIHtcbiAgY29uc3QgbzIgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gZTIuYWRkcmVzcyAmJiAobzIuYWRkcmVzcyA9IGUyLmFkZHJlc3MpLCB2b2lkIDAgIT09IGUyLmRlbm9tICYmIChvMi5kZW5vbSA9IGUyLmRlbm9tKSwgbzI7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCBvMiA9IHsgYWRkcmVzczogXCJcIiwgZGVub206IFwiXCIgfTtcbiAgcmV0dXJuIG8yLmFkZHJlc3MgPSBlMi5hZGRyZXNzID8/IFwiXCIsIG8yLmRlbm9tID0gZTIuZGVub20gPz8gXCJcIiwgbzI7XG59LCBmcm9tUHJvdG9Nc2c6IChlMikgPT4gUXVlcnlCYWxhbmNlUmVxdWVzdC5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IFF1ZXJ5QmFsYW5jZVJlcXVlc3QuZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3MuYmFuay52MWJldGExLlF1ZXJ5QmFsYW5jZVJlcXVlc3RcIiwgdmFsdWU6IFF1ZXJ5QmFsYW5jZVJlcXVlc3QuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xudmFyIFF1ZXJ5QmFsYW5jZVJlc3BvbnNlID0geyB0eXBlVXJsOiBcIi9jb3Ntb3MuYmFuay52MWJldGExLlF1ZXJ5QmFsYW5jZVJlc3BvbnNlXCIsIGVuY29kZTogKGUyLCBvMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKHZvaWQgMCAhPT0gZTIuYmFsYW5jZSAmJiBDb2luLmVuY29kZShlMi5iYWxhbmNlLCBvMi51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCksIG8yKSwgZGVjb2RlKGUyLCBvMikge1xuICBjb25zdCBhMiA9IGUyIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gZTIgOiBuZXcgQmluYXJ5UmVhZGVyKGUyKTtcbiAgbGV0IHQ1ID0gdm9pZCAwID09PSBvMiA/IGEyLmxlbiA6IGEyLnBvcyArIG8yO1xuICBjb25zdCBzMyA9IHsgYmFsYW5jZTogdm9pZCAwIH07XG4gIGZvciAoOyBhMi5wb3MgPCB0NTsgKSB7XG4gICAgY29uc3QgZTMgPSBhMi51aW50MzIoKTtcbiAgICBpZiAoZTMgPj4+IDMgPT0gMSkgczMuYmFsYW5jZSA9IENvaW4uZGVjb2RlKGEyLCBhMi51aW50MzIoKSk7XG4gICAgZWxzZSBhMi5za2lwVHlwZSg3ICYgZTMpO1xuICB9XG4gIHJldHVybiBzMztcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IGJhbGFuY2U6IGlzU2V0KGUyLmJhbGFuY2UpID8gQ29pbi5mcm9tSlNPTihlMi5iYWxhbmNlKSA6IHZvaWQgMCB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IG8yID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLmJhbGFuY2UgJiYgKG8yLmJhbGFuY2UgPSBlMi5iYWxhbmNlID8gQ29pbi50b0pTT04oZTIuYmFsYW5jZSkgOiB2b2lkIDApLCBvMjtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IG8yID0geyBiYWxhbmNlOiB2b2lkIDAgfTtcbiAgcmV0dXJuIG8yLmJhbGFuY2UgPSB2b2lkIDAgIT09IGUyLmJhbGFuY2UgJiYgbnVsbCAhPT0gZTIuYmFsYW5jZSA/IENvaW4uZnJvbVBhcnRpYWwoZTIuYmFsYW5jZSkgOiB2b2lkIDAsIG8yO1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IFF1ZXJ5QmFsYW5jZVJlc3BvbnNlLmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gUXVlcnlCYWxhbmNlUmVzcG9uc2UuZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3MuYmFuay52MWJldGExLlF1ZXJ5QmFsYW5jZVJlc3BvbnNlXCIsIHZhbHVlOiBRdWVyeUJhbGFuY2VSZXNwb25zZS5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG52YXIgUXVlcnlBbGxCYWxhbmNlc1JlcXVlc3QgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5iYW5rLnYxYmV0YTEuUXVlcnlBbGxCYWxhbmNlc1JlcXVlc3RcIiwgZW5jb2RlOiAobzIsIG4yID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAoXCJcIiAhPT0gbzIuYWRkcmVzcyAmJiBuMi51aW50MzIoMTApLnN0cmluZyhvMi5hZGRyZXNzKSwgdm9pZCAwICE9PSBvMi5wYWdpbmF0aW9uICYmIFBhZ2VSZXF1ZXN0LmVuY29kZShvMi5wYWdpbmF0aW9uLCBuMi51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCksIG4yKSwgZGVjb2RlKG8yLCBuMikge1xuICBjb25zdCBhMiA9IG8yIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gbzIgOiBuZXcgQmluYXJ5UmVhZGVyKG8yKTtcbiAgbGV0IHQ1ID0gdm9pZCAwID09PSBuMiA/IGEyLmxlbiA6IGEyLnBvcyArIG4yO1xuICBjb25zdCBzMyA9IHsgYWRkcmVzczogXCJcIiwgcGFnaW5hdGlvbjogdm9pZCAwIH07XG4gIGZvciAoOyBhMi5wb3MgPCB0NTsgKSB7XG4gICAgY29uc3QgbzMgPSBhMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKG8zID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHMzLmFkZHJlc3MgPSBhMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHMzLnBhZ2luYXRpb24gPSBQYWdlUmVxdWVzdC5kZWNvZGUoYTIsIGEyLnVpbnQzMigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhMi5za2lwVHlwZSg3ICYgbzMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gczM7XG59LCBmcm9tSlNPTjogKG8yKSA9PiAoeyBhZGRyZXNzOiBpc1NldChvMi5hZGRyZXNzKSA/IFN0cmluZyhvMi5hZGRyZXNzKSA6IFwiXCIsIHBhZ2luYXRpb246IGlzU2V0KG8yLnBhZ2luYXRpb24pID8gUGFnZVJlcXVlc3QuZnJvbUpTT04obzIucGFnaW5hdGlvbikgOiB2b2lkIDAgfSksIHRvSlNPTihvMikge1xuICBjb25zdCBuMiA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBvMi5hZGRyZXNzICYmIChuMi5hZGRyZXNzID0gbzIuYWRkcmVzcyksIHZvaWQgMCAhPT0gbzIucGFnaW5hdGlvbiAmJiAobjIucGFnaW5hdGlvbiA9IG8yLnBhZ2luYXRpb24gPyBQYWdlUmVxdWVzdC50b0pTT04obzIucGFnaW5hdGlvbikgOiB2b2lkIDApLCBuMjtcbn0sIGZyb21QYXJ0aWFsKG8yKSB7XG4gIGNvbnN0IG4yID0geyBhZGRyZXNzOiBcIlwiLCBwYWdpbmF0aW9uOiB2b2lkIDAgfTtcbiAgcmV0dXJuIG4yLmFkZHJlc3MgPSBvMi5hZGRyZXNzID8/IFwiXCIsIG4yLnBhZ2luYXRpb24gPSB2b2lkIDAgIT09IG8yLnBhZ2luYXRpb24gJiYgbnVsbCAhPT0gbzIucGFnaW5hdGlvbiA/IFBhZ2VSZXF1ZXN0LmZyb21QYXJ0aWFsKG8yLnBhZ2luYXRpb24pIDogdm9pZCAwLCBuMjtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBRdWVyeUFsbEJhbGFuY2VzUmVxdWVzdC5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IFF1ZXJ5QWxsQmFsYW5jZXNSZXF1ZXN0LmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLmJhbmsudjFiZXRhMS5RdWVyeUFsbEJhbGFuY2VzUmVxdWVzdFwiLCB2YWx1ZTogUXVlcnlBbGxCYWxhbmNlc1JlcXVlc3QuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xudmFyIFF1ZXJ5QWxsQmFsYW5jZXNSZXNwb25zZSA9IHsgdHlwZVVybDogXCIvY29zbW9zLmJhbmsudjFiZXRhMS5RdWVyeUFsbEJhbGFuY2VzUmVzcG9uc2VcIiwgZW5jb2RlKGUyLCBhMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkge1xuICBmb3IgKGNvbnN0IG8yIG9mIGUyLmJhbGFuY2VzKSBDb2luLmVuY29kZShvMiwgYTIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5wYWdpbmF0aW9uICYmIFBhZ2VSZXNwb25zZS5lbmNvZGUoZTIucGFnaW5hdGlvbiwgYTIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpLCBhMjtcbn0sIGRlY29kZShlMiwgYTIpIHtcbiAgY29uc3QgdDUgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCBzMyA9IHZvaWQgMCA9PT0gYTIgPyB0NS5sZW4gOiB0NS5wb3MgKyBhMjtcbiAgY29uc3QgcjUgPSB7IGJhbGFuY2VzOiBbXSwgcGFnaW5hdGlvbjogdm9pZCAwIH07XG4gIGZvciAoOyB0NS5wb3MgPCBzMzsgKSB7XG4gICAgY29uc3QgZTMgPSB0NS51aW50MzIoKTtcbiAgICBzd2l0Y2ggKGUzID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHI1LmJhbGFuY2VzLnB1c2goQ29pbi5kZWNvZGUodDUsIHQ1LnVpbnQzMigpKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByNS5wYWdpbmF0aW9uID0gUGFnZVJlc3BvbnNlLmRlY29kZSh0NSwgdDUudWludDMyKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHQ1LnNraXBUeXBlKDcgJiBlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiByNTtcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IGJhbGFuY2VzOiBBcnJheS5pc0FycmF5KGUyPy5iYWxhbmNlcykgPyBlMi5iYWxhbmNlcy5tYXAoKGUzKSA9PiBDb2luLmZyb21KU09OKGUzKSkgOiBbXSwgcGFnaW5hdGlvbjogaXNTZXQoZTIucGFnaW5hdGlvbikgPyBQYWdlUmVzcG9uc2UuZnJvbUpTT04oZTIucGFnaW5hdGlvbikgOiB2b2lkIDAgfSksIHRvSlNPTihlMikge1xuICBjb25zdCBhMiA9IHt9O1xuICByZXR1cm4gZTIuYmFsYW5jZXMgPyBhMi5iYWxhbmNlcyA9IGUyLmJhbGFuY2VzLm1hcCgoZTMpID0+IGUzID8gQ29pbi50b0pTT04oZTMpIDogdm9pZCAwKSA6IGEyLmJhbGFuY2VzID0gW10sIHZvaWQgMCAhPT0gZTIucGFnaW5hdGlvbiAmJiAoYTIucGFnaW5hdGlvbiA9IGUyLnBhZ2luYXRpb24gPyBQYWdlUmVzcG9uc2UudG9KU09OKGUyLnBhZ2luYXRpb24pIDogdm9pZCAwKSwgYTI7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCBhMiA9IHsgYmFsYW5jZXM6IFtdLCBwYWdpbmF0aW9uOiB2b2lkIDAgfTtcbiAgcmV0dXJuIGEyLmJhbGFuY2VzID0gZTIuYmFsYW5jZXM/Lm1hcCgoZTMpID0+IENvaW4uZnJvbVBhcnRpYWwoZTMpKSB8fCBbXSwgYTIucGFnaW5hdGlvbiA9IHZvaWQgMCAhPT0gZTIucGFnaW5hdGlvbiAmJiBudWxsICE9PSBlMi5wYWdpbmF0aW9uID8gUGFnZVJlc3BvbnNlLmZyb21QYXJ0aWFsKGUyLnBhZ2luYXRpb24pIDogdm9pZCAwLCBhMjtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBRdWVyeUFsbEJhbGFuY2VzUmVzcG9uc2UuZGVjb2RlKGUyLnZhbHVlKSwgdG9Qcm90bzogKGUyKSA9PiBRdWVyeUFsbEJhbGFuY2VzUmVzcG9uc2UuZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3MuYmFuay52MWJldGExLlF1ZXJ5QWxsQmFsYW5jZXNSZXNwb25zZVwiLCB2YWx1ZTogUXVlcnlBbGxCYWxhbmNlc1Jlc3BvbnNlLmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcblxuLy9cbnZhciBNc2dTZW5kID0geyB0eXBlVXJsOiBcIi9jb3Ntb3MuYmFuay52MWJldGExLk1zZ1NlbmRcIiwgZW5jb2RlKG8yLCB0NSA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkge1xuICBcIlwiICE9PSBvMi5mcm9tQWRkcmVzcyAmJiB0NS51aW50MzIoMTApLnN0cmluZyhvMi5mcm9tQWRkcmVzcyksIFwiXCIgIT09IG8yLnRvQWRkcmVzcyAmJiB0NS51aW50MzIoMTgpLnN0cmluZyhvMi50b0FkZHJlc3MpO1xuICBmb3IgKGNvbnN0IHMzIG9mIG8yLmFtb3VudCkgQ29pbi5lbmNvZGUoczMsIHQ1LnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKTtcbiAgcmV0dXJuIHQ1O1xufSwgZGVjb2RlKG8yLCB0NSkge1xuICBjb25zdCBzMyA9IG8yIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gbzIgOiBuZXcgQmluYXJ5UmVhZGVyKG8yKTtcbiAgbGV0IG4yID0gdm9pZCAwID09PSB0NSA/IHMzLmxlbiA6IHMzLnBvcyArIHQ1O1xuICBjb25zdCBhMiA9IHsgZnJvbUFkZHJlc3M6IFwiXCIsIHRvQWRkcmVzczogXCJcIiwgYW1vdW50OiBbXSB9O1xuICBmb3IgKDsgczMucG9zIDwgbjI7ICkge1xuICAgIGNvbnN0IG8zID0gczMudWludDMyKCk7XG4gICAgc3dpdGNoIChvMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBhMi5mcm9tQWRkcmVzcyA9IHMzLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgYTIudG9BZGRyZXNzID0gczMuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBhMi5hbW91bnQucHVzaChDb2luLmRlY29kZShzMywgczMudWludDMyKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzMy5za2lwVHlwZSg3ICYgbzMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYTI7XG59LCBmcm9tSlNPTjogKG8yKSA9PiAoeyBmcm9tQWRkcmVzczogaXNTZXQobzIuZnJvbUFkZHJlc3MpID8gU3RyaW5nKG8yLmZyb21BZGRyZXNzKSA6IFwiXCIsIHRvQWRkcmVzczogaXNTZXQobzIudG9BZGRyZXNzKSA/IFN0cmluZyhvMi50b0FkZHJlc3MpIDogXCJcIiwgYW1vdW50OiBBcnJheS5pc0FycmF5KG8yPy5hbW91bnQpID8gbzIuYW1vdW50Lm1hcCgobzMpID0+IENvaW4uZnJvbUpTT04obzMpKSA6IFtdIH0pLCB0b0pTT04obzIpIHtcbiAgY29uc3QgdDUgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gbzIuZnJvbUFkZHJlc3MgJiYgKHQ1LmZyb21BZGRyZXNzID0gbzIuZnJvbUFkZHJlc3MpLCB2b2lkIDAgIT09IG8yLnRvQWRkcmVzcyAmJiAodDUudG9BZGRyZXNzID0gbzIudG9BZGRyZXNzKSwgbzIuYW1vdW50ID8gdDUuYW1vdW50ID0gbzIuYW1vdW50Lm1hcCgobzMpID0+IG8zID8gQ29pbi50b0pTT04obzMpIDogdm9pZCAwKSA6IHQ1LmFtb3VudCA9IFtdLCB0NTtcbn0sIGZyb21QYXJ0aWFsKG8yKSB7XG4gIGNvbnN0IHQ1ID0geyBmcm9tQWRkcmVzczogXCJcIiwgdG9BZGRyZXNzOiBcIlwiLCBhbW91bnQ6IFtdIH07XG4gIHJldHVybiB0NS5mcm9tQWRkcmVzcyA9IG8yLmZyb21BZGRyZXNzID8/IFwiXCIsIHQ1LnRvQWRkcmVzcyA9IG8yLnRvQWRkcmVzcyA/PyBcIlwiLCB0NS5hbW91bnQgPSBvMi5hbW91bnQ/Lm1hcCgobzMpID0+IENvaW4uZnJvbVBhcnRpYWwobzMpKSB8fCBbXSwgdDU7XG59LCBmcm9tUHJvdG9Nc2c6IChlMikgPT4gTXNnU2VuZC5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IE1zZ1NlbmQuZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3MuYmFuay52MWJldGExLk1zZ1NlbmRcIiwgdmFsdWU6IE1zZ1NlbmQuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xuXG4vL1xudmFyIERlbGVnYXRpb25EZWxlZ2F0b3JSZXdhcmQgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5kaXN0cmlidXRpb24udjFiZXRhMS5EZWxlZ2F0aW9uRGVsZWdhdG9yUmV3YXJkXCIsIGVuY29kZSh0NSwgZTIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpIHtcbiAgXCJcIiAhPT0gdDUudmFsaWRhdG9yQWRkcmVzcyAmJiBlMi51aW50MzIoMTApLnN0cmluZyh0NS52YWxpZGF0b3JBZGRyZXNzKTtcbiAgZm9yIChjb25zdCByNSBvZiB0NS5yZXdhcmQpIERlY0NvaW4uZW5jb2RlKHI1LCBlMi51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gIHJldHVybiBlMjtcbn0sIGRlY29kZSh0NSwgcjUpIHtcbiAgY29uc3QgaTMgPSB0NSBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IHQ1IDogbmV3IEJpbmFyeVJlYWRlcih0NSk7XG4gIGxldCBuMiA9IHZvaWQgMCA9PT0gcjUgPyBpMy5sZW4gOiBpMy5wb3MgKyByNTtcbiAgY29uc3QgYTIgPSB7IHZhbGlkYXRvckFkZHJlc3M6IFwiXCIsIHJld2FyZDogW10gfTtcbiAgZm9yICg7IGkzLnBvcyA8IG4yOyApIHtcbiAgICBjb25zdCB0NiA9IGkzLnVpbnQzMigpO1xuICAgIHN3aXRjaCAodDYgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgYTIudmFsaWRhdG9yQWRkcmVzcyA9IGkzLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgYTIucmV3YXJkLnB1c2goRGVjQ29pbi5kZWNvZGUoaTMsIGkzLnVpbnQzMigpKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaTMuc2tpcFR5cGUoNyAmIHQ2KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGEyO1xufSwgZnJvbUpTT046ICh0NSkgPT4gKHsgdmFsaWRhdG9yQWRkcmVzczogaXNTZXQodDUudmFsaWRhdG9yQWRkcmVzcykgPyBTdHJpbmcodDUudmFsaWRhdG9yQWRkcmVzcykgOiBcIlwiLCByZXdhcmQ6IEFycmF5LmlzQXJyYXkodDU/LnJld2FyZCkgPyB0NS5yZXdhcmQubWFwKCh0NikgPT4gRGVjQ29pbi5mcm9tSlNPTih0NikpIDogW10gfSksIHRvSlNPTih0NSkge1xuICBjb25zdCBlMiA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSB0NS52YWxpZGF0b3JBZGRyZXNzICYmIChlMi52YWxpZGF0b3JBZGRyZXNzID0gdDUudmFsaWRhdG9yQWRkcmVzcyksIHQ1LnJld2FyZCA/IGUyLnJld2FyZCA9IHQ1LnJld2FyZC5tYXAoKHQ2KSA9PiB0NiA/IERlY0NvaW4udG9KU09OKHQ2KSA6IHZvaWQgMCkgOiBlMi5yZXdhcmQgPSBbXSwgZTI7XG59LCBmcm9tUGFydGlhbCh0NSkge1xuICBjb25zdCBlMiA9IHsgdmFsaWRhdG9yQWRkcmVzczogXCJcIiwgcmV3YXJkOiBbXSB9O1xuICByZXR1cm4gZTIudmFsaWRhdG9yQWRkcmVzcyA9IHQ1LnZhbGlkYXRvckFkZHJlc3MgPz8gXCJcIiwgZTIucmV3YXJkID0gdDUucmV3YXJkPy5tYXAoKHQ2KSA9PiBEZWNDb2luLmZyb21QYXJ0aWFsKHQ2KSkgfHwgW10sIGUyO1xufSwgZnJvbVByb3RvTXNnOiAobzIpID0+IERlbGVnYXRpb25EZWxlZ2F0b3JSZXdhcmQuZGVjb2RlKG8yLnZhbHVlKSwgdG9Qcm90bzogKG8yKSA9PiBEZWxlZ2F0aW9uRGVsZWdhdG9yUmV3YXJkLmVuY29kZShvMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChvMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLkRlbGVnYXRpb25EZWxlZ2F0b3JSZXdhcmRcIiwgdmFsdWU6IERlbGVnYXRpb25EZWxlZ2F0b3JSZXdhcmQuZW5jb2RlKG8yKS5maW5pc2goKSB9KSB9O1xuXG4vL1xudmFyIFF1ZXJ5RGVsZWdhdGlvblJld2FyZHNSZXF1ZXN0ID0geyB0eXBlVXJsOiBcIi9jb3Ntb3MuZGlzdHJpYnV0aW9uLnYxYmV0YTEuUXVlcnlEZWxlZ2F0aW9uUmV3YXJkc1JlcXVlc3RcIiwgZW5jb2RlOiAoZTIsIG8yID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAoXCJcIiAhPT0gZTIuZGVsZWdhdG9yQWRkcmVzcyAmJiBvMi51aW50MzIoMTApLnN0cmluZyhlMi5kZWxlZ2F0b3JBZGRyZXNzKSwgXCJcIiAhPT0gZTIudmFsaWRhdG9yQWRkcmVzcyAmJiBvMi51aW50MzIoMTgpLnN0cmluZyhlMi52YWxpZGF0b3JBZGRyZXNzKSwgbzIpLCBkZWNvZGUoZTIsIG8yKSB7XG4gIGNvbnN0IHMzID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgcjUgPSB2b2lkIDAgPT09IG8yID8gczMubGVuIDogczMucG9zICsgbzI7XG4gIGNvbnN0IHQ1ID0geyBkZWxlZ2F0b3JBZGRyZXNzOiBcIlwiLCB2YWxpZGF0b3JBZGRyZXNzOiBcIlwiIH07XG4gIGZvciAoOyBzMy5wb3MgPCByNTsgKSB7XG4gICAgY29uc3QgZTMgPSBzMy51aW50MzIoKTtcbiAgICBzd2l0Y2ggKGUzID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHQ1LmRlbGVnYXRvckFkZHJlc3MgPSBzMy5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHQ1LnZhbGlkYXRvckFkZHJlc3MgPSBzMy5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzMy5za2lwVHlwZSg3ICYgZTMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdDU7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyBkZWxlZ2F0b3JBZGRyZXNzOiBpc1NldChlMi5kZWxlZ2F0b3JBZGRyZXNzKSA/IFN0cmluZyhlMi5kZWxlZ2F0b3JBZGRyZXNzKSA6IFwiXCIsIHZhbGlkYXRvckFkZHJlc3M6IGlzU2V0KGUyLnZhbGlkYXRvckFkZHJlc3MpID8gU3RyaW5nKGUyLnZhbGlkYXRvckFkZHJlc3MpIDogXCJcIiB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IG8yID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLmRlbGVnYXRvckFkZHJlc3MgJiYgKG8yLmRlbGVnYXRvckFkZHJlc3MgPSBlMi5kZWxlZ2F0b3JBZGRyZXNzKSwgdm9pZCAwICE9PSBlMi52YWxpZGF0b3JBZGRyZXNzICYmIChvMi52YWxpZGF0b3JBZGRyZXNzID0gZTIudmFsaWRhdG9yQWRkcmVzcyksIG8yO1xufSwgZnJvbVBhcnRpYWwoZTIpIHtcbiAgY29uc3QgbzIgPSB7IGRlbGVnYXRvckFkZHJlc3M6IFwiXCIsIHZhbGlkYXRvckFkZHJlc3M6IFwiXCIgfTtcbiAgcmV0dXJuIG8yLmRlbGVnYXRvckFkZHJlc3MgPSBlMi5kZWxlZ2F0b3JBZGRyZXNzID8/IFwiXCIsIG8yLnZhbGlkYXRvckFkZHJlc3MgPSBlMi52YWxpZGF0b3JBZGRyZXNzID8/IFwiXCIsIG8yO1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IFF1ZXJ5RGVsZWdhdGlvblJld2FyZHNSZXF1ZXN0LmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gUXVlcnlEZWxlZ2F0aW9uUmV3YXJkc1JlcXVlc3QuZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3MuZGlzdHJpYnV0aW9uLnYxYmV0YTEuUXVlcnlEZWxlZ2F0aW9uUmV3YXJkc1JlcXVlc3RcIiwgdmFsdWU6IFF1ZXJ5RGVsZWdhdGlvblJld2FyZHNSZXF1ZXN0LmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcbnZhciBRdWVyeURlbGVnYXRpb25SZXdhcmRzUmVzcG9uc2UgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5kaXN0cmlidXRpb24udjFiZXRhMS5RdWVyeURlbGVnYXRpb25SZXdhcmRzUmVzcG9uc2VcIiwgZW5jb2RlKGUyLCBvMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkge1xuICBmb3IgKGNvbnN0IHMzIG9mIGUyLnJld2FyZHMpIERlY0NvaW4uZW5jb2RlKHMzLCBvMi51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gIHJldHVybiBvMjtcbn0sIGRlY29kZShlMiwgbzIpIHtcbiAgY29uc3QgczMgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCByNSA9IHZvaWQgMCA9PT0gbzIgPyBzMy5sZW4gOiBzMy5wb3MgKyBvMjtcbiAgY29uc3QgdDUgPSB7IHJld2FyZHM6IFtdIH07XG4gIGZvciAoOyBzMy5wb3MgPCByNTsgKSB7XG4gICAgY29uc3QgZTMgPSBzMy51aW50MzIoKTtcbiAgICBpZiAoZTMgPj4+IDMgPT0gMSkgdDUucmV3YXJkcy5wdXNoKERlY0NvaW4uZGVjb2RlKHMzLCBzMy51aW50MzIoKSkpO1xuICAgIGVsc2UgczMuc2tpcFR5cGUoNyAmIGUzKTtcbiAgfVxuICByZXR1cm4gdDU7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyByZXdhcmRzOiBBcnJheS5pc0FycmF5KGUyPy5yZXdhcmRzKSA/IGUyLnJld2FyZHMubWFwKChlMykgPT4gRGVjQ29pbi5mcm9tSlNPTihlMykpIDogW10gfSksIHRvSlNPTihlMikge1xuICBjb25zdCBvMiA9IHt9O1xuICByZXR1cm4gZTIucmV3YXJkcyA/IG8yLnJld2FyZHMgPSBlMi5yZXdhcmRzLm1hcCgoZTMpID0+IGUzID8gRGVjQ29pbi50b0pTT04oZTMpIDogdm9pZCAwKSA6IG8yLnJld2FyZHMgPSBbXSwgbzI7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCBvMiA9IHsgcmV3YXJkczogW10gfTtcbiAgcmV0dXJuIG8yLnJld2FyZHMgPSBlMi5yZXdhcmRzPy5tYXAoKGUzKSA9PiBEZWNDb2luLmZyb21QYXJ0aWFsKGUzKSkgfHwgW10sIG8yO1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IFF1ZXJ5RGVsZWdhdGlvblJld2FyZHNSZXNwb25zZS5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IFF1ZXJ5RGVsZWdhdGlvblJld2FyZHNSZXNwb25zZS5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5kaXN0cmlidXRpb24udjFiZXRhMS5RdWVyeURlbGVnYXRpb25SZXdhcmRzUmVzcG9uc2VcIiwgdmFsdWU6IFF1ZXJ5RGVsZWdhdGlvblJld2FyZHNSZXNwb25zZS5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG52YXIgUXVlcnlEZWxlZ2F0aW9uVG90YWxSZXdhcmRzUmVxdWVzdCA9IHsgdHlwZVVybDogXCIvY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLlF1ZXJ5RGVsZWdhdGlvblRvdGFsUmV3YXJkc1JlcXVlc3RcIiwgZW5jb2RlOiAoZTIsIG8yID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAoXCJcIiAhPT0gZTIuZGVsZWdhdG9yQWRkcmVzcyAmJiBvMi51aW50MzIoMTApLnN0cmluZyhlMi5kZWxlZ2F0b3JBZGRyZXNzKSwgbzIpLCBkZWNvZGUoZTIsIG8yKSB7XG4gIGNvbnN0IHMzID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgcjUgPSB2b2lkIDAgPT09IG8yID8gczMubGVuIDogczMucG9zICsgbzI7XG4gIGNvbnN0IHQ1ID0geyBkZWxlZ2F0b3JBZGRyZXNzOiBcIlwiIH07XG4gIGZvciAoOyBzMy5wb3MgPCByNTsgKSB7XG4gICAgY29uc3QgZTMgPSBzMy51aW50MzIoKTtcbiAgICBpZiAoZTMgPj4+IDMgPT0gMSkgdDUuZGVsZWdhdG9yQWRkcmVzcyA9IHMzLnN0cmluZygpO1xuICAgIGVsc2UgczMuc2tpcFR5cGUoNyAmIGUzKTtcbiAgfVxuICByZXR1cm4gdDU7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyBkZWxlZ2F0b3JBZGRyZXNzOiBpc1NldChlMi5kZWxlZ2F0b3JBZGRyZXNzKSA/IFN0cmluZyhlMi5kZWxlZ2F0b3JBZGRyZXNzKSA6IFwiXCIgfSksIHRvSlNPTihlMikge1xuICBjb25zdCBvMiA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5kZWxlZ2F0b3JBZGRyZXNzICYmIChvMi5kZWxlZ2F0b3JBZGRyZXNzID0gZTIuZGVsZWdhdG9yQWRkcmVzcyksIG8yO1xufSwgZnJvbVBhcnRpYWwoZTIpIHtcbiAgY29uc3QgbzIgPSB7IGRlbGVnYXRvckFkZHJlc3M6IFwiXCIgfTtcbiAgcmV0dXJuIG8yLmRlbGVnYXRvckFkZHJlc3MgPSBlMi5kZWxlZ2F0b3JBZGRyZXNzID8/IFwiXCIsIG8yO1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IFF1ZXJ5RGVsZWdhdGlvblRvdGFsUmV3YXJkc1JlcXVlc3QuZGVjb2RlKGUyLnZhbHVlKSwgdG9Qcm90bzogKGUyKSA9PiBRdWVyeURlbGVnYXRpb25Ub3RhbFJld2FyZHNSZXF1ZXN0LmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLlF1ZXJ5RGVsZWdhdGlvblRvdGFsUmV3YXJkc1JlcXVlc3RcIiwgdmFsdWU6IFF1ZXJ5RGVsZWdhdGlvblRvdGFsUmV3YXJkc1JlcXVlc3QuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xudmFyIFF1ZXJ5RGVsZWdhdGlvblRvdGFsUmV3YXJkc1Jlc3BvbnNlID0geyB0eXBlVXJsOiBcIi9jb3Ntb3MuZGlzdHJpYnV0aW9uLnYxYmV0YTEuUXVlcnlEZWxlZ2F0aW9uVG90YWxSZXdhcmRzUmVzcG9uc2VcIiwgZW5jb2RlKGUyLCBvMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkge1xuICBmb3IgKGNvbnN0IHMzIG9mIGUyLnJld2FyZHMpIERlbGVnYXRpb25EZWxlZ2F0b3JSZXdhcmQuZW5jb2RlKHMzLCBvMi51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gIGZvciAoY29uc3QgczMgb2YgZTIudG90YWwpIERlY0NvaW4uZW5jb2RlKHMzLCBvMi51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gIHJldHVybiBvMjtcbn0sIGRlY29kZShlMiwgbzIpIHtcbiAgY29uc3QgczMgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCByNSA9IHZvaWQgMCA9PT0gbzIgPyBzMy5sZW4gOiBzMy5wb3MgKyBvMjtcbiAgY29uc3QgdDUgPSB7IHJld2FyZHM6IFtdLCB0b3RhbDogW10gfTtcbiAgZm9yICg7IHMzLnBvcyA8IHI1OyApIHtcbiAgICBjb25zdCBlMyA9IHMzLnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgdDUucmV3YXJkcy5wdXNoKERlbGVnYXRpb25EZWxlZ2F0b3JSZXdhcmQuZGVjb2RlKHMzLCBzMy51aW50MzIoKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgdDUudG90YWwucHVzaChEZWNDb2luLmRlY29kZShzMywgczMudWludDMyKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzMy5za2lwVHlwZSg3ICYgZTMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdDU7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyByZXdhcmRzOiBBcnJheS5pc0FycmF5KGUyPy5yZXdhcmRzKSA/IGUyLnJld2FyZHMubWFwKChlMykgPT4gRGVsZWdhdGlvbkRlbGVnYXRvclJld2FyZC5mcm9tSlNPTihlMykpIDogW10sIHRvdGFsOiBBcnJheS5pc0FycmF5KGUyPy50b3RhbCkgPyBlMi50b3RhbC5tYXAoKGUzKSA9PiBEZWNDb2luLmZyb21KU09OKGUzKSkgOiBbXSB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IG8yID0ge307XG4gIHJldHVybiBlMi5yZXdhcmRzID8gbzIucmV3YXJkcyA9IGUyLnJld2FyZHMubWFwKChlMykgPT4gZTMgPyBEZWxlZ2F0aW9uRGVsZWdhdG9yUmV3YXJkLnRvSlNPTihlMykgOiB2b2lkIDApIDogbzIucmV3YXJkcyA9IFtdLCBlMi50b3RhbCA/IG8yLnRvdGFsID0gZTIudG90YWwubWFwKChlMykgPT4gZTMgPyBEZWNDb2luLnRvSlNPTihlMykgOiB2b2lkIDApIDogbzIudG90YWwgPSBbXSwgbzI7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCBvMiA9IHsgcmV3YXJkczogW10sIHRvdGFsOiBbXSB9O1xuICByZXR1cm4gbzIucmV3YXJkcyA9IGUyLnJld2FyZHM/Lm1hcCgoZTMpID0+IERlbGVnYXRpb25EZWxlZ2F0b3JSZXdhcmQuZnJvbVBhcnRpYWwoZTMpKSB8fCBbXSwgbzIudG90YWwgPSBlMi50b3RhbD8ubWFwKChlMykgPT4gRGVjQ29pbi5mcm9tUGFydGlhbChlMykpIHx8IFtdLCBvMjtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBRdWVyeURlbGVnYXRpb25Ub3RhbFJld2FyZHNSZXNwb25zZS5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IFF1ZXJ5RGVsZWdhdGlvblRvdGFsUmV3YXJkc1Jlc3BvbnNlLmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLlF1ZXJ5RGVsZWdhdGlvblRvdGFsUmV3YXJkc1Jlc3BvbnNlXCIsIHZhbHVlOiBRdWVyeURlbGVnYXRpb25Ub3RhbFJld2FyZHNSZXNwb25zZS5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG5cbi8vXG52YXIgTXNnV2l0aGRyYXdEZWxlZ2F0b3JSZXdhcmQgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5kaXN0cmlidXRpb24udjFiZXRhMS5Nc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZFwiLCBlbmNvZGU6IChvMiwgdDUgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+IChcIlwiICE9PSBvMi5kZWxlZ2F0b3JBZGRyZXNzICYmIHQ1LnVpbnQzMigxMCkuc3RyaW5nKG8yLmRlbGVnYXRvckFkZHJlc3MpLCBcIlwiICE9PSBvMi52YWxpZGF0b3JBZGRyZXNzICYmIHQ1LnVpbnQzMigxOCkuc3RyaW5nKG8yLnZhbGlkYXRvckFkZHJlc3MpLCB0NSksIGRlY29kZShvMiwgdDUpIHtcbiAgY29uc3QgczMgPSBvMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IG8yIDogbmV3IEJpbmFyeVJlYWRlcihvMik7XG4gIGxldCByNSA9IHZvaWQgMCA9PT0gdDUgPyBzMy5sZW4gOiBzMy5wb3MgKyB0NTtcbiAgY29uc3QgZCA9IHsgZGVsZWdhdG9yQWRkcmVzczogXCJcIiwgdmFsaWRhdG9yQWRkcmVzczogXCJcIiB9O1xuICBmb3IgKDsgczMucG9zIDwgcjU7ICkge1xuICAgIGNvbnN0IG8zID0gczMudWludDMyKCk7XG4gICAgc3dpdGNoIChvMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBkLmRlbGVnYXRvckFkZHJlc3MgPSBzMy5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGQudmFsaWRhdG9yQWRkcmVzcyA9IHMzLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHMzLnNraXBUeXBlKDcgJiBvMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkO1xufSwgZnJvbUpTT046IChvMikgPT4gKHsgZGVsZWdhdG9yQWRkcmVzczogaXNTZXQobzIuZGVsZWdhdG9yQWRkcmVzcykgPyBTdHJpbmcobzIuZGVsZWdhdG9yQWRkcmVzcykgOiBcIlwiLCB2YWxpZGF0b3JBZGRyZXNzOiBpc1NldChvMi52YWxpZGF0b3JBZGRyZXNzKSA/IFN0cmluZyhvMi52YWxpZGF0b3JBZGRyZXNzKSA6IFwiXCIgfSksIHRvSlNPTihvMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBvMi5kZWxlZ2F0b3JBZGRyZXNzICYmICh0NS5kZWxlZ2F0b3JBZGRyZXNzID0gbzIuZGVsZWdhdG9yQWRkcmVzcyksIHZvaWQgMCAhPT0gbzIudmFsaWRhdG9yQWRkcmVzcyAmJiAodDUudmFsaWRhdG9yQWRkcmVzcyA9IG8yLnZhbGlkYXRvckFkZHJlc3MpLCB0NTtcbn0sIGZyb21QYXJ0aWFsKG8yKSB7XG4gIGNvbnN0IHQ1ID0geyBkZWxlZ2F0b3JBZGRyZXNzOiBcIlwiLCB2YWxpZGF0b3JBZGRyZXNzOiBcIlwiIH07XG4gIHJldHVybiB0NS5kZWxlZ2F0b3JBZGRyZXNzID0gbzIuZGVsZWdhdG9yQWRkcmVzcyA/PyBcIlwiLCB0NS52YWxpZGF0b3JBZGRyZXNzID0gbzIudmFsaWRhdG9yQWRkcmVzcyA/PyBcIlwiLCB0NTtcbn0sIGZyb21Qcm90b01zZzogKG8yKSA9PiBNc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZC5kZWNvZGUobzIudmFsdWUpLCB0b1Byb3RvOiAobzIpID0+IE1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkLmVuY29kZShvMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChvMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLk1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkXCIsIHZhbHVlOiBNc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZC5lbmNvZGUobzIpLmZpbmlzaCgpIH0pIH07XG52YXIgTXNnV2l0aGRyYXdEZWxlZ2F0b3JSZXdhcmRSZXNwb25zZSA9IHsgdHlwZVVybDogXCIvY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLk1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkUmVzcG9uc2VcIiwgZW5jb2RlKHQ1LCBlMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkge1xuICBmb3IgKGNvbnN0IHMzIG9mIHQ1LmFtb3VudCkgQ29pbi5lbmNvZGUoczMsIGUyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgcmV0dXJuIGUyO1xufSwgZGVjb2RlKHQ1LCBzMykge1xuICBjb25zdCByNSA9IHQ1IGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gdDUgOiBuZXcgQmluYXJ5UmVhZGVyKHQ1KTtcbiAgbGV0IGQgPSB2b2lkIDAgPT09IHMzID8gcjUubGVuIDogcjUucG9zICsgczM7XG4gIGNvbnN0IGkzID0geyBhbW91bnQ6IFtdIH07XG4gIGZvciAoOyByNS5wb3MgPCBkOyApIHtcbiAgICBjb25zdCB0NiA9IHI1LnVpbnQzMigpO1xuICAgIGlmICh0NiA+Pj4gMyA9PSAxKSBpMy5hbW91bnQucHVzaChDb2luLmRlY29kZShyNSwgcjUudWludDMyKCkpKTtcbiAgICBlbHNlIHI1LnNraXBUeXBlKDcgJiB0Nik7XG4gIH1cbiAgcmV0dXJuIGkzO1xufSwgZnJvbUpTT046ICh0NSkgPT4gKHsgYW1vdW50OiBBcnJheS5pc0FycmF5KHQ1Py5hbW91bnQpID8gdDUuYW1vdW50Lm1hcCgodDYpID0+IENvaW4uZnJvbUpTT04odDYpKSA6IFtdIH0pLCB0b0pTT04odDUpIHtcbiAgY29uc3QgZTIgPSB7fTtcbiAgcmV0dXJuIHQ1LmFtb3VudCA/IGUyLmFtb3VudCA9IHQ1LmFtb3VudC5tYXAoKHQ2KSA9PiB0NiA/IENvaW4udG9KU09OKHQ2KSA6IHZvaWQgMCkgOiBlMi5hbW91bnQgPSBbXSwgZTI7XG59LCBmcm9tUGFydGlhbCh0NSkge1xuICBjb25zdCBlMiA9IHsgYW1vdW50OiBbXSB9O1xuICByZXR1cm4gZTIuYW1vdW50ID0gdDUuYW1vdW50Py5tYXAoKHQ2KSA9PiBDb2luLmZyb21QYXJ0aWFsKHQ2KSkgfHwgW10sIGUyO1xufSwgZnJvbVByb3RvTXNnOiAobzIpID0+IE1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkUmVzcG9uc2UuZGVjb2RlKG8yLnZhbHVlKSwgdG9Qcm90bzogKG8yKSA9PiBNc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZFJlc3BvbnNlLmVuY29kZShvMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChvMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLk1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkUmVzcG9uc2VcIiwgdmFsdWU6IE1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkUmVzcG9uc2UuZW5jb2RlKG8yKS5maW5pc2goKSB9KSB9O1xuXG4vL1xudmFyIEJvbmRTdGF0dXM7XG4hZnVuY3Rpb24oZTIpIHtcbiAgZTJbZTIuQk9ORF9TVEFUVVNfVU5TUEVDSUZJRUQgPSAwXSA9IFwiQk9ORF9TVEFUVVNfVU5TUEVDSUZJRURcIiwgZTJbZTIuQk9ORF9TVEFUVVNfVU5CT05ERUQgPSAxXSA9IFwiQk9ORF9TVEFUVVNfVU5CT05ERURcIiwgZTJbZTIuQk9ORF9TVEFUVVNfVU5CT05ESU5HID0gMl0gPSBcIkJPTkRfU1RBVFVTX1VOQk9ORElOR1wiLCBlMltlMi5CT05EX1NUQVRVU19CT05ERUQgPSAzXSA9IFwiQk9ORF9TVEFUVVNfQk9OREVEXCIsIGUyW2UyLlVOUkVDT0dOSVpFRCA9IC0xXSA9IFwiVU5SRUNPR05JWkVEXCI7XG59KEJvbmRTdGF0dXMgfHwgKEJvbmRTdGF0dXMgPSB7fSkpO1xudmFyIEluZnJhY3Rpb247XG4hZnVuY3Rpb24oZTIpIHtcbiAgZTJbZTIuSU5GUkFDVElPTl9VTlNQRUNJRklFRCA9IDBdID0gXCJJTkZSQUNUSU9OX1VOU1BFQ0lGSUVEXCIsIGUyW2UyLklORlJBQ1RJT05fRE9VQkxFX1NJR04gPSAxXSA9IFwiSU5GUkFDVElPTl9ET1VCTEVfU0lHTlwiLCBlMltlMi5JTkZSQUNUSU9OX0RPV05USU1FID0gMl0gPSBcIklORlJBQ1RJT05fRE9XTlRJTUVcIiwgZTJbZTIuVU5SRUNPR05JWkVEID0gLTFdID0gXCJVTlJFQ09HTklaRURcIjtcbn0oSW5mcmFjdGlvbiB8fCAoSW5mcmFjdGlvbiA9IHt9KSk7XG52YXIgRGVsZWdhdGlvbiA9IHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5EZWxlZ2F0aW9uXCIsIGVuY29kZTogKGUyLCB0NSA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKFwiXCIgIT09IGUyLmRlbGVnYXRvckFkZHJlc3MgJiYgdDUudWludDMyKDEwKS5zdHJpbmcoZTIuZGVsZWdhdG9yQWRkcmVzcyksIFwiXCIgIT09IGUyLnZhbGlkYXRvckFkZHJlc3MgJiYgdDUudWludDMyKDE4KS5zdHJpbmcoZTIudmFsaWRhdG9yQWRkcmVzcyksIFwiXCIgIT09IGUyLnNoYXJlcyAmJiB0NS51aW50MzIoMjYpLnN0cmluZyhEZWNpbWFsLmZyb21Vc2VySW5wdXQoZTIuc2hhcmVzLCAxOCkuYXRvbWljcyksIHQ1KSwgZGVjb2RlKGUyLCB0NSkge1xuICBjb25zdCBvMiA9IGUyIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gZTIgOiBuZXcgQmluYXJ5UmVhZGVyKGUyKTtcbiAgbGV0IG4yID0gdm9pZCAwID09PSB0NSA/IG8yLmxlbiA6IG8yLnBvcyArIHQ1O1xuICBjb25zdCBpMyA9IHsgZGVsZWdhdG9yQWRkcmVzczogXCJcIiwgdmFsaWRhdG9yQWRkcmVzczogXCJcIiwgc2hhcmVzOiBcIlwiIH07XG4gIGZvciAoOyBvMi5wb3MgPCBuMjsgKSB7XG4gICAgY29uc3QgZTMgPSBvMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKGUzID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGkzLmRlbGVnYXRvckFkZHJlc3MgPSBvMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGkzLnZhbGlkYXRvckFkZHJlc3MgPSBvMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGkzLnNoYXJlcyA9IERlY2ltYWwuZnJvbUF0b21pY3MobzIuc3RyaW5nKCksIDE4KS50b1N0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG8yLnNraXBUeXBlKDcgJiBlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpMztcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IGRlbGVnYXRvckFkZHJlc3M6IGlzU2V0KGUyLmRlbGVnYXRvckFkZHJlc3MpID8gU3RyaW5nKGUyLmRlbGVnYXRvckFkZHJlc3MpIDogXCJcIiwgdmFsaWRhdG9yQWRkcmVzczogaXNTZXQoZTIudmFsaWRhdG9yQWRkcmVzcykgPyBTdHJpbmcoZTIudmFsaWRhdG9yQWRkcmVzcykgOiBcIlwiLCBzaGFyZXM6IGlzU2V0KGUyLnNoYXJlcykgPyBTdHJpbmcoZTIuc2hhcmVzKSA6IFwiXCIgfSksIHRvSlNPTihlMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5kZWxlZ2F0b3JBZGRyZXNzICYmICh0NS5kZWxlZ2F0b3JBZGRyZXNzID0gZTIuZGVsZWdhdG9yQWRkcmVzcyksIHZvaWQgMCAhPT0gZTIudmFsaWRhdG9yQWRkcmVzcyAmJiAodDUudmFsaWRhdG9yQWRkcmVzcyA9IGUyLnZhbGlkYXRvckFkZHJlc3MpLCB2b2lkIDAgIT09IGUyLnNoYXJlcyAmJiAodDUuc2hhcmVzID0gZTIuc2hhcmVzKSwgdDU7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCB0NSA9IHsgZGVsZWdhdG9yQWRkcmVzczogXCJcIiwgdmFsaWRhdG9yQWRkcmVzczogXCJcIiwgc2hhcmVzOiBcIlwiIH07XG4gIHJldHVybiB0NS5kZWxlZ2F0b3JBZGRyZXNzID0gZTIuZGVsZWdhdG9yQWRkcmVzcyA/PyBcIlwiLCB0NS52YWxpZGF0b3JBZGRyZXNzID0gZTIudmFsaWRhdG9yQWRkcmVzcyA/PyBcIlwiLCB0NS5zaGFyZXMgPSBlMi5zaGFyZXMgPz8gXCJcIiwgdDU7XG59LCBmcm9tUHJvdG9Nc2c6IChlMikgPT4gRGVsZWdhdGlvbi5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IERlbGVnYXRpb24uZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLkRlbGVnYXRpb25cIiwgdmFsdWU6IERlbGVnYXRpb24uZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xudmFyIFVuYm9uZGluZ0RlbGVnYXRpb24gPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuVW5ib25kaW5nRGVsZWdhdGlvblwiLCBlbmNvZGUoZTIsIHQ1ID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSB7XG4gIFwiXCIgIT09IGUyLmRlbGVnYXRvckFkZHJlc3MgJiYgdDUudWludDMyKDEwKS5zdHJpbmcoZTIuZGVsZWdhdG9yQWRkcmVzcyksIFwiXCIgIT09IGUyLnZhbGlkYXRvckFkZHJlc3MgJiYgdDUudWludDMyKDE4KS5zdHJpbmcoZTIudmFsaWRhdG9yQWRkcmVzcyk7XG4gIGZvciAoY29uc3QgbzIgb2YgZTIuZW50cmllcykgVW5ib25kaW5nRGVsZWdhdGlvbkVudHJ5LmVuY29kZShvMiwgdDUudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICByZXR1cm4gdDU7XG59LCBkZWNvZGUoZTIsIHQ1KSB7XG4gIGNvbnN0IG8yID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgbjIgPSB2b2lkIDAgPT09IHQ1ID8gbzIubGVuIDogbzIucG9zICsgdDU7XG4gIGNvbnN0IGkzID0geyBkZWxlZ2F0b3JBZGRyZXNzOiBcIlwiLCB2YWxpZGF0b3JBZGRyZXNzOiBcIlwiLCBlbnRyaWVzOiBbXSB9O1xuICBmb3IgKDsgbzIucG9zIDwgbjI7ICkge1xuICAgIGNvbnN0IGUzID0gbzIudWludDMyKCk7XG4gICAgc3dpdGNoIChlMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBpMy5kZWxlZ2F0b3JBZGRyZXNzID0gbzIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBpMy52YWxpZGF0b3JBZGRyZXNzID0gbzIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBpMy5lbnRyaWVzLnB1c2goVW5ib25kaW5nRGVsZWdhdGlvbkVudHJ5LmRlY29kZShvMiwgbzIudWludDMyKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBvMi5za2lwVHlwZSg3ICYgZTMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTM7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyBkZWxlZ2F0b3JBZGRyZXNzOiBpc1NldChlMi5kZWxlZ2F0b3JBZGRyZXNzKSA/IFN0cmluZyhlMi5kZWxlZ2F0b3JBZGRyZXNzKSA6IFwiXCIsIHZhbGlkYXRvckFkZHJlc3M6IGlzU2V0KGUyLnZhbGlkYXRvckFkZHJlc3MpID8gU3RyaW5nKGUyLnZhbGlkYXRvckFkZHJlc3MpIDogXCJcIiwgZW50cmllczogQXJyYXkuaXNBcnJheShlMj8uZW50cmllcykgPyBlMi5lbnRyaWVzLm1hcCgoZTMpID0+IFVuYm9uZGluZ0RlbGVnYXRpb25FbnRyeS5mcm9tSlNPTihlMykpIDogW10gfSksIHRvSlNPTihlMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5kZWxlZ2F0b3JBZGRyZXNzICYmICh0NS5kZWxlZ2F0b3JBZGRyZXNzID0gZTIuZGVsZWdhdG9yQWRkcmVzcyksIHZvaWQgMCAhPT0gZTIudmFsaWRhdG9yQWRkcmVzcyAmJiAodDUudmFsaWRhdG9yQWRkcmVzcyA9IGUyLnZhbGlkYXRvckFkZHJlc3MpLCBlMi5lbnRyaWVzID8gdDUuZW50cmllcyA9IGUyLmVudHJpZXMubWFwKChlMykgPT4gZTMgPyBVbmJvbmRpbmdEZWxlZ2F0aW9uRW50cnkudG9KU09OKGUzKSA6IHZvaWQgMCkgOiB0NS5lbnRyaWVzID0gW10sIHQ1O1xufSwgZnJvbVBhcnRpYWwoZTIpIHtcbiAgY29uc3QgdDUgPSB7IGRlbGVnYXRvckFkZHJlc3M6IFwiXCIsIHZhbGlkYXRvckFkZHJlc3M6IFwiXCIsIGVudHJpZXM6IFtdIH07XG4gIHJldHVybiB0NS5kZWxlZ2F0b3JBZGRyZXNzID0gZTIuZGVsZWdhdG9yQWRkcmVzcyA/PyBcIlwiLCB0NS52YWxpZGF0b3JBZGRyZXNzID0gZTIudmFsaWRhdG9yQWRkcmVzcyA/PyBcIlwiLCB0NS5lbnRyaWVzID0gZTIuZW50cmllcz8ubWFwKChlMykgPT4gVW5ib25kaW5nRGVsZWdhdGlvbkVudHJ5LmZyb21QYXJ0aWFsKGUzKSkgfHwgW10sIHQ1O1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IFVuYm9uZGluZ0RlbGVnYXRpb24uZGVjb2RlKGUyLnZhbHVlKSwgdG9Qcm90bzogKGUyKSA9PiBVbmJvbmRpbmdEZWxlZ2F0aW9uLmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5VbmJvbmRpbmdEZWxlZ2F0aW9uXCIsIHZhbHVlOiBVbmJvbmRpbmdEZWxlZ2F0aW9uLmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcbmZ1bmN0aW9uIGYoKSB7XG4gIHJldHVybiB7IGNyZWF0aW9uSGVpZ2h0OiBCaWdJbnQoMCksIGNvbXBsZXRpb25UaW1lOiBUaW1lc3RhbXAuZnJvbVBhcnRpYWwoe30pLCBpbml0aWFsQmFsYW5jZTogXCJcIiwgYmFsYW5jZTogXCJcIiwgdW5ib25kaW5nSWQ6IEJpZ0ludCgwKSwgdW5ib25kaW5nT25Ib2xkUmVmQ291bnQ6IEJpZ0ludCgwKSB9O1xufVxudmFyIFVuYm9uZGluZ0RlbGVnYXRpb25FbnRyeSA9IHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5VbmJvbmRpbmdEZWxlZ2F0aW9uRW50cnlcIiwgZW5jb2RlOiAoZTIsIG8yID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAoZTIuY3JlYXRpb25IZWlnaHQgIT09IEJpZ0ludCgwKSAmJiBvMi51aW50MzIoOCkuaW50NjQoZTIuY3JlYXRpb25IZWlnaHQpLCB2b2lkIDAgIT09IGUyLmNvbXBsZXRpb25UaW1lICYmIFRpbWVzdGFtcC5lbmNvZGUoZTIuY29tcGxldGlvblRpbWUsIG8yLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKSwgXCJcIiAhPT0gZTIuaW5pdGlhbEJhbGFuY2UgJiYgbzIudWludDMyKDI2KS5zdHJpbmcoZTIuaW5pdGlhbEJhbGFuY2UpLCBcIlwiICE9PSBlMi5iYWxhbmNlICYmIG8yLnVpbnQzMigzNCkuc3RyaW5nKGUyLmJhbGFuY2UpLCBlMi51bmJvbmRpbmdJZCAhPT0gQmlnSW50KDApICYmIG8yLnVpbnQzMig0MCkudWludDY0KGUyLnVuYm9uZGluZ0lkKSwgZTIudW5ib25kaW5nT25Ib2xkUmVmQ291bnQgIT09IEJpZ0ludCgwKSAmJiBvMi51aW50MzIoNDgpLmludDY0KGUyLnVuYm9uZGluZ09uSG9sZFJlZkNvdW50KSwgbzIpLCBkZWNvZGUoZTIsIG8yKSB7XG4gIGNvbnN0IG4yID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgaTMgPSB2b2lkIDAgPT09IG8yID8gbjIubGVuIDogbjIucG9zICsgbzI7XG4gIGNvbnN0IHMzID0gZigpO1xuICBmb3IgKDsgbjIucG9zIDwgaTM7ICkge1xuICAgIGNvbnN0IGUzID0gbjIudWludDMyKCk7XG4gICAgc3dpdGNoIChlMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBzMy5jcmVhdGlvbkhlaWdodCA9IG4yLmludDY0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBzMy5jb21wbGV0aW9uVGltZSA9IFRpbWVzdGFtcC5kZWNvZGUobjIsIG4yLnVpbnQzMigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHMzLmluaXRpYWxCYWxhbmNlID0gbjIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICBzMy5iYWxhbmNlID0gbjIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA1OlxuICAgICAgICBzMy51bmJvbmRpbmdJZCA9IG4yLnVpbnQ2NCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNjpcbiAgICAgICAgczMudW5ib25kaW5nT25Ib2xkUmVmQ291bnQgPSBuMi5pbnQ2NCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG4yLnNraXBUeXBlKDcgJiBlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzMztcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IGNyZWF0aW9uSGVpZ2h0OiBpc1NldChlMi5jcmVhdGlvbkhlaWdodCkgPyBCaWdJbnQoZTIuY3JlYXRpb25IZWlnaHQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIGNvbXBsZXRpb25UaW1lOiBpc1NldChlMi5jb21wbGV0aW9uVGltZSkgPyBmcm9tSnNvblRpbWVzdGFtcChlMi5jb21wbGV0aW9uVGltZSkgOiB2b2lkIDAsIGluaXRpYWxCYWxhbmNlOiBpc1NldChlMi5pbml0aWFsQmFsYW5jZSkgPyBTdHJpbmcoZTIuaW5pdGlhbEJhbGFuY2UpIDogXCJcIiwgYmFsYW5jZTogaXNTZXQoZTIuYmFsYW5jZSkgPyBTdHJpbmcoZTIuYmFsYW5jZSkgOiBcIlwiLCB1bmJvbmRpbmdJZDogaXNTZXQoZTIudW5ib25kaW5nSWQpID8gQmlnSW50KGUyLnVuYm9uZGluZ0lkLnRvU3RyaW5nKCkpIDogQmlnSW50KDApLCB1bmJvbmRpbmdPbkhvbGRSZWZDb3VudDogaXNTZXQoZTIudW5ib25kaW5nT25Ib2xkUmVmQ291bnQpID8gQmlnSW50KGUyLnVuYm9uZGluZ09uSG9sZFJlZkNvdW50LnRvU3RyaW5nKCkpIDogQmlnSW50KDApIH0pLCB0b0pTT04oZTIpIHtcbiAgY29uc3QgdDUgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gZTIuY3JlYXRpb25IZWlnaHQgJiYgKHQ1LmNyZWF0aW9uSGVpZ2h0ID0gKGUyLmNyZWF0aW9uSGVpZ2h0IHx8IEJpZ0ludCgwKSkudG9TdHJpbmcoKSksIHZvaWQgMCAhPT0gZTIuY29tcGxldGlvblRpbWUgJiYgKHQ1LmNvbXBsZXRpb25UaW1lID0gZnJvbVRpbWVzdGFtcChlMi5jb21wbGV0aW9uVGltZSkudG9JU09TdHJpbmcoKSksIHZvaWQgMCAhPT0gZTIuaW5pdGlhbEJhbGFuY2UgJiYgKHQ1LmluaXRpYWxCYWxhbmNlID0gZTIuaW5pdGlhbEJhbGFuY2UpLCB2b2lkIDAgIT09IGUyLmJhbGFuY2UgJiYgKHQ1LmJhbGFuY2UgPSBlMi5iYWxhbmNlKSwgdm9pZCAwICE9PSBlMi51bmJvbmRpbmdJZCAmJiAodDUudW5ib25kaW5nSWQgPSAoZTIudW5ib25kaW5nSWQgfHwgQmlnSW50KDApKS50b1N0cmluZygpKSwgdm9pZCAwICE9PSBlMi51bmJvbmRpbmdPbkhvbGRSZWZDb3VudCAmJiAodDUudW5ib25kaW5nT25Ib2xkUmVmQ291bnQgPSAoZTIudW5ib25kaW5nT25Ib2xkUmVmQ291bnQgfHwgQmlnSW50KDApKS50b1N0cmluZygpKSwgdDU7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCBvMiA9IGYoKTtcbiAgcmV0dXJuIG8yLmNyZWF0aW9uSGVpZ2h0ID0gdm9pZCAwICE9PSBlMi5jcmVhdGlvbkhlaWdodCAmJiBudWxsICE9PSBlMi5jcmVhdGlvbkhlaWdodCA/IEJpZ0ludChlMi5jcmVhdGlvbkhlaWdodC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgbzIuY29tcGxldGlvblRpbWUgPSB2b2lkIDAgIT09IGUyLmNvbXBsZXRpb25UaW1lICYmIG51bGwgIT09IGUyLmNvbXBsZXRpb25UaW1lID8gVGltZXN0YW1wLmZyb21QYXJ0aWFsKGUyLmNvbXBsZXRpb25UaW1lKSA6IHZvaWQgMCwgbzIuaW5pdGlhbEJhbGFuY2UgPSBlMi5pbml0aWFsQmFsYW5jZSA/PyBcIlwiLCBvMi5iYWxhbmNlID0gZTIuYmFsYW5jZSA/PyBcIlwiLCBvMi51bmJvbmRpbmdJZCA9IHZvaWQgMCAhPT0gZTIudW5ib25kaW5nSWQgJiYgbnVsbCAhPT0gZTIudW5ib25kaW5nSWQgPyBCaWdJbnQoZTIudW5ib25kaW5nSWQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIG8yLnVuYm9uZGluZ09uSG9sZFJlZkNvdW50ID0gdm9pZCAwICE9PSBlMi51bmJvbmRpbmdPbkhvbGRSZWZDb3VudCAmJiBudWxsICE9PSBlMi51bmJvbmRpbmdPbkhvbGRSZWZDb3VudCA/IEJpZ0ludChlMi51bmJvbmRpbmdPbkhvbGRSZWZDb3VudC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgbzI7XG59LCBmcm9tUHJvdG9Nc2c6IChlMikgPT4gVW5ib25kaW5nRGVsZWdhdGlvbkVudHJ5LmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gVW5ib25kaW5nRGVsZWdhdGlvbkVudHJ5LmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5VbmJvbmRpbmdEZWxlZ2F0aW9uRW50cnlcIiwgdmFsdWU6IFVuYm9uZGluZ0RlbGVnYXRpb25FbnRyeS5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG5mdW5jdGlvbiBiMigpIHtcbiAgcmV0dXJuIHsgY3JlYXRpb25IZWlnaHQ6IEJpZ0ludCgwKSwgY29tcGxldGlvblRpbWU6IFRpbWVzdGFtcC5mcm9tUGFydGlhbCh7fSksIGluaXRpYWxCYWxhbmNlOiBcIlwiLCBzaGFyZXNEc3Q6IFwiXCIsIHVuYm9uZGluZ0lkOiBCaWdJbnQoMCksIHVuYm9uZGluZ09uSG9sZFJlZkNvdW50OiBCaWdJbnQoMCkgfTtcbn1cbnZhciBSZWRlbGVnYXRpb25FbnRyeSA9IHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5SZWRlbGVnYXRpb25FbnRyeVwiLCBlbmNvZGU6IChlMiwgbzIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+IChlMi5jcmVhdGlvbkhlaWdodCAhPT0gQmlnSW50KDApICYmIG8yLnVpbnQzMig4KS5pbnQ2NChlMi5jcmVhdGlvbkhlaWdodCksIHZvaWQgMCAhPT0gZTIuY29tcGxldGlvblRpbWUgJiYgVGltZXN0YW1wLmVuY29kZShlMi5jb21wbGV0aW9uVGltZSwgbzIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpLCBcIlwiICE9PSBlMi5pbml0aWFsQmFsYW5jZSAmJiBvMi51aW50MzIoMjYpLnN0cmluZyhlMi5pbml0aWFsQmFsYW5jZSksIFwiXCIgIT09IGUyLnNoYXJlc0RzdCAmJiBvMi51aW50MzIoMzQpLnN0cmluZyhEZWNpbWFsLmZyb21Vc2VySW5wdXQoZTIuc2hhcmVzRHN0LCAxOCkuYXRvbWljcyksIGUyLnVuYm9uZGluZ0lkICE9PSBCaWdJbnQoMCkgJiYgbzIudWludDMyKDQwKS51aW50NjQoZTIudW5ib25kaW5nSWQpLCBlMi51bmJvbmRpbmdPbkhvbGRSZWZDb3VudCAhPT0gQmlnSW50KDApICYmIG8yLnVpbnQzMig0OCkuaW50NjQoZTIudW5ib25kaW5nT25Ib2xkUmVmQ291bnQpLCBvMiksIGRlY29kZShlMiwgbzIpIHtcbiAgY29uc3QgbjIgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCBpMyA9IHZvaWQgMCA9PT0gbzIgPyBuMi5sZW4gOiBuMi5wb3MgKyBvMjtcbiAgY29uc3QgczMgPSBiMigpO1xuICBmb3IgKDsgbjIucG9zIDwgaTM7ICkge1xuICAgIGNvbnN0IGUzID0gbjIudWludDMyKCk7XG4gICAgc3dpdGNoIChlMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBzMy5jcmVhdGlvbkhlaWdodCA9IG4yLmludDY0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBzMy5jb21wbGV0aW9uVGltZSA9IFRpbWVzdGFtcC5kZWNvZGUobjIsIG4yLnVpbnQzMigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHMzLmluaXRpYWxCYWxhbmNlID0gbjIuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICBzMy5zaGFyZXNEc3QgPSBEZWNpbWFsLmZyb21BdG9taWNzKG4yLnN0cmluZygpLCAxOCkudG9TdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDU6XG4gICAgICAgIHMzLnVuYm9uZGluZ0lkID0gbjIudWludDY0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA2OlxuICAgICAgICBzMy51bmJvbmRpbmdPbkhvbGRSZWZDb3VudCA9IG4yLmludDY0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbjIuc2tpcFR5cGUoNyAmIGUzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHMzO1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgY3JlYXRpb25IZWlnaHQ6IGlzU2V0KGUyLmNyZWF0aW9uSGVpZ2h0KSA/IEJpZ0ludChlMi5jcmVhdGlvbkhlaWdodC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgY29tcGxldGlvblRpbWU6IGlzU2V0KGUyLmNvbXBsZXRpb25UaW1lKSA/IGZyb21Kc29uVGltZXN0YW1wKGUyLmNvbXBsZXRpb25UaW1lKSA6IHZvaWQgMCwgaW5pdGlhbEJhbGFuY2U6IGlzU2V0KGUyLmluaXRpYWxCYWxhbmNlKSA/IFN0cmluZyhlMi5pbml0aWFsQmFsYW5jZSkgOiBcIlwiLCBzaGFyZXNEc3Q6IGlzU2V0KGUyLnNoYXJlc0RzdCkgPyBTdHJpbmcoZTIuc2hhcmVzRHN0KSA6IFwiXCIsIHVuYm9uZGluZ0lkOiBpc1NldChlMi51bmJvbmRpbmdJZCkgPyBCaWdJbnQoZTIudW5ib25kaW5nSWQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIHVuYm9uZGluZ09uSG9sZFJlZkNvdW50OiBpc1NldChlMi51bmJvbmRpbmdPbkhvbGRSZWZDb3VudCkgPyBCaWdJbnQoZTIudW5ib25kaW5nT25Ib2xkUmVmQ291bnQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCkgfSksIHRvSlNPTihlMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5jcmVhdGlvbkhlaWdodCAmJiAodDUuY3JlYXRpb25IZWlnaHQgPSAoZTIuY3JlYXRpb25IZWlnaHQgfHwgQmlnSW50KDApKS50b1N0cmluZygpKSwgdm9pZCAwICE9PSBlMi5jb21wbGV0aW9uVGltZSAmJiAodDUuY29tcGxldGlvblRpbWUgPSBmcm9tVGltZXN0YW1wKGUyLmNvbXBsZXRpb25UaW1lKS50b0lTT1N0cmluZygpKSwgdm9pZCAwICE9PSBlMi5pbml0aWFsQmFsYW5jZSAmJiAodDUuaW5pdGlhbEJhbGFuY2UgPSBlMi5pbml0aWFsQmFsYW5jZSksIHZvaWQgMCAhPT0gZTIuc2hhcmVzRHN0ICYmICh0NS5zaGFyZXNEc3QgPSBlMi5zaGFyZXNEc3QpLCB2b2lkIDAgIT09IGUyLnVuYm9uZGluZ0lkICYmICh0NS51bmJvbmRpbmdJZCA9IChlMi51bmJvbmRpbmdJZCB8fCBCaWdJbnQoMCkpLnRvU3RyaW5nKCkpLCB2b2lkIDAgIT09IGUyLnVuYm9uZGluZ09uSG9sZFJlZkNvdW50ICYmICh0NS51bmJvbmRpbmdPbkhvbGRSZWZDb3VudCA9IChlMi51bmJvbmRpbmdPbkhvbGRSZWZDb3VudCB8fCBCaWdJbnQoMCkpLnRvU3RyaW5nKCkpLCB0NTtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IG8yID0gYjIoKTtcbiAgcmV0dXJuIG8yLmNyZWF0aW9uSGVpZ2h0ID0gdm9pZCAwICE9PSBlMi5jcmVhdGlvbkhlaWdodCAmJiBudWxsICE9PSBlMi5jcmVhdGlvbkhlaWdodCA/IEJpZ0ludChlMi5jcmVhdGlvbkhlaWdodC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgbzIuY29tcGxldGlvblRpbWUgPSB2b2lkIDAgIT09IGUyLmNvbXBsZXRpb25UaW1lICYmIG51bGwgIT09IGUyLmNvbXBsZXRpb25UaW1lID8gVGltZXN0YW1wLmZyb21QYXJ0aWFsKGUyLmNvbXBsZXRpb25UaW1lKSA6IHZvaWQgMCwgbzIuaW5pdGlhbEJhbGFuY2UgPSBlMi5pbml0aWFsQmFsYW5jZSA/PyBcIlwiLCBvMi5zaGFyZXNEc3QgPSBlMi5zaGFyZXNEc3QgPz8gXCJcIiwgbzIudW5ib25kaW5nSWQgPSB2b2lkIDAgIT09IGUyLnVuYm9uZGluZ0lkICYmIG51bGwgIT09IGUyLnVuYm9uZGluZ0lkID8gQmlnSW50KGUyLnVuYm9uZGluZ0lkLnRvU3RyaW5nKCkpIDogQmlnSW50KDApLCBvMi51bmJvbmRpbmdPbkhvbGRSZWZDb3VudCA9IHZvaWQgMCAhPT0gZTIudW5ib25kaW5nT25Ib2xkUmVmQ291bnQgJiYgbnVsbCAhPT0gZTIudW5ib25kaW5nT25Ib2xkUmVmQ291bnQgPyBCaWdJbnQoZTIudW5ib25kaW5nT25Ib2xkUmVmQ291bnQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIG8yO1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IFJlZGVsZWdhdGlvbkVudHJ5LmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gUmVkZWxlZ2F0aW9uRW50cnkuZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlJlZGVsZWdhdGlvbkVudHJ5XCIsIHZhbHVlOiBSZWRlbGVnYXRpb25FbnRyeS5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG52YXIgUmVkZWxlZ2F0aW9uID0geyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlJlZGVsZWdhdGlvblwiLCBlbmNvZGUoZTIsIHQ1ID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSB7XG4gIFwiXCIgIT09IGUyLmRlbGVnYXRvckFkZHJlc3MgJiYgdDUudWludDMyKDEwKS5zdHJpbmcoZTIuZGVsZWdhdG9yQWRkcmVzcyksIFwiXCIgIT09IGUyLnZhbGlkYXRvclNyY0FkZHJlc3MgJiYgdDUudWludDMyKDE4KS5zdHJpbmcoZTIudmFsaWRhdG9yU3JjQWRkcmVzcyksIFwiXCIgIT09IGUyLnZhbGlkYXRvckRzdEFkZHJlc3MgJiYgdDUudWludDMyKDI2KS5zdHJpbmcoZTIudmFsaWRhdG9yRHN0QWRkcmVzcyk7XG4gIGZvciAoY29uc3QgbzIgb2YgZTIuZW50cmllcykgUmVkZWxlZ2F0aW9uRW50cnkuZW5jb2RlKG8yLCB0NS51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCk7XG4gIHJldHVybiB0NTtcbn0sIGRlY29kZShlMiwgdDUpIHtcbiAgY29uc3QgbzIgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCBuMiA9IHZvaWQgMCA9PT0gdDUgPyBvMi5sZW4gOiBvMi5wb3MgKyB0NTtcbiAgY29uc3QgaTMgPSB7IGRlbGVnYXRvckFkZHJlc3M6IFwiXCIsIHZhbGlkYXRvclNyY0FkZHJlc3M6IFwiXCIsIHZhbGlkYXRvckRzdEFkZHJlc3M6IFwiXCIsIGVudHJpZXM6IFtdIH07XG4gIGZvciAoOyBvMi5wb3MgPCBuMjsgKSB7XG4gICAgY29uc3QgZTMgPSBvMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKGUzID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGkzLmRlbGVnYXRvckFkZHJlc3MgPSBvMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGkzLnZhbGlkYXRvclNyY0FkZHJlc3MgPSBvMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGkzLnZhbGlkYXRvckRzdEFkZHJlc3MgPSBvMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIGkzLmVudHJpZXMucHVzaChSZWRlbGVnYXRpb25FbnRyeS5kZWNvZGUobzIsIG8yLnVpbnQzMigpKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbzIuc2tpcFR5cGUoNyAmIGUzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkzO1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgZGVsZWdhdG9yQWRkcmVzczogaXNTZXQoZTIuZGVsZWdhdG9yQWRkcmVzcykgPyBTdHJpbmcoZTIuZGVsZWdhdG9yQWRkcmVzcykgOiBcIlwiLCB2YWxpZGF0b3JTcmNBZGRyZXNzOiBpc1NldChlMi52YWxpZGF0b3JTcmNBZGRyZXNzKSA/IFN0cmluZyhlMi52YWxpZGF0b3JTcmNBZGRyZXNzKSA6IFwiXCIsIHZhbGlkYXRvckRzdEFkZHJlc3M6IGlzU2V0KGUyLnZhbGlkYXRvckRzdEFkZHJlc3MpID8gU3RyaW5nKGUyLnZhbGlkYXRvckRzdEFkZHJlc3MpIDogXCJcIiwgZW50cmllczogQXJyYXkuaXNBcnJheShlMj8uZW50cmllcykgPyBlMi5lbnRyaWVzLm1hcCgoZTMpID0+IFJlZGVsZWdhdGlvbkVudHJ5LmZyb21KU09OKGUzKSkgOiBbXSB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IHQ1ID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLmRlbGVnYXRvckFkZHJlc3MgJiYgKHQ1LmRlbGVnYXRvckFkZHJlc3MgPSBlMi5kZWxlZ2F0b3JBZGRyZXNzKSwgdm9pZCAwICE9PSBlMi52YWxpZGF0b3JTcmNBZGRyZXNzICYmICh0NS52YWxpZGF0b3JTcmNBZGRyZXNzID0gZTIudmFsaWRhdG9yU3JjQWRkcmVzcyksIHZvaWQgMCAhPT0gZTIudmFsaWRhdG9yRHN0QWRkcmVzcyAmJiAodDUudmFsaWRhdG9yRHN0QWRkcmVzcyA9IGUyLnZhbGlkYXRvckRzdEFkZHJlc3MpLCBlMi5lbnRyaWVzID8gdDUuZW50cmllcyA9IGUyLmVudHJpZXMubWFwKChlMykgPT4gZTMgPyBSZWRlbGVnYXRpb25FbnRyeS50b0pTT04oZTMpIDogdm9pZCAwKSA6IHQ1LmVudHJpZXMgPSBbXSwgdDU7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCB0NSA9IHsgZGVsZWdhdG9yQWRkcmVzczogXCJcIiwgdmFsaWRhdG9yU3JjQWRkcmVzczogXCJcIiwgdmFsaWRhdG9yRHN0QWRkcmVzczogXCJcIiwgZW50cmllczogW10gfTtcbiAgcmV0dXJuIHQ1LmRlbGVnYXRvckFkZHJlc3MgPSBlMi5kZWxlZ2F0b3JBZGRyZXNzID8/IFwiXCIsIHQ1LnZhbGlkYXRvclNyY0FkZHJlc3MgPSBlMi52YWxpZGF0b3JTcmNBZGRyZXNzID8/IFwiXCIsIHQ1LnZhbGlkYXRvckRzdEFkZHJlc3MgPSBlMi52YWxpZGF0b3JEc3RBZGRyZXNzID8/IFwiXCIsIHQ1LmVudHJpZXMgPSBlMi5lbnRyaWVzPy5tYXAoKGUzKSA9PiBSZWRlbGVnYXRpb25FbnRyeS5mcm9tUGFydGlhbChlMykpIHx8IFtdLCB0NTtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBSZWRlbGVnYXRpb24uZGVjb2RlKGUyLnZhbHVlKSwgdG9Qcm90bzogKGUyKSA9PiBSZWRlbGVnYXRpb24uZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlJlZGVsZWdhdGlvblwiLCB2YWx1ZTogUmVkZWxlZ2F0aW9uLmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcbmZ1bmN0aW9uIFMoKSB7XG4gIHJldHVybiB7IGRlbGVnYXRpb246IERlbGVnYXRpb24uZnJvbVBhcnRpYWwoe30pLCBiYWxhbmNlOiBDb2luLmZyb21QYXJ0aWFsKHt9KSB9O1xufVxudmFyIERlbGVnYXRpb25SZXNwb25zZSA9IHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5EZWxlZ2F0aW9uUmVzcG9uc2VcIiwgZW5jb2RlOiAoZTIsIHQ1ID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAodm9pZCAwICE9PSBlMi5kZWxlZ2F0aW9uICYmIERlbGVnYXRpb24uZW5jb2RlKGUyLmRlbGVnYXRpb24sIHQ1LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSwgdm9pZCAwICE9PSBlMi5iYWxhbmNlICYmIENvaW4uZW5jb2RlKGUyLmJhbGFuY2UsIHQ1LnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKSwgdDUpLCBkZWNvZGUoZTIsIHQ1KSB7XG4gIGNvbnN0IG8yID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgbjIgPSB2b2lkIDAgPT09IHQ1ID8gbzIubGVuIDogbzIucG9zICsgdDU7XG4gIGNvbnN0IHMzID0gUygpO1xuICBmb3IgKDsgbzIucG9zIDwgbjI7ICkge1xuICAgIGNvbnN0IGUzID0gbzIudWludDMyKCk7XG4gICAgc3dpdGNoIChlMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBzMy5kZWxlZ2F0aW9uID0gRGVsZWdhdGlvbi5kZWNvZGUobzIsIG8yLnVpbnQzMigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHMzLmJhbGFuY2UgPSBDb2luLmRlY29kZShvMiwgbzIudWludDMyKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG8yLnNraXBUeXBlKDcgJiBlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzMztcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IGRlbGVnYXRpb246IGlzU2V0KGUyLmRlbGVnYXRpb24pID8gRGVsZWdhdGlvbi5mcm9tSlNPTihlMi5kZWxlZ2F0aW9uKSA6IHZvaWQgMCwgYmFsYW5jZTogaXNTZXQoZTIuYmFsYW5jZSkgPyBDb2luLmZyb21KU09OKGUyLmJhbGFuY2UpIDogdm9pZCAwIH0pLCB0b0pTT04oZTIpIHtcbiAgY29uc3QgdDUgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gZTIuZGVsZWdhdGlvbiAmJiAodDUuZGVsZWdhdGlvbiA9IGUyLmRlbGVnYXRpb24gPyBEZWxlZ2F0aW9uLnRvSlNPTihlMi5kZWxlZ2F0aW9uKSA6IHZvaWQgMCksIHZvaWQgMCAhPT0gZTIuYmFsYW5jZSAmJiAodDUuYmFsYW5jZSA9IGUyLmJhbGFuY2UgPyBDb2luLnRvSlNPTihlMi5iYWxhbmNlKSA6IHZvaWQgMCksIHQ1O1xufSwgZnJvbVBhcnRpYWwoZTIpIHtcbiAgY29uc3QgdDUgPSBTKCk7XG4gIHJldHVybiB0NS5kZWxlZ2F0aW9uID0gdm9pZCAwICE9PSBlMi5kZWxlZ2F0aW9uICYmIG51bGwgIT09IGUyLmRlbGVnYXRpb24gPyBEZWxlZ2F0aW9uLmZyb21QYXJ0aWFsKGUyLmRlbGVnYXRpb24pIDogdm9pZCAwLCB0NS5iYWxhbmNlID0gdm9pZCAwICE9PSBlMi5iYWxhbmNlICYmIG51bGwgIT09IGUyLmJhbGFuY2UgPyBDb2luLmZyb21QYXJ0aWFsKGUyLmJhbGFuY2UpIDogdm9pZCAwLCB0NTtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBEZWxlZ2F0aW9uUmVzcG9uc2UuZGVjb2RlKGUyLnZhbHVlKSwgdG9Qcm90bzogKGUyKSA9PiBEZWxlZ2F0aW9uUmVzcG9uc2UuZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLkRlbGVnYXRpb25SZXNwb25zZVwiLCB2YWx1ZTogRGVsZWdhdGlvblJlc3BvbnNlLmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcbmZ1bmN0aW9uIEEoKSB7XG4gIHJldHVybiB7IHJlZGVsZWdhdGlvbkVudHJ5OiBSZWRlbGVnYXRpb25FbnRyeS5mcm9tUGFydGlhbCh7fSksIGJhbGFuY2U6IFwiXCIgfTtcbn1cbnZhciBSZWRlbGVnYXRpb25FbnRyeVJlc3BvbnNlID0geyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlJlZGVsZWdhdGlvbkVudHJ5UmVzcG9uc2VcIiwgZW5jb2RlOiAoZTIsIHQ1ID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAodm9pZCAwICE9PSBlMi5yZWRlbGVnYXRpb25FbnRyeSAmJiBSZWRlbGVnYXRpb25FbnRyeS5lbmNvZGUoZTIucmVkZWxlZ2F0aW9uRW50cnksIHQ1LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSwgXCJcIiAhPT0gZTIuYmFsYW5jZSAmJiB0NS51aW50MzIoMzQpLnN0cmluZyhlMi5iYWxhbmNlKSwgdDUpLCBkZWNvZGUoZTIsIHQ1KSB7XG4gIGNvbnN0IG8yID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgbjIgPSB2b2lkIDAgPT09IHQ1ID8gbzIubGVuIDogbzIucG9zICsgdDU7XG4gIGNvbnN0IGkzID0gQSgpO1xuICBmb3IgKDsgbzIucG9zIDwgbjI7ICkge1xuICAgIGNvbnN0IGUzID0gbzIudWludDMyKCk7XG4gICAgc3dpdGNoIChlMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBpMy5yZWRlbGVnYXRpb25FbnRyeSA9IFJlZGVsZWdhdGlvbkVudHJ5LmRlY29kZShvMiwgbzIudWludDMyKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgaTMuYmFsYW5jZSA9IG8yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG8yLnNraXBUeXBlKDcgJiBlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpMztcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IHJlZGVsZWdhdGlvbkVudHJ5OiBpc1NldChlMi5yZWRlbGVnYXRpb25FbnRyeSkgPyBSZWRlbGVnYXRpb25FbnRyeS5mcm9tSlNPTihlMi5yZWRlbGVnYXRpb25FbnRyeSkgOiB2b2lkIDAsIGJhbGFuY2U6IGlzU2V0KGUyLmJhbGFuY2UpID8gU3RyaW5nKGUyLmJhbGFuY2UpIDogXCJcIiB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IHQ1ID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLnJlZGVsZWdhdGlvbkVudHJ5ICYmICh0NS5yZWRlbGVnYXRpb25FbnRyeSA9IGUyLnJlZGVsZWdhdGlvbkVudHJ5ID8gUmVkZWxlZ2F0aW9uRW50cnkudG9KU09OKGUyLnJlZGVsZWdhdGlvbkVudHJ5KSA6IHZvaWQgMCksIHZvaWQgMCAhPT0gZTIuYmFsYW5jZSAmJiAodDUuYmFsYW5jZSA9IGUyLmJhbGFuY2UpLCB0NTtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IHQ1ID0gQSgpO1xuICByZXR1cm4gdDUucmVkZWxlZ2F0aW9uRW50cnkgPSB2b2lkIDAgIT09IGUyLnJlZGVsZWdhdGlvbkVudHJ5ICYmIG51bGwgIT09IGUyLnJlZGVsZWdhdGlvbkVudHJ5ID8gUmVkZWxlZ2F0aW9uRW50cnkuZnJvbVBhcnRpYWwoZTIucmVkZWxlZ2F0aW9uRW50cnkpIDogdm9pZCAwLCB0NS5iYWxhbmNlID0gZTIuYmFsYW5jZSA/PyBcIlwiLCB0NTtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBSZWRlbGVnYXRpb25FbnRyeVJlc3BvbnNlLmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gUmVkZWxlZ2F0aW9uRW50cnlSZXNwb25zZS5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUmVkZWxlZ2F0aW9uRW50cnlSZXNwb25zZVwiLCB2YWx1ZTogUmVkZWxlZ2F0aW9uRW50cnlSZXNwb25zZS5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG5mdW5jdGlvbiBEKCkge1xuICByZXR1cm4geyByZWRlbGVnYXRpb246IFJlZGVsZWdhdGlvbi5mcm9tUGFydGlhbCh7fSksIGVudHJpZXM6IFtdIH07XG59XG52YXIgUmVkZWxlZ2F0aW9uUmVzcG9uc2UgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUmVkZWxlZ2F0aW9uUmVzcG9uc2VcIiwgZW5jb2RlKGUyLCB0NSA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkge1xuICB2b2lkIDAgIT09IGUyLnJlZGVsZWdhdGlvbiAmJiBSZWRlbGVnYXRpb24uZW5jb2RlKGUyLnJlZGVsZWdhdGlvbiwgdDUudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICBmb3IgKGNvbnN0IG8yIG9mIGUyLmVudHJpZXMpIFJlZGVsZWdhdGlvbkVudHJ5UmVzcG9uc2UuZW5jb2RlKG8yLCB0NS51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gIHJldHVybiB0NTtcbn0sIGRlY29kZShlMiwgdDUpIHtcbiAgY29uc3QgbzIgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCBuMiA9IHZvaWQgMCA9PT0gdDUgPyBvMi5sZW4gOiBvMi5wb3MgKyB0NTtcbiAgY29uc3QgaTMgPSBEKCk7XG4gIGZvciAoOyBvMi5wb3MgPCBuMjsgKSB7XG4gICAgY29uc3QgZTMgPSBvMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKGUzID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGkzLnJlZGVsZWdhdGlvbiA9IFJlZGVsZWdhdGlvbi5kZWNvZGUobzIsIG8yLnVpbnQzMigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGkzLmVudHJpZXMucHVzaChSZWRlbGVnYXRpb25FbnRyeVJlc3BvbnNlLmRlY29kZShvMiwgbzIudWludDMyKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBvMi5za2lwVHlwZSg3ICYgZTMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTM7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyByZWRlbGVnYXRpb246IGlzU2V0KGUyLnJlZGVsZWdhdGlvbikgPyBSZWRlbGVnYXRpb24uZnJvbUpTT04oZTIucmVkZWxlZ2F0aW9uKSA6IHZvaWQgMCwgZW50cmllczogQXJyYXkuaXNBcnJheShlMj8uZW50cmllcykgPyBlMi5lbnRyaWVzLm1hcCgoZTMpID0+IFJlZGVsZWdhdGlvbkVudHJ5UmVzcG9uc2UuZnJvbUpTT04oZTMpKSA6IFtdIH0pLCB0b0pTT04oZTIpIHtcbiAgY29uc3QgdDUgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gZTIucmVkZWxlZ2F0aW9uICYmICh0NS5yZWRlbGVnYXRpb24gPSBlMi5yZWRlbGVnYXRpb24gPyBSZWRlbGVnYXRpb24udG9KU09OKGUyLnJlZGVsZWdhdGlvbikgOiB2b2lkIDApLCBlMi5lbnRyaWVzID8gdDUuZW50cmllcyA9IGUyLmVudHJpZXMubWFwKChlMykgPT4gZTMgPyBSZWRlbGVnYXRpb25FbnRyeVJlc3BvbnNlLnRvSlNPTihlMykgOiB2b2lkIDApIDogdDUuZW50cmllcyA9IFtdLCB0NTtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IHQ1ID0gRCgpO1xuICByZXR1cm4gdDUucmVkZWxlZ2F0aW9uID0gdm9pZCAwICE9PSBlMi5yZWRlbGVnYXRpb24gJiYgbnVsbCAhPT0gZTIucmVkZWxlZ2F0aW9uID8gUmVkZWxlZ2F0aW9uLmZyb21QYXJ0aWFsKGUyLnJlZGVsZWdhdGlvbikgOiB2b2lkIDAsIHQ1LmVudHJpZXMgPSBlMi5lbnRyaWVzPy5tYXAoKGUzKSA9PiBSZWRlbGVnYXRpb25FbnRyeVJlc3BvbnNlLmZyb21QYXJ0aWFsKGUzKSkgfHwgW10sIHQ1O1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IFJlZGVsZWdhdGlvblJlc3BvbnNlLmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gUmVkZWxlZ2F0aW9uUmVzcG9uc2UuZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlJlZGVsZWdhdGlvblJlc3BvbnNlXCIsIHZhbHVlOiBSZWRlbGVnYXRpb25SZXNwb25zZS5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG5cbi8vXG52YXIgUXVlcnlEZWxlZ2F0aW9uUmVxdWVzdCA9IHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5RdWVyeURlbGVnYXRpb25SZXF1ZXN0XCIsIGVuY29kZTogKG8yLCBlMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKFwiXCIgIT09IG8yLmRlbGVnYXRvckFkZHIgJiYgZTIudWludDMyKDEwKS5zdHJpbmcobzIuZGVsZWdhdG9yQWRkciksIFwiXCIgIT09IG8yLnZhbGlkYXRvckFkZHIgJiYgZTIudWludDMyKDE4KS5zdHJpbmcobzIudmFsaWRhdG9yQWRkciksIGUyKSwgZGVjb2RlKG8yLCBlMikge1xuICBjb25zdCB0NSA9IG8yIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gbzIgOiBuZXcgQmluYXJ5UmVhZGVyKG8yKTtcbiAgbGV0IG4yID0gdm9pZCAwID09PSBlMiA/IHQ1LmxlbiA6IHQ1LnBvcyArIGUyO1xuICBjb25zdCBhMiA9IHsgZGVsZWdhdG9yQWRkcjogXCJcIiwgdmFsaWRhdG9yQWRkcjogXCJcIiB9O1xuICBmb3IgKDsgdDUucG9zIDwgbjI7ICkge1xuICAgIGNvbnN0IG8zID0gdDUudWludDMyKCk7XG4gICAgc3dpdGNoIChvMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBhMi5kZWxlZ2F0b3JBZGRyID0gdDUuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBhMi52YWxpZGF0b3JBZGRyID0gdDUuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdDUuc2tpcFR5cGUoNyAmIG8zKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGEyO1xufSwgZnJvbUpTT046IChvMikgPT4gKHsgZGVsZWdhdG9yQWRkcjogaXNTZXQobzIuZGVsZWdhdG9yQWRkcikgPyBTdHJpbmcobzIuZGVsZWdhdG9yQWRkcikgOiBcIlwiLCB2YWxpZGF0b3JBZGRyOiBpc1NldChvMi52YWxpZGF0b3JBZGRyKSA/IFN0cmluZyhvMi52YWxpZGF0b3JBZGRyKSA6IFwiXCIgfSksIHRvSlNPTihvMikge1xuICBjb25zdCBlMiA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBvMi5kZWxlZ2F0b3JBZGRyICYmIChlMi5kZWxlZ2F0b3JBZGRyID0gbzIuZGVsZWdhdG9yQWRkciksIHZvaWQgMCAhPT0gbzIudmFsaWRhdG9yQWRkciAmJiAoZTIudmFsaWRhdG9yQWRkciA9IG8yLnZhbGlkYXRvckFkZHIpLCBlMjtcbn0sIGZyb21QYXJ0aWFsKG8yKSB7XG4gIGNvbnN0IGUyID0geyBkZWxlZ2F0b3JBZGRyOiBcIlwiLCB2YWxpZGF0b3JBZGRyOiBcIlwiIH07XG4gIHJldHVybiBlMi5kZWxlZ2F0b3JBZGRyID0gbzIuZGVsZWdhdG9yQWRkciA/PyBcIlwiLCBlMi52YWxpZGF0b3JBZGRyID0gbzIudmFsaWRhdG9yQWRkciA/PyBcIlwiLCBlMjtcbn0sIGZyb21Qcm90b01zZzogKG8yKSA9PiBRdWVyeURlbGVnYXRpb25SZXF1ZXN0LmRlY29kZShvMi52YWx1ZSksIHRvUHJvdG86IChvMikgPT4gUXVlcnlEZWxlZ2F0aW9uUmVxdWVzdC5lbmNvZGUobzIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAobzIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUXVlcnlEZWxlZ2F0aW9uUmVxdWVzdFwiLCB2YWx1ZTogUXVlcnlEZWxlZ2F0aW9uUmVxdWVzdC5lbmNvZGUobzIpLmZpbmlzaCgpIH0pIH07XG52YXIgUXVlcnlEZWxlZ2F0aW9uUmVzcG9uc2UgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUXVlcnlEZWxlZ2F0aW9uUmVzcG9uc2VcIiwgZW5jb2RlOiAobzIsIGUyID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAodm9pZCAwICE9PSBvMi5kZWxlZ2F0aW9uUmVzcG9uc2UgJiYgRGVsZWdhdGlvblJlc3BvbnNlLmVuY29kZShvMi5kZWxlZ2F0aW9uUmVzcG9uc2UsIGUyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSwgZTIpLCBkZWNvZGUobzIsIGUyKSB7XG4gIGNvbnN0IHQ1ID0gbzIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBvMiA6IG5ldyBCaW5hcnlSZWFkZXIobzIpO1xuICBsZXQgYTIgPSB2b2lkIDAgPT09IGUyID8gdDUubGVuIDogdDUucG9zICsgZTI7XG4gIGNvbnN0IGkzID0geyBkZWxlZ2F0aW9uUmVzcG9uc2U6IHZvaWQgMCB9O1xuICBmb3IgKDsgdDUucG9zIDwgYTI7ICkge1xuICAgIGNvbnN0IG8zID0gdDUudWludDMyKCk7XG4gICAgaWYgKG8zID4+PiAzID09IDEpIGkzLmRlbGVnYXRpb25SZXNwb25zZSA9IERlbGVnYXRpb25SZXNwb25zZS5kZWNvZGUodDUsIHQ1LnVpbnQzMigpKTtcbiAgICBlbHNlIHQ1LnNraXBUeXBlKDcgJiBvMyk7XG4gIH1cbiAgcmV0dXJuIGkzO1xufSwgZnJvbUpTT046IChvMikgPT4gKHsgZGVsZWdhdGlvblJlc3BvbnNlOiBpc1NldChvMi5kZWxlZ2F0aW9uUmVzcG9uc2UpID8gRGVsZWdhdGlvblJlc3BvbnNlLmZyb21KU09OKG8yLmRlbGVnYXRpb25SZXNwb25zZSkgOiB2b2lkIDAgfSksIHRvSlNPTihvMikge1xuICBjb25zdCBlMiA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBvMi5kZWxlZ2F0aW9uUmVzcG9uc2UgJiYgKGUyLmRlbGVnYXRpb25SZXNwb25zZSA9IG8yLmRlbGVnYXRpb25SZXNwb25zZSA/IERlbGVnYXRpb25SZXNwb25zZS50b0pTT04obzIuZGVsZWdhdGlvblJlc3BvbnNlKSA6IHZvaWQgMCksIGUyO1xufSwgZnJvbVBhcnRpYWwobzIpIHtcbiAgY29uc3QgZTIgPSB7IGRlbGVnYXRpb25SZXNwb25zZTogdm9pZCAwIH07XG4gIHJldHVybiBlMi5kZWxlZ2F0aW9uUmVzcG9uc2UgPSB2b2lkIDAgIT09IG8yLmRlbGVnYXRpb25SZXNwb25zZSAmJiBudWxsICE9PSBvMi5kZWxlZ2F0aW9uUmVzcG9uc2UgPyBEZWxlZ2F0aW9uUmVzcG9uc2UuZnJvbVBhcnRpYWwobzIuZGVsZWdhdGlvblJlc3BvbnNlKSA6IHZvaWQgMCwgZTI7XG59LCBmcm9tUHJvdG9Nc2c6IChvMikgPT4gUXVlcnlEZWxlZ2F0aW9uUmVzcG9uc2UuZGVjb2RlKG8yLnZhbHVlKSwgdG9Qcm90bzogKG8yKSA9PiBRdWVyeURlbGVnYXRpb25SZXNwb25zZS5lbmNvZGUobzIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAobzIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUXVlcnlEZWxlZ2F0aW9uUmVzcG9uc2VcIiwgdmFsdWU6IFF1ZXJ5RGVsZWdhdGlvblJlc3BvbnNlLmVuY29kZShvMikuZmluaXNoKCkgfSkgfTtcbnZhciBRdWVyeVVuYm9uZGluZ0RlbGVnYXRpb25SZXF1ZXN0ID0geyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlF1ZXJ5VW5ib25kaW5nRGVsZWdhdGlvblJlcXVlc3RcIiwgZW5jb2RlOiAobzIsIGUyID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAoXCJcIiAhPT0gbzIuZGVsZWdhdG9yQWRkciAmJiBlMi51aW50MzIoMTApLnN0cmluZyhvMi5kZWxlZ2F0b3JBZGRyKSwgXCJcIiAhPT0gbzIudmFsaWRhdG9yQWRkciAmJiBlMi51aW50MzIoMTgpLnN0cmluZyhvMi52YWxpZGF0b3JBZGRyKSwgZTIpLCBkZWNvZGUobzIsIGUyKSB7XG4gIGNvbnN0IHQ1ID0gbzIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBvMiA6IG5ldyBCaW5hcnlSZWFkZXIobzIpO1xuICBsZXQgbjIgPSB2b2lkIDAgPT09IGUyID8gdDUubGVuIDogdDUucG9zICsgZTI7XG4gIGNvbnN0IGEyID0geyBkZWxlZ2F0b3JBZGRyOiBcIlwiLCB2YWxpZGF0b3JBZGRyOiBcIlwiIH07XG4gIGZvciAoOyB0NS5wb3MgPCBuMjsgKSB7XG4gICAgY29uc3QgbzMgPSB0NS51aW50MzIoKTtcbiAgICBzd2l0Y2ggKG8zID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGEyLmRlbGVnYXRvckFkZHIgPSB0NS5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGEyLnZhbGlkYXRvckFkZHIgPSB0NS5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0NS5za2lwVHlwZSg3ICYgbzMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYTI7XG59LCBmcm9tSlNPTjogKG8yKSA9PiAoeyBkZWxlZ2F0b3JBZGRyOiBpc1NldChvMi5kZWxlZ2F0b3JBZGRyKSA/IFN0cmluZyhvMi5kZWxlZ2F0b3JBZGRyKSA6IFwiXCIsIHZhbGlkYXRvckFkZHI6IGlzU2V0KG8yLnZhbGlkYXRvckFkZHIpID8gU3RyaW5nKG8yLnZhbGlkYXRvckFkZHIpIDogXCJcIiB9KSwgdG9KU09OKG8yKSB7XG4gIGNvbnN0IGUyID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IG8yLmRlbGVnYXRvckFkZHIgJiYgKGUyLmRlbGVnYXRvckFkZHIgPSBvMi5kZWxlZ2F0b3JBZGRyKSwgdm9pZCAwICE9PSBvMi52YWxpZGF0b3JBZGRyICYmIChlMi52YWxpZGF0b3JBZGRyID0gbzIudmFsaWRhdG9yQWRkciksIGUyO1xufSwgZnJvbVBhcnRpYWwobzIpIHtcbiAgY29uc3QgZTIgPSB7IGRlbGVnYXRvckFkZHI6IFwiXCIsIHZhbGlkYXRvckFkZHI6IFwiXCIgfTtcbiAgcmV0dXJuIGUyLmRlbGVnYXRvckFkZHIgPSBvMi5kZWxlZ2F0b3JBZGRyID8/IFwiXCIsIGUyLnZhbGlkYXRvckFkZHIgPSBvMi52YWxpZGF0b3JBZGRyID8/IFwiXCIsIGUyO1xufSwgZnJvbVByb3RvTXNnOiAobzIpID0+IFF1ZXJ5VW5ib25kaW5nRGVsZWdhdGlvblJlcXVlc3QuZGVjb2RlKG8yLnZhbHVlKSwgdG9Qcm90bzogKG8yKSA9PiBRdWVyeVVuYm9uZGluZ0RlbGVnYXRpb25SZXF1ZXN0LmVuY29kZShvMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChvMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5RdWVyeVVuYm9uZGluZ0RlbGVnYXRpb25SZXF1ZXN0XCIsIHZhbHVlOiBRdWVyeVVuYm9uZGluZ0RlbGVnYXRpb25SZXF1ZXN0LmVuY29kZShvMikuZmluaXNoKCkgfSkgfTtcbmZ1bmN0aW9uIGMoKSB7XG4gIHJldHVybiB7IHVuYm9uZDogVW5ib25kaW5nRGVsZWdhdGlvbi5mcm9tUGFydGlhbCh7fSkgfTtcbn1cbnZhciBRdWVyeVVuYm9uZGluZ0RlbGVnYXRpb25SZXNwb25zZSA9IHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5RdWVyeVVuYm9uZGluZ0RlbGVnYXRpb25SZXNwb25zZVwiLCBlbmNvZGU6IChvMiwgZTIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+ICh2b2lkIDAgIT09IG8yLnVuYm9uZCAmJiBVbmJvbmRpbmdEZWxlZ2F0aW9uLmVuY29kZShvMi51bmJvbmQsIGUyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSwgZTIpLCBkZWNvZGUobzIsIGUyKSB7XG4gIGNvbnN0IHQ1ID0gbzIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBvMiA6IG5ldyBCaW5hcnlSZWFkZXIobzIpO1xuICBsZXQgbjIgPSB2b2lkIDAgPT09IGUyID8gdDUubGVuIDogdDUucG9zICsgZTI7XG4gIGNvbnN0IGkzID0gYygpO1xuICBmb3IgKDsgdDUucG9zIDwgbjI7ICkge1xuICAgIGNvbnN0IG8zID0gdDUudWludDMyKCk7XG4gICAgaWYgKG8zID4+PiAzID09IDEpIGkzLnVuYm9uZCA9IFVuYm9uZGluZ0RlbGVnYXRpb24uZGVjb2RlKHQ1LCB0NS51aW50MzIoKSk7XG4gICAgZWxzZSB0NS5za2lwVHlwZSg3ICYgbzMpO1xuICB9XG4gIHJldHVybiBpMztcbn0sIGZyb21KU09OOiAobzIpID0+ICh7IHVuYm9uZDogaXNTZXQobzIudW5ib25kKSA/IFVuYm9uZGluZ0RlbGVnYXRpb24uZnJvbUpTT04obzIudW5ib25kKSA6IHZvaWQgMCB9KSwgdG9KU09OKG8yKSB7XG4gIGNvbnN0IGUyID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IG8yLnVuYm9uZCAmJiAoZTIudW5ib25kID0gbzIudW5ib25kID8gVW5ib25kaW5nRGVsZWdhdGlvbi50b0pTT04obzIudW5ib25kKSA6IHZvaWQgMCksIGUyO1xufSwgZnJvbVBhcnRpYWwobzIpIHtcbiAgY29uc3QgZTIgPSBjKCk7XG4gIHJldHVybiBlMi51bmJvbmQgPSB2b2lkIDAgIT09IG8yLnVuYm9uZCAmJiBudWxsICE9PSBvMi51bmJvbmQgPyBVbmJvbmRpbmdEZWxlZ2F0aW9uLmZyb21QYXJ0aWFsKG8yLnVuYm9uZCkgOiB2b2lkIDAsIGUyO1xufSwgZnJvbVByb3RvTXNnOiAobzIpID0+IFF1ZXJ5VW5ib25kaW5nRGVsZWdhdGlvblJlc3BvbnNlLmRlY29kZShvMi52YWx1ZSksIHRvUHJvdG86IChvMikgPT4gUXVlcnlVbmJvbmRpbmdEZWxlZ2F0aW9uUmVzcG9uc2UuZW5jb2RlKG8yKS5maW5pc2goKSwgdG9Qcm90b01zZzogKG8yKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlF1ZXJ5VW5ib25kaW5nRGVsZWdhdGlvblJlc3BvbnNlXCIsIHZhbHVlOiBRdWVyeVVuYm9uZGluZ0RlbGVnYXRpb25SZXNwb25zZS5lbmNvZGUobzIpLmZpbmlzaCgpIH0pIH07XG52YXIgUXVlcnlEZWxlZ2F0b3JEZWxlZ2F0aW9uc1JlcXVlc3QgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUXVlcnlEZWxlZ2F0b3JEZWxlZ2F0aW9uc1JlcXVlc3RcIiwgZW5jb2RlOiAoZTIsIHQ1ID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAoXCJcIiAhPT0gZTIuZGVsZWdhdG9yQWRkciAmJiB0NS51aW50MzIoMTApLnN0cmluZyhlMi5kZWxlZ2F0b3JBZGRyKSwgdm9pZCAwICE9PSBlMi5wYWdpbmF0aW9uICYmIFBhZ2VSZXF1ZXN0LmVuY29kZShlMi5wYWdpbmF0aW9uLCB0NS51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCksIHQ1KSwgZGVjb2RlKGUyLCB0NSkge1xuICBjb25zdCBuMiA9IGUyIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gZTIgOiBuZXcgQmluYXJ5UmVhZGVyKGUyKTtcbiAgbGV0IGEyID0gdm9pZCAwID09PSB0NSA/IG4yLmxlbiA6IG4yLnBvcyArIHQ1O1xuICBjb25zdCBpMyA9IHsgZGVsZWdhdG9yQWRkcjogXCJcIiwgcGFnaW5hdGlvbjogdm9pZCAwIH07XG4gIGZvciAoOyBuMi5wb3MgPCBhMjsgKSB7XG4gICAgY29uc3QgZTMgPSBuMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKGUzID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGkzLmRlbGVnYXRvckFkZHIgPSBuMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGkzLnBhZ2luYXRpb24gPSBQYWdlUmVxdWVzdC5kZWNvZGUobjIsIG4yLnVpbnQzMigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBuMi5za2lwVHlwZSg3ICYgZTMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTM7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyBkZWxlZ2F0b3JBZGRyOiBpc1NldChlMi5kZWxlZ2F0b3JBZGRyKSA/IFN0cmluZyhlMi5kZWxlZ2F0b3JBZGRyKSA6IFwiXCIsIHBhZ2luYXRpb246IGlzU2V0KGUyLnBhZ2luYXRpb24pID8gUGFnZVJlcXVlc3QuZnJvbUpTT04oZTIucGFnaW5hdGlvbikgOiB2b2lkIDAgfSksIHRvSlNPTihlMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5kZWxlZ2F0b3JBZGRyICYmICh0NS5kZWxlZ2F0b3JBZGRyID0gZTIuZGVsZWdhdG9yQWRkciksIHZvaWQgMCAhPT0gZTIucGFnaW5hdGlvbiAmJiAodDUucGFnaW5hdGlvbiA9IGUyLnBhZ2luYXRpb24gPyBQYWdlUmVxdWVzdC50b0pTT04oZTIucGFnaW5hdGlvbikgOiB2b2lkIDApLCB0NTtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IHQ1ID0geyBkZWxlZ2F0b3JBZGRyOiBcIlwiLCBwYWdpbmF0aW9uOiB2b2lkIDAgfTtcbiAgcmV0dXJuIHQ1LmRlbGVnYXRvckFkZHIgPSBlMi5kZWxlZ2F0b3JBZGRyID8/IFwiXCIsIHQ1LnBhZ2luYXRpb24gPSB2b2lkIDAgIT09IGUyLnBhZ2luYXRpb24gJiYgbnVsbCAhPT0gZTIucGFnaW5hdGlvbiA/IFBhZ2VSZXF1ZXN0LmZyb21QYXJ0aWFsKGUyLnBhZ2luYXRpb24pIDogdm9pZCAwLCB0NTtcbn0sIGZyb21Qcm90b01zZzogKG8yKSA9PiBRdWVyeURlbGVnYXRvckRlbGVnYXRpb25zUmVxdWVzdC5kZWNvZGUobzIudmFsdWUpLCB0b1Byb3RvOiAobzIpID0+IFF1ZXJ5RGVsZWdhdG9yRGVsZWdhdGlvbnNSZXF1ZXN0LmVuY29kZShvMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChvMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5RdWVyeURlbGVnYXRvckRlbGVnYXRpb25zUmVxdWVzdFwiLCB2YWx1ZTogUXVlcnlEZWxlZ2F0b3JEZWxlZ2F0aW9uc1JlcXVlc3QuZW5jb2RlKG8yKS5maW5pc2goKSB9KSB9O1xudmFyIFF1ZXJ5RGVsZWdhdG9yRGVsZWdhdGlvbnNSZXNwb25zZSA9IHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5RdWVyeURlbGVnYXRvckRlbGVnYXRpb25zUmVzcG9uc2VcIiwgZW5jb2RlKG8yLCB0NSA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkge1xuICBmb3IgKGNvbnN0IGUyIG9mIG8yLmRlbGVnYXRpb25SZXNwb25zZXMpIERlbGVnYXRpb25SZXNwb25zZS5lbmNvZGUoZTIsIHQ1LnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gbzIucGFnaW5hdGlvbiAmJiBQYWdlUmVzcG9uc2UuZW5jb2RlKG8yLnBhZ2luYXRpb24sIHQ1LnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKSwgdDU7XG59LCBkZWNvZGUobzIsIHQ1KSB7XG4gIGNvbnN0IGEyID0gbzIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBvMiA6IG5ldyBCaW5hcnlSZWFkZXIobzIpO1xuICBsZXQgaTMgPSB2b2lkIDAgPT09IHQ1ID8gYTIubGVuIDogYTIucG9zICsgdDU7XG4gIGNvbnN0IHI1ID0geyBkZWxlZ2F0aW9uUmVzcG9uc2VzOiBbXSwgcGFnaW5hdGlvbjogdm9pZCAwIH07XG4gIGZvciAoOyBhMi5wb3MgPCBpMzsgKSB7XG4gICAgY29uc3QgbzMgPSBhMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKG8zID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHI1LmRlbGVnYXRpb25SZXNwb25zZXMucHVzaChEZWxlZ2F0aW9uUmVzcG9uc2UuZGVjb2RlKGEyLCBhMi51aW50MzIoKSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcjUucGFnaW5hdGlvbiA9IFBhZ2VSZXNwb25zZS5kZWNvZGUoYTIsIGEyLnVpbnQzMigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhMi5za2lwVHlwZSg3ICYgbzMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcjU7XG59LCBmcm9tSlNPTjogKG8yKSA9PiAoeyBkZWxlZ2F0aW9uUmVzcG9uc2VzOiBBcnJheS5pc0FycmF5KG8yPy5kZWxlZ2F0aW9uUmVzcG9uc2VzKSA/IG8yLmRlbGVnYXRpb25SZXNwb25zZXMubWFwKChvMykgPT4gRGVsZWdhdGlvblJlc3BvbnNlLmZyb21KU09OKG8zKSkgOiBbXSwgcGFnaW5hdGlvbjogaXNTZXQobzIucGFnaW5hdGlvbikgPyBQYWdlUmVzcG9uc2UuZnJvbUpTT04obzIucGFnaW5hdGlvbikgOiB2b2lkIDAgfSksIHRvSlNPTihvMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gbzIuZGVsZWdhdGlvblJlc3BvbnNlcyA/IHQ1LmRlbGVnYXRpb25SZXNwb25zZXMgPSBvMi5kZWxlZ2F0aW9uUmVzcG9uc2VzLm1hcCgobzMpID0+IG8zID8gRGVsZWdhdGlvblJlc3BvbnNlLnRvSlNPTihvMykgOiB2b2lkIDApIDogdDUuZGVsZWdhdGlvblJlc3BvbnNlcyA9IFtdLCB2b2lkIDAgIT09IG8yLnBhZ2luYXRpb24gJiYgKHQ1LnBhZ2luYXRpb24gPSBvMi5wYWdpbmF0aW9uID8gUGFnZVJlc3BvbnNlLnRvSlNPTihvMi5wYWdpbmF0aW9uKSA6IHZvaWQgMCksIHQ1O1xufSwgZnJvbVBhcnRpYWwobzIpIHtcbiAgY29uc3QgdDUgPSB7IGRlbGVnYXRpb25SZXNwb25zZXM6IFtdLCBwYWdpbmF0aW9uOiB2b2lkIDAgfTtcbiAgcmV0dXJuIHQ1LmRlbGVnYXRpb25SZXNwb25zZXMgPSBvMi5kZWxlZ2F0aW9uUmVzcG9uc2VzPy5tYXAoKG8zKSA9PiBEZWxlZ2F0aW9uUmVzcG9uc2UuZnJvbVBhcnRpYWwobzMpKSB8fCBbXSwgdDUucGFnaW5hdGlvbiA9IHZvaWQgMCAhPT0gbzIucGFnaW5hdGlvbiAmJiBudWxsICE9PSBvMi5wYWdpbmF0aW9uID8gUGFnZVJlc3BvbnNlLmZyb21QYXJ0aWFsKG8yLnBhZ2luYXRpb24pIDogdm9pZCAwLCB0NTtcbn0sIGZyb21Qcm90b01zZzogKG8yKSA9PiBRdWVyeURlbGVnYXRvckRlbGVnYXRpb25zUmVzcG9uc2UuZGVjb2RlKG8yLnZhbHVlKSwgdG9Qcm90bzogKG8yKSA9PiBRdWVyeURlbGVnYXRvckRlbGVnYXRpb25zUmVzcG9uc2UuZW5jb2RlKG8yKS5maW5pc2goKSwgdG9Qcm90b01zZzogKG8yKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlF1ZXJ5RGVsZWdhdG9yRGVsZWdhdGlvbnNSZXNwb25zZVwiLCB2YWx1ZTogUXVlcnlEZWxlZ2F0b3JEZWxlZ2F0aW9uc1Jlc3BvbnNlLmVuY29kZShvMikuZmluaXNoKCkgfSkgfTtcbnZhciBRdWVyeURlbGVnYXRvclVuYm9uZGluZ0RlbGVnYXRpb25zUmVxdWVzdCA9IHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5RdWVyeURlbGVnYXRvclVuYm9uZGluZ0RlbGVnYXRpb25zUmVxdWVzdFwiLCBlbmNvZGU6IChlMiwgdDUgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+IChcIlwiICE9PSBlMi5kZWxlZ2F0b3JBZGRyICYmIHQ1LnVpbnQzMigxMCkuc3RyaW5nKGUyLmRlbGVnYXRvckFkZHIpLCB2b2lkIDAgIT09IGUyLnBhZ2luYXRpb24gJiYgUGFnZVJlcXVlc3QuZW5jb2RlKGUyLnBhZ2luYXRpb24sIHQ1LnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKSwgdDUpLCBkZWNvZGUoZTIsIHQ1KSB7XG4gIGNvbnN0IG4yID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgYTIgPSB2b2lkIDAgPT09IHQ1ID8gbjIubGVuIDogbjIucG9zICsgdDU7XG4gIGNvbnN0IGkzID0geyBkZWxlZ2F0b3JBZGRyOiBcIlwiLCBwYWdpbmF0aW9uOiB2b2lkIDAgfTtcbiAgZm9yICg7IG4yLnBvcyA8IGEyOyApIHtcbiAgICBjb25zdCBlMyA9IG4yLnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaTMuZGVsZWdhdG9yQWRkciA9IG4yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaTMucGFnaW5hdGlvbiA9IFBhZ2VSZXF1ZXN0LmRlY29kZShuMiwgbjIudWludDMyKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG4yLnNraXBUeXBlKDcgJiBlMyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBpMztcbn0sIGZyb21KU09OOiAoZTIpID0+ICh7IGRlbGVnYXRvckFkZHI6IGlzU2V0KGUyLmRlbGVnYXRvckFkZHIpID8gU3RyaW5nKGUyLmRlbGVnYXRvckFkZHIpIDogXCJcIiwgcGFnaW5hdGlvbjogaXNTZXQoZTIucGFnaW5hdGlvbikgPyBQYWdlUmVxdWVzdC5mcm9tSlNPTihlMi5wYWdpbmF0aW9uKSA6IHZvaWQgMCB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IHQ1ID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLmRlbGVnYXRvckFkZHIgJiYgKHQ1LmRlbGVnYXRvckFkZHIgPSBlMi5kZWxlZ2F0b3JBZGRyKSwgdm9pZCAwICE9PSBlMi5wYWdpbmF0aW9uICYmICh0NS5wYWdpbmF0aW9uID0gZTIucGFnaW5hdGlvbiA/IFBhZ2VSZXF1ZXN0LnRvSlNPTihlMi5wYWdpbmF0aW9uKSA6IHZvaWQgMCksIHQ1O1xufSwgZnJvbVBhcnRpYWwoZTIpIHtcbiAgY29uc3QgdDUgPSB7IGRlbGVnYXRvckFkZHI6IFwiXCIsIHBhZ2luYXRpb246IHZvaWQgMCB9O1xuICByZXR1cm4gdDUuZGVsZWdhdG9yQWRkciA9IGUyLmRlbGVnYXRvckFkZHIgPz8gXCJcIiwgdDUucGFnaW5hdGlvbiA9IHZvaWQgMCAhPT0gZTIucGFnaW5hdGlvbiAmJiBudWxsICE9PSBlMi5wYWdpbmF0aW9uID8gUGFnZVJlcXVlc3QuZnJvbVBhcnRpYWwoZTIucGFnaW5hdGlvbikgOiB2b2lkIDAsIHQ1O1xufSwgZnJvbVByb3RvTXNnOiAobzIpID0+IFF1ZXJ5RGVsZWdhdG9yVW5ib25kaW5nRGVsZWdhdGlvbnNSZXF1ZXN0LmRlY29kZShvMi52YWx1ZSksIHRvUHJvdG86IChvMikgPT4gUXVlcnlEZWxlZ2F0b3JVbmJvbmRpbmdEZWxlZ2F0aW9uc1JlcXVlc3QuZW5jb2RlKG8yKS5maW5pc2goKSwgdG9Qcm90b01zZzogKG8yKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlF1ZXJ5RGVsZWdhdG9yVW5ib25kaW5nRGVsZWdhdGlvbnNSZXF1ZXN0XCIsIHZhbHVlOiBRdWVyeURlbGVnYXRvclVuYm9uZGluZ0RlbGVnYXRpb25zUmVxdWVzdC5lbmNvZGUobzIpLmZpbmlzaCgpIH0pIH07XG52YXIgUXVlcnlEZWxlZ2F0b3JVbmJvbmRpbmdEZWxlZ2F0aW9uc1Jlc3BvbnNlID0geyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlF1ZXJ5RGVsZWdhdG9yVW5ib25kaW5nRGVsZWdhdGlvbnNSZXNwb25zZVwiLCBlbmNvZGUobzIsIHQ1ID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSB7XG4gIGZvciAoY29uc3QgZTIgb2YgbzIudW5ib25kaW5nUmVzcG9uc2VzKSBVbmJvbmRpbmdEZWxlZ2F0aW9uLmVuY29kZShlMiwgdDUudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICByZXR1cm4gdm9pZCAwICE9PSBvMi5wYWdpbmF0aW9uICYmIFBhZ2VSZXNwb25zZS5lbmNvZGUobzIucGFnaW5hdGlvbiwgdDUudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpLCB0NTtcbn0sIGRlY29kZShvMiwgdDUpIHtcbiAgY29uc3QgbjIgPSBvMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IG8yIDogbmV3IEJpbmFyeVJlYWRlcihvMik7XG4gIGxldCBpMyA9IHZvaWQgMCA9PT0gdDUgPyBuMi5sZW4gOiBuMi5wb3MgKyB0NTtcbiAgY29uc3QgcjUgPSB7IHVuYm9uZGluZ1Jlc3BvbnNlczogW10sIHBhZ2luYXRpb246IHZvaWQgMCB9O1xuICBmb3IgKDsgbjIucG9zIDwgaTM7ICkge1xuICAgIGNvbnN0IG8zID0gbjIudWludDMyKCk7XG4gICAgc3dpdGNoIChvMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByNS51bmJvbmRpbmdSZXNwb25zZXMucHVzaChVbmJvbmRpbmdEZWxlZ2F0aW9uLmRlY29kZShuMiwgbjIudWludDMyKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHI1LnBhZ2luYXRpb24gPSBQYWdlUmVzcG9uc2UuZGVjb2RlKG4yLCBuMi51aW50MzIoKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbjIuc2tpcFR5cGUoNyAmIG8zKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHI1O1xufSwgZnJvbUpTT046IChvMikgPT4gKHsgdW5ib25kaW5nUmVzcG9uc2VzOiBBcnJheS5pc0FycmF5KG8yPy51bmJvbmRpbmdSZXNwb25zZXMpID8gbzIudW5ib25kaW5nUmVzcG9uc2VzLm1hcCgobzMpID0+IFVuYm9uZGluZ0RlbGVnYXRpb24uZnJvbUpTT04obzMpKSA6IFtdLCBwYWdpbmF0aW9uOiBpc1NldChvMi5wYWdpbmF0aW9uKSA/IFBhZ2VSZXNwb25zZS5mcm9tSlNPTihvMi5wYWdpbmF0aW9uKSA6IHZvaWQgMCB9KSwgdG9KU09OKG8yKSB7XG4gIGNvbnN0IHQ1ID0ge307XG4gIHJldHVybiBvMi51bmJvbmRpbmdSZXNwb25zZXMgPyB0NS51bmJvbmRpbmdSZXNwb25zZXMgPSBvMi51bmJvbmRpbmdSZXNwb25zZXMubWFwKChvMykgPT4gbzMgPyBVbmJvbmRpbmdEZWxlZ2F0aW9uLnRvSlNPTihvMykgOiB2b2lkIDApIDogdDUudW5ib25kaW5nUmVzcG9uc2VzID0gW10sIHZvaWQgMCAhPT0gbzIucGFnaW5hdGlvbiAmJiAodDUucGFnaW5hdGlvbiA9IG8yLnBhZ2luYXRpb24gPyBQYWdlUmVzcG9uc2UudG9KU09OKG8yLnBhZ2luYXRpb24pIDogdm9pZCAwKSwgdDU7XG59LCBmcm9tUGFydGlhbChvMikge1xuICBjb25zdCB0NSA9IHsgdW5ib25kaW5nUmVzcG9uc2VzOiBbXSwgcGFnaW5hdGlvbjogdm9pZCAwIH07XG4gIHJldHVybiB0NS51bmJvbmRpbmdSZXNwb25zZXMgPSBvMi51bmJvbmRpbmdSZXNwb25zZXM/Lm1hcCgobzMpID0+IFVuYm9uZGluZ0RlbGVnYXRpb24uZnJvbVBhcnRpYWwobzMpKSB8fCBbXSwgdDUucGFnaW5hdGlvbiA9IHZvaWQgMCAhPT0gbzIucGFnaW5hdGlvbiAmJiBudWxsICE9PSBvMi5wYWdpbmF0aW9uID8gUGFnZVJlc3BvbnNlLmZyb21QYXJ0aWFsKG8yLnBhZ2luYXRpb24pIDogdm9pZCAwLCB0NTtcbn0sIGZyb21Qcm90b01zZzogKG8yKSA9PiBRdWVyeURlbGVnYXRvclVuYm9uZGluZ0RlbGVnYXRpb25zUmVzcG9uc2UuZGVjb2RlKG8yLnZhbHVlKSwgdG9Qcm90bzogKG8yKSA9PiBRdWVyeURlbGVnYXRvclVuYm9uZGluZ0RlbGVnYXRpb25zUmVzcG9uc2UuZW5jb2RlKG8yKS5maW5pc2goKSwgdG9Qcm90b01zZzogKG8yKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlF1ZXJ5RGVsZWdhdG9yVW5ib25kaW5nRGVsZWdhdGlvbnNSZXNwb25zZVwiLCB2YWx1ZTogUXVlcnlEZWxlZ2F0b3JVbmJvbmRpbmdEZWxlZ2F0aW9uc1Jlc3BvbnNlLmVuY29kZShvMikuZmluaXNoKCkgfSkgfTtcbnZhciBRdWVyeVJlZGVsZWdhdGlvbnNSZXF1ZXN0ID0geyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLlF1ZXJ5UmVkZWxlZ2F0aW9uc1JlcXVlc3RcIiwgZW5jb2RlOiAoZTIsIHQ1ID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAoXCJcIiAhPT0gZTIuZGVsZWdhdG9yQWRkciAmJiB0NS51aW50MzIoMTApLnN0cmluZyhlMi5kZWxlZ2F0b3JBZGRyKSwgXCJcIiAhPT0gZTIuc3JjVmFsaWRhdG9yQWRkciAmJiB0NS51aW50MzIoMTgpLnN0cmluZyhlMi5zcmNWYWxpZGF0b3JBZGRyKSwgXCJcIiAhPT0gZTIuZHN0VmFsaWRhdG9yQWRkciAmJiB0NS51aW50MzIoMjYpLnN0cmluZyhlMi5kc3RWYWxpZGF0b3JBZGRyKSwgdm9pZCAwICE9PSBlMi5wYWdpbmF0aW9uICYmIFBhZ2VSZXF1ZXN0LmVuY29kZShlMi5wYWdpbmF0aW9uLCB0NS51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCksIHQ1KSwgZGVjb2RlKGUyLCB0NSkge1xuICBjb25zdCBuMiA9IGUyIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gZTIgOiBuZXcgQmluYXJ5UmVhZGVyKGUyKTtcbiAgbGV0IGEyID0gdm9pZCAwID09PSB0NSA/IG4yLmxlbiA6IG4yLnBvcyArIHQ1O1xuICBjb25zdCBpMyA9IHsgZGVsZWdhdG9yQWRkcjogXCJcIiwgc3JjVmFsaWRhdG9yQWRkcjogXCJcIiwgZHN0VmFsaWRhdG9yQWRkcjogXCJcIiwgcGFnaW5hdGlvbjogdm9pZCAwIH07XG4gIGZvciAoOyBuMi5wb3MgPCBhMjsgKSB7XG4gICAgY29uc3QgZTMgPSBuMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKGUzID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGkzLmRlbGVnYXRvckFkZHIgPSBuMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGkzLnNyY1ZhbGlkYXRvckFkZHIgPSBuMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGkzLmRzdFZhbGlkYXRvckFkZHIgPSBuMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIGkzLnBhZ2luYXRpb24gPSBQYWdlUmVxdWVzdC5kZWNvZGUobjIsIG4yLnVpbnQzMigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBuMi5za2lwVHlwZSg3ICYgZTMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTM7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyBkZWxlZ2F0b3JBZGRyOiBpc1NldChlMi5kZWxlZ2F0b3JBZGRyKSA/IFN0cmluZyhlMi5kZWxlZ2F0b3JBZGRyKSA6IFwiXCIsIHNyY1ZhbGlkYXRvckFkZHI6IGlzU2V0KGUyLnNyY1ZhbGlkYXRvckFkZHIpID8gU3RyaW5nKGUyLnNyY1ZhbGlkYXRvckFkZHIpIDogXCJcIiwgZHN0VmFsaWRhdG9yQWRkcjogaXNTZXQoZTIuZHN0VmFsaWRhdG9yQWRkcikgPyBTdHJpbmcoZTIuZHN0VmFsaWRhdG9yQWRkcikgOiBcIlwiLCBwYWdpbmF0aW9uOiBpc1NldChlMi5wYWdpbmF0aW9uKSA/IFBhZ2VSZXF1ZXN0LmZyb21KU09OKGUyLnBhZ2luYXRpb24pIDogdm9pZCAwIH0pLCB0b0pTT04oZTIpIHtcbiAgY29uc3QgdDUgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gZTIuZGVsZWdhdG9yQWRkciAmJiAodDUuZGVsZWdhdG9yQWRkciA9IGUyLmRlbGVnYXRvckFkZHIpLCB2b2lkIDAgIT09IGUyLnNyY1ZhbGlkYXRvckFkZHIgJiYgKHQ1LnNyY1ZhbGlkYXRvckFkZHIgPSBlMi5zcmNWYWxpZGF0b3JBZGRyKSwgdm9pZCAwICE9PSBlMi5kc3RWYWxpZGF0b3JBZGRyICYmICh0NS5kc3RWYWxpZGF0b3JBZGRyID0gZTIuZHN0VmFsaWRhdG9yQWRkciksIHZvaWQgMCAhPT0gZTIucGFnaW5hdGlvbiAmJiAodDUucGFnaW5hdGlvbiA9IGUyLnBhZ2luYXRpb24gPyBQYWdlUmVxdWVzdC50b0pTT04oZTIucGFnaW5hdGlvbikgOiB2b2lkIDApLCB0NTtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IHQ1ID0geyBkZWxlZ2F0b3JBZGRyOiBcIlwiLCBzcmNWYWxpZGF0b3JBZGRyOiBcIlwiLCBkc3RWYWxpZGF0b3JBZGRyOiBcIlwiLCBwYWdpbmF0aW9uOiB2b2lkIDAgfTtcbiAgcmV0dXJuIHQ1LmRlbGVnYXRvckFkZHIgPSBlMi5kZWxlZ2F0b3JBZGRyID8/IFwiXCIsIHQ1LnNyY1ZhbGlkYXRvckFkZHIgPSBlMi5zcmNWYWxpZGF0b3JBZGRyID8/IFwiXCIsIHQ1LmRzdFZhbGlkYXRvckFkZHIgPSBlMi5kc3RWYWxpZGF0b3JBZGRyID8/IFwiXCIsIHQ1LnBhZ2luYXRpb24gPSB2b2lkIDAgIT09IGUyLnBhZ2luYXRpb24gJiYgbnVsbCAhPT0gZTIucGFnaW5hdGlvbiA/IFBhZ2VSZXF1ZXN0LmZyb21QYXJ0aWFsKGUyLnBhZ2luYXRpb24pIDogdm9pZCAwLCB0NTtcbn0sIGZyb21Qcm90b01zZzogKG8yKSA9PiBRdWVyeVJlZGVsZWdhdGlvbnNSZXF1ZXN0LmRlY29kZShvMi52YWx1ZSksIHRvUHJvdG86IChvMikgPT4gUXVlcnlSZWRlbGVnYXRpb25zUmVxdWVzdC5lbmNvZGUobzIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAobzIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUXVlcnlSZWRlbGVnYXRpb25zUmVxdWVzdFwiLCB2YWx1ZTogUXVlcnlSZWRlbGVnYXRpb25zUmVxdWVzdC5lbmNvZGUobzIpLmZpbmlzaCgpIH0pIH07XG52YXIgUXVlcnlSZWRlbGVnYXRpb25zUmVzcG9uc2UgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuUXVlcnlSZWRlbGVnYXRpb25zUmVzcG9uc2VcIiwgZW5jb2RlKG8yLCB0NSA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkge1xuICBmb3IgKGNvbnN0IGUyIG9mIG8yLnJlZGVsZWdhdGlvblJlc3BvbnNlcykgUmVkZWxlZ2F0aW9uUmVzcG9uc2UuZW5jb2RlKGUyLCB0NS51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gIHJldHVybiB2b2lkIDAgIT09IG8yLnBhZ2luYXRpb24gJiYgUGFnZVJlc3BvbnNlLmVuY29kZShvMi5wYWdpbmF0aW9uLCB0NS51aW50MzIoMTgpLmZvcmsoKSkubGRlbGltKCksIHQ1O1xufSwgZGVjb2RlKG8yLCB0NSkge1xuICBjb25zdCBuMiA9IG8yIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gbzIgOiBuZXcgQmluYXJ5UmVhZGVyKG8yKTtcbiAgbGV0IGEyID0gdm9pZCAwID09PSB0NSA/IG4yLmxlbiA6IG4yLnBvcyArIHQ1O1xuICBjb25zdCByNSA9IHsgcmVkZWxlZ2F0aW9uUmVzcG9uc2VzOiBbXSwgcGFnaW5hdGlvbjogdm9pZCAwIH07XG4gIGZvciAoOyBuMi5wb3MgPCBhMjsgKSB7XG4gICAgY29uc3QgbzMgPSBuMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKG8zID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHI1LnJlZGVsZWdhdGlvblJlc3BvbnNlcy5wdXNoKFJlZGVsZWdhdGlvblJlc3BvbnNlLmRlY29kZShuMiwgbjIudWludDMyKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHI1LnBhZ2luYXRpb24gPSBQYWdlUmVzcG9uc2UuZGVjb2RlKG4yLCBuMi51aW50MzIoKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbjIuc2tpcFR5cGUoNyAmIG8zKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHI1O1xufSwgZnJvbUpTT046IChvMikgPT4gKHsgcmVkZWxlZ2F0aW9uUmVzcG9uc2VzOiBBcnJheS5pc0FycmF5KG8yPy5yZWRlbGVnYXRpb25SZXNwb25zZXMpID8gbzIucmVkZWxlZ2F0aW9uUmVzcG9uc2VzLm1hcCgobzMpID0+IFJlZGVsZWdhdGlvblJlc3BvbnNlLmZyb21KU09OKG8zKSkgOiBbXSwgcGFnaW5hdGlvbjogaXNTZXQobzIucGFnaW5hdGlvbikgPyBQYWdlUmVzcG9uc2UuZnJvbUpTT04obzIucGFnaW5hdGlvbikgOiB2b2lkIDAgfSksIHRvSlNPTihvMikge1xuICBjb25zdCB0NSA9IHt9O1xuICByZXR1cm4gbzIucmVkZWxlZ2F0aW9uUmVzcG9uc2VzID8gdDUucmVkZWxlZ2F0aW9uUmVzcG9uc2VzID0gbzIucmVkZWxlZ2F0aW9uUmVzcG9uc2VzLm1hcCgobzMpID0+IG8zID8gUmVkZWxlZ2F0aW9uUmVzcG9uc2UudG9KU09OKG8zKSA6IHZvaWQgMCkgOiB0NS5yZWRlbGVnYXRpb25SZXNwb25zZXMgPSBbXSwgdm9pZCAwICE9PSBvMi5wYWdpbmF0aW9uICYmICh0NS5wYWdpbmF0aW9uID0gbzIucGFnaW5hdGlvbiA/IFBhZ2VSZXNwb25zZS50b0pTT04obzIucGFnaW5hdGlvbikgOiB2b2lkIDApLCB0NTtcbn0sIGZyb21QYXJ0aWFsKG8yKSB7XG4gIGNvbnN0IHQ1ID0geyByZWRlbGVnYXRpb25SZXNwb25zZXM6IFtdLCBwYWdpbmF0aW9uOiB2b2lkIDAgfTtcbiAgcmV0dXJuIHQ1LnJlZGVsZWdhdGlvblJlc3BvbnNlcyA9IG8yLnJlZGVsZWdhdGlvblJlc3BvbnNlcz8ubWFwKChvMykgPT4gUmVkZWxlZ2F0aW9uUmVzcG9uc2UuZnJvbVBhcnRpYWwobzMpKSB8fCBbXSwgdDUucGFnaW5hdGlvbiA9IHZvaWQgMCAhPT0gbzIucGFnaW5hdGlvbiAmJiBudWxsICE9PSBvMi5wYWdpbmF0aW9uID8gUGFnZVJlc3BvbnNlLmZyb21QYXJ0aWFsKG8yLnBhZ2luYXRpb24pIDogdm9pZCAwLCB0NTtcbn0sIGZyb21Qcm90b01zZzogKG8yKSA9PiBRdWVyeVJlZGVsZWdhdGlvbnNSZXNwb25zZS5kZWNvZGUobzIudmFsdWUpLCB0b1Byb3RvOiAobzIpID0+IFF1ZXJ5UmVkZWxlZ2F0aW9uc1Jlc3BvbnNlLmVuY29kZShvMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChvMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5RdWVyeVJlZGVsZWdhdGlvbnNSZXNwb25zZVwiLCB2YWx1ZTogUXVlcnlSZWRlbGVnYXRpb25zUmVzcG9uc2UuZW5jb2RlKG8yKS5maW5pc2goKSB9KSB9O1xuXG4vL1xuZnVuY3Rpb24gdigpIHtcbiAgcmV0dXJuIHsgZGVsZWdhdG9yQWRkcmVzczogXCJcIiwgdmFsaWRhdG9yQWRkcmVzczogXCJcIiwgYW1vdW50OiBDb2luLmZyb21QYXJ0aWFsKHt9KSB9O1xufVxudmFyIE1zZ0RlbGVnYXRlID0geyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLk1zZ0RlbGVnYXRlXCIsIGVuY29kZTogKGUyLCBvMiA9IEJpbmFyeVdyaXRlci5jcmVhdGUoKSkgPT4gKFwiXCIgIT09IGUyLmRlbGVnYXRvckFkZHJlc3MgJiYgbzIudWludDMyKDEwKS5zdHJpbmcoZTIuZGVsZWdhdG9yQWRkcmVzcyksIFwiXCIgIT09IGUyLnZhbGlkYXRvckFkZHJlc3MgJiYgbzIudWludDMyKDE4KS5zdHJpbmcoZTIudmFsaWRhdG9yQWRkcmVzcyksIHZvaWQgMCAhPT0gZTIuYW1vdW50ICYmIENvaW4uZW5jb2RlKGUyLmFtb3VudCwgbzIudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpLCBvMiksIGRlY29kZShlMiwgbzIpIHtcbiAgY29uc3QgdDUgPSBlMiBpbnN0YW5jZW9mIEJpbmFyeVJlYWRlciA/IGUyIDogbmV3IEJpbmFyeVJlYWRlcihlMik7XG4gIGxldCBzMyA9IHZvaWQgMCA9PT0gbzIgPyB0NS5sZW4gOiB0NS5wb3MgKyBvMjtcbiAgY29uc3QgaTMgPSB2KCk7XG4gIGZvciAoOyB0NS5wb3MgPCBzMzsgKSB7XG4gICAgY29uc3QgZTMgPSB0NS51aW50MzIoKTtcbiAgICBzd2l0Y2ggKGUzID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGkzLmRlbGVnYXRvckFkZHJlc3MgPSB0NS5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGkzLnZhbGlkYXRvckFkZHJlc3MgPSB0NS5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGkzLmFtb3VudCA9IENvaW4uZGVjb2RlKHQ1LCB0NS51aW50MzIoKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdDUuc2tpcFR5cGUoNyAmIGUzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkzO1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgZGVsZWdhdG9yQWRkcmVzczogaXNTZXQoZTIuZGVsZWdhdG9yQWRkcmVzcykgPyBTdHJpbmcoZTIuZGVsZWdhdG9yQWRkcmVzcykgOiBcIlwiLCB2YWxpZGF0b3JBZGRyZXNzOiBpc1NldChlMi52YWxpZGF0b3JBZGRyZXNzKSA/IFN0cmluZyhlMi52YWxpZGF0b3JBZGRyZXNzKSA6IFwiXCIsIGFtb3VudDogaXNTZXQoZTIuYW1vdW50KSA/IENvaW4uZnJvbUpTT04oZTIuYW1vdW50KSA6IHZvaWQgMCB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IG8yID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLmRlbGVnYXRvckFkZHJlc3MgJiYgKG8yLmRlbGVnYXRvckFkZHJlc3MgPSBlMi5kZWxlZ2F0b3JBZGRyZXNzKSwgdm9pZCAwICE9PSBlMi52YWxpZGF0b3JBZGRyZXNzICYmIChvMi52YWxpZGF0b3JBZGRyZXNzID0gZTIudmFsaWRhdG9yQWRkcmVzcyksIHZvaWQgMCAhPT0gZTIuYW1vdW50ICYmIChvMi5hbW91bnQgPSBlMi5hbW91bnQgPyBDb2luLnRvSlNPTihlMi5hbW91bnQpIDogdm9pZCAwKSwgbzI7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCBvMiA9IHYoKTtcbiAgcmV0dXJuIG8yLmRlbGVnYXRvckFkZHJlc3MgPSBlMi5kZWxlZ2F0b3JBZGRyZXNzID8/IFwiXCIsIG8yLnZhbGlkYXRvckFkZHJlc3MgPSBlMi52YWxpZGF0b3JBZGRyZXNzID8/IFwiXCIsIG8yLmFtb3VudCA9IHZvaWQgMCAhPT0gZTIuYW1vdW50ICYmIG51bGwgIT09IGUyLmFtb3VudCA/IENvaW4uZnJvbVBhcnRpYWwoZTIuYW1vdW50KSA6IHZvaWQgMCwgbzI7XG59LCBmcm9tUHJvdG9Nc2c6IChlMikgPT4gTXNnRGVsZWdhdGUuZGVjb2RlKGUyLnZhbHVlKSwgdG9Qcm90bzogKGUyKSA9PiBNc2dEZWxlZ2F0ZS5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuTXNnRGVsZWdhdGVcIiwgdmFsdWU6IE1zZ0RlbGVnYXRlLmVuY29kZShlMikuZmluaXNoKCkgfSkgfTtcbmZ1bmN0aW9uIHAyKCkge1xuICByZXR1cm4geyBkZWxlZ2F0b3JBZGRyZXNzOiBcIlwiLCB2YWxpZGF0b3JTcmNBZGRyZXNzOiBcIlwiLCB2YWxpZGF0b3JEc3RBZGRyZXNzOiBcIlwiLCBhbW91bnQ6IENvaW4uZnJvbVBhcnRpYWwoe30pIH07XG59XG52YXIgTXNnQmVnaW5SZWRlbGVnYXRlID0geyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLk1zZ0JlZ2luUmVkZWxlZ2F0ZVwiLCBlbmNvZGU6IChlMiwgbzIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+IChcIlwiICE9PSBlMi5kZWxlZ2F0b3JBZGRyZXNzICYmIG8yLnVpbnQzMigxMCkuc3RyaW5nKGUyLmRlbGVnYXRvckFkZHJlc3MpLCBcIlwiICE9PSBlMi52YWxpZGF0b3JTcmNBZGRyZXNzICYmIG8yLnVpbnQzMigxOCkuc3RyaW5nKGUyLnZhbGlkYXRvclNyY0FkZHJlc3MpLCBcIlwiICE9PSBlMi52YWxpZGF0b3JEc3RBZGRyZXNzICYmIG8yLnVpbnQzMigyNikuc3RyaW5nKGUyLnZhbGlkYXRvckRzdEFkZHJlc3MpLCB2b2lkIDAgIT09IGUyLmFtb3VudCAmJiBDb2luLmVuY29kZShlMi5hbW91bnQsIG8yLnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKSwgbzIpLCBkZWNvZGUoZTIsIG8yKSB7XG4gIGNvbnN0IHQ1ID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgczMgPSB2b2lkIDAgPT09IG8yID8gdDUubGVuIDogdDUucG9zICsgbzI7XG4gIGNvbnN0IGkzID0gcDIoKTtcbiAgZm9yICg7IHQ1LnBvcyA8IHMzOyApIHtcbiAgICBjb25zdCBlMyA9IHQ1LnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaTMuZGVsZWdhdG9yQWRkcmVzcyA9IHQ1LnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaTMudmFsaWRhdG9yU3JjQWRkcmVzcyA9IHQ1LnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaTMudmFsaWRhdG9yRHN0QWRkcmVzcyA9IHQ1LnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgaTMuYW1vdW50ID0gQ29pbi5kZWNvZGUodDUsIHQ1LnVpbnQzMigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0NS5za2lwVHlwZSg3ICYgZTMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTM7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyBkZWxlZ2F0b3JBZGRyZXNzOiBpc1NldChlMi5kZWxlZ2F0b3JBZGRyZXNzKSA/IFN0cmluZyhlMi5kZWxlZ2F0b3JBZGRyZXNzKSA6IFwiXCIsIHZhbGlkYXRvclNyY0FkZHJlc3M6IGlzU2V0KGUyLnZhbGlkYXRvclNyY0FkZHJlc3MpID8gU3RyaW5nKGUyLnZhbGlkYXRvclNyY0FkZHJlc3MpIDogXCJcIiwgdmFsaWRhdG9yRHN0QWRkcmVzczogaXNTZXQoZTIudmFsaWRhdG9yRHN0QWRkcmVzcykgPyBTdHJpbmcoZTIudmFsaWRhdG9yRHN0QWRkcmVzcykgOiBcIlwiLCBhbW91bnQ6IGlzU2V0KGUyLmFtb3VudCkgPyBDb2luLmZyb21KU09OKGUyLmFtb3VudCkgOiB2b2lkIDAgfSksIHRvSlNPTihlMikge1xuICBjb25zdCBvMiA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5kZWxlZ2F0b3JBZGRyZXNzICYmIChvMi5kZWxlZ2F0b3JBZGRyZXNzID0gZTIuZGVsZWdhdG9yQWRkcmVzcyksIHZvaWQgMCAhPT0gZTIudmFsaWRhdG9yU3JjQWRkcmVzcyAmJiAobzIudmFsaWRhdG9yU3JjQWRkcmVzcyA9IGUyLnZhbGlkYXRvclNyY0FkZHJlc3MpLCB2b2lkIDAgIT09IGUyLnZhbGlkYXRvckRzdEFkZHJlc3MgJiYgKG8yLnZhbGlkYXRvckRzdEFkZHJlc3MgPSBlMi52YWxpZGF0b3JEc3RBZGRyZXNzKSwgdm9pZCAwICE9PSBlMi5hbW91bnQgJiYgKG8yLmFtb3VudCA9IGUyLmFtb3VudCA/IENvaW4udG9KU09OKGUyLmFtb3VudCkgOiB2b2lkIDApLCBvMjtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IG8yID0gcDIoKTtcbiAgcmV0dXJuIG8yLmRlbGVnYXRvckFkZHJlc3MgPSBlMi5kZWxlZ2F0b3JBZGRyZXNzID8/IFwiXCIsIG8yLnZhbGlkYXRvclNyY0FkZHJlc3MgPSBlMi52YWxpZGF0b3JTcmNBZGRyZXNzID8/IFwiXCIsIG8yLnZhbGlkYXRvckRzdEFkZHJlc3MgPSBlMi52YWxpZGF0b3JEc3RBZGRyZXNzID8/IFwiXCIsIG8yLmFtb3VudCA9IHZvaWQgMCAhPT0gZTIuYW1vdW50ICYmIG51bGwgIT09IGUyLmFtb3VudCA/IENvaW4uZnJvbVBhcnRpYWwoZTIuYW1vdW50KSA6IHZvaWQgMCwgbzI7XG59LCBmcm9tUHJvdG9Nc2c6IChlMikgPT4gTXNnQmVnaW5SZWRlbGVnYXRlLmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gTXNnQmVnaW5SZWRlbGVnYXRlLmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5Nc2dCZWdpblJlZGVsZWdhdGVcIiwgdmFsdWU6IE1zZ0JlZ2luUmVkZWxlZ2F0ZS5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG5mdW5jdGlvbiBBMigpIHtcbiAgcmV0dXJuIHsgZGVsZWdhdG9yQWRkcmVzczogXCJcIiwgdmFsaWRhdG9yQWRkcmVzczogXCJcIiwgYW1vdW50OiBDb2luLmZyb21QYXJ0aWFsKHt9KSB9O1xufVxudmFyIE1zZ1VuZGVsZWdhdGUgPSB7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuTXNnVW5kZWxlZ2F0ZVwiLCBlbmNvZGU6IChlMiwgbzIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+IChcIlwiICE9PSBlMi5kZWxlZ2F0b3JBZGRyZXNzICYmIG8yLnVpbnQzMigxMCkuc3RyaW5nKGUyLmRlbGVnYXRvckFkZHJlc3MpLCBcIlwiICE9PSBlMi52YWxpZGF0b3JBZGRyZXNzICYmIG8yLnVpbnQzMigxOCkuc3RyaW5nKGUyLnZhbGlkYXRvckFkZHJlc3MpLCB2b2lkIDAgIT09IGUyLmFtb3VudCAmJiBDb2luLmVuY29kZShlMi5hbW91bnQsIG8yLnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKSwgbzIpLCBkZWNvZGUoZTIsIG8yKSB7XG4gIGNvbnN0IHQ1ID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgczMgPSB2b2lkIDAgPT09IG8yID8gdDUubGVuIDogdDUucG9zICsgbzI7XG4gIGNvbnN0IGkzID0gQTIoKTtcbiAgZm9yICg7IHQ1LnBvcyA8IHMzOyApIHtcbiAgICBjb25zdCBlMyA9IHQ1LnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaTMuZGVsZWdhdG9yQWRkcmVzcyA9IHQ1LnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaTMudmFsaWRhdG9yQWRkcmVzcyA9IHQ1LnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaTMuYW1vdW50ID0gQ29pbi5kZWNvZGUodDUsIHQ1LnVpbnQzMigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0NS5za2lwVHlwZSg3ICYgZTMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTM7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyBkZWxlZ2F0b3JBZGRyZXNzOiBpc1NldChlMi5kZWxlZ2F0b3JBZGRyZXNzKSA/IFN0cmluZyhlMi5kZWxlZ2F0b3JBZGRyZXNzKSA6IFwiXCIsIHZhbGlkYXRvckFkZHJlc3M6IGlzU2V0KGUyLnZhbGlkYXRvckFkZHJlc3MpID8gU3RyaW5nKGUyLnZhbGlkYXRvckFkZHJlc3MpIDogXCJcIiwgYW1vdW50OiBpc1NldChlMi5hbW91bnQpID8gQ29pbi5mcm9tSlNPTihlMi5hbW91bnQpIDogdm9pZCAwIH0pLCB0b0pTT04oZTIpIHtcbiAgY29uc3QgbzIgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gZTIuZGVsZWdhdG9yQWRkcmVzcyAmJiAobzIuZGVsZWdhdG9yQWRkcmVzcyA9IGUyLmRlbGVnYXRvckFkZHJlc3MpLCB2b2lkIDAgIT09IGUyLnZhbGlkYXRvckFkZHJlc3MgJiYgKG8yLnZhbGlkYXRvckFkZHJlc3MgPSBlMi52YWxpZGF0b3JBZGRyZXNzKSwgdm9pZCAwICE9PSBlMi5hbW91bnQgJiYgKG8yLmFtb3VudCA9IGUyLmFtb3VudCA/IENvaW4udG9KU09OKGUyLmFtb3VudCkgOiB2b2lkIDApLCBvMjtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IG8yID0gQTIoKTtcbiAgcmV0dXJuIG8yLmRlbGVnYXRvckFkZHJlc3MgPSBlMi5kZWxlZ2F0b3JBZGRyZXNzID8/IFwiXCIsIG8yLnZhbGlkYXRvckFkZHJlc3MgPSBlMi52YWxpZGF0b3JBZGRyZXNzID8/IFwiXCIsIG8yLmFtb3VudCA9IHZvaWQgMCAhPT0gZTIuYW1vdW50ICYmIG51bGwgIT09IGUyLmFtb3VudCA/IENvaW4uZnJvbVBhcnRpYWwoZTIuYW1vdW50KSA6IHZvaWQgMCwgbzI7XG59LCBmcm9tUHJvdG9Nc2c6IChlMikgPT4gTXNnVW5kZWxlZ2F0ZS5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IE1zZ1VuZGVsZWdhdGUuZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLk1zZ1VuZGVsZWdhdGVcIiwgdmFsdWU6IE1zZ1VuZGVsZWdhdGUuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xuZnVuY3Rpb24gTTIoKSB7XG4gIHJldHVybiB7IGNvbXBsZXRpb25UaW1lOiBUaW1lc3RhbXAuZnJvbVBhcnRpYWwoe30pIH07XG59XG52YXIgTXNnVW5kZWxlZ2F0ZVJlc3BvbnNlID0geyB0eXBlVXJsOiBcIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLk1zZ1VuZGVsZWdhdGVSZXNwb25zZVwiLCBlbmNvZGU6IChlMiwgbzIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+ICh2b2lkIDAgIT09IGUyLmNvbXBsZXRpb25UaW1lICYmIFRpbWVzdGFtcC5lbmNvZGUoZTIuY29tcGxldGlvblRpbWUsIG8yLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKSwgbzIpLCBkZWNvZGUoZTIsIG8yKSB7XG4gIGNvbnN0IHQ1ID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgczMgPSB2b2lkIDAgPT09IG8yID8gdDUubGVuIDogdDUucG9zICsgbzI7XG4gIGNvbnN0IHI1ID0gTTIoKTtcbiAgZm9yICg7IHQ1LnBvcyA8IHMzOyApIHtcbiAgICBjb25zdCBlMyA9IHQ1LnVpbnQzMigpO1xuICAgIGlmIChlMyA+Pj4gMyA9PSAxKSByNS5jb21wbGV0aW9uVGltZSA9IFRpbWVzdGFtcC5kZWNvZGUodDUsIHQ1LnVpbnQzMigpKTtcbiAgICBlbHNlIHQ1LnNraXBUeXBlKDcgJiBlMyk7XG4gIH1cbiAgcmV0dXJuIHI1O1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgY29tcGxldGlvblRpbWU6IGlzU2V0KGUyLmNvbXBsZXRpb25UaW1lKSA/IGZyb21Kc29uVGltZXN0YW1wKGUyLmNvbXBsZXRpb25UaW1lKSA6IHZvaWQgMCB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IG8yID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLmNvbXBsZXRpb25UaW1lICYmIChvMi5jb21wbGV0aW9uVGltZSA9IGZyb21UaW1lc3RhbXAoZTIuY29tcGxldGlvblRpbWUpLnRvSVNPU3RyaW5nKCkpLCBvMjtcbn0sIGZyb21QYXJ0aWFsKGUyKSB7XG4gIGNvbnN0IG8yID0gTTIoKTtcbiAgcmV0dXJuIG8yLmNvbXBsZXRpb25UaW1lID0gdm9pZCAwICE9PSBlMi5jb21wbGV0aW9uVGltZSAmJiBudWxsICE9PSBlMi5jb21wbGV0aW9uVGltZSA/IFRpbWVzdGFtcC5mcm9tUGFydGlhbChlMi5jb21wbGV0aW9uVGltZSkgOiB2b2lkIDAsIG8yO1xufSwgZnJvbVByb3RvTXNnOiAoZTIpID0+IE1zZ1VuZGVsZWdhdGVSZXNwb25zZS5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IE1zZ1VuZGVsZWdhdGVSZXNwb25zZS5lbmNvZGUoZTIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAoZTIpID0+ICh7IHR5cGVVcmw6IFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuTXNnVW5kZWxlZ2F0ZVJlc3BvbnNlXCIsIHZhbHVlOiBNc2dVbmRlbGVnYXRlUmVzcG9uc2UuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xuXG4vL1xuZnVuY3Rpb24gbDIoKSB7XG4gIHJldHVybiB7IHJldmlzaW9uTnVtYmVyOiBCaWdJbnQoMCksIHJldmlzaW9uSGVpZ2h0OiBCaWdJbnQoMCkgfTtcbn1cbnZhciBIZWlnaHQgPSB7IHR5cGVVcmw6IFwiL2liYy5jb3JlLmNsaWVudC52MS5IZWlnaHRcIiwgZW5jb2RlOiAodDUsIGUyID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAodDUucmV2aXNpb25OdW1iZXIgIT09IEJpZ0ludCgwKSAmJiBlMi51aW50MzIoOCkudWludDY0KHQ1LnJldmlzaW9uTnVtYmVyKSwgdDUucmV2aXNpb25IZWlnaHQgIT09IEJpZ0ludCgwKSAmJiBlMi51aW50MzIoMTYpLnVpbnQ2NCh0NS5yZXZpc2lvbkhlaWdodCksIGUyKSwgZGVjb2RlKHQ1LCBlMikge1xuICBjb25zdCBuMiA9IHQ1IGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gdDUgOiBuZXcgQmluYXJ5UmVhZGVyKHQ1KTtcbiAgbGV0IG8yID0gdm9pZCAwID09PSBlMiA/IG4yLmxlbiA6IG4yLnBvcyArIGUyO1xuICBjb25zdCBzMyA9IGwyKCk7XG4gIGZvciAoOyBuMi5wb3MgPCBvMjsgKSB7XG4gICAgY29uc3QgdDYgPSBuMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKHQ2ID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHMzLnJldmlzaW9uTnVtYmVyID0gbjIudWludDY0KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBzMy5yZXZpc2lvbkhlaWdodCA9IG4yLnVpbnQ2NCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG4yLnNraXBUeXBlKDcgJiB0Nik7XG4gICAgfVxuICB9XG4gIHJldHVybiBzMztcbn0sIGZyb21KU09OOiAodDUpID0+ICh7IHJldmlzaW9uTnVtYmVyOiBpc1NldCh0NS5yZXZpc2lvbk51bWJlcikgPyBCaWdJbnQodDUucmV2aXNpb25OdW1iZXIudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIHJldmlzaW9uSGVpZ2h0OiBpc1NldCh0NS5yZXZpc2lvbkhlaWdodCkgPyBCaWdJbnQodDUucmV2aXNpb25IZWlnaHQudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCkgfSksIHRvSlNPTih0NSkge1xuICBjb25zdCBlMiA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSB0NS5yZXZpc2lvbk51bWJlciAmJiAoZTIucmV2aXNpb25OdW1iZXIgPSAodDUucmV2aXNpb25OdW1iZXIgfHwgQmlnSW50KDApKS50b1N0cmluZygpKSwgdm9pZCAwICE9PSB0NS5yZXZpc2lvbkhlaWdodCAmJiAoZTIucmV2aXNpb25IZWlnaHQgPSAodDUucmV2aXNpb25IZWlnaHQgfHwgQmlnSW50KDApKS50b1N0cmluZygpKSwgZTI7XG59LCBmcm9tUGFydGlhbCh0NSkge1xuICBjb25zdCBlMiA9IGwyKCk7XG4gIHJldHVybiBlMi5yZXZpc2lvbk51bWJlciA9IHZvaWQgMCAhPT0gdDUucmV2aXNpb25OdW1iZXIgJiYgbnVsbCAhPT0gdDUucmV2aXNpb25OdW1iZXIgPyBCaWdJbnQodDUucmV2aXNpb25OdW1iZXIudG9TdHJpbmcoKSkgOiBCaWdJbnQoMCksIGUyLnJldmlzaW9uSGVpZ2h0ID0gdm9pZCAwICE9PSB0NS5yZXZpc2lvbkhlaWdodCAmJiBudWxsICE9PSB0NS5yZXZpc2lvbkhlaWdodCA/IEJpZ0ludCh0NS5yZXZpc2lvbkhlaWdodC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgZTI7XG59LCBmcm9tUHJvdG9Nc2c6ICh0NSkgPT4gSGVpZ2h0LmRlY29kZSh0NS52YWx1ZSksIHRvUHJvdG86ICh0NSkgPT4gSGVpZ2h0LmVuY29kZSh0NSkuZmluaXNoKCksIHRvUHJvdG9Nc2c6ICh0NSkgPT4gKHsgdHlwZVVybDogXCIvaWJjLmNvcmUuY2xpZW50LnYxLkhlaWdodFwiLCB2YWx1ZTogSGVpZ2h0LmVuY29kZSh0NSkuZmluaXNoKCkgfSkgfTtcblxuLy9cbmZ1bmN0aW9uIGkoKSB7XG4gIHJldHVybiB7IHNvdXJjZVBvcnQ6IFwiXCIsIHNvdXJjZUNoYW5uZWw6IFwiXCIsIHRva2VuOiBDb2luLmZyb21QYXJ0aWFsKHt9KSwgc2VuZGVyOiBcIlwiLCByZWNlaXZlcjogXCJcIiwgdGltZW91dEhlaWdodDogSGVpZ2h0LmZyb21QYXJ0aWFsKHt9KSwgdGltZW91dFRpbWVzdGFtcDogQmlnSW50KDApLCBtZW1vOiBcIlwiIH07XG59XG52YXIgTXNnVHJhbnNmZXIgPSB7IHR5cGVVcmw6IFwiL2liYy5hcHBsaWNhdGlvbnMudHJhbnNmZXIudjEuTXNnVHJhbnNmZXJcIiwgZW5jb2RlOiAobzIsIG4yID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAoXCJcIiAhPT0gbzIuc291cmNlUG9ydCAmJiBuMi51aW50MzIoMTApLnN0cmluZyhvMi5zb3VyY2VQb3J0KSwgXCJcIiAhPT0gbzIuc291cmNlQ2hhbm5lbCAmJiBuMi51aW50MzIoMTgpLnN0cmluZyhvMi5zb3VyY2VDaGFubmVsKSwgdm9pZCAwICE9PSBvMi50b2tlbiAmJiBDb2luLmVuY29kZShvMi50b2tlbiwgbjIudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpLCBcIlwiICE9PSBvMi5zZW5kZXIgJiYgbjIudWludDMyKDM0KS5zdHJpbmcobzIuc2VuZGVyKSwgXCJcIiAhPT0gbzIucmVjZWl2ZXIgJiYgbjIudWludDMyKDQyKS5zdHJpbmcobzIucmVjZWl2ZXIpLCB2b2lkIDAgIT09IG8yLnRpbWVvdXRIZWlnaHQgJiYgSGVpZ2h0LmVuY29kZShvMi50aW1lb3V0SGVpZ2h0LCBuMi51aW50MzIoNTApLmZvcmsoKSkubGRlbGltKCksIG8yLnRpbWVvdXRUaW1lc3RhbXAgIT09IEJpZ0ludCgwKSAmJiBuMi51aW50MzIoNTYpLnVpbnQ2NChvMi50aW1lb3V0VGltZXN0YW1wKSwgXCJcIiAhPT0gbzIubWVtbyAmJiBuMi51aW50MzIoNjYpLnN0cmluZyhvMi5tZW1vKSwgbjIpLCBkZWNvZGUocjUsIG4yKSB7XG4gIGNvbnN0IHMzID0gcjUgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyByNSA6IG5ldyBCaW5hcnlSZWFkZXIocjUpO1xuICBsZXQgbTIgPSB2b2lkIDAgPT09IG4yID8gczMubGVuIDogczMucG9zICsgbjI7XG4gIGNvbnN0IGMyID0gaSgpO1xuICBmb3IgKDsgczMucG9zIDwgbTI7ICkge1xuICAgIGNvbnN0IG8yID0gczMudWludDMyKCk7XG4gICAgc3dpdGNoIChvMiA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBjMi5zb3VyY2VQb3J0ID0gczMuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBjMi5zb3VyY2VDaGFubmVsID0gczMuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBjMi50b2tlbiA9IENvaW4uZGVjb2RlKHMzLCBzMy51aW50MzIoKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICBjMi5zZW5kZXIgPSBzMy5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDU6XG4gICAgICAgIGMyLnJlY2VpdmVyID0gczMuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA2OlxuICAgICAgICBjMi50aW1lb3V0SGVpZ2h0ID0gSGVpZ2h0LmRlY29kZShzMywgczMudWludDMyKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNzpcbiAgICAgICAgYzIudGltZW91dFRpbWVzdGFtcCA9IHMzLnVpbnQ2NCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgODpcbiAgICAgICAgYzIubWVtbyA9IHMzLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHMzLnNraXBUeXBlKDcgJiBvMik7XG4gICAgfVxuICB9XG4gIHJldHVybiBjMjtcbn0sIGZyb21KU09OOiAobzIpID0+ICh7IHNvdXJjZVBvcnQ6IGlzU2V0KG8yLnNvdXJjZVBvcnQpID8gU3RyaW5nKG8yLnNvdXJjZVBvcnQpIDogXCJcIiwgc291cmNlQ2hhbm5lbDogaXNTZXQobzIuc291cmNlQ2hhbm5lbCkgPyBTdHJpbmcobzIuc291cmNlQ2hhbm5lbCkgOiBcIlwiLCB0b2tlbjogaXNTZXQobzIudG9rZW4pID8gQ29pbi5mcm9tSlNPTihvMi50b2tlbikgOiB2b2lkIDAsIHNlbmRlcjogaXNTZXQobzIuc2VuZGVyKSA/IFN0cmluZyhvMi5zZW5kZXIpIDogXCJcIiwgcmVjZWl2ZXI6IGlzU2V0KG8yLnJlY2VpdmVyKSA/IFN0cmluZyhvMi5yZWNlaXZlcikgOiBcIlwiLCB0aW1lb3V0SGVpZ2h0OiBpc1NldChvMi50aW1lb3V0SGVpZ2h0KSA/IEhlaWdodC5mcm9tSlNPTihvMi50aW1lb3V0SGVpZ2h0KSA6IHZvaWQgMCwgdGltZW91dFRpbWVzdGFtcDogaXNTZXQobzIudGltZW91dFRpbWVzdGFtcCkgPyBCaWdJbnQobzIudGltZW91dFRpbWVzdGFtcC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgbWVtbzogaXNTZXQobzIubWVtbykgPyBTdHJpbmcobzIubWVtbykgOiBcIlwiIH0pLCB0b0pTT04obzIpIHtcbiAgY29uc3QgcjUgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gbzIuc291cmNlUG9ydCAmJiAocjUuc291cmNlUG9ydCA9IG8yLnNvdXJjZVBvcnQpLCB2b2lkIDAgIT09IG8yLnNvdXJjZUNoYW5uZWwgJiYgKHI1LnNvdXJjZUNoYW5uZWwgPSBvMi5zb3VyY2VDaGFubmVsKSwgdm9pZCAwICE9PSBvMi50b2tlbiAmJiAocjUudG9rZW4gPSBvMi50b2tlbiA/IENvaW4udG9KU09OKG8yLnRva2VuKSA6IHZvaWQgMCksIHZvaWQgMCAhPT0gbzIuc2VuZGVyICYmIChyNS5zZW5kZXIgPSBvMi5zZW5kZXIpLCB2b2lkIDAgIT09IG8yLnJlY2VpdmVyICYmIChyNS5yZWNlaXZlciA9IG8yLnJlY2VpdmVyKSwgdm9pZCAwICE9PSBvMi50aW1lb3V0SGVpZ2h0ICYmIChyNS50aW1lb3V0SGVpZ2h0ID0gbzIudGltZW91dEhlaWdodCA/IEhlaWdodC50b0pTT04obzIudGltZW91dEhlaWdodCkgOiB2b2lkIDApLCB2b2lkIDAgIT09IG8yLnRpbWVvdXRUaW1lc3RhbXAgJiYgKHI1LnRpbWVvdXRUaW1lc3RhbXAgPSAobzIudGltZW91dFRpbWVzdGFtcCB8fCBCaWdJbnQoMCkpLnRvU3RyaW5nKCkpLCB2b2lkIDAgIT09IG8yLm1lbW8gJiYgKHI1Lm1lbW8gPSBvMi5tZW1vKSwgcjU7XG59LCBmcm9tUGFydGlhbChvMikge1xuICBjb25zdCByNSA9IGkoKTtcbiAgcmV0dXJuIHI1LnNvdXJjZVBvcnQgPSBvMi5zb3VyY2VQb3J0ID8/IFwiXCIsIHI1LnNvdXJjZUNoYW5uZWwgPSBvMi5zb3VyY2VDaGFubmVsID8/IFwiXCIsIHI1LnRva2VuID0gdm9pZCAwICE9PSBvMi50b2tlbiAmJiBudWxsICE9PSBvMi50b2tlbiA/IENvaW4uZnJvbVBhcnRpYWwobzIudG9rZW4pIDogdm9pZCAwLCByNS5zZW5kZXIgPSBvMi5zZW5kZXIgPz8gXCJcIiwgcjUucmVjZWl2ZXIgPSBvMi5yZWNlaXZlciA/PyBcIlwiLCByNS50aW1lb3V0SGVpZ2h0ID0gdm9pZCAwICE9PSBvMi50aW1lb3V0SGVpZ2h0ICYmIG51bGwgIT09IG8yLnRpbWVvdXRIZWlnaHQgPyBIZWlnaHQuZnJvbVBhcnRpYWwobzIudGltZW91dEhlaWdodCkgOiB2b2lkIDAsIHI1LnRpbWVvdXRUaW1lc3RhbXAgPSB2b2lkIDAgIT09IG8yLnRpbWVvdXRUaW1lc3RhbXAgJiYgbnVsbCAhPT0gbzIudGltZW91dFRpbWVzdGFtcCA/IEJpZ0ludChvMi50aW1lb3V0VGltZXN0YW1wLnRvU3RyaW5nKCkpIDogQmlnSW50KDApLCByNS5tZW1vID0gbzIubWVtbyA/PyBcIlwiLCByNTtcbn0sIGZyb21Qcm90b01zZzogKGUyKSA9PiBNc2dUcmFuc2Zlci5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IE1zZ1RyYW5zZmVyLmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvaWJjLmFwcGxpY2F0aW9ucy50cmFuc2Zlci52MS5Nc2dUcmFuc2ZlclwiLCB2YWx1ZTogTXNnVHJhbnNmZXIuZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xuXG4vL1xudmFyIGNvZXJjZURlbm9tID0gKGNoYWluSHViLCBkZW5vbUFyZykgPT4ge1xuICBpZiAodHlwZW9mIGRlbm9tQXJnID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGRlbm9tQXJnO1xuICB9XG4gIGNvbnN0IGRlbm9tID0gY2hhaW5IdWIuZ2V0RGVub20oZGVub21BcmcpO1xuICBpZiAoIWRlbm9tKSB7XG4gICAgdGhyb3cgbWFrZUVycm9yKGBObyBkZW5vbSBmb3IgYnJhbmQgJHtkZW5vbUFyZ31gKTtcbiAgfVxuICByZXR1cm4gZGVub207XG59O1xudmFyIGNvZXJjZURlbm9tQW1vdW50ID0gKGNoYWluSHViLCBhbW91bnQpID0+IHtcbiAgaWYgKFwiZGVub21cIiBpbiBhbW91bnQpIHtcbiAgICByZXR1cm4gYW1vdW50O1xuICB9XG4gIGNvbnN0IGRlbm9tID0gY29lcmNlRGVub20oY2hhaW5IdWIsIGFtb3VudC5icmFuZCk7XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIGRlbm9tLFxuICAgIHZhbHVlOiBhbW91bnQudmFsdWVcbiAgfSk7XG59O1xudmFyIGNvZXJjZUNvaW4gPSAoY2hhaW5IdWIsIGFtb3VudCkgPT4ge1xuICBjb25zdCBkZW5vbSA9IFwiZGVub21cIiBpbiBhbW91bnQgPyBhbW91bnQuZGVub20gOiBjb2VyY2VEZW5vbShjaGFpbkh1YiwgYW1vdW50LmJyYW5kKTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgZGVub20sXG4gICAgYW1vdW50OiBTdHJpbmcoYW1vdW50LnZhbHVlKVxuICB9KTtcbn07XG5cbi8vXG52YXIgbWF4Q2xvY2tTa2V3ID0gMTBuICogNjBuO1xudmFyIHRyeURlY29kZVJlc3BvbnNlID0gKGFja1N0ciwgZnJvbVByb3RvTXNnKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgYW55ID0gQW55LmRlY29kZShkZWNvZGVCYXNlNjQoYWNrU3RyKSk7XG4gICAgY29uc3QgcHJvdG9Nc2cgPSBBbnkuZGVjb2RlKGFueS52YWx1ZSk7XG4gICAgY29uc3QgbXNnID0gZnJvbVByb3RvTXNnKHByb3RvTXNnKTtcbiAgICByZXR1cm4gbXNnO1xuICB9IGNhdGNoIChjYXVzZSkge1xuICAgIHRocm93IG1ha2VFcnJvcihgYmFkIHJlc3BvbnNlOiAke2Fja1N0cn1gLCB2b2lkIDAsIHsgY2F1c2UgfSk7XG4gIH1cbn07XG52YXIgdG9EZW5vbUFtb3VudCA9IChjMikgPT4gKHsgZGVub206IGMyLmRlbm9tLCB2YWx1ZTogQmlnSW50KGMyLmFtb3VudCkgfSk7XG52YXIgdG9UcnVuY2F0ZWREZW5vbUFtb3VudCA9IChjMikgPT4gKHtcbiAgZGVub206IGMyLmRlbm9tLFxuICB2YWx1ZTogQmlnSW50KGMyLmFtb3VudC5zcGxpdChcIi5cIilbMF0pXG59KTtcbnZhciB0b0Nvc21vc1ZhbGlkYXRvckFkZHJlc3MgPSAocjUsIGNoYWluSWQpID0+ICh7XG4gIGVuY29kaW5nOiBcImJlY2gzMlwiLFxuICB2YWx1ZTogKFxuICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICByNS52YWxpZGF0b3JBZGRyZXNzXG4gICksXG4gIGNoYWluSWRcbn0pO1xudmFyIHRvQ29zbW9zRGVsZWdhdGlvblJlc3BvbnNlID0gKHsgY2hhaW5JZCB9LCByNSkgPT4gKHtcbiAgZGVsZWdhdG9yOiB7XG4gICAgY2hhaW5JZCxcbiAgICBlbmNvZGluZzogXCJiZWNoMzJcIixcbiAgICB2YWx1ZTogKFxuICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgcjUuZGVsZWdhdGlvbi5kZWxlZ2F0b3JBZGRyZXNzXG4gICAgKVxuICB9LFxuICB2YWxpZGF0b3I6IHRvQ29zbW9zVmFsaWRhdG9yQWRkcmVzcyhyNS5kZWxlZ2F0aW9uLCBjaGFpbklkKSxcbiAgYW1vdW50OiB0b0Rlbm9tQW1vdW50KHI1LmJhbGFuY2UpXG59KTtcblxuLy9cbnZhciBlbXB0eSA9IDBuO1xudmFyIG5hdE1hdGhIZWxwZXJzID0gaGFyZGVuKHtcbiAgZG9Db2VyY2U6IChuYXQpID0+IHtcbiAgICBhc3NlcnQudHlwZW9mKG5hdCwgXCJiaWdpbnRcIik7XG4gICAgaXNOYXQobmF0KSB8fCB0aHJvd1JlZGFjdGVkYHZhbHVlICR7bmF0fSBtdXN0IGJlIGEgbmF0dXJhbCBudW1iZXJgO1xuICAgIHJldHVybiBOYXQobmF0KTtcbiAgfSxcbiAgZG9NYWtlRW1wdHk6ICgpID0+IGVtcHR5LFxuICBkb0lzRW1wdHk6IChuYXQpID0+IG5hdCA9PT0gZW1wdHksXG4gIGRvSXNHVEU6IChsZWZ0LCByaWdodCkgPT4gbGVmdCA+PSByaWdodCxcbiAgZG9Jc0VxdWFsOiAobGVmdCwgcmlnaHQpID0+IGxlZnQgPT09IHJpZ2h0LFxuICAvL1xuICBkb0FkZDogKGxlZnQsIHJpZ2h0KSA9PiBsZWZ0ICsgcmlnaHQsXG4gIGRvU3VidHJhY3Q6IChsZWZ0LCByaWdodCkgPT4gTmF0KGxlZnQgLSByaWdodClcbn0pO1xuXG4vL1xudmFyIGVtcHR5MiA9IGhhcmRlbihbXSk7XG52YXIgc2V0TWF0aEhlbHBlcnMgPSBoYXJkZW4oe1xuICBkb0NvZXJjZTogKGxpc3QpID0+IHtcbiAgICBsaXN0ID0gY29lcmNlVG9FbGVtZW50cyhsaXN0KTtcbiAgICBhc3NlcnRLZXkobGlzdCk7XG4gICAgcmV0dXJuIGxpc3Q7XG4gIH0sXG4gIGRvTWFrZUVtcHR5OiAoKSA9PiBlbXB0eTIsXG4gIGRvSXNFbXB0eTogKGxpc3QpID0+IHBhc3NTdHlsZU9mKGxpc3QpID09PSBcImNvcHlBcnJheVwiICYmIGxpc3QubGVuZ3RoID09PSAwLFxuICBkb0lzR1RFOiBlbGVtZW50c0lzU3VwZXJzZXQsXG4gIGRvSXNFcXVhbDogKHgsIHkpID0+IGVsZW1lbnRzQ29tcGFyZSh4LCB5KSA9PT0gMCxcbiAgZG9BZGQ6IGVsZW1lbnRzRGlzam9pbnRVbmlvbixcbiAgZG9TdWJ0cmFjdDogZWxlbWVudHNEaXNqb2ludFN1YnRyYWN0XG59KTtcblxuLy9cbnZhciBlbXB0eTMgPSBtYWtlQ29weVNldChbXSk7XG52YXIgY29weVNldE1hdGhIZWxwZXJzID0gaGFyZGVuKHtcbiAgZG9Db2VyY2U6IChzZXQpID0+IHtcbiAgICBtdXN0TWF0Y2gyKHNldCwgTS5zZXQoKSwgXCJzZXQgb2YgYW1vdW50XCIpO1xuICAgIHJldHVybiBzZXQ7XG4gIH0sXG4gIGRvTWFrZUVtcHR5OiAoKSA9PiBlbXB0eTMsXG4gIGRvSXNFbXB0eTogKHNldCkgPT4gZ2V0Q29weVNldEtleXMoc2V0KS5sZW5ndGggPT09IDAsXG4gIGRvSXNHVEU6IHNldElzU3VwZXJzZXQsXG4gIGRvSXNFcXVhbDoga2V5RVEsXG4gIGRvQWRkOiBzZXREaXNqb2ludFVuaW9uLFxuICBkb1N1YnRyYWN0OiBzZXREaXNqb2ludFN1YnRyYWN0XG59KTtcblxuLy9cbnZhciBlbXB0eTQgPSBtYWtlQ29weUJhZyhbXSk7XG52YXIgY29weUJhZ01hdGhIZWxwZXJzID0gaGFyZGVuKHtcbiAgZG9Db2VyY2U6IChiYWcpID0+IHtcbiAgICBtdXN0TWF0Y2gyKGJhZywgTS5iYWcoKSwgXCJiYWcgb2YgYW1vdW50XCIpO1xuICAgIHJldHVybiBiYWc7XG4gIH0sXG4gIGRvTWFrZUVtcHR5OiAoKSA9PiBlbXB0eTQsXG4gIGRvSXNFbXB0eTogKGJhZykgPT4gZ2V0Q29weUJhZ0VudHJpZXMoYmFnKS5sZW5ndGggPT09IDAsXG4gIGRvSXNHVEU6IGJhZ0lzU3VwZXJiYWcsXG4gIGRvSXNFcXVhbDoga2V5RVEsXG4gIGRvQWRkOiBiYWdVbmlvbixcbiAgZG9TdWJ0cmFjdDogYmFnRGlzam9pbnRTdWJ0cmFjdFxufSk7XG5cbi8vXG52YXIgQXNzZXRLaW5kID0gKFxuICAvKiAgICAgICAgICAgICAgICAqL1xuICB7XG4gICAgTkFUOiBcIm5hdFwiLFxuICAgIFNFVDogXCJzZXRcIixcbiAgICBDT1BZX1NFVDogXCJjb3B5U2V0XCIsXG4gICAgQ09QWV9CQUc6IFwiY29weUJhZ1wiXG4gIH1cbik7XG5oYXJkZW4oQXNzZXRLaW5kKTtcbnZhciBhc3NldEtpbmROYW1lcyA9IGhhcmRlbihPYmplY3QudmFsdWVzKEFzc2V0S2luZCkuc29ydCgpKTtcbnZhciBhc3NlcnRBc3NldEtpbmQgPSAoYWxsZWdlZEFLKSA9PiB7XG4gIGFzc2V0S2luZE5hbWVzLmluY2x1ZGVzKGFsbGVnZWRBSykgfHwgdGhyb3dSZWRhY3RlZGBUaGUgYXNzZXRLaW5kICR7YWxsZWdlZEFLfSBtdXN0IGJlIG9uZSBvZiAke3F1b3RlKGFzc2V0S2luZE5hbWVzKX1gO1xufTtcbmhhcmRlbihhc3NlcnRBc3NldEtpbmQpO1xudmFyIGhlbHBlcnMgPSB7XG4gIG5hdDogbmF0TWF0aEhlbHBlcnMsXG4gIHNldDogc2V0TWF0aEhlbHBlcnMsXG4gIGNvcHlTZXQ6IGNvcHlTZXRNYXRoSGVscGVycyxcbiAgY29weUJhZzogY29weUJhZ01hdGhIZWxwZXJzXG59O1xudmFyIGFzc2VydFZhbHVlR2V0QXNzZXRLaW5kID0gKHZhbHVlKSA9PiB7XG4gIGNvbnN0IHBhc3NTdHlsZSA9IHBhc3NTdHlsZU9mKHZhbHVlKTtcbiAgaWYgKHBhc3NTdHlsZSA9PT0gXCJiaWdpbnRcIikge1xuICAgIHJldHVybiBcIm5hdFwiO1xuICB9XG4gIGlmIChwYXNzU3R5bGUgPT09IFwiY29weUFycmF5XCIpIHtcbiAgICByZXR1cm4gXCJzZXRcIjtcbiAgfVxuICBpZiAobWF0Y2hlcyh2YWx1ZSwgTS5zZXQoKSkpIHtcbiAgICByZXR1cm4gXCJjb3B5U2V0XCI7XG4gIH1cbiAgaWYgKG1hdGNoZXModmFsdWUsIE0uYmFnKCkpKSB7XG4gICAgcmV0dXJuIFwiY29weUJhZ1wiO1xuICB9XG4gIHRocm93IHRocm93UmVkYWN0ZWRgdmFsdWUgJHt2YWx1ZX0gbXVzdCBiZSBhIGJpZ2ludCwgY29weVNldCwgY29weUJhZywgb3IgYW4gYXJyYXksIG5vdCAke3F1b3RlKFxuICAgIHBhc3NTdHlsZVxuICApfWA7XG59O1xudmFyIGFzc2VydFZhbHVlR2V0SGVscGVycyA9ICh2YWx1ZSkgPT4gKFxuICAvL1xuICBoZWxwZXJzW2Fzc2VydFZhbHVlR2V0QXNzZXRLaW5kKHZhbHVlKV1cbik7XG52YXIgb3B0aW9uYWxCcmFuZENoZWNrID0gKGFsbGVnZWRCcmFuZCwgYnJhbmQpID0+IHtcbiAgaWYgKGJyYW5kICE9PSB2b2lkIDApIHtcbiAgICBhc3NlcnRSZW1vdGFibGUoYnJhbmQsIFwiYnJhbmRcIik7XG4gICAgYWxsZWdlZEJyYW5kID09PSBicmFuZCB8fCB0aHJvd1JlZGFjdGVkYGFtb3VudCdzIGJyYW5kICR7cXVvdGUoYWxsZWdlZEJyYW5kKX0gZGlkIG5vdCBtYXRjaCBleHBlY3RlZCBicmFuZCAke3F1b3RlKFxuICAgICAgYnJhbmRcbiAgICApfWA7XG4gIH1cbn07XG52YXIgY2hlY2tMUkFuZEdldEhlbHBlcnMgPSAobGVmdEFtb3VudCwgcmlnaHRBbW91bnQsIGJyYW5kID0gdm9pZCAwKSA9PiB7XG4gIGFzc2VydFJlY29yZChsZWZ0QW1vdW50LCBcImxlZnRBbW91bnRcIik7XG4gIGFzc2VydFJlY29yZChyaWdodEFtb3VudCwgXCJyaWdodEFtb3VudFwiKTtcbiAgY29uc3QgeyB2YWx1ZTogbGVmdFZhbHVlLCBicmFuZDogbGVmdEJyYW5kIH0gPSBsZWZ0QW1vdW50O1xuICBjb25zdCB7IHZhbHVlOiByaWdodFZhbHVlLCBicmFuZDogcmlnaHRCcmFuZCB9ID0gcmlnaHRBbW91bnQ7XG4gIGFzc2VydFJlbW90YWJsZShsZWZ0QnJhbmQsIFwibGVmdEJyYW5kXCIpO1xuICBhc3NlcnRSZW1vdGFibGUocmlnaHRCcmFuZCwgXCJyaWdodEJyYW5kXCIpO1xuICBvcHRpb25hbEJyYW5kQ2hlY2sobGVmdEJyYW5kLCBicmFuZCk7XG4gIG9wdGlvbmFsQnJhbmRDaGVjayhyaWdodEJyYW5kLCBicmFuZCk7XG4gIGxlZnRCcmFuZCA9PT0gcmlnaHRCcmFuZCB8fCB0aHJvd1JlZGFjdGVkYEJyYW5kcyBpbiBsZWZ0ICR7cXVvdGUobGVmdEJyYW5kKX0gYW5kIHJpZ2h0ICR7cXVvdGUoXG4gICAgcmlnaHRCcmFuZFxuICApfSBzaG91bGQgbWF0Y2ggYnV0IGRvIG5vdGA7XG4gIGNvbnN0IGxlZnRIZWxwZXJzID0gYXNzZXJ0VmFsdWVHZXRIZWxwZXJzKGxlZnRWYWx1ZSk7XG4gIGNvbnN0IHJpZ2h0SGVscGVycyA9IGFzc2VydFZhbHVlR2V0SGVscGVycyhyaWdodFZhbHVlKTtcbiAgbGVmdEhlbHBlcnMgPT09IHJpZ2h0SGVscGVycyB8fCB0aHJvd1JlZGFjdGVkYFRoZSBsZWZ0ICR7bGVmdEFtb3VudH0gYW5kIHJpZ2h0IGFtb3VudCAke3JpZ2h0QW1vdW50fSBoYWQgZGlmZmVyZW50IGFzc2V0S2luZHNgO1xuICByZXR1cm4gbGVmdEhlbHBlcnM7XG59O1xudmFyIGNvZXJjZUxSID0gKGgsIGxlZnRBbW91bnQsIHJpZ2h0QW1vdW50KSA9PiB7XG4gIHJldHVybiBbaC5kb0NvZXJjZShsZWZ0QW1vdW50LnZhbHVlKSwgaC5kb0NvZXJjZShyaWdodEFtb3VudC52YWx1ZSldO1xufTtcbnZhciBpc0dURSA9IChsZWZ0QW1vdW50LCByaWdodEFtb3VudCwgYnJhbmQgPSB2b2lkIDApID0+IHtcbiAgY29uc3QgaCA9IGNoZWNrTFJBbmRHZXRIZWxwZXJzKGxlZnRBbW91bnQsIHJpZ2h0QW1vdW50LCBicmFuZCk7XG4gIHJldHVybiBoLmRvSXNHVEUoLi4uY29lcmNlTFIoaCwgbGVmdEFtb3VudCwgcmlnaHRBbW91bnQpKTtcbn07XG52YXIgQW1vdW50TWF0aCA9IHtcbiAgLy9cbiAgLy9cbiAgLypcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuICAgKi9cbiAgbWFrZTogKGJyYW5kLCBhbGxlZ2VkVmFsdWUpID0+IHtcbiAgICBhc3NlcnRSZW1vdGFibGUoYnJhbmQsIFwiYnJhbmRcIik7XG4gICAgY29uc3QgaCA9IGFzc2VydFZhbHVlR2V0SGVscGVycyhhbGxlZ2VkVmFsdWUpO1xuICAgIGNvbnN0IHZhbHVlID0gaC5kb0NvZXJjZShhbGxlZ2VkVmFsdWUpO1xuICAgIHJldHVybiBoYXJkZW4oeyBicmFuZCwgdmFsdWUgfSk7XG4gIH0sXG4gIC8qXG5cblxuXG5cblxuXG5cbiAgICovXG4gIGNvZXJjZTogKGJyYW5kLCBhbGxlZ2VkQW1vdW50KSA9PiB7XG4gICAgYXNzZXJ0UmVtb3RhYmxlKGJyYW5kLCBcImJyYW5kXCIpO1xuICAgIGFzc2VydFJlY29yZChhbGxlZ2VkQW1vdW50LCBcImFtb3VudFwiKTtcbiAgICBjb25zdCB7IGJyYW5kOiBhbGxlZ2VkQnJhbmQsIHZhbHVlOiBhbGxlZ2VkVmFsdWUgfSA9IGFsbGVnZWRBbW91bnQ7XG4gICAgYnJhbmQgPT09IGFsbGVnZWRCcmFuZCB8fCB0aHJvd1JlZGFjdGVkYFRoZSBicmFuZCBpbiB0aGUgYWxsZWdlZEFtb3VudCAke2FsbGVnZWRBbW91bnR9IGluICdjb2VyY2UnIGRpZG4ndCBtYXRjaCB0aGUgc3BlY2lmaWVkIGJyYW5kICR7YnJhbmR9LmA7XG4gICAgcmV0dXJuIEFtb3VudE1hdGgubWFrZShicmFuZCwgYWxsZWdlZFZhbHVlKTtcbiAgfSxcbiAgLypcblxuXG5cblxuXG5cbiAgICovXG4gIGdldFZhbHVlOiAoYnJhbmQsIGFtb3VudCkgPT4gQW1vdW50TWF0aC5jb2VyY2UoYnJhbmQsIGFtb3VudCkudmFsdWUsXG4gIC8qXG5cblxuXG5cblxuXG5cbiAgICovXG4gIG1ha2VFbXB0eTogKGJyYW5kLCBhc3NldEtpbmQgPSAoXG4gICAgLyogICAgICAgICAgICAgICAgKi9cbiAgICBcIm5hdFwiXG4gICkpID0+IHtcbiAgICBhc3NlcnRSZW1vdGFibGUoYnJhbmQsIFwiYnJhbmRcIik7XG4gICAgYXNzZXJ0QXNzZXRLaW5kKGFzc2V0S2luZCk7XG4gICAgY29uc3QgdmFsdWUgPSBoZWxwZXJzW2Fzc2V0S2luZF0uZG9NYWtlRW1wdHkoKTtcbiAgICByZXR1cm4gaGFyZGVuKHsgYnJhbmQsIHZhbHVlIH0pO1xuICB9LFxuICAvKlxuXG5cblxuXG5cblxuICAgKi9cbiAgbWFrZUVtcHR5RnJvbUFtb3VudDogKGFtb3VudCkgPT4ge1xuICAgIGFzc2VydFJlY29yZChhbW91bnQsIFwiYW1vdW50XCIpO1xuICAgIGNvbnN0IHsgYnJhbmQsIHZhbHVlIH0gPSBhbW91bnQ7XG4gICAgY29uc3QgYXNzZXRLaW5kID0gYXNzZXJ0VmFsdWVHZXRBc3NldEtpbmQodmFsdWUpO1xuICAgIHJldHVybiBBbW91bnRNYXRoLm1ha2VFbXB0eShicmFuZCwgYXNzZXRLaW5kKTtcbiAgfSxcbiAgLypcblxuXG5cblxuXG4gICAqL1xuICBpc0VtcHR5OiAoYW1vdW50LCBicmFuZCA9IHZvaWQgMCkgPT4ge1xuICAgIGFzc2VydFJlY29yZChhbW91bnQsIFwiYW1vdW50XCIpO1xuICAgIGNvbnN0IHsgYnJhbmQ6IGFsbGVnZWRCcmFuZCwgdmFsdWUgfSA9IGFtb3VudDtcbiAgICBhc3NlcnRSZW1vdGFibGUoYWxsZWdlZEJyYW5kLCBcImJyYW5kXCIpO1xuICAgIG9wdGlvbmFsQnJhbmRDaGVjayhhbGxlZ2VkQnJhbmQsIGJyYW5kKTtcbiAgICBjb25zdCBoID0gYXNzZXJ0VmFsdWVHZXRIZWxwZXJzKHZhbHVlKTtcbiAgICByZXR1cm4gaC5kb0lzRW1wdHkoaC5kb0NvZXJjZSh2YWx1ZSkpO1xuICB9LFxuICBpc0dURSxcbiAgLypcblxuXG5cblxuXG5cblxuXG4gICAqL1xuICBpc0VxdWFsOiAobGVmdEFtb3VudCwgcmlnaHRBbW91bnQsIGJyYW5kID0gdm9pZCAwKSA9PiB7XG4gICAgY29uc3QgaCA9IGNoZWNrTFJBbmRHZXRIZWxwZXJzKGxlZnRBbW91bnQsIHJpZ2h0QW1vdW50LCBicmFuZCk7XG4gICAgcmV0dXJuIGguZG9Jc0VxdWFsKC4uLmNvZXJjZUxSKGgsIGxlZnRBbW91bnQsIHJpZ2h0QW1vdW50KSk7XG4gIH0sXG4gIC8qXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuICAgKi9cbiAgYWRkOiAobGVmdEFtb3VudCwgcmlnaHRBbW91bnQsIGJyYW5kID0gdm9pZCAwKSA9PiB7XG4gICAgY29uc3QgaCA9IGNoZWNrTFJBbmRHZXRIZWxwZXJzKGxlZnRBbW91bnQsIHJpZ2h0QW1vdW50LCBicmFuZCk7XG4gICAgY29uc3QgdmFsdWUgPSBoLmRvQWRkKC4uLmNvZXJjZUxSKGgsIGxlZnRBbW91bnQsIHJpZ2h0QW1vdW50KSk7XG4gICAgcmV0dXJuIGhhcmRlbih7IGJyYW5kOiBsZWZ0QW1vdW50LmJyYW5kLCB2YWx1ZSB9KTtcbiAgfSxcbiAgLypcblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiAgICovXG4gIHN1YnRyYWN0OiAobGVmdEFtb3VudCwgcmlnaHRBbW91bnQsIGJyYW5kID0gdm9pZCAwKSA9PiB7XG4gICAgY29uc3QgaCA9IGNoZWNrTFJBbmRHZXRIZWxwZXJzKGxlZnRBbW91bnQsIHJpZ2h0QW1vdW50LCBicmFuZCk7XG4gICAgY29uc3QgdmFsdWUgPSBoLmRvU3VidHJhY3QoLi4uY29lcmNlTFIoaCwgbGVmdEFtb3VudCwgcmlnaHRBbW91bnQpKTtcbiAgICByZXR1cm4gaGFyZGVuKHsgYnJhbmQ6IGxlZnRBbW91bnQuYnJhbmQsIHZhbHVlIH0pO1xuICB9LFxuICAvKlxuXG5cblxuXG5cblxuXG4gICAqL1xuICBtaW46ICh4LCB5LCBicmFuZCA9IHZvaWQgMCkgPT4gKFxuICAgIC8vXG4gICAgaXNHVEUoeCwgeSwgYnJhbmQpID8geSA6IGlzR1RFKHksIHgsIGJyYW5kKSA/IHggOiB0aHJvd1JlZGFjdGVkYCR7eH0gYW5kICR7eX0gYXJlIGluY29tcGFyYWJsZWBcbiAgKSxcbiAgLypcblxuXG5cblxuXG5cblxuICAgKi9cbiAgbWF4OiAoeCwgeSwgYnJhbmQgPSB2b2lkIDApID0+IChcbiAgICAvL1xuICAgIGlzR1RFKHgsIHksIGJyYW5kKSA/IHggOiBpc0dURSh5LCB4KSA/IHkgOiB0aHJvd1JlZGFjdGVkYCR7eH0gYW5kICR7eX0gYXJlIGluY29tcGFyYWJsZWBcbiAgKVxufTtcbmhhcmRlbihBbW91bnRNYXRoKTtcbnZhciBnZXRBc3NldEtpbmQgPSAoYW1vdW50KSA9PiB7XG4gIGFzc2VydFJlY29yZChhbW91bnQsIFwiYW1vdW50XCIpO1xuICBjb25zdCB7IHZhbHVlIH0gPSBhbW91bnQ7XG4gIHJldHVybiBhc3NlcnRWYWx1ZUdldEFzc2V0S2luZCh2YWx1ZSk7XG59O1xuaGFyZGVuKGdldEFzc2V0S2luZCk7XG5cbi8vXG52YXIgY29lcmNlRGlzcGxheUluZm8gPSAoYWxsZWdlZERpc3BsYXlJbmZvLCBhc3NldEtpbmQpID0+IHtcbiAgbXVzdE1hdGNoMihhbGxlZ2VkRGlzcGxheUluZm8sIERpc3BsYXlJbmZvU2hhcGUsIFwiZGlzcGxheUluZm9cIik7XG4gIGlmIChhbGxlZ2VkRGlzcGxheUluZm8uYXNzZXRLaW5kICE9PSB2b2lkIDApIHtcbiAgICBhbGxlZ2VkRGlzcGxheUluZm8uYXNzZXRLaW5kID09PSBhc3NldEtpbmQgfHwgdGhyb3dSZWRhY3RlZGBkaXNwbGF5SW5mby5hc3NldEtpbmQgd2FzIHByZXNlbnQgKCR7YWxsZWdlZERpc3BsYXlJbmZvLmFzc2V0S2luZH0pIGFuZCBkaWQgbm90IG1hdGNoIHRoZSBhc3NldEtpbmQgYXJndW1lbnQgKCR7YXNzZXRLaW5kfSlgO1xuICB9XG4gIGNvbnN0IGRpc3BsYXlJbmZvID0gaGFyZGVuKHsgLi4uYWxsZWdlZERpc3BsYXlJbmZvLCBhc3NldEtpbmQgfSk7XG4gIGlmIChkaXNwbGF5SW5mby5kZWNpbWFsUGxhY2VzICE9PSB2b2lkIDApIHtcbiAgICBOdW1iZXIuaXNTYWZlSW50ZWdlcihkaXNwbGF5SW5mby5kZWNpbWFsUGxhY2VzKSB8fCB0aHJvd1JlZGFjdGVkYGRlY2ltYWxQbGFjZXMgJHtkaXNwbGF5SW5mby5kZWNpbWFsUGxhY2VzfSBpcyBub3QgYSBzYWZlIGludGVnZXJgO1xuICB9XG4gIHJldHVybiBkaXNwbGF5SW5mbztcbn07XG5cbi8vXG52YXIgcHJlcGFyZVBheW1lbnRLaW5kID0gKGlzc3VlclpvbmUsIG5hbWUsIGJyYW5kLCBQYXltZW50SSkgPT4ge1xuICBjb25zdCBtYWtlUGF5bWVudCA9IGlzc3VlclpvbmUuZXhvQ2xhc3MoXG4gICAgYCR7bmFtZX0gcGF5bWVudGAsXG4gICAgUGF5bWVudEksXG4gICAgaW5pdEVtcHR5LFxuICAgIHtcbiAgICAgIGdldEFsbGVnZWRCcmFuZCgpIHtcbiAgICAgICAgcmV0dXJuIGJyYW5kO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbiAgcmV0dXJuIG1ha2VQYXltZW50O1xufTtcbmhhcmRlbihwcmVwYXJlUGF5bWVudEtpbmQpO1xuXG4vL1xudmFyIG1ha2VUcmFuc2llbnROb3RpZmllcktpdCA9ICgpID0+IHtcbiAgY29uc3QgdHJhbnNpZW50Tm90aWZlcktpdHMgPSBtYWtlU2NhbGFyQmlnV2Vha01hcFN0b3JlKFxuICAgIFwidHJhbnNpZW50Tm90aWZlcktpdHNcIlxuICApO1xuICBjb25zdCBwcm92aWRlTm90aWZpZXJLaXQgPSAoa2V5KSA9PiBwcm92aWRlTGF6eShcbiAgICB0cmFuc2llbnROb3RpZmVyS2l0cyxcbiAgICBrZXksXG4gICAgKCkgPT4gbWFrZU5vdGlmaWVyS2l0KGtleS5nZXRDdXJyZW50QW1vdW50KCkpXG4gICk7XG4gIGNvbnN0IHByb3ZpZGVOb3RpZmllciA9IChrZXkpID0+IHByb3ZpZGVOb3RpZmllcktpdChrZXkpLm5vdGlmaWVyO1xuICBjb25zdCB1cGRhdGUgPSAoa2V5LCBuZXdWYWx1ZSkgPT4ge1xuICAgIGlmICh0cmFuc2llbnROb3RpZmVyS2l0cy5oYXMoa2V5KSkge1xuICAgICAgY29uc3QgeyB1cGRhdGVyIH0gPSB0cmFuc2llbnROb3RpZmVyS2l0cy5nZXQoa2V5KTtcbiAgICAgIHVwZGF0ZXIudXBkYXRlU3RhdGUobmV3VmFsdWUpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHsgcHJvdmlkZU5vdGlmaWVyLCB1cGRhdGUgfTtcbn07XG5oYXJkZW4obWFrZVRyYW5zaWVudE5vdGlmaWVyS2l0KTtcblxuLy9cbnZhciBtYWtlQW1vdW50U3RvcmUgPSAoc3RhdGUsIGtleSkgPT4ge1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICBnZXRBbW91bnQ6ICgpID0+IHN0YXRlW2tleV0sXG4gICAgaW5jcmVtZW50OiAoZGVsdGEpID0+IHtcbiAgICAgIHN0YXRlW2tleV0gPSBBbW91bnRNYXRoLmFkZChzdGF0ZVtrZXldLCBkZWx0YSk7XG4gICAgfSxcbiAgICBkZWNyZW1lbnQ6IChkZWx0YSkgPT4ge1xuICAgICAgaWYgKEFtb3VudE1hdGguaXNHVEUoc3RhdGVba2V5XSwgZGVsdGEpKSB7XG4gICAgICAgIHN0YXRlW2tleV0gPSBBbW91bnRNYXRoLnN1YnRyYWN0KHN0YXRlW2tleV0sIGRlbHRhKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9KTtcbn07XG5oYXJkZW4obWFrZUFtb3VudFN0b3JlKTtcblxuLy9cbnZhciBFTVBUWV9DT1BZX1NFVCA9IG1ha2VDb3B5U2V0KFtdKTtcbnZhciBwcmVwYXJlUHVyc2VLaW5kID0gKGlzc3VlclpvbmUsIG5hbWUsIGFzc2V0S2luZCwgYnJhbmQsIFB1cnNlSUtpdCwgcHVyc2VNZXRob2RzLCByZWNvdmVyeVNldHNTdGF0ZSwgcGF5bWVudFJlY292ZXJ5U2V0cykgPT4ge1xuICBjb25zdCBhbW91bnRTaGFwZSA9IGJyYW5kLmdldEFtb3VudFNoYXBlKCk7XG4gIGNvbnN0IHsgcHJvdmlkZU5vdGlmaWVyLCB1cGRhdGU6IHVwZGF0ZUJhbGFuY2UgfSA9IG1ha2VUcmFuc2llbnROb3RpZmllcktpdCgpO1xuICBjb25zdCBtYXliZVJlY292ZXJ5U2V0ID0gKHN0YXRlKSA9PiB7XG4gICAgY29uc3QgeyByZWNvdmVyeVNldCB9ID0gc3RhdGU7XG4gICAgaWYgKHJlY292ZXJ5U2V0c1N0YXRlID09PSBcImhhc1JlY292ZXJ5U2V0c1wiKSB7XG4gICAgICByZXR1cm4gcmVjb3ZlcnlTZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlY292ZXJ5U2V0c1N0YXRlID09PSBcIm5vUmVjb3ZlcnlTZXRzXCIgfHwgdGhyb3dSZWRhY3RlZGByZWNvdmVyU2V0c1N0YXRlIG11c3QgYmUgbm9SZWNvdmVyeVNldHMgaWYgaXQgaXNuJ3QgaGFzUmVjb3ZlclNldHNgO1xuICAgICAgcGF5bWVudFJlY292ZXJ5U2V0cyAhPT0gdm9pZCAwIHx8IHRocm93UmVkYWN0ZWRgcGF5bWVudFJlY292ZXJ5U2V0cyBtdXN0IGFsd2F5cyBiZSBkZWZpbmVkYDtcbiAgICAgIHJlY292ZXJ5U2V0LmdldFNpemUoKSA9PT0gMCB8fCB0aHJvd1JlZGFjdGVkYFdpdGggbm9SZWNvdmVyeVNldHMsIHJlY292ZXJ5U2V0IG11c3QgYmUgZW1wdHlgO1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHsgZGVwb3NpdEludGVybmFsLCB3aXRoZHJhd0ludGVybmFsIH0gPSBwdXJzZU1ldGhvZHM7XG4gIGNvbnN0IG1ha2VQdXJzZUtpdCA9IGlzc3VlclpvbmUuZXhvQ2xhc3NLaXQoXG4gICAgYCR7bmFtZX0gUHVyc2VgLFxuICAgIFB1cnNlSUtpdCxcbiAgICAoKSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW50QmFsYW5jZSA9IEFtb3VudE1hdGgubWFrZUVtcHR5KGJyYW5kLCBhc3NldEtpbmQpO1xuICAgICAgY29uc3QgcmVjb3ZlcnlTZXQgPSBpc3N1ZXJab25lLmRldGFjaGVkKCkuc2V0U3RvcmUoXCJyZWNvdmVyeSBzZXRcIik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjdXJyZW50QmFsYW5jZSxcbiAgICAgICAgcmVjb3ZlcnlTZXRcbiAgICAgIH07XG4gICAgfSxcbiAgICB7XG4gICAgICBwdXJzZToge1xuICAgICAgICBkZXBvc2l0KHNyY1BheW1lbnQsIG9wdEFtb3VudFNoYXBlID0gdm9pZCAwKSB7XG4gICAgICAgICAgY29uc3QgeyBzdGF0ZSB9ID0gdGhpcztcbiAgICAgICAgICBjb25zdCB7IHB1cnNlIH0gPSB0aGlzLmZhY2V0cztcbiAgICAgICAgICBjb25zdCBiYWxhbmNlU3RvcmUgPSBtYWtlQW1vdW50U3RvcmUoc3RhdGUsIFwiY3VycmVudEJhbGFuY2VcIik7XG4gICAgICAgICAgY29uc3Qgc3JjUGF5bWVudEJhbGFuY2UgPSBkZXBvc2l0SW50ZXJuYWwoXG4gICAgICAgICAgICBiYWxhbmNlU3RvcmUsXG4gICAgICAgICAgICBzcmNQYXltZW50LFxuICAgICAgICAgICAgb3B0QW1vdW50U2hhcGVcbiAgICAgICAgICApO1xuICAgICAgICAgIHVwZGF0ZUJhbGFuY2UocHVyc2UsIGJhbGFuY2VTdG9yZS5nZXRBbW91bnQoKSk7XG4gICAgICAgICAgcmV0dXJuIHNyY1BheW1lbnRCYWxhbmNlO1xuICAgICAgICB9LFxuICAgICAgICB3aXRoZHJhdyhhbW91bnQpIHtcbiAgICAgICAgICBjb25zdCB7IHN0YXRlIH0gPSB0aGlzO1xuICAgICAgICAgIGNvbnN0IHsgcHVyc2UgfSA9IHRoaXMuZmFjZXRzO1xuICAgICAgICAgIGNvbnN0IG9wdFJlY292ZXJ5U2V0ID0gbWF5YmVSZWNvdmVyeVNldChzdGF0ZSk7XG4gICAgICAgICAgY29uc3QgYmFsYW5jZVN0b3JlID0gbWFrZUFtb3VudFN0b3JlKHN0YXRlLCBcImN1cnJlbnRCYWxhbmNlXCIpO1xuICAgICAgICAgIGNvbnN0IHBheW1lbnQgPSB3aXRoZHJhd0ludGVybmFsKFxuICAgICAgICAgICAgYmFsYW5jZVN0b3JlLFxuICAgICAgICAgICAgYW1vdW50LFxuICAgICAgICAgICAgb3B0UmVjb3ZlcnlTZXRcbiAgICAgICAgICApO1xuICAgICAgICAgIHVwZGF0ZUJhbGFuY2UocHVyc2UsIGJhbGFuY2VTdG9yZS5nZXRBbW91bnQoKSk7XG4gICAgICAgICAgcmV0dXJuIHBheW1lbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEN1cnJlbnRBbW91bnQoKSB7XG4gICAgICAgICAgY29uc3QgeyBzdGF0ZSB9ID0gdGhpcztcbiAgICAgICAgICBjb25zdCBiYWxhbmNlU3RvcmUgPSBtYWtlQW1vdW50U3RvcmUoc3RhdGUsIFwiY3VycmVudEJhbGFuY2VcIik7XG4gICAgICAgICAgcmV0dXJuIGJhbGFuY2VTdG9yZS5nZXRBbW91bnQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0Q3VycmVudEFtb3VudE5vdGlmaWVyKCkge1xuICAgICAgICAgIHJldHVybiBwcm92aWRlTm90aWZpZXIodGhpcy5mYWNldHMucHVyc2UpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRBbGxlZ2VkQnJhbmQoKSB7XG4gICAgICAgICAgcmV0dXJuIGJyYW5kO1xuICAgICAgICB9LFxuICAgICAgICBnZXREZXBvc2l0RmFjZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmFjZXRzLmRlcG9zaXRGYWNldDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0UmVjb3ZlcnlTZXQoKSB7XG4gICAgICAgICAgY29uc3QgeyBzdGF0ZSB9ID0gdGhpcztcbiAgICAgICAgICBjb25zdCBvcHRSZWNvdmVyeVNldCA9IG1heWJlUmVjb3ZlcnlTZXQoc3RhdGUpO1xuICAgICAgICAgIGlmIChvcHRSZWNvdmVyeVNldCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gRU1QVFlfQ09QWV9TRVQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBvcHRSZWNvdmVyeVNldC5zbmFwc2hvdCgpO1xuICAgICAgICB9LFxuICAgICAgICByZWNvdmVyQWxsKCkge1xuICAgICAgICAgIGNvbnN0IHsgc3RhdGUsIGZhY2V0cyB9ID0gdGhpcztcbiAgICAgICAgICBsZXQgYW1vdW50ID0gQW1vdW50TWF0aC5tYWtlRW1wdHkoYnJhbmQsIGFzc2V0S2luZCk7XG4gICAgICAgICAgY29uc3Qgb3B0UmVjb3ZlcnlTZXQgPSBtYXliZVJlY292ZXJ5U2V0KHN0YXRlKTtcbiAgICAgICAgICBpZiAob3B0UmVjb3ZlcnlTZXQgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgcmV0dXJuIGFtb3VudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChjb25zdCBwYXltZW50IG9mIG9wdFJlY292ZXJ5U2V0LmtleXMoKSkge1xuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSBmYWNldHMucHVyc2UuZGVwb3NpdChwYXltZW50KTtcbiAgICAgICAgICAgIGFtb3VudCA9IEFtb3VudE1hdGguYWRkKGFtb3VudCwgZGVsdGEsIGJyYW5kKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3B0UmVjb3ZlcnlTZXQuZ2V0U2l6ZSgpID09PSAwIHx8IHRocm93UmVkYWN0ZWRgaW50ZXJuYWw6IFJlbWFpbmluZyB1bnJlY292ZXJlZCBwYXltZW50czogJHtmYWNldHMucHVyc2UuZ2V0UmVjb3ZlcnlTZXQoKX1gO1xuICAgICAgICAgIHJldHVybiBhbW91bnQ7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZXBvc2l0RmFjZXQ6IHtcbiAgICAgICAgcmVjZWl2ZSguLi5hcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmFjZXRzLnB1cnNlLmRlcG9zaXQoLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIHN0YXRlU2hhcGU6IHtcbiAgICAgICAgY3VycmVudEJhbGFuY2U6IGFtb3VudFNoYXBlLFxuICAgICAgICByZWNvdmVyeVNldDogTS5yZW1vdGFibGUoXCJyZWNvdmVyeVNldFwiKVxuICAgICAgfVxuICAgIH1cbiAgKTtcbiAgcmV0dXJuICgpID0+IG1ha2VQdXJzZUtpdCgpLnB1cnNlO1xufTtcbmhhcmRlbihwcmVwYXJlUHVyc2VLaW5kKTtcblxuLy9cbnZhciBhbW91bnRTaGFwZUZyb21FbGVtZW50U2hhcGUgPSAoYnJhbmQsIGFzc2V0S2luZCwgZWxlbWVudFNoYXBlKSA9PiB7XG4gIGxldCB2YWx1ZVNoYXBlO1xuICBzd2l0Y2ggKGFzc2V0S2luZCkge1xuICAgIGNhc2UgXCJuYXRcIjoge1xuICAgICAgdmFsdWVTaGFwZSA9IE0ubmF0KCk7XG4gICAgICBlbGVtZW50U2hhcGUgPT09IHZvaWQgMCB8fCB0aHJvd1JlZGFjdGVkYEZ1bmdpYmxlIGFzc2V0cyBjYW5ub3QgaGF2ZSBhbiBlbGVtZW50U2hhcGU6ICR7cXVvdGUoZWxlbWVudFNoYXBlKX1gO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJzZXRcIjoge1xuICAgICAgaWYgKGVsZW1lbnRTaGFwZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHZhbHVlU2hhcGUgPSBNLmFycmF5T2YoTS5rZXkoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZVNoYXBlID0gTS5hcnJheU9mKE0uYW5kKE0ua2V5KCksIGVsZW1lbnRTaGFwZSkpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJjb3B5U2V0XCI6IHtcbiAgICAgIGlmIChlbGVtZW50U2hhcGUgPT09IHZvaWQgMCkge1xuICAgICAgICB2YWx1ZVNoYXBlID0gTS5zZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlU2hhcGUgPSBNLnNldE9mKGVsZW1lbnRTaGFwZSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImNvcHlCYWdcIjoge1xuICAgICAgaWYgKGVsZW1lbnRTaGFwZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHZhbHVlU2hhcGUgPSBNLmJhZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVTaGFwZSA9IE0uYmFnT2YoZWxlbWVudFNoYXBlKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBkZWZhdWx0OiB7XG4gICAgICB0aHJvd1JlZGFjdGVkYHVuZXhwZWN0ZWQgYXNzZXQga2luZCAke3F1b3RlKGFzc2V0S2luZCl9YDtcbiAgICB9XG4gIH1cbiAgY29uc3QgYW1vdW50U2hhcGUgPSBoYXJkZW4oe1xuICAgIGJyYW5kLFxuICAgIC8vXG4gICAgdmFsdWU6IHZhbHVlU2hhcGVcbiAgfSk7XG4gIHJldHVybiBhbW91bnRTaGFwZTtcbn07XG52YXIgcHJlcGFyZVBheW1lbnRMZWRnZXIgPSAoaXNzdWVyWm9uZSwgbmFtZSwgYXNzZXRLaW5kLCBkaXNwbGF5SW5mbywgZWxlbWVudFNoYXBlLCByZWNvdmVyeVNldHNTdGF0ZSwgb3B0U2h1dGRvd25XaXRoRmFpbHVyZSA9IHZvaWQgMCkgPT4ge1xuICBjb25zdCBicmFuZCA9IGlzc3VlclpvbmUuZXhvKGAke25hbWV9IGJyYW5kYCwgQnJhbmRJLCB7XG4gICAgaXNNeUlzc3VlcihhbGxlZ2VkSXNzdWVyKSB7XG4gICAgICByZXR1cm4gYWxsZWdlZElzc3VlciA9PT0gaXNzdWVyO1xuICAgIH0sXG4gICAgZ2V0QWxsZWdlZE5hbWUoKSB7XG4gICAgICByZXR1cm4gbmFtZTtcbiAgICB9LFxuICAgIC8vXG4gICAgZ2V0RGlzcGxheUluZm8oKSB7XG4gICAgICByZXR1cm4gZGlzcGxheUluZm87XG4gICAgfSxcbiAgICBnZXRBbW91bnRTaGFwZSgpIHtcbiAgICAgIHJldHVybiBhbW91bnRTaGFwZTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBhbW91bnRTaGFwZSA9IGFtb3VudFNoYXBlRnJvbUVsZW1lbnRTaGFwZShcbiAgICBicmFuZCxcbiAgICBhc3NldEtpbmQsXG4gICAgZWxlbWVudFNoYXBlXG4gICk7XG4gIGNvbnN0IHsgSXNzdWVySSwgTWludEksIFBheW1lbnRJLCBQdXJzZUlLaXQgfSA9IG1ha2VJc3N1ZXJJbnRlcmZhY2VzKFxuICAgIGJyYW5kLFxuICAgIGFzc2V0S2luZCxcbiAgICBhbW91bnRTaGFwZVxuICApO1xuICBjb25zdCBtYWtlUGF5bWVudCA9IHByZXBhcmVQYXltZW50S2luZChpc3N1ZXJab25lLCBuYW1lLCBicmFuZCwgUGF5bWVudEkpO1xuICBjb25zdCBzaHV0ZG93bkxlZGdlcldpdGhGYWlsdXJlID0gKHJlYXNvbikgPT4ge1xuICAgIGlmIChvcHRTaHV0ZG93bldpdGhGYWlsdXJlICE9PSB2b2lkIDApIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG9wdFNodXRkb3duV2l0aEZhaWx1cmUocmVhc29uKTtcbiAgICAgIH0gY2F0Y2ggKGVyckluU2h1dGRvd24pIHtcbiAgICAgICAgbm90ZShlcnJJblNodXRkb3duLCByZWRhY3RlZGBDYXVzZWQgYnk6ICR7cmVhc29ufWApO1xuICAgICAgICB0aHJvdyBlcnJJblNodXRkb3duO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyByZWFzb247XG4gIH07XG4gIGNvbnN0IHBheW1lbnRMZWRnZXIgPSBpc3N1ZXJab25lLndlYWtNYXBTdG9yZShcInBheW1lbnRMZWRnZXJcIiwge1xuICAgIHZhbHVlU2hhcGU6IGFtb3VudFNoYXBlXG4gIH0pO1xuICBjb25zdCBwYXltZW50UmVjb3ZlcnlTZXRzID0gaXNzdWVyWm9uZS53ZWFrTWFwU3RvcmUoXCJwYXltZW50UmVjb3ZlcnlTZXRzXCIpO1xuICBjb25zdCBpbml0UGF5bWVudCA9IChwYXltZW50LCBhbW91bnQsIG9wdFJlY292ZXJ5U2V0ID0gdm9pZCAwKSA9PiB7XG4gICAgaWYgKHJlY292ZXJ5U2V0c1N0YXRlID09PSBcIm5vUmVjb3ZlcnlTZXRzXCIpIHtcbiAgICAgIG9wdFJlY292ZXJ5U2V0ID09PSB2b2lkIDAgfHwgdGhyb3dSZWRhY3RlZGB3aGVuIHJlY292ZXJTZXRzU3RhdGUgPT09ICdub1JlY292ZXJ5U2V0cycsIG9wdFJlY292ZXJ5U2V0IG11c3QgYmUgZW1wdHlgO1xuICAgIH1cbiAgICBpZiAob3B0UmVjb3ZlcnlTZXQgIT09IHZvaWQgMCAmJiAhQW1vdW50TWF0aC5pc0VtcHR5KGFtb3VudCkpIHtcbiAgICAgIG9wdFJlY292ZXJ5U2V0LmFkZChwYXltZW50KTtcbiAgICAgIHBheW1lbnRSZWNvdmVyeVNldHMuaW5pdChwYXltZW50LCBvcHRSZWNvdmVyeVNldCk7XG4gICAgfVxuICAgIHBheW1lbnRMZWRnZXIuaW5pdChwYXltZW50LCBhbW91bnQpO1xuICB9O1xuICBjb25zdCBkZWxldGVQYXltZW50ID0gKHBheW1lbnQpID0+IHtcbiAgICBwYXltZW50TGVkZ2VyLmRlbGV0ZShwYXltZW50KTtcbiAgICBpZiAocGF5bWVudFJlY292ZXJ5U2V0cy5oYXMocGF5bWVudCkpIHtcbiAgICAgIGNvbnN0IHJlY292ZXJ5U2V0ID0gcGF5bWVudFJlY292ZXJ5U2V0cy5nZXQocGF5bWVudCk7XG4gICAgICBwYXltZW50UmVjb3ZlcnlTZXRzLmRlbGV0ZShwYXltZW50KTtcbiAgICAgIHJlY292ZXJ5U2V0LmRlbGV0ZShwYXltZW50KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGNvZXJjZSA9IChhbGxlZ2VkQW1vdW50KSA9PiBBbW91bnRNYXRoLmNvZXJjZShicmFuZCwgYWxsZWdlZEFtb3VudCk7XG4gIGNvbnN0IGFzc2VydEFtb3VudENvbnNpc3RlbnQgPSAocGF5bWVudEJhbGFuY2UsIG9wdEFtb3VudFNoYXBlKSA9PiB7XG4gICAgaWYgKG9wdEFtb3VudFNoYXBlICE9PSB2b2lkIDApIHtcbiAgICAgIG11c3RNYXRjaChwYXltZW50QmFsYW5jZSwgb3B0QW1vdW50U2hhcGUsIFwiYW1vdW50XCIpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgYXNzZXJ0TGl2ZVBheW1lbnQgPSAocGF5bWVudCkgPT4ge1xuICAgIHBheW1lbnRMZWRnZXIuaGFzKHBheW1lbnQpIHx8IHRocm93UmVkYWN0ZWRgJHtwYXltZW50fSB3YXMgbm90IGEgbGl2ZSBwYXltZW50IGZvciBicmFuZCAke3F1b3RlKFxuICAgICAgYnJhbmRcbiAgICApfS4gSXQgY291bGQgYmUgYSB1c2VkLXVwIHBheW1lbnQsIGEgcGF5bWVudCBmb3IgYW5vdGhlciBicmFuZCwgb3IgaXQgbWlnaHQgbm90IGJlIGEgcGF5bWVudCBhdCBhbGwuYDtcbiAgfTtcbiAgY29uc3QgZGVwb3NpdEludGVybmFsID0gKGJhbGFuY2VTdG9yZSwgc3JjUGF5bWVudCwgb3B0QW1vdW50U2hhcGUgPSB2b2lkIDApID0+IHtcbiAgICAhaXNQcm9taXNlKHNyY1BheW1lbnQpIHx8IGFzc2VydC5mYWlsKFxuICAgICAgYGRlcG9zaXQgZG9lcyBub3QgYWNjZXB0IHByb21pc2VzIGFzIGZpcnN0IGFyZ3VtZW50LiBJbnN0ZWFkIG9mIHBhc3NpbmcgdGhlIHByb21pc2UgKGRlcG9zaXQocGF5bWVudFByb21pc2UpKSwgY29uc2lkZXIgdW53cmFwcGluZyB0aGUgcHJvbWlzZSBmaXJzdDogRS53aGVuKHBheW1lbnRQcm9taXNlLCAoYWN0dWFsUGF5bWVudCA9PiBkZXBvc2l0KGFjdHVhbFBheW1lbnQpKWAsXG4gICAgICBUeXBlRXJyb3JcbiAgICApO1xuICAgIGFzc2VydExpdmVQYXltZW50KHNyY1BheW1lbnQpO1xuICAgIGNvbnN0IHNyY1BheW1lbnRCYWxhbmNlID0gcGF5bWVudExlZGdlci5nZXQoc3JjUGF5bWVudCk7XG4gICAgYXNzZXJ0QW1vdW50Q29uc2lzdGVudChzcmNQYXltZW50QmFsYW5jZSwgb3B0QW1vdW50U2hhcGUpO1xuICAgIHRyeSB7XG4gICAgICBkZWxldGVQYXltZW50KHNyY1BheW1lbnQpO1xuICAgICAgYmFsYW5jZVN0b3JlLmluY3JlbWVudChzcmNQYXltZW50QmFsYW5jZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBzaHV0ZG93bkxlZGdlcldpdGhGYWlsdXJlKGVycik7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIHJldHVybiBzcmNQYXltZW50QmFsYW5jZTtcbiAgfTtcbiAgY29uc3Qgd2l0aGRyYXdJbnRlcm5hbCA9IChiYWxhbmNlU3RvcmUsIGFtb3VudCwgcmVjb3ZlcnlTZXQgPSB2b2lkIDApID0+IHtcbiAgICBhbW91bnQgPSBjb2VyY2UoYW1vdW50KTtcbiAgICBjb25zdCBwYXltZW50ID0gbWFrZVBheW1lbnQoKTtcbiAgICBiYWxhbmNlU3RvcmUuZGVjcmVtZW50KGFtb3VudCkgfHwgdGhyb3dSZWRhY3RlZGBXaXRoZHJhd2FsIG9mICR7YW1vdW50fSBmYWlsZWQgYmVjYXVzZSB0aGUgcHVyc2Ugb25seSBjb250YWluZWQgJHtiYWxhbmNlU3RvcmUuZ2V0QW1vdW50KCl9YDtcbiAgICB0cnkge1xuICAgICAgaW5pdFBheW1lbnQocGF5bWVudCwgYW1vdW50LCByZWNvdmVyeVNldCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBzaHV0ZG93bkxlZGdlcldpdGhGYWlsdXJlKGVycik7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIHJldHVybiBwYXltZW50O1xuICB9O1xuICBjb25zdCBtYWtlRW1wdHlQdXJzZSA9IHByZXBhcmVQdXJzZUtpbmQoXG4gICAgaXNzdWVyWm9uZSxcbiAgICBuYW1lLFxuICAgIGFzc2V0S2luZCxcbiAgICBicmFuZCxcbiAgICBQdXJzZUlLaXQsXG4gICAgaGFyZGVuKHtcbiAgICAgIGRlcG9zaXRJbnRlcm5hbCxcbiAgICAgIHdpdGhkcmF3SW50ZXJuYWxcbiAgICB9KSxcbiAgICByZWNvdmVyeVNldHNTdGF0ZSxcbiAgICBwYXltZW50UmVjb3ZlcnlTZXRzXG4gICk7XG4gIGNvbnN0IGlzc3VlciA9IGlzc3VlclpvbmUuZXhvKGAke25hbWV9IGlzc3VlcmAsIElzc3VlckksIHtcbiAgICBnZXRCcmFuZCgpIHtcbiAgICAgIHJldHVybiBicmFuZDtcbiAgICB9LFxuICAgIGdldEFsbGVnZWROYW1lKCkge1xuICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfSxcbiAgICBnZXRBc3NldEtpbmQoKSB7XG4gICAgICByZXR1cm4gYXNzZXRLaW5kO1xuICAgIH0sXG4gICAgZ2V0RGlzcGxheUluZm8oKSB7XG4gICAgICByZXR1cm4gZGlzcGxheUluZm87XG4gICAgfSxcbiAgICBtYWtlRW1wdHlQdXJzZSgpIHtcbiAgICAgIHJldHVybiBtYWtlRW1wdHlQdXJzZSgpO1xuICAgIH0sXG4gICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgaXNMaXZlKHBheW1lbnQpIHtcbiAgICAgIHJldHVybiBwYXltZW50TGVkZ2VyLmhhcyhwYXltZW50KTtcbiAgICB9LFxuICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgIGdldEFtb3VudE9mKHBheW1lbnQpIHtcbiAgICAgIGFzc2VydExpdmVQYXltZW50KHBheW1lbnQpO1xuICAgICAgcmV0dXJuIHBheW1lbnRMZWRnZXIuZ2V0KHBheW1lbnQpO1xuICAgIH0sXG4gICAgLypcblxuXG4gICAgICovXG4gICAgYnVybihwYXltZW50LCBvcHRBbW91bnRTaGFwZSA9IHZvaWQgMCkge1xuICAgICAgYXNzZXJ0TGl2ZVBheW1lbnQocGF5bWVudCk7XG4gICAgICBjb25zdCBwYXltZW50QmFsYW5jZSA9IHBheW1lbnRMZWRnZXIuZ2V0KHBheW1lbnQpO1xuICAgICAgYXNzZXJ0QW1vdW50Q29uc2lzdGVudChwYXltZW50QmFsYW5jZSwgb3B0QW1vdW50U2hhcGUpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGVsZXRlUGF5bWVudChwYXltZW50KTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBzaHV0ZG93bkxlZGdlcldpdGhGYWlsdXJlKGVycik7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXltZW50QmFsYW5jZTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBtaW50UmVjb3ZlcnlQdXJzZSA9IChcbiAgICAvKiAgICAgICAgICAgICAgICAgICAqL1xuICAgIGlzc3VlclpvbmUubWFrZU9uY2UoXCJtaW50UmVjb3ZlcnlQdXJzZVwiLCAoKSA9PiBtYWtlRW1wdHlQdXJzZSgpKVxuICApO1xuICBjb25zdCBtaW50ID0gaXNzdWVyWm9uZS5leG8oYCR7bmFtZX0gbWludGAsIE1pbnRJLCB7XG4gICAgZ2V0SXNzdWVyKCkge1xuICAgICAgcmV0dXJuIGlzc3VlcjtcbiAgICB9LFxuICAgIG1pbnRQYXltZW50KG5ld0Ftb3VudCkge1xuICAgICAgbmV3QW1vdW50ID0gY29lcmNlKG5ld0Ftb3VudCk7XG4gICAgICBtdXN0TWF0Y2gobmV3QW1vdW50LCBhbW91bnRTaGFwZSwgXCJtaW50ZWQgYW1vdW50XCIpO1xuICAgICAgY29uc3QgcmF3UGF5bWVudCA9IG1ha2VQYXltZW50KCk7XG4gICAgICBpbml0UGF5bWVudChyYXdQYXltZW50LCBuZXdBbW91bnQsIHZvaWQgMCk7XG4gICAgICBjb25zdCBtaW50UmVjb3ZlcnlQdXJzZUJlZm9yZSA9IG1pbnRSZWNvdmVyeVB1cnNlLmdldEN1cnJlbnRBbW91bnQoKTtcbiAgICAgIG1pbnRSZWNvdmVyeVB1cnNlLmRlcG9zaXQocmF3UGF5bWVudCwgbmV3QW1vdW50KTtcbiAgICAgIGNvbnN0IHBheW1lbnQgPSBtaW50UmVjb3ZlcnlQdXJzZS53aXRoZHJhdyhuZXdBbW91bnQpO1xuICAgICAgY29uc3QgbWludFJlY292ZXJ5UHVyc2VBZnRlciA9IG1pbnRSZWNvdmVyeVB1cnNlLmdldEN1cnJlbnRBbW91bnQoKTtcbiAgICAgIGFzc2VydChrZXlFUShtaW50UmVjb3ZlcnlQdXJzZUJlZm9yZSwgbWludFJlY292ZXJ5UHVyc2VBZnRlcikpO1xuICAgICAgcmV0dXJuIHBheW1lbnQ7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgaXNzdWVyS2l0ID0gaGFyZGVuKHsgaXNzdWVyLCBtaW50LCBicmFuZCwgbWludFJlY292ZXJ5UHVyc2UgfSk7XG4gIHJldHVybiBpc3N1ZXJLaXQ7XG59O1xuaGFyZGVuKHByZXBhcmVQYXltZW50TGVkZ2VyKTtcblxuLy9cbnZhciBzZXR1cElzc3VlcktpdCA9ICh7IG5hbWUsIGFzc2V0S2luZCwgZGlzcGxheUluZm8sIGVsZW1lbnRTaGFwZSB9LCBpc3N1ZXJab25lLCByZWNvdmVyeVNldHNTdGF0ZSwgb3B0U2h1dGRvd25XaXRoRmFpbHVyZSA9IHZvaWQgMCkgPT4ge1xuICBhc3NlcnQyLnR5cGVvZihuYW1lLCBcInN0cmluZ1wiKTtcbiAgYXNzZXJ0QXNzZXRLaW5kKGFzc2V0S2luZCk7XG4gIGNvbnN0IGNsZWFuRGlzcGxheUluZm8gPSBjb2VyY2VEaXNwbGF5SW5mbyhkaXNwbGF5SW5mbywgYXNzZXRLaW5kKTtcbiAgaWYgKG9wdFNodXRkb3duV2l0aEZhaWx1cmUgIT09IHZvaWQgMCkge1xuICAgIGFzc2VydDIudHlwZW9mKG9wdFNodXRkb3duV2l0aEZhaWx1cmUsIFwiZnVuY3Rpb25cIik7XG4gIH1cbiAgaWYgKGVsZW1lbnRTaGFwZSAhPT0gdm9pZCAwKSB7XG4gICAgYXNzZXJ0UGF0dGVybihlbGVtZW50U2hhcGUpO1xuICB9XG4gIGNvbnN0IHsgaXNzdWVyLCBtaW50LCBicmFuZCwgbWludFJlY292ZXJ5UHVyc2UgfSA9IHByZXBhcmVQYXltZW50TGVkZ2VyKFxuICAgIGlzc3VlclpvbmUsXG4gICAgbmFtZSxcbiAgICBhc3NldEtpbmQsXG4gICAgY2xlYW5EaXNwbGF5SW5mbyxcbiAgICBlbGVtZW50U2hhcGUsXG4gICAgcmVjb3ZlcnlTZXRzU3RhdGUsXG4gICAgb3B0U2h1dGRvd25XaXRoRmFpbHVyZVxuICApO1xuICByZXR1cm4gaGFyZGVuKHtcbiAgICBicmFuZCxcbiAgICBpc3N1ZXIsXG4gICAgbWludCxcbiAgICBtaW50UmVjb3ZlcnlQdXJzZSxcbiAgICBkaXNwbGF5SW5mbzogY2xlYW5EaXNwbGF5SW5mb1xuICB9KTtcbn07XG5oYXJkZW4oc2V0dXBJc3N1ZXJLaXQpO1xudmFyIElOU1RBTkNFX0tFWSA9IFwiaXNzdWVyXCI7XG52YXIgUkVDT1ZFUllfU0VUU19TVEFURSA9IFwicmVjb3ZlcnlTZXRzU3RhdGVcIjtcbnZhciB1cGdyYWRlSXNzdWVyS2l0ID0gKGlzc3VlckJhZ2dhZ2UsIG9wdFNodXRkb3duV2l0aEZhaWx1cmUgPSB2b2lkIDAsIHJlY292ZXJ5U2V0c09wdGlvbiA9IHZvaWQgMCkgPT4ge1xuICBjb25zdCBpc3N1ZXJSZWNvcmQgPSBpc3N1ZXJCYWdnYWdlLmdldChJTlNUQU5DRV9LRVkpO1xuICBjb25zdCBpc3N1ZXJab25lID0gbWFrZUR1cmFibGVab25lKGlzc3VlckJhZ2dhZ2UpO1xuICBjb25zdCBvbGRSZWNvdmVyeVNldHNTdGF0ZSA9IGlzc3VlckJhZ2dhZ2UuaGFzKFJFQ09WRVJZX1NFVFNfU1RBVEUpID8gaXNzdWVyQmFnZ2FnZS5nZXQoUkVDT1ZFUllfU0VUU19TVEFURSkgOiBcImhhc1JlY292ZXJ5U2V0c1wiO1xuICBpZiAob2xkUmVjb3ZlcnlTZXRzU3RhdGUgPT09IFwibm9SZWNvdmVyeVNldHNcIiAmJiByZWNvdmVyeVNldHNPcHRpb24gPT09IFwiaGFzUmVjb3ZlcnlTZXRzXCIpIHtcbiAgICB0aHJvd1JlZGFjdGVkYENhbm5vdCAoeWV0PykgdXBncmFkZSBmcm9tICdub1JlY292ZXJ5U2V0cycgdG8gJ2hhc1JlY292ZXJ5U2V0cydgO1xuICB9XG4gIGNvbnN0IHJlY292ZXJ5U2V0c1N0YXRlID0gcmVjb3ZlcnlTZXRzT3B0aW9uIHx8IG9sZFJlY292ZXJ5U2V0c1N0YXRlO1xuICByZXR1cm4gc2V0dXBJc3N1ZXJLaXQoXG4gICAgaXNzdWVyUmVjb3JkLFxuICAgIGlzc3VlclpvbmUsXG4gICAgcmVjb3ZlcnlTZXRzU3RhdGUsXG4gICAgb3B0U2h1dGRvd25XaXRoRmFpbHVyZVxuICApO1xufTtcbmhhcmRlbih1cGdyYWRlSXNzdWVyS2l0KTtcbnZhciBoYXNJc3N1ZXIgPSAoYmFnZ2FnZSkgPT4gYmFnZ2FnZS5oYXMoSU5TVEFOQ0VfS0VZKTtcbnZhciBtYWtlRHVyYWJsZUlzc3VlcktpdCA9IChpc3N1ZXJCYWdnYWdlLCBuYW1lLCBhc3NldEtpbmQgPSBBc3NldEtpbmQuTkFULCBkaXNwbGF5SW5mbyA9IGhhcmRlbih7fSksIG9wdFNodXRkb3duV2l0aEZhaWx1cmUgPSB2b2lkIDAsIHsgZWxlbWVudFNoYXBlID0gdm9pZCAwLCByZWNvdmVyeVNldHNPcHRpb24gPSB2b2lkIDAgfSA9IHt9KSA9PiB7XG4gIGNvbnN0IGlzc3VlckRhdGEgPSBoYXJkZW4oe1xuICAgIG5hbWUsXG4gICAgYXNzZXRLaW5kLFxuICAgIGRpc3BsYXlJbmZvLFxuICAgIGVsZW1lbnRTaGFwZVxuICB9KTtcbiAgaXNzdWVyQmFnZ2FnZS5pbml0KElOU1RBTkNFX0tFWSwgaXNzdWVyRGF0YSk7XG4gIGNvbnN0IGlzc3VlclpvbmUgPSBtYWtlRHVyYWJsZVpvbmUoaXNzdWVyQmFnZ2FnZSk7XG4gIGNvbnN0IHJlY292ZXJ5U2V0c1N0YXRlID0gcmVjb3ZlcnlTZXRzT3B0aW9uIHx8IFwiaGFzUmVjb3ZlcnlTZXRzXCI7XG4gIGlzc3VlckJhZ2dhZ2UuaW5pdChSRUNPVkVSWV9TRVRTX1NUQVRFLCByZWNvdmVyeVNldHNTdGF0ZSk7XG4gIHJldHVybiBzZXR1cElzc3VlcktpdChcbiAgICBpc3N1ZXJEYXRhLFxuICAgIGlzc3VlclpvbmUsXG4gICAgcmVjb3ZlcnlTZXRzU3RhdGUsXG4gICAgb3B0U2h1dGRvd25XaXRoRmFpbHVyZVxuICApO1xufTtcbmhhcmRlbihtYWtlRHVyYWJsZUlzc3VlcktpdCk7XG52YXIgcHJlcGFyZUlzc3VlcktpdCA9IChpc3N1ZXJCYWdnYWdlLCBuYW1lLCBhc3NldEtpbmQgPSBBc3NldEtpbmQuTkFULCBkaXNwbGF5SW5mbyA9IGhhcmRlbih7fSksIG9wdFNodXRkb3duV2l0aEZhaWx1cmUgPSB2b2lkIDAsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBpZiAoaGFzSXNzdWVyKGlzc3VlckJhZ2dhZ2UpKSB7XG4gICAgY29uc3QgeyBlbGVtZW50U2hhcGU6IF8gPSB2b2lkIDAsIHJlY292ZXJ5U2V0c09wdGlvbiA9IHZvaWQgMCB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBpc3N1ZXJLaXQgPSB1cGdyYWRlSXNzdWVyS2l0KFxuICAgICAgaXNzdWVyQmFnZ2FnZSxcbiAgICAgIG9wdFNodXRkb3duV2l0aEZhaWx1cmUsXG4gICAgICByZWNvdmVyeVNldHNPcHRpb25cbiAgICApO1xuICAgIHJldHVybiBpc3N1ZXJLaXQ7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgaXNzdWVyS2l0ID0gbWFrZUR1cmFibGVJc3N1ZXJLaXQoXG4gICAgICBpc3N1ZXJCYWdnYWdlLFxuICAgICAgbmFtZSxcbiAgICAgIGFzc2V0S2luZCxcbiAgICAgIGRpc3BsYXlJbmZvLFxuICAgICAgb3B0U2h1dGRvd25XaXRoRmFpbHVyZSxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICAgIHJldHVybiBpc3N1ZXJLaXQ7XG4gIH1cbn07XG5oYXJkZW4ocHJlcGFyZUlzc3VlcktpdCk7XG52YXIgbWFrZUlzc3VlcktpdCA9IChuYW1lLCBhc3NldEtpbmQgPSBBc3NldEtpbmQuTkFULCBkaXNwbGF5SW5mbyA9IGhhcmRlbih7fSksIG9wdFNodXRkb3duV2l0aEZhaWx1cmUgPSB2b2lkIDAsIHsgZWxlbWVudFNoYXBlID0gdm9pZCAwLCByZWNvdmVyeVNldHNPcHRpb24gPSB2b2lkIDAgfSA9IHt9KSA9PiAoXG4gIC8vXG4gIG1ha2VEdXJhYmxlSXNzdWVyS2l0KFxuICAgIG1ha2VTY2FsYXJCaWdNYXBTdG9yZShcImRyb3BwZWQgaXNzdWVyIGtpdFwiLCB7IGR1cmFibGU6IHRydWUgfSksXG4gICAgbmFtZSxcbiAgICBhc3NldEtpbmQsXG4gICAgZGlzcGxheUluZm8sXG4gICAgb3B0U2h1dGRvd25XaXRoRmFpbHVyZSxcbiAgICB7IGVsZW1lbnRTaGFwZSwgcmVjb3ZlcnlTZXRzT3B0aW9uIH1cbiAgKVxuKTtcbmhhcmRlbihtYWtlSXNzdWVyS2l0KTtcblxuLy9cbnZhciBQdWJsaWNUb3BpY1NoYXBlID0gTS5zcGxpdFJlY29yZChcbiAge1xuICAgIHN1YnNjcmliZXI6IFN1YnNjcmliZXJTaGFwZSxcbiAgICBzdG9yYWdlUGF0aDogTS5vcihNLnByb21pc2UoXG4gICAgICAvKiAgICAgICAgKi9cbiAgICApLCBNLnN0cmluZygpKVxuICB9LFxuICB7IGRlc2NyaXB0aW9uOiBNLnN0cmluZygpIH1cbik7XG52YXIgVG9waWNzUmVjb3JkU2hhcGUgPSBNLnJlY29yZE9mKE0uc3RyaW5nKCksIFB1YmxpY1RvcGljU2hhcGUpO1xuXG4vL1xudmFyIHsgVm93JDogVm93JDIgfSA9IFNoYXBlO1xudmFyIG9yY2hlc3RyYXRpb25BY2NvdW50TWV0aG9kcyA9IHtcbiAgZ2V0QWRkcmVzczogTS5jYWxsKCkucmV0dXJucyhDb3Ntb3NDaGFpbkFkZHJlc3NTaGFwZSksXG4gIGdldEJhbGFuY2U6IE0uY2FsbChNLm9yKEJyYW5kU2hhcGUsIE0uc3RyaW5nKCkpKS5yZXR1cm5zKFxuICAgIFZvdyQyKERlbm9tQW1vdW50U2hhcGUpXG4gICksXG4gIGdldEJhbGFuY2VzOiBNLmNhbGwoKS5yZXR1cm5zKFZvdyQyKE0uYXJyYXlPZihEZW5vbUFtb3VudFNoYXBlKSkpLFxuICBzZW5kOiBNLmNhbGwoQWNjb3VudElkQXJnU2hhcGUsIEFtb3VudEFyZ1NoYXBlKS5yZXR1cm5zKFZvd1NoYXBlKSxcbiAgc2VuZEFsbDogTS5jYWxsKENvc21vc0NoYWluQWRkcmVzc1NoYXBlLCBNLmFycmF5T2YoQW1vdW50QXJnU2hhcGUpKS5yZXR1cm5zKFxuICAgIFZvd1NoYXBlXG4gICksXG4gIHRyYW5zZmVyOiBNLmNhbGwoQWNjb3VudElkQXJnU2hhcGUsIEFtb3VudEFyZ1NoYXBlKS5vcHRpb25hbChJQkNUcmFuc2Zlck9wdGlvbnNTaGFwZSkucmV0dXJucyhWb3dTaGFwZSksXG4gIHRyYW5zZmVyU3RlcHM6IE0uY2FsbChBbW91bnRBcmdTaGFwZSwgTS5hbnkoKSkucmV0dXJucyhWb3dTaGFwZSksXG4gIGFzQ29udGludWluZ09mZmVyOiBNLmNhbGwoKS5yZXR1cm5zKFxuICAgIFZvdyQyKHtcbiAgICAgIHB1YmxpY1N1YnNjcmliZXJzOiBUb3BpY3NSZWNvcmRTaGFwZSxcbiAgICAgIGludml0YXRpb25NYWtlcnM6IE0uYW55KCksXG4gICAgICBob2xkZXI6IE0ucmVtb3RhYmxlKClcbiAgICB9KVxuICApLFxuICBnZXRQdWJsaWNUb3BpY3M6IE0uY2FsbCgpLnJldHVybnMoVm93JDIoVG9waWNzUmVjb3JkU2hhcGUpKVxufTtcblxuLy9cbnZhciBUaW1lckJyYW5kU2hhcGUgPSBNLnJlbW90YWJsZShcIlRpbWVyQnJhbmRcIik7XG52YXIgVGltZXN0YW1wVmFsdWVTaGFwZSA9IE0ubmF0KCk7XG52YXIgUmVsYXRpdmVUaW1lVmFsdWVTaGFwZSA9IE0ubmF0KCk7XG52YXIgVGltZXN0YW1wUmVjb3JkU2hhcGUgPSB7XG4gIHRpbWVyQnJhbmQ6IFRpbWVyQnJhbmRTaGFwZSxcbiAgYWJzVmFsdWU6IFRpbWVzdGFtcFZhbHVlU2hhcGVcbn07XG5oYXJkZW4oVGltZXN0YW1wUmVjb3JkU2hhcGUpO1xudmFyIFJlbGF0aXZlVGltZVJlY29yZFNoYXBlID0ge1xuICB0aW1lckJyYW5kOiBUaW1lckJyYW5kU2hhcGUsXG4gIHJlbFZhbHVlOiBSZWxhdGl2ZVRpbWVWYWx1ZVNoYXBlXG59O1xuaGFyZGVuKFJlbGF0aXZlVGltZVJlY29yZFNoYXBlKTtcbnZhciBUaW1lc3RhbXBTaGFwZSA9IE0ub3IoVGltZXN0YW1wUmVjb3JkU2hhcGUsIFRpbWVzdGFtcFZhbHVlU2hhcGUpO1xudmFyIFJlbGF0aXZlVGltZVNoYXBlID0gTS5vcihcbiAgUmVsYXRpdmVUaW1lUmVjb3JkU2hhcGUsXG4gIFJlbGF0aXZlVGltZVZhbHVlU2hhcGVcbik7XG52YXIgVGltZXJTZXJ2aWNlU2hhcGUgPSBNLnJlbW90YWJsZShcIlRpbWVyU2VydmljZVwiKTtcblxuLy9cbnZhciBhZ3JlZWRUaW1lckJyYW5kID0gKGxlZnRCcmFuZCwgcmlnaHRCcmFuZCkgPT4ge1xuICBpZiAobGVmdEJyYW5kID09PSB2b2lkIDApIHtcbiAgICBpZiAocmlnaHRCcmFuZCA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmlnaHRCcmFuZDtcbiAgICB9XG4gIH0gZWxzZSBpZiAocmlnaHRCcmFuZCA9PT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIGxlZnRCcmFuZDtcbiAgfSBlbHNlIHtcbiAgICBsZWZ0QnJhbmQgPT09IHJpZ2h0QnJhbmQgfHwgdGhyb3dSZWRhY3RlZGBUaW1lckJyYW5kcyBtdXN0IG1hdGNoOiAke3F1b3RlKGxlZnRCcmFuZCl9IHZzICR7cXVvdGUocmlnaHRCcmFuZCl9YDtcbiAgICByZXR1cm4gbGVmdEJyYW5kO1xuICB9XG59O1xudmFyIHNoYXJlZFRpbWVyQnJhbmQgPSAobGVmdCwgcmlnaHQpID0+IHtcbiAgY29uc3QgbGVmdEJyYW5kID0gdHlwZW9mIGxlZnQgPT09IFwiYmlnaW50XCIgPyB2b2lkIDAgOiBsZWZ0LnRpbWVyQnJhbmQ7XG4gIGNvbnN0IHJpZ2h0QnJhbmQgPSB0eXBlb2YgcmlnaHQgPT09IFwiYmlnaW50XCIgPyB2b2lkIDAgOiByaWdodC50aW1lckJyYW5kO1xuICByZXR1cm4gYWdyZWVkVGltZXJCcmFuZChsZWZ0QnJhbmQsIHJpZ2h0QnJhbmQpO1xufTtcbnZhciBhYnNMaWtlID0gKGxlZnQsIHJpZ2h0LCBhYnNWYWx1ZTIpID0+IHtcbiAgTmF0KGFic1ZhbHVlMik7XG4gIGNvbnN0IHRpbWVyQnJhbmQgPSBzaGFyZWRUaW1lckJyYW5kKGxlZnQsIHJpZ2h0KTtcbiAgaWYgKHRpbWVyQnJhbmQpIHtcbiAgICByZXR1cm4gaGFyZGVuKHtcbiAgICAgIHRpbWVyQnJhbmQsXG4gICAgICBhYnNWYWx1ZTogYWJzVmFsdWUyXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGFic1ZhbHVlMjtcbiAgfVxufTtcbnZhciByZWxMaWtlID0gKGxlZnQsIHJpZ2h0LCByZWxWYWx1ZTIpID0+IHtcbiAgTmF0KHJlbFZhbHVlMik7XG4gIGNvbnN0IHRpbWVyQnJhbmQgPSBzaGFyZWRUaW1lckJyYW5kKGxlZnQsIHJpZ2h0KTtcbiAgaWYgKHRpbWVyQnJhbmQpIHtcbiAgICByZXR1cm4gaGFyZGVuKHtcbiAgICAgIHRpbWVyQnJhbmQsXG4gICAgICByZWxWYWx1ZTogcmVsVmFsdWUyXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlbFZhbHVlMjtcbiAgfVxufTtcbnZhciBhYnNWYWx1ZSA9IChhYnMpID0+IHtcbiAgaWYgKHR5cGVvZiBhYnMgPT09IFwiYmlnaW50XCIpIHtcbiAgICByZXR1cm4gTmF0KGFicyk7XG4gIH1cbiAgbXVzdE1hdGNoMihhYnMsIFRpbWVzdGFtcFJlY29yZFNoYXBlLCBcInRpbWVzdGFtcFwiKTtcbiAgcmV0dXJuIE5hdChhYnMuYWJzVmFsdWUpO1xufTtcbnZhciByZWxWYWx1ZSA9IChyZWwpID0+IHtcbiAgaWYgKHR5cGVvZiByZWwgPT09IFwiYmlnaW50XCIpIHtcbiAgICByZXR1cm4gTmF0KHJlbCk7XG4gIH1cbiAgbXVzdE1hdGNoMihyZWwsIFJlbGF0aXZlVGltZVJlY29yZFNoYXBlLCBcInJlbGF0aXZlXCIpO1xuICByZXR1cm4gTmF0KHJlbC5yZWxWYWx1ZSk7XG59O1xudmFyIG1ha2VUaW1lc3RhbXBSZWNvcmQgPSAoYWJzLCB0aW1lckJyYW5kKSA9PiBoYXJkZW4oeyBhYnNWYWx1ZTogYWJzLCB0aW1lckJyYW5kIH0pO1xudmFyIG1ha2VSZWxhdGl2ZVRpbWVSZWNvcmQgPSAocmVsLCB0aW1lckJyYW5kKSA9PiBoYXJkZW4oeyByZWxWYWx1ZTogcmVsLCB0aW1lckJyYW5kIH0pO1xudmFyIGNvZXJjZVRpbWVzdGFtcFJlY29yZCA9ICh0cywgYnJhbmQpID0+IHtcbiAgYnJhbmQgfHwgdGhyb3dSZWRhY3RlZGBtdXN0IGhhdmUgYSBicmFuZGA7XG4gIGlmICh0eXBlb2YgdHMgPT09IFwibnVtYmVyXCIpIHtcbiAgICB0cyA9IE5hdCh0cyk7XG4gIH1cbiAgaWYgKHR5cGVvZiB0cyA9PT0gXCJiaWdpbnRcIikge1xuICAgIHJldHVybiBtYWtlVGltZXN0YW1wUmVjb3JkKHRzLCBicmFuZCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgeyB0aW1lckJyYW5kIH0gPSB0cztcbiAgICBtdXN0TWF0Y2gyKHRzLCBUaW1lc3RhbXBSZWNvcmRTaGFwZSwgXCJ0aW1lc3RhbXBcIik7XG4gICAgYWdyZWVkVGltZXJCcmFuZCh0aW1lckJyYW5kLCBicmFuZCk7XG4gICAgcmV0dXJuIHRzO1xuICB9XG59O1xudmFyIGNvZXJjZVJlbGF0aXZlVGltZVJlY29yZCA9IChydCwgYnJhbmQpID0+IHtcbiAgYnJhbmQgfHwgdGhyb3dSZWRhY3RlZGBtdXN0IGhhdmUgYSBicmFuZGA7XG4gIGlmICh0eXBlb2YgcnQgPT09IFwibnVtYmVyXCIpIHtcbiAgICBydCA9IE5hdChydCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBydCA9PT0gXCJiaWdpbnRcIikge1xuICAgIHJldHVybiBtYWtlUmVsYXRpdmVUaW1lUmVjb3JkKHJ0LCBicmFuZCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgeyB0aW1lckJyYW5kIH0gPSBydDtcbiAgICBtdXN0TWF0Y2gyKHJ0LCBSZWxhdGl2ZVRpbWVSZWNvcmRTaGFwZSwgXCJyZWxhdGl2ZVRpbWVcIik7XG4gICAgYWdyZWVkVGltZXJCcmFuZCh0aW1lckJyYW5kLCBicmFuZCk7XG4gICAgcmV0dXJuIHJ0O1xuICB9XG59O1xudmFyIGFkZEFic1JlbCA9IChhYnMsIHJlbCkgPT4gYWJzTGlrZShhYnMsIHJlbCwgYWJzVmFsdWUoYWJzKSArIHJlbFZhbHVlKHJlbCkpO1xudmFyIGFkZFJlbFJlbCA9IChyZWwxLCByZWwyKSA9PiByZWxMaWtlKHJlbDEsIHJlbDIsIHJlbFZhbHVlKHJlbDEpICsgcmVsVmFsdWUocmVsMikpO1xudmFyIHN1YnRyYWN0QWJzQWJzID0gKGFiczEsIGFiczIpID0+IHJlbExpa2UoYWJzMSwgYWJzMiwgYWJzVmFsdWUoYWJzMSkgLSBhYnNWYWx1ZShhYnMyKSk7XG52YXIgY2xhbXBlZFN1YnRyYWN0QWJzQWJzID0gKGFiczEsIGFiczIpID0+IHtcbiAgY29uc3QgdmFsMSA9IGFic1ZhbHVlKGFiczEpO1xuICBjb25zdCB2YWwyID0gYWJzVmFsdWUoYWJzMik7XG4gIHJldHVybiByZWxMaWtlKGFiczEsIGFiczIsIHZhbDEgPiB2YWwyID8gdmFsMSAtIHZhbDIgOiAwbik7XG59O1xudmFyIHN1YnRyYWN0QWJzUmVsID0gKGFicywgcmVsKSA9PiBhYnNMaWtlKGFicywgcmVsLCBhYnNWYWx1ZShhYnMpIC0gcmVsVmFsdWUocmVsKSk7XG52YXIgc3VidHJhY3RSZWxSZWwgPSAocmVsMSwgcmVsMikgPT4gcmVsTGlrZShyZWwxLCByZWwyLCByZWxWYWx1ZShyZWwxKSAtIHJlbFZhbHVlKHJlbDIpKTtcbnZhciBpc1JlbFplcm8gPSAocmVsKSA9PiByZWxWYWx1ZShyZWwpID09PSAwbjtcbnZhciBtdWx0aXBseVJlbE5hdCA9IChyZWwsIG5hdCkgPT4gcmVsTGlrZShyZWwsIG5hdCwgcmVsVmFsdWUocmVsKSAqIG5hdCk7XG52YXIgZGl2aWRlUmVsTmF0ID0gKHJlbCwgbmF0KSA9PiByZWxMaWtlKHJlbCwgbmF0LCByZWxWYWx1ZShyZWwpIC8gbmF0KTtcbnZhciBkaXZpZGVSZWxSZWwgPSAocmVsMSwgcmVsMikgPT4ge1xuICBzaGFyZWRUaW1lckJyYW5kKHJlbDEsIHJlbDIpO1xuICByZXR1cm4gcmVsVmFsdWUocmVsMSkgLyByZWxWYWx1ZShyZWwyKTtcbn07XG52YXIgbW9kQWJzUmVsID0gKGFicywgc3RlcCkgPT4gcmVsTGlrZShhYnMsIHN0ZXAsIGFic1ZhbHVlKGFicykgJSByZWxWYWx1ZShzdGVwKSk7XG52YXIgbW9kUmVsUmVsID0gKHJlbCwgc3RlcCkgPT4gcmVsTGlrZShyZWwsIHN0ZXAsIHJlbFZhbHVlKHJlbCkgJSByZWxWYWx1ZShzdGVwKSk7XG52YXIgY29tcGFyZVZhbHVlcyA9IChsZWZ0LCByaWdodCwgdjEsIHYyKSA9PiB7XG4gIHNoYXJlZFRpbWVyQnJhbmQobGVmdCwgcmlnaHQpO1xuICBpZiAodjEgPCB2Mikge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIGlmICh2MSA9PT0gdjIpIHtcbiAgICByZXR1cm4gMDtcbiAgfSBlbHNlIHtcbiAgICBhc3NlcnQodjEgPiB2Mik7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn07XG52YXIgVGltZU1hdGggPSBoYXJkZW4oe1xuICBhYnNWYWx1ZSxcbiAgcmVsVmFsdWUsXG4gIGNvZXJjZVRpbWVzdGFtcFJlY29yZCxcbiAgY29lcmNlUmVsYXRpdmVUaW1lUmVjb3JkLFxuICAvL1xuICBhZGRBYnNSZWwsXG4gIC8vXG4gIGFkZFJlbFJlbCxcbiAgc3VidHJhY3RBYnNBYnMsXG4gIGNsYW1wZWRTdWJ0cmFjdEFic0FicyxcbiAgc3VidHJhY3RBYnNSZWwsXG4gIHN1YnRyYWN0UmVsUmVsLFxuICBpc1JlbFplcm8sXG4gIG11bHRpcGx5UmVsTmF0LFxuICBkaXZpZGVSZWxOYXQsXG4gIGRpdmlkZVJlbFJlbCxcbiAgbW9kQWJzUmVsLFxuICBtb2RSZWxSZWwsXG4gIGNvbXBhcmVBYnM6IChhYnMxLCBhYnMyKSA9PiBjb21wYXJlVmFsdWVzKGFiczEsIGFiczIsIGFic1ZhbHVlKGFiczEpLCBhYnNWYWx1ZShhYnMyKSksXG4gIGNvbXBhcmVSZWw6IChyZWwxLCByZWwyKSA9PiBjb21wYXJlVmFsdWVzKHJlbDEsIHJlbDIsIHJlbFZhbHVlKHJlbDEpLCByZWxWYWx1ZShyZWwyKSlcbn0pO1xuXG4vL1xudmFyIFNFQ09ORFNfUEVSX01JTlVURSA9IDYwbjtcbnZhciBOQU5PU0VDT05EU19QRVJfU0VDT05EID0gMTAwMDAwMDAwMG47XG5mdW5jdGlvbiBtYWtlVGltZXN0YW1wSGVscGVyKHRpbWVyKSB7XG4gIGNvbnN0IHNlbGYgPSBoYXJkZW4oe1xuICAgIC8qXG5cblxuXG5cblxuXG5cblxuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VGltZW91dFRpbWVzdGFtcE5TKHNlY29uZHNJbkZ1dHVyZSA9IFNFQ09ORFNfUEVSX01JTlVURSAqIDVuKSB7XG4gICAgICBjb25zdCBjdXJyZW50VGltZSA9IGF3YWl0IEUodGltZXIpLmdldEN1cnJlbnRUaW1lc3RhbXAoKTtcbiAgICAgIGNvbnN0IHRpbWVvdXQgPSBUaW1lTWF0aC5jb2VyY2VSZWxhdGl2ZVRpbWVSZWNvcmQoXG4gICAgICAgIHNlY29uZHNJbkZ1dHVyZSxcbiAgICAgICAgY3VycmVudFRpbWUudGltZXJCcmFuZFxuICAgICAgKTtcbiAgICAgIHJldHVybiBUaW1lTWF0aC5hZGRBYnNSZWwoY3VycmVudFRpbWUsIHRpbWVvdXQpLmFic1ZhbHVlICogTkFOT1NFQ09ORFNfUEVSX1NFQ09ORDtcbiAgICB9LFxuICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgdm93T3JWYWx1ZUZyb21PcHRzKG9wdHMpIHtcbiAgICAgIGlmIChvcHRzICYmIFwidGltZW91dFRpbWVzdGFtcFwiIGluIG9wdHMpIHJldHVybiBvcHRzLnRpbWVvdXRUaW1lc3RhbXA7XG4gICAgICBpZiAob3B0cyAmJiBcInRpbWVvdXRIZWlnaHRcIiBpbiBvcHRzKSByZXR1cm4gMG47XG4gICAgICByZXR1cm4gc2VsZi5nZXRUaW1lb3V0VGltZXN0YW1wTlMoXG4gICAgICAgIG9wdHMgJiYgXCJ0aW1lb3V0UmVsYXRpdmVTZWNvbmRzXCIgaW4gb3B0cyA/IG9wdHMudGltZW91dFJlbGF0aXZlU2Vjb25kcyA6IHZvaWQgMFxuICAgICAgKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc2VsZjtcbn1cblxuLy9cbnZhciB0cmFjZTMgPSBtYWtlVHJhY2VyKFwiQ29zbW9zT3JjaEFjY291bnRcIik7XG52YXIgeyBWb3ckOiBWb3ckMyB9ID0gU2hhcGU7XG52YXIgZGVjb2RlSWNxUmVzdWx0ID0gKGNvZGVjLCByZXN1bHQpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBieXRlczIgPSBkZWNvZGVCYXNlNjQocmVzdWx0LmtleSB8fCByZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjb2RlYy5kZWNvZGUoYnl0ZXMyKTtcbiAgfSBjYXRjaCAoY2F1c2UpIHtcbiAgICB0aHJvdyBtYWtlRXJyb3IoXG4gICAgICBgRmFpbGVkIHRvIHBhcnNlICR7Y29kZWMudHlwZVVybH0gZnJvbSByZXN1bHQgJHtxdW90ZShyZXN1bHQpfWAsXG4gICAgICB2b2lkIDAsXG4gICAgICB7IGNhdXNlIH1cbiAgICApO1xuICB9XG59O1xudmFyIHN0YWtpbmdBY2NvdW50QWN0aW9uc01ldGhvZHMgPSB7XG4gIGRlbGVnYXRlOiBNLmNhbGwoQ29zbW9zQ2hhaW5BZGRyZXNzU2hhcGUsIEFtb3VudEFyZ1NoYXBlKS5yZXR1cm5zKFZvd1NoYXBlKSxcbiAgcmVkZWxlZ2F0ZTogTS5jYWxsKFxuICAgIENvc21vc0NoYWluQWRkcmVzc1NoYXBlLFxuICAgIENvc21vc0NoYWluQWRkcmVzc1NoYXBlLFxuICAgIEFtb3VudEFyZ1NoYXBlXG4gICkucmV0dXJucyhWb3dTaGFwZSksXG4gIHVuZGVsZWdhdGU6IE0uY2FsbChNLmFycmF5T2YoRGVsZWdhdGlvblNoYXBlKSkucmV0dXJucyhWb3dTaGFwZSksXG4gIHdpdGhkcmF3UmV3YXJkOiBNLmNhbGwoQ29zbW9zQ2hhaW5BZGRyZXNzU2hhcGUpLnJldHVybnMoXG4gICAgVm93JDMoTS5hcnJheU9mKERlbm9tQW1vdW50U2hhcGUpKVxuICApLFxuICB3aXRoZHJhd1Jld2FyZHM6IE0uY2FsbCgpLnJldHVybnMoVm93JDMoTS5hcnJheU9mKERlbm9tQW1vdW50U2hhcGUpKSlcbn07XG52YXIgc3Rha2luZ0FjY291bnRRdWVyaWVzTWV0aG9kcyA9IHtcbiAgZ2V0RGVsZWdhdGlvbjogTS5jYWxsKENvc21vc0NoYWluQWRkcmVzc1NoYXBlKS5yZXR1cm5zKFZvd1NoYXBlKSxcbiAgZ2V0RGVsZWdhdGlvbnM6IE0uY2FsbCgpLnJldHVybnMoVm93U2hhcGUpLFxuICBnZXRVbmJvbmRpbmdEZWxlZ2F0aW9uOiBNLmNhbGwoQ29zbW9zQ2hhaW5BZGRyZXNzU2hhcGUpLnJldHVybnMoVm93U2hhcGUpLFxuICBnZXRVbmJvbmRpbmdEZWxlZ2F0aW9uczogTS5jYWxsKCkucmV0dXJucyhWb3dTaGFwZSksXG4gIGdldFJlZGVsZWdhdGlvbnM6IE0uY2FsbCgpLnJldHVybnMoVm93U2hhcGUpLFxuICBnZXRSZXdhcmQ6IE0uY2FsbChDb3Ntb3NDaGFpbkFkZHJlc3NTaGFwZSkucmV0dXJucyhWb3dTaGFwZSksXG4gIGdldFJld2FyZHM6IE0uY2FsbCgpLnJldHVybnMoVm93U2hhcGUpXG59O1xudmFyIG5vYmxlTWV0aG9kcyA9IHtcbiAgZGVwb3NpdEZvckJ1cm46IE0uY2FsbChNLnN0cmluZygpLCBBbW91bnRBcmdTaGFwZSkub3B0aW9uYWwoTS5zdHJpbmcoKSkucmV0dXJucyhWb3dTaGFwZSlcbn07XG52YXIgSWNhQWNjb3VudEhvbGRlckkgPSBNLmludGVyZmFjZShcIkljYUFjY291bnRIb2xkZXJcIiwge1xuICAuLi5ub2JsZU1ldGhvZHMsXG4gIC4uLm9yY2hlc3RyYXRpb25BY2NvdW50TWV0aG9kcyxcbiAgLi4uc3Rha2luZ0FjY291bnRBY3Rpb25zTWV0aG9kcyxcbiAgLi4uc3Rha2luZ0FjY291bnRRdWVyaWVzTWV0aG9kcyxcbiAgZGVhY3RpdmF0ZTogTS5jYWxsKCkucmV0dXJucyhWb3dTaGFwZSksXG4gIHJlYWN0aXZhdGU6IE0uY2FsbCgpLnJldHVybnMoVm93U2hhcGUpLFxuICBleGVjdXRlRW5jb2RlZFR4OiBNLmNhbGwoTS5hcnJheU9mKFByb3RvM1NoYXBlKSkub3B0aW9uYWwoRXhlY3V0ZUlDQVR4T3B0c1NoYXBlKS5yZXR1cm5zKFZvd1NoYXBlKVxufSk7XG52YXIgUFVCTElDX1RPUElDUyA9IHtcbiAgYWNjb3VudDogW1wiU3Rha2luZyBBY2NvdW50IGhvbGRlciBzdGF0dXNcIiwgTS5hbnkoKV1cbn07XG52YXIgQ29zbW9zT3JjaGVzdHJhdGlvbkludml0YXRpb25NYWtlcnNJID0gTS5pbnRlcmZhY2UoXG4gIFwiaW52aXRhdGlvbk1ha2Vyc1wiLFxuICB7XG4gICAgRGVsZWdhdGU6IE0uY2FsbChDb3Ntb3NDaGFpbkFkZHJlc3NTaGFwZSwgQW1vdW50QXJnU2hhcGUpLnJldHVybnMoXG4gICAgICBNLnByb21pc2UoKVxuICAgICksXG4gICAgUmVkZWxlZ2F0ZTogTS5jYWxsKFxuICAgICAgQ29zbW9zQ2hhaW5BZGRyZXNzU2hhcGUsXG4gICAgICBDb3Ntb3NDaGFpbkFkZHJlc3NTaGFwZSxcbiAgICAgIEFtb3VudEFyZ1NoYXBlXG4gICAgKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgICBXaXRoZHJhd1Jld2FyZDogTS5jYWxsKENvc21vc0NoYWluQWRkcmVzc1NoYXBlKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgICBVbmRlbGVnYXRlOiBNLmNhbGwoTS5hcnJheU9mKERlbGVnYXRpb25TaGFwZSkpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICAgIERlYWN0aXZhdGVBY2NvdW50OiBNLmNhbGwoKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgICBSZWFjdGl2YXRlQWNjb3VudDogTS5jYWxsKCkucmV0dXJucyhNLnByb21pc2UoKSksXG4gICAgVHJhbnNmZXJBY2NvdW50OiBNLmNhbGwoKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgICBTZW5kOiBNLmNhbGwoKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgICBTZW5kQWxsOiBNLmNhbGwoKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgICBUcmFuc2ZlcjogTS5jYWxsKCkucmV0dXJucyhNLnByb21pc2UoKSlcbiAgfVxuKTtcbmhhcmRlbihDb3Ntb3NPcmNoZXN0cmF0aW9uSW52aXRhdGlvbk1ha2Vyc0kpO1xudmFyIHByZXBhcmVDb3Ntb3NPcmNoZXN0cmF0aW9uQWNjb3VudEtpdCA9ICh6b25lLCB7XG4gIGNoYWluSHViLFxuICBtYWtlUmVjb3JkZXJLaXQsXG4gIHRpbWVyU2VydmljZSxcbiAgdm93VG9vbHM6IHsgd2F0Y2gsIGFzVm93LCB3aGVuLCBhbGxWb3dzIH0sXG4gIHpjZlxufSkgPT4ge1xuICBjb25zdCB0aW1lc3RhbXBIZWxwZXIgPSBtYWtlVGltZXN0YW1wSGVscGVyKHRpbWVyU2VydmljZSk7XG4gIGNvbnN0IG1ha2VDb3Ntb3NPcmNoZXN0cmF0aW9uQWNjb3VudEtpdCA9IHpvbmUuZXhvQ2xhc3NLaXQoXG4gICAgXCJDb3Ntb3MgT3JjaGVzdHJhdGlvbiBBY2NvdW50IEhvbGRlclwiLFxuICAgIHtcbiAgICAgIGhlbHBlcjogTS5pbnRlcmZhY2UoXCJoZWxwZXJcIiwge1xuICAgICAgICBvd25lZDogTS5jYWxsKCkucmV0dXJucyhNLnJlbW90YWJsZSgpKSxcbiAgICAgICAgZ2V0VXBkYXRlcjogTS5jYWxsKCkucmV0dXJucyhNLnJlbW90YWJsZSgpKSxcbiAgICAgICAgYW1vdW50VG9Db2luOiBNLmNhbGwoQW1vdW50QXJnU2hhcGUpLnJldHVybnMoTS5yZWNvcmQoKSlcbiAgICAgIH0pLFxuICAgICAgcmV0dXJuVm9pZFdhdGNoZXI6IE0uaW50ZXJmYWNlKFwicmV0dXJuVm9pZFdhdGNoZXJcIiwge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uYW55KCkpLm9wdGlvbmFsKE0uYXJyYXlPZihNLnVuZGVmaW5lZCgpKSkucmV0dXJucyhNLnVuZGVmaW5lZCgpKVxuICAgICAgfSksXG4gICAgICBiYWxhbmNlUXVlcnlXYXRjaGVyOiBNLmludGVyZmFjZShcImJhbGFuY2VRdWVyeVdhdGNoZXJcIiwge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uYXJyYXlPZihNLnJlY29yZCgpKSkub3B0aW9uYWwoTS5hcnJheU9mKE0udW5kZWZpbmVkKCkpKS5yZXR1cm5zKE0ub3IoTS5yZWNvcmQoKSwgTS51bmRlZmluZWQoKSkpXG4gICAgICB9KSxcbiAgICAgIGFsbEJhbGFuY2VzUXVlcnlXYXRjaGVyOiBNLmludGVyZmFjZShcImFsbEJhbGFuY2VzUXVlcnlXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFycmF5T2YoTS5yZWNvcmQoKSkpLnJldHVybnMoXG4gICAgICAgICAgTS5hcnJheU9mKE0ucmVjb3JkKCkpXG4gICAgICAgIClcbiAgICAgIH0pLFxuICAgICAgdW5kZWxlZ2F0ZVdhdGNoZXI6IE0uaW50ZXJmYWNlKFwidW5kZWxlZ2F0ZVdhdGNoZXJcIiwge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uc3RyaW5nKCkpLm9wdGlvbmFsKE0uYXJyYXlPZihNLnVuZGVmaW5lZCgpKSkucmV0dXJucyhWb3ckMyhNLnByb21pc2UoKSkpXG4gICAgICB9KSxcbiAgICAgIHdpdGhkcmF3UmV3YXJkV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJ3aXRoZHJhd1Jld2FyZFdhdGNoZXJcIiwge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uc3RyaW5nKCkpLm9wdGlvbmFsKE0uYXJyYXlPZihNLnVuZGVmaW5lZCgpKSkucmV0dXJucyhNLmFycmF5T2YoRGVub21BbW91bnRTaGFwZSkpXG4gICAgICB9KSxcbiAgICAgIHRyYW5zZmVyV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJ0cmFuc2ZlcldhdGNoZXJcIiwge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKFtNLnJlY29yZCgpLCBNLm5hdCgpXSkub3B0aW9uYWwoe1xuICAgICAgICAgIGRlc3RpbmF0aW9uOiBDb3Ntb3NDaGFpbkFkZHJlc3NTaGFwZSxcbiAgICAgICAgICBvcHRzOiBNLm9yKE0udW5kZWZpbmVkKCksIElCQ1RyYW5zZmVyT3B0aW9uc1NoYXBlKSxcbiAgICAgICAgICB0b2tlbjoge1xuICAgICAgICAgICAgZGVub206IE0uc3RyaW5nKCksXG4gICAgICAgICAgICBhbW91bnQ6IE0uc3RyaW5nKClcbiAgICAgICAgICB9XG4gICAgICAgIH0pLnJldHVybnMoVm93JDMoTS5yZWNvcmQoKSkpXG4gICAgICB9KSxcbiAgICAgIGRlbGVnYXRpb25RdWVyeVdhdGNoZXI6IE0uaW50ZXJmYWNlKFwiZGVsZWdhdGlvblF1ZXJ5V2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hcnJheU9mKE0ucmVjb3JkKCkpKS5yZXR1cm5zKE0ucmVjb3JkKCkpXG4gICAgICB9KSxcbiAgICAgIGRlbGVnYXRpb25zUXVlcnlXYXRjaGVyOiBNLmludGVyZmFjZShcImRlbGVnYXRpb25zUXVlcnlXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFycmF5T2YoTS5yZWNvcmQoKSkpLnJldHVybnMoXG4gICAgICAgICAgTS5hcnJheU9mKE0ucmVjb3JkKCkpXG4gICAgICAgIClcbiAgICAgIH0pLFxuICAgICAgdW5ib25kaW5nRGVsZWdhdGlvblF1ZXJ5V2F0Y2hlcjogTS5pbnRlcmZhY2UoXG4gICAgICAgIFwidW5ib25kaW5nRGVsZWdhdGlvblF1ZXJ5V2F0Y2hlclwiLFxuICAgICAgICB7XG4gICAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFycmF5T2YoTS5yZWNvcmQoKSkpLnJldHVybnMoTS5yZWNvcmQoKSlcbiAgICAgICAgfVxuICAgICAgKSxcbiAgICAgIHVuYm9uZGluZ0RlbGVnYXRpb25zUXVlcnlXYXRjaGVyOiBNLmludGVyZmFjZShcbiAgICAgICAgXCJ1bmJvbmRpbmdEZWxlZ2F0aW9uc1F1ZXJ5V2F0Y2hlclwiLFxuICAgICAgICB7XG4gICAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFycmF5T2YoTS5yZWNvcmQoKSkpLnJldHVybnMoXG4gICAgICAgICAgICBNLmFycmF5T2YoTS5yZWNvcmQoKSlcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICksXG4gICAgICByZWRlbGVnYXRpb25RdWVyeVdhdGNoZXI6IE0uaW50ZXJmYWNlKFwicmVkZWxlZ2F0aW9uUXVlcnlXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFycmF5T2YoTS5yZWNvcmQoKSkpLnJldHVybnMoXG4gICAgICAgICAgTS5hcnJheU9mKE0ucmVjb3JkKCkpXG4gICAgICAgIClcbiAgICAgIH0pLFxuICAgICAgcmVkZWxlZ2F0aW9uc1F1ZXJ5V2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJyZWRlbGVnYXRpb25zUXVlcnlXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFycmF5T2YoTS5yZWNvcmQoKSkpLnJldHVybnMoXG4gICAgICAgICAgTS5hcnJheU9mKE0ucmVjb3JkKCkpXG4gICAgICAgIClcbiAgICAgIH0pLFxuICAgICAgcmV3YXJkUXVlcnlXYXRjaGVyOiBNLmludGVyZmFjZShcInJld2FyZFF1ZXJ5V2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hcnJheU9mKE0ucmVjb3JkKCkpKS5yZXR1cm5zKFxuICAgICAgICAgIE0uYXJyYXlPZihNLnJlY29yZCgpKVxuICAgICAgICApXG4gICAgICB9KSxcbiAgICAgIHJld2FyZHNRdWVyeVdhdGNoZXI6IE0uaW50ZXJmYWNlKFwicmV3YXJkc1F1ZXJ5V2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hcnJheU9mKE0ucmVjb3JkKCkpKS5yZXR1cm5zKE0ucmVjb3JkKCkpXG4gICAgICB9KSxcbiAgICAgIGhvbGRlcjogSWNhQWNjb3VudEhvbGRlckksXG4gICAgICBpbnZpdGF0aW9uTWFrZXJzOiBDb3Ntb3NPcmNoZXN0cmF0aW9uSW52aXRhdGlvbk1ha2Vyc0lcbiAgICB9LFxuICAgIC8qXG5cblxuXG5cblxuXG5cblxuXG5cbiAgICAgKi9cbiAgICAoeyBjaGFpbkFkZHJlc3MsIGxvY2FsQWRkcmVzcywgcmVtb3RlQWRkcmVzcyB9LCBpbykgPT4ge1xuICAgICAgdHJhY2UzKFwiY29zbW9zIG9yY2ggYWNjdCBpbml0XCIsIHtcbiAgICAgICAgY2hhaW5BZGRyZXNzLFxuICAgICAgICBsb2NhbEFkZHJlc3MsXG4gICAgICAgIHJlbW90ZUFkZHJlc3NcbiAgICAgIH0pO1xuICAgICAgY29uc3QgeyBzdG9yYWdlTm9kZSB9ID0gaW87XG4gICAgICBjb25zdCB0b3BpY0tpdCA9IHN0b3JhZ2VOb2RlID8gbWFrZVJlY29yZGVyS2l0KHN0b3JhZ2VOb2RlLCBQVUJMSUNfVE9QSUNTLmFjY291bnRbMV0pIDogdm9pZCAwO1xuICAgICAgaWYgKHRvcGljS2l0KSB7XG4gICAgICAgIHZvaWQgRSh0b3BpY0tpdC5yZWNvcmRlcikud3JpdGUoXG4gICAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICB7XG4gICAgICAgICAgICBsb2NhbEFkZHJlc3MsXG4gICAgICAgICAgICByZW1vdGVBZGRyZXNzXG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBhY2NvdW50LCBpY3FDb25uZWN0aW9uLCB0aW1lciB9ID0gaW87XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhY2NvdW50LFxuICAgICAgICBjaGFpbkFkZHJlc3MsXG4gICAgICAgIGljcUNvbm5lY3Rpb24sXG4gICAgICAgIGxvY2FsQWRkcmVzcyxcbiAgICAgICAgcmVtb3RlQWRkcmVzcyxcbiAgICAgICAgdGltZXIsXG4gICAgICAgIHRvcGljS2l0XG4gICAgICB9O1xuICAgIH0sXG4gICAge1xuICAgICAgaGVscGVyOiB7XG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIG93bmVkKCkge1xuICAgICAgICAgIGNvbnN0IHsgYWNjb3VudCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBpZiAoIWFjY291bnQpIHtcbiAgICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgVXNpbmcgYWNjb3VudCBob2xkZXIgYWZ0ZXIgdHJhbnNmZXJgO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYWNjb3VudDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0VXBkYXRlcigpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuc3RhdGUudG9waWNLaXQpIHRocm93IHRocm93UmVkYWN0ZWRgbm8gdG9waWNLaXRgO1xuICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlLnRvcGljS2l0LnJlY29yZGVyO1xuICAgICAgICB9LFxuICAgICAgICAvKlxuXG5cbiAgICAgICAgICovXG4gICAgICAgIGFtb3VudFRvQ29pbihhbW91bnQpIHtcbiAgICAgICAgICAhKFwiYnJhbmRcIiBpbiBhbW91bnQpIHx8IHRocm93UmVkYWN0ZWRgJ2Ftb3VudFRvQ29pbicgbm90IHdvcmtpbmcgZm9yICR7cXVvdGUoYW1vdW50LmJyYW5kKX0gdW50aWwgIzEwNDQ5OyB1c2UgJ0Rlbm9tQW1vdW50JyBmb3Igbm93YDtcbiAgICAgICAgICByZXR1cm4gY29lcmNlQ29pbihjaGFpbkh1YiwgYW1vdW50KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGJhbGFuY2VRdWVyeVdhdGNoZXI6IHtcbiAgICAgICAgLypcblxuICAgICAgICAgKi9cbiAgICAgICAgb25GdWxmaWxsZWQoW3Jlc3VsdF0pIHtcbiAgICAgICAgICBjb25zdCB7IGJhbGFuY2UgfSA9IGRlY29kZUljcVJlc3VsdChRdWVyeUJhbGFuY2VSZXNwb25zZSwgcmVzdWx0KTtcbiAgICAgICAgICBpZiAoIWJhbGFuY2UpIHRocm93IHRocm93UmVkYWN0ZWRgUmVzdWx0IGxhY2tlZCBiYWxhbmNlIGtleTogJHtyZXN1bHR9YDtcbiAgICAgICAgICByZXR1cm4gaGFyZGVuKHRvRGVub21BbW91bnQoYmFsYW5jZSkpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVsZWdhdGlvblF1ZXJ5V2F0Y2hlcjoge1xuICAgICAgICAvKlxuXG5cbiAgICAgICAgICovXG4gICAgICAgIG9uRnVsZmlsbGVkKFtyZXN1bHRdKSB7XG4gICAgICAgICAgY29uc3QgeyBkZWxlZ2F0aW9uUmVzcG9uc2UgfSA9IGRlY29kZUljcVJlc3VsdChcbiAgICAgICAgICAgIFF1ZXJ5RGVsZWdhdGlvblJlc3BvbnNlLFxuICAgICAgICAgICAgcmVzdWx0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoIWRlbGVnYXRpb25SZXNwb25zZSlcbiAgICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgUmVzdWx0IGxhY2tlZCBkZWxlZ2F0aW9uUmVzcG9uc2Uga2V5OiAke3Jlc3VsdH1gO1xuICAgICAgICAgIGNvbnN0IHsgY2hhaW5BZGRyZXNzIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIHJldHVybiBoYXJkZW4oXG4gICAgICAgICAgICB0b0Nvc21vc0RlbGVnYXRpb25SZXNwb25zZShjaGFpbkFkZHJlc3MsIGRlbGVnYXRpb25SZXNwb25zZSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVsZWdhdGlvbnNRdWVyeVdhdGNoZXI6IHtcbiAgICAgICAgLypcblxuXG4gICAgICAgICAqL1xuICAgICAgICBvbkZ1bGZpbGxlZChbcmVzdWx0XSkge1xuICAgICAgICAgIGNvbnN0IHsgZGVsZWdhdGlvblJlc3BvbnNlcyB9ID0gZGVjb2RlSWNxUmVzdWx0KFxuICAgICAgICAgICAgUXVlcnlEZWxlZ2F0b3JEZWxlZ2F0aW9uc1Jlc3BvbnNlLFxuICAgICAgICAgICAgcmVzdWx0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoIWRlbGVnYXRpb25SZXNwb25zZXMpXG4gICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFJlc3VsdCBsYWNrZWQgZGVsZWdhdGlvblJlc3BvbnNlcyBrZXk6ICR7cmVzdWx0fWA7XG4gICAgICAgICAgY29uc3QgeyBjaGFpbkFkZHJlc3MgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbihcbiAgICAgICAgICAgIGRlbGVnYXRpb25SZXNwb25zZXMubWFwKFxuICAgICAgICAgICAgICAocjUpID0+IHRvQ29zbW9zRGVsZWdhdGlvblJlc3BvbnNlKGNoYWluQWRkcmVzcywgcjUpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHVuYm9uZGluZ0RlbGVnYXRpb25RdWVyeVdhdGNoZXI6IHtcbiAgICAgICAgLypcblxuICAgICAgICAgKi9cbiAgICAgICAgb25GdWxmaWxsZWQoW3Jlc3VsdF0pIHtcbiAgICAgICAgICBjb25zdCB7IHVuYm9uZCB9ID0gZGVjb2RlSWNxUmVzdWx0KFxuICAgICAgICAgICAgUXVlcnlVbmJvbmRpbmdEZWxlZ2F0aW9uUmVzcG9uc2UsXG4gICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmICghdW5ib25kKSB0aHJvdyB0aHJvd1JlZGFjdGVkYFJlc3VsdCBsYWNrZWQgdW5ib25kIGtleTogJHtyZXN1bHR9YDtcbiAgICAgICAgICByZXR1cm4gaGFyZGVuKHVuYm9uZCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1bmJvbmRpbmdEZWxlZ2F0aW9uc1F1ZXJ5V2F0Y2hlcjoge1xuICAgICAgICAvKlxuXG4gICAgICAgICAqL1xuICAgICAgICBvbkZ1bGZpbGxlZChbcmVzdWx0XSkge1xuICAgICAgICAgIGNvbnN0IHsgdW5ib25kaW5nUmVzcG9uc2VzIH0gPSBkZWNvZGVJY3FSZXN1bHQoXG4gICAgICAgICAgICBRdWVyeURlbGVnYXRvclVuYm9uZGluZ0RlbGVnYXRpb25zUmVzcG9uc2UsXG4gICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmICghdW5ib25kaW5nUmVzcG9uc2VzKVxuICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBSZXN1bHQgbGFja2VkIHVuYm9uZGluZ1Jlc3BvbnNlcyBrZXk6ICR7cmVzdWx0fWA7XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbih1bmJvbmRpbmdSZXNwb25zZXMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVkZWxlZ2F0aW9uUXVlcnlXYXRjaGVyOiB7XG4gICAgICAgIC8qXG5cbiAgICAgICAgICovXG4gICAgICAgIG9uRnVsZmlsbGVkKFtyZXN1bHRdKSB7XG4gICAgICAgICAgY29uc3QgeyByZWRlbGVnYXRpb25SZXNwb25zZXMgfSA9IGRlY29kZUljcVJlc3VsdChcbiAgICAgICAgICAgIFF1ZXJ5UmVkZWxlZ2F0aW9uc1Jlc3BvbnNlLFxuICAgICAgICAgICAgcmVzdWx0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoIXJlZGVsZWdhdGlvblJlc3BvbnNlcylcbiAgICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgUmVzdWx0IGxhY2tlZCByZWRlbGVnYXRpb25SZXNwb25zZXMga2V5OiAke3Jlc3VsdH1gO1xuICAgICAgICAgIHJldHVybiBoYXJkZW4ocmVkZWxlZ2F0aW9uUmVzcG9uc2VzKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlZGVsZWdhdGlvbnNRdWVyeVdhdGNoZXI6IHtcbiAgICAgICAgLypcblxuICAgICAgICAgKi9cbiAgICAgICAgb25GdWxmaWxsZWQoW3Jlc3VsdF0pIHtcbiAgICAgICAgICBjb25zdCB7IHJlZGVsZWdhdGlvblJlc3BvbnNlcyB9ID0gZGVjb2RlSWNxUmVzdWx0KFxuICAgICAgICAgICAgUXVlcnlSZWRlbGVnYXRpb25zUmVzcG9uc2UsXG4gICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmICghcmVkZWxlZ2F0aW9uUmVzcG9uc2VzKVxuICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBSZXN1bHQgbGFja2VkIHJlZGVsZWdhdGlvblJlc3BvbnNlcyBrZXk6ICR7cmVzdWx0fWA7XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbihyZWRlbGVnYXRpb25SZXNwb25zZXMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmV3YXJkUXVlcnlXYXRjaGVyOiB7XG4gICAgICAgIC8qXG5cbiAgICAgICAgICovXG4gICAgICAgIG9uRnVsZmlsbGVkKFtyZXN1bHRdKSB7XG4gICAgICAgICAgY29uc3QgeyByZXdhcmRzIH0gPSBkZWNvZGVJY3FSZXN1bHQoXG4gICAgICAgICAgICBRdWVyeURlbGVnYXRpb25SZXdhcmRzUmVzcG9uc2UsXG4gICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmICghcmV3YXJkcykgdGhyb3cgdGhyb3dSZWRhY3RlZGBSZXN1bHQgbGFja2VkIHJld2FyZHMga2V5OiAke3Jlc3VsdH1gO1xuICAgICAgICAgIHJldHVybiBoYXJkZW4ocmV3YXJkcy5tYXAodG9UcnVuY2F0ZWREZW5vbUFtb3VudCkpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmV3YXJkc1F1ZXJ5V2F0Y2hlcjoge1xuICAgICAgICAvKlxuXG5cbiAgICAgICAgICovXG4gICAgICAgIG9uRnVsZmlsbGVkKFtyZXN1bHRdKSB7XG4gICAgICAgICAgY29uc3QgeyByZXdhcmRzLCB0b3RhbCB9ID0gZGVjb2RlSWNxUmVzdWx0KFxuICAgICAgICAgICAgUXVlcnlEZWxlZ2F0aW9uVG90YWxSZXdhcmRzUmVzcG9uc2UsXG4gICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmICghcmV3YXJkcyB8fCAhdG90YWwpXG4gICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFJlc3VsdCBsYWNrZWQgcmV3YXJkcyBvciB0b3RhbCBrZXk6ICR7cmVzdWx0fWA7XG4gICAgICAgICAgY29uc3QgeyBjaGFpbkFkZHJlc3MgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbih7XG4gICAgICAgICAgICByZXdhcmRzOiByZXdhcmRzLm1hcCgocmV3YXJkKSA9PiAoe1xuICAgICAgICAgICAgICB2YWxpZGF0b3I6IHRvQ29zbW9zVmFsaWRhdG9yQWRkcmVzcyhyZXdhcmQsIGNoYWluQWRkcmVzcy5jaGFpbklkKSxcbiAgICAgICAgICAgICAgcmV3YXJkOiByZXdhcmQucmV3YXJkLm1hcCh0b1RydW5jYXRlZERlbm9tQW1vdW50KVxuICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgdG90YWw6IHRvdGFsLm1hcCh0b1RydW5jYXRlZERlbm9tQW1vdW50KVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYWxsQmFsYW5jZXNRdWVyeVdhdGNoZXI6IHtcbiAgICAgICAgLypcblxuICAgICAgICAgKi9cbiAgICAgICAgb25GdWxmaWxsZWQoW3Jlc3VsdF0pIHtcbiAgICAgICAgICBjb25zdCB7IGJhbGFuY2VzIH0gPSBkZWNvZGVJY3FSZXN1bHQoXG4gICAgICAgICAgICBRdWVyeUFsbEJhbGFuY2VzUmVzcG9uc2UsXG4gICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmICghYmFsYW5jZXMpIHRocm93IHRocm93UmVkYWN0ZWRgUmVzdWx0IGxhY2tlZCBiYWxhbmNlcyBrZXk6ICR7cXVvdGUocmVzdWx0KX1gO1xuICAgICAgICAgIHJldHVybiBoYXJkZW4oYmFsYW5jZXMubWFwKChjb2luKSA9PiB0b0Rlbm9tQW1vdW50KGNvaW4pKSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1bmRlbGVnYXRlV2F0Y2hlcjoge1xuICAgICAgICAvKlxuXG4gICAgICAgICAqL1xuICAgICAgICBvbkZ1bGZpbGxlZChyZXN1bHQpIHtcbiAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRyeURlY29kZVJlc3BvbnNlKFxuICAgICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgICAgTXNnVW5kZWxlZ2F0ZVJlc3BvbnNlLmZyb21Qcm90b01zZ1xuICAgICAgICAgICk7XG4gICAgICAgICAgdHJhY2UzKFwidW5kZWxlZ2F0ZSByZXNwb25zZVwiLCByZXNwb25zZSk7XG4gICAgICAgICAgY29uc3QgeyBjb21wbGV0aW9uVGltZSB9ID0gcmVzcG9uc2U7XG4gICAgICAgICAgY29tcGxldGlvblRpbWUgfHwgdGhyb3dSZWRhY3RlZGBObyBjb21wbGV0aW9uIHRpbWUgcmVzdWx0ICR7cmVzdWx0fWA7XG4gICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIEUodGhpcy5zdGF0ZS50aW1lcikud2FrZUF0KGNvbXBsZXRpb25UaW1lLnNlY29uZHMgKyBtYXhDbG9ja1NrZXcpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8qXG5cblxuICAgICAgICovXG4gICAgICByZXR1cm5Wb2lkV2F0Y2hlcjoge1xuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIG9uRnVsZmlsbGVkKHJlc3VsdCkge1xuICAgICAgICAgIHRyYWNlMyhcIlJlc3VsdFwiLCByZXN1bHQpO1xuICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB3aXRoZHJhd1Jld2FyZFdhdGNoZXI6IHtcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgb25GdWxmaWxsZWQocmVzdWx0KSB7XG4gICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB0cnlEZWNvZGVSZXNwb25zZShcbiAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgIE1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkUmVzcG9uc2UuZnJvbVByb3RvTXNnXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0cmFjZTMoXCJ3aXRoZHJhd1Jld2FyZCByZXNwb25zZVwiLCByZXNwb25zZSk7XG4gICAgICAgICAgY29uc3QgeyBhbW91bnQ6IGNvaW5zIH0gPSByZXNwb25zZTtcbiAgICAgICAgICByZXR1cm4gaGFyZGVuKGNvaW5zLm1hcCh0b0Rlbm9tQW1vdW50KSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0cmFuc2ZlcldhdGNoZXI6IHtcbiAgICAgICAgLypcblxuXG5cblxuXG5cblxuXG5cbiAgICAgICAgICovXG4gICAgICAgIG9uRnVsZmlsbGVkKFt7IHRyYW5zZmVyQ2hhbm5lbCB9LCB0aW1lb3V0VGltZXN0YW1wXSwgeyBvcHRzLCB0b2tlbjogdG9rZW4yLCBkZXN0aW5hdGlvbiB9KSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0cyA9IEUodGhpcy5mYWNldHMuaGVscGVyLm93bmVkKCkpLmV4ZWN1dGVFbmNvZGVkVHgoW1xuICAgICAgICAgICAgQW55LnRvSlNPTihcbiAgICAgICAgICAgICAgTXNnVHJhbnNmZXIudG9Qcm90b01zZyh7XG4gICAgICAgICAgICAgICAgc291cmNlUG9ydDogdHJhbnNmZXJDaGFubmVsLnBvcnRJZCxcbiAgICAgICAgICAgICAgICBzb3VyY2VDaGFubmVsOiB0cmFuc2ZlckNoYW5uZWwuY2hhbm5lbElkLFxuICAgICAgICAgICAgICAgIHRva2VuOiB0b2tlbjIsXG4gICAgICAgICAgICAgICAgc2VuZGVyOiB0aGlzLnN0YXRlLmNoYWluQWRkcmVzcy52YWx1ZSxcbiAgICAgICAgICAgICAgICByZWNlaXZlcjogZGVzdGluYXRpb24udmFsdWUsXG4gICAgICAgICAgICAgICAgdGltZW91dEhlaWdodDogb3B0cz8udGltZW91dEhlaWdodCA/PyB7XG4gICAgICAgICAgICAgICAgICByZXZpc2lvbkhlaWdodDogMG4sXG4gICAgICAgICAgICAgICAgICByZXZpc2lvbk51bWJlcjogMG5cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRpbWVvdXRUaW1lc3RhbXAsXG4gICAgICAgICAgICAgICAgbWVtbzogb3B0cz8ubWVtbyA/PyBcIlwiXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG4gICAgICAgICAgcmV0dXJuIHdhdGNoKHJlc3VsdHMsIHRoaXMuZmFjZXRzLnJldHVyblZvaWRXYXRjaGVyKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGludml0YXRpb25NYWtlcnM6IHtcbiAgICAgICAgLypcblxuXG4gICAgICAgICAqL1xuICAgICAgICBEZWxlZ2F0ZSh2YWxpZGF0b3IsIGFtb3VudCkge1xuICAgICAgICAgIHRyYWNlMyhcIkRlbGVnYXRlXCIsIHZhbGlkYXRvciwgYW1vdW50KTtcbiAgICAgICAgICByZXR1cm4gemNmLm1ha2VJbnZpdGF0aW9uKChzZWF0KSA9PiB7XG4gICAgICAgICAgICBzZWF0LmV4aXQoKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaCh0aGlzLmZhY2V0cy5ob2xkZXIuZGVsZWdhdGUodmFsaWRhdG9yLCBhbW91bnQpKTtcbiAgICAgICAgICB9LCBcIkRlbGVnYXRlXCIpO1xuICAgICAgICB9LFxuICAgICAgICAvKlxuXG5cblxuICAgICAgICAgKi9cbiAgICAgICAgUmVkZWxlZ2F0ZShzcmNWYWxpZGF0b3IsIGRzdFZhbGlkYXRvciwgYW1vdW50KSB7XG4gICAgICAgICAgdHJhY2UzKFwiUmVkZWxlZ2F0ZVwiLCBzcmNWYWxpZGF0b3IsIGRzdFZhbGlkYXRvciwgYW1vdW50KTtcbiAgICAgICAgICByZXR1cm4gemNmLm1ha2VJbnZpdGF0aW9uKChzZWF0KSA9PiB7XG4gICAgICAgICAgICBzZWF0LmV4aXQoKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICAgICAgdGhpcy5mYWNldHMuaG9sZGVyLnJlZGVsZWdhdGUoc3JjVmFsaWRhdG9yLCBkc3RWYWxpZGF0b3IsIGFtb3VudClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSwgXCJSZWRlbGVnYXRlXCIpO1xuICAgICAgICB9LFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgV2l0aGRyYXdSZXdhcmQodmFsaWRhdG9yKSB7XG4gICAgICAgICAgdHJhY2UzKFwiV2l0aGRyYXdSZXdhcmRcIiwgdmFsaWRhdG9yKTtcbiAgICAgICAgICByZXR1cm4gemNmLm1ha2VJbnZpdGF0aW9uKChzZWF0KSA9PiB7XG4gICAgICAgICAgICBzZWF0LmV4aXQoKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaCh0aGlzLmZhY2V0cy5ob2xkZXIud2l0aGRyYXdSZXdhcmQodmFsaWRhdG9yKSk7XG4gICAgICAgICAgfSwgXCJXaXRoZHJhd1Jld2FyZFwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgLypcblxuXG5cblxuICAgICAgICAgKi9cbiAgICAgICAgVW5kZWxlZ2F0ZShkZWxlZ2F0aW9ucykge1xuICAgICAgICAgIHRyYWNlMyhcIlVuZGVsZWdhdGVcIiwgZGVsZWdhdGlvbnMpO1xuICAgICAgICAgIHJldHVybiB6Y2YubWFrZUludml0YXRpb24oKHNlYXQpID0+IHtcbiAgICAgICAgICAgIHNlYXQuZXhpdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKHRoaXMuZmFjZXRzLmhvbGRlci51bmRlbGVnYXRlKGRlbGVnYXRpb25zKSk7XG4gICAgICAgICAgfSwgXCJVbmRlbGVnYXRlXCIpO1xuICAgICAgICB9LFxuICAgICAgICBEZWFjdGl2YXRlQWNjb3VudCgpIHtcbiAgICAgICAgICByZXR1cm4gemNmLm1ha2VJbnZpdGF0aW9uKChzZWF0KSA9PiB7XG4gICAgICAgICAgICBzZWF0LmV4aXQoKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaCh0aGlzLmZhY2V0cy5ob2xkZXIuZGVhY3RpdmF0ZSgpKTtcbiAgICAgICAgICB9LCBcIkRlYWN0aXZhdGVBY2NvdW50XCIpO1xuICAgICAgICB9LFxuICAgICAgICBSZWFjdGl2YXRlQWNjb3VudCgpIHtcbiAgICAgICAgICByZXR1cm4gemNmLm1ha2VJbnZpdGF0aW9uKChzZWF0KSA9PiB7XG4gICAgICAgICAgICBzZWF0LmV4aXQoKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaCh0aGlzLmZhY2V0cy5ob2xkZXIucmVhY3RpdmF0ZSgpKTtcbiAgICAgICAgICB9LCBcIlJlYWN0aXZhdGVBY2NvdW50XCIpO1xuICAgICAgICB9LFxuICAgICAgICBTZW5kKCkge1xuICAgICAgICAgIGNvbnN0IG9mZmVySGFuZGxlciA9IChzZWF0LCB7IHRvQWNjb3VudCwgYW1vdW50IH0pID0+IHtcbiAgICAgICAgICAgIHNlYXQuZXhpdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKHRoaXMuZmFjZXRzLmhvbGRlci5zZW5kKHRvQWNjb3VudCwgYW1vdW50KSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gemNmLm1ha2VJbnZpdGF0aW9uKG9mZmVySGFuZGxlciwgXCJTZW5kXCIpO1xuICAgICAgICB9LFxuICAgICAgICBTZW5kQWxsKCkge1xuICAgICAgICAgIGNvbnN0IG9mZmVySGFuZGxlciA9IChzZWF0LCB7IHRvQWNjb3VudCwgYW1vdW50cyB9KSA9PiB7XG4gICAgICAgICAgICBzZWF0LmV4aXQoKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaCh0aGlzLmZhY2V0cy5ob2xkZXIuc2VuZEFsbCh0b0FjY291bnQsIGFtb3VudHMpKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiB6Y2YubWFrZUludml0YXRpb24ob2ZmZXJIYW5kbGVyLCBcIlNlbmRBbGxcIik7XG4gICAgICAgIH0sXG4gICAgICAgIC8qXG5cblxuXG4gICAgICAgICAqL1xuICAgICAgICBUcmFuc2ZlckFjY291bnQoKSB7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoXCJub3QgeWV0IGltcGxlbWVudGVkXCIpO1xuICAgICAgICB9LFxuICAgICAgICBUcmFuc2ZlcigpIHtcbiAgICAgICAgICBjb25zdCBvZmZlckhhbmRsZXIgPSAoc2VhdCwgeyBhbW91bnQsIGRlc3RpbmF0aW9uLCBvcHRzIH0pID0+IHtcbiAgICAgICAgICAgIHNlYXQuZXhpdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgICB0aGlzLmZhY2V0cy5ob2xkZXIudHJhbnNmZXIoZGVzdGluYXRpb24sIGFtb3VudCwgb3B0cylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gemNmLm1ha2VJbnZpdGF0aW9uKG9mZmVySGFuZGxlciwgXCJUcmFuc2ZlclwiKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGhvbGRlcjoge1xuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIGFzQ29udGludWluZ09mZmVyKCkge1xuICAgICAgICAgIHJldHVybiBhc1Zvdyhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBhd2FpdCBudWxsO1xuICAgICAgICAgICAgY29uc3QgeyBob2xkZXIsIGludml0YXRpb25NYWtlcnM6IGltIH0gPSB0aGlzLmZhY2V0cztcbiAgICAgICAgICAgIGNvbnN0IGludml0YXRpb25NYWtlcnMgPSAoXG4gICAgICAgICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgLyogICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICBpbVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiBoYXJkZW4oe1xuICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICBwdWJsaWNTdWJzY3JpYmVyczogYXdhaXQgd2hlbihob2xkZXIuZ2V0UHVibGljVG9waWNzKCkpLFxuICAgICAgICAgICAgICBpbnZpdGF0aW9uTWFrZXJzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgZ2V0UHVibGljVG9waWNzKCkge1xuICAgICAgICAgIHJldHVybiBhc1Zvdyhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBhd2FpdCBudWxsO1xuICAgICAgICAgICAgY29uc3QgeyB0b3BpY0tpdCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIGlmICghdG9waWNLaXQpIHRocm93IHRocm93UmVkYWN0ZWRgTm8gdG9waWNLaXQ7IHN0b3JhZ2VOb2RlIG5vdCBwcm92aWRlZGA7XG4gICAgICAgICAgICByZXR1cm4gaGFyZGVuKHtcbiAgICAgICAgICAgICAgYWNjb3VudDoge1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBQVUJMSUNfVE9QSUNTLmFjY291bnRbMF0sXG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlcjogdG9waWNLaXQuc3Vic2NyaWJlcixcbiAgICAgICAgICAgICAgICBzdG9yYWdlUGF0aDogYXdhaXQgdG9waWNLaXQucmVjb3JkZXIuZ2V0U3RvcmFnZVBhdGgoKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIGdldEFkZHJlc3MoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuY2hhaW5BZGRyZXNzO1xuICAgICAgICB9LFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICBkZWxlZ2F0ZSh2YWxpZGF0b3IsIGFtb3VudCkge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICB0cmFjZTMoXCJkZWxlZ2F0ZVwiLCB2YWxpZGF0b3IsIGFtb3VudCk7XG4gICAgICAgICAgICBjb25zdCB7IGhlbHBlciB9ID0gdGhpcy5mYWNldHM7XG4gICAgICAgICAgICBjb25zdCB7IGNoYWluQWRkcmVzcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIGNvbnN0IGFtb3VudEFzQ29pbiA9IGhlbHBlci5hbW91bnRUb0NvaW4oYW1vdW50KTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBFKGhlbHBlci5vd25lZCgpKS5leGVjdXRlRW5jb2RlZFR4KFtcbiAgICAgICAgICAgICAgQW55LnRvSlNPTihcbiAgICAgICAgICAgICAgICBNc2dEZWxlZ2F0ZS50b1Byb3RvTXNnKHtcbiAgICAgICAgICAgICAgICAgIGRlbGVnYXRvckFkZHJlc3M6IGNoYWluQWRkcmVzcy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgIHZhbGlkYXRvckFkZHJlc3M6IHZhbGlkYXRvci52YWx1ZSxcbiAgICAgICAgICAgICAgICAgIGFtb3VudDogYW1vdW50QXNDb2luXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2gocmVzdWx0cywgdGhpcy5mYWNldHMucmV0dXJuVm9pZFdhdGNoZXIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIHJlZGVsZWdhdGUoc3JjVmFsaWRhdG9yLCBkc3RWYWxpZGF0b3IsIGFtb3VudCkge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICB0cmFjZTMoXCJyZWRlbGVnYXRlXCIsIHNyY1ZhbGlkYXRvciwgZHN0VmFsaWRhdG9yLCBhbW91bnQpO1xuICAgICAgICAgICAgY29uc3QgeyBoZWxwZXIgfSA9IHRoaXMuZmFjZXRzO1xuICAgICAgICAgICAgY29uc3QgeyBjaGFpbkFkZHJlc3MgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICBjb25zdCByZXN1bHRzID0gRShoZWxwZXIub3duZWQoKSkuZXhlY3V0ZUVuY29kZWRUeChbXG4gICAgICAgICAgICAgIEFueS50b0pTT04oXG4gICAgICAgICAgICAgICAgTXNnQmVnaW5SZWRlbGVnYXRlLnRvUHJvdG9Nc2coe1xuICAgICAgICAgICAgICAgICAgZGVsZWdhdG9yQWRkcmVzczogY2hhaW5BZGRyZXNzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yU3JjQWRkcmVzczogc3JjVmFsaWRhdG9yLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yRHN0QWRkcmVzczogZHN0VmFsaWRhdG9yLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgYW1vdW50OiBoZWxwZXIuYW1vdW50VG9Db2luKGFtb3VudClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICAgICAgcmVzdWx0cyxcbiAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgdGhpcy5mYWNldHMucmV0dXJuVm9pZFdhdGNoZXJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIHdpdGhkcmF3UmV3YXJkKHZhbGlkYXRvcikge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICB0cmFjZTMoXCJ3aXRoZHJhd1Jld2FyZFwiLCB2YWxpZGF0b3IpO1xuICAgICAgICAgICAgY29uc3QgeyBoZWxwZXIgfSA9IHRoaXMuZmFjZXRzO1xuICAgICAgICAgICAgY29uc3QgeyBjaGFpbkFkZHJlc3MgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBNc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZC50b1Byb3RvTXNnKHtcbiAgICAgICAgICAgICAgZGVsZWdhdG9yQWRkcmVzczogY2hhaW5BZGRyZXNzLnZhbHVlLFxuICAgICAgICAgICAgICB2YWxpZGF0b3JBZGRyZXNzOiB2YWxpZGF0b3IudmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgYWNjb3VudCA9IGhlbHBlci5vd25lZCgpO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0cyA9IEUoYWNjb3VudCkuZXhlY3V0ZUVuY29kZWRUeChbQW55LnRvSlNPTihtc2cpXSk7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2gocmVzdWx0cywgdGhpcy5mYWNldHMud2l0aGRyYXdSZXdhcmRXYXRjaGVyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIGdldEJhbGFuY2UoZGVub20pIHtcbiAgICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBjaGFpbkFkZHJlc3MsIGljcUNvbm5lY3Rpb24gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICBpZiAoIWljcUNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBRdWVyaWVzIG5vdCBhdmFpbGFibGUgZm9yIGNoYWluICR7cXVvdGUoY2hhaW5BZGRyZXNzLmNoYWluSWQpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXN1bHRzID0gRShpY3FDb25uZWN0aW9uKS5xdWVyeShbXG4gICAgICAgICAgICAgIHRvUmVxdWVzdFF1ZXJ5SnNvbihcbiAgICAgICAgICAgICAgICBRdWVyeUJhbGFuY2VSZXF1ZXN0LnRvUHJvdG9Nc2coe1xuICAgICAgICAgICAgICAgICAgYWRkcmVzczogY2hhaW5BZGRyZXNzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgZGVub206IGNvZXJjZURlbm9tKGNoYWluSHViLCBkZW5vbSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaChyZXN1bHRzLCB0aGlzLmZhY2V0cy5iYWxhbmNlUXVlcnlXYXRjaGVyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICBnZXRCYWxhbmNlcygpIHtcbiAgICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBjaGFpbkFkZHJlc3MsIGljcUNvbm5lY3Rpb24gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICBpZiAoIWljcUNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBRdWVyaWVzIG5vdCBhdmFpbGFibGUgZm9yIGNoYWluICR7cXVvdGUoY2hhaW5BZGRyZXNzLmNoYWluSWQpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXN1bHRzID0gRShpY3FDb25uZWN0aW9uKS5xdWVyeShbXG4gICAgICAgICAgICAgIHRvUmVxdWVzdFF1ZXJ5SnNvbihcbiAgICAgICAgICAgICAgICBRdWVyeUFsbEJhbGFuY2VzUmVxdWVzdC50b1Byb3RvTXNnKHtcbiAgICAgICAgICAgICAgICAgIGFkZHJlc3M6IGNoYWluQWRkcmVzcy52YWx1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKHJlc3VsdHMsIHRoaXMuZmFjZXRzLmFsbEJhbGFuY2VzUXVlcnlXYXRjaGVyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIHNlbmQodG9BY2NvdW50LCBhbW91bnQpIHtcbiAgICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgICAgdHJhY2UzKFwic2VuZFwiLCB0b0FjY291bnQsIGFtb3VudCk7XG4gICAgICAgICAgICBjb25zdCBjb3Ntb3NEZXN0ID0gY2hhaW5IdWIuY29lcmNlQ29zbW9zQWRkcmVzcyh0b0FjY291bnQpO1xuICAgICAgICAgICAgY29uc3QgeyBjaGFpbkFkZHJlc3MgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICBjb3Ntb3NEZXN0LmNoYWluSWQgPT09IGNoYWluQWRkcmVzcy5jaGFpbklkIHx8IHRocm93UmVkYWN0ZWRgYmFuay9zZW5kIGNhbm5vdCBzZW5kIHRvIGEgZGlmZmVyZW50IGNoYWluICR7cXVvdGUoY29zbW9zRGVzdC5jaGFpbklkKX1gO1xuICAgICAgICAgICAgY29uc3QgeyBoZWxwZXIgfSA9IHRoaXMuZmFjZXRzO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgICBFKGhlbHBlci5vd25lZCgpKS5leGVjdXRlRW5jb2RlZFR4KFtcbiAgICAgICAgICAgICAgICBBbnkudG9KU09OKFxuICAgICAgICAgICAgICAgICAgTXNnU2VuZC50b1Byb3RvTXNnKHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbUFkZHJlc3M6IGNoYWluQWRkcmVzcy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgdG9BZGRyZXNzOiBjb3Ntb3NEZXN0LnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IFtoZWxwZXIuYW1vdW50VG9Db2luKGFtb3VudCldXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIHRoaXMuZmFjZXRzLnJldHVyblZvaWRXYXRjaGVyXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgc2VuZEFsbCh0b0FjY291bnQsIGFtb3VudHMpIHtcbiAgICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgICAgdHJhY2UzKFwic2VuZEFsbFwiLCB0b0FjY291bnQsIGFtb3VudHMpO1xuICAgICAgICAgICAgY29uc3QgeyBoZWxwZXIgfSA9IHRoaXMuZmFjZXRzO1xuICAgICAgICAgICAgY29uc3QgeyBjaGFpbkFkZHJlc3MgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICAgIEUoaGVscGVyLm93bmVkKCkpLmV4ZWN1dGVFbmNvZGVkVHgoW1xuICAgICAgICAgICAgICAgIEFueS50b0pTT04oXG4gICAgICAgICAgICAgICAgICBNc2dTZW5kLnRvUHJvdG9Nc2coe1xuICAgICAgICAgICAgICAgICAgICBmcm9tQWRkcmVzczogY2hhaW5BZGRyZXNzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB0b0FkZHJlc3M6IHRvQWNjb3VudC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBhbW91bnRzLm1hcCgoeCkgPT4gaGVscGVyLmFtb3VudFRvQ29pbih4KSlcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgdGhpcy5mYWNldHMucmV0dXJuVm9pZFdhdGNoZXJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgdHJhbnNmZXIoZGVzdGluYXRpb24sIGFtb3VudCwgb3B0cykge1xuICAgICAgICAgIHRyYWNlMyhcInRyYW5zZmVyXCIsIGRlc3RpbmF0aW9uLCBhbW91bnQsIG9wdHMpO1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb3Ntb3NEZXN0ID0gY2hhaW5IdWIuY29lcmNlQ29zbW9zQWRkcmVzcyhkZXN0aW5hdGlvbik7XG4gICAgICAgICAgICBjb25zdCB7IGhlbHBlciB9ID0gdGhpcy5mYWNldHM7XG4gICAgICAgICAgICBjb25zdCB0b2tlbjIgPSBoZWxwZXIuYW1vdW50VG9Db2luKGFtb3VudCk7XG4gICAgICAgICAgICBjb25zdCBjb25uZWN0aW9uSW5mb1YgPSB3YXRjaChcbiAgICAgICAgICAgICAgY2hhaW5IdWIuZ2V0Q29ubmVjdGlvbkluZm8oXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5jaGFpbkFkZHJlc3MuY2hhaW5JZCxcbiAgICAgICAgICAgICAgICBjb3Ntb3NEZXN0LmNoYWluSWRcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICAgICAgYWxsVm93cyhbXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbkluZm9WLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcEhlbHBlci52b3dPclZhbHVlRnJvbU9wdHMob3B0cylcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIHRoaXMuZmFjZXRzLnRyYW5zZmVyV2F0Y2hlcixcbiAgICAgICAgICAgICAgeyBvcHRzLCB0b2tlbjogdG9rZW4yLCBkZXN0aW5hdGlvbjogY29zbW9zRGVzdCB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgdHJhbnNmZXJTdGVwcyhhbW91bnQsIG1zZykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwidHJhbnNmZXJTdGVwcyBnb3RcIiwgYW1vdW50LCBtc2cpO1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB0aHJvd1JlZGFjdGVkYG5vdCB5ZXQgaW1wbGVtZW50ZWRgKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIHdpdGhkcmF3UmV3YXJkcygpIHtcbiAgICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4gdGhyb3dSZWRhY3RlZGBOb3QgSW1wbGVtZW50ZWQuIFRyeSB1c2luZyB3aXRoZHJhd1Jld2FyZC5gKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICB1bmRlbGVnYXRlKGRlbGVnYXRpb25zKSB7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICAgIHRyYWNlMyhcInVuZGVsZWdhdGVcIiwgZGVsZWdhdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgeyBoZWxwZXIgfSA9IHRoaXMuZmFjZXRzO1xuICAgICAgICAgICAgY29uc3QgeyBjaGFpbkFkZHJlc3MgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICBkZWxlZ2F0aW9ucy5ldmVyeShcbiAgICAgICAgICAgICAgKGQpID0+IGQuZGVsZWdhdG9yID8gZC5kZWxlZ2F0b3IudmFsdWUgPT09IGNoYWluQWRkcmVzcy52YWx1ZSA6IHRydWVcbiAgICAgICAgICAgICkgfHwgdGhyb3dSZWRhY3RlZGBTb21lIGRlbGVnYXRpb24gcmVjb3JkIGlzIGZvciBhbm90aGVyIGRlbGVnYXRvcmA7XG4gICAgICAgICAgICBjb25zdCB1bmRlbGVnYXRlViA9IHdhdGNoKFxuICAgICAgICAgICAgICBFKGhlbHBlci5vd25lZCgpKS5leGVjdXRlRW5jb2RlZFR4KFxuICAgICAgICAgICAgICAgIGRlbGVnYXRpb25zLm1hcChcbiAgICAgICAgICAgICAgICAgICh7IHZhbGlkYXRvciwgYW1vdW50IH0pID0+IEFueS50b0pTT04oXG4gICAgICAgICAgICAgICAgICAgIE1zZ1VuZGVsZWdhdGUudG9Qcm90b01zZyh7XG4gICAgICAgICAgICAgICAgICAgICAgZGVsZWdhdG9yQWRkcmVzczogY2hhaW5BZGRyZXNzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvckFkZHJlc3M6IHZhbGlkYXRvci52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGNvZXJjZUNvaW4oY2hhaW5IdWIsIGFtb3VudClcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIHRoaXMuZmFjZXRzLnVuZGVsZWdhdGVXYXRjaGVyXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKHVuZGVsZWdhdGVWLCB0aGlzLmZhY2V0cy5yZXR1cm5Wb2lkV2F0Y2hlcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIGRlYWN0aXZhdGUoKSB7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHdhdGNoKEUodGhpcy5mYWNldHMuaGVscGVyLm93bmVkKCkpLmRlYWN0aXZhdGUoKSkpO1xuICAgICAgICB9LFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICByZWFjdGl2YXRlKCkge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB3YXRjaChFKHRoaXMuZmFjZXRzLmhlbHBlci5vd25lZCgpKS5yZWFjdGl2YXRlKCkpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICBnZXREZWxlZ2F0aW9uKHZhbGlkYXRvcikge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICB0cmFjZTMoXCJnZXREZWxlZ2F0aW9uXCIsIHZhbGlkYXRvcik7XG4gICAgICAgICAgICBjb25zdCB7IGNoYWluQWRkcmVzcywgaWNxQ29ubmVjdGlvbiB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIGlmICghaWNxQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFF1ZXJpZXMgbm90IGF2YWlsYWJsZSBmb3IgY2hhaW4gJHtxdW90ZShjaGFpbkFkZHJlc3MuY2hhaW5JZCl9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBFKGljcUNvbm5lY3Rpb24pLnF1ZXJ5KFtcbiAgICAgICAgICAgICAgdG9SZXF1ZXN0UXVlcnlKc29uKFxuICAgICAgICAgICAgICAgIFF1ZXJ5RGVsZWdhdGlvblJlcXVlc3QudG9Qcm90b01zZyh7XG4gICAgICAgICAgICAgICAgICBkZWxlZ2F0b3JBZGRyOiBjaGFpbkFkZHJlc3MudmFsdWUsXG4gICAgICAgICAgICAgICAgICB2YWxpZGF0b3JBZGRyOiB2YWxpZGF0b3IudmFsdWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaChyZXN1bHRzLCB0aGlzLmZhY2V0cy5kZWxlZ2F0aW9uUXVlcnlXYXRjaGVyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgZ2V0RGVsZWdhdGlvbnMoKSB7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICAgIHRyYWNlMyhcImdldERlbGVnYXRpb25zXCIpO1xuICAgICAgICAgICAgY29uc3QgeyBjaGFpbkFkZHJlc3MsIGljcUNvbm5lY3Rpb24gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICBpZiAoIWljcUNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBRdWVyaWVzIG5vdCBhdmFpbGFibGUgZm9yIGNoYWluICR7cXVvdGUoY2hhaW5BZGRyZXNzLmNoYWluSWQpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXN1bHRzID0gRShpY3FDb25uZWN0aW9uKS5xdWVyeShbXG4gICAgICAgICAgICAgIHRvUmVxdWVzdFF1ZXJ5SnNvbihcbiAgICAgICAgICAgICAgICBRdWVyeURlbGVnYXRvckRlbGVnYXRpb25zUmVxdWVzdC50b1Byb3RvTXNnKHtcbiAgICAgICAgICAgICAgICAgIGRlbGVnYXRvckFkZHI6IGNoYWluQWRkcmVzcy52YWx1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKHJlc3VsdHMsIHRoaXMuZmFjZXRzLmRlbGVnYXRpb25zUXVlcnlXYXRjaGVyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICBnZXRVbmJvbmRpbmdEZWxlZ2F0aW9uKHZhbGlkYXRvcikge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICB0cmFjZTMoXCJnZXRVbmJvbmRpbmdEZWxlZ2F0aW9uXCIsIHZhbGlkYXRvcik7XG4gICAgICAgICAgICBjb25zdCB7IGNoYWluQWRkcmVzcywgaWNxQ29ubmVjdGlvbiB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIGlmICghaWNxQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYFF1ZXJpZXMgbm90IGF2YWlsYWJsZSBmb3IgY2hhaW4gJHtxdW90ZShjaGFpbkFkZHJlc3MuY2hhaW5JZCl9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBFKGljcUNvbm5lY3Rpb24pLnF1ZXJ5KFtcbiAgICAgICAgICAgICAgdG9SZXF1ZXN0UXVlcnlKc29uKFxuICAgICAgICAgICAgICAgIFF1ZXJ5VW5ib25kaW5nRGVsZWdhdGlvblJlcXVlc3QudG9Qcm90b01zZyh7XG4gICAgICAgICAgICAgICAgICBkZWxlZ2F0b3JBZGRyOiBjaGFpbkFkZHJlc3MudmFsdWUsXG4gICAgICAgICAgICAgICAgICB2YWxpZGF0b3JBZGRyOiB2YWxpZGF0b3IudmFsdWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaChyZXN1bHRzLCB0aGlzLmZhY2V0cy51bmJvbmRpbmdEZWxlZ2F0aW9uUXVlcnlXYXRjaGVyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgZ2V0VW5ib25kaW5nRGVsZWdhdGlvbnMoKSB7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICAgIHRyYWNlMyhcImdldFVuYm9uZGluZ0RlbGVnYXRpb25zXCIpO1xuICAgICAgICAgICAgY29uc3QgeyBjaGFpbkFkZHJlc3MsIGljcUNvbm5lY3Rpb24gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICBpZiAoIWljcUNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBRdWVyaWVzIG5vdCBhdmFpbGFibGUgZm9yIGNoYWluICR7cXVvdGUoY2hhaW5BZGRyZXNzLmNoYWluSWQpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXN1bHRzID0gRShpY3FDb25uZWN0aW9uKS5xdWVyeShbXG4gICAgICAgICAgICAgIHRvUmVxdWVzdFF1ZXJ5SnNvbihcbiAgICAgICAgICAgICAgICBRdWVyeURlbGVnYXRvclVuYm9uZGluZ0RlbGVnYXRpb25zUmVxdWVzdC50b1Byb3RvTXNnKHtcbiAgICAgICAgICAgICAgICAgIGRlbGVnYXRvckFkZHI6IGNoYWluQWRkcmVzcy52YWx1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKHJlc3VsdHMsIHRoaXMuZmFjZXRzLnVuYm9uZGluZ0RlbGVnYXRpb25zUXVlcnlXYXRjaGVyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICBnZXRSZWRlbGVnYXRpb25zKCkge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICB0cmFjZTMoXCJnZXRSZWRlbGVnYXRpb25zXCIpO1xuICAgICAgICAgICAgY29uc3QgeyBjaGFpbkFkZHJlc3MsIGljcUNvbm5lY3Rpb24gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICBpZiAoIWljcUNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBRdWVyaWVzIG5vdCBhdmFpbGFibGUgZm9yIGNoYWluICR7cXVvdGUoY2hhaW5BZGRyZXNzLmNoYWluSWQpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXN1bHRzID0gRShpY3FDb25uZWN0aW9uKS5xdWVyeShbXG4gICAgICAgICAgICAgIHRvUmVxdWVzdFF1ZXJ5SnNvbihcbiAgICAgICAgICAgICAgICBRdWVyeVJlZGVsZWdhdGlvbnNSZXF1ZXN0LnRvUHJvdG9Nc2coe1xuICAgICAgICAgICAgICAgICAgZGVsZWdhdG9yQWRkcjogY2hhaW5BZGRyZXNzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgIGRzdFZhbGlkYXRvckFkZHI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICBzcmNWYWxpZGF0b3JBZGRyOiBcIlwiXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2gocmVzdWx0cywgdGhpcy5mYWNldHMucmVkZWxlZ2F0aW9uc1F1ZXJ5V2F0Y2hlcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICBnZXRSZXdhcmQodmFsaWRhdG9yKSB7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICAgIHRyYWNlMyhcImdldFJld2FyZFwiLCB2YWxpZGF0b3IpO1xuICAgICAgICAgICAgY29uc3QgeyBjaGFpbkFkZHJlc3MsIGljcUNvbm5lY3Rpb24gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICBpZiAoIWljcUNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBRdWVyaWVzIG5vdCBhdmFpbGFibGUgZm9yIGNoYWluICR7cXVvdGUoY2hhaW5BZGRyZXNzLmNoYWluSWQpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZXN1bHRzID0gRShpY3FDb25uZWN0aW9uKS5xdWVyeShbXG4gICAgICAgICAgICAgIHRvUmVxdWVzdFF1ZXJ5SnNvbihcbiAgICAgICAgICAgICAgICBRdWVyeURlbGVnYXRpb25SZXdhcmRzUmVxdWVzdC50b1Byb3RvTXNnKHtcbiAgICAgICAgICAgICAgICAgIGRlbGVnYXRvckFkZHJlc3M6IGNoYWluQWRkcmVzcy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgIHZhbGlkYXRvckFkZHJlc3M6IHZhbGlkYXRvci52YWx1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKHJlc3VsdHMsIHRoaXMuZmFjZXRzLnJld2FyZFF1ZXJ5V2F0Y2hlcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgZ2V0UmV3YXJkcygpIHtcbiAgICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgICAgdHJhY2UzKFwiZ2V0UmV3YXJkc1wiKTtcbiAgICAgICAgICAgIGNvbnN0IHsgY2hhaW5BZGRyZXNzLCBpY3FDb25uZWN0aW9uIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgICAgaWYgKCFpY3FDb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgUXVlcmllcyBub3QgYXZhaWxhYmxlIGZvciBjaGFpbiAke3F1b3RlKGNoYWluQWRkcmVzcy5jaGFpbklkKX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzdWx0cyA9IEUoaWNxQ29ubmVjdGlvbikucXVlcnkoW1xuICAgICAgICAgICAgICB0b1JlcXVlc3RRdWVyeUpzb24oXG4gICAgICAgICAgICAgICAgUXVlcnlEZWxlZ2F0aW9uVG90YWxSZXdhcmRzUmVxdWVzdC50b1Byb3RvTXNnKHtcbiAgICAgICAgICAgICAgICAgIGRlbGVnYXRvckFkZHJlc3M6IGNoYWluQWRkcmVzcy52YWx1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKHJlc3VsdHMsIHRoaXMuZmFjZXRzLnJld2FyZHNRdWVyeVdhdGNoZXIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICBleGVjdXRlRW5jb2RlZFR4KG1zZ3MsIG9wdHMpIHtcbiAgICAgICAgICByZXR1cm4gYXNWb3coXG4gICAgICAgICAgICAoKSA9PiB3YXRjaChFKHRoaXMuZmFjZXRzLmhlbHBlci5vd25lZCgpKS5leGVjdXRlRW5jb2RlZFR4KG1zZ3MsIG9wdHMpKVxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qXG5cbiAgICAgICAgICovXG4gICAgICAgIGRlcG9zaXRGb3JCdXJuKGRlc3RpbmF0aW9uLCBhbW91bnQsIGNhbGxlcikge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICB0cmFjZTMoXCJkZXBvc2l0Rm9yQnVyblwiLCB7IGRlc3RpbmF0aW9uLCBhbW91bnQgfSk7XG4gICAgICAgICAgICBjb25zdCB7IGhlbHBlciB9ID0gdGhpcy5mYWNldHM7XG4gICAgICAgICAgICBjb25zdCB7IGNoYWluQWRkcmVzcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIGNvbnN0IGRlc3RQYXJ0cyA9IHBhcnNlQWNjb3VudElkKGRlc3RpbmF0aW9uKTtcbiAgICAgICAgICAgIGNvbnN0IGNoYWluSWQgPSBgJHtkZXN0UGFydHMubmFtZXNwYWNlfToke2Rlc3RQYXJ0cy5yZWZlcmVuY2V9YDtcbiAgICAgICAgICAgIGNvbnN0IHsgY2N0cERlc3RpbmF0aW9uRG9tYWluIH0gPSBjaGFpbkh1Yi5nZXRDaGFpbkluZm9CeUNoYWluSWQoY2hhaW5JZCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNjdHBEZXN0aW5hdGlvbkRvbWFpbiAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYCR7cXVvdGUoY2hhaW5JZCl9IGRvZXMgbm90IGhhdmUgXCJjY3RwRGVzdGluYXRpb25Eb21haW5cIiBzZXQgaW4gQ2hhaW5JbmZvYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGRlcG9zaXRGb3JCdXJuID0ge1xuICAgICAgICAgICAgICBhbW91bnQ6IGhlbHBlci5hbW91bnRUb0NvaW4oYW1vdW50KT8uYW1vdW50LFxuICAgICAgICAgICAgICBmcm9tOiBjaGFpbkFkZHJlc3MudmFsdWUsXG4gICAgICAgICAgICAgIGRlc3RpbmF0aW9uRG9tYWluOiBjY3RwRGVzdGluYXRpb25Eb21haW4sXG4gICAgICAgICAgICAgIG1pbnRSZWNpcGllbnQ6IGFjY291bnRJZFRvMzJCeXRlcyhkZXN0aW5hdGlvbiksXG4gICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgIGJ1cm5Ub2tlbjogXCJ1dXNkY1wiXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgZGVzdGluYXRpb25DYWxsZXIgPSAoKCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoIWNhbGxlcikgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgICAgICAgY29uc3QgY2FsbGVyUGFydHMgPSBwYXJzZUFjY291bnRJZChjYWxsZXIpO1xuICAgICAgICAgICAgICBjYWxsZXJQYXJ0cy5uYW1lc3BhY2UgPT09IGRlc3RQYXJ0cy5uYW1lc3BhY2UgfHwgdGhyb3dSZWRhY3RlZGBjYWxsZXIgJHtxdW90ZShjYWxsZXIpfSBtdXN0IGJlIGluIHNhbWUgbmFtZXNwYWNlIGFzIGRlc3RpbmF0aW9uICR7cXVvdGUoZGVzdGluYXRpb24pfWA7XG4gICAgICAgICAgICAgIHJldHVybiBhY2NvdW50SWRUbzMyQnl0ZXMoY2FsbGVyKTtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICAgIEUoaGVscGVyLm93bmVkKCkpLmV4ZWN1dGVFbmNvZGVkVHgoW1xuICAgICAgICAgICAgICAgIEFueS50b0pTT04oXG4gICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbkNhbGxlciA/IE1zZ0RlcG9zaXRGb3JCdXJuV2l0aENhbGxlci50b1Byb3RvTXNnKHtcbiAgICAgICAgICAgICAgICAgICAgLi4uZGVwb3NpdEZvckJ1cm4sXG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uQ2FsbGVyXG4gICAgICAgICAgICAgICAgICB9KSA6IE1zZ0RlcG9zaXRGb3JCdXJuLnRvUHJvdG9Nc2coZGVwb3NpdEZvckJ1cm4pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgdGhpcy5mYWNldHMucmV0dXJuVm9pZFdhdGNoZXJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIHJldHVybiBtYWtlQ29zbW9zT3JjaGVzdHJhdGlvbkFjY291bnRLaXQ7XG59O1xudmFyIHByZXBhcmVDb3Ntb3NPcmNoZXN0cmF0aW9uQWNjb3VudCA9ICh6b25lLCB7IGNoYWluSHViLCBtYWtlUmVjb3JkZXJLaXQsIHRpbWVyU2VydmljZSwgdm93VG9vbHMsIHpjZiB9KSA9PiB7XG4gIGNvbnN0IG1ha2VLaXQgPSBwcmVwYXJlQ29zbW9zT3JjaGVzdHJhdGlvbkFjY291bnRLaXQoem9uZSwge1xuICAgIGNoYWluSHViLFxuICAgIG1ha2VSZWNvcmRlcktpdCxcbiAgICB0aW1lclNlcnZpY2UsXG4gICAgdm93VG9vbHMsXG4gICAgemNmXG4gIH0pO1xuICByZXR1cm4gKC4uLmFyZ3MpID0+IG1ha2VLaXQoLi4uYXJncykuaG9sZGVyO1xufTtcblxuLy9cbnZhciBwcmVwYXJlTG9jYWxDaGFpbkZhY2FkZUtpdCA9ICh6b25lLCB7XG4gIG1ha2VMb2NhbE9yY2hlc3RyYXRpb25BY2NvdW50S2l0LFxuICBhZ29yaWNOYW1lcyxcbiAgbG9jYWxjaGFpbixcbiAgLy9cbiAgLy9cbiAgc3RvcmFnZU5vZGUsXG4gIHZvd1Rvb2xzOiB7IGFsbFZvd3MsIHdhdGNoLCBhc1ZvdyB9XG59KSA9PiB6b25lLmV4b0NsYXNzS2l0KFxuICBcIkxvY2FsQ2hhaW5GYWNhZGVcIixcbiAge1xuICAgIHB1YmxpYzogTS5pbnRlcmZhY2UoXCJMb2NhbENoYWluRmFjYWRlXCIsIHtcbiAgICAgIC4uLmNoYWluRmFjYWRlTWV0aG9kcyxcbiAgICAgIHF1ZXJ5OiBNLmNhbGwoTS5hcnJheU9mKFR5cGVkSnNvblNoYXBlKSkucmV0dXJucyhWb3dTaGFwZSksXG4gICAgICBnZXRWQmFua0Fzc2V0SW5mbzogTS5jYWxsKCkub3B0aW9uYWwoTS5ib29sZWFuKCkpLnJldHVybnMoVm93U2hhcGUpXG4gICAgfSksXG4gICAgdmJhbmtBc3NldFZhbHVlc1dhdGNoZXI6IE0uaW50ZXJmYWNlKFwidmJhbmtBc3NldFZhbHVlc1dhdGNoZXJcIiwge1xuICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFycmF5T2YoTS5yZWNvcmQoKSkpLm9wdGlvbmFsKE0uYXJyYXlPZihNLnVuZGVmaW5lZCgpKSkucmV0dXJucyhWb3dTaGFwZSlcbiAgICB9KSxcbiAgICBtYWtlQWNjb3VudFdhdGNoZXI6IE0uaW50ZXJmYWNlKFwibWFrZUFjY291bnRXYXRjaGVyXCIsIHtcbiAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoW00ucmVtb3RhYmxlKFwiTENBIEFjY291bnRcIiksIE0uc3RyaW5nKCldKS5vcHRpb25hbChNLmFycmF5T2YoTS51bmRlZmluZWQoKSkpLnJldHVybnMoVm93U2hhcGUpXG4gICAgfSksXG4gICAgbWFrZUNoaWxkTm9kZVdhdGNoZXI6IE0uaW50ZXJmYWNlKFwibWFrZUNoaWxkTm9kZVdhdGNoZXJcIiwge1xuICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLm9yKE0ucmVtb3RhYmxlKCksIE0udW5kZWZpbmVkKCkpKS5vcHRpb25hbCh7IGFjY291bnQ6IE0ucmVtb3RhYmxlKCksIGFkZHJlc3M6IE0uc3RyaW5nKCkgfSkucmV0dXJucyhNLnJlbW90YWJsZSgpKVxuICAgIH0pXG4gIH0sXG4gIC8qXG5cbiAgICovXG4gIChsb2NhbENoYWluSW5mbykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBsb2NhbENoYWluSW5mbyxcbiAgICAgIHZiYW5rQXNzZXRzOiAoXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIHZvaWQgMFxuICAgICAgKVxuICAgIH07XG4gIH0sXG4gIHtcbiAgICBwdWJsaWM6IHtcbiAgICAgIGdldENoYWluSW5mbygpIHtcbiAgICAgICAgcmV0dXJuIHdhdGNoKHRoaXMuc3RhdGUubG9jYWxDaGFpbkluZm8pO1xuICAgICAgfSxcbiAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgIG1ha2VBY2NvdW50KCkge1xuICAgICAgICBjb25zdCBsY2FQID0gRShsb2NhbGNoYWluKS5tYWtlQWNjb3VudCgpO1xuICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vXG4gICAgICAgICAgYWxsVm93cyhbbGNhUCwgaGVhcFZvd0UobGNhUCkuZ2V0QWRkcmVzcygpXSksXG4gICAgICAgICAgdGhpcy5mYWNldHMubWFrZUFjY291bnRXYXRjaGVyXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgIHF1ZXJ5KHJlcXVlc3RzKSB7XG4gICAgICAgIHJldHVybiB3YXRjaChFKGxvY2FsY2hhaW4pLnF1ZXJ5TWFueShyZXF1ZXN0cykpO1xuICAgICAgfSxcbiAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICBnZXRWQmFua0Fzc2V0SW5mbygpIHtcbiAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICBjb25zdCB7IHZiYW5rQXNzZXRzIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIGlmICh2YmFua0Fzc2V0cykge1xuICAgICAgICAgICAgcmV0dXJuIHZiYW5rQXNzZXRzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB2YmFua0Fzc2V0TmFtZUh1YlAgPSBFKGFnb3JpY05hbWVzKS5sb29rdXAoXCJ2YmFua0Fzc2V0XCIpO1xuICAgICAgICAgIGNvbnN0IHZiYW5rQXNzZXRWYWx1ZXNQID0gRSh2YmFua0Fzc2V0TmFtZUh1YlApLnZhbHVlcygpO1xuICAgICAgICAgIGNvbnN0IHsgdmJhbmtBc3NldFZhbHVlc1dhdGNoZXIgfSA9IHRoaXMuZmFjZXRzO1xuICAgICAgICAgIHJldHVybiB3YXRjaCh2YmFua0Fzc2V0VmFsdWVzUCwgdmJhbmtBc3NldFZhbHVlc1dhdGNoZXIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZiYW5rQXNzZXRWYWx1ZXNXYXRjaGVyOiB7XG4gICAgICAvKlxuXG4gICAgICAgKi9cbiAgICAgIG9uRnVsZmlsbGVkKGFzc2V0cykge1xuICAgICAgICBjb25zdCB7IHN0YXRlIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgIHN0YXRlLnZiYW5rQXNzZXRzID0gYXNzZXRzO1xuICAgICAgICAgIHJldHVybiBhc3NldHM7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgbWFrZUFjY291bnRXYXRjaGVyOiB7XG4gICAgICAvKlxuXG4gICAgICAgKi9cbiAgICAgIG9uRnVsZmlsbGVkKFthY2NvdW50LCBhZGRyZXNzXSkge1xuICAgICAgICBjb25zdCBvcHRpb25hbFN0b3JhZ2VOb2RlID0gc3RvcmFnZU5vZGUgPyBFKHN0b3JhZ2VOb2RlKS5tYWtlQ2hpbGROb2RlKGFkZHJlc3MpIDogdm9pZCAwO1xuICAgICAgICByZXR1cm4gd2F0Y2gob3B0aW9uYWxTdG9yYWdlTm9kZSwgdGhpcy5mYWNldHMubWFrZUNoaWxkTm9kZVdhdGNoZXIsIHtcbiAgICAgICAgICBhY2NvdW50LFxuICAgICAgICAgIGFkZHJlc3NcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBtYWtlQ2hpbGROb2RlV2F0Y2hlcjoge1xuICAgICAgLypcblxuXG5cblxuXG4gICAgICAgKi9cbiAgICAgIG9uRnVsZmlsbGVkKGNoaWxkTm9kZSwgeyBhY2NvdW50LCBhZGRyZXNzIH0pIHtcbiAgICAgICAgY29uc3QgeyBsb2NhbENoYWluSW5mbyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgeyBob2xkZXIgfSA9IG1ha2VMb2NhbE9yY2hlc3RyYXRpb25BY2NvdW50S2l0KHtcbiAgICAgICAgICBhY2NvdW50LFxuICAgICAgICAgIGFkZHJlc3M6IGhhcmRlbih7XG4gICAgICAgICAgICB2YWx1ZTogYWRkcmVzcyxcbiAgICAgICAgICAgIGVuY29kaW5nOiBcImJlY2gzMlwiLFxuICAgICAgICAgICAgY2hhaW5JZDogbG9jYWxDaGFpbkluZm8uY2hhaW5JZFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIC8vXG4gICAgICAgICAgc3RvcmFnZU5vZGU6IGNoaWxkTm9kZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGhvbGRlcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbik7XG5oYXJkZW4ocHJlcGFyZUxvY2FsQ2hhaW5GYWNhZGVLaXQpO1xudmFyIHByZXBhcmVMb2NhbENoYWluRmFjYWRlID0gKHpvbmUsIHBvd2VycykgPT4ge1xuICBjb25zdCBtYWtlTG9jYWxDaGFpbkZhY2FkZUtpdCA9IHByZXBhcmVMb2NhbENoYWluRmFjYWRlS2l0KHpvbmUsIHBvd2Vycyk7XG4gIHJldHVybiBwaWNrRmFjZXQobWFrZUxvY2FsQ2hhaW5GYWNhZGVLaXQsIFwicHVibGljXCIpO1xufTtcbmhhcmRlbihwcmVwYXJlTG9jYWxDaGFpbkZhY2FkZSk7XG5cbi8vXG52YXIgdHJhY2U0ID0gbWFrZVRyYWNlcihcIlBhY2tldFRvb2xzXCIpO1xudmFyIHsgdG9DYXBEYXRhIH0gPSBtYWtlTWFyc2hhbCh2b2lkIDAsIHZvaWQgMCwge1xuICBtYXJzaGFsTmFtZTogXCJKdXN0RW5jb2RlclwiLFxuICBzZXJpYWxpemVCb2R5Rm9ybWF0OiBcImNhcGRhdGFcIlxufSk7XG52YXIganVzdCA9IChvYmopID0+IHtcbiAgY29uc3QgeyBib2R5IH0gPSB0b0NhcERhdGEob2JqKTtcbiAgcmV0dXJuIGRlY29kZVRvSnVzdGluKEpTT04ucGFyc2UoYm9keSksIGZhbHNlKTtcbn07XG52YXIgeyBWb3ckOiBWb3ckNCB9ID0gU2hhcGU7XG52YXIgRVZvdyQgPSAoc2hhcGUpID0+IE0ub3IoVm93JDQoc2hhcGUpLCBNLnByb21pc2UoXG4gIC8qICAgICAgICovXG4pKTtcbnZhciBzaW5rNSA9ICgpID0+IHtcbn07XG5oYXJkZW4oc2luazUpO1xudmFyIHByZXBhcmVQYWNrZXRUb29scyA9ICh6b25lLCB2b3dUb29scykgPT4ge1xuICBjb25zdCB7IGFsbFZvd3MsIG1ha2VWb3dLaXQsIHdhdGNoLCB3aGVuIH0gPSB2b3dUb29scztcbiAgY29uc3QgbWFrZVBhY2tldFRvb2xzS2l0ID0gem9uZS5leG9DbGFzc0tpdChcbiAgICBcIlBhY2tldFRvb2xzS2l0XCIsXG4gICAge1xuICAgICAgcHVibGljOiBNLmludGVyZmFjZShcIlBhY2tldFRvb2xzXCIsIHtcbiAgICAgICAgc2VuZFRoZW5XYWl0Rm9yQWNrOiBNLmNhbGwoRVZvdyQoTS5yZW1vdGFibGUoXCJQYWNrZXRTZW5kZXJcIikpKS5vcHRpb25hbChNLmFueSgpKS5yZXR1cm5zKEVWb3ckKE0uYW55KCkpKSxcbiAgICAgICAgbWF0Y2hGaXJzdFBhY2tldDogTS5jYWxsKE0uYW55KCkpLnJldHVybnMoRVZvdyQoTS5hbnkoKSkpLFxuICAgICAgICBtb25pdG9yVHJhbnNmZXJzOiBNLmNhbGwoTS5yZW1vdGFibGUoXCJUYXJnZXRBcHBcIikpLnJldHVybnMoXG4gICAgICAgICAgRVZvdyQoTS5hbnkoKSlcbiAgICAgICAgKVxuICAgICAgfSksXG4gICAgICB0YXA6IE0uaW50ZXJmYWNlKFwidGFwXCIsIHtcbiAgICAgICAgLy9cbiAgICAgICAgcmVjZWl2ZVVwY2FsbDogTS5jYWxsV2hlbihNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICB9KSxcbiAgICAgIG1vbml0b3JSZWdpc3RyYXRpb246IE0uaW50ZXJmYWNlKFwibW9uaXRvclJlZ2lzdHJhdGlvblwiLCB7XG4gICAgICAgIC8vXG4gICAgICAgIHVwZGF0ZVRhcmdldEFwcDogTS5jYWxsV2hlbihcbiAgICAgICAgICBNLmF3YWl0KE0ucmVtb3RhYmxlKFwiVGFyZ2V0QXBwXCIpKVxuICAgICAgICApLnJldHVybnMoKSxcbiAgICAgICAgLy9cbiAgICAgICAgcmV2b2tlOiBNLmNhbGxXaGVuKCkucmV0dXJucygpXG4gICAgICB9KSxcbiAgICAgIHdhdGNoUGFja2V0TWF0Y2g6IE0uaW50ZXJmYWNlKFwid2F0Y2hQYWNrZXRNYXRjaFwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5hbnkoKSwgTS5yZWNvcmQoKSkucmV0dXJucyhNLmFueSgpKVxuICAgICAgfSksXG4gICAgICB3YXRjaFBhY2tldFBhdHRlcm46IE0uaW50ZXJmYWNlKFwid2F0Y2hQYWNrZXRQYXR0ZXJuXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFueSgpLCBNLnJlY29yZCgpKS5yZXR1cm5zKE0uYW55KCkpLFxuICAgICAgICBvblJlamVjdGVkOiBNLmNhbGwoTS5hbnkoKSwgTS5yZWNvcmQoKSkucmV0dXJucyhNLmFueSgpKVxuICAgICAgfSksXG4gICAgICB3YXRjaERlY3JQZW5kaW5nUGF0dGVybnM6IE0uaW50ZXJmYWNlKFwid2F0Y2hEZWNyUGVuZGluZ1BhdHRlcm5zXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFueSgpKS5yZXR1cm5zKE0uYW55KCkpLFxuICAgICAgICBvblJlamVjdGVkOiBNLmNhbGwoTS5hbnkoKSkucmV0dXJucyhNLmFueSgpKVxuICAgICAgfSksXG4gICAgICBzZW5kUGFja2V0V2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJzZW5kUGFja2V0V2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoXG4gICAgICAgICAgW00ucmVjb3JkKCksIE0ucmVtb3RhYmxlKFwiUGFja2V0U2VuZGVyXCIpXSxcbiAgICAgICAgICBNLnJlY29yZCgpXG4gICAgICAgICkucmV0dXJucyhNLmFueSgpKVxuICAgICAgfSksXG4gICAgICBwYWNrZXRXYXNTZW50V2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJwYWNrZXRXYXNTZW50V2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoXG4gICAgICAgICAgeyBldmVudFBhdHRlcm46IE0ucGF0dGVybigpLCByZXN1bHRWOiBWb3ckNChNLmFueSgpKSB9LFxuICAgICAgICAgIE0ucmVjb3JkKClcbiAgICAgICAgKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICB9KSxcbiAgICAgIHV0aWxzOiBNLmludGVyZmFjZShcInV0aWxzXCIsIHtcbiAgICAgICAgc3Vic2NyaWJlVG9UcmFuc2ZlcnM6IE0uY2FsbCgpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICAgICAgICB1bnN1YnNjcmliZUZyb21UcmFuc2ZlcnM6IE0uY2FsbCgpLnJldHVybnMoTS51bmRlZmluZWQoKSksXG4gICAgICAgIGluY3JQZW5kaW5nUGF0dGVybnM6IE0uY2FsbCgpLnJldHVybnMoVm93JDQoTS51bmRlZmluZWQoKSkpLFxuICAgICAgICBkZWNyUGVuZGluZ1BhdHRlcm5zOiBNLmNhbGwoKS5yZXR1cm5zKFZvdyQ0KE0udW5kZWZpbmVkKCkpKVxuICAgICAgfSksXG4gICAgICByZWplY3RSZXNvbHZlckFuZFJldGhyb3dXYXRjaGVyOiBNLmludGVyZmFjZShcInJlamVjdFJlc29sdmVyV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uUmVqZWN0ZWQ6IE0uY2FsbChNLmFueSgpLCB7XG4gICAgICAgICAgcmVzb2x2ZXI6IE0ucmVtb3RhYmxlKFwicmVzb2x2ZXJcIilcbiAgICAgICAgfSkucmV0dXJucyhNLmFueSgpKVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qXG5cbiAgICAgKi9cbiAgICAobGNhKSA9PiB7XG4gICAgICBjb25zdCByZXNvbHZlclRvUGF0dGVybiA9IHpvbmUuZGV0YWNoZWQoKS5tYXBTdG9yZShcInJlc29sdmVyVG9QYXR0ZXJuXCIpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGNhLFxuICAgICAgICByZWc6IChcbiAgICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICBudWxsXG4gICAgICAgICksXG4gICAgICAgIHJlc29sdmVyVG9QYXR0ZXJuLFxuICAgICAgICB1cGNhbGxRdWV1ZTogKFxuICAgICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgIG51bGxcbiAgICAgICAgKSxcbiAgICAgICAgcGVuZGluZzogMCxcbiAgICAgICAgZXh0cmE6IG51bGwsXG4gICAgICAgIG1vbml0b3I6IChcbiAgICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICBudWxsXG4gICAgICAgIClcbiAgICAgIH07XG4gICAgfSxcbiAgICB7XG4gICAgICBwdWJsaWM6IHtcbiAgICAgICAgLypcblxuICAgICAgICAgKi9cbiAgICAgICAgLy9cbiAgICAgICAgYXN5bmMgbW9uaXRvclRyYW5zZmVycyhtb25pdG9yKSB7XG4gICAgICAgICAgY29uc3QgbXJlZyA9IHRoaXMuZmFjZXRzLm1vbml0b3JSZWdpc3RyYXRpb247XG4gICAgICAgICAgYXdhaXQgbXJlZy51cGRhdGVUYXJnZXRBcHAobW9uaXRvcik7XG4gICAgICAgICAgcmV0dXJuIG1yZWc7XG4gICAgICAgIH0sXG4gICAgICAgIC8qXG5cbiAgICAgICAgICovXG4gICAgICAgIG1hdGNoRmlyc3RQYWNrZXQocGF0dGVyblApIHtcbiAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy51dGlscy5pbmNyUGVuZGluZ1BhdHRlcm5zKCksXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy53YXRjaFBhY2tldE1hdGNoLFxuICAgICAgICAgICAgeyBwYXR0ZXJuUCB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgLypcblxuXG5cbiAgICAgICAgICovXG4gICAgICAgIHNlbmRUaGVuV2FpdEZvckFjayhwYWNrZXRTZW5kZXIsIG9wdHMgPSB7fSkge1xuICAgICAgICAgIGNvbnN0IHBhdHRlcm4gPSBtYWtlVm93S2l0KCk7XG4gICAgICAgICAgY29uc3QgbWF0Y2hWID0gd2F0Y2goXG4gICAgICAgICAgICBhbGxWb3dzKFtcbiAgICAgICAgICAgICAgdGhpcy5mYWNldHMucHVibGljLm1hdGNoRmlyc3RQYWNrZXQocGF0dGVybi52b3cpLFxuICAgICAgICAgICAgICBwYWNrZXRTZW5kZXJcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgdGhpcy5mYWNldHMuc2VuZFBhY2tldFdhdGNoZXIsXG4gICAgICAgICAgICB7IG9wdHMgfVxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ViA9IHdhdGNoKG1hdGNoViwgdGhpcy5mYWNldHMucGFja2V0V2FzU2VudFdhdGNoZXIsIHtcbiAgICAgICAgICAgIG9wdHMsXG4gICAgICAgICAgICBwYXR0ZXJuUmVzb2x2ZXI6IHBhdHRlcm4ucmVzb2x2ZXJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gd2F0Y2gocmVzdWx0ViwgdGhpcy5mYWNldHMucmVqZWN0UmVzb2x2ZXJBbmRSZXRocm93V2F0Y2hlciwge1xuICAgICAgICAgICAgcmVzb2x2ZXI6IHBhdHRlcm4ucmVzb2x2ZXJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG1vbml0b3JSZWdpc3RyYXRpb246IHtcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAvL1xuICAgICAgICBhc3luYyB1cGRhdGVUYXJnZXRBcHAodGFwKSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5tb25pdG9yID0gYXdhaXQgdGFwO1xuICAgICAgICAgIGF3YWl0IHRoaXMuZmFjZXRzLnV0aWxzLnN1YnNjcmliZVRvVHJhbnNmZXJzKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgLy9cbiAgICAgICAgYXN5bmMgcmV2b2tlKCkge1xuICAgICAgICAgIHRoaXMuc3RhdGUubW9uaXRvciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0YXA6IHtcbiAgICAgICAgLypcblxuICAgICAgICAgKi9cbiAgICAgICAgYXN5bmMgcmVjZWl2ZVVwY2FsbChvYmopIHtcbiAgICAgICAgICBjb25zdCB7IG1vbml0b3IsIHJlc29sdmVyVG9QYXR0ZXJuLCB1cGNhbGxRdWV1ZSwgcGVuZGluZyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICB0cmFjZTQoXG4gICAgICAgICAgICBgVHJ5aW5nICR7cmVzb2x2ZXJUb1BhdHRlcm4uZ2V0U2l6ZSgpfSBjdXJyZW50IHBhdHRlcm5zIGFuZCAke3BlbmRpbmd9IHBlbmRpbmcgcGF0dGVybnMgYWdhaW5zdGAsXG4gICAgICAgICAgICBqdXN0KG9iailcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChtb25pdG9yKSB7XG4gICAgICAgICAgICB2b2lkIEUobW9uaXRvcikucmVjZWl2ZVVwY2FsbChvYmopO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKGNvbnN0IFtyZXNvbHZlciwgcGF0dGVybl0gb2YgcmVzb2x2ZXJUb1BhdHRlcm4uZW50cmllcygpKSB7XG4gICAgICAgICAgICBpZiAobWF0Y2hlcyhvYmosIHBhdHRlcm4pKSB7XG4gICAgICAgICAgICAgIHRyYWNlNChcIk1hdGNoZWQgcGF0dGVybjpcIiwganVzdChwYXR0ZXJuKSk7XG4gICAgICAgICAgICAgIHJlc29sdmVyLnJlc29sdmUob2JqKTtcbiAgICAgICAgICAgICAgcmVzb2x2ZXJUb1BhdHRlcm4uZGVsZXRlKHJlc29sdmVyKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodXBjYWxsUXVldWUpIHtcbiAgICAgICAgICAgIHRyYWNlNChcIlN0YXNoaW5nIG9iamVjdCBpbiB1cGNhbGxRdWV1ZVwiKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUudXBjYWxsUXVldWUgPSBoYXJkZW4odXBjYWxsUXVldWUuY29uY2F0KG9iaikpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0cmFjZTQoXCJObyBtYXRjaCB5ZXQuXCIpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2VuZFBhY2tldFdhdGNoZXI6IHtcbiAgICAgICAgLypcblxuXG5cblxuXG5cblxuXG5cblxuICAgICAgICAgKi9cbiAgICAgICAgb25GdWxmaWxsZWQoW3sgbWF0Y2ggfSwgc2VuZGVyXSwgY3R4KSB7XG4gICAgICAgICAgcmV0dXJuIHdhdGNoKEUoc2VuZGVyKS5zZW5kUGFja2V0KG1hdGNoLCBjdHgub3B0cykpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcGFja2V0V2FzU2VudFdhdGNoZXI6IHtcbiAgICAgICAgb25GdWxmaWxsZWQoeyBldmVudFBhdHRlcm4sIHJlc3VsdFYgfSwgY3R4KSB7XG4gICAgICAgICAgY29uc3QgeyBwYXR0ZXJuUmVzb2x2ZXIgfSA9IGN0eDtcbiAgICAgICAgICBwYXR0ZXJuUmVzb2x2ZXIucmVzb2x2ZShldmVudFBhdHRlcm4pO1xuICAgICAgICAgIHJldHVybiByZXN1bHRWO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVqZWN0UmVzb2x2ZXJBbmRSZXRocm93V2F0Y2hlcjoge1xuICAgICAgICBvblJlamVjdGVkKHJlaiwgeyByZXNvbHZlciB9KSB7XG4gICAgICAgICAgcmVzb2x2ZXIucmVqZWN0KHJlaik7XG4gICAgICAgICAgdGhyb3cgcmVqO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgd2F0Y2hQYWNrZXRNYXRjaDoge1xuICAgICAgICBvbkZ1bGZpbGxlZChfLCB7IHBhdHRlcm5QIH0pIHtcbiAgICAgICAgICBjb25zdCB7IHZvdywgcmVzb2x2ZXIgfSA9IG1ha2VWb3dLaXQoKTtcbiAgICAgICAgICBjb25zdCBwYXR0ZXJuViA9IHdhdGNoKFxuICAgICAgICAgICAgcGF0dGVyblAsXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy53YXRjaFBhY2tldFBhdHRlcm4sXG4gICAgICAgICAgICBoYXJkZW4oeyByZXNvbHZlciB9KVxuICAgICAgICAgICk7XG4gICAgICAgICAgd2F0Y2gocGF0dGVyblYsIHRoaXMuZmFjZXRzLndhdGNoRGVjclBlbmRpbmdQYXR0ZXJucyk7XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbih7IG1hdGNoOiB2b3csIHJlc29sdmVyIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgd2F0Y2hEZWNyUGVuZGluZ1BhdHRlcm5zOiB7XG4gICAgICAgIG9uRnVsZmlsbGVkKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmZhY2V0cy51dGlscy5kZWNyUGVuZGluZ1BhdHRlcm5zKCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uUmVqZWN0ZWQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmFjZXRzLnV0aWxzLmRlY3JQZW5kaW5nUGF0dGVybnMoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHdhdGNoUGFja2V0UGF0dGVybjoge1xuICAgICAgICBvbkZ1bGZpbGxlZChwYXR0ZXJuLCB7IHJlc29sdmVyIH0pIHtcbiAgICAgICAgICBjb25zdCB7IHJlc29sdmVyVG9QYXR0ZXJuLCB1cGNhbGxRdWV1ZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICB0cmFjZTQoXCJ3YXRjaFBhY2tldFBhdHRlcm4gb25GdWxmaWxsZWRcIiwganVzdChwYXR0ZXJuKSk7XG4gICAgICAgICAgaWYgKCF1cGNhbGxRdWV1ZSkge1xuICAgICAgICAgICAgdHJhY2U0KFwiTm8gdXBjYWxsIHF1ZXVlIHlldC4gIFNhdmUgdGhlIHBhdHRlcm4gZm9yIGxhdGVyLlwiKTtcbiAgICAgICAgICAgIHJlc29sdmVyVG9QYXR0ZXJuLmluaXQocmVzb2x2ZXIsIHBhdHRlcm4pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBpMyA9IHVwY2FsbFF1ZXVlLmZpbmRJbmRleCgob2JqKSA9PiBtYXRjaGVzKG9iaiwgcGF0dGVybikpO1xuICAgICAgICAgIGlmIChpMyA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRyYWNlNChcIk5vIG1hdGNoIHlldC4gU2F2ZSB0aGUgcGF0dGVybiBmb3IgbGF0ZXIuXCIpO1xuICAgICAgICAgICAgcmVzb2x2ZXJUb1BhdHRlcm4uaW5pdChyZXNvbHZlciwgcGF0dGVybik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHRyYWNlNChcbiAgICAgICAgICAgIFwiU3VjY2VzcyEgUmVtb3ZlIHRoZSBtYXRjaGVkIG9iamVjdCBmcm9tIHRoZSBxdWV1ZS5cIixcbiAgICAgICAgICAgIGp1c3QodXBjYWxsUXVldWVbaTNdKVxuICAgICAgICAgICk7XG4gICAgICAgICAgcmVzb2x2ZXIucmVzb2x2ZSh1cGNhbGxRdWV1ZVtpM10pO1xuICAgICAgICAgIHRoaXMuc3RhdGUudXBjYWxsUXVldWUgPSBoYXJkZW4oXG4gICAgICAgICAgICB1cGNhbGxRdWV1ZS5zbGljZSgwLCBpMykuY29uY2F0KHVwY2FsbFF1ZXVlLnNsaWNlKGkzICsgMSkpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25SZWplY3RlZChyZWFzb24sIHsgcmVzb2x2ZXIgfSkge1xuICAgICAgICAgIHJlc29sdmVyLnJlamVjdChyZWFzb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdXRpbHM6IHtcbiAgICAgICAgaW5jclBlbmRpbmdQYXR0ZXJucygpIHtcbiAgICAgICAgICBjb25zdCB7IHBlbmRpbmcsIHJlZywgdXBjYWxsUXVldWUgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5wZW5kaW5nICs9IDE7XG4gICAgICAgICAgaWYgKCF1cGNhbGxRdWV1ZSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS51cGNhbGxRdWV1ZSA9IGhhcmRlbihbXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZWcgfHwgcGVuZGluZyA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaCh2b2lkIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gd2F0Y2godGhpcy5mYWNldHMudXRpbHMuc3Vic2NyaWJlVG9UcmFuc2ZlcnMoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlY3JQZW5kaW5nUGF0dGVybnMoKSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5wZW5kaW5nIC09IDE7XG4gICAgICAgICAgaWYgKHRoaXMuc3RhdGUucGVuZGluZyA+IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5zdGF0ZS5wZW5kaW5nID0gMDtcbiAgICAgICAgICB0aGlzLnN0YXRlLnVwY2FsbFF1ZXVlID0gbnVsbDtcbiAgICAgICAgICByZXR1cm4gd2F0Y2godGhpcy5mYWNldHMudXRpbHMudW5zdWJzY3JpYmVGcm9tVHJhbnNmZXJzKCkpO1xuICAgICAgICB9LFxuICAgICAgICBzdWJzY3JpYmVUb1RyYW5zZmVycygpIHtcbiAgICAgICAgICBjb25zdCB7IGxjYSwgcmVnOiBjYWNoZWRSZWcgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgaWYgKGNhY2hlZFJlZykge1xuICAgICAgICAgICAgcmV0dXJuIHdoZW4oY2FjaGVkUmVnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgeyB0YXAgfSA9IHRoaXMuZmFjZXRzO1xuICAgICAgICAgIGNvbnN0IHJlZyA9IHdhdGNoKEUobGNhKS5tb25pdG9yVHJhbnNmZXJzKHRhcCkpO1xuICAgICAgICAgIHRoaXMuc3RhdGUucmVnID0gcmVnO1xuICAgICAgICAgIHJldHVybiB3aGVuKHJlZyk7XG4gICAgICAgIH0sXG4gICAgICAgIHVuc3Vic2NyaWJlRnJvbVRyYW5zZmVycygpIHtcbiAgICAgICAgICBjb25zdCB7IHJlZywgbW9uaXRvciB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBpZiAoIXJlZyB8fCBtb25pdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgZmluaXNoKGNvbnRleHQpIHtcbiAgICAgICAgdm9pZCBjb250ZXh0LmZhY2V0cy51dGlscy5zdWJzY3JpYmVUb1RyYW5zZmVycygpO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbiAgY29uc3QgbWFrZVBhY2tldFRvb2xzID0gcGlja0ZhY2V0KG1ha2VQYWNrZXRUb29sc0tpdCwgXCJwdWJsaWNcIik7XG4gIHJldHVybiBtYWtlUGFja2V0VG9vbHM7XG59O1xuaGFyZGVuKHByZXBhcmVQYWNrZXRUb29scyk7XG5cbi8vXG52YXIgSUNTMjBfVFJBTlNGRVJfU1VDQ0VTU19SRVNVTFQgPSBcIkFRPT1cIjtcbnZhciB0cmFjZTUgPSBtYWtlVHJhY2VyKFwiSUJDUFwiKTtcbnZhciB7IEZhaWw6IEZhaWw2LCBiYXJlOiBiYXJlMyB9ID0gYXNzZXJ0O1xudmFyIHsgVm93JDogVm93JDUgfSA9IFNoYXBlO1xudmFyIGNyZWF0ZVNlcXVlbmNlUGF0dGVybiA9IChzZXF1ZW5jZSkgPT4ge1xuICBjb25zdCBzZXF1ZW5jZVBhdHRlcm5zID0gW107XG4gIHRyeSB7XG4gICAgY29uc3QgYmludFNlcXVlbmNlID0gQmlnSW50KHNlcXVlbmNlKTtcbiAgICBiaW50U2VxdWVuY2UgPiAwbiAmJiBzZXF1ZW5jZVBhdHRlcm5zLnB1c2goYmludFNlcXVlbmNlKTtcbiAgfSBjYXRjaCAoZTIpIHtcbiAgfVxuICBjb25zdCBudW1TZXF1ZW5jZSA9IE51bWJlcihzZXF1ZW5jZSk7XG4gIG51bVNlcXVlbmNlID4gMCAmJiBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1TZXF1ZW5jZSkgJiYgc2VxdWVuY2VQYXR0ZXJucy5wdXNoKG51bVNlcXVlbmNlKTtcbiAgY29uc3Qgc3RyU2VxdWVuY2UgPSBTdHJpbmcoc2VxdWVuY2UpO1xuICBzdHJTZXF1ZW5jZSAmJiBzZXF1ZW5jZVBhdHRlcm5zLnB1c2goc3RyU2VxdWVuY2UpO1xuICBpZiAoIXNlcXVlbmNlUGF0dGVybnMuZmluZCgoc2VxKSA9PiBzZXEgPT09IHNlcXVlbmNlKSkge1xuICAgIHNlcXVlbmNlUGF0dGVybnMucHVzaChzZXF1ZW5jZSk7XG4gIH1cbiAgc3dpdGNoIChzZXF1ZW5jZVBhdHRlcm5zLmxlbmd0aCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHRocm93IEZhaWw2YHNlcXVlbmNlICR7c2VxdWVuY2V9IGlzIG5vdCB2YWxpZGA7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIHNlcXVlbmNlUGF0dGVybnNbMF07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBNLm9yKC4uLnNlcXVlbmNlUGF0dGVybnMpO1xuICB9XG59O1xuaGFyZGVuKGNyZWF0ZVNlcXVlbmNlUGF0dGVybik7XG52YXIgcHJlcGFyZUlCQ1RyYW5zZmVyU2VuZGVyID0gKHpvbmUsIHsgd2F0Y2gsIG1ha2VJQkNSZXBseUtpdCB9KSA9PiB7XG4gIGNvbnN0IG1ha2VJQkNUcmFuc2ZlclNlbmRlcktpdCA9IHpvbmUuZXhvQ2xhc3NLaXQoXG4gICAgXCJJQkNUcmFuc2ZlclNlbmRlcktpdFwiLFxuICAgIHtcbiAgICAgIHB1YmxpYzogTS5pbnRlcmZhY2UoXCJJQkNUcmFuc2ZlclNlbmRlclwiLCB7XG4gICAgICAgIHNlbmRQYWNrZXQ6IE0uY2FsbChWb3ckNShNLmFueSgpKSwgTS5hbnkoKSkucmV0dXJucyhWb3ckNShNLnJlY29yZCgpKSlcbiAgICAgIH0pLFxuICAgICAgcmVzcG9uc2VXYXRjaGVyOiBNLmludGVyZmFjZShcInJlc3BvbnNlV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoW00ucmVjb3JkKCldLCBNLnJlY29yZCgpKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICB9KSxcbiAgICAgIHZlcmlmeVRyYW5zZmVyU3VjY2VzczogTS5pbnRlcmZhY2UoXCJ2ZXJpZnlUcmFuc2ZlclN1Y2Nlc3NcIiwge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uYW55KCkpLnJldHVybnMoKVxuICAgICAgfSlcbiAgICB9LFxuICAgIC8qXG5cblxuXG5cbiAgICAgKi9cbiAgICAodHhFeGVjdXRvciwgdHJhbnNmZXJNc2cpID0+ICh7XG4gICAgICB0eEV4ZWN1dG9yLFxuICAgICAgdHJhbnNmZXJNc2c6IGhhcmRlbih0cmFuc2Zlck1zZylcbiAgICB9KSxcbiAgICB7XG4gICAgICBwdWJsaWM6IHtcbiAgICAgICAgLypcblxuXG5cblxuICAgICAgICAgKi9cbiAgICAgICAgc2VuZFBhY2tldChtYXRjaCwgb3B0cykge1xuICAgICAgICAgIGNvbnN0IHsgdHhFeGVjdXRvciwgdHJhbnNmZXJNc2cgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgRSh0eEV4ZWN1dG9yKS5leGVjdXRlVHgoW3RyYW5zZmVyTXNnXSksXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy5yZXNwb25zZVdhdGNoZXIsXG4gICAgICAgICAgICB7IG9wdHMsIG1hdGNoIH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVzcG9uc2VXYXRjaGVyOiB7XG4gICAgICAgIC8qXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4gICAgICAgICAqL1xuICAgICAgICBvbkZ1bGZpbGxlZChbeyBzZXF1ZW5jZSB9XSwgY3R4KSB7XG4gICAgICAgICAgY29uc3QgeyBtYXRjaCwgb3B0cyB9ID0gY3R4O1xuICAgICAgICAgIGNvbnN0IHsgdHJhbnNmZXJNc2cgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgdHJhY2U1KFwic2VxdWVuY2VcIiwgc2VxdWVuY2UsIHRyYW5zZmVyTXNnKTtcbiAgICAgICAgICBjb25zdCByZXBseVBhY2tldFBhdHRlcm4gPSBNLnNwbGl0UmVjb3JkKHtcbiAgICAgICAgICAgIHNvdXJjZV9wb3J0OiB0cmFuc2Zlck1zZy5zb3VyY2VQb3J0LFxuICAgICAgICAgICAgc291cmNlX2NoYW5uZWw6IHRyYW5zZmVyTXNnLnNvdXJjZUNoYW5uZWwsXG4gICAgICAgICAgICBzZXF1ZW5jZTogY3JlYXRlU2VxdWVuY2VQYXR0ZXJuKHNlcXVlbmNlKVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnN0IHsgcmVzdWx0VjogYWNrRGF0YVYsIC4uLnJlc3QgfSA9IG1ha2VJQkNSZXBseUtpdChcbiAgICAgICAgICAgIHJlcGx5UGFja2V0UGF0dGVybixcbiAgICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgICAgeyBvcE5hbWU6IFwidHJhbnNmZXJcIiwgLi4ub3B0cyB9XG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCByZXN1bHRWID0gd2F0Y2goYWNrRGF0YVYsIHRoaXMuZmFjZXRzLnZlcmlmeVRyYW5zZmVyU3VjY2Vzcyk7XG4gICAgICAgICAgcmV0dXJuIGhhcmRlbih7IHJlc3VsdFYsIC4uLnJlc3QgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB2ZXJpZnlUcmFuc2ZlclN1Y2Nlc3M6IHtcbiAgICAgICAgb25GdWxmaWxsZWQoYWNrRGF0YSkge1xuICAgICAgICAgIGxldCBvYmo7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG9iaiA9IEpTT04ucGFyc2UoYWNrRGF0YSk7XG4gICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICBGYWlsNmBJQ1MyMC0xIHRyYW5zZmVyIGFjayBkYXRhIGlzIG5vdCBKU09OOiAke2Fja0RhdGF9YDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgeyByZXN1bHQsIGVycm9yIH0gPSBvYmo7XG4gICAgICAgICAgZXJyb3IgPT09IHZvaWQgMCB8fCBGYWlsNmBJQ1MyMC0xIHRyYW5zZmVyIGVycm9yICR7ZXJyb3J9YDtcbiAgICAgICAgICByZXN1bHQgPz8gRmFpbDZgTWlzc2luZyByZXN1bHQgaW4gSUNTMjAtMSB0cmFuc2ZlciBhY2sgJHtvYmp9YDtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSBJQ1MyMF9UUkFOU0ZFUl9TVUNDRVNTX1JFU1VMVCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBkZWNvZGVBbmRQYXJzZSA9IChiNjQpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGF0b2IoYjY0KSk7XG4gICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgRmFpbDZgRGVjb2Rpbmcgb2YgYmFzZTY0LWVuY29kZWQgYWNrIG9iaiBvYmplY3QgZmFpbGVkOiAke0pTT04uc3RyaW5naWZ5KGI2NCl9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGNvbnN0IG91dGVyRGVjb2RlZCA9IGRlY29kZUFuZFBhcnNlKHJlc3VsdCk7XG4gICAgICAgICAgY29uc3QgaWJjQWNrID0gb3V0ZXJEZWNvZGVkPy5pYmNfYWNrICYmIGRlY29kZUFuZFBhcnNlKG91dGVyRGVjb2RlZC5pYmNfYWNrKTtcbiAgICAgICAgICBpYmNBY2s/LnJlc3VsdCA9PT0gSUNTMjBfVFJBTlNGRVJfU1VDQ0VTU19SRVNVTFQgfHwgRmFpbDZgSUNTMjAtMSB0cmFuc2ZlciB1bnN1Y2Nlc3NmdWwgd2l0aCBhY2sgcmVzdWx0OiAke291dGVyRGVjb2RlZH1gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICApO1xuICByZXR1cm4gKC4uLmFyZ3MpID0+IG1ha2VJQkNUcmFuc2ZlclNlbmRlcktpdCguLi5hcmdzKS5wdWJsaWM7XG59O1xuaGFyZGVuKHByZXBhcmVJQkNUcmFuc2ZlclNlbmRlcik7XG52YXIgcHJlcGFyZUlCQ1JlcGx5S2l0ID0gKHpvbmUsIHZvd1Rvb2xzKSA9PiB7XG4gIGNvbnN0IHsgd2F0Y2ggfSA9IHZvd1Rvb2xzO1xuICBjb25zdCBpYmNXYXRjaGVyID0gem9uZS5leG8oXG4gICAgXCJpYmNSZXN1bHRXYXRjaGVyXCIsXG4gICAgTS5pbnRlcmZhY2UoXCJwcm9jZXNzSUJDV2F0Y2hlclwiLCB7XG4gICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKFxuICAgICAgICBNLnNwbGl0UmVjb3JkKHsgZXZlbnQ6IE0uc3RyaW5nKCkgfSwgeyBhY2tub3dsZWRnZW1lbnQ6IE0uc3RyaW5nKCkgfSksXG4gICAgICAgIE0uc3BsaXRSZWNvcmQoe30sIHsgb3BOYW1lOiBNLnN0cmluZygpLCB0aW1lb3V0OiBNLnJlY29yZCgpIH0pXG4gICAgICApLnJldHVybnMoVm93JDUoTS5zdHJpbmcoKSkpXG4gICAgfSksXG4gICAge1xuICAgICAgLypcblxuXG5cbiAgICAgICAqL1xuICAgICAgb25GdWxmaWxsZWQoaWJjRXZlbnQsIHsgb3BOYW1lID0gXCJ1bmtub3duXCIgfSkge1xuICAgICAgICBjb25zdCB7IGV2ZW50IH0gPSBpYmNFdmVudDtcbiAgICAgICAgc3dpdGNoIChldmVudCkge1xuICAgICAgICAgIGNhc2UgXCJhY2tub3dsZWRnZW1lbnRQYWNrZXRcIjoge1xuICAgICAgICAgICAgY29uc3QgeyBhY2tub3dsZWRnZW1lbnQgfSA9IGliY0V2ZW50O1xuICAgICAgICAgICAgYWNrbm93bGVkZ2VtZW50IHx8IEZhaWw2YGFja25vd2xlZGdlbWVudFBhY2tldCBtaXNzaW5nICdhY2tub3dsZWRnZW1lbnQnYDtcbiAgICAgICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKGFja25vd2xlZGdlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJ0aW1lb3V0UGFja2V0XCI6XG4gICAgICAgICAgICB0aHJvdyBGYWlsNmAke2JhcmUzKG9wTmFtZSl9IG9wZXJhdGlvbiByZWNlaXZlZCB0aW1lb3V0IHBhY2tldGA7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IEZhaWw2YFVuZXhwZWN0ZWQgZXZlbnQ6ICR7ZXZlbnR9YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgKTtcbiAgY29uc3QgbWFrZUlCQ1JlcGx5S2l0ID0gKHJlcGx5UGFja2V0UGF0dGVybiwgbWF0Y2hWLCBvcHRzKSA9PiB7XG4gICAgY29uc3QgZXZlbnRQYXR0ZXJuID0gTS5vcihcbiAgICAgIE0uc3BsaXRSZWNvcmQoe1xuICAgICAgICBldmVudDogXCJhY2tub3dsZWRnZW1lbnRQYWNrZXRcIixcbiAgICAgICAgcGFja2V0OiByZXBseVBhY2tldFBhdHRlcm4sXG4gICAgICAgIGFja25vd2xlZGdlbWVudDogTS5zdHJpbmcoKVxuICAgICAgfSksXG4gICAgICBNLnNwbGl0UmVjb3JkKHtcbiAgICAgICAgZXZlbnQ6IFwidGltZW91dFBhY2tldFwiLFxuICAgICAgICBwYWNrZXQ6IHJlcGx5UGFja2V0UGF0dGVyblxuICAgICAgfSlcbiAgICApO1xuICAgIGNvbnN0IHJlc3VsdFYgPSB3YXRjaChtYXRjaFYsIGliY1dhdGNoZXIsIG9wdHMpO1xuICAgIHJldHVybiBoYXJkZW4oeyBldmVudFBhdHRlcm4sIHJlc3VsdFYgfSk7XG4gIH07XG4gIHJldHVybiBtYWtlSUJDUmVwbHlLaXQ7XG59O1xuaGFyZGVuKHByZXBhcmVJQkNSZXBseUtpdCk7XG52YXIgcHJlcGFyZUlCQ1Rvb2xzID0gKHpvbmUsIHZvd1Rvb2xzKSA9PiB7XG4gIGNvbnN0IG1ha2VJQkNSZXBseUtpdCA9IHByZXBhcmVJQkNSZXBseUtpdCh6b25lLCB2b3dUb29scyk7XG4gIGNvbnN0IG1ha2VJQkNUcmFuc2ZlclNlbmRlciA9IHByZXBhcmVJQkNUcmFuc2ZlclNlbmRlcih6b25lLCB7XG4gICAgbWFrZUlCQ1JlcGx5S2l0LFxuICAgIC4uLnZvd1Rvb2xzXG4gIH0pO1xuICByZXR1cm4gaGFyZGVuKHsgbWFrZUlCQ1RyYW5zZmVyU2VuZGVyLCBtYWtlSUJDUmVwbHlLaXQgfSk7XG59O1xuaGFyZGVuKHByZXBhcmVJQkNUb29scyk7XG5cbi8vXG52YXIgdHJhY2U2ID0gbWFrZVRyYWNlcihcIkxvY2FsT3JjaEFjY291bnRcIik7XG52YXIgeyBWb3ckOiBWb3ckNiB9ID0gU2hhcGU7XG52YXIgRVZvdyQyID0gKHNoYXBlKSA9PiBNLm9yKFZvdyQ2KHNoYXBlKSwgTS5wcm9taXNlKFxuICAvKiAgICAgICAqL1xuKSk7XG52YXIgSG9sZGVySSA9IE0uaW50ZXJmYWNlKFwiaG9sZGVyXCIsIHtcbiAgLi4ub3JjaGVzdHJhdGlvbkFjY291bnRNZXRob2RzLFxuICBkZWxlZ2F0ZTogTS5jYWxsKE0uc3RyaW5nKCksIEFtb3VudFNoYXBlKS5yZXR1cm5zKFZvd1NoYXBlKSxcbiAgdW5kZWxlZ2F0ZTogTS5jYWxsKE0uc3RyaW5nKCksIEFtb3VudFNoYXBlKS5yZXR1cm5zKFZvd1NoYXBlKSxcbiAgZGVwb3NpdDogTS5jYWxsKFBheW1lbnRTaGFwZSkucmV0dXJucyhWb3dTaGFwZSksXG4gIHdpdGhkcmF3OiBNLmNhbGwoQW1vdW50U2hhcGUpLnJldHVybnMoVm93JDYoUGF5bWVudFNoYXBlKSksXG4gIGV4ZWN1dGVUeDogTS5jYWxsKE0uYXJyYXlPZihNLnJlY29yZCgpKSkucmV0dXJucyhWb3ckNihNLnJlY29yZCgpKSksXG4gIHNlbmRUaGVuV2FpdEZvckFjazogTS5jYWxsKEVWb3ckMihNLnJlbW90YWJsZShcIlBhY2tldFNlbmRlclwiKSkpLm9wdGlvbmFsKE0uYW55KCkpLnJldHVybnMoRVZvdyQyKE0uc3RyaW5nKCkpKSxcbiAgbWF0Y2hGaXJzdFBhY2tldDogTS5jYWxsKE0uYW55KCkpLnJldHVybnMoRVZvdyQyKE0uYW55KCkpKSxcbiAgbW9uaXRvclRyYW5zZmVyczogTS5jYWxsKE0ucmVtb3RhYmxlKFwiVGFyZ2V0QXBwXCIpKS5yZXR1cm5zKEVWb3ckMihNLmFueSgpKSksXG4gIHBhcnNlSW5ib3VuZFRyYW5zZmVyOiBNLmNhbGwoTS5yZWNvcmRPZihNLnN0cmluZygpLCBNLmFueSgpKSkucmV0dXJucyhcbiAgICBWb3ckNih7XG4gICAgICBhbW91bnQ6IERlbm9tQW1vdW50U2hhcGUsXG4gICAgICBmcm9tQWNjb3VudDogTS5zdHJpbmcoKSxcbiAgICAgIHRvQWNjb3VudDogTS5zdHJpbmcoKSxcbiAgICAgIGV4dHJhOiBNLnJlY29yZE9mKE0uc3RyaW5nKCksIE0uYW55KCkpXG4gICAgfSlcbiAgKVxufSk7XG52YXIgUFVCTElDX1RPUElDUzIgPSB7XG4gIGFjY291bnQ6IFtcIkFjY291bnQgaG9sZGVyIHN0YXR1c1wiLCBNLmFueSgpXVxufTtcbnZhciBwcmVwYXJlTG9jYWxPcmNoZXN0cmF0aW9uQWNjb3VudEtpdCA9ICh6b25lLCB7XG4gIG1ha2VSZWNvcmRlcktpdCxcbiAgemNmLFxuICB0aW1lclNlcnZpY2UsXG4gIHZvd1Rvb2xzLFxuICBjaGFpbkh1YixcbiAgbG9jYWxjaGFpbixcbiAgem9lVG9vbHNcbn0pID0+IHtcbiAgY29uc3QgeyB3YXRjaCwgYXNWb3csIHdoZW4gfSA9IHZvd1Rvb2xzO1xuICBjb25zdCB7IG1ha2VJQkNUcmFuc2ZlclNlbmRlciB9ID0gcHJlcGFyZUlCQ1Rvb2xzKFxuICAgIHpvbmUuc3ViWm9uZShcImliY1Rvb2xzXCIpLFxuICAgIHZvd1Rvb2xzXG4gICk7XG4gIGNvbnN0IG1ha2VQYWNrZXRUb29scyA9IHByZXBhcmVQYWNrZXRUb29scyhcbiAgICB6b25lLnN1YlpvbmUoXCJwYWNrZXRUb29sc1wiKSxcbiAgICB2b3dUb29sc1xuICApO1xuICBjb25zdCB0aW1lc3RhbXBIZWxwZXIgPSBtYWtlVGltZXN0YW1wSGVscGVyKHRpbWVyU2VydmljZSk7XG4gIGNvbnN0IG1ha2VMb2NhbE9yY2hlc3RyYXRpb25BY2NvdW50S2l0ID0gem9uZS5leG9DbGFzc0tpdChcbiAgICBcIkxvY2FsIE9yY2hlc3RyYXRpb24gQWNjb3VudCBLaXRcIixcbiAgICB7XG4gICAgICBoZWxwZXI6IE0uaW50ZXJmYWNlKFwiaGVscGVyXCIsIHtcbiAgICAgICAgYW1vdW50VG9Db2luOiBNLmNhbGwoQW1vdW50QXJnU2hhcGUpLnJldHVybnMoTS5yZWNvcmQoKSlcbiAgICAgIH0pLFxuICAgICAgaG9sZGVyOiBIb2xkZXJJLFxuICAgICAgdW5kZWxlZ2F0ZVdhdGNoZXI6IE0uaW50ZXJmYWNlKFwidW5kZWxlZ2F0ZVdhdGNoZXJcIiwge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKFtcbiAgICAgICAgICBNLnNwbGl0UmVjb3JkKHsgY29tcGxldGlvblRpbWU6IFRpbWVzdGFtcFByb3RvU2hhcGUgfSlcbiAgICAgICAgXSkub3B0aW9uYWwoTS5hcnJheU9mKE0udW5kZWZpbmVkKCkpKS5yZXR1cm5zKFZvd1NoYXBlKVxuICAgICAgfSksXG4gICAgICB0cmFuc2ZlcldhdGNoZXI6IE0uaW50ZXJmYWNlKFwidHJhbnNmZXJXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLm5hdCgpKS5vcHRpb25hbCh7XG4gICAgICAgICAgb3B0czogTS5vcihNLnVuZGVmaW5lZCgpLCBJQkNUcmFuc2Zlck9wdGlvbnNTaGFwZSksXG4gICAgICAgICAgcm91dGU6IFRyYW5zZmVyUm91dGVTaGFwZVxuICAgICAgICB9KS5yZXR1cm5zKFZvdyQ2KE0ucmVjb3JkKCkpKVxuICAgICAgfSksXG4gICAgICBleHRyYWN0Rmlyc3RSZXN1bHRXYXRjaGVyOiBNLmludGVyZmFjZShcImV4dHJhY3RGaXJzdFJlc3VsdFdhdGNoZXJcIiwge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKFtNLnJlY29yZCgpXSkub3B0aW9uYWwoTS5hcnJheU9mKE0udW5kZWZpbmVkKCkpKS5yZXR1cm5zKE0uYW55KCkpXG4gICAgICB9KSxcbiAgICAgIHJldHVyblZvaWRXYXRjaGVyOiBNLmludGVyZmFjZShcInJldHVyblZvaWRXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLmFueSgpKS5vcHRpb25hbChNLmFueSgpKS5yZXR1cm5zKE0udW5kZWZpbmVkKCkpXG4gICAgICB9KSxcbiAgICAgIHNlYXRFeGl0ZXJIYW5kbGVyOiBNLmludGVyZmFjZShcInNlYXRFeGl0ZXJIYW5kbGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChNLnVuZGVmaW5lZCgpLCBNLnJlbW90YWJsZSgpKS5yZXR1cm5zKFxuICAgICAgICAgIE0udW5kZWZpbmVkKClcbiAgICAgICAgKSxcbiAgICAgICAgb25SZWplY3RlZDogTS5jYWxsKE0uZXJyb3IoKSwgTS5yZW1vdGFibGUoKSkucmV0dXJucyhNLnVuZGVmaW5lZCgpKVxuICAgICAgfSksXG4gICAgICBnZXRCYWxhbmNlV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJnZXRCYWxhbmNlV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoQW1vdW50U2hhcGUsIERlbm9tU2hhcGUpLnJldHVybnMoRGVub21BbW91bnRTaGFwZSlcbiAgICAgIH0pLFxuICAgICAgcXVlcnlCYWxhbmNlV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJxdWVyeUJhbGFuY2VXYXRjaGVyXCIsIHtcbiAgICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChUeXBlZEpzb25TaGFwZSkucmV0dXJucyhEZW5vbUFtb3VudFNoYXBlKVxuICAgICAgfSksXG4gICAgICBxdWVyeUJhbGFuY2VzV2F0Y2hlcjogTS5pbnRlcmZhY2UoXCJxdWVyeUJhbGFuY2VzV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoVHlwZWRKc29uU2hhcGUpLnJldHVybnMoXG4gICAgICAgICAgTS5hcnJheU9mKERlbm9tQW1vdW50U2hhcGUpXG4gICAgICAgIClcbiAgICAgIH0pLFxuICAgICAgcGFyc2VJbmJvdW5kVHJhbnNmZXJXYXRjaGVyOiBNLmludGVyZmFjZShcInBhcnNlSW5ib3VuZFRyYW5zZmVyV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5yZWNvcmQoKSwgTS5yZWNvcmQoKSkucmV0dXJucyhNLnJlY29yZCgpKSxcbiAgICAgICAgb25SZWplY3RlZDogTS5jYWxsKE0uYW55KCksIE0ucmVjb3JkKCkpLnJldHVybnMoTS5yZWNvcmQoKSlcbiAgICAgIH0pLFxuICAgICAgaW52aXRhdGlvbk1ha2VyczogTS5pbnRlcmZhY2UoXCJpbnZpdGF0aW9uTWFrZXJzXCIsIHtcbiAgICAgICAgQ2xvc2VBY2NvdW50OiBNLmNhbGwoKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgICAgICAgRGVsZWdhdGU6IE0uY2FsbChNLnN0cmluZygpLCBBbW91bnRTaGFwZSkucmV0dXJucyhNLnByb21pc2UoKSksXG4gICAgICAgIERlcG9zaXQ6IE0uY2FsbCgpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICAgICAgICBTZW5kOiBNLmNhbGwoKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgICAgICAgU2VuZEFsbDogTS5jYWxsKCkucmV0dXJucyhNLnByb21pc2UoKSksXG4gICAgICAgIFRyYW5zZmVyOiBNLmNhbGwoKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgICAgICAgVW5kZWxlZ2F0ZTogTS5jYWxsKE0uc3RyaW5nKCksIEFtb3VudFNoYXBlKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgICAgICAgV2l0aGRyYXc6IE0uY2FsbCgpLnJldHVybnMoTS5wcm9taXNlKCkpXG4gICAgICB9KVxuICAgIH0sXG4gICAgLypcblxuXG5cblxuXG4gICAgICovXG4gICAgKHsgYWNjb3VudCwgYWRkcmVzcywgc3RvcmFnZU5vZGUgfSkgPT4ge1xuICAgICAgY29uc3QgdG9waWNLaXQgPSBzdG9yYWdlTm9kZSA/IG1ha2VSZWNvcmRlcktpdChzdG9yYWdlTm9kZSwgUFVCTElDX1RPUElDUzIuYWNjb3VudFsxXSkgOiB2b2lkIDA7XG4gICAgICBpZiAodG9waWNLaXQpIHtcbiAgICAgICAgdm9pZCBFKHRvcGljS2l0LnJlY29yZGVyKS53cml0ZShcIlwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBhY2tldFRvb2xzID0gbWFrZVBhY2tldFRvb2xzKGFjY291bnQpO1xuICAgICAgcmV0dXJuIHsgYWNjb3VudCwgYWRkcmVzcywgcGFja2V0VG9vbHMsIHRvcGljS2l0IH07XG4gICAgfSxcbiAgICB7XG4gICAgICBoZWxwZXI6IHtcbiAgICAgICAgLypcblxuXG4gICAgICAgICAqL1xuICAgICAgICBhbW91bnRUb0NvaW4oYW1vdW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNvZXJjZUNvaW4oY2hhaW5IdWIsIGFtb3VudCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpbnZpdGF0aW9uTWFrZXJzOiB7XG4gICAgICAgIC8qXG5cblxuICAgICAgICAgKi9cbiAgICAgICAgRGVsZWdhdGUodmFsaWRhdG9yQWRkcmVzcywgZXJ0cEFtb3VudCkge1xuICAgICAgICAgIHRyYWNlNihcIkRlbGVnYXRlXCIsIHZhbGlkYXRvckFkZHJlc3MsIGVydHBBbW91bnQpO1xuICAgICAgICAgIHJldHVybiB6Y2YubWFrZUludml0YXRpb24oKHNlYXQpID0+IHtcbiAgICAgICAgICAgIHNlYXQuZXhpdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgICB0aGlzLmZhY2V0cy5ob2xkZXIuZGVsZWdhdGUodmFsaWRhdG9yQWRkcmVzcywgZXJ0cEFtb3VudClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSwgXCJEZWxlZ2F0ZVwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgRGVwb3NpdCgpIHtcbiAgICAgICAgICB0cmFjZTYoXCJEZXBvc2l0XCIpO1xuICAgICAgICAgIHJldHVybiB6Y2YubWFrZUludml0YXRpb24oXG4gICAgICAgICAgICAoc2VhdCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCB7IGdpdmUgfSA9IHNlYXQuZ2V0UHJvcG9zYWwoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgICAgIHpvZVRvb2xzLmxvY2FsVHJhbnNmZXIoXG4gICAgICAgICAgICAgICAgICBzZWF0LFxuICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuYWNjb3VudCxcbiAgICAgICAgICAgICAgICAgIGdpdmVcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIHRoaXMuZmFjZXRzLnNlYXRFeGl0ZXJIYW5kbGVyLFxuICAgICAgICAgICAgICAgIHNlYXRcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIkRlcG9zaXRcIixcbiAgICAgICAgICAgIHZvaWQgMCxcbiAgICAgICAgICAgIE0uc3BsaXRSZWNvcmQoeyBnaXZlOiBBbnlOYXRBbW91bnRzUmVjb3JkLCB3YW50OiB7fSB9KVxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qXG5cblxuICAgICAgICAgKi9cbiAgICAgICAgVW5kZWxlZ2F0ZSh2YWxpZGF0b3JBZGRyZXNzLCBlcnRwQW1vdW50KSB7XG4gICAgICAgICAgdHJhY2U2KFwiVW5kZWxlZ2F0ZVwiLCB2YWxpZGF0b3JBZGRyZXNzLCBlcnRwQW1vdW50KTtcbiAgICAgICAgICByZXR1cm4gemNmLm1ha2VJbnZpdGF0aW9uKChzZWF0KSA9PiB7XG4gICAgICAgICAgICBzZWF0LmV4aXQoKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICAgICAgdGhpcy5mYWNldHMuaG9sZGVyLnVuZGVsZWdhdGUodmFsaWRhdG9yQWRkcmVzcywgZXJ0cEFtb3VudClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSwgXCJVbmRlbGVnYXRlXCIpO1xuICAgICAgICB9LFxuICAgICAgICBDbG9zZUFjY291bnQoKSB7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoXCJub3QgeWV0IGltcGxlbWVudGVkXCIpO1xuICAgICAgICB9LFxuICAgICAgICBTZW5kKCkge1xuICAgICAgICAgIGNvbnN0IG9mZmVySGFuZGxlciA9IChzZWF0LCB7IHRvQWNjb3VudCwgYW1vdW50IH0pID0+IHtcbiAgICAgICAgICAgIHNlYXQuZXhpdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKHRoaXMuZmFjZXRzLmhvbGRlci5zZW5kKHRvQWNjb3VudCwgYW1vdW50KSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gemNmLm1ha2VJbnZpdGF0aW9uKG9mZmVySGFuZGxlciwgXCJTZW5kXCIpO1xuICAgICAgICB9LFxuICAgICAgICBTZW5kQWxsKCkge1xuICAgICAgICAgIGNvbnN0IG9mZmVySGFuZGxlciA9IChzZWF0LCB7IHRvQWNjb3VudCwgYW1vdW50cyB9KSA9PiB7XG4gICAgICAgICAgICBzZWF0LmV4aXQoKTtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaCh0aGlzLmZhY2V0cy5ob2xkZXIuc2VuZEFsbCh0b0FjY291bnQsIGFtb3VudHMpKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiB6Y2YubWFrZUludml0YXRpb24ob2ZmZXJIYW5kbGVyLCBcIlNlbmRBbGxcIik7XG4gICAgICAgIH0sXG4gICAgICAgIFRyYW5zZmVyKCkge1xuICAgICAgICAgIGNvbnN0IG9mZmVySGFuZGxlciA9IChzZWF0LCB7IGFtb3VudCwgZGVzdGluYXRpb24sIG9wdHMgfSkgPT4ge1xuICAgICAgICAgICAgc2VhdC5leGl0KCk7XG4gICAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICAgIHRoaXMuZmFjZXRzLmhvbGRlci50cmFuc2ZlcihkZXN0aW5hdGlvbiwgYW1vdW50LCBvcHRzKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiB6Y2YubWFrZUludml0YXRpb24ob2ZmZXJIYW5kbGVyLCBcIlRyYW5zZmVyXCIpO1xuICAgICAgICB9LFxuICAgICAgICBXaXRoZHJhdygpIHtcbiAgICAgICAgICB0cmFjZTYoXCJXaXRoZHJhd1wiKTtcbiAgICAgICAgICByZXR1cm4gemNmLm1ha2VJbnZpdGF0aW9uKFxuICAgICAgICAgICAgKHNlYXQpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgeyB3YW50IH0gPSBzZWF0LmdldFByb3Bvc2FsKCk7XG4gICAgICAgICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICAgICAgICB6b2VUb29scy53aXRoZHJhd1RvU2VhdChcbiAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmFjY291bnQsXG4gICAgICAgICAgICAgICAgICBzZWF0LFxuICAgICAgICAgICAgICAgICAgd2FudFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgdGhpcy5mYWNldHMuc2VhdEV4aXRlckhhbmRsZXIsXG4gICAgICAgICAgICAgICAgc2VhdFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiV2l0aGRyYXdcIixcbiAgICAgICAgICAgIHZvaWQgMCxcbiAgICAgICAgICAgIE0uc3BsaXRSZWNvcmQoeyBnaXZlOiB7fSwgd2FudDogQW55TmF0QW1vdW50c1JlY29yZCB9KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1bmRlbGVnYXRlV2F0Y2hlcjoge1xuICAgICAgICAvKlxuXG5cblxuXG5cbiAgICAgICAgICovXG4gICAgICAgIG9uRnVsZmlsbGVkKHJlc3BvbnNlKSB7XG4gICAgICAgICAgY29uc3QgeyBjb21wbGV0aW9uVGltZSB9ID0gcmVzcG9uc2VbMF07XG4gICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgRSh0aW1lclNlcnZpY2UpLndha2VBdChcbiAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgQmlnSW50KGNvbXBsZXRpb25UaW1lLnNlY29uZHMpICsgbWF4Q2xvY2tTa2V3XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgdGhpcy5mYWNldHMucmV0dXJuVm9pZFdhdGNoZXJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdHJhbnNmZXJXYXRjaGVyOiB7XG4gICAgICAgIC8qXG5cblxuXG5cblxuICAgICAgICAgKi9cbiAgICAgICAgb25GdWxmaWxsZWQodGltZW91dFRpbWVzdGFtcCwgeyBvcHRzLCByb3V0ZSB9KSB7XG4gICAgICAgICAgY29uc3QgeyBmb3J3YXJkSW5mbywgLi4udHJhbnNmZXJEZXRhaWxzIH0gPSByb3V0ZTtcbiAgICAgICAgICBsZXQgbWVtbztcbiAgICAgICAgICBpZiAob3B0cyAmJiBcIm1lbW9cIiBpbiBvcHRzKSB7XG4gICAgICAgICAgICBtZW1vID0gb3B0cy5tZW1vO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZm9yd2FyZEluZm8pIHtcbiAgICAgICAgICAgIG1lbW8gPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIGZvcndhcmQ6IHtcbiAgICAgICAgICAgICAgICAuLi5mb3J3YXJkSW5mby5mb3J3YXJkLFxuICAgICAgICAgICAgICAgIG5leHQ6IG1lbW9cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHRyYW5zZmVyTXNnID0gdHlwZWRKc29uKFxuICAgICAgICAgICAgXCIvaWJjLmFwcGxpY2F0aW9ucy50cmFuc2Zlci52MS5Nc2dUcmFuc2ZlclwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAuLi50cmFuc2ZlckRldGFpbHMsXG4gICAgICAgICAgICAgIHNlbmRlcjogdGhpcy5zdGF0ZS5hZGRyZXNzLnZhbHVlLFxuICAgICAgICAgICAgICB0aW1lb3V0SGVpZ2h0OiBvcHRzPy50aW1lb3V0SGVpZ2h0ID8/IHtcbiAgICAgICAgICAgICAgICByZXZpc2lvbkhlaWdodDogMG4sXG4gICAgICAgICAgICAgICAgcmV2aXNpb25OdW1iZXI6IDBuXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHRpbWVvdXRUaW1lc3RhbXAsXG4gICAgICAgICAgICAgIG1lbW86IG1lbW8gPz8gXCJcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgeyBob2xkZXIgfSA9IHRoaXMuZmFjZXRzO1xuICAgICAgICAgIGNvbnN0IHNlbmRlciA9IG1ha2VJQkNUcmFuc2ZlclNlbmRlcihcbiAgICAgICAgICAgIC8qICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaG9sZGVyLFxuICAgICAgICAgICAgdHJhbnNmZXJNc2dcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiBob2xkZXIuc2VuZFRoZW5XYWl0Rm9yQWNrKHNlbmRlcik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvKlxuXG5cbiAgICAgICAqL1xuICAgICAgZXh0cmFjdEZpcnN0UmVzdWx0V2F0Y2hlcjoge1xuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICBvbkZ1bGZpbGxlZChyZXN1bHRzKSB7XG4gICAgICAgICAgcmVzdWx0cy5sZW5ndGggPT09IDEgfHwgdGhyb3dSZWRhY3RlZGBleHBlY3RlZCBleGFjdGx5IG9uZSByZXN1bHQ7IGdvdCAke3Jlc3VsdHN9YDtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0c1swXTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJldHVyblZvaWRXYXRjaGVyOiB7XG4gICAgICAgIG9uRnVsZmlsbGVkKCkge1xuICAgICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvKlxuXG5cbiAgICAgICAqL1xuICAgICAgZ2V0QmFsYW5jZVdhdGNoZXI6IHtcbiAgICAgICAgLypcblxuXG5cbiAgICAgICAgICovXG4gICAgICAgIG9uRnVsZmlsbGVkKG5hdEFtb3VudCwgZGVub20pIHtcbiAgICAgICAgICByZXR1cm4gaGFyZGVuKHsgZGVub20sIHZhbHVlOiBuYXRBbW91bnQudmFsdWUgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgc2VhdEV4aXRlckhhbmRsZXI6IHtcbiAgICAgICAgLypcblxuXG4gICAgICAgICAqL1xuICAgICAgICBvbkZ1bGZpbGxlZChfLCBzZWF0KSB7XG4gICAgICAgICAgc2VhdC5leGl0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qXG5cblxuICAgICAgICAgKi9cbiAgICAgICAgb25SZWplY3RlZChyZWFzb24sIHNlYXQpIHtcbiAgICAgICAgICBzZWF0LmV4aXQocmVhc29uKTtcbiAgICAgICAgICB0aHJvdyByZWFzb247XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvKlxuXG5cbiAgICAgICAqL1xuICAgICAgcXVlcnlCYWxhbmNlV2F0Y2hlcjoge1xuICAgICAgICAvKlxuXG5cblxuXG4gICAgICAgICAqL1xuICAgICAgICBvbkZ1bGZpbGxlZChyZXN1bHQpIHtcbiAgICAgICAgICBjb25zdCB7IGJhbGFuY2UgfSA9IHJlc3VsdDtcbiAgICAgICAgICBpZiAoIWJhbGFuY2UgfHwgIWJhbGFuY2U/LmRlbm9tKSB7XG4gICAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYEV4cGVjdGVkIGJhbGFuY2UgJHtxdW90ZShyZXN1bHQpfTtgO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaGFyZGVuKHRvRGVub21BbW91bnQoYmFsYW5jZSkpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLypcblxuXG4gICAgICAgKi9cbiAgICAgIHF1ZXJ5QmFsYW5jZXNXYXRjaGVyOiB7XG4gICAgICAgIC8qXG5cblxuXG5cblxuXG4gICAgICAgICAqL1xuICAgICAgICBvbkZ1bGZpbGxlZChyZXN1bHQpIHtcbiAgICAgICAgICBjb25zdCB7IGJhbGFuY2VzIH0gPSByZXN1bHQ7XG4gICAgICAgICAgaWYgKCFiYWxhbmNlcyB8fCAhQXJyYXkuaXNBcnJheShiYWxhbmNlcykpIHtcbiAgICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgRXhwZWN0ZWQgYmFsYW5jZXMgJHtxdW90ZShyZXN1bHQpfTtgO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaGFyZGVuKGJhbGFuY2VzLm1hcCh0b0Rlbm9tQW1vdW50KSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwYXJzZUluYm91bmRUcmFuc2ZlcldhdGNoZXI6IHtcbiAgICAgICAgLypcblxuXG5cblxuICAgICAgICAgKi9cbiAgICAgICAgb25GdWxmaWxsZWQobG9jYWxEZW5vbUhhc2gsIG5haXZlUmVzdWx0KSB7XG4gICAgICAgICAgY29uc3QgbG9jYWxEZW5vbSA9IGBpYmMvJHtsb2NhbERlbm9tSGFzaC5oYXNofWA7XG4gICAgICAgICAgY29uc3QgeyBhbW91bnQsIC4uLnJlc3QgfSA9IG5haXZlUmVzdWx0O1xuICAgICAgICAgIGNvbnN0IHsgZGVub206IF8sIC4uLmFtb3VudFJlc3QgfSA9IGFtb3VudDtcbiAgICAgICAgICByZXR1cm4gaGFyZGVuKHtcbiAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICBhbW91bnQ6IHsgLi4uYW1vdW50UmVzdCwgZGVub206IGxvY2FsRGVub20gfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKlxuXG5cblxuXG4gICAgICAgICAqL1xuICAgICAgICBvblJlamVjdGVkKHJlYXNvbiwgbmFpdmVSZXN1bHQpIHtcbiAgICAgICAgICBpZiAocmVhc29uIGluc3RhbmNlb2YgRXJyb3IgJiYgU3RyaW5nKHJlYXNvbi5tZXNzYWdlKS5pbmNsdWRlcyhcImRlbm9taW5hdGlvbiB0cmFjZSBub3QgZm91bmRcIikpIHtcbiAgICAgICAgICAgIHJldHVybiBuYWl2ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgcmVhc29uO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaG9sZGVyOiB7XG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgYXNDb250aW51aW5nT2ZmZXIoKSB7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IG51bGw7XG4gICAgICAgICAgICBjb25zdCB7IGhvbGRlciwgaW52aXRhdGlvbk1ha2VyczogaW0gfSA9IHRoaXMuZmFjZXRzO1xuICAgICAgICAgICAgY29uc3QgaW52aXRhdGlvbk1ha2VycyA9IChcbiAgICAgICAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAvKiAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIGltXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIGhhcmRlbih7XG4gICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgIHB1YmxpY1N1YnNjcmliZXJzOiBhd2FpdCB3aGVuKGhvbGRlci5nZXRQdWJsaWNUb3BpY3MoKSksXG4gICAgICAgICAgICAgIGludml0YXRpb25NYWtlcnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgZ2V0QmFsYW5jZShkZW5vbUFyZykge1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBbYnJhbmQsIGRlbm9tXSA9IHR5cGVvZiBkZW5vbUFyZyA9PT0gXCJzdHJpbmdcIiA/IFtjaGFpbkh1Yi5nZXRBc3NldChkZW5vbUFyZywgXCJhZ29yaWNcIik/LmJyYW5kLCBkZW5vbUFyZ10gOiBbZGVub21BcmcsIGNoYWluSHViLmdldERlbm9tKGRlbm9tQXJnKV07XG4gICAgICAgICAgICBpZiAoIWRlbm9tKSB7XG4gICAgICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgTm8gZGVub20gZm9yIGJyYW5kOiAke2Rlbm9tQXJnfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnJhbmQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgICAgIEUodGhpcy5zdGF0ZS5hY2NvdW50KS5nZXRCYWxhbmNlKGJyYW5kKSxcbiAgICAgICAgICAgICAgICB0aGlzLmZhY2V0cy5nZXRCYWxhbmNlV2F0Y2hlcixcbiAgICAgICAgICAgICAgICBkZW5vbVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgICBFKGxvY2FsY2hhaW4pLnF1ZXJ5KFxuICAgICAgICAgICAgICAgIHR5cGVkSnNvbihcIi9jb3Ntb3MuYmFuay52MWJldGExLlF1ZXJ5QmFsYW5jZVJlcXVlc3RcIiwge1xuICAgICAgICAgICAgICAgICAgYWRkcmVzczogdGhpcy5zdGF0ZS5hZGRyZXNzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgZGVub21cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICB0aGlzLmZhY2V0cy5xdWVyeUJhbGFuY2VXYXRjaGVyXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIGdldEJhbGFuY2VzKCkge1xuICAgICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICAgIEUobG9jYWxjaGFpbikucXVlcnkoXG4gICAgICAgICAgICAgIHR5cGVkSnNvbihcIi9jb3Ntb3MuYmFuay52MWJldGExLlF1ZXJ5QWxsQmFsYW5jZXNSZXF1ZXN0XCIsIHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzOiB0aGlzLnN0YXRlLmFkZHJlc3MudmFsdWVcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy5xdWVyeUJhbGFuY2VzV2F0Y2hlclxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIGdldFB1YmxpY1RvcGljcygpIHtcbiAgICAgICAgICByZXR1cm4gYXNWb3coYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IHsgdG9waWNLaXQgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICBpZiAoIXRvcGljS2l0KSB0aHJvdyB0aHJvd1JlZGFjdGVkYE5vIHRvcGljS2l0OyBzdG9yYWdlTm9kZSBub3QgcHJvdmlkZWRgO1xuICAgICAgICAgICAgcmV0dXJuIGhhcmRlbih7XG4gICAgICAgICAgICAgIGFjY291bnQ6IHtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogUFVCTElDX1RPUElDUzIuYWNjb3VudFswXSxcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyOiB0b3BpY0tpdC5zdWJzY3JpYmVyLFxuICAgICAgICAgICAgICAgIHN0b3JhZ2VQYXRoOiBhd2FpdCB0b3BpY0tpdC5yZWNvcmRlci5nZXRTdG9yYWdlUGF0aCgpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvL1xuICAgICAgICAvKlxuXG5cbiAgICAgICAgICovXG4gICAgICAgIGRlbGVnYXRlKHZhbGlkYXRvckFkZHJlc3MsIGVydHBBbW91bnQpIHtcbiAgICAgICAgICBjb25zdCB7IGFjY291bnQ6IGxjYSB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBjb25zdCBhbW91bnQgPSBjb2VyY2VDb2luKGNoYWluSHViLCBlcnRwQW1vdW50KTtcbiAgICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgICBFKGxjYSkuZXhlY3V0ZVR4KFtcbiAgICAgICAgICAgICAgdHlwZWRKc29uKFwiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuTXNnRGVsZWdhdGVcIiwge1xuICAgICAgICAgICAgICAgIGFtb3VudCxcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3JBZGRyZXNzLFxuICAgICAgICAgICAgICAgIGRlbGVnYXRvckFkZHJlc3M6IHRoaXMuc3RhdGUuYWRkcmVzcy52YWx1ZVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy5leHRyYWN0Rmlyc3RSZXN1bHRXYXRjaGVyXG4gICAgICAgICAgKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy9cbiAgICAgICAgLypcblxuXG5cbiAgICAgICAgICovXG4gICAgICAgIHVuZGVsZWdhdGUodmFsaWRhdG9yQWRkcmVzcywgZXJ0cEFtb3VudCkge1xuICAgICAgICAgIGNvbnN0IGFtb3VudCA9IGNvZXJjZUNvaW4oY2hhaW5IdWIsIGVydHBBbW91bnQpO1xuICAgICAgICAgIGNvbnN0IHsgYWNjb3VudDogbGNhIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICAgIEUobGNhKS5leGVjdXRlVHgoW1xuICAgICAgICAgICAgICB0eXBlZEpzb24oXCIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5Nc2dVbmRlbGVnYXRlXCIsIHtcbiAgICAgICAgICAgICAgICBhbW91bnQsXG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yQWRkcmVzcyxcbiAgICAgICAgICAgICAgICBkZWxlZ2F0b3JBZGRyZXNzOiB0aGlzLnN0YXRlLmFkZHJlc3MudmFsdWVcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgdGhpcy5mYWNldHMudW5kZWxlZ2F0ZVdhdGNoZXJcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICAvKlxuXG5cblxuICAgICAgICAgKi9cbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgZGVwb3NpdChwYXltZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgRSh0aGlzLnN0YXRlLmFjY291bnQpLmRlcG9zaXQocGF5bWVudCksXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy5yZXR1cm5Wb2lkV2F0Y2hlclxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICB3aXRoZHJhdyhhbW91bnQpIHtcbiAgICAgICAgICByZXR1cm4gd2F0Y2goRSh0aGlzLnN0YXRlLmFjY291bnQpLndpdGhkcmF3KGFtb3VudCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICBleGVjdXRlVHgobWVzc2FnZXMpIHtcbiAgICAgICAgICByZXR1cm4gd2F0Y2goRSh0aGlzLnN0YXRlLmFjY291bnQpLmV4ZWN1dGVUeChtZXNzYWdlcykpO1xuICAgICAgICB9LFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIGdldEFkZHJlc3MoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuYWRkcmVzcztcbiAgICAgICAgfSxcbiAgICAgICAgLypcblxuXG5cbiAgICAgICAgICovXG4gICAgICAgIHNlbmQodG9BY2NvdW50LCBhbW91bnQpIHtcbiAgICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgICAgdHJhY2U2KFwic2VuZFwiLCB0b0FjY291bnQsIGFtb3VudCk7XG4gICAgICAgICAgICBjb25zdCBjb3Ntb3NEZXN0ID0gY2hhaW5IdWIuY29lcmNlQ29zbW9zQWRkcmVzcyh0b0FjY291bnQpO1xuICAgICAgICAgICAgY29zbW9zRGVzdC5jaGFpbklkID09PSB0aGlzLnN0YXRlLmFkZHJlc3MuY2hhaW5JZCB8fCB0aHJvd1JlZGFjdGVkYGJhbmsvc2VuZCBjYW5ub3Qgc2VuZCB0byBhIGRpZmZlcmVudCBjaGFpbiAke3F1b3RlKGNvc21vc0Rlc3QuY2hhaW5JZCl9YDtcbiAgICAgICAgICAgIGNvbnN0IHsgaGVscGVyIH0gPSB0aGlzLmZhY2V0cztcbiAgICAgICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICAgICAgRSh0aGlzLnN0YXRlLmFjY291bnQpLmV4ZWN1dGVUeChbXG4gICAgICAgICAgICAgICAgdHlwZWRKc29uKFwiL2Nvc21vcy5iYW5rLnYxYmV0YTEuTXNnU2VuZFwiLCB7XG4gICAgICAgICAgICAgICAgICBhbW91bnQ6IFtoZWxwZXIuYW1vdW50VG9Db2luKGFtb3VudCldLFxuICAgICAgICAgICAgICAgICAgdG9BZGRyZXNzOiBjb3Ntb3NEZXN0LnZhbHVlLFxuICAgICAgICAgICAgICAgICAgZnJvbUFkZHJlc3M6IHRoaXMuc3RhdGUuYWRkcmVzcy52YWx1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICB0aGlzLmZhY2V0cy5yZXR1cm5Wb2lkV2F0Y2hlclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLypcblxuXG5cbiAgICAgICAgICovXG4gICAgICAgIHNlbmRBbGwodG9BY2NvdW50LCBhbW91bnRzKSB7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICAgIHRyYWNlNihcInNlbmRBbGxcIiwgdG9BY2NvdW50LCBhbW91bnRzKTtcbiAgICAgICAgICAgIGNvbnN0IHsgaGVscGVyIH0gPSB0aGlzLmZhY2V0cztcbiAgICAgICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICAgICAgRSh0aGlzLnN0YXRlLmFjY291bnQpLmV4ZWN1dGVUeChbXG4gICAgICAgICAgICAgICAgdHlwZWRKc29uKFwiL2Nvc21vcy5iYW5rLnYxYmV0YTEuTXNnU2VuZFwiLCB7XG4gICAgICAgICAgICAgICAgICBhbW91bnQ6IGFtb3VudHMubWFwKChhMikgPT4gaGVscGVyLmFtb3VudFRvQ29pbihhMikpLFxuICAgICAgICAgICAgICAgICAgdG9BZGRyZXNzOiB0b0FjY291bnQudmFsdWUsXG4gICAgICAgICAgICAgICAgICBmcm9tQWRkcmVzczogdGhpcy5zdGF0ZS5hZGRyZXNzLnZhbHVlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIHRoaXMuZmFjZXRzLnJldHVyblZvaWRXYXRjaGVyXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKlxuXG5cblxuXG5cblxuXG5cblxuXG4gICAgICAgICAqL1xuICAgICAgICB0cmFuc2ZlcihkZXN0aW5hdGlvbiwgYW1vdW50LCBvcHRzKSB7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICAgIHRyYWNlNihcIlRyYW5zZmVycmluZyBmdW5kcyBvdmVyIElCQ1wiKTtcbiAgICAgICAgICAgIGNvbnN0IGRlbm9tQW1vdW50ID0gY29lcmNlRGVub21BbW91bnQoY2hhaW5IdWIsIGFtb3VudCk7XG4gICAgICAgICAgICBjb25zdCB7IGZvcndhcmRPcHRzLCAuLi5yZXN0IH0gPSBvcHRzID8/IHt9O1xuICAgICAgICAgICAgY29uc3Qgcm91dGUgPSBjaGFpbkh1Yi5tYWtlVHJhbnNmZXJSb3V0ZShcbiAgICAgICAgICAgICAgZGVzdGluYXRpb24sXG4gICAgICAgICAgICAgIGRlbm9tQW1vdW50LFxuICAgICAgICAgICAgICBcImFnb3JpY1wiLFxuICAgICAgICAgICAgICBmb3J3YXJkT3B0c1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRyYWNlNihcImdvdCB0cmFuc2ZlciByb3V0ZVwiLCByb3V0ZSk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHRWID0gd2F0Y2goXG4gICAgICAgICAgICAgIHRpbWVzdGFtcEhlbHBlci52b3dPclZhbHVlRnJvbU9wdHMob3B0cyksXG4gICAgICAgICAgICAgIHRoaXMuZmFjZXRzLnRyYW5zZmVyV2F0Y2hlcixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9wdHM6IHJlc3QsXG4gICAgICAgICAgICAgICAgcm91dGVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRWO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKlxuXG4gICAgICAgICAqL1xuICAgICAgICBwYXJzZUluYm91bmRUcmFuc2ZlcihyZWNvcmQpIHtcbiAgICAgICAgICB0cmFjZTYoXCJwYXJzZUluYm91bmRUcmFuc2ZlclwiLCByZWNvcmQpO1xuICAgICAgICAgIHJldHVybiBhc1ZvdygoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYWNrZXQgPSAoXG4gICAgICAgICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICByZWNvcmRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCBmdFBhY2tldERhdGEgPSBKU09OLnBhcnNlKGF0b2IocGFja2V0LmRhdGEpKTtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgZGVub206IHRyYW5zZmVyRGVub20sXG4gICAgICAgICAgICAgIHNlbmRlcixcbiAgICAgICAgICAgICAgcmVjZWl2ZXIsXG4gICAgICAgICAgICAgIGFtb3VudFxuICAgICAgICAgICAgfSA9IGZ0UGFja2V0RGF0YTtcbiAgICAgICAgICAgIGNvbnN0IGJ1aWxkUmV0dXJuVmFsdWUgPSAobG9jYWxEZW5vbSkgPT4gaGFyZGVuKHtcbiAgICAgICAgICAgICAgYW1vdW50OiAoXG4gICAgICAgICAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZTogQmlnSW50KGFtb3VudCksXG4gICAgICAgICAgICAgICAgICBkZW5vbTogbG9jYWxEZW5vbVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgZnJvbUFjY291bnQ6IHNlbmRlcixcbiAgICAgICAgICAgICAgdG9BY2NvdW50OiByZWNlaXZlcixcbiAgICAgICAgICAgICAgZXh0cmE6IHtcbiAgICAgICAgICAgICAgICAuLi5mdFBhY2tldERhdGFcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgZGVub21PclRyYWNlO1xuICAgICAgICAgICAgY29uc3QgcHJlZml4ID0gYCR7cGFja2V0LnNvdXJjZV9wb3J0fS8ke3BhY2tldC5zb3VyY2VfY2hhbm5lbH0vYDtcbiAgICAgICAgICAgIHRyYWNlNih7IHRyYW5zZmVyRGVub20sIHByZWZpeCB9KTtcbiAgICAgICAgICAgIGlmICh0cmFuc2ZlckRlbm9tLnN0YXJ0c1dpdGgocHJlZml4KSkge1xuICAgICAgICAgICAgICBkZW5vbU9yVHJhY2UgPSB0cmFuc2ZlckRlbm9tLnNsaWNlKHByZWZpeC5sZW5ndGgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZGVub21PclRyYWNlID0gYCR7cGFja2V0LmRlc3RpbmF0aW9uX3BvcnR9LyR7cGFja2V0LmRlc3RpbmF0aW9uX2NoYW5uZWx9LyR7dHJhbnNmZXJEZW5vbX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgICBFKGxvY2FsY2hhaW4pLnF1ZXJ5KFxuICAgICAgICAgICAgICAgIHR5cGVkSnNvbihcbiAgICAgICAgICAgICAgICAgIFwiL2liYy5hcHBsaWNhdGlvbnMudHJhbnNmZXIudjEuUXVlcnlEZW5vbUhhc2hSZXF1ZXN0XCIsXG4gICAgICAgICAgICAgICAgICB7IHRyYWNlOiBkZW5vbU9yVHJhY2UgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgdGhpcy5mYWNldHMucGFyc2VJbmJvdW5kVHJhbnNmZXJXYXRjaGVyLFxuICAgICAgICAgICAgICBidWlsZFJldHVyblZhbHVlKGRlbm9tT3JUcmFjZSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICB0cmFuc2ZlclN0ZXBzKGFtb3VudCwgbXNnKSB7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidHJhbnNmZXJTdGVwcyBnb3RcIiwgYW1vdW50LCBtc2cpO1xuICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBub3QgeWV0IGltcGxlbWVudGVkYDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgc2VuZFRoZW5XYWl0Rm9yQWNrKHNlbmRlciwgb3B0cykge1xuICAgICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICAgIEUodGhpcy5zdGF0ZS5wYWNrZXRUb29scykuc2VuZFRoZW5XYWl0Rm9yQWNrKHNlbmRlciwgb3B0cylcbiAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgbWF0Y2hGaXJzdFBhY2tldChwYXR0ZXJuVikge1xuICAgICAgICAgIHJldHVybiB3YXRjaChFKHRoaXMuc3RhdGUucGFja2V0VG9vbHMpLm1hdGNoRmlyc3RQYWNrZXQocGF0dGVyblYpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgbW9uaXRvclRyYW5zZmVycyh0YXApIHtcbiAgICAgICAgICByZXR1cm4gd2F0Y2goRSh0aGlzLnN0YXRlLnBhY2tldFRvb2xzKS5tb25pdG9yVHJhbnNmZXJzKHRhcCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICApO1xuICByZXR1cm4gbWFrZUxvY2FsT3JjaGVzdHJhdGlvbkFjY291bnRLaXQ7XG59O1xuXG4vL1xudmFyIHsgVm93JDogVm93JDcgfSA9IFNoYXBlO1xudmFyIHRyYWNlNyA9IG1ha2VUcmFjZXIoXCJPcmNoZXN0cmF0b3JcIik7XG52YXIgT3JjaGVzdHJhdG9ySSA9IE0uaW50ZXJmYWNlKFwiT3JjaGVzdHJhdG9yXCIsIHtcbiAgZ2V0Q2hhaW46IE0uY2FsbChNLnN0cmluZygpKS5yZXR1cm5zKFZvdyQ3KE0ucmVtb3RhYmxlKFwiQ2hhaW5GYWNhZGVcIikpKSxcbiAgZ2V0RGVub21JbmZvOiBNLmNhbGwoRGVub21TaGFwZSwgTS5zdHJpbmcoKSkucmV0dXJucyhEZW5vbUluZm9TaGFwZSksXG4gIGFzQW1vdW50OiBNLmNhbGwoRGVub21BbW91bnRTaGFwZSkucmV0dXJucyhBbW91bnRTaGFwZSlcbn0pO1xudmFyIHByZXBhcmVPcmNoZXN0cmF0b3JLaXQgPSAoem9uZSwge1xuICBjaGFpbkh1YixcbiAgbWFrZUxvY2FsQ2hhaW5GYWNhZGUsXG4gIG1ha2VSZW1vdGVDaGFpbkZhY2FkZSxcbiAgdm93VG9vbHM6IHsgd2F0Y2gsIGFzVm93IH1cbn0pID0+IHtcbiAgY29uc3QgY2hhaW5CeU5hbWUgPSBtYWtlU2NhbGFyTWFwU3RvcmUoXCJjaGFpbk5hbWVcIik7XG4gIHJldHVybiB6b25lLmV4b0NsYXNzS2l0KFxuICAgIFwiT3JjaGVzdHJhdG9yXCIsXG4gICAge1xuICAgICAgb3JjaGVzdHJhdG9yOiBPcmNoZXN0cmF0b3JJLFxuICAgICAgbWFrZUxvY2FsQ2hhaW5GYWNhZGVXYXRjaGVyOiBNLmludGVyZmFjZShcIm1ha2VMb2NhbENoYWluRmFjYWRlV2F0Y2hlclwiLCB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5yZWNvcmQoKSkucmV0dXJucyhNLnJlbW90YWJsZSgpKVxuICAgICAgfSksXG4gICAgICBtYWtlUmVtb3RlQ2hhaW5GYWNhZGVXYXRjaGVyOiBNLmludGVyZmFjZShcbiAgICAgICAgXCJtYWtlUmVtb3RlQ2hhaW5GYWNhZGVXYXRjaGVyXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKE0uYW55KCksIE0uc3RyaW5nKCkpLm9wdGlvbmFsKE0uYXJyYXlPZihNLnVuZGVmaW5lZCgpKSkucmV0dXJucyhNLnJlbW90YWJsZSgpKVxuICAgICAgICB9XG4gICAgICApXG4gICAgfSxcbiAgICAoKSA9PiB7XG4gICAgICB0cmFjZTcoXCJtYWtpbmcgYW4gT3JjaGVzdHJhdG9yXCIpO1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH0sXG4gICAge1xuICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgIG1ha2VMb2NhbENoYWluRmFjYWRlV2F0Y2hlcjoge1xuICAgICAgICAvKlxuXG4gICAgICAgICAqL1xuICAgICAgICBvbkZ1bGZpbGxlZChhZ29yaWNDaGFpbkluZm8pIHtcbiAgICAgICAgICBjb25zdCBpdCA9IG1ha2VMb2NhbENoYWluRmFjYWRlKGFnb3JpY0NoYWluSW5mbyk7XG4gICAgICAgICAgY2hhaW5CeU5hbWUuc2V0KFwiYWdvcmljXCIsIGhhcmRlbih7IHZhbHVlOiBpdCwgcGVuZGluZzogZmFsc2UgfSkpO1xuICAgICAgICAgIHJldHVybiBpdDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8qXG5cblxuICAgICAgICovXG4gICAgICBtYWtlUmVtb3RlQ2hhaW5GYWNhZGVXYXRjaGVyOiB7XG4gICAgICAgIC8qXG5cblxuXG5cblxuICAgICAgICAgKi9cbiAgICAgICAgb25GdWxmaWxsZWQoW19hZ29yaWNDaGFpbkluZm8sIHJlbW90ZUNoYWluSW5mbywgY29ubmVjdGlvbkluZm9dLCBuYW1lKSB7XG4gICAgICAgICAgY29uc3QgaXQgPSBtYWtlUmVtb3RlQ2hhaW5GYWNhZGUocmVtb3RlQ2hhaW5JbmZvLCBjb25uZWN0aW9uSW5mbyk7XG4gICAgICAgICAgY2hhaW5CeU5hbWUuc2V0KG5hbWUsIGhhcmRlbih7IHZhbHVlOiBpdCwgcGVuZGluZzogZmFsc2UgfSkpO1xuICAgICAgICAgIHJldHVybiBpdDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9yY2hlc3RyYXRvcjoge1xuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICBnZXRDaGFpbihuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICAgIGlmIChjaGFpbkJ5TmFtZS5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgICAgY29uc3QgbWF5YmVDaGFpbiA9IGNoYWluQnlOYW1lLmdldChuYW1lKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG1heWJlQ2hhaW4ucGVuZGluZyA/IG1heWJlQ2hhaW4udm93IDogbWF5YmVDaGFpbi52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHZvdyA9IG5hbWUgPT09IFwiYWdvcmljXCIgPyB3YXRjaChcbiAgICAgICAgICAgICAgY2hhaW5IdWIuZ2V0Q2hhaW5JbmZvKFwiYWdvcmljXCIpLFxuICAgICAgICAgICAgICB0aGlzLmZhY2V0cy5tYWtlTG9jYWxDaGFpbkZhY2FkZVdhdGNoZXJcbiAgICAgICAgICAgICkgOiB3YXRjaChcbiAgICAgICAgICAgICAgY2hhaW5IdWIuZ2V0Q2hhaW5zQW5kQ29ubmVjdGlvbihcImFnb3JpY1wiLCBuYW1lKSxcbiAgICAgICAgICAgICAgdGhpcy5mYWNldHMubWFrZVJlbW90ZUNoYWluRmFjYWRlV2F0Y2hlcixcbiAgICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNoYWluQnlOYW1lLmluaXQobmFtZSwgaGFyZGVuKHsgdm93LCBwZW5kaW5nOiB0cnVlIH0pKTtcbiAgICAgICAgICAgIHJldHVybiB2b3c7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICBnZXREZW5vbUluZm8oZGVub20sIGhvbGRpbmdDaGFpbk5hbWUpIHtcbiAgICAgICAgICBjb25zdCBkZW5vbURldGFpbCA9IGNoYWluSHViLmdldEFzc2V0KGRlbm9tLCBob2xkaW5nQ2hhaW5OYW1lKTtcbiAgICAgICAgICBpZiAoIWRlbm9tRGV0YWlsKSB0aHJvdyB0aHJvd1JlZGFjdGVkYE5vIGRlbm9tIGRldGFpbCBmb3IgJHtxdW90ZShkZW5vbSl9YDtcbiAgICAgICAgICBjb25zdCB7IGNoYWluTmFtZSwgYmFzZU5hbWUsIGJhc2VEZW5vbSwgYnJhbmQgfSA9IGRlbm9tRGV0YWlsO1xuICAgICAgICAgIGNoYWluQnlOYW1lLmhhcyhjaGFpbk5hbWUpIHx8IHRocm93UmVkYWN0ZWRgdXNlIGdldENoYWluKCR7cXVvdGUoY2hhaW5OYW1lKX0pIGJlZm9yZSBnZXREZW5vbUluZm8oJHtxdW90ZShkZW5vbSl9KWA7XG4gICAgICAgICAgY29uc3QgbWF5YmVDaGFpbiA9IGNoYWluQnlOYW1lLmdldChjaGFpbk5hbWUpO1xuICAgICAgICAgIGlmIChtYXliZUNoYWluLnBlbmRpbmcpIHtcbiAgICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgd2FpdCB1bnRpbCBnZXRDaGFpbigke3F1b3RlKGNoYWluTmFtZSl9KSBjb21wbGV0ZXMgYmVmb3JlIGdldERlbm9tSW5mbygke3F1b3RlKGRlbm9tKX0pYDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgY2hhaW4gPSAoXG4gICAgICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICBtYXliZUNoYWluLnZhbHVlXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjaGFpbkJ5TmFtZS5oYXMoYmFzZU5hbWUpIHx8IHRocm93UmVkYWN0ZWRgdXNlIGdldENoYWluKCR7cXVvdGUoYmFzZU5hbWUpfSkgYmVmb3JlIGdldERlbm9tSW5mbygke3F1b3RlKGRlbm9tKX0pYDtcbiAgICAgICAgICBjb25zdCBtYXliZUJhc2UgPSBjaGFpbkJ5TmFtZS5nZXQoYmFzZU5hbWUpO1xuICAgICAgICAgIGlmIChtYXliZUJhc2UucGVuZGluZykge1xuICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGB3YWl0IHVudGlsIGdldENoYWluKCR7cXVvdGUoYmFzZU5hbWUpfSkgY29tcGxldGVzIGJlZm9yZSBnZXREZW5vbUluZm8oJHtxdW90ZShkZW5vbSl9KWA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGJhc2UyID0gKFxuICAgICAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbWF5YmVCYXNlLnZhbHVlXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gaGFyZGVuKHsgY2hhaW4sIGJhc2U6IGJhc2UyLCBicmFuZCwgYmFzZURlbm9tIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICBhc0Ftb3VudDogKCkgPT4gdGhyb3dSZWRhY3RlZGBub3QgeWV0IGltcGxlbWVudGVkYFxuICAgICAgfVxuICAgIH1cbiAgKTtcbn07XG5oYXJkZW4ocHJlcGFyZU9yY2hlc3RyYXRvcktpdCk7XG52YXIgcHJlcGFyZU9yY2hlc3RyYXRvciA9ICh6b25lLCBwb3dlcnMpID0+IHtcbiAgY29uc3QgbWFrZU9yY2hlc3RyYXRvcktpdCA9IHByZXBhcmVPcmNoZXN0cmF0b3JLaXQoem9uZSwgcG93ZXJzKTtcbiAgcmV0dXJuIHBpY2tGYWNldChtYWtlT3JjaGVzdHJhdG9yS2l0LCBcIm9yY2hlc3RyYXRvclwiKTtcbn07XG5cbi8vXG52YXIgdHJhY2U4ID0gbWFrZVRyYWNlcihcIlJlbW90ZUNoYWluRmFjYWRlXCIpO1xudmFyIHByZXBhcmVSZW1vdGVDaGFpbkZhY2FkZUtpdCA9ICh6b25lLCB7XG4gIG1ha2VDb3Ntb3NPcmNoZXN0cmF0aW9uQWNjb3VudCxcbiAgb3JjaGVzdHJhdGlvbixcbiAgLy9cbiAgLy9cbiAgc3RvcmFnZU5vZGUsXG4gIHRpbWVyLFxuICB2b3dUb29sczogeyBhbGxWb3dzLCBhc1Zvdywgd2F0Y2ggfVxufSkgPT4gem9uZS5leG9DbGFzc0tpdChcbiAgXCJSZW1vdGVDaGFpbkZhY2FkZVwiLFxuICB7XG4gICAgcHVibGljOiBNLmludGVyZmFjZShcIlJlbW90ZUNoYWluRmFjYWRlXCIsIHtcbiAgICAgIC4uLmNoYWluRmFjYWRlTWV0aG9kcyxcbiAgICAgIHF1ZXJ5OiBNLmNhbGwoTS5hcnJheU9mKElDUU1zZ1NoYXBlKSkucmV0dXJucyhWb3dTaGFwZSlcbiAgICB9KSxcbiAgICBtYWtlSUNRQ29ubmVjdGlvblF1ZXJ5V2F0Y2hlcjogTS5pbnRlcmZhY2UoXG4gICAgICBcIm1ha2VJQ1FDb25uZWN0aW9uUXVlcnlXYXRjaGVyXCIsXG4gICAgICB7XG4gICAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5yZW1vdGFibGUoKSwgTS5hcnJheU9mKElDUU1zZ1NoYXBlKSkucmV0dXJucyhcbiAgICAgICAgICBWb3dTaGFwZVxuICAgICAgICApXG4gICAgICB9XG4gICAgKSxcbiAgICBtYWtlQWNjb3VudEFuZFByb3ZpZGVRdWVyeUNvbm5XYXRjaGVyOiBNLmludGVyZmFjZShcbiAgICAgIFwibWFrZUFjY291bnRBbmRQcm92aWRlUXVlcnlDb25uV2F0Y2hlclwiLFxuICAgICAge1xuICAgICAgICBvbkZ1bGZpbGxlZDogTS5jYWxsKFtcbiAgICAgICAgICBNLnJlbW90YWJsZSgpLFxuICAgICAgICAgIE0ub3IoTS5yZW1vdGFibGUoKSwgTS51bmRlZmluZWQoKSlcbiAgICAgICAgXSkucmV0dXJucyhWb3dTaGFwZSlcbiAgICAgIH1cbiAgICApLFxuICAgIGdldEFkZHJlc3Nlc1dhdGNoZXI6IE0uaW50ZXJmYWNlKFwiZ2V0QWRkcmVzc1dhdGNoZXJcIiwge1xuICAgICAgb25GdWxmaWxsZWQ6IE0uY2FsbChcbiAgICAgICAgW0Nvc21vc0NoYWluQWRkcmVzc1NoYXBlLCBNLnN0cmluZygpLCBNLnN0cmluZygpXSxcbiAgICAgICAgTS5yZW1vdGFibGUoKVxuICAgICAgKS5yZXR1cm5zKFZvd1NoYXBlKVxuICAgIH0pLFxuICAgIG1ha2VDaGlsZE5vZGVXYXRjaGVyOiBNLmludGVyZmFjZShcIm1ha2VDaGlsZE5vZGVXYXRjaGVyXCIsIHtcbiAgICAgIG9uRnVsZmlsbGVkOiBNLmNhbGwoTS5vcihNLnJlbW90YWJsZSgpLCBNLnVuZGVmaW5lZCgpKSwge1xuICAgICAgICBhY2NvdW50OiBNLnJlbW90YWJsZSgpLFxuICAgICAgICBjaGFpbkFkZHJlc3M6IENvc21vc0NoYWluQWRkcmVzc1NoYXBlLFxuICAgICAgICBsb2NhbEFkZHJlc3M6IE0uc3RyaW5nKCksXG4gICAgICAgIHJlbW90ZUFkZHJlc3M6IE0uc3RyaW5nKClcbiAgICAgIH0pLnJldHVybnMoTS5yZW1vdGFibGUoKSlcbiAgICB9KVxuICB9LFxuICAvKlxuXG5cbiAgICovXG4gIChyZW1vdGVDaGFpbkluZm8sIGNvbm5lY3Rpb25JbmZvKSA9PiB7XG4gICAgdHJhY2U4KFwibWFraW5nIGEgUmVtb3RlQ2hhaW5GYWNhZGVcIik7XG4gICAgcmV0dXJuIChcbiAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgIHtcbiAgICAgICAgcmVtb3RlQ2hhaW5JbmZvLFxuICAgICAgICBjb25uZWN0aW9uSW5mbyxcbiAgICAgICAgaWNxQ29ubmVjdGlvbjogdm9pZCAwXG4gICAgICB9XG4gICAgKTtcbiAgfSxcbiAge1xuICAgIHB1YmxpYzoge1xuICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgIGdldENoYWluSW5mbygpIHtcbiAgICAgICAgcmV0dXJuIHdhdGNoKHRoaXMuc3RhdGUucmVtb3RlQ2hhaW5JbmZvKTtcbiAgICAgIH0sXG4gICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICBtYWtlQWNjb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIGFzVm93KCgpID0+IHtcbiAgICAgICAgICBjb25zdCB7IHJlbW90ZUNoYWluSW5mbywgY29ubmVjdGlvbkluZm8gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgaWYgKHJlbW90ZUNoYWluSW5mby5uYW1lc3BhY2UgIT09IFwiY29zbW9zXCIpIHtcbiAgICAgICAgICAgIHRocm93IHRocm93UmVkYWN0ZWRgb25seSBzdXBwb3J0ZWQgb24gJ2Nvc21vcycgY2hhaW5zLCBub3QgJHtyZW1vdGVDaGFpbkluZm8ubmFtZXNwYWNlfWA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghY29ubmVjdGlvbkluZm8pIHRocm93IHRocm93UmVkYWN0ZWRgSUJDIGNvbm5lY3Rpb24gaW5mbyBub3QgZm91bmRgO1xuICAgICAgICAgIGNvbnN0IGljcUNvbm5PclVuZGVmaW5lZFYgPSAoXG4gICAgICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlbW90ZUNoYWluSW5mbz8uaWNxRW5hYmxlZCAmJiAhdGhpcy5zdGF0ZS5pY3FDb25uZWN0aW9uID8gRShvcmNoZXN0cmF0aW9uKS5wcm92aWRlSUNRQ29ubmVjdGlvbihjb25uZWN0aW9uSW5mby5pZCkgOiB2b2lkIDBcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IG1ha2VBY2NvdW50ViA9IEUob3JjaGVzdHJhdGlvbikubWFrZUFjY291bnQoXG4gICAgICAgICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlbW90ZUNoYWluSW5mby5jaGFpbklkLFxuICAgICAgICAgICAgY29ubmVjdGlvbkluZm8uY291bnRlcnBhcnR5LmNvbm5lY3Rpb25faWQsXG4gICAgICAgICAgICBjb25uZWN0aW9uSW5mby5pZFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIHdhdGNoKFxuICAgICAgICAgICAgYWxsVm93cyhbbWFrZUFjY291bnRWLCBpY3FDb25uT3JVbmRlZmluZWRWXSksXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy5tYWtlQWNjb3VudEFuZFByb3ZpZGVRdWVyeUNvbm5XYXRjaGVyXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgLypcblxuXG5cbiAgICAgICAqL1xuICAgICAgcXVlcnkobXNncykge1xuICAgICAgICByZXR1cm4gYXNWb3coKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcmVtb3RlQ2hhaW5JbmZvOiB7IGljcUVuYWJsZWQsIGNoYWluSWQgfSxcbiAgICAgICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25uZWN0aW9uSW5mb1xuICAgICAgICAgIH0gPSAoXG4gICAgICAgICAgICAvKiAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuc3RhdGVcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmICghaWNxRW5hYmxlZCkge1xuICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBRdWVyaWVzIG5vdCBhdmFpbGFibGUgZm9yIGNoYWluICR7cXVvdGUoY2hhaW5JZCl9YDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFjb25uZWN0aW9uSW5mbykgdGhyb3cgdGhyb3dSZWRhY3RlZGBJQkMgY29ubmVjdGlvbiBpbmZvIG5vdCBmb3VuZGA7XG4gICAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmljcUNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB3YXRjaChcbiAgICAgICAgICAgICAgRShvcmNoZXN0cmF0aW9uKS5wcm92aWRlSUNRQ29ubmVjdGlvbihjb25uZWN0aW9uSW5mby5pZCksXG4gICAgICAgICAgICAgIHRoaXMuZmFjZXRzLm1ha2VJQ1FDb25uZWN0aW9uUXVlcnlXYXRjaGVyLFxuICAgICAgICAgICAgICBtc2dzXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gd2F0Y2goRSh0aGlzLnN0YXRlLmljcUNvbm5lY3Rpb24pLnF1ZXJ5KG1zZ3MpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBtYWtlQWNjb3VudEFuZFByb3ZpZGVRdWVyeUNvbm5XYXRjaGVyOiB7XG4gICAgICAvKlxuXG4gICAgICAgKi9cbiAgICAgIG9uRnVsZmlsbGVkKFthY2NvdW50LCBpY3FDb25uZWN0aW9uXSkge1xuICAgICAgICBpZiAoaWNxQ29ubmVjdGlvbiAmJiAhdGhpcy5zdGF0ZS5pY3FDb25uZWN0aW9uKSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5pY3FDb25uZWN0aW9uID0gaWNxQ29ubmVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2F0Y2goXG4gICAgICAgICAgYWxsVm93cyhbXG4gICAgICAgICAgICBFKGFjY291bnQpLmdldEFkZHJlc3MoKSxcbiAgICAgICAgICAgIEUoYWNjb3VudCkuZ2V0TG9jYWxBZGRyZXNzKCksXG4gICAgICAgICAgICBFKGFjY291bnQpLmdldFJlbW90ZUFkZHJlc3MoKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIHRoaXMuZmFjZXRzLmdldEFkZHJlc3Nlc1dhdGNoZXIsXG4gICAgICAgICAgYWNjb3VudFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gICAgbWFrZUlDUUNvbm5lY3Rpb25RdWVyeVdhdGNoZXI6IHtcbiAgICAgIC8qXG5cblxuXG4gICAgICAgKi9cbiAgICAgIG9uRnVsZmlsbGVkKGljcUNvbm5lY3Rpb24sIG1zZ3MpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmljcUNvbm5lY3Rpb24pIHtcbiAgICAgICAgICB0aGlzLnN0YXRlLmljcUNvbm5lY3Rpb24gPSBpY3FDb25uZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3YXRjaChFKGljcUNvbm5lY3Rpb24pLnF1ZXJ5KG1zZ3MpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldEFkZHJlc3Nlc1dhdGNoZXI6IHtcbiAgICAgIC8qXG5cblxuICAgICAgICovXG4gICAgICBvbkZ1bGZpbGxlZChbY2hhaW5BZGRyZXNzLCBsb2NhbEFkZHJlc3MsIHJlbW90ZUFkZHJlc3NdLCBhY2NvdW50KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbmFsU3RvcmFnZU5vZGUgPSBzdG9yYWdlTm9kZSA/IEUoc3RvcmFnZU5vZGUpLm1ha2VDaGlsZE5vZGUoY2hhaW5BZGRyZXNzLnZhbHVlKSA6IHZvaWQgMDtcbiAgICAgICAgcmV0dXJuIHdhdGNoKG9wdGlvbmFsU3RvcmFnZU5vZGUsIHRoaXMuZmFjZXRzLm1ha2VDaGlsZE5vZGVXYXRjaGVyLCB7XG4gICAgICAgICAgYWNjb3VudCxcbiAgICAgICAgICBjaGFpbkFkZHJlc3MsXG4gICAgICAgICAgbG9jYWxBZGRyZXNzLFxuICAgICAgICAgIHJlbW90ZUFkZHJlc3NcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBtYWtlQ2hpbGROb2RlV2F0Y2hlcjoge1xuICAgICAgLypcblxuXG5cblxuXG5cblxuICAgICAgICovXG4gICAgICBvbkZ1bGZpbGxlZChjaGlsZE5vZGUsIHsgYWNjb3VudCwgY2hhaW5BZGRyZXNzLCBsb2NhbEFkZHJlc3MsIHJlbW90ZUFkZHJlc3MgfSkge1xuICAgICAgICBjb25zdCB7IGljcUNvbm5lY3Rpb24gfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHJldHVybiBtYWtlQ29zbW9zT3JjaGVzdHJhdGlvbkFjY291bnQoXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2hhaW5BZGRyZXNzLFxuICAgICAgICAgICAgbG9jYWxBZGRyZXNzLFxuICAgICAgICAgICAgcmVtb3RlQWRkcmVzc1xuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgYWNjb3VudCxcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICBzdG9yYWdlTm9kZTogY2hpbGROb2RlLFxuICAgICAgICAgICAgaWNxQ29ubmVjdGlvbixcbiAgICAgICAgICAgIHRpbWVyXG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuKTtcbmhhcmRlbihwcmVwYXJlUmVtb3RlQ2hhaW5GYWNhZGVLaXQpO1xudmFyIHByZXBhcmVSZW1vdGVDaGFpbkZhY2FkZSA9ICh6b25lLCBwb3dlcnMpID0+IHtcbiAgY29uc3QgbWFrZUxvY2FsQ2hhaW5GYWNhZGVLaXQgPSBwcmVwYXJlUmVtb3RlQ2hhaW5GYWNhZGVLaXQoem9uZSwgcG93ZXJzKTtcbiAgcmV0dXJuIHBpY2tGYWNldChtYWtlTG9jYWxDaGFpbkZhY2FkZUtpdCwgXCJwdWJsaWNcIik7XG59O1xuaGFyZGVuKHByZXBhcmVSZW1vdGVDaGFpbkZhY2FkZSk7XG5cbi8vXG52YXIgbWFrZU9yY2hlc3RyYXRpb25GYWNhZGUgPSAoe1xuICB6b25lLFxuICB0aW1lclNlcnZpY2UsXG4gIHpjZixcbiAgb3JjaGVzdHJhdGlvblNlcnZpY2UsXG4gIG1ha2VPcmNoZXN0cmF0b3IsXG4gIHZvd1Rvb2xzLFxuICBhc3luY0Zsb3dUb29sc1xufSkgPT4ge1xuICBhc3NlcnRBbGxEZWZpbmVkKHtcbiAgICB6b25lLFxuICAgIHRpbWVyU2VydmljZSxcbiAgICB6Y2YsXG4gICAgb3JjaGVzdHJhdGlvblNlcnZpY2UsXG4gICAgbWFrZU9yY2hlc3RyYXRvcixcbiAgICB2b3dUb29scyxcbiAgICBhc3luY0Zsb3dUb29sc1xuICB9KTtcbiAgY29uc3QgeyBwcmVwYXJlRW5kb3dtZW50LCBhc3luY0Zsb3cgfSA9IGFzeW5jRmxvd1Rvb2xzO1xuICBjb25zdCBvcmNoZXN0cmF0ZSA9IChkdXJhYmxlTmFtZSwgaG9zdEN0eCwgZ3Vlc3RGbikgPT4ge1xuICAgIGNvbnN0IHN1YlpvbmUgPSB6b25lLnN1YlpvbmUoZHVyYWJsZU5hbWUpO1xuICAgIGNvbnN0IFt3cmFwcGVkQ3R4XSA9IHByZXBhcmVFbmRvd21lbnQoc3ViWm9uZSwgXCJlbmRvd21lbnRzXCIsIFtob3N0Q3R4XSk7XG4gICAgY29uc3QgaG9zdEZuID0gYXN5bmNGbG93KHN1YlpvbmUsIFwiYXN5bmNGbG93XCIsIGd1ZXN0Rm4pO1xuICAgIGRlZXBNYXBPYmplY3QoXG4gICAgICB3cmFwcGVkQ3R4LFxuICAgICAgKHZhbCkgPT4gdmFsID09PSB6Y2YgJiYgYXNzZXJ0LmZhaWwoXCJkbyBub3QgdXNlIHpjZiBpbiBvcmNoZXN0cmF0aW9uIGNvbnRleHQ7IHRyeSB6Y2ZUb29sc1wiKVxuICAgICk7XG4gICAgY29uc3Qgb3JjRm4gPSAoXG4gICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAoLi4uYXJncykgPT4ge1xuICAgICAgICBjb25zdCBob3N0T3JjID0gbWFrZU9yY2hlc3RyYXRvcigpO1xuICAgICAgICByZXR1cm4gaG9zdEZuKGhvc3RPcmMsIHdyYXBwZWRDdHgsIC4uLmFyZ3MpO1xuICAgICAgfVxuICAgICk7XG4gICAgcmV0dXJuIGhhcmRlbihvcmNGbik7XG4gIH07XG4gIGNvbnN0IG9yY2hlc3RyYXRlQWxsID0gKGd1ZXN0Rm5zLCBob3N0Q3R4KSA9PiB7XG4gICAgY29uc3QgbWFwcGVkRmxvd3MgPSBuZXcgTWFwKFxuICAgICAgT2JqZWN0LmVudHJpZXMoZ3Vlc3RGbnMpLm1hcCgoW25hbWUsIGd1ZXN0Rm5dKSA9PiBbXG4gICAgICAgIGd1ZXN0Rm4sXG4gICAgICAgICguLi5hcmdzKSA9PiBvcmNGbnNbbmFtZV0oLi4uYXJncylcbiAgICAgIF0pXG4gICAgKTtcbiAgICBjb25zdCBtYXBwZWRDb250ZXh0ID0gZGVlcE1hcE9iamVjdChcbiAgICAgIGhvc3RDdHgsXG4gICAgICAodmFsKSA9PiBtYXBwZWRGbG93cy5nZXQoXG4gICAgICAgIC8qICAgICAgICAgICAgICAqL1xuICAgICAgICB2YWxcbiAgICAgICkgfHwgdmFsXG4gICAgKTtcbiAgICBjb25zdCBvcmNGbnMgPSAoXG4gICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgIE9iamVjdC5mcm9tRW50cmllcyhcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoZ3Vlc3RGbnMpLm1hcCgoW25hbWUsIGd1ZXN0Rm5dKSA9PiBbXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICBvcmNoZXN0cmF0ZShuYW1lLCBtYXBwZWRDb250ZXh0LCBndWVzdEZuKVxuICAgICAgICBdKVxuICAgICAgKVxuICAgICk7XG4gICAgcmV0dXJuIHsgLi4ub3JjRm5zIH07XG4gIH07XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIG9yY2hlc3RyYXRlLFxuICAgIG9yY2hlc3RyYXRlQWxsXG4gIH0pO1xufTtcbmhhcmRlbihtYWtlT3JjaGVzdHJhdGlvbkZhY2FkZSk7XG5cbi8vXG52YXIgbmF0U2FmZU1hdGggPSBoYXJkZW4oe1xuICAvKiAgICAgICAgICAgICAgICAqL1xuICAvL1xuICBhZGQ6ICh4LCB5KSA9PiBOYXQoeCkgKyBOYXQoeSksXG4gIC8qICAgICAgICAgICAgICAgICovXG4gIHN1YnRyYWN0OiAoeCwgeSkgPT4gTmF0KE5hdCh4KSAtIE5hdCh5KSksXG4gIC8qICAgICAgICAgICAgICAgICovXG4gIG11bHRpcGx5OiAoeCwgeSkgPT4gTmF0KHgpICogTmF0KHkpLFxuICAvKiAgICAgICAgICAgICAgICAqL1xuICBmbG9vckRpdmlkZTogKHgsIHkpID0+IE5hdCh4KSAvIE5hdCh5KSxcbiAgLyogICAgICAgICAgICAgICAgKi9cbiAgY2VpbERpdmlkZTogKHgsIHkpID0+IHtcbiAgICB5ID0gTmF0KHkpO1xuICAgIHJldHVybiBOYXQoTmF0KHgpICsgeSAtIDFuKSAvIHk7XG4gIH0sXG4gIC8qXG5cblxuXG5cbiAgICovXG4gIGJhbmtlcnNEaXZpZGU6IChhMiwgYjMpID0+IHtcbiAgICBhMiA9IE5hdChhMik7XG4gICAgYjMgPSBOYXQoYjMpO1xuICAgIGNvbnN0IGRpdiA9IGEyIC8gYjM7XG4gICAgY29uc3QgcmVtID0gYTIgJSBiMztcbiAgICBpZiAocmVtICogMm4gPiBiMykge1xuICAgICAgcmV0dXJuIGRpdiArIDFuO1xuICAgIH0gZWxzZSBpZiAocmVtICogMm4gPT09IGIzKSB7XG4gICAgICBpZiAoZGl2ICUgMm4gPT09IDFuKSByZXR1cm4gZGl2ICsgMW47XG4gICAgfVxuICAgIHJldHVybiBkaXY7XG4gIH0sXG4gIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICBpc0dURTogKHgsIHkpID0+IE5hdCh4KSA+PSBOYXQoeSlcbn0pO1xuXG4vL1xudmFyIHsgc3VidHJhY3QsIGFkZCwgbXVsdGlwbHksIGZsb29yRGl2aWRlIH0gPSBuYXRTYWZlTWF0aDtcblxuLy9cbnZhciBtYWtlU3RhdGVNYWNoaW5lID0gKGluaXRpYWxTdGF0ZSwgYWxsb3dlZFRyYW5zaXRpb25zQXJyYXkpID0+IHtcbiAgbGV0IHN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICBjb25zdCBhbGxvd2VkVHJhbnNpdGlvbnMgPSBuZXcgTWFwKGFsbG93ZWRUcmFuc2l0aW9uc0FycmF5KTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgY2FuVHJhbnNpdGlvblRvOiAobmV4dFN0YXRlKSA9PiBhbGxvd2VkVHJhbnNpdGlvbnMuZ2V0KHN0YXRlKS5pbmNsdWRlcyhuZXh0U3RhdGUpLFxuICAgIHRyYW5zaXRpb25UbzogKG5leHRTdGF0ZSkgPT4ge1xuICAgICAgYXNzZXJ0MihhbGxvd2VkVHJhbnNpdGlvbnMuZ2V0KHN0YXRlKS5pbmNsdWRlcyhuZXh0U3RhdGUpKTtcbiAgICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIH0sXG4gICAgZ2V0U3RhdHVzOiAoXykgPT4gc3RhdGVcbiAgfSk7XG59O1xuaGFyZGVuKG1ha2VTdGF0ZU1hY2hpbmUpO1xuXG4vL1xudmFyIEtleXdvcmRTaGFwZSA9IE0uc3RyaW5nKCk7XG52YXIgSW52aXRhdGlvbkhhbmRsZVNoYXBlID0gTS5yZW1vdGFibGUoXCJJbnZpdGF0aW9uSGFuZGxlXCIpO1xudmFyIEludml0YXRpb25TaGFwZSA9IE0ucmVtb3RhYmxlKFwiSW52aXRhdGlvblwiKTtcbnZhciBJbnN0YW5jZUhhbmRsZVNoYXBlID0gTS5yZW1vdGFibGUoXCJJbnN0YW5jZUhhbmRsZVwiKTtcbnZhciBJbnN0YWxsYXRpb25TaGFwZSA9IE0ucmVtb3RhYmxlKFwiSW5zdGFsbGF0aW9uXCIpO1xudmFyIFNlYXRTaGFwZSA9IE0ucmVtb3RhYmxlKFwiU2VhdFwiKTtcbnZhciBBbW91bnRLZXl3b3JkUmVjb3JkU2hhcGUgPSBNLnJlY29yZE9mKEtleXdvcmRTaGFwZSwgQW1vdW50U2hhcGUpO1xudmFyIEFtb3VudFBhdHRlcm5LZXl3b3JkUmVjb3JkU2hhcGUgPSBNLnJlY29yZE9mKFxuICBLZXl3b3JkU2hhcGUsXG4gIE0ucGF0dGVybigpXG4pO1xudmFyIFBheW1lbnRQS2V5d29yZFJlY29yZFNoYXBlID0gTS5yZWNvcmRPZihcbiAgS2V5d29yZFNoYXBlLFxuICBNLmVyZWYoUGF5bWVudFNoYXBlKVxuKTtcbnZhciBJc3N1ZXJLZXl3b3JkUmVjb3JkU2hhcGUgPSBNLnJlY29yZE9mKEtleXdvcmRTaGFwZSwgSXNzdWVyU2hhcGUpO1xudmFyIElzc3VlclBLZXl3b3JkUmVjb3JkU2hhcGUgPSBNLnJlY29yZE9mKFxuICBLZXl3b3JkU2hhcGUsXG4gIE0uZXJlZihJc3N1ZXJTaGFwZSlcbik7XG52YXIgQnJhbmRLZXl3b3JkUmVjb3JkU2hhcGUgPSBNLnJlY29yZE9mKEtleXdvcmRTaGFwZSwgQnJhbmRTaGFwZSk7XG52YXIgSXNzdWVyUmVjb3JkU2hhcGUgPSBNLnNwbGl0UmVjb3JkKFxuICB7XG4gICAgYnJhbmQ6IEJyYW5kU2hhcGUsXG4gICAgaXNzdWVyOiBJc3N1ZXJTaGFwZSxcbiAgICBhc3NldEtpbmQ6IEFzc2V0S2luZFNoYXBlXG4gIH0sXG4gIHsgZGlzcGxheUluZm86IERpc3BsYXlJbmZvU2hhcGUgfVxuKTtcbnZhciBUZXJtc1NoYXBlID0ge1xuICBpc3N1ZXJzOiBJc3N1ZXJLZXl3b3JkUmVjb3JkU2hhcGUsXG4gIGJyYW5kczogQnJhbmRLZXl3b3JkUmVjb3JkU2hhcGVcbn07XG5oYXJkZW4oVGVybXNTaGFwZSk7XG52YXIgSW5zdGFuY2VSZWNvcmRTaGFwZSA9IHtcbiAgaW5zdGFsbGF0aW9uOiBJbnN0YWxsYXRpb25TaGFwZSxcbiAgaW5zdGFuY2U6IEluc3RhbmNlSGFuZGxlU2hhcGUsXG4gIHRlcm1zOiBNLnNwbGl0UmVjb3JkKFRlcm1zU2hhcGUpXG59O1xuaGFyZGVuKEluc3RhbmNlUmVjb3JkU2hhcGUpO1xudmFyIEhhbmRsZUkgPSBNLmludGVyZmFjZShcIkhhbmRsZVwiLCB7fSk7XG52YXIgbWFrZUhhbmRsZVNoYXBlID0gKG5hbWUpID0+IE0ucmVtb3RhYmxlKGAke25hbWV9SGFuZGxlYCk7XG52YXIgVGltZXJTaGFwZSA9IG1ha2VIYW5kbGVTaGFwZShcInRpbWVyXCIpO1xudmFyIEZ1bGxQcm9wb3NhbFNoYXBlID0ge1xuICB3YW50OiBBbW91bnRQYXR0ZXJuS2V5d29yZFJlY29yZFNoYXBlLFxuICBnaXZlOiBBbW91bnRLZXl3b3JkUmVjb3JkU2hhcGUsXG4gIC8vXG4gIC8vXG4gIC8vXG4gIGV4aXQ6IE0uc3BsaXRSZWNvcmQoXG4gICAge30sXG4gICAge1xuICAgICAgb25EZW1hbmQ6IG51bGwsXG4gICAgICB3YWl2ZWQ6IG51bGwsXG4gICAgICBhZnRlckRlYWRsaW5lOiB7XG4gICAgICAgIHRpbWVyOiBNLmVyZWYoVGltZXJTaGFwZSksXG4gICAgICAgIGRlYWRsaW5lOiBUaW1lc3RhbXBTaGFwZVxuICAgICAgfVxuICAgIH0sXG4gICAge31cbiAgKVxufTtcbmhhcmRlbihGdWxsUHJvcG9zYWxTaGFwZSk7XG52YXIgUHJvcG9zYWxTaGFwZSA9IE0uc3BsaXRSZWNvcmQoe30sIEZ1bGxQcm9wb3NhbFNoYXBlLCB7fSk7XG52YXIgRW1wdHlQcm9wb3NhbFNoYXBlID0gTS5zcGxpdFJlY29yZCh7XG4gIGdpdmU6IHt9LFxuICB3YW50OiB7fSxcbiAgZXhpdDogeyBvbkRlbWFuZDogbnVsbCB9XG59KTtcbnZhciBpc09uRGVtYW5kRXhpdFJ1bGUgPSAoZXhpdCkgPT4ge1xuICBjb25zdCBbZXhpdEtleV0gPSBPYmplY3Qua2V5cyhleGl0KTtcbiAgcmV0dXJuIGV4aXRLZXkgPT09IFwib25EZW1hbmRcIjtcbn07XG5oYXJkZW4oaXNPbkRlbWFuZEV4aXRSdWxlKTtcbnZhciBpc1dhaXZlZEV4aXRSdWxlID0gKGV4aXQpID0+IHtcbiAgY29uc3QgW2V4aXRLZXldID0gT2JqZWN0LmtleXMoZXhpdCk7XG4gIHJldHVybiBleGl0S2V5ID09PSBcIndhaXZlZFwiO1xufTtcbmhhcmRlbihpc1dhaXZlZEV4aXRSdWxlKTtcbnZhciBpc0FmdGVyRGVhZGxpbmVFeGl0UnVsZSA9IChleGl0KSA9PiB7XG4gIGNvbnN0IFtleGl0S2V5XSA9IE9iamVjdC5rZXlzKGV4aXQpO1xuICByZXR1cm4gZXhpdEtleSA9PT0gXCJhZnRlckRlYWRsaW5lXCI7XG59O1xuaGFyZGVuKGlzQWZ0ZXJEZWFkbGluZUV4aXRSdWxlKTtcbnZhciBJbnZpdGF0aW9uRWxlbWVudFNoYXBlID0gTS5zcGxpdFJlY29yZCh7XG4gIGRlc2NyaXB0aW9uOiBNLnN0cmluZygpLFxuICBoYW5kbGU6IEludml0YXRpb25IYW5kbGVTaGFwZSxcbiAgaW5zdGFuY2U6IEluc3RhbmNlSGFuZGxlU2hhcGUsXG4gIGluc3RhbGxhdGlvbjogSW5zdGFsbGF0aW9uU2hhcGVcbn0pO1xudmFyIE9mZmVySGFuZGxlckkgPSBNLmludGVyZmFjZShcIk9mZmVySGFuZGxlclwiLCB7XG4gIGhhbmRsZTogTS5jYWxsKFNlYXRTaGFwZSkub3B0aW9uYWwoTS5hbnkoKSkucmV0dXJucyhNLmFueSgpKVxufSk7XG52YXIgU2VhdEhhbmRsZUFsbG9jYXRpb25zU2hhcGUgPSBNLmFycmF5T2Yoe1xuICBzZWF0SGFuZGxlOiBTZWF0U2hhcGUsXG4gIGFsbG9jYXRpb246IEFtb3VudEtleXdvcmRSZWNvcmRTaGFwZVxufSk7XG52YXIgWm9lTWludFNoYXBlID0gTS5yZW1vdGFibGUoXCJab2VNaW50XCIpO1xudmFyIFpvZU1pbnRJID0gTS5pbnRlcmZhY2UoXCJab2VNaW50XCIsIHtcbiAgZ2V0SXNzdWVyUmVjb3JkOiBNLmNhbGwoKS5yZXR1cm5zKElzc3VlclJlY29yZFNoYXBlKSxcbiAgbWludEFuZEVzY3JvdzogTS5jYWxsKEFtb3VudFNoYXBlKS5yZXR1cm5zKCksXG4gIHdpdGhkcmF3QW5kQnVybjogTS5jYWxsKEFtb3VudFNoYXBlKS5yZXR1cm5zKClcbn0pO1xudmFyIEZlZU1pbnRBY2Nlc3NTaGFwZSA9IE0ucmVtb3RhYmxlKFwiRmVlTWludEFjY2Vzc1wiKTtcbnZhciBFeGl0T2JqZWN0SSA9IE0uaW50ZXJmYWNlKFwiRXhpdCBPYmplY3RcIiwge1xuICBleGl0OiBNLmNhbGwoKS5yZXR1cm5zKClcbn0pO1xudmFyIEV4aXRPYmplY3RTaGFwZSA9IE0ucmVtb3RhYmxlKFwiRXhpdE9ialwiKTtcbnZhciBJbnN0YW5jZUFkbWluU2hhcGUgPSBNLnJlbW90YWJsZShcIkluc3RhbmNlQWRtaW5cIik7XG52YXIgSW5zdGFuY2VBZG1pbkkgPSBNLmludGVyZmFjZShcIkluc3RhbmNlQWRtaW5cIiwge1xuICBtYWtlSW52aXRhdGlvbjogTS5jYWxsKEludml0YXRpb25IYW5kbGVTaGFwZSwgTS5zdHJpbmcoKSkub3B0aW9uYWwoTS5yZWNvcmQoKSwgTS5wYXR0ZXJuKCkpLnJldHVybnMoSW52aXRhdGlvblNoYXBlKSxcbiAgc2F2ZUlzc3VlcjogTS5jYWxsV2hlbihNLmF3YWl0KElzc3VlclNoYXBlKSwgS2V5d29yZFNoYXBlKS5yZXR1cm5zKFxuICAgIElzc3VlclJlY29yZFNoYXBlXG4gICksXG4gIG1ha2VOb0VzY3Jvd1NlYXQ6IE0uY2FsbChcbiAgICBBbW91bnRLZXl3b3JkUmVjb3JkU2hhcGUsXG4gICAgUHJvcG9zYWxTaGFwZSxcbiAgICBFeGl0T2JqZWN0U2hhcGUsXG4gICAgU2VhdFNoYXBlXG4gICkucmV0dXJucyhTZWF0U2hhcGUpLFxuICBleGl0QWxsU2VhdHM6IE0uY2FsbChNLmFueSgpKS5yZXR1cm5zKCksXG4gIGZhaWxBbGxTZWF0czogTS5jYWxsKE0uYW55KCkpLnJldHVybnMoKSxcbiAgZXhpdFNlYXQ6IE0uY2FsbChTZWF0U2hhcGUsIE0uYW55KCkpLnJldHVybnMoKSxcbiAgZmFpbFNlYXQ6IE0uY2FsbChTZWF0U2hhcGUsIE0uYW55KCkpLnJldHVybnMoKSxcbiAgbWFrZVpvZU1pbnQ6IE0uY2FsbChLZXl3b3JkU2hhcGUpLm9wdGlvbmFsKFxuICAgIEFzc2V0S2luZFNoYXBlLFxuICAgIERpc3BsYXlJbmZvU2hhcGUsXG4gICAgTS5zcGxpdFJlY29yZCh7fSwgeyBlbGVtZW50U2hhcGU6IE0ucGF0dGVybigpIH0pXG4gICkucmV0dXJucyhNLnJlbW90YWJsZShcInpvZU1pbnRcIikpLFxuICByZWdpc3RlckZlZU1pbnQ6IE0uY2FsbChLZXl3b3JkU2hhcGUsIEZlZU1pbnRBY2Nlc3NTaGFwZSkucmV0dXJucyhcbiAgICBNLnJlbW90YWJsZShcImZlZU1pbnRcIilcbiAgKSxcbiAgcmVwbGFjZUFsbG9jYXRpb25zOiBNLmNhbGwoU2VhdEhhbmRsZUFsbG9jYXRpb25zU2hhcGUpLnJldHVybnMoKSxcbiAgc3RvcEFjY2VwdGluZ09mZmVyczogTS5jYWxsKCkucmV0dXJucygpLFxuICBzZXRPZmZlckZpbHRlcjogTS5jYWxsKE0uYXJyYXlPZihNLnN0cmluZygpKSkucmV0dXJucygpLFxuICBnZXRPZmZlckZpbHRlcjogTS5jYWxsKCkucmV0dXJucyhNLmFycmF5T2YoTS5zdHJpbmcoKSkpLFxuICBnZXRFeGl0U3Vic2NyaWJlcjogTS5jYWxsKFNlYXRTaGFwZSkucmV0dXJucyhTdWJzY3JpYmVyU2hhcGUpLFxuICBpc0Jsb2NrZWQ6IE0uY2FsbChNLnN0cmluZygpKS5yZXR1cm5zKE0uYm9vbGVhbigpKSxcbiAgcmVwYWlyQ29udHJhY3RDb21wbGV0aW9uV2F0Y2hlcjogTS5jYWxsKCkucmV0dXJucygpXG59KTtcbnZhciBJbnN0YW5jZVN0b3JhZ2VNYW5hZ2VySUtpdCA9IHtcbiAgaW5zdGFuY2VTdG9yYWdlTWFuYWdlcjogTS5pbnRlcmZhY2UoXCJJbnN0YW5jZVN0b3JhZ2VNYW5hZ2VyXCIsIHtcbiAgICBnZXRUZXJtczogTS5jYWxsKCkucmV0dXJucyhNLnNwbGl0UmVjb3JkKFRlcm1zU2hhcGUpKSxcbiAgICBnZXRJc3N1ZXJzOiBNLmNhbGwoKS5yZXR1cm5zKElzc3VlcktleXdvcmRSZWNvcmRTaGFwZSksXG4gICAgZ2V0QnJhbmRzOiBNLmNhbGwoKS5yZXR1cm5zKEJyYW5kS2V5d29yZFJlY29yZFNoYXBlKSxcbiAgICBnZXRJbnN0YWxsYXRpb246IE0uY2FsbCgpLnJldHVybnMoSW5zdGFsbGF0aW9uU2hhcGUpLFxuICAgIGdldEludml0YXRpb25Jc3N1ZXI6IE0uY2FsbCgpLnJldHVybnMoSXNzdWVyU2hhcGUpLFxuICAgIHNhdmVJc3N1ZXI6IE0uY2FsbChJc3N1ZXJTaGFwZSwgS2V5d29yZFNoYXBlKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgICBtYWtlWm9lTWludDogTS5jYWxsKEtleXdvcmRTaGFwZSkub3B0aW9uYWwoXG4gICAgICBBc3NldEtpbmRTaGFwZSxcbiAgICAgIERpc3BsYXlJbmZvU2hhcGUsXG4gICAgICBNLnNwbGl0UmVjb3JkKHt9LCB7IGVsZW1lbnRTaGFwZTogTS5wYXR0ZXJuKCkgfSlcbiAgICApLnJldHVybnMoTS5lcmVmKFpvZU1pbnRTaGFwZSkpLFxuICAgIHJlZ2lzdGVyRmVlTWludDogTS5jYWxsKEtleXdvcmRTaGFwZSwgRmVlTWludEFjY2Vzc1NoYXBlKS5yZXR1cm5zKFxuICAgICAgTS5yZW1vdGFibGUoXCJmZWVNaW50XCIpXG4gICAgKSxcbiAgICBnZXRJbnN0YW5jZVJlY29yZDogTS5jYWxsKCkucmV0dXJucyhJbnN0YW5jZVJlY29yZFNoYXBlKSxcbiAgICBnZXRJc3N1ZXJSZWNvcmRzOiBNLmNhbGwoKS5yZXR1cm5zKE0uYXJyYXlPZihJc3N1ZXJSZWNvcmRTaGFwZSkpLFxuICAgIGdldFdpdGhkcmF3RmFjZXQ6IE0uY2FsbCgpLnJldHVybnMoTS5yZW1vdGFibGUoXCJXaXRoZHJhd0ZhY2V0XCIpKSxcbiAgICBpbml0SW5zdGFuY2VBZG1pbjogTS5jYWxsKFxuICAgICAgSW5zdGFuY2VIYW5kbGVTaGFwZSxcbiAgICAgIE0ucmVtb3RhYmxlKFwiaW5zdGFuY2VBZG1pblwiKVxuICAgICkucmV0dXJucyhNLnByb21pc2UoKSksXG4gICAgZGVsZXRlSW5zdGFuY2VBZG1pbjogTS5jYWxsKEluc3RhbmNlQWRtaW5TaGFwZSkucmV0dXJucygpLFxuICAgIG1ha2VJbnZpdGF0aW9uOiBNLmNhbGwoSW52aXRhdGlvbkhhbmRsZVNoYXBlLCBNLnN0cmluZygpKS5vcHRpb25hbChNLnJlY29yZCgpLCBNLnBhdHRlcm4oKSkucmV0dXJucyhQYXltZW50U2hhcGUpLFxuICAgIGdldFJvb3Q6IE0uY2FsbCgpLnJldHVybnMoTS5hbnkoKSksXG4gICAgZ2V0QWRtaW5Ob2RlOiBNLmNhbGwoKS5yZXR1cm5zKE0ucmVtb3RhYmxlKFwiYWRtaW5Ob2RlXCIpKVxuICB9KSxcbiAgd2l0aGRyYXdGYWNldDogTS5pbnRlcmZhY2UoXCJXaXRoZHJhd0ZhY2V0XCIsIHtcbiAgICB3aXRoZHJhd1BheW1lbnRzOiBNLmNhbGwoQW1vdW50S2V5d29yZFJlY29yZFNoYXBlKS5yZXR1cm5zKFxuICAgICAgUGF5bWVudFBLZXl3b3JkUmVjb3JkU2hhcGVcbiAgICApXG4gIH0pLFxuICBoZWxwZXJzOiBNLmludGVyZmFjZShcIkluc3RhbmNlU3RvcmFnZU1hbmFnZXIgaGVscGVyXCIsIHtcbiAgICB3cmFwSXNzdWVyS2l0V2l0aFpvZU1pbnQ6IE0uY2FsbChcbiAgICAgIEtleXdvcmRTaGFwZSxcbiAgICAgIElzc3VlcktpdFNoYXBlLFxuICAgICAgTS5yZW1vdGFibGUoXCJhZG1pbk5vZGVcIilcbiAgICApLnJldHVybnMoWm9lTWludFNoYXBlKVxuICB9KVxufTtcbmhhcmRlbihJbnN0YW5jZVN0b3JhZ2VNYW5hZ2VySUtpdCk7XG52YXIgQnVuZGxlQ2FwU2hhcGUgPSBNLnJlbW90YWJsZShcImJ1bmRsZUNhcFwiKTtcbnZhciBCdW5kbGVTaGFwZSA9IE0uYW5kKFxuICBNLnNwbGl0UmVjb3JkKHsgbW9kdWxlRm9ybWF0OiBNLmFueSgpIH0pLFxuICBNLnJlY29yZE9mKE0uc3RyaW5nKCksIE0uc3RyaW5nKHsgc3RyaW5nTGVuZ3RoTGltaXQ6IEluZmluaXR5IH0pKVxuKTtcbnZhciBVbndyYXBwZWRJbnN0YWxsYXRpb25TaGFwZSA9IE0uc3BsaXRSZWNvcmQoXG4gIHsgaW5zdGFsbGF0aW9uOiBJbnN0YWxsYXRpb25TaGFwZSB9LFxuICB7XG4gICAgYnVuZGxlOiBNLnJlY29yZE9mKE0uc3RyaW5nKCksIE0uc3RyaW5nKHsgc3RyaW5nTGVuZ3RoTGltaXQ6IEluZmluaXR5IH0pKSxcbiAgICBidW5kbGVDYXA6IEJ1bmRsZUNhcFNoYXBlLFxuICAgIGJ1bmRsZUlEOiBNLnN0cmluZygpXG4gIH0sXG4gIHt9XG4pO1xudmFyIFpvZVN0b3JhZ2VNYW5hZ2VySUtpdCA9IHtcbiAgem9lU2VydmljZURhdGFBY2Nlc3M6IE0uaW50ZXJmYWNlKFwiWm9lU2VydmljZSBkYXRhQWNjZXNzXCIsIHtcbiAgICBnZXRUZXJtczogTS5jYWxsKEluc3RhbmNlSGFuZGxlU2hhcGUpLnJldHVybnMoTS5zcGxpdFJlY29yZChUZXJtc1NoYXBlKSksXG4gICAgZ2V0SXNzdWVyczogTS5jYWxsKEluc3RhbmNlSGFuZGxlU2hhcGUpLnJldHVybnMoSXNzdWVyS2V5d29yZFJlY29yZFNoYXBlKSxcbiAgICBnZXRCcmFuZHM6IE0uY2FsbChJbnN0YW5jZUhhbmRsZVNoYXBlKS5yZXR1cm5zKEJyYW5kS2V5d29yZFJlY29yZFNoYXBlKSxcbiAgICBnZXRJbnN0YWxsYXRpb246IE0uY2FsbChJbnN0YW5jZUhhbmRsZVNoYXBlKS5yZXR1cm5zKFxuICAgICAgTS5lcmVmKE0ucmVtb3RhYmxlKFwiSW5zdGFsbGF0aW9uXCIpKVxuICAgICksXG4gICAgZ2V0SW52aXRhdGlvbklzc3VlcjogTS5jYWxsKCkucmV0dXJucyhJc3N1ZXJTaGFwZSksXG4gICAgZ2V0QnVuZGxlSURGcm9tSW5zdGFsbGF0aW9uOiBNLmNhbGwoSW5zdGFsbGF0aW9uU2hhcGUpLnJldHVybnMoXG4gICAgICBNLmVyZWYoTS5zdHJpbmcoKSlcbiAgICApLFxuICAgIGluc3RhbGxCdW5kbGU6IE0uY2FsbChCdW5kbGVTaGFwZSkub3B0aW9uYWwoTS5zdHJpbmcoKSkucmV0dXJucyhNLnByb21pc2UoKSksXG4gICAgaW5zdGFsbEJ1bmRsZUlEOiBNLmNhbGwoTS5zdHJpbmcoKSkub3B0aW9uYWwoTS5zdHJpbmcoKSkucmV0dXJucyhNLnByb21pc2UoKSksXG4gICAgZ2V0UHVibGljRmFjZXQ6IE0uY2FsbChJbnN0YW5jZUhhbmRsZVNoYXBlKS5yZXR1cm5zKFxuICAgICAgTS5lcmVmKE0ucmVtb3RhYmxlKFwiUHVibGljRmFjZXRcIikpXG4gICAgKSxcbiAgICBnZXRPZmZlckZpbHRlcjogTS5jYWxsKEluc3RhbmNlSGFuZGxlU2hhcGUpLnJldHVybnMoTS5hcnJheU9mKE0uc3RyaW5nKCkpKSxcbiAgICBnZXRQcm9wb3NhbFNoYXBlRm9ySW52aXRhdGlvbjogTS5jYWxsKEludml0YXRpb25IYW5kbGVTaGFwZSkucmV0dXJucyhcbiAgICAgIE0ub3B0KE0ucGF0dGVybigpKVxuICAgIClcbiAgfSksXG4gIG1ha2VPZmZlckFjY2VzczogTS5pbnRlcmZhY2UoXCJab2VTdG9yYWdlIG1ha2VPZmZlciBhY2Nlc3NcIiwge1xuICAgIGdldEFzc2V0S2luZEJ5QnJhbmQ6IE0uY2FsbChCcmFuZFNoYXBlKS5yZXR1cm5zKEFzc2V0S2luZFNoYXBlKSxcbiAgICBnZXRJbnN0YW5jZUFkbWluOiBNLmNhbGwoSW5zdGFuY2VIYW5kbGVTaGFwZSkucmV0dXJucyhcbiAgICAgIE0ucmVtb3RhYmxlKFwiaW5zdGFuY2VBZG1pblwiKVxuICAgICksXG4gICAgZ2V0UHJvcG9zYWxTaGFwZUZvckludml0YXRpb246IE0uY2FsbChJbnZpdGF0aW9uSGFuZGxlU2hhcGUpLnJldHVybnMoXG4gICAgICBNLm9wdChNLnBhdHRlcm4oKSlcbiAgICApLFxuICAgIGdldEludml0YXRpb25Jc3N1ZXI6IE0uY2FsbCgpLnJldHVybnMoSXNzdWVyU2hhcGUpLFxuICAgIGRlcG9zaXRQYXltZW50czogTS5jYWxsKFByb3Bvc2FsU2hhcGUsIFBheW1lbnRQS2V5d29yZFJlY29yZFNoYXBlKS5yZXR1cm5zKFxuICAgICAgTS5wcm9taXNlKClcbiAgICApXG4gIH0pLFxuICBzdGFydEluc3RhbmNlQWNjZXNzOiBNLmludGVyZmFjZShcIlpvZVN0b3JhZ2Ugc3RhcnRJbnN0YW5jZSBhY2Nlc3NcIiwge1xuICAgIG1ha2Vab2VJbnN0YW5jZVN0b3JhZ2VNYW5hZ2VyOiBNLmNhbGwoXG4gICAgICBJbnN0YWxsYXRpb25TaGFwZSxcbiAgICAgIE0uYW55KCksXG4gICAgICBJc3N1ZXJQS2V5d29yZFJlY29yZFNoYXBlLFxuICAgICAgSW5zdGFuY2VIYW5kbGVTaGFwZSxcbiAgICAgIE0ub3IoQnVuZGxlQ2FwU2hhcGUsIEJ1bmRsZVNoYXBlKSxcbiAgICAgIE0uc3RyaW5nKClcbiAgICApLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICAgIHVud3JhcEluc3RhbGxhdGlvbjogTS5jYWxsV2hlbihNLmVyZWYoSW5zdGFsbGF0aW9uU2hhcGUpKS5yZXR1cm5zKFxuICAgICAgVW53cmFwcGVkSW5zdGFsbGF0aW9uU2hhcGVcbiAgICApXG4gIH0pLFxuICBpbnZpdGF0aW9uSXNzdWVyQWNjZXNzOiBNLmludGVyZmFjZShcIlpvZVN0b3JhZ2UgaW52aXRhdGlvbklzc3VlclwiLCB7XG4gICAgZ2V0SW52aXRhdGlvbklzc3VlcjogTS5jYWxsKCkucmV0dXJucyhJc3N1ZXJTaGFwZSlcbiAgfSlcbn07XG5oYXJkZW4oWm9lU3RvcmFnZU1hbmFnZXJJS2l0KTtcbnZhciBab2VTZXJ2aWNlSSA9IE0uaW50ZXJmYWNlKFwiWm9lU2VydmljZVwiLCB7XG4gIGluc3RhbGw6IE0uY2FsbChNLmFueSgpKS5vcHRpb25hbChNLnN0cmluZygpKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgaW5zdGFsbEJ1bmRsZUlEOiBNLmNhbGwoTS5zdHJpbmcoKSkub3B0aW9uYWwoTS5zdHJpbmcoKSkucmV0dXJucyhNLnByb21pc2UoKSksXG4gIHN0YXJ0SW5zdGFuY2U6IE0uY2FsbChNLmVyZWYoSW5zdGFsbGF0aW9uU2hhcGUpKS5vcHRpb25hbChJc3N1ZXJQS2V5d29yZFJlY29yZFNoYXBlLCBNLnJlY29yZCgpLCBNLnJlY29yZCgpLCBNLnN0cmluZygpKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgb2ZmZXI6IE0uY2FsbChNLmVyZWYoSW52aXRhdGlvblNoYXBlKSkub3B0aW9uYWwoUHJvcG9zYWxTaGFwZSwgUGF5bWVudFBLZXl3b3JkUmVjb3JkU2hhcGUsIE0uYW55KCkpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICBnZXRPZmZlckZpbHRlcjogTS5jYWxsV2hlbihNLmF3YWl0KEluc3RhbmNlSGFuZGxlU2hhcGUpKS5yZXR1cm5zKFxuICAgIE0uYXJyYXlPZihNLnN0cmluZygpKVxuICApLFxuICBnZXRJbnZpdGF0aW9uSXNzdWVyOiBNLmNhbGwoKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgZ2V0RmVlSXNzdWVyOiBNLmNhbGwoKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgZ2V0QnJhbmRzOiBNLmNhbGxXaGVuKE0uYXdhaXQoSW5zdGFuY2VIYW5kbGVTaGFwZSkpLnJldHVybnMoXG4gICAgQnJhbmRLZXl3b3JkUmVjb3JkU2hhcGVcbiAgKSxcbiAgZ2V0SXNzdWVyczogTS5jYWxsV2hlbihNLmF3YWl0KEluc3RhbmNlSGFuZGxlU2hhcGUpKS5yZXR1cm5zKFxuICAgIElzc3VlcktleXdvcmRSZWNvcmRTaGFwZVxuICApLFxuICBnZXRQdWJsaWNGYWNldDogTS5jYWxsV2hlbihNLmF3YWl0KEluc3RhbmNlSGFuZGxlU2hhcGUpKS5yZXR1cm5zKFxuICAgIE0ucmVtb3RhYmxlKFwiUHVibGljRmFjZXRcIilcbiAgKSxcbiAgZ2V0VGVybXM6IE0uY2FsbFdoZW4oTS5hd2FpdChJbnN0YW5jZUhhbmRsZVNoYXBlKSkucmV0dXJucyhNLmFueSgpKSxcbiAgZ2V0SW5zdGFsbGF0aW9uRm9ySW5zdGFuY2U6IE0uY2FsbFdoZW4oTS5hd2FpdChJbnN0YW5jZUhhbmRsZVNoYXBlKSkucmV0dXJucyhcbiAgICBNLmVyZWYoTS5yZW1vdGFibGUoXCJJbnN0YWxsYXRpb25cIikpXG4gICksXG4gIGdldEJ1bmRsZUlERnJvbUluc3RhbGxhdGlvbjogTS5jYWxsV2hlbihNLmF3YWl0KEluc3RhbGxhdGlvblNoYXBlKSkucmV0dXJucyhcbiAgICBNLmVyZWYoTS5zdHJpbmcoKSlcbiAgKSxcbiAgZ2V0SW5zdGFsbGF0aW9uOiBNLmNhbGwoTS5lcmVmKEludml0YXRpb25TaGFwZSkpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICBnZXRJbnN0YW5jZTogTS5jYWxsKE0uZXJlZihJbnZpdGF0aW9uU2hhcGUpKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgZ2V0Q29uZmlndXJhdGlvbjogTS5jYWxsKCkucmV0dXJucyh7XG4gICAgZmVlSXNzdWVyQ29uZmlnOiB7XG4gICAgICBuYW1lOiBNLnN0cmluZygpLFxuICAgICAgYXNzZXRLaW5kOiBcIm5hdFwiLFxuICAgICAgZGlzcGxheUluZm86IERpc3BsYXlJbmZvU2hhcGVcbiAgICB9XG4gIH0pLFxuICBnZXRJbnZpdGF0aW9uRGV0YWlsczogTS5jYWxsKE0uZXJlZihJbnZpdGF0aW9uU2hhcGUpKS5yZXR1cm5zKE0uYW55KCkpLFxuICBnZXRQcm9wb3NhbFNoYXBlRm9ySW52aXRhdGlvbjogTS5jYWxsKEludml0YXRpb25IYW5kbGVTaGFwZSkucmV0dXJucyhcbiAgICBNLm9wdChNLnBhdHRlcm4oKSlcbiAgKVxufSk7XG52YXIgQWRtaW5GYWNldEkgPSBNLmludGVyZmFjZShcIlpjZkFkbWluRmFjZXRcIiwge1xuICBnZXRWYXRTaHV0ZG93blByb21pc2U6IE0uY2FsbCgpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICByZXN0YXJ0Q29udHJhY3Q6IE0uY2FsbCgpLm9wdGlvbmFsKE0uYW55KCkpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICB1cGdyYWRlQ29udHJhY3Q6IE0uY2FsbChNLnN0cmluZygpKS5vcHRpb25hbChNLmFueSgpKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgdGVybWluYXRlQ29udHJhY3Q6IE0uY2FsbChNLmVycm9yKCkpLnJldHVybnMoTS5wcm9taXNlKCkpXG59KTtcbnZhciBTZWF0RGF0YVNoYXBlID0gTS5zcGxpdFJlY29yZChcbiAge1xuICAgIHByb3Bvc2FsOiBQcm9wb3NhbFNoYXBlLFxuICAgIGluaXRpYWxBbGxvY2F0aW9uOiBBbW91bnRLZXl3b3JkUmVjb3JkU2hhcGUsXG4gICAgc2VhdEhhbmRsZTogU2VhdFNoYXBlXG4gIH0sXG4gIHtcbiAgICBvZmZlckFyZ3M6IE0uYW55KClcbiAgfVxuKTtcbnZhciBIYW5kbGVPZmZlckkgPSBNLmludGVyZmFjZShcIkhhbmRsZU9mZmVyXCIsIHtcbiAgaGFuZGxlT2ZmZXI6IE0uY2FsbChJbnZpdGF0aW9uSGFuZGxlU2hhcGUsIFNlYXREYXRhU2hhcGUpLnJldHVybnMoe1xuICAgIG9mZmVyUmVzdWx0UHJvbWlzZTogTS5wcm9taXNlKCksXG4gICAgZXhpdE9iajogRXhpdE9iamVjdFNoYXBlXG4gIH0pXG59KTtcbnZhciBQcmljZVF1b3RlU2hhcGUgPSB7XG4gIHF1b3RlQW1vdW50OiBBbW91bnRTaGFwZSxcbiAgcXVvdGVQYXltZW50OiBNLmVyZWYoUGF5bWVudFNoYXBlKVxufTtcbmhhcmRlbihQcmljZVF1b3RlU2hhcGUpO1xuXG4vL1xudmFyIFRyYW5zZmVyUGFydFNoYXBlID0gTS5zcGxpdEFycmF5KFxuICBoYXJkZW4oW00ub3B0KFNlYXRTaGFwZSksIE0ub3B0KFNlYXRTaGFwZSksIE0ub3B0KEFtb3VudEtleXdvcmRSZWNvcmRTaGFwZSldKSxcbiAgaGFyZGVuKFtNLm9wdChBbW91bnRLZXl3b3JkUmVjb3JkU2hhcGUpXSlcbik7XG52YXIgYXRvbWljVHJhbnNmZXIgPSAoemNmLCBmcm9tU2VhdCA9IHZvaWQgMCwgdG9TZWF0ID0gdm9pZCAwLCBmcm9tQW1vdW50cyA9IHZvaWQgMCwgdG9BbW91bnRzID0gdm9pZCAwKSA9PiB6Y2YuYXRvbWljUmVhcnJhbmdlKGhhcmRlbihbW2Zyb21TZWF0LCB0b1NlYXQsIGZyb21BbW91bnRzLCB0b0Ftb3VudHNdXSkpO1xuXG4vL1xudmFyIHNhdGlzZmllc0ludGVybmFsID0gKGdpdmVPcldhbnQgPSB7fSwgYWxsb2NhdGlvbikgPT4ge1xuICBjb25zdCBpc0dURUJ5S2V5d29yZCA9IChba2V5d29yZCwgcmVxdWlyZWRBbW91bnRdKSA9PiB7XG4gICAgaWYgKGFsbG9jYXRpb25ba2V5d29yZF0gPT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGNvbnN0IGFsbG9jYXRpb25BbW91bnQgPSBhbGxvY2F0aW9uW2tleXdvcmRdO1xuICAgIHJldHVybiBBbW91bnRNYXRoLmlzR1RFKGFsbG9jYXRpb25BbW91bnQsIHJlcXVpcmVkQW1vdW50KSA/IDEgOiAwO1xuICB9O1xuICByZXR1cm4gT2JqZWN0LmVudHJpZXMoZ2l2ZU9yV2FudCkuZXZlcnkoaXNHVEVCeUtleXdvcmQpID8gMSA6IDA7XG59O1xudmFyIHNhdGlzZmllc1dhbnQgPSAocHJvcG9zYWwsIGFsbG9jYXRpb24pID0+IHNhdGlzZmllc0ludGVybmFsKHByb3Bvc2FsLndhbnQsIGFsbG9jYXRpb24pO1xudmFyIHNhdGlzZmllc0dpdmUgPSAocHJvcG9zYWwsIGFsbG9jYXRpb24pID0+IHNhdGlzZmllc0ludGVybmFsKHByb3Bvc2FsLmdpdmUsIGFsbG9jYXRpb24pO1xuZnVuY3Rpb24gaXNPZmZlclNhZmUocHJvcG9zYWwsIGFsbG9jYXRpb24pIHtcbiAgcmV0dXJuIHNhdGlzZmllc0dpdmUocHJvcG9zYWwsIGFsbG9jYXRpb24pID4gMCB8fCBzYXRpc2ZpZXNXYW50KHByb3Bvc2FsLCBhbGxvY2F0aW9uKSA+IDA7XG59XG5oYXJkZW4oaXNPZmZlclNhZmUpO1xuaGFyZGVuKHNhdGlzZmllc1dhbnQpO1xuXG4vL1xudmFyIGRlcG9zaXRUb1NlYXRTdWNjZXNzTXNnID0gYERlcG9zaXQgYW5kIHJlYWxsb2NhdGlvbiBzdWNjZXNzZnVsLmA7XG52YXIgZGVwb3NpdFRvU2VhdCA9IGFzeW5jICh6Y2YsIHJlY2lwaWVudFNlYXQsIGFtb3VudHMsIHBheW1lbnRzKSA9PiB7XG4gICFyZWNpcGllbnRTZWF0Lmhhc0V4aXRlZCgpIHx8IHRocm93UmVkYWN0ZWRgVGhlIHJlY2lwaWVudFNlYXQgY2Fubm90IGhhdmUgZXhpdGVkLmA7XG4gIGNvbnN0IHJlYWxsb2NhdGVBZnRlckRlcG9zaXQgPSAodGVtcFNlYXQpID0+IHtcbiAgICBhdG9taWNUcmFuc2Zlcih6Y2YsIHRlbXBTZWF0LCByZWNpcGllbnRTZWF0LCBhbW91bnRzKTtcbiAgICB0ZW1wU2VhdC5leGl0KCk7XG4gICAgcmV0dXJuIGRlcG9zaXRUb1NlYXRTdWNjZXNzTXNnO1xuICB9O1xuICBjb25zdCBpbnZpdGF0aW9uID0gemNmLm1ha2VJbnZpdGF0aW9uKFxuICAgIHJlYWxsb2NhdGVBZnRlckRlcG9zaXQsXG4gICAgXCJ0ZW1wb3Jhcnkgc2VhdCBmb3IgZGVwb3NpdFwiXG4gICk7XG4gIGNvbnN0IHByb3Bvc2FsID0gaGFyZGVuKHsgZ2l2ZTogYW1vdW50cyB9KTtcbiAgaGFyZGVuKHBheW1lbnRzKTtcbiAgY29uc3Qgem9lID0gemNmLmdldFpvZVNlcnZpY2UoKTtcbiAgY29uc3QgdGVtcFVzZXJTZWF0ID0gRSh6b2UpLm9mZmVyKGludml0YXRpb24sIHByb3Bvc2FsLCBwYXltZW50cyk7XG4gIHJldHVybiBFKHRlbXBVc2VyU2VhdCkuZ2V0T2ZmZXJSZXN1bHQoKTtcbn07XG5cbi8vXG52YXIgeyBtdWx0aXBseTogbXVsdGlwbHkyLCBmbG9vckRpdmlkZTogZmxvb3JEaXZpZGUyLCBjZWlsRGl2aWRlLCBiYW5rZXJzRGl2aWRlLCBhZGQ6IGFkZDIsIHN1YnRyYWN0OiBzdWJ0cmFjdDIgfSA9IG5hdFNhZmVNYXRoO1xuXG4vL1xudmFyIG1ha2VFcGhlbWVyYVByb3ZpZGVyID0gKGluaXQpID0+IHtcbiAgY29uc3QgZXh0YW50ID0gLyogICAgICAgICAgICovIG5ldyBXZWFrTWFwKCk7XG4gIHJldHVybiAoa2V5KSA9PiB7XG4gICAgaWYgKGV4dGFudC5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIGV4dGFudC5nZXQoa2V5KTtcbiAgICB9XG4gICAgY29uc3QgbmV3RXBoID0gaW5pdChrZXkpO1xuICAgIGV4dGFudC5zZXQoa2V5LCBuZXdFcGgpO1xuICAgIHJldHVybiBuZXdFcGg7XG4gIH07XG59O1xuaGFyZGVuKG1ha2VFcGhlbWVyYVByb3ZpZGVyKTtcbnZhciBwcm92aWRlRW1wdHlTZWF0ID0gKHpjZiwgYmFnZ2FnZSwgbmFtZSkgPT4ge1xuICByZXR1cm4gcHJvdmlkZShiYWdnYWdlLCBuYW1lLCAoKSA9PiB6Y2YubWFrZUVtcHR5U2VhdEtpdCgpLnpjZlNlYXQpO1xufTtcbmhhcmRlbihwcm92aWRlRW1wdHlTZWF0KTtcbnZhciBwcm92aWRlQWxsID0gKGJhZ2dhZ2UsIHRodW5rcykgPT4ge1xuICBjb25zdCBrZXlzNyA9IE9iamVjdC5rZXlzKHRodW5rcyk7XG4gIGNvbnN0IGluQmFnZ2FnZSA9IGJhZ2dhZ2UuaGFzKGtleXM3WzBdKTtcbiAgaWYgKGluQmFnZ2FnZSkge1xuICAgIGNvbnN0IG9iaiA9IG9iamVjdE1hcChcbiAgICAgIHRodW5rcyxcbiAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAoXywgaykgPT4gYmFnZ2FnZS5nZXQoaylcbiAgICApO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaGFyZGVuKG9iaikpO1xuICB9XG4gIGNvbnN0IGtleWVkUHJvbWlzZXMgPSBvYmplY3RNYXAodGh1bmtzLCAoZm4pID0+IGZuKCkpO1xuICByZXR1cm4gYWxsVmFsdWVzKGtleWVkUHJvbWlzZXMpLnRoZW4oKGtleWVkVmFscykgPT4ge1xuICAgIGZvciAoY29uc3QgW2ssIHYyXSBvZiBPYmplY3QuZW50cmllcyhrZXllZFZhbHMpKSB7XG4gICAgICBiYWdnYWdlLmluaXQoaywgdjIpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5ZWRWYWxzO1xuICB9KTtcbn07XG5oYXJkZW4ocHJvdmlkZUFsbCk7XG5cbi8vXG52YXIgd3JhcHBlck1ldGhvZHMgPSAod3JhcHBlcktpbmROYW1lLCB1TWV0aG9kTmFtZXMsIGV4dHJhTWV0aG9kcyA9IHt9KSA9PiBoYXJkZW4oe1xuICAuLi5mcm9tVW5pcXVlRW50cmllcyhcbiAgICB1TWV0aG9kTmFtZXMubWFwKChuYW1lKSA9PiBbXG4gICAgICBuYW1lLFxuICAgICAge1xuICAgICAgICAvL1xuICAgICAgICBbbmFtZV0oLi4uYXJncykge1xuICAgICAgICAgIGNvbnN0IHsgdW5kZXJseWluZyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICB1bmRlcmx5aW5nICE9PSB2b2lkIDAgfHwgdGhyb3dSZWRhY3RlZGAke3F1b3RlKHdyYXBwZXJLaW5kTmFtZSl9IHJldm9rZWRgO1xuICAgICAgICAgIHJldHVybiB1bmRlcmx5aW5nW25hbWVdKC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIC8vXG4gICAgICB9W25hbWVdXG4gICAgXSlcbiAgKSxcbiAgLi4uZXh0cmFNZXRob2RzXG59KTtcbmhhcmRlbih3cmFwcGVyTWV0aG9kcyk7XG52YXIgcHJlcGFyZUF0dGVudWF0b3JNYWtlciA9ICh6b25lLCB1S2luZE5hbWUsIHVNZXRob2ROYW1lcywgb3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IHtcbiAgICB1SW50ZXJmYWNlTmFtZSA9IHVLaW5kTmFtZSxcbiAgICBleHRyYU1ldGhvZEd1YXJkcyA9IHt9LFxuICAgIGV4dHJhTWV0aG9kcyA9IHt9XG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBBdHRlbnVhdG9ySSA9IE0uaW50ZXJmYWNlKFxuICAgIGAke3VJbnRlcmZhY2VOYW1lfV9hdHRlbnVhdG9yYCxcbiAgICBleHRyYU1ldGhvZEd1YXJkcyxcbiAgICB7IGRlZmF1bHRHdWFyZHM6IFwicmF3XCIgfVxuICApO1xuICBjb25zdCBhdHRlbnVhdG9yS2luZE5hbWUgPSBgJHt1S2luZE5hbWV9X2F0dGVudWF0b3JgO1xuICByZXR1cm4gem9uZS5leG9DbGFzcyhcbiAgICBhdHRlbnVhdG9yS2luZE5hbWUsXG4gICAgQXR0ZW51YXRvckksXG4gICAgKHVuZGVybHlpbmcpID0+ICh7IHVuZGVybHlpbmcgfSksXG4gICAgd3JhcHBlck1ldGhvZHMoYXR0ZW51YXRvcktpbmROYW1lLCB1TWV0aG9kTmFtZXMsIGV4dHJhTWV0aG9kcyksXG4gICAge1xuICAgICAgc3RhdGVTaGFwZTogeyB1bmRlcmx5aW5nOiBNLm9wdChNLnJlbW90YWJsZShcInVuZGVybHlpbmdcIikpIH1cbiAgICB9XG4gICk7XG59O1xuaGFyZGVuKHByZXBhcmVBdHRlbnVhdG9yTWFrZXIpO1xudmFyIFJlbW90YWJsZVByZWZpeFJFID0gL14oQWxsZWdlZDogfERlYnVnTmFtZTogKS87XG52YXIgYXR0ZW51YXRlT25lID0gKHVuZGVybHlpbmcsIHVNZXRob2ROYW1lcywgb3B0aW9ucyA9IHZvaWQgMCkgPT4ge1xuICBjb25zdCBoZWFwWm9uZSA9IG1ha2VIZWFwWm9uZSgpO1xuICBjb25zdCB1S2luZE5hbWUgPSAodW5kZXJseWluZ1tTeW1ib2wudG9TdHJpbmdUYWddIHx8IFwiVW5kZXJseWluZ1wiKS5yZXBsYWNlKFxuICAgIFJlbW90YWJsZVByZWZpeFJFLFxuICAgIFwiXCJcbiAgKTtcbiAgY29uc3QgbWFrZUF0dGVudWF0b3IgPSBwcmVwYXJlQXR0ZW51YXRvck1ha2VyKFxuICAgIGhlYXBab25lLFxuICAgIHVLaW5kTmFtZSxcbiAgICB1TWV0aG9kTmFtZXMsXG4gICAgb3B0aW9uc1xuICApO1xuICByZXR1cm4gbWFrZUF0dGVudWF0b3IodW5kZXJseWluZyk7XG59O1xuaGFyZGVuKGF0dGVudWF0ZU9uZSk7XG5cbi8vXG52YXIgcHJlcGFyZVJldm9jYWJsZU1ha2VyS2l0ID0gKHpvbmUsIHVLaW5kTmFtZSwgdU1ldGhvZE5hbWVzLCBvcHRpb25zID0ge30pID0+IHtcbiAgY29uc3Qge1xuICAgIHVJbnRlcmZhY2VOYW1lID0gdUtpbmROYW1lLFxuICAgIGV4dHJhTWV0aG9kR3VhcmRzID0ge30sXG4gICAgZXh0cmFNZXRob2RzID0ge31cbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IFJldm9jYWJsZUlLaXQgPSBoYXJkZW4oe1xuICAgIHJldm9rZXI6IE0uaW50ZXJmYWNlKGAke3VJbnRlcmZhY2VOYW1lfV9yZXZva2VyYCwge1xuICAgICAgcmV2b2tlOiBNLmNhbGwoKS5yZXR1cm5zKE0uYm9vbGVhbigpKVxuICAgIH0pLFxuICAgIHJldm9jYWJsZTogTS5pbnRlcmZhY2UoYCR7dUludGVyZmFjZU5hbWV9X3Jldm9jYWJsZWAsIGV4dHJhTWV0aG9kR3VhcmRzLCB7XG4gICAgICBkZWZhdWx0R3VhcmRzOiBcInJhd1wiXG4gICAgfSlcbiAgfSk7XG4gIGNvbnN0IHJldm9jYWJsZUtpbmROYW1lID0gYCR7dUtpbmROYW1lfV9jYXJldGFrZXJgO1xuICBsZXQgYW1wbGlmaWVyO1xuICBjb25zdCBtYWtlUmV2b2NhYmxlS2l0ID0gem9uZS5leG9DbGFzc0tpdChcbiAgICByZXZvY2FibGVLaW5kTmFtZSxcbiAgICBSZXZvY2FibGVJS2l0LFxuICAgICh1bmRlcmx5aW5nKSA9PiAoeyB1bmRlcmx5aW5nIH0pLFxuICAgIHtcbiAgICAgIHJldm9rZXI6IHtcbiAgICAgICAgcmV2b2tlKCkge1xuICAgICAgICAgIGNvbnN0IHsgc3RhdGUgfSA9IHRoaXM7XG4gICAgICAgICAgaWYgKHN0YXRlLnVuZGVybHlpbmcgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGF0ZS51bmRlcmx5aW5nID0gdm9pZCAwO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmV2b2NhYmxlOiB3cmFwcGVyTWV0aG9kcyhyZXZvY2FibGVLaW5kTmFtZSwgdU1ldGhvZE5hbWVzLCBleHRyYU1ldGhvZHMpXG4gICAgfSxcbiAgICB7XG4gICAgICBzdGF0ZVNoYXBlOiB7IHVuZGVybHlpbmc6IE0ub3B0KE0ucmVtb3RhYmxlKFwidW5kZXJseWluZ1wiKSkgfSxcbiAgICAgIHJlY2VpdmVBbXBsaWZpZXI6IChhbXApID0+IHtcbiAgICAgICAgYW1wbGlmaWVyID0gYW1wO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbiAgY29uc3QgbWFrZVJldm9jYWJsZSA9ICh1bmRlcmx5aW5nKSA9PiBtYWtlUmV2b2NhYmxlS2l0KHVuZGVybHlpbmcpLnJldm9jYWJsZTtcbiAgY29uc3QgcmV2b2tlID0gKHJldm9jYWJsZSkgPT4ge1xuICAgIGNvbnN0IGZhY2V0cyA9IGFtcGxpZmllcihyZXZvY2FibGUpO1xuICAgIGlmIChmYWNldHMgPT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gZmFjZXRzLnJldm9rZXIucmV2b2tlKCk7XG4gIH07XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIHJldm9rZSxcbiAgICBtYWtlUmV2b2NhYmxlLFxuICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICBtYWtlUmV2b2NhYmxlS2l0XG4gIH0pO1xufTtcbmhhcmRlbihwcmVwYXJlUmV2b2NhYmxlTWFrZXJLaXQpO1xuXG4vL1xudmFyIFRyYW5zZmVyUHJvcG9zYWxTaGFwZSA9IE0uc3BsaXRSZWNvcmQoe1xuICBnaXZlOiB7fSxcbiAgd2FudDoge30sXG4gIGV4aXQ6IHtcbiAgICBvbkRlbWFuZDogbnVsbFxuICB9XG59KTtcbnZhciBwcmVwYXJlT3duYWJsZSA9ICh6b25lLCBtYWtlSW52aXRhdGlvbiwgdUtpbmROYW1lLCB1TWV0aG9kTmFtZXMsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCB7IHVJbnRlcmZhY2VOYW1lID0gdUtpbmROYW1lIH0gPSBvcHRpb25zO1xuICBjb25zdCB7IHJldm9rZSwgbWFrZVJldm9jYWJsZSB9ID0gcHJlcGFyZVJldm9jYWJsZU1ha2VyS2l0KFxuICAgIHpvbmUsXG4gICAgdUtpbmROYW1lLFxuICAgIHVNZXRob2ROYW1lcyxcbiAgICB7XG4gICAgICB1SW50ZXJmYWNlTmFtZSxcbiAgICAgIGV4dHJhTWV0aG9kR3VhcmRzOiB7XG4gICAgICAgIG1ha2VUcmFuc2Zlckludml0YXRpb246IE0uY2FsbCgpLnJldHVybnMoTS5wcm9taXNlKCkpXG4gICAgICB9LFxuICAgICAgZXh0cmFNZXRob2RzOiB7XG4gICAgICAgIG1ha2VUcmFuc2Zlckludml0YXRpb24oKSB7XG4gICAgICAgICAgY29uc3QgeyB1bmRlcmx5aW5nIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIGNvbnN0IHsgcmV2b2NhYmxlIH0gPSB0aGlzLmZhY2V0cztcbiAgICAgICAgICBjb25zdCBjdXN0b21EZXRhaWxzID0gdW5kZXJseWluZy5nZXRJbnZpdGF0aW9uQ3VzdG9tRGV0YWlscygpO1xuICAgICAgICAgIGNvbnN0IHRyYW5zZmVySGFuZGxlciA9IG1ha2VUcmFuc2ZlckhhbmRsZXIodW5kZXJseWluZyk7XG4gICAgICAgICAgY29uc3QgaW52aXRhdGlvbiA9IG1ha2VJbnZpdGF0aW9uKFxuICAgICAgICAgICAgdHJhbnNmZXJIYW5kbGVyLFxuICAgICAgICAgICAgXCJ0cmFuc2ZlclwiLFxuICAgICAgICAgICAgY3VzdG9tRGV0YWlscyxcbiAgICAgICAgICAgIFRyYW5zZmVyUHJvcG9zYWxTaGFwZVxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV2b2tlKHJldm9jYWJsZSk7XG4gICAgICAgICAgcmV0dXJuIGludml0YXRpb247XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIGNvbnN0IG1ha2VUcmFuc2ZlckhhbmRsZXIgPSB6b25lLmV4b0NsYXNzKFxuICAgIFwiVHJhbnNmZXJIYW5kbGVyXCIsXG4gICAgT2ZmZXJIYW5kbGVySSxcbiAgICAodW5kZXJseWluZykgPT4gKHtcbiAgICAgIHVuZGVybHlpbmdcbiAgICB9KSxcbiAgICB7XG4gICAgICBoYW5kbGUoc2VhdCkge1xuICAgICAgICBjb25zdCB7IHVuZGVybHlpbmcgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGNvbnN0IHJldm9jYWJsZSA9IG1ha2VSZXZvY2FibGUodW5kZXJseWluZyk7XG4gICAgICAgIHNlYXQuZXhpdCgpO1xuICAgICAgICByZXR1cm4gcmV2b2NhYmxlO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbiAgY29uc3QgbWFrZU93bmFibGUgPSAodW5kZXJseWluZykgPT4gbWFrZVJldm9jYWJsZSh1bmRlcmx5aW5nKTtcbiAgcmV0dXJuIGhhcmRlbihtYWtlT3duYWJsZSk7XG59O1xuaGFyZGVuKHByZXBhcmVPd25hYmxlKTtcblxuLy9cbnZhciB0cmFjZTkgPSBtYWtlVHJhY2VyKFwiUEFcIiwgZmFsc2UpO1xudmFyIEd1YXJkQ2FsbEFtb3VudFR1cGxlID0gTS5jYWxsKEFtb3VudFNoYXBlLCBBbW91bnRTaGFwZSkucmV0dXJucyhcbiAgTS5wcm9taXNlKClcbik7XG52YXIgUHJpY2VBdXRob3JpdHlJID0gTS5pbnRlcmZhY2UoXCJQcmljZUF1dGhvcml0eVwiLCB7XG4gIGdldFF1b3RlSXNzdWVyOiBNLmNhbGwoQnJhbmRTaGFwZSwgQnJhbmRTaGFwZSkucmV0dXJucyhNLnByb21pc2UoKSksXG4gIGdldFRpbWVyU2VydmljZTogTS5jYWxsKEJyYW5kU2hhcGUsIEJyYW5kU2hhcGUpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICBxdW90ZUdpdmVuOiBNLmNhbGwoQW1vdW50U2hhcGUsIEJyYW5kU2hhcGUpLnJldHVybnMoTS5wcm9taXNlKCkpLFxuICBxdW90ZVdhbnRlZDogTS5jYWxsKEJyYW5kU2hhcGUsIEFtb3VudFNoYXBlKS5yZXR1cm5zKE0ucHJvbWlzZSgpKSxcbiAgbWFrZVF1b3RlTm90aWZpZXI6IE0uY2FsbChBbW91bnRTaGFwZSwgQnJhbmRTaGFwZSkucmV0dXJucyhNLnByb21pc2UoKSksXG4gIHF1b3RlQXRUaW1lOiBNLmNhbGwoVGltZXN0YW1wU2hhcGUsIEFtb3VudFNoYXBlLCBCcmFuZFNoYXBlKS5yZXR1cm5zKFxuICAgIE0ucHJvbWlzZSgpXG4gICksXG4gIHF1b3RlV2hlbkxUOiBHdWFyZENhbGxBbW91bnRUdXBsZSxcbiAgcXVvdGVXaGVuTFRFOiBHdWFyZENhbGxBbW91bnRUdXBsZSxcbiAgcXVvdGVXaGVuR1RFOiBHdWFyZENhbGxBbW91bnRUdXBsZSxcbiAgcXVvdGVXaGVuR1Q6IEd1YXJkQ2FsbEFtb3VudFR1cGxlLFxuICBtdXRhYmxlUXVvdGVXaGVuTFQ6IEd1YXJkQ2FsbEFtb3VudFR1cGxlLFxuICBtdXRhYmxlUXVvdGVXaGVuTFRFOiBHdWFyZENhbGxBbW91bnRUdXBsZSxcbiAgbXV0YWJsZVF1b3RlV2hlbkdURTogR3VhcmRDYWxsQW1vdW50VHVwbGUsXG4gIG11dGFibGVRdW90ZVdoZW5HVDogR3VhcmRDYWxsQW1vdW50VHVwbGVcbn0pO1xuXG4vL1xudmFyIHVuaXRBbW91bnQgPSBhc3luYyAoYnJhbmQpID0+IHtcbiAgY29uc3QgZGlzcGxheUluZm8gPSBhd2FpdCBFKGJyYW5kKS5nZXREaXNwbGF5SW5mbygpO1xuICBjb25zdCBkZWNpbWFsUGxhY2VzID0gZGlzcGxheUluZm8uZGVjaW1hbFBsYWNlcyA/PyAwO1xuICByZXR1cm4gQW1vdW50TWF0aC5tYWtlKGJyYW5kLCAxMG4gKiogTmF0KGRlY2ltYWxQbGFjZXMpKTtcbn07XG5oYXJkZW4odW5pdEFtb3VudCk7XG5cbi8vXG52YXIgdHJhY2UxMCA9IG1ha2VUcmFjZXIoXCJab2VUb29sc1wiKTtcbnZhciB7IGFzc2lnbjogYXNzaWduNCwga2V5czoga2V5czIsIHZhbHVlczogdmFsdWVzNSB9ID0gT2JqZWN0O1xudmFyIG1ha2Vab2VUb29scyA9ICh6Y2YsIHsgd2hlbiwgYWxsVm93cywgYWxsU2V0dGxlZCwgYXNWb3cgfSkgPT4ge1xuICBjb25zdCBsb2NhbFRyYW5zZmVyID0gKHNyY1NlYXQsIGxvY2FsQWNjb3VudCwgYW1vdW50cykgPT4gYXNWb3coYXN5bmMgKCkgPT4ge1xuICAgICFzcmNTZWF0Lmhhc0V4aXRlZCgpIHx8IHRocm93UmVkYWN0ZWRgVGhlIHNlYXQgY2Fubm90IGhhdmUgZXhpdGVkLmA7XG4gICAgY29uc3QgeyB6Y2ZTZWF0OiB0ZW1wU2VhdCwgdXNlclNlYXQ6IHVzZXJTZWF0UCB9ID0gemNmLm1ha2VFbXB0eVNlYXRLaXQoKTtcbiAgICBjb25zdCB1c2VyU2VhdCA9IGF3YWl0IHVzZXJTZWF0UDtcbiAgICB6Y2YuYXRvbWljUmVhcnJhbmdlKGhhcmRlbihbW3NyY1NlYXQsIHRlbXBTZWF0LCBhbW91bnRzXV0pKTtcbiAgICB0ZW1wU2VhdC5leGl0KCk7XG4gICAgY29uc3QgcGF5bWVudHMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIGtleXMyKGFtb3VudHMpLm1hcCgoa3cpID0+IEUodXNlclNlYXQpLmdldFBheW91dChrdykpXG4gICAgKTtcbiAgICBjb25zdCBzZXR0bGVEZXBvc2l0cyA9IGF3YWl0IHdoZW4oXG4gICAgICBhbGxTZXR0bGVkKHBheW1lbnRzLm1hcCgocG10KSA9PiBFKGxvY2FsQWNjb3VudCkuZGVwb3NpdChwbXQpKSlcbiAgICApO1xuICAgIGlmIChzZXR0bGVEZXBvc2l0cy5maW5kKCh4KSA9PiB4LnN0YXR1cyA9PT0gXCJyZWplY3RlZFwiKSkge1xuICAgICAgY29uc3QgYW10cyA9IHZhbHVlczUoYW1vdW50cyk7XG4gICAgICBjb25zdCBlcnJvcnMgPSBbXTtcbiAgICAgIGNvbnN0IHBheW1lbnRzT3JXaXRoZHJhd1ZzID0gc2V0dGxlRGVwb3NpdHMubWFwKCh4LCBpMykgPT4ge1xuICAgICAgICBpZiAoeC5zdGF0dXMgPT09IFwicmVqZWN0ZWRcIikge1xuICAgICAgICAgIGVycm9ycy5wdXNoKHgucmVhc29uKTtcbiAgICAgICAgICByZXR1cm4gcGF5bWVudHNbaTNdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBFKGxvY2FsQWNjb3VudCkud2l0aGRyYXcoYW10c1tpM10pO1xuICAgICAgfSk7XG4gICAgICBjb25zdCBwYXltZW50c1RvUmV0dXJuID0gYXdhaXQgd2hlbihhbGxWb3dzKHBheW1lbnRzT3JXaXRoZHJhd1ZzKSk7XG4gICAgICBjb25zdCBwYXltZW50S3dyID0gaGFyZGVuKFxuICAgICAgICBrZXlzMihhbW91bnRzKS5yZWR1Y2UoXG4gICAgICAgICAgKGt3ciwga3csIGkzKSA9PiBhc3NpZ240KGt3ciwgeyBba3ddOiBwYXltZW50c1RvUmV0dXJuW2kzXSB9KSxcbiAgICAgICAgICB7fVxuICAgICAgICApXG4gICAgICApO1xuICAgICAgY29uc3QgZGVwb3NpdFJlc3BvbnNlID0gYXdhaXQgZGVwb3NpdFRvU2VhdChcbiAgICAgICAgemNmLFxuICAgICAgICBzcmNTZWF0LFxuICAgICAgICBhbW91bnRzLFxuICAgICAgICBwYXltZW50S3dyXG4gICAgICApO1xuICAgICAgdHJhY2UxMChcImxvY2FsVHJhbnNmZXIgZGVwb3NpdFJlc3BvbnNlXCIsIGRlcG9zaXRSZXNwb25zZSk7XG4gICAgICB0aHJvdyBtYWtlRXJyb3IoYE9uZSBvciBtb3JlIGRlcG9zaXRzIGZhaWxlZCAke3F1b3RlKGVycm9ycyl9YCk7XG4gICAgfVxuICB9KTtcbiAgY29uc3Qgd2l0aGRyYXdUb1NlYXQgPSAobG9jYWxBY2NvdW50LCBkZXN0U2VhdCwgYW1vdW50cykgPT4gYXNWb3coYXN5bmMgKCkgPT4ge1xuICAgICFkZXN0U2VhdC5oYXNFeGl0ZWQoKSB8fCB0aHJvd1JlZGFjdGVkYFRoZSBzZWF0IGNhbm5vdCBoYXZlIGV4aXRlZC5gO1xuICAgIGNvbnN0IHNldHRsZWRXaXRoZHJhd2FscyA9IGF3YWl0IHdoZW4oXG4gICAgICBhbGxTZXR0bGVkKHZhbHVlczUoYW1vdW50cykubWFwKChhbXQpID0+IEUobG9jYWxBY2NvdW50KS53aXRoZHJhdyhhbXQpKSlcbiAgICApO1xuICAgIGlmIChzZXR0bGVkV2l0aGRyYXdhbHMuZmluZCgoeCkgPT4geC5zdGF0dXMgPT09IFwicmVqZWN0ZWRcIikpIHtcbiAgICAgIGNvbnN0IHJldHVyblBheW1lbnRWcyA9IFtdO1xuICAgICAgY29uc3QgZXJyb3JzID0gW107XG4gICAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiBzZXR0bGVkV2l0aGRyYXdhbHMpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwiZnVsZmlsbGVkXCIpIHtcbiAgICAgICAgICByZXR1cm5QYXltZW50VnMucHVzaChFKGxvY2FsQWNjb3VudCkuZGVwb3NpdChyZXN1bHQudmFsdWUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlcnJvcnMucHVzaChyZXN1bHQucmVhc29uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYXdhaXQgd2hlbihhbGxWb3dzKHJldHVyblBheW1lbnRWcykpO1xuICAgICAgdGhyb3cgbWFrZUVycm9yKGBPbmUgb3IgbW9yZSB3aXRoZHJhd2FscyBmYWlsZWQgJHtxdW90ZShlcnJvcnMpfWApO1xuICAgIH1cbiAgICBjb25zdCBwYXltZW50S3dyID0gaGFyZGVuKFxuICAgICAga2V5czIoYW1vdW50cykucmVkdWNlKFxuICAgICAgICAoYWNjLCBrdywgaTMpID0+IGFzc2lnbjQoYWNjLCB7XG4gICAgICAgICAgW2t3XTogKFxuICAgICAgICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2V0dGxlZFdpdGhkcmF3YWxzW2kzXS52YWx1ZVxuICAgICAgICAgIClcbiAgICAgICAgfSksXG4gICAgICAgIHt9XG4gICAgICApXG4gICAgKTtcbiAgICBjb25zdCBkZXBvc2l0UmVzcG9uc2UgPSBhd2FpdCBkZXBvc2l0VG9TZWF0KFxuICAgICAgemNmLFxuICAgICAgZGVzdFNlYXQsXG4gICAgICBhbW91bnRzLFxuICAgICAgcGF5bWVudEt3clxuICAgICk7XG4gICAgdHJhY2UxMChcIndpdGhkcmF3VG9TZWF0IGRlcG9zaXRSZXNwb25zZVwiLCBkZXBvc2l0UmVzcG9uc2UpO1xuICB9KTtcbiAgcmV0dXJuIGhhcmRlbih7XG4gICAgbG9jYWxUcmFuc2ZlcixcbiAgICB3aXRoZHJhd1RvU2VhdFxuICB9KTtcbn07XG5cbi8vXG52YXIgSGFuZGxlclNoYXBlID0gTS5yZW1vdGFibGUoXCJPZmZlckhhbmRsZXJcIik7XG52YXIgbWFrZVpjZlRvb2xzID0gKHpjZiwgdm93VG9vbHMpID0+IGhhcmRlbih7XG4gIG1ha2VJbnZpdGF0aW9uKG9mZmVySGFuZGxlciwgZGVzY3JpcHRpb24sIGN1c3RvbURldGFpbHMsIHByb3Bvc2FsU2hhcGUpIHtcbiAgICBtdXN0TWF0Y2gob2ZmZXJIYW5kbGVyLCBIYW5kbGVyU2hhcGUpO1xuICAgIHJldHVybiB2b3dUb29scy53YXRjaChcbiAgICAgIHpjZi5tYWtlSW52aXRhdGlvbihcbiAgICAgICAgb2ZmZXJIYW5kbGVyLFxuICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgY3VzdG9tRGV0YWlscyxcbiAgICAgICAgcHJvcG9zYWxTaGFwZVxuICAgICAgKVxuICAgICk7XG4gIH0sXG4gIGF0b21pY1JlYXJyYW5nZSh0cmFuc2ZlcnMpIHtcbiAgICB6Y2YuYXRvbWljUmVhcnJhbmdlKHRyYW5zZmVycyk7XG4gIH0sXG4gIGFzc2VydFVuaXF1ZUtleXdvcmQoa2V5d29yZCkge1xuICAgIHpjZi5hc3NlcnRVbmlxdWVLZXl3b3JkKGtleXdvcmQpO1xuICB9XG59KTtcblxuLy9cbnZhciBwcm92aWRlT3JjaGVzdHJhdGlvbiA9ICh6Y2YsIGJhZ2dhZ2UsIHJlbW90ZVBvd2VycywgbWFyc2hhbGxlciwgb3B0cyA9IHt9KSA9PiB7XG4gIGNvbnN0IHpvbmVzID0gKCgpID0+IHtcbiAgICBjb25zdCB6b25lID0gbWFrZUR1cmFibGVab25lKGJhZ2dhZ2UpO1xuICAgIHJldHVybiB7XG4gICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICBhc3luY0Zsb3c6IHpvbmUuc3ViWm9uZShcImFzeW5jRmxvd1wiKSxcbiAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgIG9yY2hlc3RyYXRpb246IHpvbmUuc3ViWm9uZShcIm9yY2hlc3RyYXRpb25cIiksXG4gICAgICAvKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgY2hhaW5IdWI6IHpvbmUuc3ViWm9uZShcImNoYWluSHViXCIpLFxuICAgICAgLyogICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgdm93czogem9uZS5zdWJab25lKFwidm93c1wiKSxcbiAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICBjb250cmFjdDogem9uZS5zdWJab25lKFwiY29udHJhY3RcIilcbiAgICB9O1xuICB9KSgpO1xuICBjb25zdCB7IGFnb3JpY05hbWVzLCB0aW1lclNlcnZpY2UsIGxvY2FsY2hhaW4gfSA9IHJlbW90ZVBvd2VycztcbiAgY29uc3Qgdm93VG9vbHMgPSBwcmVwYXJlU3dpbmdzZXRWb3dUb29scyh6b25lcy52b3dzKTtcbiAgY29uc3QgY2hhaW5IdWIgPSBtYWtlQ2hhaW5IdWIoem9uZXMuY2hhaW5IdWIsIGFnb3JpY05hbWVzLCB2b3dUb29scywge1xuICAgIGNoYWluSW5mb1ZhbHVlU2hhcGU6IG9wdHMuY2hhaW5JbmZvVmFsdWVTaGFwZVxuICB9KTtcbiAgY29uc3Qgem9lVG9vbHMgPSBtYWtlWm9lVG9vbHMoemNmLCB2b3dUb29scyk7XG4gIGNvbnN0IHpjZlRvb2xzID0gbWFrZVpjZlRvb2xzKHpjZiwgdm93VG9vbHMpO1xuICBjb25zdCB7IG1ha2VSZWNvcmRlcktpdCB9ID0gcHJlcGFyZVJlY29yZGVyS2l0TWFrZXJzKGJhZ2dhZ2UsIG1hcnNoYWxsZXIpO1xuICBjb25zdCBtYWtlTG9jYWxPcmNoZXN0cmF0aW9uQWNjb3VudEtpdCA9IHByZXBhcmVMb2NhbE9yY2hlc3RyYXRpb25BY2NvdW50S2l0KFxuICAgIHpvbmVzLm9yY2hlc3RyYXRpb24sXG4gICAge1xuICAgICAgbWFrZVJlY29yZGVyS2l0LFxuICAgICAgemNmLFxuICAgICAgdGltZXJTZXJ2aWNlLFxuICAgICAgdm93VG9vbHMsXG4gICAgICBjaGFpbkh1YixcbiAgICAgIGxvY2FsY2hhaW4sXG4gICAgICB6b2VUb29sc1xuICAgIH1cbiAgKTtcbiAgY29uc3QgYXN5bmNGbG93VG9vbHMgPSBwcmVwYXJlQXN5bmNGbG93VG9vbHMoem9uZXMuYXN5bmNGbG93LCB7XG4gICAgdm93VG9vbHNcbiAgfSk7XG4gIGNvbnN0IG1ha2VDb3Ntb3NPcmNoZXN0cmF0aW9uQWNjb3VudCA9IHByZXBhcmVDb3Ntb3NPcmNoZXN0cmF0aW9uQWNjb3VudChcbiAgICB6b25lcy5vcmNoZXN0cmF0aW9uLFxuICAgIHtcbiAgICAgIGNoYWluSHViLFxuICAgICAgbWFrZVJlY29yZGVyS2l0LFxuICAgICAgdGltZXJTZXJ2aWNlLFxuICAgICAgdm93VG9vbHMsXG4gICAgICB6Y2ZcbiAgICB9XG4gICk7XG4gIGNvbnN0IG1ha2VSZW1vdGVDaGFpbkZhY2FkZSA9IHByZXBhcmVSZW1vdGVDaGFpbkZhY2FkZSh6b25lcy5vcmNoZXN0cmF0aW9uLCB7XG4gICAgbWFrZUNvc21vc09yY2hlc3RyYXRpb25BY2NvdW50LFxuICAgIG9yY2hlc3RyYXRpb246IHJlbW90ZVBvd2Vycy5vcmNoZXN0cmF0aW9uU2VydmljZSxcbiAgICBzdG9yYWdlTm9kZTogcmVtb3RlUG93ZXJzLnN0b3JhZ2VOb2RlLFxuICAgIHRpbWVyOiByZW1vdGVQb3dlcnMudGltZXJTZXJ2aWNlLFxuICAgIHZvd1Rvb2xzXG4gIH0pO1xuICBjb25zdCBtYWtlTG9jYWxDaGFpbkZhY2FkZSA9IHByZXBhcmVMb2NhbENoYWluRmFjYWRlKHpvbmVzLm9yY2hlc3RyYXRpb24sIHtcbiAgICBtYWtlTG9jYWxPcmNoZXN0cmF0aW9uQWNjb3VudEtpdCxcbiAgICBsb2NhbGNoYWluOiByZW1vdGVQb3dlcnMubG9jYWxjaGFpbixcbiAgICAvL1xuICAgIHN0b3JhZ2VOb2RlOiByZW1vdGVQb3dlcnMuc3RvcmFnZU5vZGUsXG4gICAgYWdvcmljTmFtZXMsXG4gICAgb3JjaGVzdHJhdGlvbjogcmVtb3RlUG93ZXJzLm9yY2hlc3RyYXRpb25TZXJ2aWNlLFxuICAgIHRpbWVyOiByZW1vdGVQb3dlcnMudGltZXJTZXJ2aWNlLFxuICAgIHZvd1Rvb2xzXG4gIH0pO1xuICBjb25zdCBtYWtlT3JjaGVzdHJhdG9yID0gcHJlcGFyZU9yY2hlc3RyYXRvcih6b25lcy5vcmNoZXN0cmF0aW9uLCB7XG4gICAgY2hhaW5IdWIsXG4gICAgbWFrZUxvY2FsQ2hhaW5GYWNhZGUsXG4gICAgbWFrZVJlbW90ZUNoYWluRmFjYWRlLFxuICAgIHZvd1Rvb2xzXG4gIH0pO1xuICBjb25zdCBtYWtlT3JjaGVzdHJhdGVLaXQgPSAoem9uZSkgPT4gbWFrZU9yY2hlc3RyYXRpb25GYWNhZGUoe1xuICAgIHpvbmUsXG4gICAgemNmLFxuICAgIG1ha2VPcmNoZXN0cmF0b3IsXG4gICAgYXN5bmNGbG93VG9vbHMsXG4gICAgdm93VG9vbHMsXG4gICAgLi4ucmVtb3RlUG93ZXJzXG4gIH0pO1xuICBjb25zdCBkZWZhdWx0T3JjaGVzdHJhdGVLaXQgPSBtYWtlT3JjaGVzdHJhdGVLaXQoXG4gICAgem9uZXMuY29udHJhY3Quc3ViWm9uZShcIm9yY2hlc3RyYXRpb25cIilcbiAgKTtcbiAgemNmLnNldFRlc3RKaWcoKCkgPT4gKHtcbiAgICBiYWdnYWdlLFxuICAgIGNoYWluSHViXG4gIH0pKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5kZWZhdWx0T3JjaGVzdHJhdGVLaXQsXG4gICAgbWFrZU9yY2hlc3RyYXRlS2l0LFxuICAgIGJhZ2dhZ2UsXG4gICAgY2hhaW5IdWIsXG4gICAgdm93VG9vbHMsXG4gICAgYXN5bmNGbG93VG9vbHMsXG4gICAgemNmVG9vbHMsXG4gICAgem9lVG9vbHMsXG4gICAgem9uZTogem9uZXMuY29udHJhY3RcbiAgfTtcbn07XG5oYXJkZW4ocHJvdmlkZU9yY2hlc3RyYXRpb24pO1xudmFyIHdpdGhPcmNoZXN0cmF0aW9uID0gKGNvbnRyYWN0Rm4sIG9wdHMpID0+IGFzeW5jICh6Y2YsIHByaXZhdGVBcmdzLCBiYWdnYWdlKSA9PiB7XG4gIGNvbnN0IHsgbWFyc2hhbGxlciwgLi4uYWxsT3JjaFBvd2VycyB9ID0gcHJpdmF0ZUFyZ3M7XG4gIGNvbnN0IHsgc3RvcmFnZU5vZGU6IF8sIC4uLnJlcXVpcmVkT3JjaFBvd2VycyB9ID0gYWxsT3JjaFBvd2VycztcbiAgY29uc3QgeyBwdWJsaXNoQWNjb3VudEluZm8sIGNoYWluSW5mb1ZhbHVlU2hhcGUgfSA9IG9wdHMgPz8ge307XG4gIGNvbnN0IHsgem9uZSwgLi4udG9vbHMgfSA9IHByb3ZpZGVPcmNoZXN0cmF0aW9uKFxuICAgIHpjZixcbiAgICBiYWdnYWdlLFxuICAgIHB1Ymxpc2hBY2NvdW50SW5mbyA/IGFsbE9yY2hQb3dlcnMgOiByZXF1aXJlZE9yY2hQb3dlcnMsXG4gICAgbWFyc2hhbGxlcixcbiAgICB7IGNoYWluSW5mb1ZhbHVlU2hhcGUgfVxuICApO1xuICByZXR1cm4gY29udHJhY3RGbih6Y2YsIHByaXZhdGVBcmdzLCB6b25lLCB0b29scyk7XG59O1xuaGFyZGVuKHdpdGhPcmNoZXN0cmF0aW9uKTtcblxuLy9cbnZhciBJY3FFbmFibGVkID0gKFxuICAvKiAgICAgICAgICAgICAgICAqL1xuICB7XG4gICAgb21uaWZsaXhodWI6IHRydWUsXG4gICAgb3Ntb3NpczogdHJ1ZVxuICB9XG4pO1xuaGFyZGVuKEljcUVuYWJsZWQpO1xudmFyIFBmbUVuYWJsZWQgPSAoXG4gIC8qICAgICAgICAgICAgICAgICovXG4gIHtcbiAgICBhZ29yaWM6IHRydWUsXG4gICAgY2VsZXN0aWE6IHRydWUsXG4gICAgY29zbW9zaHViOiB0cnVlLFxuICAgIGp1bm86IHRydWUsXG4gICAgbmV1dHJvbjogdHJ1ZSxcbiAgICBub2JsZTogdHJ1ZSxcbiAgICBvbW5pZmxpeGh1YjogdHJ1ZSxcbiAgICBvc21vc2lzOiB0cnVlLFxuICAgIHNlY3JldG5ldHdvcms6IHRydWUsXG4gICAgc3RhcmdhemU6IHRydWUsXG4gICAgc3RyaWRlOiB0cnVlLFxuICAgIHVtZWU6IHRydWVcbiAgfVxuKTtcbmhhcmRlbihQZm1FbmFibGVkKTtcbnZhciBJY2FFbmFibGVkID0gKFxuICAvKiAgICAgICAgICAgICAgICAqL1xuICB7XG4gICAgY2VsZXN0aWE6IHRydWUsXG4gICAgY29zbW9zaHViOiB0cnVlLFxuICAgIGR5ZHg6IHRydWUsXG4gICAganVubzogdHJ1ZSxcbiAgICBuZXV0cm9uOiB0cnVlLFxuICAgIG5vYmxlOiB0cnVlLFxuICAgIG9tbmlmbGl4aHViOiB0cnVlLFxuICAgIG9zbW9zaXM6IHRydWUsXG4gICAgc2VjcmV0bmV0d29yazogdHJ1ZSxcbiAgICBzdGFyZ2F6ZTogdHJ1ZSxcbiAgICBzdHJpZGU6IHRydWUsXG4gICAgdW1lZTogdHJ1ZVxuICB9XG4pO1xuaGFyZGVuKEljYUVuYWJsZWQpO1xuXG4vL1xudmFyIHJlZ2lzdGVyQ2hhaW5zQW5kQXNzZXRzID0gKGNoYWluSHViLCBicmFuZHMsIGNoYWluSW5mbywgYXNzZXRJbmZvLCB7IGxvZyA9ICgpID0+IHtcbn0gfSA9IHt9KSA9PiB7XG4gIGxvZyhcImNoYWluSHViOiByZWdpc3RlcmluZyBjaGFpbnNcIiwgT2JqZWN0LmtleXMoY2hhaW5JbmZvIHx8IHt9KSk7XG4gIGlmICghY2hhaW5JbmZvKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGNvbm5zID0ge307XG4gIGZvciAoY29uc3QgW2NoYWluTmFtZSwgYWxsSW5mb10gb2YgT2JqZWN0LmVudHJpZXMoY2hhaW5JbmZvKSkge1xuICAgIGlmIChhbGxJbmZvLm5hbWVzcGFjZSA9PT0gXCJjb3Ntb3NcIikge1xuICAgICAgY29uc3QgeyBjb25uZWN0aW9ucywgLi4uaW5mbyB9ID0gYWxsSW5mbztcbiAgICAgIGNoYWluSHViLnJlZ2lzdGVyQ2hhaW4oY2hhaW5OYW1lLCBpbmZvKTtcbiAgICAgIGlmIChjb25uZWN0aW9ucykgY29ubnNbaW5mby5jaGFpbklkXSA9IGNvbm5lY3Rpb25zO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGFpbkh1Yi5yZWdpc3RlckNoYWluKGNoYWluTmFtZSwgYWxsSW5mbyk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHJlZ2lzdGVyZWRQYWlycyA9IC8qICAgICAgICAgICAqLyBuZXcgU2V0KCk7XG4gIGZvciAoY29uc3QgW3BDaGFpbklkLCBjb25uSW5mb3NdIG9mIE9iamVjdC5lbnRyaWVzKGNvbm5zKSkge1xuICAgIGZvciAoY29uc3QgW2NDaGFpbklkLCBjb25uSW5mb10gb2YgT2JqZWN0LmVudHJpZXMoY29ubkluZm9zKSkge1xuICAgICAgY29uc3QgcGFpciA9IFtwQ2hhaW5JZCwgY0NoYWluSWRdLnNvcnQoKS5qb2luKFwiPC0+XCIpO1xuICAgICAgaWYgKCFyZWdpc3RlcmVkUGFpcnMuaGFzKHBhaXIpKSB7XG4gICAgICAgIGNoYWluSHViLnJlZ2lzdGVyQ29ubmVjdGlvbihwQ2hhaW5JZCwgY0NoYWluSWQsIGNvbm5JbmZvKTtcbiAgICAgICAgcmVnaXN0ZXJlZFBhaXJzLmFkZChwYWlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbG9nKFwiY2hhaW5IdWI6IHJlZ2lzdGVyZWQgY29ubmVjdGlvbnNcIiwgWy4uLnJlZ2lzdGVyZWRQYWlyc10uc29ydCgpKTtcbiAgbG9nKFxuICAgIFwiY2hhaW5IdWI6IHJlZ2lzdGVyaW5nIGFzc2V0c1wiLFxuICAgIGFzc2V0SW5mbz8ubWFwKChbZGVub20sIHsgY2hhaW5OYW1lIH1dKSA9PiBgJHtjaGFpbk5hbWV9OiAke2Rlbm9tfWApXG4gICk7XG4gIGlmICghYXNzZXRJbmZvKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAoY29uc3QgW2Rlbm9tLCBpbmZvXSBvZiBhc3NldEluZm8pIHtcbiAgICBjb25zdCB7IGJyYW5kS2V5LCAuLi5yZXN0IH0gPSBpbmZvO1xuICAgIGNvbnN0IGluZm9XaXRoQnJhbmQgPSBicmFuZEtleSA/IHsgLi4ucmVzdCwgYnJhbmQ6IGJyYW5kc1ticmFuZEtleV0gfSA6IHJlc3Q7XG4gICAgY2hhaW5IdWIucmVnaXN0ZXJBc3NldChkZW5vbSwgaW5mb1dpdGhCcmFuZCk7XG4gIH1cbn07XG5cbi8vXG52YXIgWWllbGRQcm90b2NvbCA9IChcbiAgLyogICAgICAgICAgICAgICAgKi9cbiAge1xuICAgIEFhdmU6IFwiQWF2ZVwiLFxuICAgIENvbXBvdW5kOiBcIkNvbXBvdW5kXCIsXG4gICAgVVNETjogXCJVU0ROXCJcbiAgfVxuKTtcbmhhcmRlbihZaWVsZFByb3RvY29sKTtcbnZhciBBeGVsYXJDaGFpbiA9IChcbiAgLyogICAgICAgICAgICAgICAgKi9cbiAge1xuICAgIEV0aGVyZXVtOiBcIkV0aGVyZXVtXCIsXG4gICAgQXZhbGFuY2hlOiBcIkF2YWxhbmNoZVwiLFxuICAgIEFyYml0cnVtOiBcIkFyYml0cnVtXCIsXG4gICAgT3B0aW1pc206IFwiT3B0aW1pc21cIixcbiAgICBQb2x5Z29uOiBcIlBvbHlnb25cIixcbiAgICBGYW50b206IFwiRmFudG9tXCIsXG4gICAgQmluYW5jZTogXCJCaW5hbmNlXCJcbiAgfVxuKTtcbmhhcmRlbihBeGVsYXJDaGFpbik7XG52YXIgU3VwcG9ydGVkQ2hhaW4gPSAoXG4gIC8qICAgICAgICAgICAgICAgICovXG4gIHtcbiAgICAuLi5BeGVsYXJDaGFpbixcbiAgICBhZ29yaWM6IFwiYWdvcmljXCIsXG4gICAgbm9ibGU6IFwibm9ibGVcIlxuICAgIC8vXG4gIH1cbik7XG5oYXJkZW4oU3VwcG9ydGVkQ2hhaW4pO1xudmFyIFJlYmFsYW5jZVN0cmF0ZWd5ID0gKFxuICAvKiAgICAgICAgICAgICAgICAqL1xuICB7XG4gICAgLypcblxuXG4gICAgICovXG4gICAgUHJlc2V0OiBcInByZXNldFwiLFxuICAgIC8qXG5cblxuICAgICAqL1xuICAgIFByZXNlcnZlRXhpc3RpbmdQcm9wb3J0aW9uczogXCJwZXBcIlxuICB9XG4pO1xuaGFyZGVuKFJlYmFsYW5jZVN0cmF0ZWd5KTtcblxuLy9cbnZhciBBeGVsYXJHTVBNZXNzYWdlVHlwZSA9IChcbiAgLyogICAgICAgICAgICAgICAgKi9cbiAge1xuICAgIENvbnRyYWN0Q2FsbDogMSxcbiAgICBDb250cmFjdENhbGxXaXRoVG9rZW46IDIsXG4gICAgVG9rZW5UcmFuc2ZlcjogM1xuICB9XG4pO1xuaGFyZGVuKEF4ZWxhckdNUE1lc3NhZ2VUeXBlKTtcblxuLy9cbmluaXRfY2h1bmtfNEVGNEsyTUgoKTtcbmluaXRfY2h1bmtfWE40TFVPSUgoKTtcbmluaXRfY2h1bmtfNFZOUzVXUE0oKTtcblxuLy9cbnZhciBtYWtlTmF0QW1vdW50U2hhcGUgPSAoYnJhbmQsIG1pbikgPT4gaGFyZGVuKHsgYnJhbmQsIHZhbHVlOiBtaW4gPyBNLmd0ZShtaW4pIDogTS5uYXQoKSB9KTtcbnZhciBtYWtlUHJvcG9zYWxTaGFwZXMgPSAodXNkY0JyYW5kLCBmZWVCcmFuZCwgYWNjZXNzQnJhbmQpID0+IHtcbiAgY29uc3QgJFNoYXBlID0gbWFrZU5hdEFtb3VudFNoYXBlKHVzZGNCcmFuZCk7XG4gIGNvbnN0IEZlZVNoYXBlID0gbWFrZU5hdEFtb3VudFNoYXBlKGZlZUJyYW5kKTtcbiAgY29uc3QgYWNjZXNzU2hhcGUgPSBhY2Nlc3NCcmFuZCA/IHsgQWNjZXNzOiBtYWtlTmF0QW1vdW50U2hhcGUoYWNjZXNzQnJhbmQsIDFuKSB9IDoge307XG4gIGNvbnN0IG9wZW5Qb3J0Zm9saW8yID0gTS5zcGxpdFJlY29yZChcbiAgICB7XG4gICAgICBnaXZlOiBNLnNwbGl0UmVjb3JkKFxuICAgICAgICBhY2Nlc3NTaGFwZSxcbiAgICAgICAgeyBEZXBvc2l0OiAkU2hhcGUsIEdtcEZlZTogRmVlU2hhcGUgfSxcbiAgICAgICAge31cbiAgICAgIClcbiAgICB9LFxuICAgIHsgd2FudDoge30sIGV4aXQ6IE0uYW55KCkgfSxcbiAgICB7fVxuICApO1xuICBjb25zdCByZWJhbGFuY2UyID0gTS5vcihcbiAgICBNLnNwbGl0UmVjb3JkKFxuICAgICAgeyBnaXZlOiBNLnNwbGl0UmVjb3JkKHt9LCB7IERlcG9zaXQ6ICRTaGFwZSwgR21wRmVlOiBGZWVTaGFwZSB9LCB7fSkgfSxcbiAgICAgIHsgd2FudDoge30sIGV4aXQ6IE0uYW55KCkgfSxcbiAgICAgIHt9XG4gICAgKSxcbiAgICBNLnNwbGl0UmVjb3JkKFxuICAgICAgeyB3YW50OiBNLnNwbGl0UmVjb3JkKHsgQ2FzaDogJFNoYXBlIH0sIHt9LCB7fSkgfSxcbiAgICAgIHsgZ2l2ZTogTS5zcGxpdFJlY29yZCh7fSwgeyBHbXBGZWU6IEZlZVNoYXBlIH0sIHt9KSwgZXhpdDogTS5hbnkoKSB9LFxuICAgICAge31cbiAgICApXG4gICk7XG4gIHJldHVybiBoYXJkZW4oeyBvcGVuUG9ydGZvbGlvOiBvcGVuUG9ydGZvbGlvMiwgcmViYWxhbmNlOiByZWJhbGFuY2UyIH0pO1xufTtcbmhhcmRlbihtYWtlUHJvcG9zYWxTaGFwZXMpO1xudmFyIFBvb2xQbGFjZXMgPSB7XG4gIFVTRE46IHsgcHJvdG9jb2w6IFwiVVNETlwiLCB2YXVsdDogbnVsbCwgY2hhaW5OYW1lOiBcIm5vYmxlXCIgfSxcbiAgLy9cbiAgVVNETlZhdWx0OiB7IHByb3RvY29sOiBcIlVTRE5cIiwgdmF1bHQ6IDEsIGNoYWluTmFtZTogXCJub2JsZVwiIH0sXG4gIC8vXG4gIEFhdmVfRXRoZXJldW06IHsgcHJvdG9jb2w6IFwiQWF2ZVwiLCBjaGFpbk5hbWU6IFwiRXRoZXJldW1cIiB9LFxuICBBYXZlX0F2YWxhbmNoZTogeyBwcm90b2NvbDogXCJBYXZlXCIsIGNoYWluTmFtZTogXCJBdmFsYW5jaGVcIiB9LFxuICBBYXZlX09wdGltaXNtOiB7IHByb3RvY29sOiBcIkFhdmVcIiwgY2hhaW5OYW1lOiBcIk9wdGltaXNtXCIgfSxcbiAgQWF2ZV9BcmJpdHJ1bTogeyBwcm90b2NvbDogXCJBYXZlXCIsIGNoYWluTmFtZTogXCJBcmJpdHJ1bVwiIH0sXG4gIEFhdmVfUG9seWdvbjogeyBwcm90b2NvbDogXCJBYXZlXCIsIGNoYWluTmFtZTogXCJQb2x5Z29uXCIgfSxcbiAgQWF2ZV9GYW50b206IHsgcHJvdG9jb2w6IFwiQWF2ZVwiLCBjaGFpbk5hbWU6IFwiRmFudG9tXCIgfSxcbiAgQWF2ZV9CaW5hbmNlOiB7IHByb3RvY29sOiBcIkFhdmVcIiwgY2hhaW5OYW1lOiBcIkJpbmFuY2VcIiB9LFxuICBDb21wb3VuZF9FdGhlcmV1bTogeyBwcm90b2NvbDogXCJDb21wb3VuZFwiLCBjaGFpbk5hbWU6IFwiRXRoZXJldW1cIiB9LFxuICBDb21wb3VuZF9BdmFsYW5jaGU6IHsgcHJvdG9jb2w6IFwiQ29tcG91bmRcIiwgY2hhaW5OYW1lOiBcIkF2YWxhbmNoZVwiIH0sXG4gIENvbXBvdW5kX09wdGltaXNtOiB7IHByb3RvY29sOiBcIkNvbXBvdW5kXCIsIGNoYWluTmFtZTogXCJPcHRpbWlzbVwiIH0sXG4gIENvbXBvdW5kX0FyYml0cnVtOiB7IHByb3RvY29sOiBcIkNvbXBvdW5kXCIsIGNoYWluTmFtZTogXCJBcmJpdHJ1bVwiIH0sXG4gIENvbXBvdW5kX1BvbHlnb246IHsgcHJvdG9jb2w6IFwiQ29tcG91bmRcIiwgY2hhaW5OYW1lOiBcIlBvbHlnb25cIiB9LFxuICBDb21wb3VuZF9GYW50b206IHsgcHJvdG9jb2w6IFwiQ29tcG91bmRcIiwgY2hhaW5OYW1lOiBcIkZhbnRvbVwiIH0sXG4gIENvbXBvdW5kX0JpbmFuY2U6IHsgcHJvdG9jb2w6IFwiQ29tcG91bmRcIiwgY2hhaW5OYW1lOiBcIkJpbmFuY2VcIiB9XG59O1xuaGFyZGVuKFBvb2xQbGFjZXMpO1xudmFyIG1ha2VQb3J0Zm9saW9QYXRoID0gKGlkKSA9PiBbYHBvcnRmb2xpbyR7aWR9YF07XG52YXIgUG9vbEtleVNoYXBlID0gTS5zdHJpbmcoKTtcbnZhciBQb3J0Zm9saW9TdGF0dXNTaGFwZSA9IE0uc3BsaXRSZWNvcmQoe1xuICBwb3NpdGlvbktleXM6IE0uYXJyYXlPZihQb29sS2V5U2hhcGUpLFxuICBmbG93Q291bnQ6IE0ubmF0KCksXG4gIGFjY291bnRJZEJ5Q2hhaW46IE0ucmVjb3JkT2YoXG4gICAgTS5vcihcImFnb3JpY1wiLCBcIm5vYmxlXCIpLFxuICAgIC8vXG4gICAgTS5zdHJpbmcoKVxuICAgIC8vXG4gIClcbn0pO1xudmFyIG1ha2VQb3NpdGlvblBhdGggPSAocGFyZW50LCBrZXkpID0+IFtcbiAgYHBvcnRmb2xpbyR7cGFyZW50fWAsXG4gIFwicG9zaXRpb25zXCIsXG4gIGtleVxuXTtcbnZhciBQb3NpdGlvblN0YXR1c1NoYXBlID0gTS5zcGxpdFJlY29yZCh7XG4gIHByb3RvY29sOiBNLm9yKFwiVVNETlwiLCBcIkFhdmVcIiwgXCJDb21wb3VuZFwiKSxcbiAgLy9cbiAgYWNjb3VudElkOiBNLnN0cmluZygpLFxuICAvL1xuICBuZXRUcmFuc2ZlcnM6IEFueU5hdEFtb3VudFNoYXBlLFxuICAvL1xuICB0b3RhbEluOiBBbnlOYXRBbW91bnRTaGFwZSxcbiAgdG90YWxPdXQ6IEFueU5hdEFtb3VudFNoYXBlXG59KTtcbnZhciBtYWtlRmxvd1BhdGggPSAocGFyZW50LCBpZCkgPT4gW1xuICBgcG9ydGZvbGlvJHtwYXJlbnR9YCxcbiAgXCJmbG93c1wiLFxuICBgZmxvdyR7aWR9YFxuXTtcbnZhciBGbG93U3RhdHVzU2hhcGUgPSBNLnNwbGl0UmVjb3JkKFxuICB7XG4gICAgc3RlcDogTS5uYXQoKSxcbiAgICBob3c6IE0uc3RyaW5nKCksXG4gICAgc3JjOiBNLnN0cmluZygpLFxuICAgIGRlc3Q6IE0uc3RyaW5nKCksXG4gICAgYW1vdW50OiBBbnlOYXRBbW91bnRTaGFwZVxuICB9LFxuICB7XG4gICAgd2hlcmU6IE0uc3RyaW5nKCksXG4gICAgZXJyb3I6IE0uc3RyaW5nKClcbiAgfVxuKTtcblxuLy9cbnZhciB7IGFzc2lnbjogYXNzaWduNSB9ID0gT2JqZWN0O1xudmFyIHsgYWRkOiBhZGQzLCBzdWJ0cmFjdDogc3VidHJhY3QzIH0gPSBBbW91bnRNYXRoO1xudmFyIHJlY29yZFRyYW5zZmVySW4gPSAoYW1vdW50LCBzdGF0ZSwgcG9zaXRpb24pID0+IHtcbiAgY29uc3QgeyBuZXRUcmFuc2ZlcnMsIHRvdGFsSW4gfSA9IHN0YXRlO1xuICBhc3NpZ241KHN0YXRlLCB7XG4gICAgbmV0VHJhbnNmZXJzOiBhZGQzKG5ldFRyYW5zZmVycywgYW1vdW50KSxcbiAgICB0b3RhbEluOiBhZGQzKHRvdGFsSW4sIGFtb3VudClcbiAgfSk7XG4gIHBvc2l0aW9uLnB1Ymxpc2hTdGF0dXMoKTtcbiAgcmV0dXJuIHN0YXRlLm5ldFRyYW5zZmVycztcbn07XG52YXIgcmVjb3JkVHJhbnNmZXJPdXQgPSAoYW1vdW50LCBzdGF0ZSwgcG9zaXRpb24pID0+IHtcbiAgY29uc3QgeyBuZXRUcmFuc2ZlcnMsIHRvdGFsT3V0IH0gPSBzdGF0ZTtcbiAgYXNzaWduNShzdGF0ZSwge1xuICAgIG5ldFRyYW5zZmVyczogc3VidHJhY3QzKG5ldFRyYW5zZmVycywgYW1vdW50KSxcbiAgICB0b3RhbE91dDogYWRkMyh0b3RhbE91dCwgYW1vdW50KVxuICB9KTtcbiAgcG9zaXRpb24ucHVibGlzaFN0YXR1cygpO1xuICByZXR1cm4gc3RhdGUubmV0VHJhbnNmZXJzO1xufTtcbnZhciBwcmVwYXJlUG9zaXRpb24gPSAoem9uZSwgZW1wdHlUcmFuc2ZlclN0YXRlLCBwdWJsaXNoU3RhdHVzKSA9PiB6b25lLmV4b0NsYXNzKFxuICBcIlBvc2l0aW9uXCIsXG4gIHZvaWQgMCxcbiAgLy9cbiAgKHBvcnRmb2xpb0lkLCBwb29sS2V5LCBwcm90b2NvbCwgYWNjb3VudElkKSA9PiAoe1xuICAgIHBvcnRmb2xpb0lkLFxuICAgIHByb3RvY29sLFxuICAgIC4uLmVtcHR5VHJhbnNmZXJTdGF0ZSxcbiAgICBwb29sS2V5LFxuICAgIGFjY291bnRJZFxuICB9KSxcbiAge1xuICAgIGdldFBvb2xLZXkoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5wb29sS2V5O1xuICAgIH0sXG4gICAgZ2V0WWllbGRQcm90b2NvbCgpIHtcbiAgICAgIGNvbnN0IHsgcHJvdG9jb2wgfSA9IHRoaXMuc3RhdGU7XG4gICAgICByZXR1cm4gcHJvdG9jb2w7XG4gICAgfSxcbiAgICByZWNvcmRUcmFuc2ZlckluKGFtb3VudCkge1xuICAgICAgcmV0dXJuIHJlY29yZFRyYW5zZmVySW4oYW1vdW50LCB0aGlzLnN0YXRlLCB0aGlzLnNlbGYpO1xuICAgIH0sXG4gICAgcmVjb3JkVHJhbnNmZXJPdXQoYW1vdW50KSB7XG4gICAgICByZXR1cm4gcmVjb3JkVHJhbnNmZXJPdXQoYW1vdW50LCB0aGlzLnN0YXRlLCB0aGlzLnNlbGYpO1xuICAgIH0sXG4gICAgcHVibGlzaFN0YXR1cygpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcG9ydGZvbGlvSWQsXG4gICAgICAgIHBvb2xLZXksXG4gICAgICAgIHByb3RvY29sLFxuICAgICAgICBhY2NvdW50SWQsXG4gICAgICAgIG5ldFRyYW5zZmVycyxcbiAgICAgICAgdG90YWxJbixcbiAgICAgICAgdG90YWxPdXRcbiAgICAgIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgY29uc3Qga2V5ID0gbWFrZVBvc2l0aW9uUGF0aChwb3J0Zm9saW9JZCwgcG9vbEtleSk7XG4gICAgICBjb25zdCBzdGF0dXMgPSBoYXJkZW4oe1xuICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgYWNjb3VudElkLFxuICAgICAgICBuZXRUcmFuc2ZlcnMsXG4gICAgICAgIHRvdGFsSW4sXG4gICAgICAgIHRvdGFsT3V0XG4gICAgICB9KTtcbiAgICAgIHB1Ymxpc2hTdGF0dXMoa2V5LCBzdGF0dXMpO1xuICAgIH1cbiAgfVxuKTtcblxuLy9cbnZhciB0cmFjZTExID0gbWFrZVRyYWNlcihcIlBvcnRFeG9cIik7XG52YXIgeyB2YWx1ZXM6IHZhbHVlczYgfSA9IE9iamVjdDtcbnZhciBERUNPREVfQ09OVFJBQ1RfQ0FMTF9SRVNVTFRfQUJJID0gW1xuICB7XG4gICAgdHlwZTogXCJ0dXBsZVwiLFxuICAgIGNvbXBvbmVudHM6IFtcbiAgICAgIHsgbmFtZTogXCJpc0NvbnRyYWN0Q2FsbFJlc3VsdFwiLCB0eXBlOiBcImJvb2xcIiB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcImRhdGFcIixcbiAgICAgICAgdHlwZTogXCJ0dXBsZVtdXCIsXG4gICAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAgICB7IG5hbWU6IFwic3VjY2Vzc1wiLCB0eXBlOiBcImJvb2xcIiB9LFxuICAgICAgICAgIHsgbmFtZTogXCJyZXN1bHRcIiwgdHlwZTogXCJieXRlc1wiIH1cbiAgICAgICAgXVxuICAgICAgfVxuICAgIF1cbiAgfVxuXTtcbmhhcmRlbihERUNPREVfQ09OVFJBQ1RfQ0FMTF9SRVNVTFRfQUJJKTtcbnZhciBPcmNoZXN0cmF0aW9uQWNjb3VudFNoYXBlID0gTS5yZW1vdGFibGUoXCJPcmNoZXN0cmF0aW9uQWNjb3VudFwiKTtcbnZhciBSZWFkZXJJID0gTS5pbnRlcmZhY2UoXCJyZWFkZXJcIiwge1xuICBnZXRHTVBBZGRyZXNzOiBNLmNhbGwoKS5yZXR1cm5zKE0uYW55KCkpLFxuICBnZXRMQ0E6IE0uY2FsbCgpLnJldHVybnMoT3JjaGVzdHJhdGlvbkFjY291bnRTaGFwZSksXG4gIGdldFBvc2l0aW9uczogTS5jYWxsKCkucmV0dXJucyhNLmFycmF5T2YoTS5zdHJpbmcoKSkpLFxuICBnZXRVU0ROSUNBOiBNLmNhbGwoKS5yZXR1cm5zKE9yY2hlc3RyYXRpb25BY2NvdW50U2hhcGUpXG59KTtcbnZhciBNYW5hZ2VySSA9IE0uaW50ZXJmYWNlKFwibWFuYWdlclwiLCB7XG4gIGluaXRBYXZlOiBNLmNhbGwoTS5zdHJpbmcoKSkucmV0dXJucygpLFxuICBpbml0Q29tcG91bmQ6IE0uY2FsbChNLnN0cmluZygpKS5yZXR1cm5zKCksXG4gIHdhaXQ6IE0uY2FsbChNLmJpZ2ludCgpKS5yZXR1cm5zKFZvd1NoYXBlKVxufSk7XG52YXIgYWNjb3VudElkQnlDaGFpbiA9IChhY2NvdW50cykgPT4ge1xuICBjb25zdCBieUNoYWluID0ge307XG4gIGZvciAoY29uc3QgW24yLCBpbmZvXSBvZiBhY2NvdW50cy5lbnRyaWVzKCkpIHtcbiAgICBzd2l0Y2ggKGluZm8ubmFtZXNwYWNlKSB7XG4gICAgICBjYXNlIFwiY29zbW9zXCI6XG4gICAgICAgIHN3aXRjaCAoaW5mby5jaGFpbk5hbWUpIHtcbiAgICAgICAgICBjYXNlIFwiYWdvcmljXCI6XG4gICAgICAgICAgICBieUNoYWluW24yXSA9IGNvZXJjZUFjY291bnRJZChpbmZvLmxjYS5nZXRBZGRyZXNzKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIm5vYmxlXCI6XG4gICAgICAgICAgICBieUNoYWluW24yXSA9IGNvZXJjZUFjY291bnRJZChpbmZvLmljYS5nZXRBZGRyZXNzKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZWlwMTU1XCI6XG4gICAgICAgIGJ5Q2hhaW5bbjJdID0gYCR7aW5mby5jaGFpbklkfToke2luZm8ucmVtb3RlQWRkcmVzc31gO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFzc2VydC5mYWlsKHJlZGFjdGVkYG5vIHN1Y2ggdHlwZTogJHtpbmZvfWApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaGFyZGVuKGJ5Q2hhaW4pO1xufTtcbnZhciBwcmVwYXJlUG9ydGZvbGlvS2l0ID0gKHpvbmUsIHtcbiAgYXhlbGFySWRzLFxuICByZWJhbGFuY2U6IHJlYmFsYW5jZTIsXG4gIHJlYmFsYW5jZUZyb21UcmFuc2ZlcjogcmViYWxhbmNlRnJvbVRyYW5zZmVyMixcbiAgdGltZXIsXG4gIGNoYWluSHViVG9vbHMsXG4gIHByb3Bvc2FsU2hhcGVzLFxuICBvZmZlckFyZ3NTaGFwZXMsXG4gIHZvd1Rvb2xzLFxuICB6Y2YsXG4gIHBvcnRmb2xpb3NOb2RlLFxuICBtYXJzaGFsbGVyLFxuICB1c2RjQnJhbmRcbn0pID0+IHtcbiAgY29uc3QgbWFrZVBhdGhOb2RlID0gKHBhdGgpID0+IHtcbiAgICBsZXQgbm9kZSA9IHBvcnRmb2xpb3NOb2RlO1xuICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBwYXRoKSB7XG4gICAgICBub2RlID0gRShub2RlKS5tYWtlQ2hpbGROb2RlKHNlZ21lbnQpO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcbiAgY29uc3QgcHVibGlzaFN0YXR1cyA9IChwYXRoLCBzdGF0dXMpID0+IHtcbiAgICBjb25zdCBub2RlID0gbWFrZVBhdGhOb2RlKHBhdGgpO1xuICAgIHZvaWQgRS53aGVuKFxuICAgICAgRShtYXJzaGFsbGVyKS50b0NhcERhdGEoc3RhdHVzKSxcbiAgICAgIChjYXBEYXRhKSA9PiBFKG5vZGUpLnNldFZhbHVlKEpTT04uc3RyaW5naWZ5KGNhcERhdGEpKVxuICAgICk7XG4gIH07XG4gIGNvbnN0IHVzZGNFbXB0eSA9IEFtb3VudE1hdGgubWFrZUVtcHR5KHVzZGNCcmFuZCk7XG4gIGNvbnN0IGVtcHR5VHJhbnNmZXJTdGF0ZSA9IGhhcmRlbih7XG4gICAgdG90YWxJbjogdXNkY0VtcHR5LFxuICAgIHRvdGFsT3V0OiB1c2RjRW1wdHksXG4gICAgbmV0VHJhbnNmZXJzOiB1c2RjRW1wdHlcbiAgfSk7XG4gIGNvbnN0IG1ha2VQb3NpdGlvbiA9IHByZXBhcmVQb3NpdGlvbih6b25lLCBlbXB0eVRyYW5zZmVyU3RhdGUsIHB1Ymxpc2hTdGF0dXMpO1xuICByZXR1cm4gem9uZS5leG9DbGFzc0tpdChcbiAgICBcIlBvcnRmb2xpb1wiLFxuICAgIHZvaWQgMCxcbiAgICAoeyBwb3J0Zm9saW9JZCB9KSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwb3J0Zm9saW9JZCxcbiAgICAgICAgbmV4dEZsb3dJZDogMSxcbiAgICAgICAgYWNjb3VudHM6IHpvbmUuZGV0YWNoZWQoKS5tYXBTdG9yZShcImFjY291bnRzXCIsIHtcbiAgICAgICAgICBrZXlTaGFwZTogTS5zdHJpbmcoKSxcbiAgICAgICAgICB2YWx1ZVNoYXBlOiBNLm9yKFxuICAgICAgICAgICAgTS5yZW1vdGFibGUoXCJBY2NvdW50XCIpLFxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIE0ucmVjb3JkKClcbiAgICAgICAgICApXG4gICAgICAgIH0pLFxuICAgICAgICBhY2NvdW50c1BlbmRpbmc6IHpvbmUuZGV0YWNoZWQoKS5tYXBTdG9yZShcImFjY291bnRzUGVuZGluZ1wiKSxcbiAgICAgICAgLy9cbiAgICAgICAgcG9zaXRpb25zOiB6b25lLmRldGFjaGVkKCkubWFwU3RvcmUoXCJwb3NpdGlvbnNcIiwge1xuICAgICAgICAgIGtleVNoYXBlOiBQb29sS2V5U2hhcGUsXG4gICAgICAgICAgdmFsdWVTaGFwZTogTS5yZW1vdGFibGUoXCJQb3NpdGlvblwiKVxuICAgICAgICB9KVxuICAgICAgfTtcbiAgICB9LFxuICAgIHtcbiAgICAgIHRhcDoge1xuICAgICAgICBhc3luYyByZWNlaXZlVXBjYWxsKGV2ZW50KSB7XG4gICAgICAgICAgdHJhY2UxMShcInJlY2VpdmVVcGNhbGxcIiwgZXZlbnQpO1xuICAgICAgICAgIHJldHVybiB2b3dUb29scy53YXRjaChcbiAgICAgICAgICAgIHJlYmFsYW5jZUZyb21UcmFuc2ZlcjIoZXZlbnQucGFja2V0LCB0aGlzLmZhY2V0cyksXG4gICAgICAgICAgICB0aGlzLmZhY2V0cy5yZWJhbGFuY2VGcm9tVHJhbnNmZXJXYXRjaGVyXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlYmFsYW5jZUZyb21UcmFuc2ZlcldhdGNoZXI6IHtcbiAgICAgICAgb25SZWplY3RlZChyZWFzb24pIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJcXHUyNkEwXFx1RkUwRiByZWJhbGFuY2VGcm9tVHJhbnNmZXIgZmFpbHVyZVwiLCByZWFzb24pO1xuICAgICAgICAgIHRocm93IHJlYXNvbjtcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgb25GdWxmaWxsZWQoeyBwYXJzZWQsIGhhbmRsZWQgfSkge1xuICAgICAgICAgIGlmIChoYW5kbGVkKSB7XG4gICAgICAgICAgICB0cmFjZTExKFwicmViYWxhbmNlRnJvbVRyYW5zZmVyIGhhbmRsZWQ7IHNraXBwaW5nIEdNUCBwcm9jZXNzaW5nXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXBhcnNlZCkge1xuICAgICAgICAgICAgdHJhY2UxMShcIkdNUCBwcm9jZXNzaW5nIHNraXBwZWQ7IG5vIHBhcnNlZCBpbmJvdW5kIHRyYW5zZmVyXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB7IGV4dHJhIH0gPSBwYXJzZWQ7XG4gICAgICAgICAgaWYgKCFleHRyYS5tZW1vKSByZXR1cm47XG4gICAgICAgICAgY29uc3QgbWVtbyA9IEpTT04ucGFyc2UoZXh0cmEubWVtbyk7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gT2JqZWN0LmVudHJpZXMoYXhlbGFySWRzKS5maW5kKChbXzIsIGNoYWluSWRdKSA9PiBjaGFpbklkID09PSBtZW1vLnNvdXJjZV9jaGFpbik7XG4gICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcInVua25vd24gc291cmNlX2NoYWluXCIsIG1lbW8pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBbY2hhaW5OYW1lLCBfXSA9IHJlc3VsdDtcbiAgICAgICAgICBjb25zdCBwYXlsb2FkQnl0ZXMgPSBkZWNvZGVCYXNlNjQobWVtby5wYXlsb2FkKTtcbiAgICAgICAgICBjb25zdCBbeyBpc0NvbnRyYWN0Q2FsbFJlc3VsdCwgZGF0YSB9XSA9IGRlY29kZUFiaVBhcmFtZXRlcnMoXG4gICAgICAgICAgICBERUNPREVfQ09OVFJBQ1RfQ0FMTF9SRVNVTFRfQUJJLFxuICAgICAgICAgICAgcGF5bG9hZEJ5dGVzXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0cmFjZTExKFxuICAgICAgICAgICAgXCJyZWNlaXZlVXBjYWxsIERlY29kZWQ6XCIsXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeSh7IGlzQ29udHJhY3RDYWxsUmVzdWx0LCBkYXRhIH0pXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoaXNDb250cmFjdENhbGxSZXN1bHQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlRPRE86IEhhbmRsZSB0aGUgcmVzdWx0IG9mIHRoZSBjb250cmFjdCBjYWxsXCIsIGRhdGEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBbbWVzc2FnZV0gPSBkYXRhO1xuICAgICAgICAgICAgY29uc3QgeyBzdWNjZXNzLCByZXN1bHQ6IHJlc3VsdDIgfSA9IG1lc3NhZ2U7XG4gICAgICAgICAgICBpZiAoIXN1Y2Nlc3MpIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IFthZGRyZXNzXSA9IGRlY29kZUFiaVBhcmFtZXRlcnMoXG4gICAgICAgICAgICAgIFt7IHR5cGU6IFwiYWRkcmVzc1wiIH1dLFxuICAgICAgICAgICAgICByZXN1bHQyXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgY2hhaW5JbmZvID0gYXdhaXQgdm93VG9vbHMud2hlbihcbiAgICAgICAgICAgICAgY2hhaW5IdWJUb29scy5nZXRDaGFpbkluZm8oY2hhaW5OYW1lKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnN0IGNhaXBJZCA9IGAke2NoYWluSW5mby5uYW1lc3BhY2V9OiR7Y2hhaW5JbmZvLnJlZmVyZW5jZX1gO1xuICAgICAgICAgICAgdGhpcy5mYWNldHMubWFuYWdlci5yZXNvbHZlQWNjb3VudCh7XG4gICAgICAgICAgICAgIG5hbWVzcGFjZTogXCJlaXAxNTVcIixcbiAgICAgICAgICAgICAgY2hhaW5OYW1lLFxuICAgICAgICAgICAgICBjaGFpbklkOiBjYWlwSWQsXG4gICAgICAgICAgICAgIHJlbW90ZUFkZHJlc3M6IGFkZHJlc3NcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdHJhY2UxMShgcmVtb3RlQWRkcmVzcyAke2FkZHJlc3N9YCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRyYWNlMTEoXCJyZWNlaXZlVXBjYWxsIGNvbXBsZXRlZFwiKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlYWRlcjoge1xuICAgICAgICAvKlxuXG5cblxuXG5cblxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0TG9jYWxBY2NvdW50KCkge1xuICAgICAgICAgIGNvbnN0IHsgYWNjb3VudHMgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgY29uc3QgaW5mbyA9IGFjY291bnRzLmdldChcImFnb3JpY1wiKTtcbiAgICAgICAgICBhc3NlcnQuZXF1YWwoaW5mbz8uY2hhaW5OYW1lLCBcImFnb3JpY1wiKTtcbiAgICAgICAgICByZXR1cm4gaW5mby5sY2E7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFN0b3JhZ2VQYXRoKCkge1xuICAgICAgICAgIGNvbnN0IHsgcG9ydGZvbGlvSWQgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgY29uc3Qgbm9kZSA9IG1ha2VQYXRoTm9kZShtYWtlUG9ydGZvbGlvUGF0aChwb3J0Zm9saW9JZCkpO1xuICAgICAgICAgIHJldHVybiB2b3dUb29scy5hc1ZvdygoKSA9PiBFKG5vZGUpLmdldFBhdGgoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldFBvcnRmb2xpb0lkKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlLnBvcnRmb2xpb0lkO1xuICAgICAgICB9LFxuICAgICAgICBnZXRHTVBJbmZvKGNoYWluTmFtZSkge1xuICAgICAgICAgIGNvbnN0IHsgYWNjb3VudHMsIGFjY291bnRzUGVuZGluZyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBpZiAoYWNjb3VudHMuaGFzKGNoYWluTmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2b3dUb29scy5hc1ZvdyhcbiAgICAgICAgICAgICAgKCkgPT4gYWNjb3VudHMuZ2V0KGNoYWluTmFtZSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHsgdm93IH0gPSBhY2NvdW50c1BlbmRpbmcuZ2V0KGNoYWluTmFtZSk7XG4gICAgICAgICAgcmV0dXJuIHZvdztcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlcG9ydGVyOiB7XG4gICAgICAgIHB1Ymxpc2hTdGF0dXMoKSB7XG4gICAgICAgICAgY29uc3QgeyBwb3J0Zm9saW9JZCwgcG9zaXRpb25zLCBhY2NvdW50cywgbmV4dEZsb3dJZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBwdWJsaXNoU3RhdHVzKG1ha2VQb3J0Zm9saW9QYXRoKHBvcnRmb2xpb0lkKSwge1xuICAgICAgICAgICAgcG9zaXRpb25LZXlzOiBbLi4ucG9zaXRpb25zLmtleXMoKV0sXG4gICAgICAgICAgICBmbG93Q291bnQ6IG5leHRGbG93SWQgLSAxLFxuICAgICAgICAgICAgYWNjb3VudElkQnlDaGFpbjogYWNjb3VudElkQnlDaGFpbihhY2NvdW50cylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgYWxsb2NhdGVGbG93SWQoKSB7XG4gICAgICAgICAgY29uc3QgeyBuZXh0Rmxvd0lkIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIHRoaXMuc3RhdGUubmV4dEZsb3dJZCA9IG5leHRGbG93SWQgKyAxO1xuICAgICAgICAgIHRoaXMuZmFjZXRzLnJlcG9ydGVyLnB1Ymxpc2hTdGF0dXMoKTtcbiAgICAgICAgICByZXR1cm4gbmV4dEZsb3dJZDtcbiAgICAgICAgfSxcbiAgICAgICAgcHVibGlzaEZsb3dTdGF0dXMoaWQsIHN0YXR1cykge1xuICAgICAgICAgIGNvbnN0IHsgcG9ydGZvbGlvSWQgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgcHVibGlzaFN0YXR1cyhtYWtlRmxvd1BhdGgocG9ydGZvbGlvSWQsIGlkKSwgc3RhdHVzKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG1hbmFnZXI6IHtcbiAgICAgICAgcmVzZXJ2ZUFjY291bnQoY2hhaW5OYW1lKSB7XG4gICAgICAgICAgdHJhY2UxMShcInJlc2VydmVBY2NvdW50XCIsIGNoYWluTmFtZSk7XG4gICAgICAgICAgY29uc3QgeyBhY2NvdW50cywgYWNjb3VudHNQZW5kaW5nIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIGlmIChhY2NvdW50cy5oYXMoY2hhaW5OYW1lKSkge1xuICAgICAgICAgICAgdHJhY2UxMShcImFjY291bnRzLmhhc1wiLCBjaGFpbk5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIHZvd1Rvb2xzLmFzVm93KGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgaW5mb0FueSA9IGFjY291bnRzLmdldChjaGFpbk5hbWUpO1xuICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwoaW5mb0FueS5jaGFpbk5hbWUsIGNoYWluTmFtZSk7XG4gICAgICAgICAgICAgIGNvbnN0IGluZm8gPSBpbmZvQW55O1xuICAgICAgICAgICAgICByZXR1cm4gaW5mbztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYWNjb3VudHNQZW5kaW5nLmhhcyhjaGFpbk5hbWUpKSB7XG4gICAgICAgICAgICB0cmFjZTExKFwiYWNjb3VudHNQZW5kaW5nLmhhc1wiLCBjaGFpbk5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIGFjY291bnRzUGVuZGluZy5nZXQoY2hhaW5OYW1lKS52b3c7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHBlbmRpbmcgPSB2b3dUb29scy5tYWtlVm93S2l0KCk7XG4gICAgICAgICAgdHJhY2UxMShcImFjY291bnRzUGVuZGluZy5pbml0XCIsIGNoYWluTmFtZSk7XG4gICAgICAgICAgYWNjb3VudHNQZW5kaW5nLmluaXQoY2hhaW5OYW1lLCBwZW5kaW5nKTtcbiAgICAgICAgICB0aGlzLmZhY2V0cy5yZXBvcnRlci5wdWJsaXNoU3RhdHVzKCk7XG4gICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzb2x2ZUFjY291bnQoaW5mbykge1xuICAgICAgICAgIGNvbnN0IHsgYWNjb3VudHMsIGFjY291bnRzUGVuZGluZyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBpZiAoYWNjb3VudHNQZW5kaW5nLmhhcyhpbmZvLmNoYWluTmFtZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHZvdyA9IGFjY291bnRzUGVuZGluZy5nZXQoaW5mby5jaGFpbk5hbWUpO1xuICAgICAgICAgICAgdm93LnJlc29sdmVyLnJlc29sdmUoaW5mbyk7XG4gICAgICAgICAgICBhY2NvdW50c1BlbmRpbmcuZGVsZXRlKGluZm8uY2hhaW5OYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYWNjb3VudHMuaW5pdChpbmZvLmNoYWluTmFtZSwgaW5mbyk7XG4gICAgICAgICAgdGhpcy5mYWNldHMucmVwb3J0ZXIucHVibGlzaFN0YXR1cygpO1xuICAgICAgICB9LFxuICAgICAgICBwcm92aWRlUG9zaXRpb24ocG9vbEtleSwgcHJvdG9jb2wsIGFjY291bnRJZCkge1xuICAgICAgICAgIGNvbnN0IHsgcG9zaXRpb25zIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICAgIGlmIChwb3NpdGlvbnMuaGFzKHBvb2xLZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpb25zLmdldChwb29sS2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgeyBwb3J0Zm9saW9JZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IG1ha2VQb3NpdGlvbihcbiAgICAgICAgICAgIHBvcnRmb2xpb0lkLFxuICAgICAgICAgICAgcG9vbEtleSxcbiAgICAgICAgICAgIHByb3RvY29sLFxuICAgICAgICAgICAgYWNjb3VudElkXG4gICAgICAgICAgKTtcbiAgICAgICAgICBwb3NpdGlvbnMuaW5pdChwb29sS2V5LCBwb3NpdGlvbik7XG4gICAgICAgICAgcG9zaXRpb24ucHVibGlzaFN0YXR1cygpO1xuICAgICAgICAgIHRoaXMuZmFjZXRzLnJlcG9ydGVyLnB1Ymxpc2hTdGF0dXMoKTtcbiAgICAgICAgICByZXR1cm4gcG9zaXRpb247XG4gICAgICAgIH0sXG4gICAgICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgIHdhaXRLTFVER0UodmFsKSB7XG4gICAgICAgICAgcmV0dXJuIHZvd1Rvb2xzLndhdGNoKEUodGltZXIpLmRlbGF5KHZhbCkpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmViYWxhbmNlSGFuZGxlcjoge1xuICAgICAgICBhc3luYyBoYW5kbGUoc2VhdCwgb2ZmZXJBcmdzKSB7XG4gICAgICAgICAgbXVzdE1hdGNoMyhvZmZlckFyZ3MsIG9mZmVyQXJnc1NoYXBlcy5yZWJhbGFuY2UpO1xuICAgICAgICAgIHJldHVybiByZWJhbGFuY2UyKHNlYXQsIG9mZmVyQXJncywgdGhpcy5mYWNldHMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaW52aXRhdGlvbk1ha2Vyczoge1xuICAgICAgICBSZWJhbGFuY2UoKSB7XG4gICAgICAgICAgY29uc3QgeyByZWJhbGFuY2VIYW5kbGVyIH0gPSB0aGlzLmZhY2V0cztcbiAgICAgICAgICByZXR1cm4gemNmLm1ha2VJbnZpdGF0aW9uKFxuICAgICAgICAgICAgcmViYWxhbmNlSGFuZGxlcixcbiAgICAgICAgICAgIFwicmViYWxhbmNlXCIsXG4gICAgICAgICAgICB2b2lkIDAsXG4gICAgICAgICAgICBwcm9wb3NhbFNoYXBlcy5yZWJhbGFuY2VcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBmaW5pc2goeyBmYWNldHMgfSkge1xuICAgICAgICBmYWNldHMucmVwb3J0ZXIucHVibGlzaFN0YXR1cygpO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbn07XG5oYXJkZW4ocHJlcGFyZVBvcnRmb2xpb0tpdCk7XG5cbi8vXG52YXIgaW1wb3J0X2JlY2gzMiA9IF9fdG9FU00ocmVxdWlyZV9kaXN0KCksIDEpO1xuXG4vL1xudmFyIGJhc2VfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoYmFzZV9leHBvcnRzLCB7XG4gIGV4Y2x1ZGU6ICgpID0+IGV4Y2x1ZGUsXG4gIGV4dHJhY3Q6ICgpID0+IGV4dHJhY3QsXG4gIHBhcnNlOiAoKSA9PiBwYXJzZTIsXG4gIHBhcnNlVXJsOiAoKSA9PiBwYXJzZVVybCxcbiAgcGljazogKCkgPT4gcGljayxcbiAgc3RyaW5naWZ5OiAoKSA9PiBzdHJpbmdpZnkyLFxuICBzdHJpbmdpZnlVcmw6ICgpID0+IHN0cmluZ2lmeVVybFxufSk7XG5cbi8vXG52YXIgdG9rZW4gPSBcIiVbYS1mMC05XXsyfVwiO1xudmFyIHNpbmdsZU1hdGNoZXIgPSBuZXcgUmVnRXhwKFwiKFwiICsgdG9rZW4gKyBcIil8KFteJV0rPylcIiwgXCJnaVwiKTtcbnZhciBtdWx0aU1hdGNoZXIgPSBuZXcgUmVnRXhwKFwiKFwiICsgdG9rZW4gKyBcIikrXCIsIFwiZ2lcIik7XG5mdW5jdGlvbiBkZWNvZGVDb21wb25lbnRzKGNvbXBvbmVudHMsIHNwbGl0Mikge1xuICB0cnkge1xuICAgIHJldHVybiBbZGVjb2RlVVJJQ29tcG9uZW50KGNvbXBvbmVudHMuam9pbihcIlwiKSldO1xuICB9IGNhdGNoIHtcbiAgfVxuICBpZiAoY29tcG9uZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gY29tcG9uZW50cztcbiAgfVxuICBzcGxpdDIgPSBzcGxpdDIgfHwgMTtcbiAgY29uc3QgbGVmdCA9IGNvbXBvbmVudHMuc2xpY2UoMCwgc3BsaXQyKTtcbiAgY29uc3QgcmlnaHQgPSBjb21wb25lbnRzLnNsaWNlKHNwbGl0Mik7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwoW10sIGRlY29kZUNvbXBvbmVudHMobGVmdCksIGRlY29kZUNvbXBvbmVudHMocmlnaHQpKTtcbn1cbmZ1bmN0aW9uIGRlY29kZShpbnB1dCkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoaW5wdXQpO1xuICB9IGNhdGNoIHtcbiAgICBsZXQgdG9rZW5zID0gaW5wdXQubWF0Y2goc2luZ2xlTWF0Y2hlcikgfHwgW107XG4gICAgZm9yIChsZXQgaTMgPSAxOyBpMyA8IHRva2Vucy5sZW5ndGg7IGkzKyspIHtcbiAgICAgIGlucHV0ID0gZGVjb2RlQ29tcG9uZW50cyh0b2tlbnMsIGkzKS5qb2luKFwiXCIpO1xuICAgICAgdG9rZW5zID0gaW5wdXQubWF0Y2goc2luZ2xlTWF0Y2hlcikgfHwgW107XG4gICAgfVxuICAgIHJldHVybiBpbnB1dDtcbiAgfVxufVxuZnVuY3Rpb24gY3VzdG9tRGVjb2RlVVJJQ29tcG9uZW50KGlucHV0KSB7XG4gIGNvbnN0IHJlcGxhY2VNYXAgPSB7XG4gICAgXCIlRkUlRkZcIjogXCJcXHVGRkZEXFx1RkZGRFwiLFxuICAgIFwiJUZGJUZFXCI6IFwiXFx1RkZGRFxcdUZGRkRcIlxuICB9O1xuICBsZXQgbWF0Y2ggPSBtdWx0aU1hdGNoZXIuZXhlYyhpbnB1dCk7XG4gIHdoaWxlIChtYXRjaCkge1xuICAgIHRyeSB7XG4gICAgICByZXBsYWNlTWFwW21hdGNoWzBdXSA9IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFswXSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICBjb25zdCByZXN1bHQgPSBkZWNvZGUobWF0Y2hbMF0pO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gbWF0Y2hbMF0pIHtcbiAgICAgICAgcmVwbGFjZU1hcFttYXRjaFswXV0gPSByZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIG1hdGNoID0gbXVsdGlNYXRjaGVyLmV4ZWMoaW5wdXQpO1xuICB9XG4gIHJlcGxhY2VNYXBbXCIlQzJcIl0gPSBcIlxcdUZGRkRcIjtcbiAgY29uc3QgZW50cmllczEwID0gT2JqZWN0LmtleXMocmVwbGFjZU1hcCk7XG4gIGZvciAoY29uc3Qga2V5IG9mIGVudHJpZXMxMCkge1xuICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZShuZXcgUmVnRXhwKGtleSwgXCJnXCIpLCByZXBsYWNlTWFwW2tleV0pO1xuICB9XG4gIHJldHVybiBpbnB1dDtcbn1cbmZ1bmN0aW9uIGRlY29kZVVyaUNvbXBvbmVudChlbmNvZGVkVVJJKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RlZFVSSSAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBgZW5jb2RlZFVSSWAgdG8gYmUgb2YgdHlwZSBgc3RyaW5nYCwgZ290IGBcIiArIHR5cGVvZiBlbmNvZGVkVVJJICsgXCJgXCIpO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlbmNvZGVkVVJJKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIGN1c3RvbURlY29kZVVSSUNvbXBvbmVudChlbmNvZGVkVVJJKTtcbiAgfVxufVxuXG4vL1xuZnVuY3Rpb24gaW5jbHVkZUtleXMob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGlmIChBcnJheS5pc0FycmF5KHByZWRpY2F0ZSkpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBwcmVkaWNhdGUpIHtcbiAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwga2V5KTtcbiAgICAgIGlmIChkZXNjcmlwdG9yPy5lbnVtZXJhYmxlKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAoY29uc3Qga2V5IG9mIFJlZmxlY3Qub3duS2V5cyhvYmplY3QpKSB7XG4gICAgICBjb25zdCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIGtleSk7XG4gICAgICBpZiAoZGVzY3JpcHRvci5lbnVtZXJhYmxlKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgICAgIGlmIChwcmVkaWNhdGUoa2V5LCB2YWx1ZSwgb2JqZWN0KSkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy9cbmZ1bmN0aW9uIHNwbGl0T25GaXJzdChzdHJpbmcsIHNlcGFyYXRvcikge1xuICBpZiAoISh0eXBlb2Ygc3RyaW5nID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiBzZXBhcmF0b3IgPT09IFwic3RyaW5nXCIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIHRoZSBhcmd1bWVudHMgdG8gYmUgb2YgdHlwZSBgc3RyaW5nYFwiKTtcbiAgfVxuICBpZiAoc3RyaW5nID09PSBcIlwiIHx8IHNlcGFyYXRvciA9PT0gXCJcIikge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCBzZXBhcmF0b3JJbmRleCA9IHN0cmluZy5pbmRleE9mKHNlcGFyYXRvcik7XG4gIGlmIChzZXBhcmF0b3JJbmRleCA9PT0gLTEpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgcmV0dXJuIFtcbiAgICBzdHJpbmcuc2xpY2UoMCwgc2VwYXJhdG9ySW5kZXgpLFxuICAgIHN0cmluZy5zbGljZShzZXBhcmF0b3JJbmRleCArIHNlcGFyYXRvci5sZW5ndGgpXG4gIF07XG59XG5cbi8vXG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSAodmFsdWUpID0+IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDA7XG52YXIgc3RyaWN0VXJpRW5jb2RlID0gKHN0cmluZykgPT4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZykucmVwbGFjZUFsbCgvWyEnKCkqXS9nLCAoeCkgPT4gYCUke3guY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKX1gKTtcbnZhciBlbmNvZGVGcmFnbWVudElkZW50aWZpZXIgPSBTeW1ib2woXCJlbmNvZGVGcmFnbWVudElkZW50aWZpZXJcIik7XG5mdW5jdGlvbiBlbmNvZGVyRm9yQXJyYXlGb3JtYXQob3B0aW9ucykge1xuICBzd2l0Y2ggKG9wdGlvbnMuYXJyYXlGb3JtYXQpIHtcbiAgICBjYXNlIFwiaW5kZXhcIjoge1xuICAgICAgcmV0dXJuIChrZXkpID0+IChyZXN1bHQsIHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgICAgaWYgKHZhbHVlID09PSB2b2lkIDAgfHwgb3B0aW9ucy5za2lwTnVsbCAmJiB2YWx1ZSA9PT0gbnVsbCB8fCBvcHRpb25zLnNraXBFbXB0eVN0cmluZyAmJiB2YWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgICAgIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgXCJbXCIsIGluZGV4LCBcIl1cIl0uam9pbihcIlwiKVxuICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgW2VuY29kZShrZXksIG9wdGlvbnMpLCBcIltcIiwgZW5jb2RlKGluZGV4LCBvcHRpb25zKSwgXCJdPVwiLCBlbmNvZGUodmFsdWUsIG9wdGlvbnMpXS5qb2luKFwiXCIpXG4gICAgICAgIF07XG4gICAgICB9O1xuICAgIH1cbiAgICBjYXNlIFwiYnJhY2tldFwiOiB7XG4gICAgICByZXR1cm4gKGtleSkgPT4gKHJlc3VsdCwgdmFsdWUpID0+IHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB2b2lkIDAgfHwgb3B0aW9ucy5za2lwTnVsbCAmJiB2YWx1ZSA9PT0gbnVsbCB8fCBvcHRpb25zLnNraXBFbXB0eVN0cmluZyAmJiB2YWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgICAgIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgXCJbXVwiXS5qb2luKFwiXCIpXG4gICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgICBbZW5jb2RlKGtleSwgb3B0aW9ucyksIFwiW109XCIsIGVuY29kZSh2YWx1ZSwgb3B0aW9ucyldLmpvaW4oXCJcIilcbiAgICAgICAgXTtcbiAgICAgIH07XG4gICAgfVxuICAgIGNhc2UgXCJjb2xvbi1saXN0LXNlcGFyYXRvclwiOiB7XG4gICAgICByZXR1cm4gKGtleSkgPT4gKHJlc3VsdCwgdmFsdWUpID0+IHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB2b2lkIDAgfHwgb3B0aW9ucy5za2lwTnVsbCAmJiB2YWx1ZSA9PT0gbnVsbCB8fCBvcHRpb25zLnNraXBFbXB0eVN0cmluZyAmJiB2YWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgICAgIFtlbmNvZGUoa2V5LCBvcHRpb25zKSwgXCI6bGlzdD1cIl0uam9pbihcIlwiKVxuICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgW2VuY29kZShrZXksIG9wdGlvbnMpLCBcIjpsaXN0PVwiLCBlbmNvZGUodmFsdWUsIG9wdGlvbnMpXS5qb2luKFwiXCIpXG4gICAgICAgIF07XG4gICAgICB9O1xuICAgIH1cbiAgICBjYXNlIFwiY29tbWFcIjpcbiAgICBjYXNlIFwic2VwYXJhdG9yXCI6XG4gICAgY2FzZSBcImJyYWNrZXQtc2VwYXJhdG9yXCI6IHtcbiAgICAgIGNvbnN0IGtleVZhbHVlU2VwYXJhdG9yID0gb3B0aW9ucy5hcnJheUZvcm1hdCA9PT0gXCJicmFja2V0LXNlcGFyYXRvclwiID8gXCJbXT1cIiA6IFwiPVwiO1xuICAgICAgcmV0dXJuIChrZXkpID0+IChyZXN1bHQsIHZhbHVlKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwIHx8IG9wdGlvbnMuc2tpcE51bGwgJiYgdmFsdWUgPT09IG51bGwgfHwgb3B0aW9ucy5za2lwRW1wdHlTdHJpbmcgJiYgdmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gdmFsdWUgPT09IG51bGwgPyBcIlwiIDogdmFsdWU7XG4gICAgICAgIGlmIChyZXN1bHQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIFtbZW5jb2RlKGtleSwgb3B0aW9ucyksIGtleVZhbHVlU2VwYXJhdG9yLCBlbmNvZGUodmFsdWUsIG9wdGlvbnMpXS5qb2luKFwiXCIpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW1tyZXN1bHQsIGVuY29kZSh2YWx1ZSwgb3B0aW9ucyldLmpvaW4ob3B0aW9ucy5hcnJheUZvcm1hdFNlcGFyYXRvcildO1xuICAgICAgfTtcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgcmV0dXJuIChrZXkpID0+IChyZXN1bHQsIHZhbHVlKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwIHx8IG9wdGlvbnMuc2tpcE51bGwgJiYgdmFsdWUgPT09IG51bGwgfHwgb3B0aW9ucy5za2lwRW1wdHlTdHJpbmcgJiYgdmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgICBlbmNvZGUoa2V5LCBvcHRpb25zKVxuICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgW2VuY29kZShrZXksIG9wdGlvbnMpLCBcIj1cIiwgZW5jb2RlKHZhbHVlLCBvcHRpb25zKV0uam9pbihcIlwiKVxuICAgICAgICBdO1xuICAgICAgfTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHBhcnNlckZvckFycmF5Rm9ybWF0KG9wdGlvbnMpIHtcbiAgbGV0IHJlc3VsdDtcbiAgc3dpdGNoIChvcHRpb25zLmFycmF5Rm9ybWF0KSB7XG4gICAgY2FzZSBcImluZGV4XCI6IHtcbiAgICAgIHJldHVybiAoa2V5LCB2YWx1ZSwgYWNjdW11bGF0b3IpID0+IHtcbiAgICAgICAgcmVzdWx0ID0gL1xcWyhcXGQqKV0kLy5leGVjKGtleSk7XG4gICAgICAgIGtleSA9IGtleS5yZXBsYWNlKC9cXFtcXGQqXSQvLCBcIlwiKTtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvcltrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY2N1bXVsYXRvcltrZXldID09PSB2b2lkIDApIHtcbiAgICAgICAgICBhY2N1bXVsYXRvcltrZXldID0ge307XG4gICAgICAgIH1cbiAgICAgICAgYWNjdW11bGF0b3Jba2V5XVtyZXN1bHRbMV1dID0gdmFsdWU7XG4gICAgICB9O1xuICAgIH1cbiAgICBjYXNlIFwiYnJhY2tldFwiOiB7XG4gICAgICByZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG4gICAgICAgIHJlc3VsdCA9IC8oXFxbXSkkLy5leGVjKGtleSk7XG4gICAgICAgIGtleSA9IGtleS5yZXBsYWNlKC9cXFtdJC8sIFwiXCIpO1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjY3VtdWxhdG9yW2tleV0gPT09IHZvaWQgMCkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yW2tleV0gPSBbdmFsdWVdO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhY2N1bXVsYXRvcltrZXldID0gWy4uLmFjY3VtdWxhdG9yW2tleV0sIHZhbHVlXTtcbiAgICAgIH07XG4gICAgfVxuICAgIGNhc2UgXCJjb2xvbi1saXN0LXNlcGFyYXRvclwiOiB7XG4gICAgICByZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG4gICAgICAgIHJlc3VsdCA9IC8oOmxpc3QpJC8uZXhlYyhrZXkpO1xuICAgICAgICBrZXkgPSBrZXkucmVwbGFjZSgvOmxpc3QkLywgXCJcIik7XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgYWNjdW11bGF0b3Jba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWNjdW11bGF0b3Jba2V5XSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3Jba2V5XSA9IFt2YWx1ZV07XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGFjY3VtdWxhdG9yW2tleV0gPSBbLi4uYWNjdW11bGF0b3Jba2V5XSwgdmFsdWVdO1xuICAgICAgfTtcbiAgICB9XG4gICAgY2FzZSBcImNvbW1hXCI6XG4gICAgY2FzZSBcInNlcGFyYXRvclwiOiB7XG4gICAgICByZXR1cm4gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzQXJyYXk5ID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlLmluY2x1ZGVzKG9wdGlvbnMuYXJyYXlGb3JtYXRTZXBhcmF0b3IpO1xuICAgICAgICBjb25zdCBpc0VuY29kZWRBcnJheSA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhaXNBcnJheTkgJiYgZGVjb2RlMih2YWx1ZSwgb3B0aW9ucykuaW5jbHVkZXMob3B0aW9ucy5hcnJheUZvcm1hdFNlcGFyYXRvcik7XG4gICAgICAgIHZhbHVlID0gaXNFbmNvZGVkQXJyYXkgPyBkZWNvZGUyKHZhbHVlLCBvcHRpb25zKSA6IHZhbHVlO1xuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGlzQXJyYXk5IHx8IGlzRW5jb2RlZEFycmF5ID8gdmFsdWUuc3BsaXQob3B0aW9ucy5hcnJheUZvcm1hdFNlcGFyYXRvcikubWFwKChpdGVtKSA9PiBkZWNvZGUyKGl0ZW0sIG9wdGlvbnMpKSA6IHZhbHVlID09PSBudWxsID8gdmFsdWUgOiBkZWNvZGUyKHZhbHVlLCBvcHRpb25zKTtcbiAgICAgICAgYWNjdW11bGF0b3Jba2V5XSA9IG5ld1ZhbHVlO1xuICAgICAgfTtcbiAgICB9XG4gICAgY2FzZSBcImJyYWNrZXQtc2VwYXJhdG9yXCI6IHtcbiAgICAgIHJldHVybiAoa2V5LCB2YWx1ZSwgYWNjdW11bGF0b3IpID0+IHtcbiAgICAgICAgY29uc3QgaXNBcnJheTkgPSAvKFxcW10pJC8udGVzdChrZXkpO1xuICAgICAgICBrZXkgPSBrZXkucmVwbGFjZSgvXFxbXSQvLCBcIlwiKTtcbiAgICAgICAgaWYgKCFpc0FycmF5OSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yW2tleV0gPSB2YWx1ZSA/IGRlY29kZTIodmFsdWUsIG9wdGlvbnMpIDogdmFsdWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFycmF5VmFsdWUgPSB2YWx1ZSA9PT0gbnVsbCA/IFtdIDogZGVjb2RlMih2YWx1ZSwgb3B0aW9ucykuc3BsaXQob3B0aW9ucy5hcnJheUZvcm1hdFNlcGFyYXRvcik7XG4gICAgICAgIGlmIChhY2N1bXVsYXRvcltrZXldID09PSB2b2lkIDApIHtcbiAgICAgICAgICBhY2N1bXVsYXRvcltrZXldID0gYXJyYXlWYWx1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYWNjdW11bGF0b3Jba2V5XSA9IFsuLi5hY2N1bXVsYXRvcltrZXldLCAuLi5hcnJheVZhbHVlXTtcbiAgICAgIH07XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHJldHVybiAoa2V5LCB2YWx1ZSwgYWNjdW11bGF0b3IpID0+IHtcbiAgICAgICAgaWYgKGFjY3VtdWxhdG9yW2tleV0gPT09IHZvaWQgMCkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYWNjdW11bGF0b3Jba2V5XSA9IFsuLi5bYWNjdW11bGF0b3Jba2V5XV0uZmxhdCgpLCB2YWx1ZV07XG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gdmFsaWRhdGVBcnJheUZvcm1hdFNlcGFyYXRvcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiIHx8IHZhbHVlLmxlbmd0aCAhPT0gMSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhcnJheUZvcm1hdFNlcGFyYXRvciBtdXN0IGJlIHNpbmdsZSBjaGFyYWN0ZXIgc3RyaW5nXCIpO1xuICB9XG59XG5mdW5jdGlvbiBlbmNvZGUodmFsdWUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMuZW5jb2RlKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuc3RyaWN0ID8gc3RyaWN0VXJpRW5jb2RlKHZhbHVlKSA6IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gZGVjb2RlMih2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5kZWNvZGUpIHtcbiAgICByZXR1cm4gZGVjb2RlVXJpQ29tcG9uZW50KHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBrZXlzU29ydGVyKGlucHV0KSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgIHJldHVybiBpbnB1dC5zb3J0KCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJvYmplY3RcIikge1xuICAgIHJldHVybiBrZXlzU29ydGVyKE9iamVjdC5rZXlzKGlucHV0KSkuc29ydCgoYTIsIGIzKSA9PiBOdW1iZXIoYTIpIC0gTnVtYmVyKGIzKSkubWFwKChrZXkpID0+IGlucHV0W2tleV0pO1xuICB9XG4gIHJldHVybiBpbnB1dDtcbn1cbmZ1bmN0aW9uIHJlbW92ZUhhc2goaW5wdXQpIHtcbiAgY29uc3QgaGFzaFN0YXJ0ID0gaW5wdXQuaW5kZXhPZihcIiNcIik7XG4gIGlmIChoYXNoU3RhcnQgIT09IC0xKSB7XG4gICAgaW5wdXQgPSBpbnB1dC5zbGljZSgwLCBoYXNoU3RhcnQpO1xuICB9XG4gIHJldHVybiBpbnB1dDtcbn1cbmZ1bmN0aW9uIGdldEhhc2godXJsKSB7XG4gIGxldCBoYXNoMiA9IFwiXCI7XG4gIGNvbnN0IGhhc2hTdGFydCA9IHVybC5pbmRleE9mKFwiI1wiKTtcbiAgaWYgKGhhc2hTdGFydCAhPT0gLTEpIHtcbiAgICBoYXNoMiA9IHVybC5zbGljZShoYXNoU3RhcnQpO1xuICB9XG4gIHJldHVybiBoYXNoMjtcbn1cbmZ1bmN0aW9uIHBhcnNlVmFsdWUodmFsdWUsIG9wdGlvbnMsIHR5cGUpIHtcbiAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiB0eXBlKHZhbHVlKTtcbiAgfVxuICBpZiAob3B0aW9ucy5wYXJzZUJvb2xlYW5zICYmIHZhbHVlICE9PSBudWxsICYmICh2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBcInRydWVcIiB8fCB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBcImZhbHNlXCIpKSB7XG4gICAgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IFwidHJ1ZVwiO1xuICB9XG4gIGlmICh0eXBlID09PSBcIm51bWJlclwiICYmICFOdW1iZXIuaXNOYU4oTnVtYmVyKHZhbHVlKSkgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZS50cmltKCkgIT09IFwiXCIpKSB7XG4gICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMucGFyc2VOdW1iZXJzICYmICFOdW1iZXIuaXNOYU4oTnVtYmVyKHZhbHVlKSkgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZS50cmltKCkgIT09IFwiXCIpKSB7XG4gICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gZXh0cmFjdChpbnB1dCkge1xuICBpbnB1dCA9IHJlbW92ZUhhc2goaW5wdXQpO1xuICBjb25zdCBxdWVyeVN0YXJ0ID0gaW5wdXQuaW5kZXhPZihcIj9cIik7XG4gIGlmIChxdWVyeVN0YXJ0ID09PSAtMSkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIHJldHVybiBpbnB1dC5zbGljZShxdWVyeVN0YXJ0ICsgMSk7XG59XG5mdW5jdGlvbiBwYXJzZTIocXVlcnksIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IHtcbiAgICBkZWNvZGU6IHRydWUsXG4gICAgc29ydDogdHJ1ZSxcbiAgICBhcnJheUZvcm1hdDogXCJub25lXCIsXG4gICAgYXJyYXlGb3JtYXRTZXBhcmF0b3I6IFwiLFwiLFxuICAgIHBhcnNlTnVtYmVyczogZmFsc2UsXG4gICAgcGFyc2VCb29sZWFuczogZmFsc2UsXG4gICAgdHlwZXM6IC8qICAgICAgICAgICAqLyBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgIC4uLm9wdGlvbnNcbiAgfTtcbiAgdmFsaWRhdGVBcnJheUZvcm1hdFNlcGFyYXRvcihvcHRpb25zLmFycmF5Rm9ybWF0U2VwYXJhdG9yKTtcbiAgY29uc3QgZm9ybWF0dGVyID0gcGFyc2VyRm9yQXJyYXlGb3JtYXQob3B0aW9ucyk7XG4gIGNvbnN0IHJldHVyblZhbHVlID0gLyogICAgICAgICAgICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmICh0eXBlb2YgcXVlcnkgIT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gIH1cbiAgcXVlcnkgPSBxdWVyeS50cmltKCkucmVwbGFjZSgvXls/IyZdLywgXCJcIik7XG4gIGlmICghcXVlcnkpIHtcbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gIH1cbiAgZm9yIChjb25zdCBwYXJhbWV0ZXIgb2YgcXVlcnkuc3BsaXQoXCImXCIpKSB7XG4gICAgaWYgKHBhcmFtZXRlciA9PT0gXCJcIikge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHBhcmFtZXRlcl8gPSBvcHRpb25zLmRlY29kZSA/IHBhcmFtZXRlci5yZXBsYWNlQWxsKFwiK1wiLCBcIiBcIikgOiBwYXJhbWV0ZXI7XG4gICAgbGV0IFtrZXksIHZhbHVlXSA9IHNwbGl0T25GaXJzdChwYXJhbWV0ZXJfLCBcIj1cIik7XG4gICAgaWYgKGtleSA9PT0gdm9pZCAwKSB7XG4gICAgICBrZXkgPSBwYXJhbWV0ZXJfO1xuICAgIH1cbiAgICB2YWx1ZSA9IHZhbHVlID09PSB2b2lkIDAgPyBudWxsIDogW1wiY29tbWFcIiwgXCJzZXBhcmF0b3JcIiwgXCJicmFja2V0LXNlcGFyYXRvclwiXS5pbmNsdWRlcyhvcHRpb25zLmFycmF5Rm9ybWF0KSA/IHZhbHVlIDogZGVjb2RlMih2YWx1ZSwgb3B0aW9ucyk7XG4gICAgZm9ybWF0dGVyKGRlY29kZTIoa2V5LCBvcHRpb25zKSwgdmFsdWUsIHJldHVyblZhbHVlKTtcbiAgfVxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhyZXR1cm5WYWx1ZSkpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsICYmIG9wdGlvbnMudHlwZXNba2V5XSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgZm9yIChjb25zdCBba2V5MiwgdmFsdWUyXSBvZiBPYmplY3QuZW50cmllcyh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IG9wdGlvbnMudHlwZXNba2V5XSA/IG9wdGlvbnMudHlwZXNba2V5XS5yZXBsYWNlKFwiW11cIiwgXCJcIikgOiB2b2lkIDA7XG4gICAgICAgIHZhbHVlW2tleTJdID0gcGFyc2VWYWx1ZSh2YWx1ZTIsIG9wdGlvbnMsIHR5cGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsICYmIG9wdGlvbnMudHlwZXNba2V5XSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuVmFsdWVba2V5XSA9IE9iamVjdC52YWx1ZXModmFsdWUpLmpvaW4ob3B0aW9ucy5hcnJheUZvcm1hdFNlcGFyYXRvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVyblZhbHVlW2tleV0gPSBwYXJzZVZhbHVlKHZhbHVlLCBvcHRpb25zLCBvcHRpb25zLnR5cGVzW2tleV0pO1xuICAgIH1cbiAgfVxuICBpZiAob3B0aW9ucy5zb3J0ID09PSBmYWxzZSkge1xuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfVxuICByZXR1cm4gKG9wdGlvbnMuc29ydCA9PT0gdHJ1ZSA/IE9iamVjdC5rZXlzKHJldHVyblZhbHVlKS5zb3J0KCkgOiBPYmplY3Qua2V5cyhyZXR1cm5WYWx1ZSkuc29ydChvcHRpb25zLnNvcnQpKS5yZWR1Y2UoKHJlc3VsdCwga2V5KSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSByZXR1cm5WYWx1ZVtrZXldO1xuICAgIHJlc3VsdFtrZXldID0gQm9vbGVhbih2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSA/IGtleXNTb3J0ZXIodmFsdWUpIDogdmFsdWU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwgLyogICAgICAgICAgICovIE9iamVjdC5jcmVhdGUobnVsbCkpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5MihvYmplY3QsIG9wdGlvbnMpIHtcbiAgaWYgKCFvYmplY3QpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICBvcHRpb25zID0ge1xuICAgIGVuY29kZTogdHJ1ZSxcbiAgICBzdHJpY3Q6IHRydWUsXG4gICAgYXJyYXlGb3JtYXQ6IFwibm9uZVwiLFxuICAgIGFycmF5Rm9ybWF0U2VwYXJhdG9yOiBcIixcIixcbiAgICAuLi5vcHRpb25zXG4gIH07XG4gIHZhbGlkYXRlQXJyYXlGb3JtYXRTZXBhcmF0b3Iob3B0aW9ucy5hcnJheUZvcm1hdFNlcGFyYXRvcik7XG4gIGNvbnN0IHNob3VsZEZpbHRlciA9IChrZXkpID0+IG9wdGlvbnMuc2tpcE51bGwgJiYgaXNOdWxsT3JVbmRlZmluZWQob2JqZWN0W2tleV0pIHx8IG9wdGlvbnMuc2tpcEVtcHR5U3RyaW5nICYmIG9iamVjdFtrZXldID09PSBcIlwiO1xuICBjb25zdCBmb3JtYXR0ZXIgPSBlbmNvZGVyRm9yQXJyYXlGb3JtYXQob3B0aW9ucyk7XG4gIGNvbnN0IG9iamVjdENvcHkgPSB7fTtcbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob2JqZWN0KSkge1xuICAgIGlmICghc2hvdWxkRmlsdGVyKGtleSkpIHtcbiAgICAgIG9iamVjdENvcHlba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICBjb25zdCBrZXlzNyA9IE9iamVjdC5rZXlzKG9iamVjdENvcHkpO1xuICBpZiAob3B0aW9ucy5zb3J0ICE9PSBmYWxzZSkge1xuICAgIGtleXM3LnNvcnQob3B0aW9ucy5zb3J0KTtcbiAgfVxuICByZXR1cm4ga2V5czcubWFwKChrZXkpID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IG9iamVjdFtrZXldO1xuICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZW5jb2RlKGtleSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCAmJiBvcHRpb25zLmFycmF5Rm9ybWF0ID09PSBcImJyYWNrZXQtc2VwYXJhdG9yXCIpIHtcbiAgICAgICAgcmV0dXJuIGVuY29kZShrZXksIG9wdGlvbnMpICsgXCJbXVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlLnJlZHVjZShmb3JtYXR0ZXIoa2V5KSwgW10pLmpvaW4oXCImXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZW5jb2RlKGtleSwgb3B0aW9ucykgKyBcIj1cIiArIGVuY29kZSh2YWx1ZSwgb3B0aW9ucyk7XG4gIH0pLmZpbHRlcigoeCkgPT4geC5sZW5ndGggPiAwKS5qb2luKFwiJlwiKTtcbn1cbmZ1bmN0aW9uIHBhcnNlVXJsKHVybCwgb3B0aW9ucykge1xuICBvcHRpb25zID0ge1xuICAgIGRlY29kZTogdHJ1ZSxcbiAgICAuLi5vcHRpb25zXG4gIH07XG4gIGxldCBbdXJsXywgaGFzaDJdID0gc3BsaXRPbkZpcnN0KHVybCwgXCIjXCIpO1xuICBpZiAodXJsXyA9PT0gdm9pZCAwKSB7XG4gICAgdXJsXyA9IHVybDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHVybDogdXJsXz8uc3BsaXQoXCI/XCIpPy5bMF0gPz8gXCJcIixcbiAgICBxdWVyeTogcGFyc2UyKGV4dHJhY3QodXJsKSwgb3B0aW9ucyksXG4gICAgLi4uKG9wdGlvbnMmJiBvcHRpb25zLnBhcnNlRnJhZ21lbnRJZGVudGlmaWVyICYmIGhhc2gyID8geyBmcmFnbWVudElkZW50aWZpZXI6IGRlY29kZTIoaGFzaDIsIG9wdGlvbnMpIH0gOiB7fSlcbiAgfTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVVybChvYmplY3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IHtcbiAgICBlbmNvZGU6IHRydWUsXG4gICAgc3RyaWN0OiB0cnVlLFxuICAgIFtlbmNvZGVGcmFnbWVudElkZW50aWZpZXJdOiB0cnVlLFxuICAgIC4uLm9wdGlvbnNcbiAgfTtcbiAgY29uc3QgdXJsID0gcmVtb3ZlSGFzaChvYmplY3QudXJsKS5zcGxpdChcIj9cIilbMF0gfHwgXCJcIjtcbiAgY29uc3QgcXVlcnlGcm9tVXJsID0gZXh0cmFjdChvYmplY3QudXJsKTtcbiAgY29uc3QgcXVlcnkgPSB7XG4gICAgLi4ucGFyc2UyKHF1ZXJ5RnJvbVVybCwgeyBzb3J0OiBmYWxzZSB9KSxcbiAgICAuLi5vYmplY3QucXVlcnlcbiAgfTtcbiAgbGV0IHF1ZXJ5U3RyaW5nID0gc3RyaW5naWZ5MihxdWVyeSwgb3B0aW9ucyk7XG4gIHF1ZXJ5U3RyaW5nICYmPSBgPyR7cXVlcnlTdHJpbmd9YDtcbiAgbGV0IGhhc2gyID0gZ2V0SGFzaChvYmplY3QudXJsKTtcbiAgaWYgKHR5cGVvZiBvYmplY3QuZnJhZ21lbnRJZGVudGlmaWVyID09PSBcInN0cmluZ1wiKSB7XG4gICAgY29uc3QgdXJsT2JqZWN0Rm9yRnJhZ21lbnRFbmNvZGUgPSBuZXcgVVJMKHVybCk7XG4gICAgdXJsT2JqZWN0Rm9yRnJhZ21lbnRFbmNvZGUuaGFzaCA9IG9iamVjdC5mcmFnbWVudElkZW50aWZpZXI7XG4gICAgaGFzaDIgPSBvcHRpb25zW2VuY29kZUZyYWdtZW50SWRlbnRpZmllcl0gPyB1cmxPYmplY3RGb3JGcmFnbWVudEVuY29kZS5oYXNoIDogYCMke29iamVjdC5mcmFnbWVudElkZW50aWZpZXJ9YDtcbiAgfVxuICByZXR1cm4gYCR7dXJsfSR7cXVlcnlTdHJpbmd9JHtoYXNoMn1gO1xufVxuZnVuY3Rpb24gcGljayhpbnB1dCwgZmlsdGVyLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSB7XG4gICAgcGFyc2VGcmFnbWVudElkZW50aWZpZXI6IHRydWUsXG4gICAgW2VuY29kZUZyYWdtZW50SWRlbnRpZmllcl06IGZhbHNlLFxuICAgIC4uLm9wdGlvbnNcbiAgfTtcbiAgY29uc3QgeyB1cmwsIHF1ZXJ5LCBmcmFnbWVudElkZW50aWZpZXIgfSA9IHBhcnNlVXJsKGlucHV0LCBvcHRpb25zKTtcbiAgcmV0dXJuIHN0cmluZ2lmeVVybCh7XG4gICAgdXJsLFxuICAgIHF1ZXJ5OiBpbmNsdWRlS2V5cyhxdWVyeSwgZmlsdGVyKSxcbiAgICBmcmFnbWVudElkZW50aWZpZXJcbiAgfSwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBleGNsdWRlKGlucHV0LCBmaWx0ZXIsIG9wdGlvbnMpIHtcbiAgY29uc3QgZXhjbHVzaW9uRmlsdGVyID0gQXJyYXkuaXNBcnJheShmaWx0ZXIpID8gKGtleSkgPT4gIWZpbHRlci5pbmNsdWRlcyhrZXkpIDogKGtleSwgdmFsdWUpID0+ICFmaWx0ZXIoa2V5LCB2YWx1ZSk7XG4gIHJldHVybiBwaWNrKGlucHV0LCBleGNsdXNpb25GaWx0ZXIsIG9wdGlvbnMpO1xufVxuXG4vL1xudmFyIHF1ZXJ5X3N0cmluZ19kZWZhdWx0ID0gYmFzZV9leHBvcnRzO1xuXG4vL1xudmFyIHI0ID0gZ2xvYmFsVGhpcy5oYXJkZW4gfHwgT2JqZWN0LmZyZWV6ZTtcbnZhciB0NCA9IFsxMjAsIDI0MSwgMTEyXTtcbnI0KHQ0KTtcbnZhciBkZWNvZGVCZWNoMzIgPSAobzIsIHQ1ID0gMTAyNCkgPT4ge1xuICBjb25zdCB7IHByZWZpeDogczMsIHdvcmRzOiBkIH0gPSBpbXBvcnRfYmVjaDMyLmJlY2gzMi5kZWNvZGUobzIsIHQ1KSwgbjIgPSBpbXBvcnRfYmVjaDMyLmJlY2gzMi5mcm9tV29yZHMoZCksIGMyID0gbmV3IFVpbnQ4QXJyYXkobjIpO1xuICByZXR1cm4gcjQoeyBwcmVmaXg6IHMzLCBieXRlczogYzIgfSk7XG59O1xucjQoZGVjb2RlQmVjaDMyKTtcbnZhciBlbmNvZGVCZWNoMzIgPSAobzIsIHI1LCB0NSA9IDEwMjQpID0+IHtcbiAgY29uc3QgczMgPSBpbXBvcnRfYmVjaDMyLmJlY2gzMi50b1dvcmRzKHI1KTtcbiAgcmV0dXJuIGltcG9ydF9iZWNoMzIuYmVjaDMyLmVuY29kZShvMiwgczMsIHQ1KTtcbn07XG5yNChlbmNvZGVCZWNoMzIpO1xudmFyIGpvaW5Ib29rZWRBZGRyZXNzID0gKGUyLCBvMiwgcjUgPSAxMDI0KSA9PiB7XG4gIGNvbnN0IHsgcHJlZml4OiBzMywgYnl0ZXM6IGQgfSA9IGRlY29kZUJlY2gzMihlMiwgcjUpLCBuMiA9IGQubGVuZ3RoLCBjMiA9IG8yLmxlbmd0aCwgYTIgPSA2NTUzNjtcbiAgaWYgKG4yID49IGEyKSB0aHJvdyBSYW5nZUVycm9yKGBCYXNlIGFkZHJlc3MgbGVuZ3RoIDB4JHtuMi50b1N0cmluZygxNil9IGV4Y2VlZHMgbWF4aW11bSAweCR7YTIudG9TdHJpbmcoMTYpfWApO1xuICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKGMyKSB8fCBjMiA8IDApIHRocm93IFJhbmdlRXJyb3IoYEhvb2sgZGF0YSBsZW5ndGggJHtjMn0gaXMgbm90IGEgbm9uLW5lZ2F0aXZlIGludGVnZXJgKTtcbiAgY29uc3QgaTMgPSB0NC5sZW5ndGgsIGggPSBuZXcgVWludDhBcnJheShpMyArIG4yICsgYzIgKyAyKTtcbiAgaC5zZXQodDQsIDApLCBoW2kzIC0gMV0gfD0gMCwgaC5zZXQoZCwgaTMpLCBoLnNldChvMiwgaTMgKyBuMik7XG4gIGxldCBnMyA9IG4yO1xuICBmb3IgKGxldCBlMyA9IDA7IGUzIDwgMjsgZTMgKz0gMSkgaFtoLmxlbmd0aCAtIDEgLSBlM10gPSAyNTUgJiBnMywgZzMgPj4+PSA4O1xuICByZXR1cm4gZW5jb2RlQmVjaDMyKHMzLCBoLCByNSk7XG59O1xucjQoam9pbkhvb2tlZEFkZHJlc3MpO1xudmFyIGVuY29kZUFkZHJlc3NIb29rID0gKGUyLCByNSwgdDUpID0+IHtcbiAgY29uc3QgczMgPSBxdWVyeV9zdHJpbmdfZGVmYXVsdC5zdHJpbmdpZnkocjUpLCBkID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGA/JHtzM31gKTtcbiAgcmV0dXJuIGpvaW5Ib29rZWRBZGRyZXNzKGUyLCBkLCB0NSk7XG59O1xucjQoZW5jb2RlQWRkcmVzc0hvb2spO1xudmFyIG11c3REZWNvZGVBZGRyZXNzSG9vayA9IChlMiwgdDUpID0+IHtcbiAgY29uc3QgeyBiYXNlQWRkcmVzczogczMsIGhvb2tEYXRhOiBkIH0gPSBzcGxpdEhvb2tlZEFkZHJlc3MoZTIsIHQ1KSwgbjIgPSBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoZCk7XG4gIGlmIChuMiAmJiAhbjIuc3RhcnRzV2l0aChcIj9cIikpIHRocm93IEVycm9yKGBIb29rIGRhdGEgZm9yICR7ZTJ9IGRvZXMgbm90IHN0YXJ0IHdpdGggJz8nOiAke3MzfSR7bjJ9YCk7XG4gIGNvbnN0IGMyID0gcXVlcnlfc3RyaW5nX2RlZmF1bHQucGFyc2UobjIpLCBhMiA9IHI0KHsgLi4uYzIgfSk7XG4gIHJldHVybiByNCh7IGJhc2VBZGRyZXNzOiBzMywgcXVlcnk6IGEyIH0pO1xufTtcbnI0KG11c3REZWNvZGVBZGRyZXNzSG9vayk7XG52YXIgZGVjb2RlQWRkcmVzc0hvb2sgPSAoZTIsIG8yKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdDUgPSBtdXN0RGVjb2RlQWRkcmVzc0hvb2soZTIsIG8yKTtcbiAgICByZXR1cm4gcjQodDUpO1xuICB9IGNhdGNoIChvMykge1xuICAgIHJldHVybiByNCh7IGJhc2VBZGRyZXNzOiBlMiwgcXVlcnk6IHt9IH0pO1xuICB9XG59O1xucjQoZGVjb2RlQWRkcmVzc0hvb2spO1xudmFyIHNwbGl0SG9va2VkQWRkcmVzcyA9IChlMiwgbzIgPSAxMDI0KSA9PiB7XG4gIGNvbnN0IHsgcHJlZml4OiBzMywgYnl0ZXM6IGQgfSA9IGRlY29kZUJlY2gzMihlMiwgbzIpLCBuMiA9IHQ0Lmxlbmd0aDtcbiAgbGV0IGMyID0gMjU1O1xuICBmb3IgKGxldCBvMyA9IDA7IG8zIDwgbjI7IG8zICs9IDEpIHtcbiAgICBsZXQgczQgPSBkW28zXTtcbiAgICBpZiAobzMgPT09IG4yIC0gMSAmJiAoYzIgPSAxNSAmIHM0LCBzNCAmPSAyNDApLCBzNCAhPT0gdDRbbzNdKSByZXR1cm4gcjQoeyBiYXNlQWRkcmVzczogZTIsIGhvb2tEYXRhOiBuZXcgVWludDhBcnJheSgpIH0pO1xuICB9XG4gIGlmICgwICE9PSBjMikgdGhyb3cgVHlwZUVycm9yKGBVbnN1cHBvcnRlZCBhZGRyZXNzIGhvb2sgdmVyc2lvbiAke2MyfWApO1xuICBsZXQgYTIgPSAwO1xuICBmb3IgKGxldCBlMyA9IDE7IGUzID49IDA7IGUzIC09IDEpIHtcbiAgICBjb25zdCBvMyA9IGQuYXQoLWUzIC0gMSk7XG4gICAgaWYgKHZvaWQgMCA9PT0gbzMpIHRocm93IFR5cGVFcnJvcihgQ2Fubm90IGdldCBiYXNlIGFkZHJlc3MgbGVuZ3RoIGZyb20gYnl0ZSAkey1lMyAtIDF9IG9mICR7ZC5sZW5ndGh9YCk7XG4gICAgYTIgPDw9IDgsIGEyIHw9IG8zO1xuICB9XG4gIGNvbnN0IGkzID0gYTI7XG4gIGlmIChpMyA+IGQubGVuZ3RoIC0gMiAtIG4yKSB0aHJvdyBUeXBlRXJyb3IoYEJhc2UgYWRkcmVzcyBsZW5ndGggMHgke2kzLnRvU3RyaW5nKDE2KX0gaXMgbG9uZ2VyIHRoYW4gc3BlY2ltZW4gbGVuZ3RoICR7ZC5sZW5ndGggLSAyIC0gbjJ9YCk7XG4gIGNvbnN0IGggPSBkLnN1YmFycmF5KG4yLCBuMiArIGkzKSwgZzMgPSBlbmNvZGVCZWNoMzIoczMsIGgsIG8yKSwgbDMgPSBkLnN1YmFycmF5KG4yICsgaTMsIC0yKTtcbiAgcmV0dXJuIHI0KHsgYmFzZUFkZHJlc3M6IGczLCBob29rRGF0YTogbDMgfSk7XG59O1xucjQoc3BsaXRIb29rZWRBZGRyZXNzKTtcblxuLy9cbnZhciBlbmNvZGluZ3MgPSBBcnJheS5mcm9tKFxuICB7IGxlbmd0aDogMjU2IH0sXG4gIChfLCBiMykgPT4gKFxuICAgIC8vXG4gICAgYjMudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKVxuICApXG4pO1xudmFyIGRlY29kaW5ncyA9IG5ldyBNYXAoXG4gIGVuY29kaW5ncy5mbGF0TWFwKChoZXhkaWdpdHMsIGIzKSA9PiB7XG4gICAgY29uc3QgbG8gPSBoZXhkaWdpdHMudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBVUCA9IGhleGRpZ2l0cy50b1VwcGVyQ2FzZSgpO1xuICAgIHJldHVybiBbXG4gICAgICBbbG8sIGIzXSxcbiAgICAgIFtgJHtsb1swXX0ke1VQWzFdfWAsIGIzXSxcbiAgICAgIFtgJHtVUFswXX0ke2xvWzFdfWAsIGIzXSxcbiAgICAgIFtVUCwgYjNdXG4gICAgXTtcbiAgfSlcbik7XG52YXIgbWFrZVBvcnRhYmxlSGV4Q29kZWMgPSAoKSA9PiB7XG4gIGNvbnN0IHBvcnRhYmxlSGV4Q29kZWMgPSB7XG4gICAgZW5jb2RlSGV4OiAoYnVmKSA9PiBBcnJheS5mcm9tKGJ1ZiwgKGIzKSA9PiBlbmNvZGluZ3NbYjNdKS5qb2luKFwiXCIpLFxuICAgIGRlY29kZUhleDogKGhleCkgPT4ge1xuICAgICAgY29uc3QgaW5wdXRMZW4gPSBoZXgubGVuZ3RoO1xuICAgICAgaWYgKGlucHV0TGVuICUgMiAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaGV4IHN0cmluZzogJHtoZXh9YCk7XG4gICAgICB9XG4gICAgICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheShpbnB1dExlbiAvIDIpO1xuICAgICAgZm9yIChsZXQgaTMgPSAwOyBpMyA8IGlucHV0TGVuOyBpMyArPSAyKSB7XG4gICAgICAgIGNvbnN0IGIzID0gZGVjb2RpbmdzLmdldChoZXguc2xpY2UoaTMsIGkzICsgMikpO1xuICAgICAgICBpZiAoYjMgPT09IHZvaWQgMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBoZXggc3RyaW5nOiAke2hleH1gKTtcbiAgICAgICAgfVxuICAgICAgICBidWZbaTMgPj4gMV0gPSBiMztcbiAgICAgIH1cbiAgICAgIHJldHVybiBidWY7XG4gICAgfVxuICB9O1xuICByZXR1cm4gcG9ydGFibGVIZXhDb2RlYztcbn07XG52YXIgbWFrZUJ1ZmZlcmlzaEhleENvZGVjID0gKEJ1ZmZlcmlzaCkgPT4ge1xuICBjb25zdCBhdHRlbnVhdGVkQnVmZmVySGV4Q29kZWMgPSB7XG4gICAgZW5jb2RlSGV4OiAoYnVmKSA9PiAoQnVmZmVyaXNoLmlzQnVmZmVyPy4oYnVmKSA/IGJ1ZiA6IEJ1ZmZlcmlzaC5mcm9tKGJ1ZikpLnRvU3RyaW5nKFwiaGV4XCIpLFxuICAgIGRlY29kZUhleDogKGhleCkgPT4ge1xuICAgICAgY29uc3QgYnVmID0gQnVmZmVyaXNoLmZyb20oaGV4LCBcImhleFwiKTtcbiAgICAgIGNvbnN0IHU4YSA9IG5ldyBVaW50OEFycmF5KFxuICAgICAgICBidWYuYnVmZmVyLFxuICAgICAgICBidWYuYnl0ZU9mZnNldCxcbiAgICAgICAgYnVmLmJ5dGVMZW5ndGggLyBVaW50OEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UXG4gICAgICApO1xuICAgICAgcmV0dXJuIHU4YTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBhdHRlbnVhdGVkQnVmZmVySGV4Q29kZWM7XG59O1xudmFyIHsgZW5jb2RlSGV4LCBkZWNvZGVIZXggfSA9IHR5cGVvZiBCdWZmZXIgPT09IFwidW5kZWZpbmVkXCIgPyBtYWtlUG9ydGFibGVIZXhDb2RlYygpIDogbWFrZUJ1ZmZlcmlzaEhleENvZGVjKEJ1ZmZlcik7XG5cbi8vXG52YXIgaW1wb3J0X2VuY29kaW5nMiA9IF9fdG9FU00ocmVxdWlyZV9idWlsZCgpLCAxKTtcbnZhciBoZXhUb0J5dGVzMiA9IChoZXgpID0+ICgwLCBpbXBvcnRfZW5jb2RpbmcyLmZyb21IZXgpKGhleC5zbGljZSgyKSk7XG52YXIgZ21wQWRkcmVzc2VzID0ge1xuICBBWEVMQVJfR01QOiBcImF4ZWxhcjFkdjR1NWs3M3B6cXJ4bHp1anhnM3FwOGt2YzNwamU3anRkdnU3Mm5wbnQ1emhxMDVlamNzbjVxbWU1XCIsXG4gIEFYRUxBUl9HQVM6IFwiYXhlbGFyMXpsM3J4cHA3MGxtdGUyeHI2YzRsZ3NrZTJmeXVqM2h1cGNzdmNkXCIsXG4gIE9TTU9TSVNfUkVDRUlWRVI6IFwib3NtbzF5aDNyYThlYWdlNXh0cjlhM201dXRnNm14MHBtcXJleXR1ZGFxalwiXG59O1xudmFyIGNvbnN0cnVjdENvbnRyYWN0Q2FsbCA9ICh7IHRhcmdldCwgZnVuY3Rpb25TaWduYXR1cmUsIGFyZ3MgfSkgPT4ge1xuICBjb25zdCBbbmFtZSwgcGFyYW1zUmF3XSA9IGZ1bmN0aW9uU2lnbmF0dXJlLnNwbGl0KFwiKFwiKTtcbiAgY29uc3QgcGFyYW1zID0gcGFyYW1zUmF3LnJlcGxhY2UoXCIpXCIsIFwiXCIpLnNwbGl0KFwiLFwiKS5maWx0ZXIoQm9vbGVhbik7XG4gIHJldHVybiB7XG4gICAgdGFyZ2V0LFxuICAgIGRhdGE6IGVuY29kZUZ1bmN0aW9uRGF0YSh7XG4gICAgICBhYmk6IFtcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIGlucHV0czogcGFyYW1zLm1hcCgodHlwZSwgaTMpID0+ICh7IHR5cGUsIG5hbWU6IGBhcmcke2kzfWAgfSkpXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBmdW5jdGlvbk5hbWU6IG5hbWUsXG4gICAgICBhcmdzXG4gICAgfSlcbiAgfTtcbn07XG52YXIgYnVpbGRHTVBQYXlsb2FkID0gKGNvbnRyYWN0Q2FsbHMpID0+IHtcbiAgY29uc3QgYWJpRW5jb2RlZENvbnRyYWN0Q2FsbHMgPSBbXTtcbiAgZm9yIChjb25zdCBjYWxsIG9mIGNvbnRyYWN0Q2FsbHMpIHtcbiAgICBjb25zdCB7IHRhcmdldCwgZnVuY3Rpb25TaWduYXR1cmUsIGFyZ3MgfSA9IGNhbGw7XG4gICAgYWJpRW5jb2RlZENvbnRyYWN0Q2FsbHMucHVzaChcbiAgICAgIGNvbnN0cnVjdENvbnRyYWN0Q2FsbCh7IHRhcmdldCwgZnVuY3Rpb25TaWduYXR1cmUsIGFyZ3MgfSlcbiAgICApO1xuICB9XG4gIGNvbnN0IGFiaUVuY29kZWREYXRhID0gZW5jb2RlQWJpUGFyYW1ldGVycyhcbiAgICBbXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwidHVwbGVbXVwiLFxuICAgICAgICBjb21wb25lbnRzOiBbXG4gICAgICAgICAgeyBuYW1lOiBcInRhcmdldFwiLCB0eXBlOiBcImFkZHJlc3NcIiB9LFxuICAgICAgICAgIHsgbmFtZTogXCJkYXRhXCIsIHR5cGU6IFwiYnl0ZXNcIiB9XG4gICAgICAgIF1cbiAgICAgIH1cbiAgICBdLFxuICAgIFthYmlFbmNvZGVkQ29udHJhY3RDYWxsc11cbiAgKTtcbiAgcmV0dXJuIEFycmF5LmZyb20oaGV4VG9CeXRlczIoYWJpRW5jb2RlZERhdGEpKTtcbn07XG5cbi8vXG52YXIgaW1wb3J0X2VuY29kaW5nMyA9IF9fdG9FU00ocmVxdWlyZV9idWlsZDIoKSwgMSk7XG5cbi8vXG52YXIgRVJDMjAgPSB7XG4gIGFwcHJvdmU6IFtcImFkZHJlc3NcIiwgXCJ1aW50MjU2XCJdXG59O1xudmFyIG1ha2VFVk1TZXNzaW9uID0gKCkgPT4ge1xuICBjb25zdCBjYWxscyA9IFtdO1xuICBjb25zdCBmaW5pc2ggPSAoKSA9PiBoYXJkZW4oY2FsbHMpO1xuICBjb25zdCBtYWtlQ29udHJhY3QgPSAodGFyZ2V0LCBpZmFjZSkgPT4ge1xuICAgIGNvbnN0IHN0dWJzID0ge307XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5rZXlzKGlmYWNlKSkge1xuICAgICAgY29uc3QgcHMgPSBpZmFjZVtuYW1lXTtcbiAgICAgIGNvbnN0IGZ1bmN0aW9uU2lnbmF0dXJlID0gYCR7bmFtZX0oJHtwcy5qb2luKFwiLFwiKX0pYDtcbiAgICAgIGNvbnN0IGZuID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgY2FsbHMucHVzaCh7IHRhcmdldCwgYXJncywgZnVuY3Rpb25TaWduYXR1cmUgfSk7XG4gICAgICB9O1xuICAgICAgc3R1YnNbbmFtZV0gPSBmbjtcbiAgICB9XG4gICAgcmV0dXJuIGhhcmRlbihzdHVicyk7XG4gIH07XG4gIHJldHVybiBoYXJkZW4oe1xuICAgIG1ha2VDb250cmFjdCxcbiAgICBmaW5pc2hcbiAgfSk7XG59O1xuXG4vL1xudmFyIGltcG9ydF9iZWNoMzIyID0gX190b0VTTShyZXF1aXJlX2Rpc3QoKSwgMSk7XG52YXIgbWFrZVRlc3RBZGRyZXNzID0gKGluZGV4ID0gMCwgcHJlZml4ID0gXCJhZ29yaWNcIiwgYnl0ZUxlbmd0aCA9IDIwKSA9PiB7XG4gIGNvbnN0IGJ5dGVzMiA9IG5ldyBVaW50OEFycmF5KGJ5dGVMZW5ndGgpLmZpbGwoMCk7XG4gIGlmIChpbmRleCAhPT0gMCkgYnl0ZXMyWzBdID0gTnVtYmVyKGluZGV4KTtcbiAgY29uc3Qgd29yZHMgPSBpbXBvcnRfYmVjaDMyMi5iZWNoMzIudG9Xb3JkcyhieXRlczIpO1xuICByZXR1cm4gKFxuICAgIC8qICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICBpbXBvcnRfYmVjaDMyMi5iZWNoMzIuZW5jb2RlKHByZWZpeCwgd29yZHMpXG4gICk7XG59O1xuXG4vL1xudmFyIHRyYWNlMTIgPSBtYWtlVHJhY2VyKFwiR01QRlwiKTtcbnZhciB7IGtleXM6IGtleXMzIH0gPSBPYmplY3Q7XG52YXIgcHJvdmlkZUVWTUFjY291bnQgPSBhc3luYyAoY2hhaW5OYW1lLCBnbXAsIGxjYSwgY3R4LCBwaykgPT4ge1xuICBjb25zdCBmb3VuZCA9IHBrLm1hbmFnZXIucmVzZXJ2ZUFjY291bnQoY2hhaW5OYW1lKTtcbiAgaWYgKGZvdW5kKSB7XG4gICAgcmV0dXJuIGZvdW5kO1xuICB9XG4gIGNvbnN0IGF4ZWxhcklkID0gZ21wLmF4ZWxhcklkc1tjaGFpbk5hbWVdO1xuICBjb25zdCB0YXJnZXQgPSB7IGF4ZWxhcklkLCByZW1vdGVBZGRyZXNzOiBjdHguY29udHJhY3RzW2NoYWluTmFtZV0uZmFjdG9yeSB9O1xuICBjb25zdCBmZWUgPSB7IGRlbm9tOiBjdHguZ21wRmVlSW5mby5kZW5vbSwgdmFsdWU6IGdtcC5mZWUgfTtcbiAgYXdhaXQgc2VuZEdNUENvbnRyYWN0Q2FsbCh0YXJnZXQsIFtdLCBmZWUsIGxjYSwgZ21wLmNoYWluKTtcbiAgcmV0dXJuIHBrLnJlYWRlci5nZXRHTVBJbmZvKGNoYWluTmFtZSk7XG59O1xudmFyIFRva2VuTWVzc2VuZ2VyID0ge1xuICBkZXBvc2l0Rm9yQnVybjogW1widWludDI1NlwiLCBcInVpbnQzMlwiLCBcImJ5dGVzMzJcIiwgXCJhZGRyZXNzXCJdXG59O1xudmFyIG5vYmxlRG9tYWluID0gNDtcbnZhciBiZWNoMzJUb0J5dGVzMzIgPSAoYWRkcikgPT4ge1xuICBpZiAoYWRkciA9PT0gXCJjb3Ntb3MxdGVzdFwiKSB7XG4gICAgdHJhY2UxMihcIlhYWCByZXBsYWNpbmcgdGVzdCBhZGRyZXNzIHRvIGNvbnZlcnQgdG8gYnl0ZXMzMlwiKTtcbiAgICBhZGRyID0gbWFrZVRlc3RBZGRyZXNzKDMsIFwibm9ibGVcIik7XG4gIH1cbiAgY29uc3QgeyBkYXRhIH0gPSAoMCwgaW1wb3J0X2VuY29kaW5nMy5mcm9tQmVjaDMyKShhZGRyKTtcbiAgY29uc3QgZGggPSBlbmNvZGVIZXgoZGF0YSk7XG4gIGNvbnN0IHplcm9lc05lZWRlZCA9IDY0IC0gZGgubGVuZ3RoO1xuICBjb25zdCBwYWRkZWRBZGRyZXNzID0gXCIwXCIucmVwZWF0KHplcm9lc05lZWRlZCkgKyBkaDtcbiAgY29uc3QgYnMgPSBgMHgke3BhZGRlZEFkZHJlc3N9YDtcbiAgcmV0dXJuIGJzO1xufTtcbnZhciBDQ1RQZnJvbUVWTSA9IHtcbiAgaG93OiBcIkNDVFBcIixcbiAgY29ubmVjdGlvbnM6IGtleXMzKEF4ZWxhckNoYWluKS5tYXAoKHNyYykgPT4gKHtcbiAgICBzcmMsXG4gICAgZGVzdDogXCJub2JsZVwiXG4gIH0pKSxcbiAgYXBwbHk6IGFzeW5jIChjdHgsIGFtb3VudCwgc3JjLCBkZXN0KSA9PiB7XG4gICAgY29uc3QgeyBhZGRyZXNzZXM6IGEyLCBsY2EsIGdtcENoYWluLCBnbXBGZWUgfSA9IGN0eDtcbiAgICBjb25zdCB7IGNoYWluTmFtZSwgcmVtb3RlQWRkcmVzcyB9ID0gc3JjO1xuICAgIGNvbnN0IG1pbnRSZWNpcGllbnQgPSBiZWNoMzJUb0J5dGVzMzIoZGVzdC5pY2EuZ2V0QWRkcmVzcygpLnZhbHVlKTtcbiAgICBjb25zdCBzZXNzaW9uID0gbWFrZUVWTVNlc3Npb24oKTtcbiAgICBjb25zdCB1c2RjID0gc2Vzc2lvbi5tYWtlQ29udHJhY3QoYTIudXNkYywgRVJDMjApO1xuICAgIGNvbnN0IHRtID0gc2Vzc2lvbi5tYWtlQ29udHJhY3QoYTIudG9rZW5NZXNzZW5nZXIsIFRva2VuTWVzc2VuZ2VyKTtcbiAgICB1c2RjLmFwcHJvdmUoYTIudG9rZW5NZXNzZW5nZXIsIGFtb3VudC52YWx1ZSk7XG4gICAgdG0uZGVwb3NpdEZvckJ1cm4oYW1vdW50LnZhbHVlLCBub2JsZURvbWFpbiwgbWludFJlY2lwaWVudCwgYTIudXNkYyk7XG4gICAgY29uc3QgY2FsbHMgPSBzZXNzaW9uLmZpbmlzaCgpO1xuICAgIGNvbnN0IGF4ZWxhcklkID0gY3R4LmF4ZWxhcklkc1tjaGFpbk5hbWVdO1xuICAgIGNvbnN0IHRhcmdldCA9IHsgYXhlbGFySWQsIHJlbW90ZUFkZHJlc3MgfTtcbiAgICBhd2FpdCBzZW5kR01QQ29udHJhY3RDYWxsKHRhcmdldCwgY2FsbHMsIGdtcEZlZSwgbGNhLCBnbXBDaGFpbik7XG4gIH0sXG4gIHJlY292ZXI6IGFzeW5jIChfY3R4LCBhbW91bnQsIHNyYywgZGVzdCkgPT4ge1xuICAgIHJldHVybiBDQ1RQLmFwcGx5KG51bGwsIGFtb3VudCwgZGVzdCwgc3JjKTtcbiAgfVxufTtcbmhhcmRlbihDQ1RQZnJvbUVWTSk7XG52YXIgQ0NUUCA9IHtcbiAgaG93OiBcIkNDVFBcIixcbiAgY29ubmVjdGlvbnM6IGtleXMzKEF4ZWxhckNoYWluKS5tYXAoKGRlc3QpID0+ICh7XG4gICAgc3JjOiBcIm5vYmxlXCIsXG4gICAgZGVzdFxuICB9KSksXG4gIGFwcGx5OiBhc3luYyAoX2N0eCwgYW1vdW50LCBzcmMsIGRlc3QpID0+IHtcbiAgICBjb25zdCBkZW5vbUFtb3VudCA9IHsgZGVub206IFwidXVzZGNcIiwgdmFsdWU6IGFtb3VudC52YWx1ZSB9O1xuICAgIGNvbnN0IHsgY2hhaW5JZCwgcmVtb3RlQWRkcmVzcyB9ID0gZGVzdDtcbiAgICBjb25zdCBkZXN0aW5hdGlvbkFkZHJlc3MgPSBgJHtjaGFpbklkfToke3JlbW90ZUFkZHJlc3N9YDtcbiAgICB0cmFjZTEyKGBDQ1RQIGRlc3RpbmF0aW9uQWRkcmVzczogJHtkZXN0aW5hdGlvbkFkZHJlc3N9YCk7XG4gICAgY29uc3QgeyBpY2EgfSA9IHNyYztcbiAgICBhd2FpdCBpY2EuZGVwb3NpdEZvckJ1cm4oZGVzdGluYXRpb25BZGRyZXNzLCBkZW5vbUFtb3VudCk7XG4gIH0sXG4gIHJlY292ZXI6IGFzeW5jIChfY3R4LCBhbW91bnQsIHNyYywgZGVzdCkgPT4ge1xuICAgIHRocm93IEVycm9yKFwiVE9ETyhMdXFpKTogaG93IHRvIHJlY292ZXIgZnJvbSBDQ1RQIHRyYW5zZmVyP1wiKTtcbiAgfVxufTtcbmhhcmRlbihDQ1RQKTtcbnZhciBzZW5kR01QQ29udHJhY3RDYWxsID0gYXN5bmMgKGRlc3QsIGNhbGxzLCBmZWUsIGxjYSwgZ21wQ2hhaW4pID0+IHtcbiAgY29uc3QgeyBBWEVMQVJfR01QLCBBWEVMQVJfR0FTIH0gPSBnbXBBZGRyZXNzZXM7XG4gIGNvbnN0IG1lbW8gPSB7XG4gICAgZGVzdGluYXRpb25fY2hhaW46IGRlc3QuYXhlbGFySWQsXG4gICAgZGVzdGluYXRpb25fYWRkcmVzczogZGVzdC5yZW1vdGVBZGRyZXNzLFxuICAgIHBheWxvYWQ6IGJ1aWxkR01QUGF5bG9hZChjYWxscyksXG4gICAgdHlwZTogQXhlbGFyR01QTWVzc2FnZVR5cGUuQ29udHJhY3RDYWxsLFxuICAgIGZlZTogeyBhbW91bnQ6IFN0cmluZyhmZWUudmFsdWUpLCByZWNpcGllbnQ6IEFYRUxBUl9HQVMgfVxuICB9O1xuICBjb25zdCB7IGNoYWluSWQgfSA9IGF3YWl0IGdtcENoYWluLmdldENoYWluSW5mbygpO1xuICBjb25zdCBnbXAgPSB7IGNoYWluSWQsIHZhbHVlOiBBWEVMQVJfR01QLCBlbmNvZGluZzogXCJiZWNoMzJcIiB9O1xuICBhd2FpdCBsY2EudHJhbnNmZXIoZ21wLCBmZWUsIHsgbWVtbzogSlNPTi5zdHJpbmdpZnkobWVtbykgfSk7XG59O1xudmFyIEFhdmUgPSB7XG4gIHN1cHBseTogW1wiYWRkcmVzc1wiLCBcInVpbnQyNTZcIiwgXCJhZGRyZXNzXCIsIFwidWludDE2XCJdLFxuICB3aXRoZHJhdzogW1wiYWRkcmVzc1wiLCBcInVpbnQyNTZcIiwgXCJhZGRyZXNzXCJdXG59O1xudmFyIEFhdmVQcm90b2NvbCA9IHtcbiAgcHJvdG9jb2w6IFwiQWF2ZVwiLFxuICBjaGFpbnM6IGtleXMzKEF4ZWxhckNoYWluKSxcbiAgc3VwcGx5OiBhc3luYyAoY3R4LCBhbW91bnQsIHNyYykgPT4ge1xuICAgIGNvbnN0IHsgcmVtb3RlQWRkcmVzcyB9ID0gc3JjO1xuICAgIGNvbnN0IHsgYWRkcmVzc2VzOiBhMiwgbGNhLCBnbXBDaGFpbiwgZ21wRmVlIH0gPSBjdHg7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IG1ha2VFVk1TZXNzaW9uKCk7XG4gICAgY29uc3QgdXNkYyA9IHNlc3Npb24ubWFrZUNvbnRyYWN0KGEyLnVzZGMsIEVSQzIwKTtcbiAgICBjb25zdCBhYXZlID0gc2Vzc2lvbi5tYWtlQ29udHJhY3QoYTIuYWF2ZVBvb2wsIEFhdmUpO1xuICAgIHVzZGMuYXBwcm92ZShhMi5hYXZlUG9vbCwgYW1vdW50LnZhbHVlKTtcbiAgICBhYXZlLnN1cHBseShhMi51c2RjLCBhbW91bnQudmFsdWUsIHJlbW90ZUFkZHJlc3MsIDApO1xuICAgIGNvbnN0IGNhbGxzID0gc2Vzc2lvbi5maW5pc2goKTtcbiAgICBjb25zdCBheGVsYXJJZCA9IGN0eC5heGVsYXJJZHNbc3JjLmNoYWluTmFtZV07XG4gICAgY29uc3QgdGFyZ2V0ID0geyBheGVsYXJJZCwgcmVtb3RlQWRkcmVzcyB9O1xuICAgIGF3YWl0IHNlbmRHTVBDb250cmFjdENhbGwodGFyZ2V0LCBjYWxscywgZ21wRmVlLCBsY2EsIGdtcENoYWluKTtcbiAgfSxcbiAgd2l0aGRyYXc6IGFzeW5jIChjdHgsIGFtb3VudCwgZGVzdCkgPT4ge1xuICAgIGNvbnN0IHsgcmVtb3RlQWRkcmVzcyB9ID0gZGVzdDtcbiAgICBjb25zdCB7IGFkZHJlc3NlczogYTIsIGxjYSwgZ21wQ2hhaW4sIGdtcEZlZSB9ID0gY3R4O1xuICAgIGNvbnN0IHNlc3Npb24gPSBtYWtlRVZNU2Vzc2lvbigpO1xuICAgIGNvbnN0IGFhdmUgPSBzZXNzaW9uLm1ha2VDb250cmFjdChhMi5hYXZlUG9vbCwgQWF2ZSk7XG4gICAgYWF2ZS53aXRoZHJhdyhhMi51c2RjLCBhbW91bnQudmFsdWUsIHJlbW90ZUFkZHJlc3MpO1xuICAgIGNvbnN0IGNhbGxzID0gc2Vzc2lvbi5maW5pc2goKTtcbiAgICBjb25zdCBheGVsYXJJZCA9IGN0eC5heGVsYXJJZHNbZGVzdC5jaGFpbk5hbWVdO1xuICAgIGNvbnN0IHRhcmdldCA9IHsgYXhlbGFySWQsIHJlbW90ZUFkZHJlc3MgfTtcbiAgICBhd2FpdCBzZW5kR01QQ29udHJhY3RDYWxsKHRhcmdldCwgY2FsbHMsIGdtcEZlZSwgbGNhLCBnbXBDaGFpbik7XG4gIH1cbn07XG52YXIgQ29tcG91bmQgPSB7XG4gIHN1cHBseTogW1wiYWRkcmVzc1wiLCBcInVpbnQyNTZcIl0sXG4gIHdpdGhkcmF3OiBbXCJhZGRyZXNzXCIsIFwidWludDI1NlwiXVxufTtcbnZhciBDb21wb3VuZFByb3RvY29sID0ge1xuICBwcm90b2NvbDogXCJDb21wb3VuZFwiLFxuICBjaGFpbnM6IGtleXMzKEF4ZWxhckNoYWluKSxcbiAgc3VwcGx5OiBhc3luYyAoY3R4LCBhbW91bnQsIHNyYykgPT4ge1xuICAgIGNvbnN0IHsgYWRkcmVzc2VzOiBhMiwgbGNhLCBnbXBDaGFpbiwgZ21wRmVlOiBmZWUgfSA9IGN0eDtcbiAgICBjb25zdCBzZXNzaW9uID0gbWFrZUVWTVNlc3Npb24oKTtcbiAgICBjb25zdCB1c2RjID0gc2Vzc2lvbi5tYWtlQ29udHJhY3QoYTIudXNkYywgRVJDMjApO1xuICAgIGNvbnN0IGNvbXBvdW5kID0gc2Vzc2lvbi5tYWtlQ29udHJhY3QoYTIuY29tcG91bmQsIENvbXBvdW5kKTtcbiAgICB1c2RjLmFwcHJvdmUoYTIuY29tcG91bmQsIGFtb3VudC52YWx1ZSk7XG4gICAgY29tcG91bmQuc3VwcGx5KGEyLnVzZGMsIGFtb3VudC52YWx1ZSk7XG4gICAgY29uc3QgY2FsbHMgPSBzZXNzaW9uLmZpbmlzaCgpO1xuICAgIGNvbnN0IHsgY2hhaW5OYW1lLCByZW1vdGVBZGRyZXNzIH0gPSBzcmM7XG4gICAgY29uc3QgYXhlbGFySWQgPSBjdHguYXhlbGFySWRzW2NoYWluTmFtZV07XG4gICAgY29uc3QgdGFyZ2V0ID0geyBheGVsYXJJZCwgcmVtb3RlQWRkcmVzcyB9O1xuICAgIGF3YWl0IHNlbmRHTVBDb250cmFjdENhbGwodGFyZ2V0LCBjYWxscywgZmVlLCBsY2EsIGdtcENoYWluKTtcbiAgfSxcbiAgd2l0aGRyYXc6IGFzeW5jIChjdHgsIGFtb3VudCwgZGVzdCkgPT4ge1xuICAgIGNvbnN0IHsgYWRkcmVzc2VzOiBhMiwgbGNhLCBnbXBDaGFpbiwgZ21wRmVlOiBmZWUgfSA9IGN0eDtcbiAgICBjb25zdCBzZXNzaW9uID0gbWFrZUVWTVNlc3Npb24oKTtcbiAgICBjb25zdCBjb21wb3VuZCA9IHNlc3Npb24ubWFrZUNvbnRyYWN0KGEyLmNvbXBvdW5kLCBDb21wb3VuZCk7XG4gICAgY29tcG91bmQud2l0aGRyYXcoYTIudXNkYywgYW1vdW50LnZhbHVlKTtcbiAgICBjb25zdCBjYWxscyA9IHNlc3Npb24uZmluaXNoKCk7XG4gICAgY29uc3QgeyBjaGFpbk5hbWUsIHJlbW90ZUFkZHJlc3MgfSA9IGRlc3Q7XG4gICAgY29uc3QgYXhlbGFySWQgPSBjdHguYXhlbGFySWRzW2NoYWluTmFtZV07XG4gICAgY29uc3QgdGFyZ2V0ID0geyBheGVsYXJJZCwgcmVtb3RlQWRkcmVzcyB9O1xuICAgIGF3YWl0IHNlbmRHTVBDb250cmFjdENhbGwodGFyZ2V0LCBjYWxscywgZmVlLCBsY2EsIGdtcENoYWluKTtcbiAgfVxufTtcblxuLy9cbnZhciBWYXVsdFR5cGU7XG4hZnVuY3Rpb24oZTIpIHtcbiAgZTJbZTIuVU5TUEVDSUZJRUQgPSAwXSA9IFwiVU5TUEVDSUZJRURcIiwgZTJbZTIuU1RBS0VEID0gMV0gPSBcIlNUQUtFRFwiLCBlMltlMi5GTEVYSUJMRSA9IDJdID0gXCJGTEVYSUJMRVwiLCBlMltlMi5VTlJFQ09HTklaRUQgPSAtMV0gPSBcIlVOUkVDT0dOSVpFRFwiO1xufShWYXVsdFR5cGUgfHwgKFZhdWx0VHlwZSA9IHt9KSk7XG5mdW5jdGlvbiB2YXVsdFR5cGVGcm9tSlNPTihlMikge1xuICBzd2l0Y2ggKGUyKSB7XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgXCJVTlNQRUNJRklFRFwiOlxuICAgICAgcmV0dXJuIFZhdWx0VHlwZS5VTlNQRUNJRklFRDtcbiAgICBjYXNlIDE6XG4gICAgY2FzZSBcIlNUQUtFRFwiOlxuICAgICAgcmV0dXJuIFZhdWx0VHlwZS5TVEFLRUQ7XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgXCJGTEVYSUJMRVwiOlxuICAgICAgcmV0dXJuIFZhdWx0VHlwZS5GTEVYSUJMRTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFZhdWx0VHlwZS5VTlJFQ09HTklaRUQ7XG4gIH1cbn1cbmZ1bmN0aW9uIHZhdWx0VHlwZVRvSlNPTihlMikge1xuICBzd2l0Y2ggKGUyKSB7XG4gICAgY2FzZSBWYXVsdFR5cGUuVU5TUEVDSUZJRUQ6XG4gICAgICByZXR1cm4gXCJVTlNQRUNJRklFRFwiO1xuICAgIGNhc2UgVmF1bHRUeXBlLlNUQUtFRDpcbiAgICAgIHJldHVybiBcIlNUQUtFRFwiO1xuICAgIGNhc2UgVmF1bHRUeXBlLkZMRVhJQkxFOlxuICAgICAgcmV0dXJuIFwiRkxFWElCTEVcIjtcbiAgICBjYXNlIFZhdWx0VHlwZS5VTlJFQ09HTklaRUQ6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBcIlVOUkVDT0dOSVpFRFwiO1xuICB9XG59XG52YXIgUGF1c2VkVHlwZTtcbiFmdW5jdGlvbihlMikge1xuICBlMltlMi5OT05FID0gMF0gPSBcIk5PTkVcIiwgZTJbZTIuTE9DSyA9IDFdID0gXCJMT0NLXCIsIGUyW2UyLlVOTE9DSyA9IDJdID0gXCJVTkxPQ0tcIiwgZTJbZTIuQUxMID0gM10gPSBcIkFMTFwiLCBlMltlMi5VTlJFQ09HTklaRUQgPSAtMV0gPSBcIlVOUkVDT0dOSVpFRFwiO1xufShQYXVzZWRUeXBlIHx8IChQYXVzZWRUeXBlID0ge30pKTtcblxuLy9cbnZhciBNc2dMb2NrID0geyB0eXBlVXJsOiBcIi9ub2JsZS5kb2xsYXIudmF1bHRzLnYxLk1zZ0xvY2tcIiwgZW5jb2RlOiAoZTIsIG8yID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAoXCJcIiAhPT0gZTIuc2lnbmVyICYmIG8yLnVpbnQzMigxMCkuc3RyaW5nKGUyLnNpZ25lciksIDAgIT09IGUyLnZhdWx0ICYmIG8yLnVpbnQzMigxNikuaW50MzIoZTIudmF1bHQpLCBcIlwiICE9PSBlMi5hbW91bnQgJiYgbzIudWludDMyKDI2KS5zdHJpbmcoZTIuYW1vdW50KSwgbzIpLCBkZWNvZGUoZTIsIG8yKSB7XG4gIGNvbnN0IHQ1ID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgczMgPSB2b2lkIDAgPT09IG8yID8gdDUubGVuIDogdDUucG9zICsgbzI7XG4gIGNvbnN0IG4yID0geyBzaWduZXI6IFwiXCIsIHZhdWx0OiAwLCBhbW91bnQ6IFwiXCIgfTtcbiAgZm9yICg7IHQ1LnBvcyA8IHMzOyApIHtcbiAgICBjb25zdCBlMyA9IHQ1LnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgbjIuc2lnbmVyID0gdDUuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBuMi52YXVsdCA9IHQ1LmludDMyKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBuMi5hbW91bnQgPSB0NS5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0NS5za2lwVHlwZSg3ICYgZTMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbjI7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyBzaWduZXI6IGlzU2V0KGUyLnNpZ25lcikgPyBTdHJpbmcoZTIuc2lnbmVyKSA6IFwiXCIsIHZhdWx0OiBpc1NldChlMi52YXVsdCkgPyB2YXVsdFR5cGVGcm9tSlNPTihlMi52YXVsdCkgOiAtMSwgYW1vdW50OiBpc1NldChlMi5hbW91bnQpID8gU3RyaW5nKGUyLmFtb3VudCkgOiBcIlwiIH0pLCB0b0pTT04oZTIpIHtcbiAgY29uc3QgbzIgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gZTIuc2lnbmVyICYmIChvMi5zaWduZXIgPSBlMi5zaWduZXIpLCB2b2lkIDAgIT09IGUyLnZhdWx0ICYmIChvMi52YXVsdCA9IHZhdWx0VHlwZVRvSlNPTihlMi52YXVsdCkpLCB2b2lkIDAgIT09IGUyLmFtb3VudCAmJiAobzIuYW1vdW50ID0gZTIuYW1vdW50KSwgbzI7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCBvMiA9IHsgc2lnbmVyOiBcIlwiLCB2YXVsdDogMCwgYW1vdW50OiBcIlwiIH07XG4gIHJldHVybiBvMi5zaWduZXIgPSBlMi5zaWduZXIgPz8gXCJcIiwgbzIudmF1bHQgPSBlMi52YXVsdCA/PyAwLCBvMi5hbW91bnQgPSBlMi5hbW91bnQgPz8gXCJcIiwgbzI7XG59LCBmcm9tUHJvdG9Nc2c6IChlMikgPT4gTXNnTG9jay5kZWNvZGUoZTIudmFsdWUpLCB0b1Byb3RvOiAoZTIpID0+IE1zZ0xvY2suZW5jb2RlKGUyKS5maW5pc2goKSwgdG9Qcm90b01zZzogKGUyKSA9PiAoeyB0eXBlVXJsOiBcIi9ub2JsZS5kb2xsYXIudmF1bHRzLnYxLk1zZ0xvY2tcIiwgdmFsdWU6IE1zZ0xvY2suZW5jb2RlKGUyKS5maW5pc2goKSB9KSB9O1xudmFyIE1zZ1VubG9jayA9IHsgdHlwZVVybDogXCIvbm9ibGUuZG9sbGFyLnZhdWx0cy52MS5Nc2dVbmxvY2tcIiwgZW5jb2RlOiAoZTIsIG8yID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSA9PiAoXCJcIiAhPT0gZTIuc2lnbmVyICYmIG8yLnVpbnQzMigxMCkuc3RyaW5nKGUyLnNpZ25lciksIDAgIT09IGUyLnZhdWx0ICYmIG8yLnVpbnQzMigxNikuaW50MzIoZTIudmF1bHQpLCBcIlwiICE9PSBlMi5hbW91bnQgJiYgbzIudWludDMyKDI2KS5zdHJpbmcoZTIuYW1vdW50KSwgbzIpLCBkZWNvZGUoZTIsIG8yKSB7XG4gIGNvbnN0IHQ1ID0gZTIgaW5zdGFuY2VvZiBCaW5hcnlSZWFkZXIgPyBlMiA6IG5ldyBCaW5hcnlSZWFkZXIoZTIpO1xuICBsZXQgczMgPSB2b2lkIDAgPT09IG8yID8gdDUubGVuIDogdDUucG9zICsgbzI7XG4gIGNvbnN0IG4yID0geyBzaWduZXI6IFwiXCIsIHZhdWx0OiAwLCBhbW91bnQ6IFwiXCIgfTtcbiAgZm9yICg7IHQ1LnBvcyA8IHMzOyApIHtcbiAgICBjb25zdCBlMyA9IHQ1LnVpbnQzMigpO1xuICAgIHN3aXRjaCAoZTMgPj4+IDMpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgbjIuc2lnbmVyID0gdDUuc3RyaW5nKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBuMi52YXVsdCA9IHQ1LmludDMyKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBuMi5hbW91bnQgPSB0NS5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0NS5za2lwVHlwZSg3ICYgZTMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbjI7XG59LCBmcm9tSlNPTjogKGUyKSA9PiAoeyBzaWduZXI6IGlzU2V0KGUyLnNpZ25lcikgPyBTdHJpbmcoZTIuc2lnbmVyKSA6IFwiXCIsIHZhdWx0OiBpc1NldChlMi52YXVsdCkgPyB2YXVsdFR5cGVGcm9tSlNPTihlMi52YXVsdCkgOiAtMSwgYW1vdW50OiBpc1NldChlMi5hbW91bnQpID8gU3RyaW5nKGUyLmFtb3VudCkgOiBcIlwiIH0pLCB0b0pTT04oZTIpIHtcbiAgY29uc3QgbzIgPSB7fTtcbiAgcmV0dXJuIHZvaWQgMCAhPT0gZTIuc2lnbmVyICYmIChvMi5zaWduZXIgPSBlMi5zaWduZXIpLCB2b2lkIDAgIT09IGUyLnZhdWx0ICYmIChvMi52YXVsdCA9IHZhdWx0VHlwZVRvSlNPTihlMi52YXVsdCkpLCB2b2lkIDAgIT09IGUyLmFtb3VudCAmJiAobzIuYW1vdW50ID0gZTIuYW1vdW50KSwgbzI7XG59LCBmcm9tUGFydGlhbChlMikge1xuICBjb25zdCBvMiA9IHsgc2lnbmVyOiBcIlwiLCB2YXVsdDogMCwgYW1vdW50OiBcIlwiIH07XG4gIHJldHVybiBvMi5zaWduZXIgPSBlMi5zaWduZXIgPz8gXCJcIiwgbzIudmF1bHQgPSBlMi52YXVsdCA/PyAwLCBvMi5hbW91bnQgPSBlMi5hbW91bnQgPz8gXCJcIiwgbzI7XG59LCBmcm9tUHJvdG9Nc2c6IChlMikgPT4gTXNnVW5sb2NrLmRlY29kZShlMi52YWx1ZSksIHRvUHJvdG86IChlMikgPT4gTXNnVW5sb2NrLmVuY29kZShlMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChlMikgPT4gKHsgdHlwZVVybDogXCIvbm9ibGUuZG9sbGFyLnZhdWx0cy52MS5Nc2dVbmxvY2tcIiwgdmFsdWU6IE1zZ1VubG9jay5lbmNvZGUoZTIpLmZpbmlzaCgpIH0pIH07XG5cbi8vXG5mdW5jdGlvbiBpMigpIHtcbiAgcmV0dXJuIHsgcG9vbElkOiBCaWdJbnQoMCksIGRlbm9tVG86IFwiXCIgfTtcbn1cbnZhciBSb3V0ZSA9IHsgdHlwZVVybDogXCIvbm9ibGUuc3dhcC52MS5Sb3V0ZVwiLCBlbmNvZGU6IChvMiwgZTIgPSBCaW5hcnlXcml0ZXIuY3JlYXRlKCkpID0+IChvMi5wb29sSWQgIT09IEJpZ0ludCgwKSAmJiBlMi51aW50MzIoOCkudWludDY0KG8yLnBvb2xJZCksIFwiXCIgIT09IG8yLmRlbm9tVG8gJiYgZTIudWludDMyKDE4KS5zdHJpbmcobzIuZGVub21UbyksIGUyKSwgZGVjb2RlKG8yLCB0NSkge1xuICBjb25zdCBuMiA9IG8yIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gbzIgOiBuZXcgQmluYXJ5UmVhZGVyKG8yKTtcbiAgbGV0IGQgPSB2b2lkIDAgPT09IHQ1ID8gbjIubGVuIDogbjIucG9zICsgdDU7XG4gIGNvbnN0IHI1ID0gaTIoKTtcbiAgZm9yICg7IG4yLnBvcyA8IGQ7ICkge1xuICAgIGNvbnN0IG8zID0gbjIudWludDMyKCk7XG4gICAgc3dpdGNoIChvMyA+Pj4gMykge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByNS5wb29sSWQgPSBuMi51aW50NjQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHI1LmRlbm9tVG8gPSBuMi5zdHJpbmcoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBuMi5za2lwVHlwZSg3ICYgbzMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcjU7XG59LCBmcm9tSlNPTjogKG8yKSA9PiAoeyBwb29sSWQ6IGlzU2V0KG8yLnBvb2xJZCkgPyBCaWdJbnQobzIucG9vbElkLnRvU3RyaW5nKCkpIDogQmlnSW50KDApLCBkZW5vbVRvOiBpc1NldChvMi5kZW5vbVRvKSA/IFN0cmluZyhvMi5kZW5vbVRvKSA6IFwiXCIgfSksIHRvSlNPTihvMikge1xuICBjb25zdCBlMiA9IHt9O1xuICByZXR1cm4gdm9pZCAwICE9PSBvMi5wb29sSWQgJiYgKGUyLnBvb2xJZCA9IChvMi5wb29sSWQgfHwgQmlnSW50KDApKS50b1N0cmluZygpKSwgdm9pZCAwICE9PSBvMi5kZW5vbVRvICYmIChlMi5kZW5vbVRvID0gbzIuZGVub21UbyksIGUyO1xufSwgZnJvbVBhcnRpYWwobzIpIHtcbiAgY29uc3QgZTIgPSBpMigpO1xuICByZXR1cm4gZTIucG9vbElkID0gdm9pZCAwICE9PSBvMi5wb29sSWQgJiYgbnVsbCAhPT0gbzIucG9vbElkID8gQmlnSW50KG8yLnBvb2xJZC50b1N0cmluZygpKSA6IEJpZ0ludCgwKSwgZTIuZGVub21UbyA9IG8yLmRlbm9tVG8gPz8gXCJcIiwgZTI7XG59LCBmcm9tUHJvdG9Nc2c6IChvMikgPT4gUm91dGUuZGVjb2RlKG8yLnZhbHVlKSwgdG9Qcm90bzogKG8yKSA9PiBSb3V0ZS5lbmNvZGUobzIpLmZpbmlzaCgpLCB0b1Byb3RvTXNnOiAobzIpID0+ICh7IHR5cGVVcmw6IFwiL25vYmxlLnN3YXAudjEuUm91dGVcIiwgdmFsdWU6IFJvdXRlLmVuY29kZShvMikuZmluaXNoKCkgfSkgfTtcblxuLy9cbnZhciBBbGdvcml0aG07XG4hZnVuY3Rpb24oRTIpIHtcbiAgRTJbRTIuVU5TUEVDSUZJRUQgPSAwXSA9IFwiVU5TUEVDSUZJRURcIiwgRTJbRTIuU1RBQkxFU1dBUCA9IDFdID0gXCJTVEFCTEVTV0FQXCIsIEUyW0UyLlBFUkZFQ1RQUklDRSA9IDJdID0gXCJQRVJGRUNUUFJJQ0VcIiwgRTJbRTIuVU5SRUNPR05JWkVEID0gLTFdID0gXCJVTlJFQ09HTklaRURcIjtcbn0oQWxnb3JpdGhtIHx8IChBbGdvcml0aG0gPSB7fSkpO1xuXG4vL1xuZnVuY3Rpb24gcDMoKSB7XG4gIHJldHVybiB7IHNpZ25lcjogXCJcIiwgYW1vdW50OiBDb2luLmZyb21QYXJ0aWFsKHt9KSwgcm91dGVzOiBbXSwgbWluOiBDb2luLmZyb21QYXJ0aWFsKHt9KSB9O1xufVxudmFyIE1zZ1N3YXAgPSB7IHR5cGVVcmw6IFwiL25vYmxlLnN3YXAudjEuTXNnU3dhcFwiLCBlbmNvZGUoZTIsIHI1ID0gQmluYXJ5V3JpdGVyLmNyZWF0ZSgpKSB7XG4gIFwiXCIgIT09IGUyLnNpZ25lciAmJiByNS51aW50MzIoMTApLnN0cmluZyhlMi5zaWduZXIpLCB2b2lkIDAgIT09IGUyLmFtb3VudCAmJiBDb2luLmVuY29kZShlMi5hbW91bnQsIHI1LnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgZm9yIChjb25zdCBvMiBvZiBlMi5yb3V0ZXMpIFJvdXRlLmVuY29kZShvMiwgcjUudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICByZXR1cm4gdm9pZCAwICE9PSBlMi5taW4gJiYgQ29pbi5lbmNvZGUoZTIubWluLCByNS51aW50MzIoMzQpLmZvcmsoKSkubGRlbGltKCksIHI1O1xufSwgZGVjb2RlKGUyLCByNSkge1xuICBjb25zdCBuMiA9IGUyIGluc3RhbmNlb2YgQmluYXJ5UmVhZGVyID8gZTIgOiBuZXcgQmluYXJ5UmVhZGVyKGUyKTtcbiAgbGV0IHQ1ID0gdm9pZCAwID09PSByNSA/IG4yLmxlbiA6IG4yLnBvcyArIHI1O1xuICBjb25zdCBhMiA9IHAzKCk7XG4gIGZvciAoOyBuMi5wb3MgPCB0NTsgKSB7XG4gICAgY29uc3QgZTMgPSBuMi51aW50MzIoKTtcbiAgICBzd2l0Y2ggKGUzID4+PiAzKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGEyLnNpZ25lciA9IG4yLnN0cmluZygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgYTIuYW1vdW50ID0gQ29pbi5kZWNvZGUobjIsIG4yLnVpbnQzMigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGEyLnJvdXRlcy5wdXNoKFJvdXRlLmRlY29kZShuMiwgbjIudWludDMyKCkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIGEyLm1pbiA9IENvaW4uZGVjb2RlKG4yLCBuMi51aW50MzIoKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbjIuc2tpcFR5cGUoNyAmIGUzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGEyO1xufSwgZnJvbUpTT046IChlMikgPT4gKHsgc2lnbmVyOiBpc1NldChlMi5zaWduZXIpID8gU3RyaW5nKGUyLnNpZ25lcikgOiBcIlwiLCBhbW91bnQ6IGlzU2V0KGUyLmFtb3VudCkgPyBDb2luLmZyb21KU09OKGUyLmFtb3VudCkgOiB2b2lkIDAsIHJvdXRlczogQXJyYXkuaXNBcnJheShlMj8ucm91dGVzKSA/IGUyLnJvdXRlcy5tYXAoKG8yKSA9PiBSb3V0ZS5mcm9tSlNPTihvMikpIDogW10sIG1pbjogaXNTZXQoZTIubWluKSA/IENvaW4uZnJvbUpTT04oZTIubWluKSA6IHZvaWQgMCB9KSwgdG9KU09OKGUyKSB7XG4gIGNvbnN0IHI1ID0ge307XG4gIHJldHVybiB2b2lkIDAgIT09IGUyLnNpZ25lciAmJiAocjUuc2lnbmVyID0gZTIuc2lnbmVyKSwgdm9pZCAwICE9PSBlMi5hbW91bnQgJiYgKHI1LmFtb3VudCA9IGUyLmFtb3VudCA/IENvaW4udG9KU09OKGUyLmFtb3VudCkgOiB2b2lkIDApLCBlMi5yb3V0ZXMgPyByNS5yb3V0ZXMgPSBlMi5yb3V0ZXMubWFwKChvMikgPT4gbzIgPyBSb3V0ZS50b0pTT04obzIpIDogdm9pZCAwKSA6IHI1LnJvdXRlcyA9IFtdLCB2b2lkIDAgIT09IGUyLm1pbiAmJiAocjUubWluID0gZTIubWluID8gQ29pbi50b0pTT04oZTIubWluKSA6IHZvaWQgMCksIHI1O1xufSwgZnJvbVBhcnRpYWwoZTIpIHtcbiAgY29uc3QgcjUgPSBwMygpO1xuICByZXR1cm4gcjUuc2lnbmVyID0gZTIuc2lnbmVyID8/IFwiXCIsIHI1LmFtb3VudCA9IHZvaWQgMCAhPT0gZTIuYW1vdW50ICYmIG51bGwgIT09IGUyLmFtb3VudCA/IENvaW4uZnJvbVBhcnRpYWwoZTIuYW1vdW50KSA6IHZvaWQgMCwgcjUucm91dGVzID0gZTIucm91dGVzPy5tYXAoKG8yKSA9PiBSb3V0ZS5mcm9tUGFydGlhbChvMikpIHx8IFtdLCByNS5taW4gPSB2b2lkIDAgIT09IGUyLm1pbiAmJiBudWxsICE9PSBlMi5taW4gPyBDb2luLmZyb21QYXJ0aWFsKGUyLm1pbikgOiB2b2lkIDAsIHI1O1xufSwgZnJvbVByb3RvTXNnOiAobzIpID0+IE1zZ1N3YXAuZGVjb2RlKG8yLnZhbHVlKSwgdG9Qcm90bzogKG8yKSA9PiBNc2dTd2FwLmVuY29kZShvMikuZmluaXNoKCksIHRvUHJvdG9Nc2c6IChvMikgPT4gKHsgdHlwZVVybDogXCIvbm9ibGUuc3dhcC52MS5Nc2dTd2FwXCIsIHZhbHVlOiBNc2dTd2FwLmVuY29kZShvMikuZmluaXNoKCkgfSkgfTtcblxuLy9cbnZhciB7IGFkZDogYWRkNCB9ID0gQW1vdW50TWF0aDtcbnZhciB0cmFjZTEzID0gbWFrZVRyYWNlcihcIlVTRE5GXCIpO1xudmFyIG1ha2VTd2FwTG9ja01lc3NhZ2VzID0gKG5vYmxlQWRkciwgdXNkY0luLCB7XG4gIHBvb2xJZCA9IDBuLFxuICBkZW5vbSA9IFwidXVzZGNcIixcbiAgZGVub21UbyA9IFwidXVzZG5cIixcbiAgdmF1bHQgPSB2b2lkIDAsXG4gIHVzZG5PdXQgPSB2b2lkIDBcbn0gPSB7fSkgPT4ge1xuICBjb25zdCBtc2dTd2FwID0gTXNnU3dhcC5mcm9tUGFydGlhbCh7XG4gICAgc2lnbmVyOiBub2JsZUFkZHIudmFsdWUsXG4gICAgYW1vdW50OiB7IGRlbm9tLCBhbW91bnQ6IGAke3VzZGNJbn1gIH0sXG4gICAgcm91dGVzOiBbeyBwb29sSWQsIGRlbm9tVG8gfV0sXG4gICAgbWluOiB7IGRlbm9tOiBkZW5vbVRvLCBhbW91bnQ6IGAke3VzZG5PdXQgfHwgdXNkY0lufWAgfVxuICB9KTtcbiAgaWYgKHZhdWx0ID09PSB2b2lkIDApIHtcbiAgICBjb25zdCBwcm90b01lc3NhZ2VzMiA9IFtBbnkudG9KU09OKE1zZ1N3YXAudG9Qcm90b01zZyhtc2dTd2FwKSldO1xuICAgIHJldHVybiB7IG1zZ1N3YXAsIHByb3RvTWVzc2FnZXM6IHByb3RvTWVzc2FnZXMyIH07XG4gIH1cbiAgY29uc3QgbXNnTG9jayA9IE1zZ0xvY2suZnJvbVBhcnRpYWwoe1xuICAgIHNpZ25lcjogbm9ibGVBZGRyLnZhbHVlLFxuICAgIHZhdWx0LFxuICAgIGFtb3VudDogYCR7dXNkbk91dH1gXG4gIH0pO1xuICBjb25zdCBwcm90b01lc3NhZ2VzID0gW1xuICAgIEFueS50b0pTT04oTXNnU3dhcC50b1Byb3RvTXNnKG1zZ1N3YXApKSxcbiAgICBBbnkudG9KU09OKE1zZ0xvY2sudG9Qcm90b01zZyhtc2dMb2NrKSlcbiAgXTtcbiAgcmV0dXJuIHsgbXNnU3dhcCwgbXNnTG9jaywgcHJvdG9NZXNzYWdlcyB9O1xufTtcbnZhciBtYWtlVW5sb2NrU3dhcE1lc3NhZ2VzID0gKG5vYmxlQWRkciwgdXNkY091dCwge1xuICBwb29sSWQgPSAwbixcbiAgZGVub20gPSBcInV1c2RuXCIsXG4gIGRlbm9tVG8gPSBcInV1c2RjXCIsXG4gIHZhdWx0ID0gMSxcbiAgLy9cbiAgdXNkbk91dCA9IHZvaWQgMFxufSA9IHt9KSA9PiB7XG4gIGNvbnN0IG1zZ1N3YXAgPSBNc2dTd2FwLmZyb21QYXJ0aWFsKHtcbiAgICBzaWduZXI6IG5vYmxlQWRkci52YWx1ZSxcbiAgICBhbW91bnQ6IHsgZGVub20sIGFtb3VudDogYCR7dXNkbk91dCB8fCB1c2RjT3V0fWAgfSxcbiAgICByb3V0ZXM6IFt7IHBvb2xJZCwgZGVub21UbyB9XSxcbiAgICBtaW46IHsgZGVub206IGRlbm9tVG8sIGFtb3VudDogYCR7dXNkbk91dCB8fCB1c2RjT3V0fWAgfVxuICB9KTtcbiAgaWYgKHVzZG5PdXQgPT09IHZvaWQgMCkge1xuICAgIGNvbnN0IHByb3RvTWVzc2FnZXMyID0gW0FueS50b0pTT04oTXNnU3dhcC50b1Byb3RvTXNnKG1zZ1N3YXApKV07XG4gICAgcmV0dXJuIHsgbXNnU3dhcCwgcHJvdG9NZXNzYWdlczogcHJvdG9NZXNzYWdlczIgfTtcbiAgfVxuICBjb25zdCBtc2dVbmxvY2sgPSBNc2dVbmxvY2suZnJvbVBhcnRpYWwoe1xuICAgIHNpZ25lcjogbm9ibGVBZGRyLnZhbHVlLFxuICAgIHZhdWx0LFxuICAgIGFtb3VudDogYCR7dXNkbk91dH1gXG4gIH0pO1xuICBjb25zdCBwcm90b01lc3NhZ2VzID0gW1xuICAgIEFueS50b0pTT04oTXNnVW5sb2NrLnRvUHJvdG9Nc2cobXNnVW5sb2NrKSksXG4gICAgQW55LnRvSlNPTihNc2dTd2FwLnRvUHJvdG9Nc2cobXNnU3dhcCkpXG4gIF07XG4gIHJldHVybiB7IG1zZ1VubG9jaywgbXNnU3dhcCwgcHJvdG9NZXNzYWdlcyB9O1xufTtcbnZhciBwcm90b2NvbFVTRE4gPSB7XG4gIHByb3RvY29sOiBcIlVTRE5cIixcbiAgY2hhaW5zOiBbXCJub2JsZVwiXSxcbiAgc3VwcGx5OiBhc3luYyAoY3R4LCBhbW91bnQsIHNyYykgPT4ge1xuICAgIGNvbnN0IHsgdXNkbk91dCwgdmF1bHQgfSA9IGN0eDtcbiAgICBjb25zdCB7IGljYSB9ID0gc3JjO1xuICAgIGNvbnN0IG5vYmxlQWRkciA9IGljYS5nZXRBZGRyZXNzKCk7XG4gICAgY29uc3QgeyBtc2dTd2FwLCBtc2dMb2NrLCBwcm90b01lc3NhZ2VzIH0gPSBtYWtlU3dhcExvY2tNZXNzYWdlcyhcbiAgICAgIG5vYmxlQWRkcixcbiAgICAgIGFtb3VudC52YWx1ZSxcbiAgICAgIHsgdXNkbk91dCwgdmF1bHQgfVxuICAgICk7XG4gICAgdHJhY2UxMyhcImV4ZWN1dGluZ1wiLCBbbXNnU3dhcCwgbXNnTG9ja10uZmlsdGVyKEJvb2xlYW4pKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBpY2EuZXhlY3V0ZUVuY29kZWRUeChwcm90b01lc3NhZ2VzKTtcbiAgICB0cmFjZTEzKFwic3VwcGx5IHJlc3VsdFwiLCByZXN1bHQpO1xuICB9LFxuICB3aXRoZHJhdzogYXN5bmMgKGN0eCwgYW1vdW50LCBkZXN0KSA9PiB7XG4gICAgY29uc3QgeyB1c2RuT3V0IH0gPSBjdHg7XG4gICAgY29uc3QgeyBpY2EgfSA9IGRlc3Q7XG4gICAgY29uc3QgYWRkcmVzcyA9IGljYS5nZXRBZGRyZXNzKCk7XG4gICAgY29uc3QgeyBtc2dVbmxvY2ssIG1zZ1N3YXAsIHByb3RvTWVzc2FnZXMgfSA9IG1ha2VVbmxvY2tTd2FwTWVzc2FnZXMoXG4gICAgICBhZGRyZXNzLFxuICAgICAgYW1vdW50LnZhbHVlLFxuICAgICAgeyB1c2RuT3V0IH1cbiAgICApO1xuICAgIHRyYWNlMTMoXCJleGVjdXRpbmdcIiwgW21zZ1VubG9jaywgbXNnU3dhcF0uZmlsdGVyKEJvb2xlYW4pKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBpY2EuZXhlY3V0ZUVuY29kZWRUeChwcm90b01lc3NhZ2VzKTtcbiAgICB0cmFjZTEzKFwid2l0aGRyYXcgcmVzdWx0XCIsIHJlc3VsdCk7XG4gIH1cbn07XG5oYXJkZW4ocHJvdG9jb2xVU0ROKTtcbnZhciBhZ29yaWNUb05vYmxlID0ge1xuICBob3c6IFwiSUJDIHRvIE5vYmxlXCIsXG4gIGNvbm5lY3Rpb25zOiBbeyBzcmM6IFwiYWdvcmljXCIsIGRlc3Q6IFwibm9ibGVcIiB9XSxcbiAgYXBwbHk6IGFzeW5jIChjdHgsIGFtb3VudCwgc3JjLCBkZXN0KSA9PiB7XG4gICAgY29uc3QgeyBkZW5vbSB9ID0gY3R4LnVzZGM7XG4gICAgY29uc3QgZGVub21BbW91bnQgPSB7IHZhbHVlOiBhbW91bnQudmFsdWUsIGRlbm9tIH07XG4gICAgYXdhaXQgc3JjLmxjYS50cmFuc2ZlcihkZXN0LmljYS5nZXRBZGRyZXNzKCksIGRlbm9tQW1vdW50KTtcbiAgfSxcbiAgcmVjb3ZlcjogYXN5bmMgKGN0eCwgYW1vdW50LCBzcmMsIGRlc3QpID0+IHtcbiAgICBjb25zdCBub2JsZUFtb3VudCA9IHsgdmFsdWU6IGFtb3VudC52YWx1ZSwgZGVub206IFwidXVzZGNcIiB9O1xuICAgIGF3YWl0IGRlc3QuaWNhLnRyYW5zZmVyKHNyYy5sY2EuZ2V0QWRkcmVzcygpLCBub2JsZUFtb3VudCk7XG4gIH1cbn07XG5oYXJkZW4oYWdvcmljVG9Ob2JsZSk7XG52YXIgbm9ibGVUb0Fnb3JpYyA9IHtcbiAgaG93OiBcIklCQyBmcm9tIE5vYmxlXCIsXG4gIGNvbm5lY3Rpb25zOiBbeyBzcmM6IFwibm9ibGVcIiwgZGVzdDogXCJhZ29yaWNcIiB9XSxcbiAgYXBwbHk6IGFzeW5jIChfY3R4LCBhbW91bnQsIHNyYywgZGVzdCkgPT4ge1xuICAgIGNvbnN0IG5vYmxlQW1vdW50ID0geyB2YWx1ZTogYW1vdW50LnZhbHVlLCBkZW5vbTogXCJ1dXNkY1wiIH07XG4gICAgYXdhaXQgc3JjLmljYS50cmFuc2ZlcihkZXN0LmxjYS5nZXRBZGRyZXNzKCksIG5vYmxlQW1vdW50KTtcbiAgfSxcbiAgcmVjb3ZlcjogYXN5bmMgKGN0eCwgYW1vdW50LCBzcmMsIGRlc3QpID0+IHtcbiAgICBjb25zdCB7IGRlbm9tIH0gPSBjdHgudXNkYztcbiAgICBjb25zdCBkZW5vbUFtb3VudCA9IHsgdmFsdWU6IGFtb3VudC52YWx1ZSwgZGVub20gfTtcbiAgICBhd2FpdCBkZXN0LmxjYS50cmFuc2ZlcihzcmMuaWNhLmdldEFkZHJlc3MoKSwgZGVub21BbW91bnQpO1xuICB9XG59O1xuaGFyZGVuKGFnb3JpY1RvTm9ibGUpO1xuXG4vL1xudmFyIHsga2V5czoga2V5czQsIHZhbHVlczogdmFsdWVzNyB9ID0gT2JqZWN0O1xudmFyIHNlYXRLZXl3b3JkcyA9IFtcIkNhc2hcIiwgXCJEZXBvc2l0XCJdO1xuaGFyZGVuKHNlYXRLZXl3b3Jkcyk7XG52YXIgUG9zaXRpb25SZWZTaGFwZSA9IE0ubnVtYmVyKCk7XG52YXIgQXNzZXRQbGFjZVJlZlNoYXBlID0gTS5vcihcbiAgLi4uc2VhdEtleXdvcmRzLm1hcCgoa3cpID0+IGA8JHtrd30+YCksXG4gIC4uLnZhbHVlczcoU3VwcG9ydGVkQ2hhaW4pLm1hcCgoYzIpID0+IGBAJHtjMn1gKSxcbiAgLi4ua2V5czQoUG9vbFBsYWNlcyksXG4gIFBvc2l0aW9uUmVmU2hhcGVcbik7XG52YXIgYWNjb3VudFJlZlBhdHRlcm4gPSAvXkAoPzxjaGFpbj5cXHcrKSQvO1xudmFyIGdldENoYWluTmFtZU9mUGxhY2VSZWYgPSAocmVmKSA9PiB7XG4gIGNvbnN0IG0yID0gcmVmLm1hdGNoKGFjY291bnRSZWZQYXR0ZXJuKTtcbiAgY29uc3QgY2hhaW4gPSBtMj8uZ3JvdXBzPy5jaGFpbjtcbiAgaWYgKCFjaGFpbikgcmV0dXJuIHZvaWQgMDtcbiAgYXNzZXJ0KGtleXM0KFN1cHBvcnRlZENoYWluKS5pbmNsdWRlcyhjaGFpbiksIGBiYWQgcmVmOiAke3JlZn1gKTtcbiAgcmV0dXJuIGNoYWluO1xufTtcbnZhciBzZWF0UmVmUGF0dGVybiA9IC9ePCg/PGtleXdvcmQ+XFx3Kyk+JC87XG52YXIgZ2V0S2V5d29yZE9mUGxhY2VSZWYgPSAocmVmKSA9PiB7XG4gIGNvbnN0IG0yID0gcmVmLm1hdGNoKHNlYXRSZWZQYXR0ZXJuKTtcbiAgY29uc3Qga2V5d29yZCA9IG0yPy5ncm91cHM/LmtleXdvcmQ7XG4gIGlmICgha2V5d29yZCkgcmV0dXJuIHZvaWQgMDtcbiAgYXNzZXJ0KHNlYXRLZXl3b3Jkcy5pbmNsdWRlcyhrZXl3b3JkKSwgYGJhZCByZWY6ICR7cmVmfWApO1xuICByZXR1cm4ga2V5d29yZDtcbn07XG52YXIgbWFrZU9mZmVyQXJnc1NoYXBlcyA9ICh1c2RjQnJhbmQpID0+IHtcbiAgY29uc3QgdXNkY0Ftb3VudFNoYXBlID0gbWFrZU5hdEFtb3VudFNoYXBlKHVzZGNCcmFuZCwgMW4pO1xuICBjb25zdCBtb3ZlbWVudERlc2NTaGFwZSA9IE0uc3BsaXRSZWNvcmQoXG4gICAge1xuICAgICAgYW1vdW50OiB1c2RjQW1vdW50U2hhcGUsXG4gICAgICBzcmM6IEFzc2V0UGxhY2VSZWZTaGFwZSxcbiAgICAgIGRlc3Q6IEFzc2V0UGxhY2VSZWZTaGFwZVxuICAgIH0sXG4gICAgeyBmZWU6IEFueU5hdEFtb3VudFNoYXBlLCBkZXRhaWw6IE0ucmVjb3JkT2YoTS5zdHJpbmcoKSwgTS5uYXQoKSkgfSxcbiAgICB7fVxuICApO1xuICByZXR1cm4ge1xuICAgIG9wZW5Qb3J0Zm9saW86IE0uc3BsaXRSZWNvcmQoXG4gICAgICB7fSxcbiAgICAgIHtcbiAgICAgICAgZmxvdzogTS5hcnJheU9mKG1vdmVtZW50RGVzY1NoYXBlLCB7IGFycmF5TGVuZ3RoTGltaXQ6IDEyIH0pLFxuICAgICAgICBkZXN0aW5hdGlvbkVWTUNoYWluOiBNLm9yKC4uLmtleXM0KEF4ZWxhckNoYWluKSlcbiAgICAgIH1cbiAgICApLFxuICAgIHJlYmFsYW5jZTogTS5zcGxpdFJlY29yZChcbiAgICAgIHt9LFxuICAgICAgeyBmbG93OiBNLmFycmF5T2YobW92ZW1lbnREZXNjU2hhcGUpIH0sXG4gICAgICB7fVxuICAgIClcbiAgfTtcbn07XG5oYXJkZW4obWFrZU9mZmVyQXJnc1NoYXBlcyk7XG5cbi8vXG52YXIgdHJhY2UxNCA9IG1ha2VUcmFjZXIoXCJQb3J0RlwiKTtcbnZhciB7IGtleXM6IGtleXM1IH0gPSBPYmplY3Q7XG52YXIgcGxhY2VMYWJlbCA9IChwbGFjZSkgPT4ge1xuICBpZiAoXCJwb3NcIiBpbiBwbGFjZSkgcmV0dXJuIHBsYWNlLnBvcy5nZXRQb29sS2V5KCk7XG4gIGlmIChcImFjY291bnRcIiBpbiBwbGFjZSkgcmV0dXJuIGNvZXJjZUFjY291bnRJZChwbGFjZS5hY2NvdW50LmdldEFkZHJlc3MoKSk7XG4gIGlmIChcInByb3h5XCIgaW4gcGxhY2UpXG4gICAgcmV0dXJuIGAke3BsYWNlLnByb3h5LmNoYWluSWR9OiR7cGxhY2UucHJveHkucmVtb3RlQWRkcmVzc31gO1xuICByZXR1cm4gYHNlYXQ6JHtwbGFjZS5rZXl3b3JkfWA7XG59O1xudmFyIG1vdmVTdGF0dXMgPSAoeyBob3csIHNyYywgZGVzdCwgYW1vdW50IH0pID0+ICh7XG4gIGhvdyxcbiAgc3JjOiBwbGFjZUxhYmVsKHNyYyksXG4gIGRlc3Q6IHBsYWNlTGFiZWwoZGVzdCksXG4gIGFtb3VudFxufSk7XG52YXIgZXJybXNnID0gKGVycikgPT4gXCJtZXNzYWdlXCIgaW4gZXJyID8gZXJyLm1lc3NhZ2UgOiBgJHtlcnJ9YDtcbnZhciB0cmFja0Zsb3cgPSBhc3luYyAocmVwb3J0ZXIsIHRvZG8pID0+IHtcbiAgY29uc3QgZmxvd0lkID0gcmVwb3J0ZXIuYWxsb2NhdGVGbG93SWQoKTtcbiAgbGV0IHN0ZXAgPSAxO1xuICBjb25zdCBtb3ZlcyA9IFtdO1xuICB0cnkge1xuICAgIGZvciAoY29uc3QgbWFrZU1vdmUgb2YgdG9kbykge1xuICAgICAgY29uc3QgbW92ZSA9IGF3YWl0IG1ha2VNb3ZlKCk7XG4gICAgICBtb3Zlcy5wdXNoKG1vdmUpO1xuICAgICAgdHJhY2UxNChzdGVwLCBcInN0ZXAgc3RhcnRpbmdcIiwgbW92ZVN0YXR1cyhtb3ZlKSk7XG4gICAgICByZXBvcnRlci5wdWJsaXNoRmxvd1N0YXR1cyhmbG93SWQsIHsgc3RlcCwgLi4ubW92ZVN0YXR1cyhtb3ZlKSB9KTtcbiAgICAgIGF3YWl0IG1vdmUuYXBwbHkoKTtcbiAgICAgIHRyYWNlMTQoc3RlcCwgXCJzdGVwIGRvbmVcIik7XG4gICAgICBjb25zdCB7IGFtb3VudCwgc3JjLCBkZXN0IH0gPSBtb3ZlO1xuICAgICAgaWYgKFwicG9zXCIgaW4gc3JjKSB7XG4gICAgICAgIHNyYy5wb3MucmVjb3JkVHJhbnNmZXJPdXQoYW1vdW50KTtcbiAgICAgIH1cbiAgICAgIGlmIChcInBvc1wiIGluIGRlc3QpIHtcbiAgICAgICAgZGVzdC5wb3MucmVjb3JkVHJhbnNmZXJJbihhbW91bnQpO1xuICAgICAgfVxuICAgICAgc3RlcCArPSAxO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlxcdTI2QTBcXHVGRTBGIHN0ZXBcIiwgc3RlcCwgXCIgZmFpbGVkXCIsIGVycik7XG4gICAgY29uc3QgZmFpbHVyZSA9IG1vdmVzW3N0ZXAgLSAxXTtcbiAgICBjb25zdCBlcnJTdGVwID0gc3RlcDtcbiAgICB3aGlsZSAoc3RlcCA+IDEpIHtcbiAgICAgIHN0ZXAgLT0gMTtcbiAgICAgIGNvbnN0IG1vdmUgPSBtb3Zlc1tzdGVwIC0gMV07XG4gICAgICBjb25zdCBob3cgPSBgdW53aW5kOiAke21vdmUuaG93fWA7XG4gICAgICByZXBvcnRlci5wdWJsaXNoRmxvd1N0YXR1cyhmbG93SWQsIHsgc3RlcCwgLi4ubW92ZVN0YXR1cyhtb3ZlKSwgaG93IH0pO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgbW92ZS5yZWNvdmVyKCk7XG4gICAgICB9IGNhdGNoIChlcnIyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJcXHUyNkEwXFx1RkUwRiB1bndpbmQgc3RlcFwiLCBzdGVwLCBcIiBmYWlsZWRcIiwgZXJyMik7XG4gICAgICAgIGNvbnN0IHsgZGVzdDogd2hlcmUsIC4uLm1zIH0gPSBtb3ZlU3RhdHVzKG1vdmUpO1xuICAgICAgICBjb25zdCBmaW5hbCA9IHsgc3RlcCwgLi4ubXMsIGhvdywgd2hlcmUsIGVycm9yOiBlcnJtc2coZXJyMikgfTtcbiAgICAgICAgcmVwb3J0ZXIucHVibGlzaEZsb3dTdGF0dXMoZmxvd0lkLCBmaW5hbCk7XG4gICAgICAgIHRocm93IGVycjI7XG4gICAgICB9XG4gICAgfVxuICAgIHJlcG9ydGVyLnB1Ymxpc2hGbG93U3RhdHVzKGZsb3dJZCwge1xuICAgICAgc3RlcDogZXJyU3RlcCxcbiAgICAgIC4uLm1vdmVTdGF0dXMoZmFpbHVyZSksXG4gICAgICBlcnJvcjogZXJybXNnKGVycilcbiAgICB9KTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbn07XG52YXIgcHJvdmlkZUNvc21vc0FjY291bnQgPSBhc3luYyAob3JjaCwgY2hhaW5OYW1lLCBraXQpID0+IHtcbiAgYXdhaXQgbnVsbDtcbiAgbGV0IHByb21pc2VNYXliZSA9IGtpdC5tYW5hZ2VyLnJlc2VydmVBY2NvdW50KGNoYWluTmFtZSk7XG4gIGlmIChwcm9taXNlTWF5YmUpIHtcbiAgICByZXR1cm4gcHJvbWlzZU1heWJlO1xuICB9XG4gIHN3aXRjaCAoY2hhaW5OYW1lKSB7XG4gICAgY2FzZSBcIm5vYmxlXCI6IHtcbiAgICAgIGNvbnN0IG5vYmxlQ2hhaW4gPSBhd2FpdCBvcmNoLmdldENoYWluKFwibm9ibGVcIik7XG4gICAgICBjb25zdCBpY2EgPSBhd2FpdCBub2JsZUNoYWluLm1ha2VBY2NvdW50KCk7XG4gICAgICBjb25zdCBpbmZvID0ge1xuICAgICAgICBuYW1lc3BhY2U6IFwiY29zbW9zXCIsXG4gICAgICAgIGNoYWluTmFtZTogXCJub2JsZVwiLFxuICAgICAgICBpY2FcbiAgICAgIH07XG4gICAgICBraXQubWFuYWdlci5yZXNvbHZlQWNjb3VudChpbmZvKTtcbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cbiAgICBjYXNlIFwiYWdvcmljXCI6IHtcbiAgICAgIGNvbnN0IGFnb3JpY0NoYWluID0gYXdhaXQgb3JjaC5nZXRDaGFpbihcImFnb3JpY1wiKTtcbiAgICAgIGNvbnN0IGxjYSA9IGF3YWl0IGFnb3JpY0NoYWluLm1ha2VBY2NvdW50KCk7XG4gICAgICBjb25zdCByZWcgPSBhd2FpdCBsY2EubW9uaXRvclRyYW5zZmVycyhraXQudGFwKTtcbiAgICAgIHRyYWNlMTQoXCJNb25pdG9yaW5nIHRyYW5zZmVycyBmb3JcIiwgbGNhLmdldEFkZHJlc3MoKS52YWx1ZSk7XG4gICAgICBjb25zdCBpbmZvID0ge1xuICAgICAgICBuYW1lc3BhY2U6IFwiY29zbW9zXCIsXG4gICAgICAgIGNoYWluTmFtZSxcbiAgICAgICAgbGNhLFxuICAgICAgICByZWdcbiAgICAgIH07XG4gICAgICBraXQubWFuYWdlci5yZXNvbHZlQWNjb3VudChpbmZvKTtcbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgRXJyb3IoXCJ1bnJlYWNoYWJsZVwiKTtcbiAgfVxufTtcbnZhciBnZXRBc3NldFBsYWNlUmVmS2luZCA9IChyZWYpID0+IHtcbiAgaWYgKGtleXM1KFBvb2xQbGFjZXMpLmluY2x1ZGVzKHJlZikpIHJldHVybiBcInBvc1wiO1xuICBpZiAoZ2V0S2V5d29yZE9mUGxhY2VSZWYocmVmKSkgcmV0dXJuIFwic2VhdFwiO1xuICBpZiAoZ2V0Q2hhaW5OYW1lT2ZQbGFjZVJlZihyZWYpKSByZXR1cm4gXCJhY2NvdW50SWRcIjtcbiAgdGhyb3cgdGhyb3dSZWRhY3RlZGBiYWQgcmVmOiAke3JlZn1gO1xufTtcbnZhciB3YXlGcm9tU3JjVG9EZXNjID0gKG1vdmVEZXNjKSA9PiB7XG4gIGNvbnN0IHsgc3JjIH0gPSBtb3ZlRGVzYztcbiAgY29uc3QgeyBkZXN0IH0gPSBtb3ZlRGVzYztcbiAgY29uc3Qgc3JjS2luZCA9IGdldEFzc2V0UGxhY2VSZWZLaW5kKHNyYyk7XG4gIHN3aXRjaCAoc3JjS2luZCkge1xuICAgIGNhc2UgXCJwb3NcIjoge1xuICAgICAgY29uc3QgZGVzdE5hbWUgPSBnZXRDaGFpbk5hbWVPZlBsYWNlUmVmKGRlc3QpO1xuICAgICAgaWYgKCFkZXN0TmFtZSlcbiAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBzcmMgcG9zIG11c3QgaGF2ZSBhY2NvdW50IGFzIGRlc3QgJHtxdW90ZShtb3ZlRGVzYyl9YDtcbiAgICAgIGNvbnN0IHBvb2xLZXkgPSBzcmM7XG4gICAgICBjb25zdCB7IHByb3RvY29sIH0gPSBQb29sUGxhY2VzW3Bvb2xLZXldO1xuICAgICAgY29uc3QgZmVlUmVxdWlyZWQgPSBbXCJDb21wb3VuZFwiLCBcIkFhdmVcIl07XG4gICAgICBtb3ZlRGVzYy5mZWUgfHwgIWZlZVJlcXVpcmVkLmluY2x1ZGVzKHByb3RvY29sKSB8fCB0aHJvd1JlZGFjdGVkYG1pc3NpbmcgZmVlICR7cXVvdGUobW92ZURlc2MpfWA7XG4gICAgICByZXR1cm4geyBob3c6IHByb3RvY29sLCBwb29sS2V5LCBkZXN0OiBkZXN0TmFtZSB9O1xuICAgIH1cbiAgICBjYXNlIFwic2VhdFwiOlxuICAgICAgZ2V0QXNzZXRQbGFjZVJlZktpbmQoZGVzdCkgPT09IFwiYWNjb3VudElkXCIgfHwgLy9cbiAgICAgIHRocm93UmVkYWN0ZWRgc3JjIHNlYXQgbXVzdCBoYXZlIGFjY291bnQgYXMgZGVzdCAke3F1b3RlKG1vdmVEZXNjKX1gO1xuICAgICAgcmV0dXJuIHsgaG93OiBcImxvY2FsVHJhbnNmZXJcIiB9O1xuICAgIGNhc2UgXCJhY2NvdW50SWRcIjoge1xuICAgICAgY29uc3Qgc3JjTmFtZSA9IGdldENoYWluTmFtZU9mUGxhY2VSZWYoc3JjKTtcbiAgICAgIGFzc2VydDIoc3JjTmFtZSk7XG4gICAgICBjb25zdCBkZXN0S2luZCA9IGdldEFzc2V0UGxhY2VSZWZLaW5kKGRlc3QpO1xuICAgICAgc3dpdGNoIChkZXN0S2luZCkge1xuICAgICAgICBjYXNlIFwic2VhdFwiOlxuICAgICAgICAgIHJldHVybiB7IGhvdzogXCJ3aXRoZHJhd1RvU2VhdFwiIH07XG4gICAgICAgIC8vXG4gICAgICAgIGNhc2UgXCJhY2NvdW50SWRcIjpcbiAgICAgICAgICBjb25zdCBkZXN0TmFtZSA9IGdldENoYWluTmFtZU9mUGxhY2VSZWYoZGVzdCk7XG4gICAgICAgICAgYXNzZXJ0MihkZXN0TmFtZSk7XG4gICAgICAgICAgaWYgKGtleXM1KEF4ZWxhckNoYWluKS5pbmNsdWRlcyhkZXN0TmFtZSkpIHtcbiAgICAgICAgICAgIHNyY05hbWUgPT09IFwibm9ibGVcIiB8fCB0aHJvd1JlZGFjdGVkYHNyYyBmb3IgJHtxdW90ZShkZXN0TmFtZSl9IG11c3QgYmUgbm9ibGVgO1xuICAgICAgICAgICAgcmV0dXJuIHsgaG93OiBcIkNDVFBcIiwgZGVzdDogZGVzdE5hbWUgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGtleXM1KEF4ZWxhckNoYWluKS5pbmNsdWRlcyhzcmNOYW1lKSkge1xuICAgICAgICAgICAgZGVzdE5hbWUgPT09IFwibm9ibGVcIiB8fCB0aHJvd1JlZGFjdGVkYGRlc3QgZm9yICR7cXVvdGUoc3JjTmFtZSl9IG11c3QgYmUgbm9ibGVgO1xuICAgICAgICAgICAgcmV0dXJuIHsgaG93OiBcIkNDVFBcIiwgc3JjOiBzcmNOYW1lIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzcmNOYW1lID09PSBcImFnb3JpY1wiICYmIGRlc3ROYW1lID09PSBcIm5vYmxlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGhvdzogXCJJQkNcIiwgc3JjOiBzcmNOYW1lLCBkZXN0OiBkZXN0TmFtZSB9O1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3JjTmFtZSA9PT0gXCJub2JsZVwiICYmIGRlc3ROYW1lID09PSBcImFnb3JpY1wiKSB7XG4gICAgICAgICAgICByZXR1cm4geyBob3c6IFwiSUJDXCIsIHNyYzogc3JjTmFtZSwgZGVzdDogZGVzdE5hbWUgfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGBubyByb3V0ZSBiZXR3ZWVuIGNoYWluczogJHtxdW90ZShtb3ZlRGVzYyl9YDtcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJwb3NcIjoge1xuICAgICAgICAgIGNvbnN0IHBvb2xLZXkgPSBkZXN0O1xuICAgICAgICAgIHJldHVybiB7IGhvdzogUG9vbFBsYWNlc1twb29sS2V5XS5wcm90b2NvbCwgcG9vbEtleSwgc3JjOiBzcmNOYW1lIH07XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYHVucmVhY2hhYmxlOiR7ZGVzdEtpbmR9ICR7ZGVzdH1gO1xuICAgICAgfVxuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgdGhyb3dSZWRhY3RlZGB1bnJlYWNoYWJsZTogJHtzcmNLaW5kfSAke3NyY31gO1xuICB9XG59O1xudmFyIHN0ZXBGbG93ID0gYXN5bmMgKG9yY2gsIGN0eCwgc2VhdCwgbW92ZXMsIGtpdCkgPT4ge1xuICBjb25zdCB0b2RvID0gW107XG4gIGNvbnN0IHByb3ZpZGVFVk1JbmZvID0gYXN5bmMgKF9uYW1lLCBjaGFpbiwgbW92ZSkgPT4ge1xuICAgIGNvbnN0IGF4ZWxhciA9IGF3YWl0IG9yY2guZ2V0Q2hhaW4oXCJheGVsYXJcIik7XG4gICAgY29uc3QgeyBkZW5vbSB9ID0gY3R4LmdtcEZlZUluZm87XG4gICAgY29uc3QgZmVlID0geyBkZW5vbSwgdmFsdWU6IG1vdmUuZmVlID8gbW92ZS5mZWUudmFsdWUgOiAwbiB9O1xuICAgIGNvbnN0IHsgYXhlbGFySWRzIH0gPSBjdHg7XG4gICAgY29uc3QgZ21wID0geyBjaGFpbjogYXhlbGFyLCBmZWU6IG1vdmUuZmVlPy52YWx1ZSB8fCAwbiwgYXhlbGFySWRzIH07XG4gICAgY29uc3QgeyBsY2EgfSA9IGF3YWl0IHByb3ZpZGVDb3Ntb3NBY2NvdW50KG9yY2gsIFwiYWdvcmljXCIsIGtpdCk7XG4gICAgY29uc3QgZ0luZm8gPSBhd2FpdCBwcm92aWRlRVZNQWNjb3VudChjaGFpbiwgZ21wLCBsY2EsIGN0eCwga2l0KTtcbiAgICBjb25zdCBhY2NvdW50SWQgPSBgJHtnSW5mby5jaGFpbklkfToke2dJbmZvLnJlbW90ZUFkZHJlc3N9YDtcbiAgICBjb25zdCBldm1DdHggPSBoYXJkZW4oe1xuICAgICAgYWRkcmVzc2VzOiBjdHguY29udHJhY3RzW2NoYWluXSxcbiAgICAgIGxjYSxcbiAgICAgIGdtcEZlZTogZmVlLFxuICAgICAgZ21wQ2hhaW46IGF4ZWxhcixcbiAgICAgIGF4ZWxhcklkc1xuICAgIH0pO1xuICAgIHJldHVybiB7IGV2bUN0eCwgZ0luZm8sIGFjY291bnRJZCB9O1xuICB9O1xuICBjb25zdCBtYWtlRVZNUHJvdG9jb2xTdGVwID0gYXN5bmMgKHdheSwgbW92ZSkgPT4ge1xuICAgIGNvbnN0IGNoYWluTmFtZSA9IFwic3JjXCIgaW4gd2F5ID8gd2F5LnNyYyA6IHdheS5kZXN0O1xuICAgIGFzc2VydDIoa2V5czUoQXhlbGFyQ2hhaW4pLmluY2x1ZGVzKGNoYWluTmFtZSkpO1xuICAgIGNvbnN0IGV2bUNoYWluID0gY2hhaW5OYW1lO1xuICAgIGNvbnN0IFtjb250cmFjdDIsIHBJbXBsXSA9IHdheS5ob3cgPT09IFwiQ29tcG91bmRcIiA/IFtcImNvbXBvdW5kXCIsIENvbXBvdW5kUHJvdG9jb2xdIDogW1wiYWF2ZVBvb2xcIiwgQWF2ZVByb3RvY29sXTtcbiAgICBjb25zdCB7IGV2bUN0eCwgZ0luZm8sIGFjY291bnRJZCB9ID0gYXdhaXQgcHJvdmlkZUVWTUluZm8oXG4gICAgICBjb250cmFjdDIsXG4gICAgICBldm1DaGFpbixcbiAgICAgIG1vdmVcbiAgICApO1xuICAgIGNvbnN0IHBvcyA9IGtpdC5tYW5hZ2VyLnByb3ZpZGVQb3NpdGlvbih3YXkucG9vbEtleSwgd2F5LmhvdywgYWNjb3VudElkKTtcbiAgICBjb25zdCB7IGFtb3VudCB9ID0gbW92ZTtcbiAgICBpZiAoXCJzcmNcIiBpbiB3YXkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhvdzogd2F5LmhvdyxcbiAgICAgICAgYW1vdW50LFxuICAgICAgICBzcmM6IHsgcHJveHk6IGdJbmZvIH0sXG4gICAgICAgIGRlc3Q6IHsgcG9zIH0sXG4gICAgICAgIGFwcGx5OiAoKSA9PiBwSW1wbC5zdXBwbHkoZXZtQ3R4LCBhbW91bnQsIGdJbmZvKSxcbiAgICAgICAgcmVjb3ZlcjogKCkgPT4gYXNzZXJ0Mi5mYWlsKFwibGFzdCBzdGVwLiBjYW5ub3QgcmVjb3ZlclwiKVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaG93OiB3YXkuaG93LFxuICAgICAgICBhbW91bnQsXG4gICAgICAgIHNyYzogeyBwb3MgfSxcbiAgICAgICAgZGVzdDogeyBwcm94eTogZ0luZm8gfSxcbiAgICAgICAgYXBwbHk6ICgpID0+IHBJbXBsLndpdGhkcmF3KGV2bUN0eCwgYW1vdW50LCBnSW5mbyksXG4gICAgICAgIHJlY292ZXI6ICgpID0+IHBJbXBsLnN1cHBseShldm1DdHgsIGFtb3VudCwgZ0luZm8pXG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcHJvdmlkZUFnb3JpY05vYmxlID0gKCkgPT4gUHJvbWlzZS5hbGwoW1xuICAgIHByb3ZpZGVDb3Ntb3NBY2NvdW50KG9yY2gsIFwiYWdvcmljXCIsIGtpdCksXG4gICAgcHJvdmlkZUNvc21vc0FjY291bnQob3JjaCwgXCJub2JsZVwiLCBraXQpXG4gIF0pO1xuICBmb3IgKGNvbnN0IG1vdmUgb2YgbW92ZXMpIHtcbiAgICB0cmFjZTE0KFwid2F5RnJvbVNyY1RvRGVzYz9cIiwgbW92ZSk7XG4gICAgY29uc3Qgd2F5ID0gd2F5RnJvbVNyY1RvRGVzYyhtb3ZlKTtcbiAgICBjb25zdCB7IGFtb3VudCB9ID0gbW92ZTtcbiAgICBzd2l0Y2ggKHdheS5ob3cpIHtcbiAgICAgIGNhc2UgXCJsb2NhbFRyYW5zZmVyXCI6IHtcbiAgICAgICAgY29uc3QgeyBnaXZlIH0gPSBzZWF0LmdldFByb3Bvc2FsKCk7XG4gICAgICAgIGNvbnN0IGFtb3VudHMgPSBoYXJkZW4oe1xuICAgICAgICAgIERlcG9zaXQ6IGFtb3VudCxcbiAgICAgICAgICAuLi4oXCJHbXBGZWVcImluIGdpdmUgPyB7IEdtcEZlZTogZ2l2ZS5HbXBGZWUgfSA6IHt9KVxuICAgICAgICB9KTtcbiAgICAgICAgdG9kby5wdXNoKGFzeW5jICgpID0+IHtcbiAgICAgICAgICBjb25zdCB7IGxjYSB9ID0gYXdhaXQgcHJvdmlkZUNvc21vc0FjY291bnQob3JjaCwgXCJhZ29yaWNcIiwga2l0KTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaG93OiBcImxvY2FsVHJhbnNmZXJcIixcbiAgICAgICAgICAgIHNyYzogeyBzZWF0LCBrZXl3b3JkOiBcIkRlcG9zaXRcIiB9LFxuICAgICAgICAgICAgZGVzdDogeyBhY2NvdW50OiBsY2EgfSxcbiAgICAgICAgICAgIGFtb3VudCxcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICBhcHBseTogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICBhd2FpdCBjdHguem9lVG9vbHMubG9jYWxUcmFuc2ZlcihzZWF0LCBsY2EsIGFtb3VudHMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlY292ZXI6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgYXdhaXQgY3R4LnpvZVRvb2xzLndpdGhkcmF3VG9TZWF0KGxjYSwgc2VhdCwgYW1vdW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcIndpdGhkcmF3VG9TZWF0XCI6IHtcbiAgICAgICAgY29uc3QgYW1vdW50cyA9IHsgQ2FzaDogYW1vdW50IH07XG4gICAgICAgIHRvZG8ucHVzaChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBsY2EgfSA9IGF3YWl0IHByb3ZpZGVDb3Ntb3NBY2NvdW50KG9yY2gsIFwiYWdvcmljXCIsIGtpdCk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhvdzogXCJ3aXRoZHJhd1RvU2VhdFwiLFxuICAgICAgICAgICAgc3JjOiB7IGFjY291bnQ6IGxjYSB9LFxuICAgICAgICAgICAgZGVzdDogeyBzZWF0LCBrZXl3b3JkOiBcIkNhc2hcIiB9LFxuICAgICAgICAgICAgYW1vdW50LFxuICAgICAgICAgICAgYXBwbHk6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgYXdhaXQgY3R4LnpvZVRvb2xzLndpdGhkcmF3VG9TZWF0KGxjYSwgc2VhdCwgYW1vdW50cyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVjb3ZlcjogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICBhd2FpdCBjdHguem9lVG9vbHMubG9jYWxUcmFuc2ZlcihzZWF0LCBsY2EsIGFtb3VudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJJQkNcIjoge1xuICAgICAgICBpZiAod2F5LnNyYyA9PT0gXCJhZ29yaWNcIiAmJiB3YXkuZGVzdCA9PT0gXCJub2JsZVwiKSB7XG4gICAgICAgICAgY29uc3QgeyBob3csIGFwcGx5OiBhcHBseTgsIHJlY292ZXIgfSA9IGFnb3JpY1RvTm9ibGU7XG4gICAgICAgICAgdG9kby5wdXNoKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IFthSW5mbywgbkluZm9dID0gYXdhaXQgcHJvdmlkZUFnb3JpY05vYmxlKCk7XG4gICAgICAgICAgICBjb25zdCBjdHhJID0geyB1c2RjOiBjdHgudXNkYyB9O1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgaG93LFxuICAgICAgICAgICAgICBhbW91bnQsXG4gICAgICAgICAgICAgIHNyYzogeyBhY2NvdW50OiBhSW5mby5sY2EgfSxcbiAgICAgICAgICAgICAgZGVzdDogeyBhY2NvdW50OiBuSW5mby5pY2EgfSxcbiAgICAgICAgICAgICAgYXBwbHk6ICgpID0+IGFwcGx5OChjdHhJLCBhbW91bnQsIGFJbmZvLCBuSW5mbyksXG4gICAgICAgICAgICAgIHJlY292ZXI6ICgpID0+IHJlY292ZXIoY3R4SSwgYW1vdW50LCBhSW5mbywgbkluZm8pXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHdheS5zcmMgPT09IFwibm9ibGVcIiAmJiB3YXkuZGVzdCA9PT0gXCJhZ29yaWNcIikge1xuICAgICAgICAgIGNvbnN0IHsgaG93LCBhcHBseTogYXBwbHk4LCByZWNvdmVyIH0gPSBub2JsZVRvQWdvcmljO1xuICAgICAgICAgIHRvZG8ucHVzaChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBbYUluZm8sIG5JbmZvXSA9IGF3YWl0IHByb3ZpZGVBZ29yaWNOb2JsZSgpO1xuICAgICAgICAgICAgY29uc3QgY3R4SSA9IHsgdXNkYzogY3R4LnVzZGMgfTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGhvdyxcbiAgICAgICAgICAgICAgYW1vdW50LFxuICAgICAgICAgICAgICBzcmM6IHsgYWNjb3VudDogbkluZm8uaWNhIH0sXG4gICAgICAgICAgICAgIGRlc3Q6IHsgYWNjb3VudDogYUluZm8ubGNhIH0sXG4gICAgICAgICAgICAgIGFwcGx5OiAoKSA9PiBhcHBseTgoY3R4SSwgYW1vdW50LCBuSW5mbywgYUluZm8pLFxuICAgICAgICAgICAgICByZWNvdmVyOiAoKSA9PiByZWNvdmVyKGN0eEksIGFtb3VudCwgbkluZm8sIGFJbmZvKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJDQ1RQXCI6IHtcbiAgICAgICAgdG9kby5wdXNoKGFzeW5jICgpID0+IHtcbiAgICAgICAgICBjb25zdCB7IGhvdywgYXBwbHk6IGFwcGx5OCwgcmVjb3ZlciB9ID0gQ0NUUDtcbiAgICAgICAgICBjb25zdCBbeyBsY2EgfSwgbkluZm8sIGF4ZWxhcl0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICBwcm92aWRlQ29zbW9zQWNjb3VudChvcmNoLCBcImFnb3JpY1wiLCBraXQpLFxuICAgICAgICAgICAgcHJvdmlkZUNvc21vc0FjY291bnQob3JjaCwgXCJub2JsZVwiLCBraXQpLFxuICAgICAgICAgICAgb3JjaC5nZXRDaGFpbihcImF4ZWxhclwiKVxuICAgICAgICAgIF0pO1xuICAgICAgICAgIGNvbnN0IGV2bUNoYWluID0gXCJkZXN0XCIgaW4gd2F5ID8gd2F5LmRlc3QgOiB3YXkuc3JjO1xuICAgICAgICAgIGNvbnN0IHsgZXZtQ3R4LCBnSW5mbyB9ID0gYXdhaXQgcHJvdmlkZUVWTUluZm8oXG4gICAgICAgICAgICBcInRva2VuTWVzc2VuZ2VyXCIsXG4gICAgICAgICAgICBldm1DaGFpbixcbiAgICAgICAgICAgIG1vdmVcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChcImRlc3RcIiBpbiB3YXkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGhvdzogQ0NUUC5ob3csXG4gICAgICAgICAgICAgIGFtb3VudCxcbiAgICAgICAgICAgICAgc3JjOiB7IGFjY291bnQ6IG5JbmZvLmljYSB9LFxuICAgICAgICAgICAgICBkZXN0OiB7IHByb3h5OiBnSW5mbyB9LFxuICAgICAgICAgICAgICBhcHBseTogKCkgPT4gQ0NUUC5hcHBseShudWxsLCBhbW91bnQsIG5JbmZvLCBnSW5mbyksXG4gICAgICAgICAgICAgIHJlY292ZXI6ICgpID0+IENDVFAucmVjb3ZlcihudWxsLCBhbW91bnQsIG5JbmZvLCBnSW5mbylcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGhvdzogQ0NUUGZyb21FVk0uaG93LFxuICAgICAgICAgICAgICBhbW91bnQsXG4gICAgICAgICAgICAgIHNyYzogeyBwcm94eTogZ0luZm8gfSxcbiAgICAgICAgICAgICAgZGVzdDogeyBhY2NvdW50OiBuSW5mby5pY2EgfSxcbiAgICAgICAgICAgICAgYXBwbHk6ICgpID0+IENDVFBmcm9tRVZNLmFwcGx5KGV2bUN0eCwgYW1vdW50LCBnSW5mbywgbkluZm8pLFxuICAgICAgICAgICAgICByZWNvdmVyOiAoKSA9PiBDQ1RQZnJvbUVWTS5yZWNvdmVyKGV2bUN0eCwgYW1vdW50LCBnSW5mbywgbkluZm8pXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcIlVTRE5cIjoge1xuICAgICAgICB0b2RvLnB1c2goYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IG5JbmZvID0gYXdhaXQgcHJvdmlkZUNvc21vc0FjY291bnQob3JjaCwgXCJub2JsZVwiLCBraXQpO1xuICAgICAgICAgIGNvbnN0IGFjY3RJZCA9IGNvZXJjZUFjY291bnRJZChuSW5mby5pY2EuZ2V0QWRkcmVzcygpKTtcbiAgICAgICAgICBjb25zdCBwb3MgPSBraXQubWFuYWdlci5wcm92aWRlUG9zaXRpb24oXCJVU0ROXCIsIFwiVVNETlwiLCBhY2N0SWQpO1xuICAgICAgICAgIGNvbnN0IHZhdWx0ID0gd2F5LnBvb2xLZXkgPT09IFwiVVNETlZhdWx0XCIgPyAxIDogdm9pZCAwO1xuICAgICAgICAgIGNvbnN0IGN0eFUgPSB7IHVzZG5PdXQ6IG1vdmU/LmRldGFpbD8udXNkbk91dCwgdmF1bHQgfTtcbiAgICAgICAgICBpZiAoXCJzcmNcIiBpbiB3YXkpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgc3VwcGx5IH0gPSBwcm90b2NvbFVTRE47XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBob3c6IHdheS5ob3csXG4gICAgICAgICAgICAgIGFtb3VudCxcbiAgICAgICAgICAgICAgc3JjOiB7IGFjY291bnQ6IG5JbmZvLmljYSB9LFxuICAgICAgICAgICAgICBkZXN0OiB7IHBvcyB9LFxuICAgICAgICAgICAgICBhcHBseTogKCkgPT4gc3VwcGx5KGN0eFUsIGFtb3VudCwgbkluZm8pLFxuICAgICAgICAgICAgICByZWNvdmVyOiAoKSA9PiB0aHJvd1JlZGFjdGVkYG5vIHJlY292ZXJ5IGZyb20gc3VwcGx5IChmaW5hbCBzdGVwKWBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHsgd2l0aGRyYXcsIHN1cHBseSB9ID0gcHJvdG9jb2xVU0ROO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgaG93OiB3YXkuaG93LFxuICAgICAgICAgICAgICBhbW91bnQsXG4gICAgICAgICAgICAgIHNyYzogeyBwb3MgfSxcbiAgICAgICAgICAgICAgZGVzdDogeyBhY2NvdW50OiBuSW5mby5pY2EgfSxcbiAgICAgICAgICAgICAgYXBwbHk6ICgpID0+IHdpdGhkcmF3KGN0eFUsIGFtb3VudCwgbkluZm8pLFxuICAgICAgICAgICAgICByZWNvdmVyOiAoKSA9PiBzdXBwbHkoY3R4VSwgYW1vdW50LCBuSW5mbylcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiQ29tcG91bmRcIjpcbiAgICAgICAgdG9kby5wdXNoKFxuICAgICAgICAgICgpID0+IG1ha2VFVk1Qcm90b2NvbFN0ZXAod2F5LCBtb3ZlKVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJBYXZlXCI6XG4gICAgICAgIHRvZG8ucHVzaChcbiAgICAgICAgICAoKSA9PiBtYWtlRVZNUHJvdG9jb2xTdGVwKHdheSwgbW92ZSlcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyB0aHJvd1JlZGFjdGVkYHVucmVhY2hhYmxlOiAke3dheX1gO1xuICAgIH1cbiAgfVxuICBhd2FpdCB0cmFja0Zsb3coa2l0LnJlcG9ydGVyLCB0b2RvKTtcbiAgdHJhY2UxNChcInN0ZXBGbG93IGRvbmVcIik7XG59O1xudmFyIHJlYmFsYW5jZSA9IGFzeW5jIChvcmNoLCBjdHgsIHNlYXQsIG9mZmVyQXJncywga2l0KSA9PiB7XG4gIGNvbnN0IHByb3Bvc2FsID0gc2VhdC5nZXRQcm9wb3NhbCgpO1xuICB0cmFjZTE0KFwicmViYWxhbmNlIHByb3Bvc2FsXCIsIHByb3Bvc2FsLmdpdmUsIHByb3Bvc2FsLndhbnQsIG9mZmVyQXJncyk7XG4gIGlmIChcImZsb3dcIiBpbiBvZmZlckFyZ3MpIHtcbiAgICBhd2FpdCBzdGVwRmxvdyhvcmNoLCBjdHgsIHNlYXQsIG9mZmVyQXJncy5mbG93LCBraXQpO1xuICB9XG4gIHNlYXQuZXhpdCgpO1xufTtcbnZhciByZWJhbGFuY2VGcm9tVHJhbnNmZXIgPSBhc3luYyAob3JjaCwgY3R4LCBwYWNrZXQsIGtpdCkgPT4ge1xuICBhd2FpdCBudWxsO1xuICBjb25zdCB7IHJlYWRlciB9ID0ga2l0O1xuICBjb25zdCBsY2EgPSByZWFkZXIuZ2V0TG9jYWxBY2NvdW50KCk7XG4gIGNvbnN0IHBhcnNlZCA9IGF3YWl0IGxjYS5wYXJzZUluYm91bmRUcmFuc2ZlcihwYWNrZXQpO1xuICBpZiAoIXBhcnNlZCkge1xuICAgIHJldHVybiBoYXJkZW4oeyBwYXJzZWQ6IG51bGwsIGhhbmRsZWQ6IGZhbHNlIH0pO1xuICB9XG4gIHRyYWNlMTQoXCJyZWJhbGFuY2VGcm9tVHJhbnNmZXIgcGFyc2VkXCIsIHBhcnNlZCk7XG4gIGNvbnN0IHtcbiAgICBhbW91bnQsXG4gICAgZXh0cmE6IHsgcmVjZWl2ZXIgfVxuICB9ID0gcGFyc2VkO1xuICBjb25zdCB7IGJhc2VBZGRyZXNzLCBxdWVyeSB9ID0gZGVjb2RlQWRkcmVzc0hvb2socmVjZWl2ZXIpO1xuICBjb25zdCB7IHJlYmFsYW5jZTogc3RyYXRlZ3kgfSA9IHF1ZXJ5O1xuICBpZiAoc3RyYXRlZ3kgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiBoYXJkZW4oeyBwYXJzZWQsIGhhbmRsZWQ6IGZhbHNlIH0pO1xuICB9XG4gIHN3aXRjaCAoc3RyYXRlZ3kpIHtcbiAgICAvL1xuICAgIC8vXG4gICAgLy9cbiAgICBjYXNlIFJlYmFsYW5jZVN0cmF0ZWd5LlByZXNldDpcbiAgICBjYXNlIFJlYmFsYW5jZVN0cmF0ZWd5LlByZXNlcnZlRXhpc3RpbmdQcm9wb3J0aW9uczoge1xuICAgICAgdHJhY2UxNChcbiAgICAgICAgXCJyZWJhbGFuY2VGcm9tVHJhbnNmZXIgUHJlc2VydmVFeGlzdGluZ1Byb3BvcnRpb25zXCIsXG4gICAgICAgIGFtb3VudCxcbiAgICAgICAgcXVlcnksXG4gICAgICAgIGJhc2VBZGRyZXNzXG4gICAgICApO1xuICAgICAgdGhyb3cgaGFyZGVuKHtcbiAgICAgICAgbXNnOiBcInJlYmFsYW5jZUZyb21UcmFuc2ZlciB1bmltcGxlbWVudGVkIFByZXNlcnZlRXhpc3RpbmdQcm9wb3J0aW9ucyBzdHJhdGVneVwiLFxuICAgICAgICBhbW91bnQsXG4gICAgICAgIHF1ZXJ5LFxuICAgICAgICBiYXNlQWRkcmVzc1xuICAgICAgfSk7XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHRocm93UmVkYWN0ZWRgdW5rbm93biByZWJhbGFuY2Ugc3RyYXRlZ3kgJHtzdHJhdGVneX0gZm9yICR7YW1vdW50fSBpbiAke2Jhc2VBZGRyZXNzfWA7XG4gICAgfVxuICB9XG4gIHJldHVybiBoYXJkZW4oeyBwYXJzZWQsIGhhbmRsZWQ6IHRydWUgfSk7XG59O1xudmFyIG9wZW5Qb3J0Zm9saW8gPSBhc3luYyAob3JjaCwgY3R4LCBzZWF0LCBvZmZlckFyZ3MpID0+IHtcbiAgYXdhaXQgbnVsbDtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IG1ha2VQb3J0Zm9saW9LaXQsIC4uLmN0eEkgfSA9IGN0eDtcbiAgICBjb25zdCB7IGluZXJ0U3Vic2NyaWJlciB9ID0gY3R4STtcbiAgICBjb25zdCBraXQgPSBtYWtlUG9ydGZvbGlvS2l0KCk7XG4gICAgYXdhaXQgcHJvdmlkZUNvc21vc0FjY291bnQob3JjaCwgXCJhZ29yaWNcIiwga2l0KTtcbiAgICBpZiAoIXNlYXQuaGFzRXhpdGVkKCkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHJlYmFsYW5jZShvcmNoLCBjdHhJLCBzZWF0LCBvZmZlckFyZ3MsIGtpdCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlxcdTI2QTBcXHVGRTBGIHJlYmFsYW5jZSBmYWlsZWRcIiwgZXJyKTtcbiAgICAgICAgc2VhdC5mYWlsKGVycik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghc2VhdC5oYXNFeGl0ZWQoKSkgc2VhdC5leGl0KCk7XG4gICAgY29uc3QgcHVibGljU3Vic2NyaWJlcnMgPSB7XG4gICAgICBwb3J0Zm9saW86IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwiUG9ydGZvbGlvXCIsXG4gICAgICAgIHN0b3JhZ2VQYXRoOiBhd2FpdCBraXQucmVhZGVyLmdldFN0b3JhZ2VQYXRoKCksXG4gICAgICAgIHN1YnNjcmliZXI6IGluZXJ0U3Vic2NyaWJlclxuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGhhcmRlbih7XG4gICAgICBpbnZpdGF0aW9uTWFrZXJzOiBraXQuaW52aXRhdGlvbk1ha2VycyxcbiAgICAgIHB1YmxpY1N1YnNjcmliZXJzXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJcXHV7MUY2QTh9IG9wZW5Qb3J0Zm9saW8gZmxvdyBmYWlsZWRcIiwgZXJyKTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbn07XG5oYXJkZW4ob3BlblBvcnRmb2xpbyk7XG5cbi8vXG52YXIgdHJhY2UxNSA9IG1ha2VUcmFjZXIoXCJQb3J0Q1wiKTtcbnZhciB7IGZyb21FbnRyaWVzOiBmcm9tRW50cmllczE1LCBrZXlzOiBrZXlzNiB9ID0gT2JqZWN0O1xudmFyIGludGVyZmFjZVRPRE8gPSB2b2lkIDA7XG52YXIgRVZNQ29udHJhY3RBZGRyZXNzZXNTaGFwZSA9IE0uc3BsaXRSZWNvcmQoe1xuICBhYXZlUG9vbDogTS5zdHJpbmcoKSxcbiAgY29tcG91bmQ6IE0uc3RyaW5nKCksXG4gIGZhY3Rvcnk6IE0uc3RyaW5nKCksXG4gIHVzZGM6IE0uc3RyaW5nKClcbn0pO1xudmFyIEF4ZWxhckNvbmZpZ1BhdHRlcm4gPSBNLnNwbGl0UmVjb3JkKHtcbiAgYXhlbGFySWQ6IE0uc3RyaW5nKCksXG4gIGNoYWluSW5mbzogQ2hhaW5JbmZvU2hhcGUsXG4gIGNvbnRyYWN0czogRVZNQ29udHJhY3RBZGRyZXNzZXNTaGFwZVxufSk7XG52YXIgJGPNj19BeGVsYXJDb25maWdTaGFwZT1NLnNwbGl0UmVjb3JkKFxuICBmcm9tRW50cmllczE1KFxuICAgIGtleXM2KEF4ZWxhckNoYWluKS5tYXAoKGNoYWluKSA9PiBbY2hhaW4sIEF4ZWxhckNvbmZpZ1BhdHRlcm5dKVxuICApXG4pO0F4ZWxhckNvbmZpZ1NoYXBlPSRjzY9fQXhlbGFyQ29uZmlnU2hhcGU7XG52YXIgRVZNQ29udHJhY3RBZGRyZXNzZXNNYXAgPSBNLnNwbGl0UmVjb3JkKFxuICBmcm9tRW50cmllczE1KFxuICAgIGtleXM2KEF4ZWxhckNoYWluKS5tYXAoKGNoYWluKSA9PiBbY2hhaW4sIEVWTUNvbnRyYWN0QWRkcmVzc2VzU2hhcGVdKVxuICApXG4pO1xudmFyIEF4ZWxhcklkc1BhdHRlcm4gPSBNLnN0cmluZygpO1xudmFyIEF4ZWxhcklkU2hhcGUgPSBNLnNwbGl0UmVjb3JkKFxuICBmcm9tRW50cmllczE1KGtleXM2KEF4ZWxhckNoYWluKS5tYXAoKGNoYWluKSA9PiBbY2hhaW4sIEF4ZWxhcklkc1BhdHRlcm5dKSlcbik7XG52YXIgcHJpdmF0ZUFyZ3NTaGFwZSA9IHtcbiAgLi4uT3JjaGVzdHJhdGlvblBvd2Vyc1NoYXBlLFxuICBtYXJzaGFsbGVyOiBNLnJlbW90YWJsZShcIm1hcnNoYWxsZXJcIiksXG4gIHN0b3JhZ2VOb2RlOiBNLnJlbW90YWJsZShcInN0b3JhZ2VOb2RlXCIpLFxuICBjaGFpbkluZm86IE0uYW5kKFxuICAgIE0ucmVjb3JkT2YoTS5zdHJpbmcoKSwgQ2hhaW5JbmZvU2hhcGUpLFxuICAgIE0uc3BsaXRSZWNvcmQoeyBhZ29yaWM6IE0uYW55KCksIG5vYmxlOiBNLmFueSgpIH0pXG4gICksXG4gIGFzc2V0SW5mbzogTS5hcnJheU9mKFtNLnN0cmluZygpLCBEZW5vbURldGFpbFNoYXBlXSksXG4gIGF4ZWxhcklkczogQXhlbGFySWRTaGFwZSxcbiAgY29udHJhY3RzOiBFVk1Db250cmFjdEFkZHJlc3Nlc01hcFxufTtcbnZhciAkY82PX21ldGE9e1xuICBwcml2YXRlQXJnc1NoYXBlXG59O21ldGE9JGPNj19tZXRhO1xuaGFyZGVuKG1ldGEpO1xudmFyICRjzY9fY29udHJhY3Q9YXN5bmMoemNmLHByaXZhdGVBcmdzLCB6b25lLCB0b29scykgPT4ge1xuICBjb25zdCB7XG4gICAgY2hhaW5JbmZvLFxuICAgIGFzc2V0SW5mbyxcbiAgICBheGVsYXJJZHMsXG4gICAgY29udHJhY3RzLFxuICAgIHRpbWVyU2VydmljZSxcbiAgICBtYXJzaGFsbGVyLFxuICAgIHN0b3JhZ2VOb2RlXG4gIH0gPSBwcml2YXRlQXJncztcbiAgY29uc3QgeyBicmFuZHMgfSA9IHpjZi5nZXRUZXJtcygpO1xuICBjb25zdCB7IG9yY2hlc3RyYXRlQWxsLCB6b2VUb29scywgY2hhaW5IdWIsIHZvd1Rvb2xzIH0gPSB0b29scztcbiAgYXNzZXJ0KGJyYW5kcy5VU0RDLCBcIlVTREMgbWlzc2luZyBmcm9tIGJyYW5kcyBpbiB0ZXJtc1wiKTtcbiAgYXNzZXJ0KGJyYW5kcy5GZWUsIFwiRmVlIG1pc3NpbmcgZnJvbSBicmFuZHMgaW4gdGVybXNcIik7XG4gIGlmICghKFwiYXhlbGFyXCIgaW4gY2hhaW5JbmZvKSkge1xuICAgIHRyYWNlMTUoXCJcXHUyNkEwXFx1RkUwRiBubyBheGVsYXIgY2hhaW5JbmZvOyBHTVAgbm90IGF2YWlsYWJsZVwiLCBPYmplY3Qua2V5cyhjaGFpbkluZm8pKTtcbiAgfVxuICByZWdpc3RlckNoYWluc0FuZEFzc2V0cyhjaGFpbkh1YiwgYnJhbmRzLCBjaGFpbkluZm8sIGFzc2V0SW5mbywge1xuICAgIGxvZzogdHJhY2UxNVxuICB9KTtcbiAgY29uc3QgcHJvcG9zYWxTaGFwZXMgPSBtYWtlUHJvcG9zYWxTaGFwZXMoXG4gICAgYnJhbmRzLlVTREMsXG4gICAgYnJhbmRzLkZlZSxcbiAgICBicmFuZHMuQWNjZXNzXG4gICk7XG4gIGNvbnN0IG9mZmVyQXJnc1NoYXBlcyA9IG1ha2VPZmZlckFyZ3NTaGFwZXMoYnJhbmRzLlVTREMpO1xuICBjb25zdCBpbmVydFN1YnNjcmliZXIgPSB7XG4gICAgZ2V0VXBkYXRlU2luY2UoKSB7XG4gICAgICBhc3NlcnQuZmFpbChcInVzZSBvZmYtY2hhaW4gcXVlcmllc1wiKTtcbiAgICB9LFxuICAgIHN1YnNjcmliZUFmdGVyKCkge1xuICAgICAgYXNzZXJ0LmZhaWwoXCJ1c2Ugb2ZmLWNoYWluIHF1ZXJpZXNcIik7XG4gICAgfVxuICB9O1xuICBjb25zdCBjdHgxID0ge1xuICAgIHpvZVRvb2xzLFxuICAgIHVzZGM6IHtcbiAgICAgIGJyYW5kOiBicmFuZHMuVVNEQyxcbiAgICAgIGRlbm9tOiBOb25OdWxsaXNoKFxuICAgICAgICBjaGFpbkh1Yi5nZXREZW5vbShicmFuZHMuVVNEQyksXG4gICAgICAgIFwibm8gZGVub20gZm9yIFVTREMgYnJhbmRcIlxuICAgICAgKVxuICAgIH0sXG4gICAgZ21wRmVlSW5mbzoge1xuICAgICAgYnJhbmQ6IGJyYW5kcy5GZWUsXG4gICAgICBkZW5vbTogTm9uTnVsbGlzaChcbiAgICAgICAgY2hhaW5IdWIuZ2V0RGVub20oYnJhbmRzLkZlZSksXG4gICAgICAgIFwibm8gZGVub20gZm9yIEZlZSBicmFuZFwiXG4gICAgICApXG4gICAgfSxcbiAgICBheGVsYXJJZHMsXG4gICAgY29udHJhY3RzXG4gIH07XG4gIGNvbnN0IHsgcmViYWxhbmNlOiByZWJhbGFuY2UyLCByZWJhbGFuY2VGcm9tVHJhbnNmZXI6IHJlYmFsYW5jZUZyb21UcmFuc2ZlcjIgfSA9IG9yY2hlc3RyYXRlQWxsKFxuICAgIHtcbiAgICAgIHJlYmFsYW5jZSxcbiAgICAgIHJlYmFsYW5jZUZyb21UcmFuc2ZlclxuICAgIH0sXG4gICAgY3R4MVxuICApO1xuICBjb25zdCBtYWtlUG9ydGZvbGlvS2l0ID0gcHJlcGFyZVBvcnRmb2xpb0tpdCh6b25lLCB7XG4gICAgemNmLFxuICAgIHZvd1Rvb2xzLFxuICAgIGF4ZWxhcklkcyxcbiAgICByZWJhbGFuY2U6IHJlYmFsYW5jZTIsXG4gICAgcmViYWxhbmNlRnJvbVRyYW5zZmVyOiByZWJhbGFuY2VGcm9tVHJhbnNmZXIyLFxuICAgIHByb3Bvc2FsU2hhcGVzLFxuICAgIG9mZmVyQXJnc1NoYXBlcyxcbiAgICB0aW1lcjogdGltZXJTZXJ2aWNlLFxuICAgIGNoYWluSHViVG9vbHM6IHsgZ2V0Q2hhaW5JbmZvOiBjaGFpbkh1Yi5nZXRDaGFpbkluZm8uYmluZChjaGFpbkh1YikgfSxcbiAgICBwb3J0Zm9saW9zTm9kZTogRShzdG9yYWdlTm9kZSkubWFrZUNoaWxkTm9kZShcInBvcnRmb2xpb3NcIiksXG4gICAgbWFyc2hhbGxlcixcbiAgICB1c2RjQnJhbmQ6IGJyYW5kcy5VU0RDXG4gIH0pO1xuICBjb25zdCBwb3J0Zm9saW9zID0gem9uZS5tYXBTdG9yZShcInBvcnRmb2xpb3NcIik7XG4gIGNvbnN0IHsgb3BlblBvcnRmb2xpbzogb3BlblBvcnRmb2xpbzIgfSA9IG9yY2hlc3RyYXRlQWxsKFxuICAgIHsgb3BlblBvcnRmb2xpbyB9LFxuICAgIHtcbiAgICAgIC4uLmN0eDEsXG4gICAgICAvL1xuICAgICAgLy9cbiAgICAgIG1ha2VQb3J0Zm9saW9LaXQ6ICgpID0+IHtcbiAgICAgICAgY29uc3QgcG9ydGZvbGlvSWQgPSBwb3J0Zm9saW9zLmdldFNpemUoKTtcbiAgICAgICAgY29uc3QgaXQgPSBtYWtlUG9ydGZvbGlvS2l0KHsgcG9ydGZvbGlvSWQgfSk7XG4gICAgICAgIHBvcnRmb2xpb3MuaW5pdChwb3J0Zm9saW9JZCwgaXQpO1xuICAgICAgICByZXR1cm4gaXQ7XG4gICAgICB9LFxuICAgICAgLy9cbiAgICAgIGluZXJ0U3Vic2NyaWJlclxuICAgIH1cbiAgKTtcbiAgdHJhY2UxNShcIlhYWCBORUVEU1RFU1Q6IGJhZ2dhZ2UgdGVzdFwiKTtcbiAgY29uc3QgcHVibGljRmFjZXQgPSB6b25lLmV4byhcIlBvcnRmb2xpb1B1YlwiLCBpbnRlcmZhY2VUT0RPLCB7XG4gICAgLypcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuICAgICAqL1xuICAgIG1ha2VPcGVuUG9ydGZvbGlvSW52aXRhdGlvbigpIHtcbiAgICAgIHRyYWNlMTUoXCJtYWtlT3BlblBvcnRmb2xpb0ludml0YXRpb25cIik7XG4gICAgICByZXR1cm4gemNmLm1ha2VJbnZpdGF0aW9uKFxuICAgICAgICAoc2VhdCwgb2ZmZXJBcmdzKSA9PiB7XG4gICAgICAgICAgbXVzdE1hdGNoMyhvZmZlckFyZ3MsIG9mZmVyQXJnc1NoYXBlcy5vcGVuUG9ydGZvbGlvKTtcbiAgICAgICAgICByZXR1cm4gb3BlblBvcnRmb2xpbzIoc2VhdCwgb2ZmZXJBcmdzKTtcbiAgICAgICAgfSxcbiAgICAgICAgXCJvcGVuUG9ydGZvbGlvXCIsXG4gICAgICAgIHZvaWQgMCxcbiAgICAgICAgcHJvcG9zYWxTaGFwZXMub3BlblBvcnRmb2xpb1xuICAgICAgKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4geyBwdWJsaWNGYWNldCB9O1xufTtjb250cmFjdD0kY82PX2NvbnRyYWN0O1xuaGFyZGVuKGNvbnRyYWN0KTtcbnZhciAkY82PX3N0YXJ0PXdpdGhPcmNoZXN0cmF0aW9uKGNvbnRyYWN0KTtzdGFydD0kY82PX3N0YXJ0O1xuaGFyZGVuKHN0YXJ0KTtcbn0pKClcbiIsIl9fbGl2ZUV4cG9ydE1hcF9fIjp7IkF4ZWxhckNvbmZpZ1NoYXBlIjpbIkF4ZWxhckNvbmZpZ1NoYXBlIix0cnVlXSwibWV0YSI6WyJtZXRhIix0cnVlXSwiY29udHJhY3QiOlsiY29udHJhY3QiLHRydWVdLCJzdGFydCI6WyJzdGFydCIsdHJ1ZV19LCJfX3JlZXhwb3J0TWFwX18iOnt9LCJfX2ZpeGVkRXhwb3J0TWFwX18iOnt9LCJfX25lZWRzSW1wb3J0X18iOmZhbHNlLCJfX25lZWRzSW1wb3J0TWV0YV9fIjpmYWxzZX1QSwECHgMKAAAAAAAAAAAAfset57YCAAC2AgAAFAAAAAAAAAAAAAAApIEAAAAAY29tcGFydG1lbnQtbWFwLmpzb25QSwECHgMKAAAAAAAAAAAADw09+cQyDgDEMg4AQgAAAAAAAAAAAAAApIHoAgAAQGFnbG9jYWwvcG9ydGZvbGlvLWRlcGxveS12MC4xLjAvZGlzdC9wb3J0Zm9saW8uY29udHJhY3QuYnVuZGxlLmpzUEsFBgAAAAACAAIAsgAAAAw2DgAAAA==",
  "endoZipBase64Sha512": "1cfec33f0aea5488aefbbe6b861bf5211081ea139f1bc8bd03540c7b35d6dcb7342b5be675e183cbf2b9d3cd0f9098a2a5e4cf349ce56f11df33835d26d938d7"
}