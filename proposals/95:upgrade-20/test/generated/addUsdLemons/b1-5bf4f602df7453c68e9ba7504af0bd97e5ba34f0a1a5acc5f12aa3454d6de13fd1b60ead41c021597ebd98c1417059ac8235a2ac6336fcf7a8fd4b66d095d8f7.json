{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "5bf4f602df7453c68e9ba7504af0bd97e5ba34f0a1a5acc5f12aa3454d6de13fd1b60ead41c021597ebd98c1417059ac8235a2ac6336fcf7a8fd4b66d095d8f7"
}