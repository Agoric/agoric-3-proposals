{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "dd9936f5d30f621bff3aaf20a2d454f509ddbe0e011de385d075956589e9186336a96f4f11ee2d5cb1b12b8acfd7d4aba6beea22ef639b0c4ad6723d37467df4"
}